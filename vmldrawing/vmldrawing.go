//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package vmldrawing ;import (_aa "encoding/xml";_ag "fmt";_g "github.com/unidoc/unioffice";_gg "github.com/unidoc/unioffice/common/logger";_ggf "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_bc "github.com/unidoc/unioffice/schema/urn/schemas_microsoft_com/office/excel";
_aga "github.com/unidoc/unioffice/schema/urn/schemas_microsoft_com/vml";_b "strconv";_e "strings";);

// MSOPositionVerticalRelative get `mso-position-vertical-relative` attribute of shape style.
func (_cba *ShapeStyle )MSOPositionVerticalRelative ()string {return _cba ._fgd };func NewContainer ()*Container {return &Container {}};

// Left get left attribute of shape style.
func (_edd *ShapeStyle )Left ()float64 {return _edd ._ade };

// Height return height of shape.
func (_bac *ShapeStyle )Height ()float64 {return _bac ._cc };

// CreateFormula creates F element for typeFormulas.
func CreateFormula (s string )*_aga .CT_F {_fec :=_aga .NewCT_F ();_fec .EqnAttr =&s ;return _fec };

// FontSize returns fontSize of the text.
func (_cgd *TextpathStyle )FontSize ()int64 {return _cgd ._beg };func (_eb *Container )MarshalXML (e *_aa .Encoder ,start _aa .StartElement )error {start .Attr =append (start .Attr ,_aa .Attr {Name :_aa .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0076"},Value :"\u0075\u0072n\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d:v\u006d\u006c"});
start .Attr =append (start .Attr ,_aa .Attr {Name :_aa .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u006f"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006di\u0063\u0072\u006f\u0073\u006f\u0066t\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u006ff\u0066\u0069\u0063\u0065"});
start .Attr =append (start .Attr ,_aa .Attr {Name :_aa .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002d\u0063\u006fm\u003a\u006f\u0066\u0066\u0069c\u0065\u003ae\u0078\u0063\u0065\u006c"});
start .Name .Local ="\u0078\u006d\u006c";e .EncodeToken (start );if _eb .Layout !=nil {_aad :=_aa .StartElement {Name :_aa .Name {Local :"\u006f\u003a\u0073\u0068\u0061\u0070\u0065\u006c\u0061\u0079\u006f\u0075\u0074"}};e .EncodeElement (_eb .Layout ,_aad );
};if _eb .ShapeType !=nil {_bcd :=_aa .StartElement {Name :_aa .Name {Local :"v\u003a\u0073\u0068\u0061\u0070\u0065\u0074\u0079\u0070\u0065"}};e .EncodeElement (_eb .ShapeType ,_bcd );};for _ ,_aag :=range _eb .Shape {_ad :=_aa .StartElement {Name :_aa .Name {Local :"\u0076:\u0073\u0068\u0061\u0070\u0065"}};
e .EncodeElement (_aag ,_ad );};return e .EncodeToken (_aa .EndElement {Name :start .Name });};

// SetItalic sets text to italic.
func (_dbb *TextpathStyle )SetItalic (italic bool ){_dbb ._ebc =italic };

// Margins get margin top, left, bottom, and right of shape style.
func (_dee *ShapeStyle )Margins ()(float64 ,float64 ,float64 ,float64 ){return _dee ._bb ,_dee ._cf ,_dee ._cb ,_dee ._db ;};

// NewShapeStyle accept value of string style attribute in v:shape and format it to generate ShapeStyle.
func NewShapeStyle (style string )ShapeStyle {_de :=ShapeStyle {_ec :0,_cc :0};_def :=_e .Split (style ,"\u003b");for _ ,_gf :=range _def {_fe :=_e .Split (_gf ,"\u003a");if len (_fe )!=2{continue ;};var _aba error ;switch _fe [0]{case "\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e":_de ._bg =_fe [1];
break ;case "\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070":_de ._bb ,_aba =_b .ParseFloat (_e .ReplaceAll (_fe [1],"\u0070\u0074",""),64);break ;case "m\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074":_de ._cf ,_aba =_b .ParseFloat (_e .ReplaceAll (_fe [1],"\u0070\u0074",""),64);
break ;case "\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0062\u006f\u0074\u0074\u006f\u006d":_de ._cb ,_aba =_b .ParseFloat (_e .ReplaceAll (_fe [1],"\u0070\u0074",""),64);break ;case "\u006d\u0061\u0072g\u0069\u006e\u002d\u0072\u0069\u0067\u0068\u0074":_de ._db ,_aba =_b .ParseFloat (_e .ReplaceAll (_fe [1],"\u0070\u0074",""),64);
break ;case "\u0074\u006f\u0070":_de ._ed ,_aba =_b .ParseFloat (_e .ReplaceAll (_fe [1],"\u0070\u0074",""),64);break ;case "\u006c\u0065\u0066\u0074":_de ._ade ,_aba =_b .ParseFloat (_e .ReplaceAll (_fe [1],"\u0070\u0074",""),64);break ;case "\u0062\u006f\u0074\u0074\u006f\u006d":_de ._ggg ,_aba =_b .ParseFloat (_e .ReplaceAll (_fe [1],"\u0070\u0074",""),64);
break ;case "\u0072\u0069\u0067h\u0074":_de ._ge ,_aba =_b .ParseFloat (_e .ReplaceAll (_fe [1],"\u0070\u0074",""),64);break ;case "\u0077\u0069\u0064t\u0068":_de ._ec ,_aba =_b .ParseFloat (_e .ReplaceAll (_fe [1],"\u0070\u0074",""),64);break ;case "\u0068\u0065\u0069\u0067\u0068\u0074":_de ._cc ,_aba =_b .ParseFloat (_e .ReplaceAll (_fe [1],"\u0070\u0074",""),64);
break ;case "\u007a-\u0069\u006e\u0064\u0065\u0078":_de ._be ,_aba =_b .ParseInt (_fe [1],10,64);break ;case "\u006d\u0073\u006f-p\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c":_de ._dg =_fe [1];
break ;case "\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006fr\u0069z\u006f\u006e\u0074\u0061\u006c\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065":_de ._ee =_fe [1];break ;case "m\u0073\u006f\u002d\u0070os\u0069t\u0069\u006f\u006e\u002d\u0076e\u0072\u0074\u0069\u0063\u0061\u006c":_de ._bf =_fe [1];
break ;case "\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069o\u006e\u002d\u0076\u0065\u0072\u0074\u0069c\u0061\u006c\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065":_de ._fgd =_fe [1];break ;};if _aba !=nil {_gg .Log .Debug ("\u0055n\u0061\u0062l\u0065\u0020\u0074o\u0020\u0070\u0061\u0072\u0073\u0065\u0020s\u0074\u0079\u006c\u0065\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u003a\u0020\u0025\u0073 \u0076\u0061\u006c\u0075\u0065\u003a\u0020\u0025\u0076",_fe [0],_fe [1]);
};};return _de ;};

// FontFamily returns fontFamily of the text.
func (_agg *TextpathStyle )FontFamily ()string {return _agg ._bfg };type Container struct{Layout *_aga .OfcShapelayout ;ShapeType *_aga .Shapetype ;Shape []*_aga .Shape ;};const (ShapeStylePositionAbsolute ="\u0061\u0062\u0073\u006f\u006c\u0075\u0074\u0065";
ShapeStylePositionRelative ="\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065";);

// MSOPositionHorizontalRelative get `mso-position-horizontal-relative` attribute of shape style.
func (_eea *ShapeStyle )MSOPositionHorizontalRelative ()string {return _eea ._ee };

// Bottom get bottom attribute of shape style.
func (_df *ShapeStyle )Bottom ()float64 {return _df ._ggg };

// NewCommentDrawing constructs a new comment drawing.
func NewCommentDrawing ()*Container {_f :=NewContainer ();_f .Layout =_aga .NewOfcShapelayout ();_f .Layout .ExtAttr =_aga .ST_ExtEdit ;_f .Layout .Idmap =_aga .NewOfcCT_IdMap ();_f .Layout .Idmap .DataAttr =_g .String ("\u0031");_f .Layout .Idmap .ExtAttr =_aga .ST_ExtEdit ;
_f .ShapeType =_aga .NewShapetype ();_f .ShapeType .IdAttr =_g .String ("_\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0032\u0030\u0032");_f .ShapeType .CoordsizeAttr =_g .String ("2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030");_f .ShapeType .SptAttr =_g .Float32 (202);
_f .ShapeType .PathAttr =_g .String ("\u006d\u0030\u002c0l\u0030\u002c\u0032\u0031\u0036\u0030\u0030\u002c\u00321\u00360\u0030,\u00321\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030\u002c\u0030\u0078\u0065");_ab :=_aga .NewEG_ShapeElements ();_f .ShapeType .EG_ShapeElements =append (_f .ShapeType .EG_ShapeElements ,_ab );
_ab .Path =_aga .NewPath ();_ab .Path .GradientshapeokAttr =_ggf .ST_TrueFalseT ;_ab .Path .ConnecttypeAttr =_aga .OfcST_ConnectTypeRect ;return _f ;};func (_gd *Container )UnmarshalXML (d *_aa .Decoder ,start _aa .StartElement )error {_gd .Shape =nil ;
_ef :for {_ce ,_cg :=d .Token ();if _cg !=nil {return _cg ;};switch _ddc :=_ce .(type ){case _aa .StartElement :switch _ddc .Name .Local {case "s\u0068\u0061\u0070\u0065\u006c\u0061\u0079\u006f\u0075\u0074":_gd .Layout =_aga .NewOfcShapelayout ();if _eba :=d .DecodeElement (_gd .Layout ,&_ddc );
_eba !=nil {return _eba ;};case "\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e":_gd .ShapeType =_aga .NewShapetype ();if _fg :=d .DecodeElement (_gd .ShapeType ,&_ddc );_fg !=nil {return _fg ;};case "\u0073\u0068\u0061p\u0065":_ddcf :=_aga .NewShape ();
if _ea :=d .DecodeElement (_ddcf ,&_ddc );_ea !=nil {return _ea ;};_gd .Shape =append (_gd .Shape ,_ddcf );};case _aa .EndElement :break _ef ;};};return nil ;};

// SetBold sets text to bold.
func (_cgf *TextpathStyle )SetBold (bold bool ){_cgf ._age =bold };

// SetHeight set height of shape.
func (_gc *ShapeStyle )SetHeight (height float64 ){_gc ._cc =height };

// TextpathStyle is style attribute of element v:textpath.
type TextpathStyle struct{_bfg string ;_beg int64 ;_age bool ;_ebc bool ;};

// ToString formatting ShapeStyle to string.
func (_fd *ShapeStyle )String ()string {_gdf :="";_gdf +=_ag .Sprintf ("\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u003a\u0025\u0073\u003b",_fd ._bg );_gdf +=_ag .Sprintf ("\u006da\u0072g\u0069\u006e\u002d\u006c\u0065\u0066\u0074\u003a\u0025\u0064\u003b",int64 (_fd ._cf ));
_gdf +=_ag .Sprintf ("\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074\u006fp\u003a\u0025\u0064\u003b",int64 (_fd ._bb ));_gdf +=_ag .Sprintf ("w\u0069\u0064\u0074\u0068\u003a\u0025\u0064\u0070\u0074\u003b",int64 (_fd ._ec ));_gdf +=_ag .Sprintf ("\u0068\u0065\u0069g\u0068\u0074\u003a\u0025\u0064\u0070\u0074\u003b",int64 (_fd ._cc ));
_gdf +=_ag .Sprintf ("z\u002d\u0069\u006e\u0064\u0065\u0078\u003a\u0025\u0064\u003b",_fd ._be );_gdf +=_ag .Sprintf ("m\u0073\u006f\u002d\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069z\u006f\u006e\u0074a\u006c:\u0025\u0073\u003b",_fd ._dg );
_gdf +=_ag .Sprintf ("\u006d\u0073o-\u0070\u006f\u0073i\u0074\u0069\u006f\u006e-ho\u0072iz\u006f\u006e\u0074\u0061\u006c\u002d\u0072el\u0061\u0074\u0069\u0076\u0065\u003a\u0025s\u003b",_fd ._ee );_gdf +=_ag .Sprintf ("\u006ds\u006f\u002d\u0070\u006fs\u0069\u0074\u0069\u006f\u006e-\u0076e\u0072t\u0069\u0063\u0061\u006c\u003a\u0025\u0073;",_fd ._bf );
_gdf +=_ag .Sprintf ("\u006d\u0073\u006f-p\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076e\u0072t\u0069c\u0061l\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065\u003a\u0025\u0073\u003b",_fd ._fgd );return _gdf ;};

// Width return width of shape.
func (_gfg *ShapeStyle )Width ()float64 {return _gfg ._ec };

// NewCommentShape creates a new comment shape for a given cell index.  The
// indices here are zero based.
func NewCommentShape (col ,row int64 )*_aga .Shape {_eg :=_aga .NewShape ();_eg .IdAttr =_g .String (_ag .Sprintf ("\u0063\u0073\u005f\u0025\u0064\u005f\u0025\u0064",col ,row ));_eg .TypeAttr =_g .String ("\u0023\u005f\u00780\u0030\u0030\u0030\u005f\u0074\u0032\u0030\u0032");
_eg .StyleAttr =_g .String ("\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u003a\u0061\u0062\u0073\u006f\u006cu\u0074\u0065\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074:\u0038\u0030\u0070\u0074;\u006d\u0061\u0072\u0067\u0069n-\u0074o\u0070\u003a\u0032pt\u003b\u0077\u0069\u0064\u0074\u0068\u003a1\u0030\u0034\u0070\u0074\u003b\u0068\u0065\u0069\u0067\u0068\u0074\u003a\u0037\u0036\u0070\u0074\u003b\u007a\u002d\u0069\u006e\u0064\u0065x\u003a\u0031\u003bv\u0069\u0073\u0069\u0062\u0069\u006c\u0069t\u0079\u003a\u0068\u0069\u0064\u0064\u0065\u006e");
_eg .FillcolorAttr =_g .String ("\u0023f\u0062\u0066\u0036\u0064\u0036");_eg .StrokecolorAttr =_g .String ("\u0023e\u0064\u0065\u0061\u0061\u0031");_ba :=_aga .NewEG_ShapeElements ();_ba .Fill =_aga .NewFill ();_ba .Fill .Color2Attr =_g .String ("\u0023f\u0062\u0066\u0065\u0038\u0032");
_ba .Fill .AngleAttr =_g .Float64 (-180);_ba .Fill .TypeAttr =_aga .ST_FillTypeGradient ;_ba .Fill .Fill =_aga .NewOfcFill ();_ba .Fill .Fill .ExtAttr =_aga .ST_ExtView ;_ba .Fill .Fill .TypeAttr =_aga .OfcST_FillTypeGradientUnscaled ;_eg .EG_ShapeElements =append (_eg .EG_ShapeElements ,_ba );
_fb :=_aga .NewEG_ShapeElements ();_fb .Shadow =_aga .NewShadow ();_fb .Shadow .OnAttr =_ggf .ST_TrueFalseT ;_fb .Shadow .ObscuredAttr =_ggf .ST_TrueFalseT ;_eg .EG_ShapeElements =append (_eg .EG_ShapeElements ,_fb );_fc :=_aga .NewEG_ShapeElements ();
_fc .Path =_aga .NewPath ();_fc .Path .ConnecttypeAttr =_aga .OfcST_ConnectTypeNone ;_eg .EG_ShapeElements =append (_eg .EG_ShapeElements ,_fc );_c :=_aga .NewEG_ShapeElements ();_c .Textbox =_aga .NewTextbox ();_c .Textbox .StyleAttr =_g .String ("\u006d\u0073\u006f\u002ddi\u0072\u0065\u0063\u0074\u0069\u006f\u006e\u002d\u0061\u006c\u0074\u003a\u0061\u0075t\u006f");
_eg .EG_ShapeElements =append (_eg .EG_ShapeElements ,_c );_d :=_aga .NewEG_ShapeElements ();_d .ClientData =_bc .NewClientData ();_d .ClientData .ObjectTypeAttr =_bc .ST_ObjectTypeNote ;_d .ClientData .MoveWithCells =_ggf .ST_TrueFalseBlankT ;_d .ClientData .SizeWithCells =_ggf .ST_TrueFalseBlankT ;
_d .ClientData .Anchor =_g .String ("\u0031,\u0020\u0031\u0035\u002c\u0020\u0030\u002c\u0020\u0032\u002c\u00202\u002c\u0020\u0035\u0034\u002c\u0020\u0035\u002c\u0020\u0033");_d .ClientData .AutoFill =_ggf .ST_TrueFalseBlankFalse ;_d .ClientData .Row =_g .Int64 (row );
_d .ClientData .Column =_g .Int64 (col );_eg .EG_ShapeElements =append (_eg .EG_ShapeElements ,_d );return _eg ;};

// Top get top attribute of shape style.
func (_fcf *ShapeStyle )Top ()float64 {return _fcf ._ed };

// ShapeStyle is style attribute of v:shape element.
type ShapeStyle struct{_bg string ;_bb float64 ;_cf float64 ;_cb float64 ;_db float64 ;_ed float64 ;_ade float64 ;_ggg float64 ;_ge float64 ;_ec float64 ;_cc float64 ;_be int64 ;_dg string ;_ee string ;_bf string ;_fgd string ;};

// IsItalic returns true if text is italic.
func (_cfa *TextpathStyle )IsItalic ()bool {return _cfa ._ebc };

// ToString generate string of TextpathStyle.
func (_ecd *TextpathStyle )String ()string {_cbf :="";_cbf +=_ag .Sprintf ("\u0066o\u006et\u002d\u0066\u0061\u006d\u0069\u006c\u0079\u003a\u0025\u0073\u003b",_ecd ._bfg );_cbf +=_ag .Sprintf ("\u0066o\u006et\u002d\u0073\u0069\u007a\u0065\u003a\u0025\u0064\u0070\u0074\u003b",_ecd ._beg );
if _ecd ._ebc {_cbf +=_ag .Sprintf ("\u0066o\u006et\u002d\u0073\u0074\u0079\u006ce\u003a\u0069t\u0061\u006c\u0069\u0063\u003b");};if _ecd ._age {_cbf +=_ag .Sprintf ("\u0066\u006f\u006e\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074\u003ab\u006f\u006c\u0064\u003b");
};return _cbf ;};

// Position get position attribute of shape style.
func (_gcb *ShapeStyle )Position ()string {return _gcb ._bg };

// NewTextpathStyle accept value of string style attribute of element v:textpath and format it to generate TextpathStyle.
func NewTextpathStyle (style string )TextpathStyle {_eaf :=TextpathStyle {_bfg :"\u0022C\u0061\u006c\u0069\u0062\u0072\u0069\"",_beg :44,_age :false ,_ebc :false };_ae :=_e .Split (style ,"\u003b");for _ ,_fbd :=range _ae {_gcc :=_e .Split (_fbd ,"\u003a");
if len (_gcc )!=2{continue ;};switch _gcc [0]{case "f\u006f\u006e\u0074\u002d\u0066\u0061\u006d\u0069\u006c\u0079":_eaf ._bfg =_gcc [1];break ;case "\u0066o\u006e\u0074\u002d\u0073\u0069\u007ae":_eaf ._beg ,_ =_b .ParseInt (_e .ReplaceAll (_gcc [1],"\u0070\u0074",""),10,64);
break ;case "f\u006f\u006e\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074":_eaf ._age =_gcc [1]=="\u0062\u006f\u006c\u0064";break ;case "\u0066\u006f\u006e\u0074\u002d\u0073\u0074\u0079\u006c\u0065":_eaf ._ebc =_gcc [1]=="\u0069\u0074\u0061\u006c\u0069\u0063";
break ;};};return _eaf ;};

// SetFontFamily sets text's fontFamily.
func (_ege *TextpathStyle )SetFontFamily (fontFamily string ){_ege ._bfg =fontFamily };

// SetWidth set width of shape.
func (_gb *ShapeStyle )SetWidth (width float64 ){_gb ._ec =width };

// SetFontSize sets text's fontSize.
func (_abe *TextpathStyle )SetFontSize (fontSize int64 ){_abe ._beg =fontSize };

// IsBold returns true if text is bold.
func (_fdb *TextpathStyle )IsBold ()bool {return _fdb ._age };

// Right get right attribute of shape style.
func (_adg *ShapeStyle )Right ()float64 {return _adg ._ge };