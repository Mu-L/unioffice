//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package vmldrawing ;import (_d "encoding/xml";_e "fmt";_a "github.com/unidoc/unioffice";_f "github.com/unidoc/unioffice/common/logger";_db "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_af "github.com/unidoc/unioffice/schema/urn/schemas_microsoft_com/office/excel";
_eg "github.com/unidoc/unioffice/schema/urn/schemas_microsoft_com/vml";_ee "strconv";_g "strings";);func NewContainer ()*Container {return &Container {}};

// MSOPositionVerticalRelative get `mso-position-vertical-relative` attribute of shape style.
func (_gb *ShapeStyle )MSOPositionVerticalRelative ()string {return _gb ._gec };

// NewCommentDrawing constructs a new comment drawing.
func NewCommentDrawing ()*Container {_ab :=NewContainer ();_ab .Layout =_eg .NewOfcShapelayout ();_ab .Layout .ExtAttr =_eg .ST_ExtEdit ;_ab .Layout .Idmap =_eg .NewOfcCT_IdMap ();_ab .Layout .Idmap .DataAttr =_a .String ("\u0031");_ab .Layout .Idmap .ExtAttr =_eg .ST_ExtEdit ;
_ab .ShapeType =_eg .NewShapetype ();_ab .ShapeType .IdAttr =_a .String ("_\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0032\u0030\u0032");_ab .ShapeType .CoordsizeAttr =_a .String ("2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030");_ab .ShapeType .SptAttr =_a .Float32 (202);
_ab .ShapeType .PathAttr =_a .String ("\u006d\u0030\u002c0l\u0030\u002c\u0032\u0031\u0036\u0030\u0030\u002c\u00321\u00360\u0030,\u00321\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030\u002c\u0030\u0078\u0065");_gf :=_eg .NewEG_ShapeElements ();_ab .ShapeType .EG_ShapeElements =append (_ab .ShapeType .EG_ShapeElements ,_gf );
_gf .Path =_eg .NewPath ();_gf .Path .GradientshapeokAttr =_db .ST_TrueFalseT ;_gf .Path .ConnecttypeAttr =_eg .OfcST_ConnectTypeRect ;return _ab ;};

// Top get top attribute of shape style.
func (_dcd *ShapeStyle )Top ()float64 {return _dcd ._ae };

// Bottom get bottom attribute of shape style.
func (_ff *ShapeStyle )Bottom ()float64 {return _ff ._gdd };

// Width return width of shape.
func (_bbf *ShapeStyle )Width ()float64 {return _bbf ._bb };type Container struct{Layout *_eg .OfcShapelayout ;ShapeType *_eg .Shapetype ;Shape []*_eg .Shape ;};

// NewShapeStyle accept value of string style attribute in v:shape and format it to generate ShapeStyle.
func NewShapeStyle (style string )ShapeStyle {_ccb :=ShapeStyle {_bb :0,_gac :0};_be :=_g .Split (style ,"\u003b");for _ ,_aad :=range _be {_cce :=_g .Split (_aad ,"\u003a");if len (_cce )!=2{continue ;};var _bec error ;switch _cce [0]{case "\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e":_ccb ._ba =_cce [1];
break ;case "\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070":_ccb ._dc ,_bec =_ee .ParseFloat (_g .ReplaceAll (_cce [1],"\u0070\u0074",""),64);break ;case "m\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074":_ccb ._ce ,_bec =_ee .ParseFloat (_g .ReplaceAll (_cce [1],"\u0070\u0074",""),64);
break ;case "\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0062\u006f\u0074\u0074\u006f\u006d":_ccb ._gea ,_bec =_ee .ParseFloat (_g .ReplaceAll (_cce [1],"\u0070\u0074",""),64);break ;case "\u006d\u0061\u0072g\u0069\u006e\u002d\u0072\u0069\u0067\u0068\u0074":_ccb ._fd ,_bec =_ee .ParseFloat (_g .ReplaceAll (_cce [1],"\u0070\u0074",""),64);
break ;case "\u0074\u006f\u0070":_ccb ._ae ,_bec =_ee .ParseFloat (_g .ReplaceAll (_cce [1],"\u0070\u0074",""),64);break ;case "\u006c\u0065\u0066\u0074":_ccb ._cfd ,_bec =_ee .ParseFloat (_g .ReplaceAll (_cce [1],"\u0070\u0074",""),64);break ;case "\u0062\u006f\u0074\u0074\u006f\u006d":_ccb ._gdd ,_bec =_ee .ParseFloat (_g .ReplaceAll (_cce [1],"\u0070\u0074",""),64);
break ;case "\u0072\u0069\u0067h\u0074":_ccb ._afd ,_bec =_ee .ParseFloat (_g .ReplaceAll (_cce [1],"\u0070\u0074",""),64);break ;case "\u0077\u0069\u0064t\u0068":_ccb ._bb ,_bec =_ee .ParseFloat (_g .ReplaceAll (_cce [1],"\u0070\u0074",""),64);break ;
case "\u0068\u0065\u0069\u0067\u0068\u0074":_ccb ._gac ,_bec =_ee .ParseFloat (_g .ReplaceAll (_cce [1],"\u0070\u0074",""),64);break ;case "\u007a-\u0069\u006e\u0064\u0065\u0078":_ccb ._cb ,_bec =_ee .ParseInt (_cce [1],10,64);break ;case "\u006d\u0073\u006f-p\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c":_ccb ._aa =_cce [1];
break ;case "\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006fr\u0069z\u006f\u006e\u0074\u0061\u006c\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065":_ccb ._gg =_cce [1];break ;case "m\u0073\u006f\u002d\u0070os\u0069t\u0069\u006f\u006e\u002d\u0076e\u0072\u0074\u0069\u0063\u0061\u006c":_ccb ._gc =_cce [1];
break ;case "\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069o\u006e\u002d\u0076\u0065\u0072\u0074\u0069c\u0061\u006c\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065":_ccb ._gec =_cce [1];break ;};if _bec !=nil {_f .Log .Debug ("\u0055n\u0061\u0062l\u0065\u0020\u0074o\u0020\u0070\u0061\u0072\u0073\u0065\u0020s\u0074\u0079\u006c\u0065\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u003a\u0020\u0025\u0073 \u0076\u0061\u006c\u0075\u0065\u003a\u0020\u0025\u0076",_cce [0],_cce [1]);
};};return _ccb ;};

// Margins get margin top, left, bottom, and right of shape style.
func (_ag *ShapeStyle )Margins ()(float64 ,float64 ,float64 ,float64 ){return _ag ._dc ,_ag ._ce ,_ag ._gea ,_ag ._fd ;};

// ShapeStyle is style attribute of v:shape element.
type ShapeStyle struct{_ba string ;_dc float64 ;_ce float64 ;_gea float64 ;_fd float64 ;_ae float64 ;_cfd float64 ;_gdd float64 ;_afd float64 ;_bb float64 ;_gac float64 ;_cb int64 ;_aa string ;_gg string ;_gc string ;_gec string ;};

// SetFontFamily sets text's fontFamily.
func (_ege *TextpathStyle )SetFontFamily (fontFamily string ){_ege ._ef =fontFamily };

// SetBold sets text to bold.
func (_ecc *TextpathStyle )SetBold (bold bool ){_ecc ._ffb =bold };

// Height return height of shape.
func (_df *ShapeStyle )Height ()float64 {return _df ._gac };

// MSOPositionHorizontalRelative get `mso-position-horizontal-relative` attribute of shape style.
func (_fdcg *ShapeStyle )MSOPositionHorizontalRelative ()string {return _fdcg ._gg };

// IsBold returns true if text is bold.
func (_fb *TextpathStyle )IsBold ()bool {return _fb ._ffb };

// CreateFormula creates F element for typeFormulas.
func CreateFormula (s string )*_eg .CT_F {_eb :=_eg .NewCT_F ();_eb .EqnAttr =&s ;return _eb };func (_gfd *Container )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_gfd .Shape =nil ;_eec :for {_afc ,_ga :=d .Token ();if _ga !=nil {return _ga ;
};switch _bc :=_afc .(type ){case _d .StartElement :switch _bc .Name .Local {case "s\u0068\u0061\u0070\u0065\u006c\u0061\u0079\u006f\u0075\u0074":_gfd .Layout =_eg .NewOfcShapelayout ();if _cf :=d .DecodeElement (_gfd .Layout ,&_bc );_cf !=nil {return _cf ;
};case "\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e":_gfd .ShapeType =_eg .NewShapetype ();if _cd :=d .DecodeElement (_gfd .ShapeType ,&_bc );_cd !=nil {return _cd ;};case "\u0073\u0068\u0061p\u0065":_cc :=_eg .NewShape ();if _dde :=d .DecodeElement (_cc ,&_bc );
_dde !=nil {return _dde ;};_gfd .Shape =append (_gfd .Shape ,_cc );};case _d .EndElement :break _eec ;};};return nil ;};

// ToString generate string of TextpathStyle.
func (_gbc *TextpathStyle )String ()string {_ggf :="";_ggf +=_e .Sprintf ("\u0066o\u006et\u002d\u0066\u0061\u006d\u0069\u006c\u0079\u003a\u0025\u0073\u003b",_gbc ._ef );_ggf +=_e .Sprintf ("\u0066o\u006et\u002d\u0073\u0069\u007a\u0065\u003a\u0025\u0064\u0070\u0074\u003b",_gbc ._bfb );
if _gbc ._cdc {_ggf +=_e .Sprintf ("\u0066o\u006et\u002d\u0073\u0074\u0079\u006ce\u003a\u0069t\u0061\u006c\u0069\u0063\u003b");};if _gbc ._ffb {_ggf +=_e .Sprintf ("\u0066\u006f\u006e\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074\u003ab\u006f\u006c\u0064\u003b");
};return _ggf ;};

// SetWidth set width of shape.
func (_fca *ShapeStyle )SetWidth (width float64 ){_fca ._bb =width };

// IsItalic returns true if text is italic.
func (_beg *TextpathStyle )IsItalic ()bool {return _beg ._cdc };

// NewTextpathStyle accept value of string style attribute of element v:textpath and format it to generate TextpathStyle.
func NewTextpathStyle (style string )TextpathStyle {_ccbe :=TextpathStyle {_ef :"\u0022C\u0061\u006c\u0069\u0062\u0072\u0069\"",_bfb :44,_ffb :false ,_cdc :false };_abg :=_g .Split (style ,"\u003b");for _ ,_bga :=range _abg {_eed :=_g .Split (_bga ,"\u003a");
if len (_eed )!=2{continue ;};switch _eed [0]{case "f\u006f\u006e\u0074\u002d\u0066\u0061\u006d\u0069\u006c\u0079":_ccbe ._ef =_eed [1];break ;case "\u0066o\u006e\u0074\u002d\u0073\u0069\u007ae":_ccbe ._bfb ,_ =_ee .ParseInt (_g .ReplaceAll (_eed [1],"\u0070\u0074",""),10,64);
break ;case "f\u006f\u006e\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074":_ccbe ._ffb =_eed [1]=="\u0062\u006f\u006c\u0064";break ;case "\u0066\u006f\u006e\u0074\u002d\u0073\u0074\u0079\u006c\u0065":_ccbe ._cdc =_eed [1]=="\u0069\u0074\u0061\u006c\u0069\u0063";
break ;};};return _ccbe ;};

// SetHeight set height of shape.
func (_add *ShapeStyle )SetHeight (height float64 ){_add ._gac =height };

// SetFontSize sets text's fontSize.
func (_bae *TextpathStyle )SetFontSize (fontSize int64 ){_bae ._bfb =fontSize };

// TextpathStyle is style attribute of element v:textpath.
type TextpathStyle struct{_ef string ;_bfb int64 ;_ffb bool ;_cdc bool ;};

// Right get right attribute of shape style.
func (_adb *ShapeStyle )Right ()float64 {return _adb ._afd };

// Position get position attribute of shape style.
func (_bg *ShapeStyle )Position ()string {return _bg ._ba };const (ShapeStylePositionAbsolute ="\u0061\u0062\u0073\u006f\u006c\u0075\u0074\u0065";ShapeStylePositionRelative ="\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065";);

// SetItalic sets text to italic.
func (_beb *TextpathStyle )SetItalic (italic bool ){_beb ._cdc =italic };

// Left get left attribute of shape style.
func (_cg *ShapeStyle )Left ()float64 {return _cg ._cfd };

// NewCommentShape creates a new comment shape for a given cell index.  The
// indices here are zero based.
func NewCommentShape (col ,row int64 )*_eg .Shape {_dd :=_eg .NewShape ();_dd .IdAttr =_a .String (_e .Sprintf ("\u0063\u0073\u005f\u0025\u0064\u005f\u0025\u0064",col ,row ));_dd .TypeAttr =_a .String ("\u0023\u005f\u00780\u0030\u0030\u0030\u005f\u0074\u0032\u0030\u0032");
_dd .StyleAttr =_a .String ("\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u003a\u0061\u0062\u0073\u006f\u006cu\u0074\u0065\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074:\u0038\u0030\u0070\u0074;\u006d\u0061\u0072\u0067\u0069n-\u0074o\u0070\u003a\u0032pt\u003b\u0077\u0069\u0064\u0074\u0068\u003a1\u0030\u0034\u0070\u0074\u003b\u0068\u0065\u0069\u0067\u0068\u0074\u003a\u0037\u0036\u0070\u0074\u003b\u007a\u002d\u0069\u006e\u0064\u0065x\u003a\u0031\u003bv\u0069\u0073\u0069\u0062\u0069\u006c\u0069t\u0079\u003a\u0068\u0069\u0064\u0064\u0065\u006e");
_dd .FillcolorAttr =_a .String ("\u0023f\u0062\u0066\u0036\u0064\u0036");_dd .StrokecolorAttr =_a .String ("\u0023e\u0064\u0065\u0061\u0061\u0031");_ge :=_eg .NewEG_ShapeElements ();_ge .Fill =_eg .NewFill ();_ge .Fill .Color2Attr =_a .String ("\u0023f\u0062\u0066\u0065\u0038\u0032");
_ge .Fill .AngleAttr =_a .Float64 (-180);_ge .Fill .TypeAttr =_eg .ST_FillTypeGradient ;_ge .Fill .Fill =_eg .NewOfcFill ();_ge .Fill .Fill .ExtAttr =_eg .ST_ExtView ;_ge .Fill .Fill .TypeAttr =_eg .OfcST_FillTypeGradientUnscaled ;_dd .EG_ShapeElements =append (_dd .EG_ShapeElements ,_ge );
_fc :=_eg .NewEG_ShapeElements ();_fc .Shadow =_eg .NewShadow ();_fc .Shadow .OnAttr =_db .ST_TrueFalseT ;_fc .Shadow .ObscuredAttr =_db .ST_TrueFalseT ;_dd .EG_ShapeElements =append (_dd .EG_ShapeElements ,_fc );_ec :=_eg .NewEG_ShapeElements ();_ec .Path =_eg .NewPath ();
_ec .Path .ConnecttypeAttr =_eg .OfcST_ConnectTypeNone ;_dd .EG_ShapeElements =append (_dd .EG_ShapeElements ,_ec );_gd :=_eg .NewEG_ShapeElements ();_gd .Textbox =_eg .NewTextbox ();_gd .Textbox .StyleAttr =_a .String ("\u006d\u0073\u006f\u002ddi\u0072\u0065\u0063\u0074\u0069\u006f\u006e\u002d\u0061\u006c\u0074\u003a\u0061\u0075t\u006f");
_dd .EG_ShapeElements =append (_dd .EG_ShapeElements ,_gd );_ad :=_eg .NewEG_ShapeElements ();_ad .ClientData =_af .NewClientData ();_ad .ClientData .ObjectTypeAttr =_af .ST_ObjectTypeNote ;_ad .ClientData .MoveWithCells =_db .ST_TrueFalseBlankT ;_ad .ClientData .SizeWithCells =_db .ST_TrueFalseBlankT ;
_ad .ClientData .Anchor =_a .String ("\u0031,\u0020\u0031\u0035\u002c\u0020\u0030\u002c\u0020\u0032\u002c\u00202\u002c\u0020\u0035\u0034\u002c\u0020\u0035\u002c\u0020\u0033");_ad .ClientData .AutoFill =_db .ST_TrueFalseBlankFalse ;_ad .ClientData .Row =_a .Int64 (row );
_ad .ClientData .Column =_a .Int64 (col );_dd .EG_ShapeElements =append (_dd .EG_ShapeElements ,_ad );return _dd ;};func (_fg *Container )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0076"},Value :"\u0075\u0072n\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d:v\u006d\u006c"});
start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u006f"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006di\u0063\u0072\u006f\u0073\u006f\u0066t\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u006ff\u0066\u0069\u0063\u0065"});
start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002d\u0063\u006fm\u003a\u006f\u0066\u0066\u0069c\u0065\u003ae\u0078\u0063\u0065\u006c"});
start .Name .Local ="\u0078\u006d\u006c";e .EncodeToken (start );if _fg .Layout !=nil {_ada :=_d .StartElement {Name :_d .Name {Local :"\u006f\u003a\u0073\u0068\u0061\u0070\u0065\u006c\u0061\u0079\u006f\u0075\u0074"}};e .EncodeElement (_fg .Layout ,_ada );
};if _fg .ShapeType !=nil {_eef :=_d .StartElement {Name :_d .Name {Local :"v\u003a\u0073\u0068\u0061\u0070\u0065\u0074\u0079\u0070\u0065"}};e .EncodeElement (_fg .ShapeType ,_eef );};for _ ,_ece :=range _fg .Shape {_c :=_d .StartElement {Name :_d .Name {Local :"\u0076:\u0073\u0068\u0061\u0070\u0065"}};
e .EncodeElement (_ece ,_c );};return e .EncodeToken (_d .EndElement {Name :start .Name });};

// ToString formatting ShapeStyle to string.
func (_bf *ShapeStyle )String ()string {_dbg :="";_dbg +=_e .Sprintf ("\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u003a\u0025\u0073\u003b",_bf ._ba );_dbg +=_e .Sprintf ("\u006da\u0072g\u0069\u006e\u002d\u006c\u0065\u0066\u0074\u003a\u0025\u0064\u003b",int64 (_bf ._ce ));
_dbg +=_e .Sprintf ("\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074\u006fp\u003a\u0025\u0064\u003b",int64 (_bf ._dc ));_dbg +=_e .Sprintf ("w\u0069\u0064\u0074\u0068\u003a\u0025\u0064\u0070\u0074\u003b",int64 (_bf ._bb ));_dbg +=_e .Sprintf ("\u0068\u0065\u0069g\u0068\u0074\u003a\u0025\u0064\u0070\u0074\u003b",int64 (_bf ._gac ));
_dbg +=_e .Sprintf ("z\u002d\u0069\u006e\u0064\u0065\u0078\u003a\u0025\u0064\u003b",_bf ._cb );_dbg +=_e .Sprintf ("m\u0073\u006f\u002d\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069z\u006f\u006e\u0074a\u006c:\u0025\u0073\u003b",_bf ._aa );
_dbg +=_e .Sprintf ("\u006d\u0073o-\u0070\u006f\u0073i\u0074\u0069\u006f\u006e-ho\u0072iz\u006f\u006e\u0074\u0061\u006c\u002d\u0072el\u0061\u0074\u0069\u0076\u0065\u003a\u0025s\u003b",_bf ._gg );_dbg +=_e .Sprintf ("\u006ds\u006f\u002d\u0070\u006fs\u0069\u0074\u0069\u006f\u006e-\u0076e\u0072t\u0069\u0063\u0061\u006c\u003a\u0025\u0073;",_bf ._gc );
_dbg +=_e .Sprintf ("\u006d\u0073\u006f-p\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076e\u0072t\u0069c\u0061l\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065\u003a\u0025\u0073\u003b",_bf ._gec );return _dbg ;};

// FontSize returns fontSize of the text.
func (_dg *TextpathStyle )FontSize ()int64 {return _dg ._bfb };

// FontFamily returns fontFamily of the text.
func (_abf *TextpathStyle )FontFamily ()string {return _abf ._ef };