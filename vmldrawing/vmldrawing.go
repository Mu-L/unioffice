//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package vmldrawing ;import (_b "encoding/xml";_c "fmt";_ef "github.com/unidoc/unioffice/v2";_g "github.com/unidoc/unioffice/v2/common/logger";_dd "github.com/unidoc/unioffice/v2/schema/soo/ofc/sharedTypes";_de "github.com/unidoc/unioffice/v2/schema/urn/schemas_microsoft_com/office/excel";
_ee "github.com/unidoc/unioffice/v2/schema/urn/schemas_microsoft_com/vml";_f "strconv";_e "strings";);func (_gb *Container )MarshalXML (e *_b .Encoder ,start _b .StartElement )error {start .Attr =append (start .Attr ,_b .Attr {Name :_b .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0076"},Value :"\u0075\u0072n\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d:v\u006d\u006c"});
start .Attr =append (start .Attr ,_b .Attr {Name :_b .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u006f"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006di\u0063\u0072\u006f\u0073\u006f\u0066t\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u006ff\u0066\u0069\u0063\u0065"});
start .Attr =append (start .Attr ,_b .Attr {Name :_b .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002d\u0063\u006fm\u003a\u006f\u0066\u0066\u0069c\u0065\u003ae\u0078\u0063\u0065\u006c"});
start .Name .Local ="\u0078\u006d\u006c";e .EncodeToken (start );if _gb .Layout !=nil {_gf :=_b .StartElement {Name :_b .Name {Local :"\u006f\u003a\u0073\u0068\u0061\u0070\u0065\u006c\u0061\u0079\u006f\u0075\u0074"}};e .EncodeElement (_gb .Layout ,_gf );
};if _gb .ShapeType !=nil {_fd :=_b .StartElement {Name :_b .Name {Local :"v\u003a\u0073\u0068\u0061\u0070\u0065\u0074\u0079\u0070\u0065"}};e .EncodeElement (_gb .ShapeType ,_fd );};for _ ,_deg :=range _gb .Shape {_fb :=_b .StartElement {Name :_b .Name {Local :"\u0076:\u0073\u0068\u0061\u0070\u0065"}};
e .EncodeElement (_deg ,_fb );};return e .EncodeToken (_b .EndElement {Name :start .Name });};func NewContainer ()*Container {return &Container {}};

// NewCommentDrawing constructs a new comment drawing.
func NewCommentDrawing ()*Container {_dec :=NewContainer ();_dec .Layout =_ee .NewOfcShapelayout ();_dec .Layout .ExtAttr =_ee .ST_ExtEdit ;_dec .Layout .Idmap =_ee .NewOfcCT_IdMap ();_dec .Layout .Idmap .DataAttr =_ef .String ("\u0031");_dec .Layout .Idmap .ExtAttr =_ee .ST_ExtEdit ;
_dec .ShapeType =_ee .NewShapetype ();_dec .ShapeType .IdAttr =_ef .String ("_\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0032\u0030\u0032");_dec .ShapeType .CoordsizeAttr =_ef .String ("2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030");_dec .ShapeType .SptAttr =_ef .Float32 (202);
_dec .ShapeType .PathAttr =_ef .String ("\u006d\u0030\u002c0l\u0030\u002c\u0032\u0031\u0036\u0030\u0030\u002c\u00321\u00360\u0030,\u00321\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030\u002c\u0030\u0078\u0065");_ge :=_ee .NewEG_ShapeElements ();
_dec .ShapeType .EG_ShapeElements =append (_dec .ShapeType .EG_ShapeElements ,_ge );_ge .ShapeElementsChoice .Path =_ee .NewPath ();_ge .ShapeElementsChoice .Path .GradientshapeokAttr =_dd .ST_TrueFalseT ;_ge .ShapeElementsChoice .Path .ConnecttypeAttr =_ee .OfcST_ConnectTypeRect ;
return _dec ;};

// Position get position attribute of shape style.
func (_gcb *ShapeStyle )Position ()string {return _gcb ._bg };

// Width return width of shape.
func (_bc *ShapeStyle )Width ()float64 {return _bc ._df };

// SetBold sets text to bold.
func (_ccf *TextpathStyle )SetBold (bold bool ){_ccf ._fff =bold };

// Left get left attribute of shape style.
func (_bcg *ShapeStyle )Left ()float64 {return _bcg ._gd };

// Height return height of shape.
func (_faa *ShapeStyle )Height ()float64 {return _faa ._ea };

// SetHeight set height of shape.
func (_gca *ShapeStyle )SetHeight (height float64 ){_gca ._ea =height };

// Margins get margin top, left, bottom, and right of shape style.
func (_fdf *ShapeStyle )Margins ()(float64 ,float64 ,float64 ,float64 ){return _fdf ._ddc ,_fdf ._dde ,_fdf ._aa ,_fdf ._db ;};

// ShapeStyle is style attribute of v:shape element.
type ShapeStyle struct{_bg string ;_ddc float64 ;_dde float64 ;_aa float64 ;_db float64 ;_eg float64 ;_gd float64 ;_ae float64 ;_bf float64 ;_df float64 ;_ea float64 ;_gcg int64 ;_fbb string ;_decg string ;_ce string ;_cb string ;};

// SetItalic sets text to italic.
func (_ad *TextpathStyle )SetItalic (italic bool ){_ad ._dbe =italic };

// FontFamily returns fontFamily of the text.
func (_bcb *TextpathStyle )FontFamily ()string {return _bcb ._dac };const (ShapeStylePositionAbsolute ="\u0061\u0062\u0073\u006f\u006c\u0075\u0074\u0065";ShapeStylePositionRelative ="\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065";);

// IsBold returns true if text is bold.
func (_dfe *TextpathStyle )IsBold ()bool {return _dfe ._fff };func (_fg *Container )UnmarshalXML (d *_b .Decoder ,start _b .StartElement )error {_fg .Shape =nil ;_gc :for {_abf ,_cc :=d .Token ();if _cc !=nil {return _cc ;};switch _eed :=_abf .(type ){case _b .StartElement :switch _eed .Name .Local {case "s\u0068\u0061\u0070\u0065\u006c\u0061\u0079\u006f\u0075\u0074":_fg .Layout =_ee .NewOfcShapelayout ();
if _be :=d .DecodeElement (_fg .Layout ,&_eed );_be !=nil {return _be ;};case "\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e":_fg .ShapeType =_ee .NewShapetype ();if _gfb :=d .DecodeElement (_fg .ShapeType ,&_eed );_gfb !=nil {return _gfb ;};case "\u0073\u0068\u0061p\u0065":_cd :=_ee .NewShape ();
if _cdc :=d .DecodeElement (_cd ,&_eed );_cdc !=nil {return _cdc ;};_fg .Shape =append (_fg .Shape ,_cd );};case _b .EndElement :break _gc ;};};return nil ;};

// MSOPositionHorizontalRelative get `mso-position-horizontal-relative` attribute of shape style.
func (_aff *ShapeStyle )MSOPositionHorizontalRelative ()string {return _aff ._decg };

// NewShapeStyle accept value of string style attribute in v:shape and format it to generate ShapeStyle.
func NewShapeStyle (style string )ShapeStyle {_geb :=ShapeStyle {_df :0,_ea :0};_ca :=_e .Split (style ,"\u003b");for _ ,_faf :=range _ca {_eac :=_e .Split (_faf ,"\u003a");if len (_eac )!=2{continue ;};var _ff error ;switch _eac [0]{case "\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e":_geb ._bg =_eac [1];
break ;case "\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070":_geb ._ddc ,_ff =_f .ParseFloat (_e .ReplaceAll (_eac [1],"\u0070\u0074",""),64);break ;case "m\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074":_geb ._dde ,_ff =_f .ParseFloat (_e .ReplaceAll (_eac [1],"\u0070\u0074",""),64);
break ;case "\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0062\u006f\u0074\u0074\u006f\u006d":_geb ._aa ,_ff =_f .ParseFloat (_e .ReplaceAll (_eac [1],"\u0070\u0074",""),64);break ;case "\u006d\u0061\u0072g\u0069\u006e\u002d\u0072\u0069\u0067\u0068\u0074":_geb ._db ,_ff =_f .ParseFloat (_e .ReplaceAll (_eac [1],"\u0070\u0074",""),64);
break ;case "\u0074\u006f\u0070":_geb ._eg ,_ff =_f .ParseFloat (_e .ReplaceAll (_eac [1],"\u0070\u0074",""),64);break ;case "\u006c\u0065\u0066\u0074":_geb ._gd ,_ff =_f .ParseFloat (_e .ReplaceAll (_eac [1],"\u0070\u0074",""),64);break ;case "\u0062\u006f\u0074\u0074\u006f\u006d":_geb ._ae ,_ff =_f .ParseFloat (_e .ReplaceAll (_eac [1],"\u0070\u0074",""),64);
break ;case "\u0072\u0069\u0067h\u0074":_geb ._bf ,_ff =_f .ParseFloat (_e .ReplaceAll (_eac [1],"\u0070\u0074",""),64);break ;case "\u0077\u0069\u0064t\u0068":_geb ._df ,_ff =_f .ParseFloat (_e .ReplaceAll (_eac [1],"\u0070\u0074",""),64);break ;case "\u0068\u0065\u0069\u0067\u0068\u0074":_geb ._ea ,_ff =_f .ParseFloat (_e .ReplaceAll (_eac [1],"\u0070\u0074",""),64);
break ;case "\u007a-\u0069\u006e\u0064\u0065\u0078":_geb ._gcg ,_ff =_f .ParseInt (_eac [1],10,64);break ;case "\u006d\u0073\u006f-p\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c":_geb ._fbb =_eac [1];
break ;case "\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006fr\u0069z\u006f\u006e\u0074\u0061\u006c\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065":_geb ._decg =_eac [1];break ;case "m\u0073\u006f\u002d\u0070os\u0069t\u0069\u006f\u006e\u002d\u0076e\u0072\u0074\u0069\u0063\u0061\u006c":_geb ._ce =_eac [1];
break ;case "\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069o\u006e\u002d\u0076\u0065\u0072\u0074\u0069c\u0061\u006c\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065":_geb ._cb =_eac [1];break ;};if _ff !=nil {_g .Log .Debug ("\u0055n\u0061\u0062l\u0065\u0020\u0074o\u0020\u0070\u0061\u0072\u0073\u0065\u0020s\u0074\u0079\u006c\u0065\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u003a\u0020\u0025\u0073 \u0076\u0061\u006c\u0075\u0065\u003a\u0020\u0025\u0076",_eac [0],_eac [1]);
};};return _geb ;};type Container struct{Layout *_ee .OfcShapelayout ;ShapeType *_ee .Shapetype ;Shape []*_ee .Shape ;};

// NewCommentShape creates a new comment shape for a given cell index.  The
// indices here are zero based.
func NewCommentShape (col ,row int64 )*_ee .Shape {_fa :=_ee .NewShape ();_fa .IdAttr =_ef .String (_c .Sprintf ("\u0063\u0073\u005f\u0025\u0064\u005f\u0025\u0064",col ,row ));_fa .TypeAttr =_ef .String ("\u0023\u005f\u00780\u0030\u0030\u0030\u005f\u0074\u0032\u0030\u0032");
_fa .StyleAttr =_ef .String ("\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u003a\u0061\u0062\u0073\u006f\u006cu\u0074\u0065\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074:\u0038\u0030\u0070\u0074;\u006d\u0061\u0072\u0067\u0069n-\u0074o\u0070\u003a\u0032pt\u003b\u0077\u0069\u0064\u0074\u0068\u003a1\u0030\u0034\u0070\u0074\u003b\u0068\u0065\u0069\u0067\u0068\u0074\u003a\u0037\u0036\u0070\u0074\u003b\u007a\u002d\u0069\u006e\u0064\u0065x\u003a\u0031\u003bv\u0069\u0073\u0069\u0062\u0069\u006c\u0069t\u0079\u003a\u0068\u0069\u0064\u0064\u0065\u006e");
_fa .FillcolorAttr =_ef .String ("\u0023f\u0062\u0066\u0036\u0064\u0036");_fa .StrokecolorAttr =_ef .String ("\u0023e\u0064\u0065\u0061\u0061\u0031");_dea :=_ee .NewFill ();_dea .Color2Attr =_ef .String ("\u0023f\u0062\u0066\u0065\u0038\u0032");_dea .AngleAttr =_ef .Float64 (-180);
_dea .TypeAttr =_ee .ST_FillTypeGradient ;_dea .Fill =_ee .NewOfcFill ();_dea .Fill .ExtAttr =_ee .ST_ExtView ;_dea .Fill .TypeAttr =_ee .OfcST_FillTypeGradientUnscaled ;_fa .ShapeChoice =append (_fa .ShapeChoice ,&_ee .CT_ShapeChoice {ShapeElementsChoice :&_ee .EG_ShapeElementsChoice {Fill :_dea }});
_da :=_ee .NewShadow ();_da .OnAttr =_dd .ST_TrueFalseT ;_da .ObscuredAttr =_dd .ST_TrueFalseT ;_fa .ShapeChoice =append (_fa .ShapeChoice ,&_ee .CT_ShapeChoice {ShapeElementsChoice :&_ee .EG_ShapeElementsChoice {Shadow :_da }});_a :=_ee .NewPath ();_a .ConnecttypeAttr =_ee .OfcST_ConnectTypeNone ;
_fa .ShapeChoice =append (_fa .ShapeChoice ,&_ee .CT_ShapeChoice {ShapeElementsChoice :&_ee .EG_ShapeElementsChoice {Path :_a }});_af :=_ee .NewTextbox ();_af .StyleAttr =_ef .String ("\u006d\u0073\u006f\u002ddi\u0072\u0065\u0063\u0074\u0069\u006f\u006e\u002d\u0061\u006c\u0074\u003a\u0061\u0075t\u006f");
_fa .ShapeChoice =append (_fa .ShapeChoice ,&_ee .CT_ShapeChoice {ShapeElementsChoice :&_ee .EG_ShapeElementsChoice {Textbox :_af }});_ab :=_de .NewClientData ();_ab .ObjectTypeAttr =_de .ST_ObjectTypeNote ;_ab .ClientDataChoice =[]*_de .CT_ClientDataChoice {{MoveWithCells :_dd .ST_TrueFalseBlankT },{SizeWithCells :_dd .ST_TrueFalseBlankT },{Anchor :_ef .String ("\u0031,\u0020\u0031\u0035\u002c\u0020\u0030\u002c\u0020\u0032\u002c\u00202\u002c\u0020\u0035\u0034\u002c\u0020\u0035\u002c\u0020\u0033")},{AutoFill :_dd .ST_TrueFalseBlankFalse },{Row :_ef .Int64 (row )},{Column :_ef .Int64 (col )}};
_fa .ShapeChoice =append (_fa .ShapeChoice ,&_ee .CT_ShapeChoice {ShapeElementsChoice :&_ee .EG_ShapeElementsChoice {ClientData :_ab }});return _fa ;};

// SetFontSize sets text's fontSize.
func (_egb *TextpathStyle )SetFontSize (fontSize int64 ){_egb ._cad =fontSize };

// SetWidth set width of shape.
func (_ga *ShapeStyle )SetWidth (width float64 ){_ga ._df =width };

// Right get right attribute of shape style.
func (_bcf *ShapeStyle )Right ()float64 {return _bcf ._bf };

// TextpathStyle is style attribute of element v:textpath.
type TextpathStyle struct{_dac string ;_cad int64 ;_fff bool ;_dbe bool ;};

// Bottom get bottom attribute of shape style.
func (_ccc *ShapeStyle )Bottom ()float64 {return _ccc ._ae };

// FontSize returns fontSize of the text.
func (_egd *TextpathStyle )FontSize ()int64 {return _egd ._cad };

// ToString generate string of TextpathStyle.
func (_gba *TextpathStyle )String ()string {_fac :="";_fac +=_c .Sprintf ("\u0066o\u006et\u002d\u0066\u0061\u006d\u0069\u006c\u0079\u003a\u0025\u0073\u003b",_gba ._dac );_fac +=_c .Sprintf ("\u0066o\u006et\u002d\u0073\u0069\u007a\u0065\u003a\u0025\u0064\u0070\u0074\u003b",_gba ._cad );
if _gba ._dbe {_fac +="\u0066o\u006et\u002d\u0073\u0074\u0079\u006ce\u003a\u0069t\u0061\u006c\u0069\u0063\u003b";};if _gba ._fff {_fac +="\u0066\u006f\u006e\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074\u003ab\u006f\u006c\u0064\u003b";};return _fac ;
};

// NewTextpathStyle accept value of string style attribute of element v:textpath and format it to generate TextpathStyle.
func NewTextpathStyle (style string )TextpathStyle {_aea :=TextpathStyle {_dac :"\u0022C\u0061\u006c\u0069\u0062\u0072\u0069\"",_cad :44,_fff :false ,_dbe :false };_ced :=_e .Split (style ,"\u003b");for _ ,_fba :=range _ced {_bgc :=_e .Split (_fba ,"\u003a");
if len (_bgc )!=2{continue ;};switch _bgc [0]{case "f\u006f\u006e\u0074\u002d\u0066\u0061\u006d\u0069\u006c\u0079":_aea ._dac =_bgc [1];break ;case "\u0066o\u006e\u0074\u002d\u0073\u0069\u007ae":_aea ._cad ,_ =_f .ParseInt (_e .ReplaceAll (_bgc [1],"\u0070\u0074",""),10,64);
break ;case "f\u006f\u006e\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074":_aea ._fff =_bgc [1]=="\u0062\u006f\u006c\u0064";break ;case "\u0066\u006f\u006e\u0074\u002d\u0073\u0074\u0079\u006c\u0065":_aea ._dbe =_bgc [1]=="\u0069\u0074\u0061\u006c\u0069\u0063";
break ;};};return _aea ;};

// SetFontFamily sets text's fontFamily.
func (_ccb *TextpathStyle )SetFontFamily (fontFamily string ){_ccb ._dac =fontFamily };

// MSOPositionVerticalRelative get `mso-position-vertical-relative` attribute of shape style.
func (_gdd *ShapeStyle )MSOPositionVerticalRelative ()string {return _gdd ._cb };

// ToString formatting ShapeStyle to string.
func (_cbd *ShapeStyle )String ()string {_gac :="";_gac +=_c .Sprintf ("\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u003a\u0025\u0073\u003b",_cbd ._bg );_gac +=_c .Sprintf ("\u006da\u0072g\u0069\u006e\u002d\u006c\u0065\u0066\u0074\u003a\u0025\u0064\u003b",int64 (_cbd ._dde ));
_gac +=_c .Sprintf ("\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074\u006fp\u003a\u0025\u0064\u003b",int64 (_cbd ._ddc ));_gac +=_c .Sprintf ("w\u0069\u0064\u0074\u0068\u003a\u0025\u0064\u0070\u0074\u003b",int64 (_cbd ._df ));_gac +=_c .Sprintf ("\u0068\u0065\u0069g\u0068\u0074\u003a\u0025\u0064\u0070\u0074\u003b",int64 (_cbd ._ea ));
_gac +=_c .Sprintf ("z\u002d\u0069\u006e\u0064\u0065\u0078\u003a\u0025\u0064\u003b",_cbd ._gcg );_gac +=_c .Sprintf ("m\u0073\u006f\u002d\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069z\u006f\u006e\u0074a\u006c:\u0025\u0073\u003b",_cbd ._fbb );
_gac +=_c .Sprintf ("\u006d\u0073o-\u0070\u006f\u0073i\u0074\u0069\u006f\u006e-ho\u0072iz\u006f\u006e\u0074\u0061\u006c\u002d\u0072el\u0061\u0074\u0069\u0076\u0065\u003a\u0025s\u003b",_cbd ._decg );_gac +=_c .Sprintf ("\u006ds\u006f\u002d\u0070\u006fs\u0069\u0074\u0069\u006f\u006e-\u0076e\u0072t\u0069\u0063\u0061\u006c\u003a\u0025\u0073;",_cbd ._ce );
_gac +=_c .Sprintf ("\u006d\u0073\u006f-p\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076e\u0072t\u0069c\u0061l\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065\u003a\u0025\u0073\u003b",_cbd ._cb );return _gac ;};

// Top get top attribute of shape style.
func (_ged *ShapeStyle )Top ()float64 {return _ged ._eg };

// CreateFormula creates F element for typeFormulas.
func CreateFormula (s string )*_ee .CT_F {_bb :=_ee .NewCT_F ();_bb .EqnAttr =&s ;return _bb };

// IsItalic returns true if text is italic.
func (_ddd *TextpathStyle )IsItalic ()bool {return _ddd ._dbe };