//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package presentation ;import (_ec "archive/zip";_dee "bytes";_f "encoding/xml";_fd "errors";_af "fmt";_de "github.com/unidoc/unioffice/v2";_ef "github.com/unidoc/unioffice/v2/common";_ae "github.com/unidoc/unioffice/v2/common/logger";_cf "github.com/unidoc/unioffice/v2/common/tempstorage";
_bbe "github.com/unidoc/unioffice/v2/drawing";_ce "github.com/unidoc/unioffice/v2/internal/formatutils";_ee "github.com/unidoc/unioffice/v2/internal/license";_bd "github.com/unidoc/unioffice/v2/measurement";_bc "github.com/unidoc/unioffice/v2/schema/soo/dml";
_b "github.com/unidoc/unioffice/v2/schema/soo/dml/chart";_c "github.com/unidoc/unioffice/v2/schema/soo/ofc/sharedTypes";_a "github.com/unidoc/unioffice/v2/schema/soo/pkg/relationships";_ge "github.com/unidoc/unioffice/v2/schema/soo/pml";_be "github.com/unidoc/unioffice/v2/zippkg";
_ga "image";_dd "image/jpeg";_eg "io";_bdf "math";_gd "os";_g "path";_ac "sort";_bb "strconv";_d "strings";);func (_afa *Slide )ensureClrMap (){if len (_afa ._becd ._fbf )==0||len (_afa ._becd ._cgb )==0{return ;};_gded :=_afa ._becd ._fbf [0];_bgag :=_gded .ClrMap ;
if _eaef :=_afa ._gcgbd .ClrMapOvr ;_eaef !=nil {if _gcca :=_eaef .ColorMappingOverrideChoice ;_gcca !=nil {if _gcca .MasterClrMapping ==nil {if _ggfa :=_gcca .OverrideClrMapping ;_ggfa !=nil {if _ggfa .Bg1Attr !=_bc .ST_ColorSchemeIndexUnset {_bgag .Bg1Attr =_ggfa .Bg1Attr ;
};if _ggfa .Tx1Attr !=_bc .ST_ColorSchemeIndexUnset {_bgag .Tx1Attr =_ggfa .Tx1Attr ;};if _ggfa .Bg2Attr !=_bc .ST_ColorSchemeIndexUnset {_bgag .Bg2Attr =_ggfa .Bg2Attr ;};if _ggfa .Tx2Attr !=_bc .ST_ColorSchemeIndexUnset {_bgag .Tx2Attr =_ggfa .Tx2Attr ;
};if _ggfa .Accent1Attr !=_bc .ST_ColorSchemeIndexUnset {_bgag .Accent1Attr =_ggfa .Accent1Attr ;};if _ggfa .Accent2Attr !=_bc .ST_ColorSchemeIndexUnset {_bgag .Accent2Attr =_ggfa .Accent2Attr ;};if _ggfa .Accent3Attr !=_bc .ST_ColorSchemeIndexUnset {_bgag .Accent3Attr =_ggfa .Accent3Attr ;
};if _ggfa .Accent4Attr !=_bc .ST_ColorSchemeIndexUnset {_bgag .Accent4Attr =_ggfa .Accent4Attr ;};if _ggfa .Accent5Attr !=_bc .ST_ColorSchemeIndexUnset {_bgag .Accent5Attr =_ggfa .Accent5Attr ;};if _ggfa .Accent6Attr !=_bc .ST_ColorSchemeIndexUnset {_bgag .Accent6Attr =_ggfa .Accent6Attr ;
};if _ggfa .HlinkAttr !=_bc .ST_ColorSchemeIndexUnset {_bgag .HlinkAttr =_ggfa .HlinkAttr ;};if _ggfa .FolHlinkAttr !=_bc .ST_ColorSchemeIndexUnset {_bgag .FolHlinkAttr =_ggfa .FolHlinkAttr ;};};};};};_afa ._fgab =_bgag ;};

// ShowPr returns the ShowPr property.
func (_abf PresentationProperties )ShowPr ()*_ge .CT_ShowProperties {return _abf ._gce .ShowPr };func _cfb (_edg *Presentation ,_cbe *_ge .CT_Shape ,_aab *_ge .CT_GraphicalObjectFrame ,_ab *TableInfo ,_ecc *_bc .CT_Transform2D ,_cad int ,_bgd []rectangle ,_cfc []*_bc .CT_TextParagraph )[]*TextItem {_eea :=[]*TextItem {};
var _gda ,_acc ,_bcg ,_ecg ,_fcca ,_gc int64 ;_ggf :=_ecc ==nil ;_cd :=0;for _ ,_bf :=range _cfc {for _ ,_bba :=range _bf .EG_TextRun {if _gcg :=_bba .TextRunChoice .R ;_gcg !=nil {if !_ggf {if _ecc .Off !=nil {if _eccf :=_ecc .Ext ;_eccf !=nil {_fcca ,_gc =_eccf .CxAttr ,_eccf .CyAttr ;
};if _aca :=_ecc .Off .XAttr .ST_CoordinateUnqualified ;_aca !=nil {_gda =*_aca ;_acc =_gda +_fcca ;_ggf =true ;};if _ebg :=_ecc .Off .YAttr .ST_CoordinateUnqualified ;_ebg !=nil {_bcg =*_ebg ;_ecg =_bcg +_gc ;_ggf =true ;};};};_cbd :=append ([]rectangle {},_bgd ...);
_cbd =append (_cbd ,rectangle {_dc :_gda ,_gf :_acc ,_adg :_bcg ,_gef :_ecg });_eea =append (_eea ,&TextItem {Presentation :_edg ,Shape :_cbe ,GraphicFrame :_aab ,TableInfo :_ab ,Paragraph :_bf ,Run :_gcg ,Text :_gcg .T ,_cfg :_cbd ,_da :_cad ,_fcc :_cd });
_cd ++;};};};return _eea ;};

// AddSlideWithLayout adds a new slide with content copied from a layout.  Normally you should
// use AddDefaultSlideWithLayout as it will do some post processing similar to PowerPoint to
// clear place holder text, etc.
func (_ffb *Presentation )AddSlideWithLayout (l SlideLayout )(Slide ,error ){_egb :=_ge .NewCT_SlideIdListEntry ();_egb .IdAttr =_ffb .nextSlideID ();_ffb ._aag .SldIdLst .SldId =append (_ffb ._aag .SldIdLst .SldId ,_egb );_egba :=_ge .NewSld ();_ceac :=_dee .Buffer {};
_eeab :=_f .NewEncoder (&_ceac );_fbbd :=_f .StartElement {Name :_f .Name {Local :"\u0073\u006c\u0069d\u0065"}};_fbbd .Attr =append (_fbbd .Attr ,_f .Attr {Name :_f .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});
_fbbd .Attr =append (_fbbd .Attr ,_f .Attr {Name :_f .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0061"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"});
_fbbd .Attr =append (_fbbd .Attr ,_f .Attr {Name :_f .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0070"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});
_fbbd .Attr =append (_fbbd .Attr ,_f .Attr {Name :_f .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0072"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"});
_fbbd .Attr =append (_fbbd .Attr ,_f .Attr {Name :_f .Name {Local :"\u0078\u006d\u006c\u006e\u0073\u003a\u0073\u0068"},Value :"\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"});
_fbbd .Attr =append (_fbbd .Attr ,_f .Attr {Name :_f .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});
if _ggd :=l ._dcc .CSld .MarshalXML (_eeab ,_fbbd );_ggd !=nil {return Slide {},_ggd ;};_eeab .Flush ();_aad :=_f .NewDecoder (&_ceac );_egba .CSld =_ge .NewCT_CommonSlideData ();if _aabgg :=_aad .Decode (_egba .CSld );_aabgg !=nil {return Slide {},_aabgg ;
};_egba .CSld .NameAttr =nil ;_egba .CSld .SpTree .GroupShapeChoice =_ffdc (_egba .CSld .SpTree .GroupShapeChoice );_ffb ._gde =append (_ffb ._gde ,_egba );_ffb ._fe =append (_ffb ._fe ,len (_ffb ._gde ));_age :=_ffb ._cdda .AddAutoRelationship (_de .DocTypePresentation ,_de .OfficeDocumentType ,len (_ffb ._gde ),_de .SlideType );
_egb .RIdAttr =_age .ID ();_bdag :=_de .AbsoluteFilename (_de .DocTypePresentation ,_de .SlideType ,len (_ffb ._gde ));_ffb .ContentTypes .AddOverride (_bdag ,_de .SlideContentType );_fg :=_ef .NewRelationships ();_ffb ._cfa =append (_ffb ._cfa ,_fg );
_gegd :=len (_ffb ._cfa )-1;for _deg ,_ebge :=range _ffb ._ebd {if _ebge ==l .X (){_dgd :=_ffb ._cge [_deg ];for _ ,_egd :=range _dgd .X ().Relationship {if _egd .TypeAttr !=_de .SlideMasterType {_ffb ._cfa [_gegd ].X ().Relationship =append (_ffb ._cfa [_gegd ].X ().Relationship ,_egd );
};};_fg .AddAutoRelationship (_de .DocTypePresentation ,_de .SlideType ,_deg +1,_de .SlideLayoutType );};};_fde :=Slide {_egb ,_egba ,_ffb ,nil };return _fde ,nil ;};

// TextItem is used for keeping text with references to a paragraph and run, a shape or a table, a row and a cell where it is located.
type TextItem struct{Text string ;Presentation *Presentation ;Shape *_ge .CT_Shape ;GraphicFrame *_ge .CT_GraphicalObjectFrame ;Paragraph *_bc .CT_TextParagraph ;Run *_bc .CT_RegularTextRun ;TableInfo *TableInfo ;_cfg []rectangle ;_da int ;_fcc int ;};


// AddParagraph adds a new paragraph to a placeholder.
func (_aef PlaceHolder )AddParagraph ()_bbe .Paragraph {_geeg :=_bbe .MakeParagraph (_bc .NewCT_TextParagraph ());_aef ._fdd .TxBody .P =append (_aef ._fdd .TxBody .P ,_geeg .X ());return _geeg ;};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_dddg *Presentation )AddImage (i _ef .Image )(_ef .ImageRef ,error ){_fcecg :=_ef .MakeImageRef (i ,&_dddg .DocBase ,_dddg ._cdda );if i .Data ==nil &&i .Path ==""{return _fcecg ,_fd .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");
};if i .Format ==""{return _fcecg ,_fd .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _fcecg ,_fd .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");
};if i .Path !=""{_fdf :=_cf .Add (i .Path );if _fdf !=nil {return _fcecg ,_fdf ;};};_dddg .Images =append (_dddg .Images ,_fcecg );_dddg .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_dddg .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");
_dddg .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_dddg .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_dddg .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );
return _fcecg ,nil ;};func (_eeegg *Slide )getSlideLayoutRels ()_ef .Relationships {_bedd :=_eeegg ._becd ;for _gdcf ,_eeag :=range _bedd .SlideLayouts (){if *_eeegg .GetSlideLayout ().CSld ==*_eeag ._dcc .CSld {return _bedd ._cge [_gdcf ];};};return _ef .Relationships {};
};

// Height returns slide screen size height in EMU units.
func (_cdcc *SlideScreenSize )Height ()int32 {return _cdcc [1]};const _gba float64 =500000;

// X returns the inner wrapped XML type.
func (_bffdf *Presentation )X ()*_ge .Presentation {return _bffdf ._aag };

// OpenTemplate opens a template file.
func OpenTemplate (fn string )(*Presentation ,error ){_gdb ,_egf :=Open (fn );if _egf !=nil {return nil ,_egf ;};return _gdb ,nil ;};

// Close closes the presentation, removing any temporary files that might have been
// created when opening a document.
func (_ecd *Presentation )Close ()error {if _ecd .TmpPath !=""{return _cf .RemoveAll (_ecd .TmpPath );};return nil ;};

// OutlineViewPr returns the OutlineViewPr property.
func (_aebgb ViewProperties )OutlineViewPr ()*_ge .CT_OutlineViewProperties {return _aebgb ._cacg .OutlineViewPr ;};

// ExtLst returns the ExtLst property.
func (_daa PresentationProperties )ExtLst ()*_ge .CT_ExtensionList {return _daa ._gce .ExtLst };

// NotesViewPr returns the NotesViewPr property.
func (_dgge ViewProperties )NotesViewPr ()*_ge .CT_NotesViewProperties {return _dgge ._cacg .NotesViewPr };

// WebPr returns the WebPr property.
func (_gfab PresentationProperties )WebPr ()*_ge .CT_WebProperties {return _gfab ._gce .WebPr };

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_fbd *Presentation )GetImageByRelID (relID string )(_ef .ImageRef ,bool ){for _ ,_bafc :=range _fbd .Images {if _bafc .RelID ()==relID {return _bafc ,true ;};};return _ef .ImageRef {},false ;};

// SlideSize returns presentation slide size.
func (_bea *Presentation )SlideSize ()SlideSize {if _bea ._aag .SldSz ==nil {_bea ._aag .SldSz =_ge .NewCT_SlideSize ();};return SlideSize {_bea ._aag .SldSz ,_bea };};

// AddTable adds a new table to a placeholder.
func (_fca PlaceHolder )AddTable ()*_ef .Table {_fca .Clear ();_cea :=_ge .NewCT_GroupShapeChoice ();_fca ._df .CSld .SpTree .GroupShapeChoice =append (_fca ._df .CSld .SpTree .GroupShapeChoice ,_cea );_eac :=_ge .NewCT_GraphicalObjectFrame ();_cea .GraphicFrame =_eac ;
_eac .Xfrm .Off =_bc .NewCT_Point2D ();_bgf :=int64 (1);_eac .Xfrm .Off .XAttr =_bc .ST_Coordinate {ST_CoordinateUnqualified :&_bgf };_eac .Xfrm .Off .YAttr =_bc .ST_Coordinate {ST_CoordinateUnqualified :&_bgf };_fce :=_eac .Graphic .CT_GraphicalObject .GraphicData ;
_fce .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0074\u0061\u0062\u006c\u0065";
_agbc :=_ef .NewTableWithXfrm (_eac .Xfrm );_fce .Any =append (_fce .Any ,_agbc .X ());return _agbc ;};

// X returns the inner wrapped XML type.
func (_dfg Slide )X ()*_ge .Sld {return _dfg ._gcgbd };

// SetOffsetX sets horizontal offset of text box in distance units (see measurement package).
func (_gabg TextBox )SetOffsetX (offX float64 ){_fba :=_gabg .getOff ();_feg :=_bd .ToEMU (offX );_fba .XAttr =_bc .ST_Coordinate {ST_CoordinateUnqualified :&_feg };};

// SetHeight sets height of slide screen size with given value in EMU units.
func (_ebdda *SlideScreenSize )SetHeight (val int32 ){_ebdda [1]=val };

// NewViewProperties constructs a new ViewProperties.
func NewViewProperties ()ViewProperties {return ViewProperties {_cacg :_ge .NewViewPr ()}};

// SetText sets the text of a placeholder for the initial paragraph. This is a
// shortcut method that is useful for things like titles which only contain a
// single paragraph.
func (_bgb PlaceHolder )SetText (text string ){_bgb .Clear ();_acg :=_bc .NewEG_TextRun ();_acg .TextRunChoice .R =_bc .NewCT_RegularTextRun ();_acg .TextRunChoice .R .T =text ;if len (_bgb ._fdd .TxBody .P )==0{_bgb ._fdd .TxBody .P =append (_bgb ._fdd .TxBody .P ,_bc .NewCT_TextParagraph ());
};_bgb ._fdd .TxBody .P [0].EG_TextRun =nil ;_bgb ._fdd .TxBody .P [0].EG_TextRun =append (_bgb ._fdd .TxBody .P [0].EG_TextRun ,_acg );};

// SorterViewPr returns the SorterViewPr property.
func (_ffc ViewProperties )SorterViewPr ()*_ge .CT_SlideSorterViewProperties {return _ffc ._cacg .SorterViewPr ;};

// ClearAll completely clears a placeholder. To be useable, at least one
// paragraph must be added after ClearAll via AddParagraph.
func (_fac PlaceHolder )ClearAll (){_fac ._fdd .SpPr =_bc .NewCT_ShapeProperties ();_fac ._fdd .TxBody =_bc .NewCT_TextBody ();_fac ._fdd .TxBody .LstStyle =_bc .NewCT_TextListStyle ();};

// ShowCommentsAttr returns the WebPr property.
func (_dgbe ViewProperties )ShowCommentsAttr ()*bool {return _dgbe ._cacg .ShowCommentsAttr };

// X returns the inner wrapped XML type.
func (_gbcb ViewProperties )X ()*_ge .ViewPr {return _gbcb ._cacg };

// GetColorBySchemeColor returns *dml.CT_Color mapped to scheme colors like dk1, lt1 etc. depending on what theme is used in the presentation.
func (_ebgg *Presentation )GetColorBySchemeColor (schClr _bc .ST_SchemeColorVal )*_bc .CT_Color {if len (_ebgg ._fbf )==0||len (_ebgg ._cgb )==0{return nil ;};var _fgc _bc .ST_ColorSchemeIndex ;_fbe :=_ebgg ._fbf [0];_eaed :=_fbe .ClrMap ;switch schClr .String (){case "\u0062\u0067\u0031":_fgc =_eaed .Bg1Attr ;
case "\u0062\u0067\u0032":_fgc =_eaed .Bg2Attr ;case "\u0074\u0078\u0031":_fgc =_eaed .Tx1Attr ;case "\u0074\u0078\u0032":_fgc =_eaed .Tx2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_fgc =_eaed .Accent1Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_fgc =_eaed .Accent2Attr ;
case "\u0061c\u0063\u0065\u006e\u0074\u0033":_fgc =_eaed .Accent3Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_fgc =_eaed .Accent4Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_fgc =_eaed .Accent5Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_fgc =_eaed .Accent6Attr ;
case "\u0068\u006c\u0069n\u006b":_fgc =_eaed .HlinkAttr ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_fgc =_eaed .FolHlinkAttr ;case "\u0064\u006b\u0031":_fgc =_bc .ST_ColorSchemeIndexDk1 ;case "\u0064\u006b\u0032":_fgc =_bc .ST_ColorSchemeIndexDk2 ;
case "\u006c\u0074\u0031":_fgc =_bc .ST_ColorSchemeIndexLt1 ;case "\u006c\u0074\u0032":_fgc =_bc .ST_ColorSchemeIndexLt2 ;default:_fgc =_bc .ST_ColorSchemeIndexUnset ;};_egfd :=_ebgg ._cgb [0];_gcdc :=_egfd .ThemeElements ;if _gcdc ==nil {return nil ;};
var _ceg *_bc .CT_Color ;_cdfd :=_gcdc .ClrScheme ;switch _fgc .String (){case "\u0064\u006b\u0031":_ceg =_cdfd .Dk1 ;case "\u0064\u006b\u0032":_ceg =_cdfd .Dk2 ;case "\u006c\u0074\u0031":_ceg =_cdfd .Lt1 ;case "\u006c\u0074\u0032":_ceg =_cdfd .Lt2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_ceg =_cdfd .Accent1 ;
case "\u0061c\u0063\u0065\u006e\u0074\u0032":_ceg =_cdfd .Accent2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_ceg =_cdfd .Accent3 ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_ceg =_cdfd .Accent4 ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_ceg =_cdfd .Accent5 ;
case "\u0061c\u0063\u0065\u006e\u0074\u0036":_ceg =_cdfd .Accent6 ;case "\u0068\u006c\u0069n\u006b":_ceg =_cdfd .Hlink ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_ceg =_cdfd .FolHlink ;default:return nil ;};return _ceg ;};

// SlideMaster is the slide master for a presentation.
type SlideMaster struct{_abca *Presentation ;_gaef _ef .Relationships ;_agae *_ge .SldMaster ;};func (_eccb *Presentation )onNewRelationship (_bcf *_be .DecodeMap ,_cdec ,_dcbg string ,_gcd []*_ec .File ,_aba *_a .Relationship ,_dabf _be .Target )error {_faf :=_de .DocTypePresentation ;
switch _dcbg {case _de .OfficeDocumentType :_eccb ._aag =_ge .NewPresentation ();_bcf .AddTarget (_cdec ,_eccb ._aag ,_dcbg ,0);_bcf .AddTarget (_be .RelationsPathFor (_cdec ),_eccb ._cdda .X (),_dcbg ,0);_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,0);
case _de .CorePropertiesType :_bcf .AddTarget (_cdec ,_eccb .CoreProperties .X (),_dcbg ,0);_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,0);case _de .CustomPropertiesType :_bcf .AddTarget (_cdec ,_eccb .CustomProperties .X (),_dcbg ,0);
_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,0);case _de .PresentationPropertiesType :_bcf .AddTarget (_cdec ,_eccb ._dea .X (),_dcbg ,0);_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,0);case _de .ViewPropertiesType :_bcf .AddTarget (_cdec ,_eccb ._fbb .X (),_dcbg ,0);
_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,0);case _de .TableStylesType :_bcf .AddTarget (_cdec ,_eccb ._gcf .X (),_dcbg ,0);_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,0);case _de .HyperLinkType :_ebfd :=_bc .NewCT_Hyperlink ();
_eabd :=uint32 (len (_eccb ._bbf ));_bcf .AddTarget (_cdec ,_ebfd ,_dcbg ,_eabd );_eccb ._bbf =append (_eccb ._bbf ,_ebfd );case _de .CustomXMLType :if _afdd ,_gbb :=_ce .StringToNumbers (_cdec );_gbb {if len (_eccb ._agbe )< _afdd {_ddc :=&_de .XSDAny {};
_bcf .AddTarget (_cdec ,_ddc ,_dcbg ,uint32 (_afdd ));_eccb ._agbe =append (_eccb ._agbe ,_ddc );_eccb ._gad =append (_eccb ._gad ,_afdd );_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,_afdd );};};case _de .ChartType :_gbe :=chart {_gg :_b .NewChartSpace ()};
_ega :=uint32 (len (_eccb ._ffaf ));_bcf .AddTarget (_cdec ,_gbe ._gg ,_dcbg ,_ega );_eccb ._ffaf =append (_eccb ._ffaf ,&_gbe );_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,len (_eccb ._ffaf ));_gbe ._fc =_aba .TargetAttr ;case _de .HandoutMasterType :_eca :=_ge .NewHandoutMaster ();
_cgc :=uint32 (len (_eccb ._fef ));_bcf .AddTarget (_cdec ,_eca ,_dcbg ,_cgc );_eccb ._fef =append (_eccb ._fef ,_eca );_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,len (_eccb ._fef ));case _de .NotesMasterType :if _bgde ,_afbc :=_ce .StringToNumbers (_cdec );
_afbc {if len (_eccb ._daga )< _bgde {_accf :=_ge .NewNotesMaster ();_eccb ._daga =append (_eccb ._daga ,_accf );_eccb ._bgbd =append (_eccb ._bgbd ,_bgde );_bcf .AddTarget (_cdec ,_accf ,_dcbg ,uint32 (_bgde ));_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,_bgde );
};};case _de .ExtendedPropertiesType :_bcf .AddTarget (_cdec ,_eccb .AppProperties .X (),_dcbg ,0);_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,0);case _de .SlideType :if _dge ,_eaac :=_ce .StringToNumbers (_cdec );_eaac {if len (_eccb ._gde )< _dge {_cee :=_ge .NewSld ();
_eccb ._gde =append (_eccb ._gde ,_cee );_eccb ._fe =append (_eccb ._fe ,_dge );_bcf .AddTarget (_cdec ,_cee ,_dcbg ,uint32 (_dge ));_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,_dge );_cabe :=_ef .NewRelationships ();_bcf .AddTarget (_be .RelationsPathFor (_cdec ),_cabe .X (),_dcbg ,0);
if len (_eccb ._cfa )>=_dge {_eccb ._cfa [_dge -1]=_cabe ;}else {_eccb ._cfa =append (_eccb ._cfa ,_cabe );};};};case _de .SlideMasterType :if _cadd ,_efg :=_ce .StringToNumbers (_cdec );_efg {if len (_eccb ._fbf )< _cadd {_agd :=_ge .NewSldMaster ();if !_bcf .AddTarget (_cdec ,_agd ,_dcbg ,uint32 (_cadd )){return nil ;
};_eccb ._fbf =append (_eccb ._fbf ,_agd );_eccb ._bdg =append (_eccb ._bdg ,_cadd );_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,_cadd );_acd :=_ef .NewRelationships ();_bcf .AddTarget (_be .RelationsPathFor (_cdec ),_acd .X (),_dcbg ,0);
if len (_eccb ._bbc )>=_cadd {_eccb ._bbc [_cadd -1]=_acd ;}else {_eccb ._bbc =append (_eccb ._cfa ,_acd );};};};case _de .SlideLayoutType :if _acda ,_fcg :=_ce .StringToNumbers (_cdec );_fcg {_cca :=_ge .NewSldLayout ();if !_bcf .AddTarget (_cdec ,_cca ,_dcbg ,uint32 (_acda )){return nil ;
};for _afbf :=len (_eccb ._ebd );_afbf < _acda ;_afbf ++{_eccb ._ebd =append (_eccb ._ebd ,nil );};_eccb ._ebd [_acda -1]=_cca ;_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,_acda );for _cbge :=len (_eccb ._cge );_cbge < _acda ;_cbge ++{_eccb ._cge =append (_eccb ._cge ,_ef .NewRelationships ());
};_ebga :=_ef .NewRelationships ();_bcf .AddTarget (_be .RelationsPathFor (_cdec ),_ebga .X (),_dcbg ,0);_eccb ._cge [_acda -1]=_ebga ;};case _de .ThumbnailType :for _afg ,_fga :=range _gcd {if _fga ==nil {continue ;};if _fga .Name ==_cdec {_gbdbc ,_cbc :=_fga .Open ();
if _cbc !=nil {return _af .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_cbc );};_eccb .Thumbnail ,_ ,_cbc =_ga .Decode (_gbdbc );_gbdbc .Close ();if _cbc !=nil {return _af .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_cbc );
};_gcd [_afg ]=nil ;};};case _de .ThemeType :if _dbc ,_bcee :=_ce .StringToNumbers (_cdec );_bcee {if len (_eccb ._cgb )< _dbc {_dfa :=_bc .NewTheme ();if !_bcf .AddTarget (_cdec ,_dfa ,_dcbg ,uint32 (_dbc )){return nil ;};_eccb ._cgb =append (_eccb ._cgb ,_dfa );
_eccb ._fdba =append (_eccb ._fdba ,_dbc );_aba .TargetAttr =_de .RelativeFilename (_faf ,_dabf .Typ ,_dcbg ,_dbc );_adb :=_ef .NewRelationships ();_bcf .AddTarget (_be .RelationsPathFor (_cdec ),_adb .X (),_dcbg ,0);if len (_eccb ._gae )>=_dbc {_eccb ._gae [_dbc -1]=_adb ;
}else {_eccb ._gae =append (_eccb ._gae ,_adb );};};};case _de .ImageType :_cdec =_g .Clean (_cdec );if _abdc ,_gab :=_eccb ._aeg [_cdec ];_gab {_aba .TargetAttr =_abdc ;return nil ;};_ggfb :="";for _ead ,_gbbb :=range _gcd {if _gbbb ==nil {continue ;};
if _gbbb .Name ==_cdec {_bcd ,_cag :=_be .ExtractToDiskTmp (_gbbb ,_eccb .TmpPath );if _cag !=nil {return _cag ;};_fcd ,_cag :=_ef .ImageFromStorage (_bcd );if _cag !=nil {return _cag ;};_ggfb =_fcd .Format ;if _fcd .Format =="\u006a\u0070\u0065\u0067"&&_d .HasSuffix (_cdec ,"\u006a\u0070\u0067"){_ggfb ="\u006a\u0070\u0067";
};_egbd :=_ef .MakeImageRef (_fcd ,&_eccb .DocBase ,_eccb ._cdda );_egbd .SetTarget ("\u002e\u002e\u002f"+_cdec [4:]);_eccb .Images =append (_eccb .Images ,_egbd );_gcd [_ead ]=nil ;_bcde :=len (_eccb .Images );if _ccfa ,_egda :=_ce .StringToNumbers (_cdec );
_egda {_bcde =_ccfa ;};_bcf .RecordIndex (_cdec ,_bcde );break ;};};_fcec :=_bcf .IndexFor (_cdec );_aba .TargetAttr =_de .RelativeImageFilename (_faf ,_dabf .Typ ,_dcbg ,_fcec ,_ggfb );_eccb ._aeg [_cdec ]=_aba .TargetAttr ;default:_ae .Log .Debug ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_dcbg ,_cdec );
};return nil ;};var (SlideScreenSize16x9 =SlideScreenSize {12192000,6858000};SlideScreenSize4x3 =SlideScreenSize {9144000,6858000};SlideScreenSizeA4 =SlideScreenSize {9906000,6858000};);

// PresentationText is an array of extracted text items which has some methods for representing extracted text.
type PresentationText struct{Slides []*SlideText ;};func (_eed *Presentation )saveToFile (_aebg string ,_ecgc bool )error {_cab ,_gdbd :=_gd .Create (_aebg );if _gdbd !=nil {return _gdbd ;};defer _cab .Close ();return _eed .save (_cab ,_ecgc );};func (_eede *Presentation )Validate ()error {if _ebe :=_eede ._aag .Validate ();
_ebe !=nil {return _ebe ;};for _bgdf ,_aed :=range _eede .Slides (){if _geb :=_aed .ValidateWithPath (_af .Sprintf ("\u0053l\u0069\u0064\u0065\u005b\u0025\u0064]",_bgdf ));_geb !=nil {return _geb ;};};for _ceba ,_dcgb :=range _eede ._fbf {if _eef :=_dcgb .ValidateWithPath (_af .Sprintf ("\u0053l\u0069d\u0065\u004d\u0061\u0073\u0074\u0065\u0072\u005b\u0025\u0064\u005d",_ceba ));
_eef !=nil {return _eef ;};};for _bdbad ,_ffff :=range _eede ._ebd {if _aac :=_ffff .ValidateWithPath (_af .Sprintf ("\u0053l\u0069d\u0065\u004c\u0061\u0079\u006f\u0075\u0074\u005b\u0025\u0064\u005d",_bdbad ));_aac !=nil {return _aac ;};};return nil ;};


// NewSlideScreenSizeWithValue returns slide screen size with given width and height.
// Width and Height value is in EMU units, use our measurement.ToEMU to convert the -
// width and height value.
func NewSlideScreenSizeWithValue (width ,height int32 )SlideScreenSize {return SlideScreenSize {width ,height };};

// PrnPr returns the PrnPr property.
func (_efa PresentationProperties )PrnPr ()*_ge .CT_PrintProperties {return _efa ._gce .PrnPr };

// Save writes the presentation out to a writer in the Zip package format
func (_gga *Presentation )Save (w _eg .Writer )error {return _gga .save (w ,false )};

// NormalViewPr returns the NormalViewPr property.
func (_daaf ViewProperties )NormalViewPr ()*_ge .CT_NormalViewProperties {return _daaf ._cacg .NormalViewPr ;};

// AddTextBox adds an empty textbox to a slide.
func (_feba Slide )AddTextBox ()TextBox {_daef :=_ge .NewCT_GroupShapeChoice ();_feba ._gcgbd .CSld .SpTree .GroupShapeChoice =append (_feba ._gcgbd .CSld .SpTree .GroupShapeChoice ,_daef );_gfc :=_ge .NewCT_Shape ();_daef .Sp =_gfc ;_gfc .SpPr =_bc .NewCT_ShapeProperties ();
_gfc .SpPr .Xfrm =_bc .NewCT_Transform2D ();_gfc .SpPr .GeometryChoice .PrstGeom =_bc .NewCT_PresetGeometry2D ();_gfc .SpPr .GeometryChoice .PrstGeom .PrstAttr =_bc .ST_ShapeTypeRect ;_gfc .NvSpPr =_ge .NewCT_ShapeNonVisual ();_gfc .NvSpPr .CNvSpPr =_bc .NewCT_NonVisualDrawingShapeProps ();
_dgdf :=true ;_gfc .NvSpPr .CNvSpPr .TxBoxAttr =&_dgdf ;_gfc .TxBody =_bc .NewCT_TextBody ();_gfc .TxBody .BodyPr =_bc .NewCT_TextBodyProperties ();_gfc .TxBody .BodyPr .WrapAttr =_bc .ST_TextWrappingTypeSquare ;_gfc .TxBody .BodyPr .TextAutofitChoice .SpAutoFit =_bc .NewCT_TextShapeAutofit ();
_bfag :=TextBox {_gfc };_bfag .Properties ().SetWidth (3*_bd .Inch );_bfag .Properties ().SetHeight (1*_bd .Inch );_bfag .Properties ().SetPosition (0,0);return _bfag ;};var _ede =false ;

// Text returns text from a slide as one string separated with line breaks.
func (_geeb *SlideText )Text ()string {_gfb :=_dee .NewBuffer ([]byte {});for _ ,_gfa :=range _geeb .Items {if _gfa .Text !=""{_gfb .WriteString (_gfa .Text );_gfb .WriteString ("\u000a");};};return _gfb .String ();};

// NewPresentationProperties constructs a new PresentationProperties.
func NewPresentationProperties ()PresentationProperties {return PresentationProperties {_gce :_ge .NewPresentationPr ()};};

// AddDefaultSlideWithLayout tries to replicate what PowerPoint does when
// inserting a slide with a new style by clearing placeholder content and removing
// some placeholders.  Use AddSlideWithLayout if you need more control.
func (_gdga *Presentation )AddDefaultSlideWithLayout (l SlideLayout )(Slide ,error ){_efag ,_bec :=_gdga .AddSlideWithLayout (l );for _ ,_eab :=range _efag .PlaceHolders (){_eab .Clear ();switch _eab .Type (){case _ge .ST_PlaceholderTypeFtr ,_ge .ST_PlaceholderTypeDt ,_ge .ST_PlaceholderTypeSldNum :_eab .Remove ();
};};return _efag ,_bec ;};

// AddTable adds an empty table to a slide.
func (_affa Slide )AddTable ()*_ef .Table {_decf :=_ge .NewCT_GroupShapeChoice ();_affa ._gcgbd .CSld .SpTree .GroupShapeChoice =append (_affa ._gcgbd .CSld .SpTree .GroupShapeChoice ,_decf );_eddd :=_ge .NewCT_GraphicalObjectFrame ();_decf .GraphicFrame =_eddd ;
_eddd .Xfrm .Off =_bc .NewCT_Point2D ();_ddec :=int64 (1);_eddd .Xfrm .Off .XAttr =_bc .ST_Coordinate {ST_CoordinateUnqualified :&_ddec };_eddd .Xfrm .Off .YAttr =_bc .ST_Coordinate {ST_CoordinateUnqualified :&_ddec };_gdcag :=_eddd .Graphic .CT_GraphicalObject .GraphicData ;
_gdcag .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0074\u0061\u0062\u006c\u0065";
_fcdc :=_ef .NewTableWithXfrm (_eddd .Xfrm );_gdcag .Any =append (_gdcag .Any ,_fcdc .X ());return _fcdc ;};

// SaveToFileAsTemplate writes the Presentation out to a file as a template.
func (_dgb *Presentation )SaveToFileAsTemplate (path string )error {return _dgb .saveToFile (path ,true )};

// SlideScreenSize represents the slide screen size as a 2 element array
// representing the width and height in EMU units.
type SlideScreenSize [2]int32 ;func (_fcfbg *Presentation )save (_baf _eg .Writer ,_cace bool )error {const _gdgb ="\u0050\u0072\u0065\u0073en\u0074\u0061\u0074\u0069\u006f\u006e\u003a\u0070\u002e\u0053\u0061\u0076\u0065";if _daag :=_fcfbg ._aag .Validate ();
_daag !=nil {_ae .Log .Debug ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_daag );};if !_ee .GetLicenseKey ().IsLicensed ()&&!_ede {_af .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");
_af .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");
return _fd .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_feb :="\u0075n\u006b\u006e\u006f\u0077\u006e";if _aadc ,_fddcg :=_baf .(*_gd .File );
_fddcg {_feb =_aadc .Name ();};if len (_fcfbg ._cece )==0{_bca ,_fccc :=_ee .GenRefId ("\u0070\u0077");if _fccc !=nil {_ae .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fccc );return _fccc ;};_fcfbg ._cece =_bca ;};if _bdga :=_ee .Track (_fcfbg ._cece ,_gdgb ,_feb );
_bdga !=nil {_ae .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_bdga );return _bdga ;};if _cace {_fcfbg .ContentTypes .RemoveOverride ("\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");
_fcfbg .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");
}else {_fcfbg .ContentTypes .RemoveOverride ("\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");
_fcfbg .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");
};_cae :=_de .DocTypePresentation ;_abd :=_ec .NewWriter (_baf );defer _abd .Close ();if _cga :=_be .MarshalXML (_abd ,_de .BaseRelsFilename ,_fcfbg .Rels .X ());_cga !=nil {return _cga ;};if _ebf :=_be .MarshalXMLByType (_abd ,_cae ,_de .ExtendedPropertiesType ,_fcfbg .AppProperties .X ());
_ebf !=nil {return _ebf ;};if _fagd :=_be .MarshalXMLByType (_abd ,_cae ,_de .CorePropertiesType ,_fcfbg .CoreProperties .X ());_fagd !=nil {return _fagd ;};if _cdf :=_be .MarshalXMLByType (_abd ,_cae ,_de .PresentationPropertiesType ,_fcfbg ._dea .X ());
_cdf !=nil {return _cdf ;};if _eaf :=_be .MarshalXMLByType (_abd ,_cae ,_de .ViewPropertiesType ,_fcfbg ._fbb .X ());_eaf !=nil {return _eaf ;};if _gcb :=_be .MarshalXMLByType (_abd ,_cae ,_de .TableStylesType ,_fcfbg ._gcf .X ());_gcb !=nil {return _gcb ;
};if len (_fcfbg ._agbe )> 0{for _ccf ,_aebb :=range _fcfbg ._agbe {_abda :=_de .AbsoluteFilename (_de .DocTypePresentation ,_de .CustomXMLType ,_fcfbg ._gad [_ccf ]);if _cfec :=_be .MarshalXML (_abd ,_abda ,_aebb );_cfec !=nil {return _cfec ;};};};if _fcfbg .CustomProperties .X ()!=nil {if _cddab :=_be .MarshalXMLByType (_abd ,_cae ,_de .CustomPropertiesType ,_fcfbg .CustomProperties .X ());
_cddab !=nil {return _cddab ;};};if _fcfbg .Thumbnail !=nil {_ebde ,_ded :=_abd .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _ded !=nil {return _ded ;};if _cebb :=_dd .Encode (_ebde ,_fcfbg .Thumbnail ,nil );
_cebb !=nil {return _cebb ;};};_efe :=_de .AbsoluteFilename (_cae ,_de .OfficeDocumentType ,0);if _ebfa :=_be .MarshalXML (_abd ,_efe ,_fcfbg ._aag );_ebfa !=nil {return _ebfa ;};if _bdba :=_be .MarshalXML (_abd ,_be .RelationsPathFor (_efe ),_fcfbg ._cdda .X ());
_bdba !=nil {return _bdba ;};for _fgbg ,_eaa :=range _fcfbg ._gde {if _eaa ==nil {continue ;};_fad :=_de .AbsoluteFilename (_de .DocTypePresentation ,_de .SlideType ,_fcfbg ._fe [_fgbg ]);_be .MarshalXML (_abd ,_fad ,_eaa );if !_fcfbg ._cfa [_fgbg ].IsEmpty (){_badd :=_be .RelationsPathFor (_fad );
_be .MarshalXML (_abd ,_badd ,_fcfbg ._cfa [_fgbg ].X ());};};for _gdgg ,_cbg :=range _fcfbg ._fbf {if _cbg ==nil {continue ;};_fbc :=_de .AbsoluteFilename (_de .DocTypePresentation ,_de .SlideMasterType ,_fcfbg ._bdg [_gdgg ]);_be .MarshalXML (_abd ,_fbc ,_cbg );
if !_fcfbg ._bbc [_gdgg ].IsEmpty (){_febg :=_be .RelationsPathFor (_fbc );_be .MarshalXML (_abd ,_febg ,_fcfbg ._bbc [_gdgg ].X ());};};for _gaff ,_cdc :=range _fcfbg ._ebd {if _cdc ==nil {continue ;};_bce :=_de .AbsoluteFilename (_de .DocTypePresentation ,_de .SlideLayoutType ,_gaff +1);
_be .MarshalXML (_abd ,_bce ,_cdc );if !_fcfbg ._cge [_gaff ].IsEmpty (){_affb :=_be .RelationsPathFor (_bce );_be .MarshalXML (_abd ,_affb ,_fcfbg ._cge [_gaff ].X ());};};for _eag ,_ggac :=range _fcfbg ._cgb {if _ggac ==nil {continue ;};_abc :=_de .AbsoluteFilename (_de .DocTypePresentation ,_de .ThemeType ,_fcfbg ._fdba [_eag ]);
_be .MarshalXML (_abd ,_abc ,_ggac );if !_fcfbg ._gae [_eag ].IsEmpty (){_cfcf :=_be .RelationsPathFor (_abc );_be .MarshalXML (_abd ,_cfcf ,_fcfbg ._gae [_eag ].X ());};};for _cde ,_aaf :=range _fcfbg ._ffaf {_ceacg :=_de .AbsoluteFilename (_cae ,_de .ChartType ,_cde +1);
_be .MarshalXML (_abd ,_ceacg ,_aaf );};for _bcb ,_edd :=range _fcfbg ._fef {_ddgd :=_de .AbsoluteFilename (_cae ,_de .HandoutMasterType ,_bcb +1);_be .MarshalXML (_abd ,_ddgd ,_edd );};for _ced ,_acgf :=range _fcfbg ._daga {if _acgf ==nil {continue ;};
_cce :=_de .AbsoluteFilename (_cae ,_de .NotesMasterType ,_fcfbg ._bgbd [_ced ]);_be .MarshalXML (_abd ,_cce ,_acgf );};for _bed ,_aec :=range _fcfbg .Images {_gaac :=_bed +1;if _dgggc ,_ggfge :=_ce .StringToNumbers (_aec .Target ());_ggfge &&_gaac !=_dgggc {_gaac =_dgggc ;
};if _deega :=_ef .AddImageToZip (_abd ,_aec ,_gaac ,_de .DocTypePresentation );_deega !=nil {return _deega ;};};_fcfbg .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_fcfbg .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");
_fcfbg .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_fcfbg .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");if _bac :=_be .MarshalXML (_abd ,_de .ContentTypesFilename ,_fcfbg .ContentTypes .X ());
_bac !=nil {return _bac ;};if _gcee :=_fcfbg .WriteExtraFiles (_abd );_gcee !=nil {return _gcee ;};return nil ;};

// SaveAsTemplate writes the presentation out to a writer in the Zip package format as a template
func (_gac *Presentation )SaveAsTemplate (w _eg .Writer )error {return _gac .save (w ,true )};func (_eedc *Slide )getSlideRels ()_ef .Relationships {_eedg :=_eedc ._becd ;for _ccc ,_dfd :=range _eedg .Slides (){if *_eedc ._gcgbd ==*_dfd ._gcgbd {return _eedg ._cfa [_ccc ];
};};return _ef .Relationships {};};

// SlideText is an array of extracted text items which has some methods for representing extracted text from a slide.
type SlideText struct{Items []*TextItem ;};type rectangle struct{_dc int64 ;_adg int64 ;_gf int64 ;_gef int64 ;};

// AddImage adds an image textbox to a slide.
func (_bfgg Slide )AddImage (img _ef .ImageRef )Image {_caf :=_ge .NewCT_GroupShapeChoice ();_bfgg ._gcgbd .CSld .SpTree .GroupShapeChoice =append (_bfgg ._gcgbd .CSld .SpTree .GroupShapeChoice ,_caf );_fceb :=_ge .NewCT_Picture ();_caf .Pic =_fceb ;_fceb .NvPicPr .CNvPicPr =_bc .NewCT_NonVisualPictureProperties ();
_fceb .NvPicPr .CNvPicPr .PicLocks =_bc .NewCT_PictureLocking ();_fceb .NvPicPr .CNvPicPr .PicLocks .NoChangeAspectAttr =_de .Bool (true );_fceb .BlipFill =_bc .NewCT_BlipFillProperties ();_fceb .BlipFill .Blip =_bc .NewCT_Blip ();_fbdc :=_bfgg .AddImageToRels (img );
_fceb .BlipFill .Blip .EmbedAttr =_de .String (_fbdc );_fceb .BlipFill .FillModePropertiesChoice .Stretch =_bc .NewCT_StretchInfoProperties ();_fceb .BlipFill .FillModePropertiesChoice .Stretch .FillRect =_bc .NewCT_RelativeRect ();_fceb .SpPr =_bc .NewCT_ShapeProperties ();
_fceb .SpPr .GeometryChoice .PrstGeom =_bc .NewCT_PresetGeometry2D ();_fceb .SpPr .GeometryChoice .PrstGeom .PrstAttr =_bc .ST_ShapeTypeRect ;_bfagf :=Image {_fceb };_ceea :=img .Size ();_bfagf .Properties ().SetWidth (_bd .Distance (_ceea .X )*_bd .Pixel72 );
_bfagf .Properties ().SetHeight (_bd .Distance (_ceea .Y )*_bd .Pixel72 );_bfagf .Properties ().SetPosition (0,0);return _bfagf ;};func (_bda *chart )Target ()string {return _bda ._fc };

// New initializes and returns a new presentation
func New ()*Presentation {_aebe :=_daeg ();_aebe .ContentTypes .AddOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");
_aebe .ContentTypes .AddOverride ("\u0070\u0070\u0074\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066\u0069\u0063e\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070\u0073\u002b\u0078\u006d\u006c");
_aebe .ContentTypes .AddOverride ("\u0070\u0070\u0074\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066\u0069\u0063e\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070\u0073\u002b\u0078\u006d\u006c");
_aebe .ContentTypes .AddOverride ("\u0070\u0070\u0074\u002fta\u0062\u006c\u0065\u0053\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0061\u0062\u006c\u0065\u0053t\u0079\u006c\u0065\u0073\u002b\u0078m\u006c");
_aebe .Rels .AddRelationship ("\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063\u006f\u0072e\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006ba\u0067\u0065\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006d\u0065\u0074\u0061\u0064\u0061\u0074\u0061/\u0063\u006f\u0072\u0065\u002d\u0070\u0072\u006f\u0070e\u0072\u0074i\u0065\u0073");
_aebe .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c","\u0068t\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073.\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069p\u0073\u002f\u0065x\u0074\u0065\u006e\u0064\u0065d\u002d\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073");
_aebe .Rels .AddRelationship ("p\u0070t\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074a\u0074\u0069\u006f\u006e.x\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072g\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006fc\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074");
_aebe ._aag .SldMasterIdLst =_ge .NewCT_SlideMasterIdList ();_ebgf :=_ge .NewSldMaster ();_ebgf .ClrMap .Bg1Attr =_bc .ST_ColorSchemeIndexLt1 ;_ebgf .ClrMap .Bg2Attr =_bc .ST_ColorSchemeIndexLt2 ;_ebgf .ClrMap .Tx1Attr =_bc .ST_ColorSchemeIndexDk1 ;_ebgf .ClrMap .Tx2Attr =_bc .ST_ColorSchemeIndexDk2 ;
_ebgf .ClrMap .Accent1Attr =_bc .ST_ColorSchemeIndexAccent1 ;_ebgf .ClrMap .Accent2Attr =_bc .ST_ColorSchemeIndexAccent2 ;_ebgf .ClrMap .Accent3Attr =_bc .ST_ColorSchemeIndexAccent3 ;_ebgf .ClrMap .Accent4Attr =_bc .ST_ColorSchemeIndexAccent4 ;_ebgf .ClrMap .Accent5Attr =_bc .ST_ColorSchemeIndexAccent5 ;
_ebgf .ClrMap .Accent6Attr =_bc .ST_ColorSchemeIndexAccent6 ;_ebgf .ClrMap .HlinkAttr =_bc .ST_ColorSchemeIndexHlink ;_ebgf .ClrMap .FolHlinkAttr =_bc .ST_ColorSchemeIndexFolHlink ;_aebe ._fbf =append (_aebe ._fbf ,_ebgf );_aebe ._bdg =append (_aebe ._bdg ,len (_aebe ._fbf ));
_bfa :=_de .AbsoluteFilename (_de .DocTypePresentation ,_de .SlideMasterType ,1);_aebe .ContentTypes .AddOverride (_bfa ,_de .SlideMasterContentType );_fag :=_aebe ._cdda .AddAutoRelationship (_de .DocTypePresentation ,_de .OfficeDocumentType ,1,_de .SlideMasterType );
_ebda :=_ge .NewCT_SlideMasterIdListEntry ();_ebda .IdAttr =_de .Uint32 (2147483648);_ebda .RIdAttr =_fag .ID ();_aebe ._aag .SldMasterIdLst .SldMasterId =append (_aebe ._aag .SldMasterIdLst .SldMasterId ,_ebda );_bddg :=_ef .NewRelationships ();_aebe ._bbc =append (_aebe ._bbc ,_bddg );
_fff :=_ge .NewSldLayout ();_fdca :=_bddg .AddAutoRelationship (_de .DocTypePresentation ,_de .SlideMasterType ,1,_de .SlideLayoutType );_eec :=_de .AbsoluteFilename (_de .DocTypePresentation ,_de .SlideLayoutType ,1);_aebe .ContentTypes .AddOverride (_eec ,_de .SlideLayoutContentType );
_bddg .AddAutoRelationship (_de .DocTypePresentation ,_de .SlideMasterType ,1,_de .ThemeType );_aebe ._ebd =append (_aebe ._ebd ,_fff );_ebgf .SldLayoutIdLst =_ge .NewCT_SlideLayoutIdList ();_ged :=_ge .NewCT_SlideLayoutIdListEntry ();_ged .IdAttr =_de .Uint32 (2147483649);
_ged .RIdAttr =_fdca .ID ();_ebgf .SldLayoutIdLst .SldLayoutId =append (_ebgf .SldLayoutIdLst .SldLayoutId ,_ged );_bdgg :=_ef .NewRelationships ();_aebe ._cge =append (_aebe ._cge ,_bdgg );_bdgg .AddAutoRelationship (_de .DocTypePresentation ,_de .SlideType ,1,_de .SlideMasterType );
_aebe ._aag .NotesSz .CxAttr =6858000;_aebe ._aag .NotesSz .CyAttr =9144000;_fab :=_bc .NewTheme ();_fab .NameAttr =_de .String ("\u0075n\u0069o\u0066\u0066\u0069\u0063\u0065\u0020\u0054\u0068\u0065\u006d\u0065");_fab .ThemeElements .ClrScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";
_fab .ThemeElements .ClrScheme .Dk1 .SysClr =_bc .NewCT_SystemColor ();_fab .ThemeElements .ClrScheme .Dk1 .SysClr .LastClrAttr =_de .String ("\u0030\u0030\u0030\u0030\u0030\u0030");_fab .ThemeElements .ClrScheme .Dk1 .SysClr .ValAttr =_bc .ST_SystemColorValWindowText ;
_fab .ThemeElements .ClrScheme .Lt1 .SysClr =_bc .NewCT_SystemColor ();_fab .ThemeElements .ClrScheme .Lt1 .SysClr .LastClrAttr =_de .String ("\u0066\u0066\u0066\u0066\u0066\u0066");_fab .ThemeElements .ClrScheme .Lt1 .SysClr .ValAttr =_bc .ST_SystemColorValWindow ;
_fab .ThemeElements .ClrScheme .Dk2 .SrgbClr =_bc .NewCT_SRgbColor ();_fab .ThemeElements .ClrScheme .Dk2 .SrgbClr .ValAttr ="\u0034\u0034\u0035\u0034\u0036\u0061";_fab .ThemeElements .ClrScheme .Lt2 .SrgbClr =_bc .NewCT_SRgbColor ();_fab .ThemeElements .ClrScheme .Lt2 .SrgbClr .ValAttr ="\u0065\u0037\u0065\u0037\u0065\u0036";
_fab .ThemeElements .ClrScheme .Accent1 .SrgbClr =_bc .NewCT_SRgbColor ();_fab .ThemeElements .ClrScheme .Accent1 .SrgbClr .ValAttr ="\u0034\u0034\u0037\u0032\u0063\u0034";_fab .ThemeElements .ClrScheme .Accent2 .SrgbClr =_bc .NewCT_SRgbColor ();_fab .ThemeElements .ClrScheme .Accent2 .SrgbClr .ValAttr ="\u0065\u0064\u0037\u0064\u0033\u0031";
_fab .ThemeElements .ClrScheme .Accent3 .SrgbClr =_bc .NewCT_SRgbColor ();_fab .ThemeElements .ClrScheme .Accent3 .SrgbClr .ValAttr ="\u0061\u0035\u0061\u0035\u0061\u0035";_fab .ThemeElements .ClrScheme .Accent4 .SrgbClr =_bc .NewCT_SRgbColor ();_fab .ThemeElements .ClrScheme .Accent4 .SrgbClr .ValAttr ="\u0066\u0066\u0063\u0030\u0030\u0030";
_fab .ThemeElements .ClrScheme .Accent5 .SrgbClr =_bc .NewCT_SRgbColor ();_fab .ThemeElements .ClrScheme .Accent5 .SrgbClr .ValAttr ="\u0035\u0062\u0039\u0062\u0064\u0035";_fab .ThemeElements .ClrScheme .Accent6 .SrgbClr =_bc .NewCT_SRgbColor ();_fab .ThemeElements .ClrScheme .Accent6 .SrgbClr .ValAttr ="\u0037\u0030\u0061\u0064\u0034\u0037";
_fab .ThemeElements .ClrScheme .Hlink .SrgbClr =_bc .NewCT_SRgbColor ();_fab .ThemeElements .ClrScheme .Hlink .SrgbClr .ValAttr ="\u0030\u0035\u0036\u0033\u0063\u0031";_fab .ThemeElements .ClrScheme .FolHlink .SrgbClr =_bc .NewCT_SRgbColor ();_fab .ThemeElements .ClrScheme .FolHlink .SrgbClr .ValAttr ="\u0039\u0035\u0034\u0066\u0037\u0032";
_fab .ThemeElements .FontScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_fab .ThemeElements .FontScheme .MajorFont .Latin .TypefaceAttr ="\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0020\u004c\u0069\u0067\u0068\u0074";_fab .ThemeElements .FontScheme .MinorFont .Latin .TypefaceAttr ="\u0043a\u006c\u0069\u0062\u0072\u0069";
_fab .ThemeElements .FmtScheme .NameAttr =_de .String ("\u004f\u0066\u0066\u0069\u0063\u0065");_dggg :=_bc .NewEG_FillProperties ();_fab .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_fab .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_dggg );
_dggg .FillPropertiesChoice .SolidFill =&_bc .CT_SolidColorFillProperties {SchemeClr :&_bc .CT_SchemeColor {ValAttr :_bc .ST_SchemeColorValPhClr }};_dggg =_bc .NewEG_FillProperties ();_fab .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_fab .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_dggg );
_fab .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_fab .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_dggg );_dggg .FillPropertiesChoice .GradFill =&_bc .CT_GradientFillProperties {RotWithShapeAttr :_de .Bool (true ),GsLst :&_bc .CT_GradientStopList {},ShadePropertiesChoice :&_bc .EG_ShadePropertiesChoice {Lin :&_bc .CT_LinearShadeProperties {}}};
_dggg .FillPropertiesChoice .GradFill .ShadePropertiesChoice .Lin .AngAttr =_de .Int32 (5400000);_dggg .FillPropertiesChoice .GradFill .ShadePropertiesChoice .Lin .ScaledAttr =_de .Bool (false );_gfdf :=_bc .NewCT_GradientStop ();_gfdf .PosAttr .ST_PositiveFixedPercentageDecimal =_de .Int32 (0);
_gfdf .SchemeClr =&_bc .CT_SchemeColor {ValAttr :_bc .ST_SchemeColorValPhClr };_dggg .FillPropertiesChoice .GradFill .GsLst .Gs =append (_dggg .FillPropertiesChoice .GradFill .GsLst .Gs ,_gfdf );_gfdf =_bc .NewCT_GradientStop ();_gfdf .PosAttr .ST_PositiveFixedPercentageDecimal =_de .Int32 (50000);
_gfdf .SchemeClr =&_bc .CT_SchemeColor {ValAttr :_bc .ST_SchemeColorValPhClr };_dggg .FillPropertiesChoice .GradFill .GsLst .Gs =append (_dggg .FillPropertiesChoice .GradFill .GsLst .Gs ,_gfdf );_fab .ThemeElements .FmtScheme .LnStyleLst =_bc .NewCT_LineStyleList ();
for _edb :=0;_edb < 3;_edb ++{_abe :=_bc .NewCT_LineProperties ();_abe .WAttr =_de .Int32 (int32 (6350*(_edb +1)));_abe .CapAttr =_bc .ST_LineCapFlat ;_abe .CmpdAttr =_bc .ST_CompoundLineSng ;_abe .AlgnAttr =_bc .ST_PenAlignmentCtr ;_fab .ThemeElements .FmtScheme .LnStyleLst .Ln =append (_fab .ThemeElements .FmtScheme .LnStyleLst .Ln ,_abe );
};_fab .ThemeElements .FmtScheme .EffectStyleLst =_bc .NewCT_EffectStyleList ();for _ebdd :=0;_ebdd < 3;_ebdd ++{_dggd :=_bc .NewCT_EffectStyleItem ();_dggd .EffectPropertiesChoice .EffectLst =_bc .NewCT_EffectList ();_fab .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle =append (_fab .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle ,_dggd );
};_dcg :=_bc .NewEG_FillProperties ();_dcg .FillPropertiesChoice .SolidFill =&_bc .CT_SolidColorFillProperties {SchemeClr :&_bc .CT_SchemeColor {ValAttr :_bc .ST_SchemeColorValPhClr }};_fab .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_fab .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_dcg );
_fab .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_fab .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_dcg );_fab .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_fab .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_dggg );
_aebe ._cgb =append (_aebe ._cgb ,_fab );_bffd :=_de .AbsoluteFilename (_de .DocTypePresentation ,_de .ThemeType ,1);_aebe .ContentTypes .AddOverride (_bffd ,_de .ThemeContentType );_aebe ._cdda .AddAutoRelationship (_de .DocTypePresentation ,_de .OfficeDocumentType ,1,_de .ThemeType );
_dda :=_ef .NewRelationships ();_aebe ._gae =append (_aebe ._gae ,_dda );_aebe ._fdba =append (_aebe ._fdba ,len (_aebe ._cgb ));return _aebe ;};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_bc .CT_Table ;Row *_bc .CT_TableRow ;Cell *_bc .CT_TableCell ;RowIndex int ;ColIndex int ;};

// Text returns text from a presentation as one string separated with line breaks.
func (_cac *PresentationText )Text ()string {_ddg :=_dee .NewBuffer ([]byte {});for _ ,_gbd :=range _cac .Slides {_ddg .WriteString (_gbd .Text ());};return _ddg .String ();};

// Name returns the name of the slide layout.
func (_deag SlideLayout )Name ()string {if _deag ._dcc .CSld !=nil &&_deag ._dcc .CSld .NameAttr !=nil {return *_deag ._dcc .CSld .NameAttr ;};return "";};

// Less is for implementing sorting of two locations. Symbols share the same location if they are in the same paragraph or table. One location is 'less' than another first by y coordinate, if y coordinates are equal or differ by less than yEpsilon, then x coordinates are compared, then if they are also equal, indexes of locations in the table are compared, then positions of locations in a paragraph.
func (_afc sort2d )Less (i ,j int )bool {_geg ,_eda :=_afc [i ],_afc [j ];_cg ,_gfac :=_geg ._cfg ,_eda ._cfg ;_gag ,_aeb :=len (_cg )-1,len (_gfac )-1;_ggc ,_ddgf :=0,0;for {_eee ,_ffa ,_cec ,_bfg ,_ffd ,_aea ,_dbd ,_gdag :=_cg [_ggc ]._adg ,_gfac [_ddgf ]._adg ,_cg [_ggc ]._gef ,_gfac [_ddgf ]._gef ,_cg [_ggc ]._dc ,_gfac [_ddgf ]._dc ,_cg [_ggc ]._gf ,_gfac [_ddgf ]._gf ;
if _eee ==_ffa ||((_bdf .Abs (float64 (_eee )-float64 (_ffa ))< _gba )&&((_eee >=_ffa &&_eee <=_bfg )||(_ffa >=_eee &&_ffa <=_cec ))&&(_dbd < _aea ||_ffd > _gdag )){if _ffd ==_aea {if _ggc < _gag &&_ddgf < _aeb {_ggc ++;_ddgf ++;continue ;};if _ggc >=_gag &&_ddgf >=_aeb {break ;
};return _ggc >=_gag ;}else {return _ffd < _aea ;};}else {return _eee < _ffa ;};};_cade ,_deeg ,_fb ,_cdd :=_geg ._da ,_eda ._da ,_geg ._fcc ,_eda ._fcc ;if _cade ==_deeg {return _fb <=_cdd ;};return _cade < _deeg ;};func (_eeeg *Presentation )nextSlideID ()uint32 {_cc :=uint32 (256);
for _ ,_ddb :=range _eeeg ._aag .SldIdLst .SldId {if _ddb .IdAttr >=_cc {_cc =_ddb .IdAttr +1;};};return _cc ;};

// SetWidth sets width of slide screen size with given value in EMU units.
func (_bfffd *SlideScreenSize )SetWidth (val int32 ){_bfffd [0]=val };func (_fea TextBox )getOff ()*_bc .CT_Point2D {if _fea ._caca .SpPr ==nil {_fea ._caca .SpPr =_bc .NewCT_ShapeProperties ();};if _fea ._caca .SpPr .Xfrm ==nil {_fea ._caca .SpPr .Xfrm =_bc .NewCT_Transform2D ();
};if _fea ._caca .SpPr .Xfrm .Off ==nil {_fea ._caca .SpPr .Xfrm .Off =_bc .NewCT_Point2D ();};return _fea ._caca .SpPr .Xfrm .Off ;};

// CopySlide copies existing slide from another presentation and inserts it as a last one.
func (_bae *Presentation )CopySlide (s Slide )(Slide ,error ){_cda :=_ge .NewCT_SlideIdListEntry ();_cda .IdAttr =_bae .nextSlideID ();_bae ._aag .SldIdLst .SldId =append (_bae ._aag .SldIdLst .SldId ,_cda );_bccd :=s .GetSlideLayout ();_gfda :=true ;for _ ,_afb :=range _bae ._ebd {if _afb ==_bccd {_gfda =false ;
break ;};};if _gfda {_bae .addLayoutFromSlide (s );};_bae ._gde =append (_bae ._gde ,s ._gcgbd );_bae ._fe =append (_bae ._fe ,len (_bae ._gde ));_ggg :=_bae ._cdda .AddAutoRelationship (_de .DocTypePresentation ,_de .OfficeDocumentType ,len (_bae ._gde ),_de .SlideType );
_cda .RIdAttr =_ggg .ID ();_bbd :=_de .AbsoluteFilename (_de .DocTypePresentation ,_de .SlideType ,len (_bae ._gde ));_bae .ContentTypes .AddOverride (_bbd ,_de .SlideContentType );_fddc :=_ef .NewRelationships ();_bae ._cfa =append (_bae ._cfa ,_fddc );
_eacc :=len (_bae ._cfa )-1;for _gca ,_bdaeg :=range _bae ._ebd {if _bdaeg ==_bccd {_ece :=_bae ._cge [_gca ];for _ ,_ebc :=range _ece .X ().Relationship {if _ebc .TypeAttr !=_de .SlideMasterType {_bae ._cfa [_eacc ].X ().Relationship =append (_bae ._cfa [_eacc ].X ().Relationship ,_ebc );
};};_fddc .AddAutoRelationship (_de .DocTypePresentation ,_de .SlideType ,_gca +1,_de .SlideLayoutType );};};_fee :=Slide {_cda ,s ._gcgbd ,_bae ,nil };return _fee ,nil ;};

// GetColorBySchemeColor returns *dml.CT_Color mapped to scheme colors like dk1, lt1 etc. depending on what theme is used in the presentation.
func (_ceef *Slide )GetColorBySchemeColor (schClr _bc .ST_SchemeColorVal )*_bc .CT_Color {_ceef .ensureClrMap ();_aaae :=_ceef ._fgab ;if _aaae ==nil {return nil ;};var _bfage _bc .ST_ColorSchemeIndex ;switch schClr .String (){case "\u0062\u0067\u0031":_bfage =_aaae .Bg1Attr ;
case "\u0062\u0067\u0032":_bfage =_aaae .Bg2Attr ;case "\u0074\u0078\u0031":_bfage =_aaae .Tx1Attr ;case "\u0074\u0078\u0032":_bfage =_aaae .Tx2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_bfage =_aaae .Accent1Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_bfage =_aaae .Accent2Attr ;
case "\u0061c\u0063\u0065\u006e\u0074\u0033":_bfage =_aaae .Accent3Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_bfage =_aaae .Accent4Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_bfage =_aaae .Accent5Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_bfage =_aaae .Accent6Attr ;
case "\u0068\u006c\u0069n\u006b":_bfage =_aaae .HlinkAttr ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_bfage =_aaae .FolHlinkAttr ;case "\u0064\u006b\u0031":_bfage =_bc .ST_ColorSchemeIndexDk1 ;case "\u0064\u006b\u0032":_bfage =_bc .ST_ColorSchemeIndexDk2 ;
case "\u006c\u0074\u0031":_bfage =_bc .ST_ColorSchemeIndexLt1 ;case "\u006c\u0074\u0032":_bfage =_bc .ST_ColorSchemeIndexLt2 ;default:_bfage =_bc .ST_ColorSchemeIndexUnset ;};_cagb :=_ceef ._becd ._cgb [0];_gdge :=_cagb .ThemeElements ;if _gdge ==nil {return nil ;
};var _fdfc *_bc .CT_Color ;_dad :=_gdge .ClrScheme ;switch _bfage .String (){case "\u0064\u006b\u0031":_fdfc =_dad .Dk1 ;case "\u0064\u006b\u0032":_fdfc =_dad .Dk2 ;case "\u006c\u0074\u0031":_fdfc =_dad .Lt1 ;case "\u006c\u0074\u0032":_fdfc =_dad .Lt2 ;
case "\u0061c\u0063\u0065\u006e\u0074\u0031":_fdfc =_dad .Accent1 ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_fdfc =_dad .Accent2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_fdfc =_dad .Accent3 ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_fdfc =_dad .Accent4 ;
case "\u0061c\u0063\u0065\u006e\u0074\u0035":_fdfc =_dad .Accent5 ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_fdfc =_dad .Accent6 ;case "\u0068\u006c\u0069n\u006b":_fdfc =_dad .Hlink ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_fdfc =_dad .FolHlink ;
default:return nil ;};return _fdfc ;};

// AddImageToRels adds an image relationship to a slide without putting image on the slide.
func (_egdb Slide )AddImageToRels (img _ef .ImageRef )string {_abg :=0;for _bcaf ,_aefa :=range _egdb ._becd .Images {if _aefa ==img {_abg =_bcaf +1;break ;};};var _gdf string ;for _aedf ,_ffdf :=range _egdb ._becd .Slides (){if _ffdf ._gcgbd ==_egdb ._gcgbd {_ebea :=_af .Sprintf ("\u002e\u002e\u002f\u006ded\u0069\u0061\u002f\u0069\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",_abg ,img .Format ());
_eddc :=_egdb ._becd ._cfa [_aedf ].AddRelationship (_ebea ,_de .ImageType );_gdf =_eddc .ID ();};};return _gdf ;};

// GetChartSpaceByRelId returns a *crt.ChartSpace with the associated relation ID in the
// slide.
func (_cbdc *Slide )GetChartSpaceByRelId (relId string )*_b .ChartSpace {_bcfg :=_cbdc .getSlideRels ();if (_bcfg ==_ef .Relationships {}){return nil ;};_ddbf :=_bcfg .GetTargetByRelId (relId );for _ ,_gebd :=range _cbdc ._becd ._ffaf {if _ddbf ==_gebd .Target (){return _gebd ._gg ;
};};return nil ;};

// NewSlideScreenSize returns slide screen size with default MS PowerPoint slide screen size 16x9.
func NewSlideScreenSize ()SlideScreenSize {return NewSlideScreenSizeWithValue (SlideScreenSize16x9 [0],SlideScreenSize16x9 [1]);};

// X returns the inner wrapped XML type.
func (_cgd *SlideSize )X ()*_ge .CT_SlideSize {return _cgd ._edgd };

// SlideLayout is a layout from which slides can be created.
type SlideLayout struct{_dcc *_ge .SldLayout };type sort2d []*TextItem ;

// GetTableStyleById returns *dml.CT_TableStyle by its style id.
func (_babd *Presentation )GetTableStyleById (id string )*_bc .CT_TableStyle {_cbgb :=_babd ._gcf .TblStyle ();for _ ,_ceca :=range _cbgb {if _ceca .StyleIdAttr ==id {return _ceca ;};};return nil ;};

// SlideSize represents a slide size of a presentation.
type SlideSize struct{_edgd *_ge .CT_SlideSize ;_bdde *Presentation ;};

// Clear clears the placeholder contents and adds a single empty paragraph.  The
// empty paragrah is required by PowerPoint or it will report the file as being
// invalid.
func (_dag PlaceHolder )Clear (){_dag .ClearAll ();_gcgf :=_bc .NewCT_TextParagraph ();_dag ._fdd .TxBody .P =[]*_bc .CT_TextParagraph {_gcgf };_gcgf .EndParaRPr =_bc .NewCT_TextCharacterProperties ();_gcgf .EndParaRPr .LangAttr =_de .String ("\u0065\u006e\u002dU\u0053");
};func _ffdc (_cfbf []*_ge .CT_GroupShapeChoice )[]*_ge .CT_GroupShapeChoice {var _cfbd []*_ge .CT_GroupShapeChoice ;for _ ,_fec :=range _cfbf {if _fec .Pic ==nil {_cfbd =append (_cfbd ,_fec );};};return _cfbd ;};

// GetImageByTarget returns an ImageRef with the given target in the
// document.
func (_eaad *Presentation )GetImageByTarget (target string )(_ef .ImageRef ,bool ){for _ ,_ebff :=range _eaad .Images {if _ebff .Target ()==target {return _ebff ,true ;};};return _ef .ImageRef {},false ;};

// ExtLst returns the ExtLst property.
func (_bgaa ViewProperties )ExtLst ()*_ge .CT_ExtensionList {return _bgaa ._cacg .ExtLst };

// SetTextAnchor controls the text anchoring
func (_cgf TextBox )SetTextAnchor (a _bc .ST_TextAnchoringType ){_cgf ._caca .TxBody .BodyPr =_bc .NewCT_TextBodyProperties ();_cgf ._caca .TxBody .BodyPr .AnchorAttr =a ;};

// SlideLayouts returns the slide layouts defined in the presentation.
func (_geebc *Presentation )SlideLayouts ()[]SlideLayout {_cfcb :=[]SlideLayout {};for _ ,_becb :=range _geebc ._ebd {if _becb ==nil {continue ;};if _becb .CSld .NameAttr ==nil {continue ;};_cfcb =append (_cfcb ,SlideLayout {_becb });};return _cfcb ;};
func _daeg ()*Presentation {_daea :=&Presentation {_aag :_ge .NewPresentation ()};_daea ._aag .SldIdLst =_ge .NewCT_SlideIdList ();_daea ._aag .ConformanceAttr =_c .ST_ConformanceClassTransitional ;_daea .AppProperties =_ef .NewAppProperties ();_daea .CoreProperties =_ef .NewCoreProperties ();
_daea ._gcf =_ef .NewTableStyles ();_daea .ContentTypes =_ef .NewContentTypes ();_daea .Rels =_ef .NewRelationships ();_daea ._cdda =_ef .NewRelationships ();_daea ._dea =NewPresentationProperties ();_daea ._fbb =NewViewProperties ();_daea ._aeg =map[string ]string {};
return _daea ;};func _dga (_dbb *Presentation ,_ed []*_ge .CT_GroupShapeChoice ,_fdc []rectangle ,_dcb []*TextItem )[]*TextItem {for _ ,_gaa :=range _ed {_cfd :=append ([]rectangle {},_fdc ...);if _gaa .Sp !=nil {_dcb =append (_dcb ,_cfb (_dbb ,_gaa .Sp ,nil ,nil ,_gaa .Sp .SpPr .Xfrm ,0,_fdc ,_gaa .Sp .TxBody .P )...);
};if _gaa .GraphicFrame !=nil &&_gaa .GraphicFrame .Graphic !=nil &&_gaa .GraphicFrame .Graphic .GraphicData !=nil {_gb :=_gaa .GraphicFrame .Xfrm ;for _ ,_gdc :=range _gaa .GraphicFrame .Graphic .GraphicData .Any {if _ceb ,_dgg :=_gdc .(*_bc .Tbl );_dgg {_afe :=&_ceb .CT_Table ;
_gfd :=0;for _ff ,_fda :=range _ceb .Tr {for _bdd ,_acb :=range _fda .Tc {_dae :=&TableInfo {Table :_afe ,Row :_fda ,Cell :_acb ,RowIndex :_ff ,ColIndex :_bdd };_dcb =append (_dcb ,_cfb (_dbb ,nil ,_gaa .GraphicFrame ,_dae ,_gb ,_gfd ,_fdc ,_acb .TxBody .P )...);
_gfd ++;};};};};};if _gaa .GrpSp !=nil {if _gaa .GrpSp .GrpSpPr !=nil {_fdb :=_gaa .GrpSp .GrpSpPr .Xfrm ;var _cb ,_dca int64 ;if _fdb .Off !=nil {_ag ,_gdg :=_fdb .Off .XAttr .ST_CoordinateUnqualified ,_fdb .Off .YAttr .ST_CoordinateUnqualified ;if _ag !=nil &&_gdg !=nil {if _gee :=_fdb .Ext ;
_gee !=nil {_cb ,_dca =_gee .CxAttr ,_gee .CyAttr ;};_cfd =append (_cfd ,rectangle {_dc :*_ag ,_adg :*_gdg ,_gf :*_ag +_cb ,_gef :*_gdg +_dca });};};};_dcb =_dga (_dbb ,_gaa .GrpSp .GroupShapeChoice ,_cfd ,_dcb );};};return _dcb ;};

// NotesTextViewPr returns the NotesTextViewPr property.
func (_bcac ViewProperties )NotesTextViewPr ()*_ge .CT_NotesTextViewProperties {return _bcac ._cacg .NotesTextViewPr ;};

// ExtractText returns text from a slide as a SlideText object.
func (_gdd *Slide )ExtractText ()*SlideText {_ea :=_dga (_gdd ._becd ,_gdd ._gcgbd .CSld .SpTree .GroupShapeChoice ,[]rectangle {},[]*TextItem {});_ac .Sort (sort2d (_ea ));return &SlideText {Items :_ea };};

// Open opens and reads a document from a file (.pptx).
func Open (filename string )(*Presentation ,error ){_cef ,_edac :=_gd .Open (filename );if _edac !=nil {return nil ,_af .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_edac );};defer _cef .Close ();
_bff ,_edac :=_gd .Stat (filename );if _edac !=nil {return nil ,_af .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_edac );};_ =_bff ;return Read (_cef ,_bff .Size ());};func (_gbdb *Presentation )addLayoutFromSlide (_fgb Slide )error {_ecgf :=1;
for _ ,_fcf :=range _gbdb .Images {if _bab ,_gdca :=_ce .StringToNumbers (_fcf .Target ());_gdca &&_bab >=_ecgf {_ecgf =_bab +1;};};_gbdb ._ebd =append (_gbdb ._ebd ,_fgb .GetSlideLayout ());_dgad :=_fgb .getSlideLayoutRels ();for _ ,_ade :=range _dgad .X ().Relationship {if _ade .TypeAttr ==_de .ImageType {_gfaca ,_abef :=_fgb ._becd .GetImageByTarget (_ade .TargetAttr );
if _abef {if _dcad ,_ggfg :=_ce .StringToNumbers (_gfaca .Target ());_ggfg &&_dcad < _ecgf {_gfaca .SetTarget (_d .ReplaceAll (_gfaca .Target (),_af .Sprint (_dcad ),_af .Sprint (_ecgf )));_ade .TargetAttr =_gfaca .Target ();_ecgf =_ecgf +1;};_gbdb .Images =append (_gbdb .Images ,_gfaca );
};};};_gbdb ._cge =append (_gbdb ._cge ,_dgad );if len (_gbdb ._fbf )> 0&&len (_gbdb ._bbc )> 0{_bad :=_gbdb ._bbc [0].AddAutoRelationship (_de .DocTypePresentation ,_de .SlideMasterType ,len (_gbdb ._ebd ),_de .SlideLayoutType );_gbdb ._bbc [0].Reorder ();
_dagg :=_ge .NewCT_SlideLayoutIdListEntry ();_dagg .IdAttr =_de .Uint32 (2147483649);_dagg .RIdAttr =_bad .ID ();for _ ,_fcfb :=range _gbdb ._fbf [0].SldLayoutIdLst .SldLayoutId {if *_fcfb .IdAttr >=*_dagg .IdAttr {_dagg .IdAttr =_de .Uint32 ((*_fcfb .IdAttr +2));
};};_gbdb ._fbf [0].SldLayoutIdLst .SldLayoutId =append (_gbdb ._fbf [0].SldLayoutIdLst .SldLayoutId ,_dagg );};_dcgg :=_de .AbsoluteFilename (_de .DocTypePresentation ,_de .SlideLayoutType ,len (_gbdb ._ebd ));_gbdb .ContentTypes .AddOverride (_dcgg ,_de .SlideLayoutContentType );
return nil ;};

// SlideMasters returns the slide masters defined in the presentation.
func (_bdfg *Presentation )SlideMasters ()[]SlideMaster {_aga :=[]SlideMaster {};for _febgd ,_facd :=range _bdfg ._fbf {if _febgd < len (_bdfg ._bbc ){_aga =append (_aga ,SlideMaster {_bdfg ,_bdfg ._bbc [_febgd ],_facd });};};return _aga ;};func (_db *chart )RelId ()string {return _db ._ad };


// Image is an image within a slide.
type Image struct{_bdb *_ge .CT_Picture };

// ExtractText returns text from a presentation as a PresentationText object.
func (_dbg *Presentation )ExtractText ()*PresentationText {_bg :=[]*SlideText {};for _ ,_ca :=range _dbg .Slides (){_dg :=_ca .ExtractText ();if _dg !=nil {_bg =append (_bg ,_dg );};};return &PresentationText {Slides :_bg };};

// TextBox is a text box within a slide.
type TextBox struct{_caca *_ge .CT_Shape };

// Read reads a document from an io.Reader.
func Read (r _eg .ReaderAt ,size int64 )(*Presentation ,error ){const _aacf ="\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0052\u0065\u0061\u0064";if !_ee .GetLicenseKey ().IsLicensed ()&&!_ede {_af .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");
_af .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");
return nil ,_fd .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_gcc :="\u0075n\u006b\u006e\u006f\u0077\u006e";if _cbf ,_dgae :=r .(*_gd .File );
_dgae {_gcc =_cbf .Name ();};_fbeb :=_daeg ();_bfc ,_ceeb :=_ee .GenRefId ("\u0070\u0072");if _ceeb !=nil {_ae .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_ceeb );return nil ,_ceeb ;};_fbeb ._cece =_bfc ;if _adge :=_ee .Track (_fbeb ._cece ,_aacf ,_gcc );
_adge !=nil {_ae .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_adge );return nil ,_adge ;};_ccg ,_ceeb :=_cf .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0070\u0070\u0074\u0078");if _ceeb !=nil {return nil ,_ceeb ;
};_fbeb .TmpPath =_ccg ;_abb ,_ceeb :=_ec .NewReader (r ,size );if _ceeb !=nil {return nil ,_af .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_ceeb );};_abed :=[]*_ec .File {};_abed =append (_abed ,_abb .File ...);
_ddfd :=false ;for _ ,_aeba :=range _abed {if _aeba .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_ddfd =true ;break ;};};if _ddfd {_fbeb .CreateCustomProperties ();};_ggcc :=_be .DecodeMap {};
_ggcc .SetOnNewRelationshipFunc (_fbeb .onNewRelationship );_ggcc .AddTarget (_de .ContentTypesFilename ,_fbeb .ContentTypes .X (),"",0);_ggcc .AddTarget (_de .BaseRelsFilename ,_fbeb .Rels .X (),"",0);if _bbff :=_ggcc .Decode (_abed );_bbff !=nil {return nil ,_bbff ;
};for _ ,_eff :=range _abed {if _eff ==nil {continue ;};if _bbfb :=_fbeb .AddExtraFileFromZip (_eff );_bbfb !=nil {return nil ,_bbfb ;};};if _ddfd {_gefg :=false ;for _ ,_cfcbe :=range _fbeb .Rels .X ().Relationship {if _cfcbe .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_gefg =true ;
break ;};};if !_gefg {_fbeb .AddCustomRelationships ();};};return _fbeb ,nil ;};

// Remove removes a placeholder from a presentation.
func (_cbb PlaceHolder )Remove ()error {for _ddd ,_gbgc :=range _cbb ._df .CSld .SpTree .GroupShapeChoice {if _gbgc .Sp !=nil &&_gbgc .Sp ==_cbb ._fdd {copy (_cbb ._df .CSld .SpTree .GroupShapeChoice [_ddd :],_cbb ._df .CSld .SpTree .GroupShapeChoice [_ddd +1:]);
_cbb ._df .CSld .SpTree .GroupShapeChoice =_cbb ._df .CSld .SpTree .GroupShapeChoice [0:len (_cbb ._df .CSld .SpTree .GroupShapeChoice )-1];return nil ;};};return _fd .New ("\u0070\u006c\u0061\u0063\u0065\u0068\u006f\u006c\u0064\u0065r\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u006c\u0069\u0064\u0065");
};

// ClrMru returns the ClrMru property.
func (_aabg PresentationProperties )ClrMru ()*_bc .CT_ColorMRU {return _aabg ._gce .ClrMru };

// Size returns slide size value as SlideScreenSize.
func (_beddd *SlideSize )Size ()SlideScreenSize {return SlideScreenSize {_beddd ._edgd .CxAttr ,_beddd ._edgd .CyAttr };};

// X returns the inner wrapped XML type.
func (_gfdfc SlideLayout )X ()*_ge .SldLayout {return _gfdfc ._dcc };

// Slide represents a slide of a presentation.
type Slide struct{_afce *_ge .CT_SlideIdListEntry ;_gcgbd *_ge .Sld ;_becd *Presentation ;_fgab *_bc .CT_ColorMapping ;};

// X returns the inner wrapped XML type.
func (_fcbe SlideMaster )X ()*_ge .SldMaster {return _fcbe ._agae };func (_aa *chart )X ()*_b .ChartSpace {return _aa ._gg };

// MoveSlide moves a slide with given number to position targetPos within a presentation.
func (_gbf *Presentation )MoveSlide (slideNumber ,targetPos int )error {if slideNumber < 0||slideNumber >=len (_gbf ._gde ){return _fd .New ("\u0073\u006c\u0069\u0064eN\u0075\u006d\u0062\u0065\u0072\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006ci\u0064");
};if targetPos < 0||targetPos >=len (_gbf ._gde ){return _fd .New ("t\u0061r\u0067\u0065\u0074\u0050\u006f\u0073\u0020\u0069s\u0020\u0069\u006e\u0076al\u0069\u0064");};if slideNumber ==targetPos {return nil ;};_afdg :=_gbf ._gde [slideNumber ];_gdcc :=_gbf ._cfa [slideNumber ];
if slideNumber < targetPos {copy (_gbf ._gde [slideNumber :targetPos ],_gbf ._gde [slideNumber +1:targetPos +1]);copy (_gbf ._cfa [slideNumber :targetPos ],_gbf ._cfa [slideNumber +1:targetPos +1]);}else {copy (_gbf ._gde [targetPos +1:slideNumber +1],_gbf ._gde [targetPos :slideNumber ]);
copy (_gbf ._cfa [targetPos +1:slideNumber +1],_gbf ._cfa [targetPos :slideNumber ]);};_gbf ._gde [targetPos ]=_afdg ;_gbf ._cfa [targetPos ]=_gdcc ;return nil ;};func (_gddd sort2d )Len ()int {return len (_gddd )};

// GetTextBoxes returns a list of all text boxes from a slide.
func (_adbf Slide )GetTextBoxes ()[]*TextBox {_cefe :=[]*TextBox {};_dff :=_adbf ._gcgbd .CSld .SpTree .GroupShapeChoice ;for _ ,_adbd :=range _dff {if _adbd .Sp !=nil &&_adbd .Sp .NvSpPr .CNvSpPr .TxBoxAttr !=nil &&*_adbd .Sp .NvSpPr .CNvSpPr .TxBoxAttr {_cefe =append (_cefe ,&TextBox {_adbd .Sp });
};};return _cefe ;};

// Properties returns the properties of the TextBox.
func (_ffeg TextBox )Properties ()_bbe .ShapeProperties {if _ffeg ._caca .SpPr ==nil {_ffeg ._caca .SpPr =_bc .NewCT_ShapeProperties ();};return _bbe .MakeShapeProperties (_ffeg ._caca .SpPr );};

// SetSize sets the slide size, take argument of SlideScreenSize.
func (_bace *SlideSize )SetSize (sz SlideScreenSize ){_bace ._edgd .CxAttr =sz [0];_bace ._edgd .CyAttr =sz [1];};

// SlideLayouts returns a slice of all layouts in SlideMaster.
func (_edf SlideMaster )SlideLayouts ()[]SlideLayout {_ggge :=map[string ]int {};_bdeb :=[]SlideLayout {};for _ ,_geef :=range _edf ._gaef .Relationships (){_bdfc :=_d .Replace (_geef .Target (),".\u002e\u002f\u0073\u006c\u0069\u0064e\u004c\u0061\u0079\u006f\u0075\u0074\u0073\u002f\u0073l\u0069\u0064\u0065L\u0061y\u006f\u0075\u0074","",-1);
_bdfc =_d .Replace (_bdfc ,"\u002e\u0078\u006d\u006c","",-1);if _ffbb ,_gaec :=_bb .ParseInt (_bdfc ,10,32);_gaec ==nil {_ggge [_geef .ID ()]=int (_ffbb );};};for _ ,_bge :=range _edf ._agae .SldLayoutIdLst .SldLayoutId {if _egc ,_geebd :=_ggge [_bge .RIdAttr ];
_geebd {_cdg :=_edf ._abca ._ebd [_egc -1];_bdeb =append (_bdeb ,SlideLayout {_cdg });};};return _bdeb ;};

// Type returns the placeholder type
func (_aebf PlaceHolder )Type ()_ge .ST_PlaceholderType {return _aebf ._fdd .NvSpPr .NvPr .Ph .TypeAttr };

// Slides returns the slides in the presentation.
func (_fgaa *Presentation )Slides ()[]Slide {_dbe :=[]Slide {};for _eae ,_bbb :=range _fgaa ._gde {_dbe =append (_dbe ,Slide {_fgaa ._aag .SldIdLst .SldId [_eae ],_bbb ,_fgaa ,nil });};return _dbe ;};

// Width returns slide screen size width in EMU units.
func (_gdgbd *SlideScreenSize )Width ()int32 {return _gdgbd [0]};

// Presentation is the a presentation base document.
type Presentation struct{_ef .DocBase ;_aag *_ge .Presentation ;_cdda _ef .Relationships ;_gde []*_ge .Sld ;_cfa []_ef .Relationships ;_fe []int ;_fbf []*_ge .SldMaster ;_bbc []_ef .Relationships ;_bdg []int ;_ebd []*_ge .SldLayout ;_cge []_ef .Relationships ;
_cgb []*_bc .Theme ;_gae []_ef .Relationships ;_fdba []int ;_gcf _ef .TableStyles ;_dea PresentationProperties ;_fbb ViewProperties ;_bbf []*_bc .CT_Hyperlink ;_ffaf []*chart ;_fef []*_ge .HandoutMaster ;_daga []*_ge .NotesMaster ;_bgbd []int ;_agbe []*_de .XSDAny ;
_gad []int ;_aeg map[string ]string ;_cece string ;};

// GetPlaceholder returns a placeholder given its type.  If there are multiplace
// placeholders of the same type, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_eabf Slide )GetPlaceholder (t _ge .ST_PlaceholderType )(PlaceHolder ,error ){for _ ,_beb :=range _eabf ._gcgbd .CSld .SpTree .GroupShapeChoice {if _beb .Sp !=nil &&_beb .Sp .NvSpPr !=nil &&_beb .Sp .NvSpPr .NvPr !=nil &&_beb .Sp .NvSpPr .NvPr .Ph !=nil {if _beb .Sp .NvSpPr .NvPr .Ph .TypeAttr ==t {return PlaceHolder {_beb .Sp ,_eabf ._gcgbd },nil ;
};};};return PlaceHolder {},_fd .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// ViewProperties contains presentation specific properties.
type ViewProperties struct{_cacg *_ge .ViewPr };func (_agb sort2d )Swap (i ,j int ){_agb [i ],_agb [j ]=_agb [j ],_agb [i ]};

// LastViewAttr returns the LastViewAttr property.
func (_dbed ViewProperties )LastViewAttr ()_ge .ST_ViewType {return _dbed ._cacg .LastViewAttr };

// Paragraphs returns the paragraphs defined in the placeholder.
func (_dab PlaceHolder )Paragraphs ()[]_bbe .Paragraph {_afd :=[]_bbe .Paragraph {};for _ ,_fbg :=range _dab ._fdd .TxBody .P {_afd =append (_afd ,_bbe .MakeParagraph (_fbg ));};return _afd ;};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// slide.
func (_efge *Slide )GetImageByRelID (relID string )(_ef .ImageRef ,bool ){_gbc :=_efge .getSlideRels ();if (_gbc ==_ef .Relationships {}){return _ef .ImageRef {},false ;};_gbef :=_gbc .GetTargetByRelId (relID );for _ ,_egg :=range _efge ._becd .Images {if _egg .Target ()==_gbef {return _egg ,true ;
};};return _ef .ImageRef {},false ;};

// GetSlideLayout returns a slide layout related to the slide.
func (_ccee *Slide )GetSlideLayout ()*_ge .SldLayout {_aadd :=_ccee .getSlideRels ();for _ ,_gafe :=range _aadd .Relationships (){if _gafe .Type ()==_de .SlideLayoutType {if _cdb ,_eeb :=_ce .StringToNumbers (_gafe .Target ());_eeb {return _ccee ._becd ._ebd [_cdb -1];
};return nil ;};};return nil ;};

// GridSpacing returns the GridSpacing property.
func (_gadg ViewProperties )GridSpacing ()*_bc .CT_PositiveSize2D {return _gadg ._cacg .GridSpacing };

// SetOffsetY sets vertical offset of text box in distance units (see measurement package).
func (_dabb TextBox )SetOffsetY (offY float64 ){_ddfg :=_dabb .getOff ();_gedb :=_bd .ToEMU (offY );_ddfg .YAttr =_bc .ST_Coordinate {ST_CoordinateUnqualified :&_gedb };};

// Themes returns an array of presentation themes.
func (_fcag *Presentation )Themes ()[]*_bc .Theme {return _fcag ._cgb };

// X returns the inner wrapped XML type.
func (_ddf PresentationProperties )X ()*_ge .PresentationPr {return _ddf ._gce };

// Sid returns the sid of slide
func (_bcff Slide )Sid ()*_ge .CT_SlideIdListEntry {return _bcff ._afce };

// GetPlaceholderByIndex returns a placeholder given its index.  If there are multiplace
// placeholders of the same index, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_baec Slide )GetPlaceholderByIndex (idx uint32 )(PlaceHolder ,error ){for _ ,_gbfg :=range _baec ._gcgbd .CSld .SpTree .GroupShapeChoice {if _gbfg .Sp !=nil &&_gbfg .Sp .NvSpPr !=nil &&_gbfg .Sp .NvSpPr .NvPr !=nil &&_gbfg .Sp .NvSpPr .NvPr .Ph !=nil {if (idx ==0&&_gbfg .Sp .NvSpPr .NvPr .Ph .IdxAttr ==nil )||(_gbfg .Sp .NvSpPr .NvPr .Ph .IdxAttr !=nil &&*_gbfg .Sp .NvSpPr .NvPr .Ph .IdxAttr ==idx ){return PlaceHolder {_gbfg .Sp ,_baec ._gcgbd },nil ;
};};};return PlaceHolder {},_fd .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};type chart struct{_gg *_b .ChartSpace ;_ad string ;_fc string ;
};

// PresentationProperties contains document specific properties.
type PresentationProperties struct{_gce *_ge .PresentationPr };

// PlaceHolder is a place holder from a slide.
type PlaceHolder struct{_fdd *_ge .CT_Shape ;_df *_ge .Sld ;};

// Type returns the type of the slide layout.
func (_fed SlideLayout )Type ()_ge .ST_SlideLayoutType {return _fed ._dcc .TypeAttr };

// GetLayoutImageByRelID returns an ImageRef with the associated relation ID in the
// slide layout.
func (_cfcg *Slide )GetLayoutImageByRelID (relID string )(_ef .ImageRef ,bool ){_dfga :=_cfcg .getSlideLayoutRels ();if (_dfga ==_ef .Relationships {}){return _ef .ImageRef {},false ;};_gddc :=_dfga .GetTargetByRelId (relID );for _ ,_bced :=range _cfcg ._becd .Images {if _bced .Target ()==_gddc {return _bced ,true ;
};};return _ef .ImageRef {},false ;};

// GetLayoutByName retrieves a slide layout given a layout name.
func (_fccaa *Presentation )GetLayoutByName (name string )(SlideLayout ,error ){for _ ,_deb :=range _fccaa ._ebd {if _deb .CSld .NameAttr !=nil &&name ==*_deb .CSld .NameAttr {return SlideLayout {_deb },nil ;};};return SlideLayout {},_fd .New ("\u0075\u006eab\u006c\u0065\u0020t\u006f\u0020\u0066\u0069nd \u006cay\u006f\u0075\u0074\u0020\u0077\u0069\u0074h \u0074\u0068\u0061\u0074\u0020\u006e\u0061m\u0065");
};

// SaveToFile writes the Presentation out to a file.
func (_gea *Presentation )SaveToFile (path string )error {return _gea .saveToFile (path ,false )};

// AddSlide adds a new slide to the presentation.
func (_gege *Presentation )AddSlide ()Slide {_eacf :=_ge .NewCT_SlideIdListEntry ();_eacf .IdAttr =_gege .nextSlideID ();_gege ._aag .SldIdLst .SldId =append (_gege ._aag .SldIdLst .SldId ,_eacf );_ccd :=_ge .NewSld ();_ccd .CSld .SpTree .NvGrpSpPr .CNvPr .IdAttr =1;
_ccd .CSld .SpTree .GrpSpPr .Xfrm =_bc .NewCT_GroupTransform2D ();_ccd .CSld .SpTree .GrpSpPr .Xfrm .Off =_bc .NewCT_Point2D ();_ccd .CSld .SpTree .GrpSpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_de .Int64 (0);_ccd .CSld .SpTree .GrpSpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_de .Int64 (0);
_ccd .CSld .SpTree .GrpSpPr .Xfrm .Ext =_bc .NewCT_PositiveSize2D ();_ccd .CSld .SpTree .GrpSpPr .Xfrm .Ext .CxAttr =int64 (0*_bd .Point );_ccd .CSld .SpTree .GrpSpPr .Xfrm .Ext .CyAttr =int64 (0*_bd .Point );_ccd .CSld .SpTree .GrpSpPr .Xfrm .ChOff =_ccd .CSld .SpTree .GrpSpPr .Xfrm .Off ;
_ccd .CSld .SpTree .GrpSpPr .Xfrm .ChExt =_ccd .CSld .SpTree .GrpSpPr .Xfrm .Ext ;_gege ._gde =append (_gege ._gde ,_ccd );_gege ._fe =append (_gege ._fe ,len (_gege ._gde ));_daf :=_gege ._cdda .AddAutoRelationship (_de .DocTypePresentation ,_de .OfficeDocumentType ,len (_gege ._gde ),_de .SlideType );
_eacf .RIdAttr =_daf .ID ();_ffe :=_de .AbsoluteFilename (_de .DocTypePresentation ,_de .SlideType ,len (_gege ._gde ));_gege .ContentTypes .AddOverride (_ffe ,_de .SlideContentType );_bbcg :=_ef .NewRelationships ();_gege ._cfa =append (_gege ._cfa ,_bbcg );
_bbcg .AddAutoRelationship (_de .DocTypePresentation ,_de .SlideType ,len (_gege ._ebd ),_de .SlideLayoutType );return Slide {_eacf ,_ccd ,_gege ,nil };};

// SlideViewPr returns the SlideViewPr property.
func (_gdcb ViewProperties )SlideViewPr ()*_ge .CT_SlideViewProperties {return _gdcb ._cacg .SlideViewPr };

// Index returns the placeholder index
func (_cfe PlaceHolder )Index ()uint32 {if _cfe ._fdd .NvSpPr .NvPr .Ph .IdxAttr ==nil {return 0;};return *_cfe ._fdd .NvSpPr .NvPr .Ph .IdxAttr ;};

// Properties returns the properties of the TextBox.
func (_bfe Image )Properties ()_bbe .ShapeProperties {if _bfe ._bdb .SpPr ==nil {_bfe ._bdb .SpPr =_bc .NewCT_ShapeProperties ();};return _bbe .MakeShapeProperties (_bfe ._bdb .SpPr );};

// X returns the inner wrapped XML type.
func (_fa PlaceHolder )X ()*_ge .CT_Shape {return _fa ._fdd };

// X returns TextBox's underlying *pml.CT_Shape.
func (_fabg TextBox )X ()*_ge .CT_Shape {return _fabg ._caca };

// Presentation returns a slide's presentation.
func (_dce Slide )Presentation ()*Presentation {return _dce ._becd };

// AddParagraph adds a paragraph to the text box
func (_abedg TextBox )AddParagraph ()_bbe .Paragraph {_egfgd :=_bc .NewCT_TextParagraph ();_abedg ._caca .TxBody .P =append (_abedg ._caca .TxBody .P ,_egfgd );return _bbe .MakeParagraph (_egfgd );};

// RemoveSlide removes a slide from a presentation.
func (_ebfag *Presentation )RemoveSlide (s Slide )error {_aaa :=false ;_dgc :=0;for _agef ,_edef :=range _ebfag ._gde {if _edef ==s ._gcgbd {if _ebfag ._aag .SldIdLst .SldId [_agef ]!=s ._afce {return _fd .New ("i\u006e\u0063\u006f\u006e\u0073\u0069s\u0074\u0065\u006e\u0063\u0079\u0020i\u006e\u0020\u0073\u006c\u0069\u0064\u0065s\u0020\u0061\u006e\u0064\u0020\u0049\u0044\u0020\u006c\u0069s\u0074");
};copy (_ebfag ._gde [_agef :],_ebfag ._gde [_agef +1:]);_ebfag ._gde =_ebfag ._gde [0:len (_ebfag ._gde )-1];copy (_ebfag ._cfa [_agef :],_ebfag ._cfa [_agef +1:]);_ebfag ._cfa =_ebfag ._cfa [0:len (_ebfag ._cfa )-1];copy (_ebfag ._aag .SldIdLst .SldId [_agef :],_ebfag ._aag .SldIdLst .SldId [_agef +1:]);
_ebfag ._aag .SldIdLst .SldId =_ebfag ._aag .SldIdLst .SldId [0:len (_ebfag ._aag .SldIdLst .SldId )-1];copy (_ebfag ._fe [_agef :],_ebfag ._fe [_agef +1:]);_ebfag ._fe =_ebfag ._fe [0:len (_ebfag ._fe )-1];_aaa =true ;_dgc =_agef ;};};if !_aaa {return _fd .New ("u\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0073li\u0064\u0065");
};_ebgeb :=_de .AbsoluteFilename (_de .DocTypePresentation ,_de .SlideType ,0);return _ebfag .ContentTypes .RemoveOverrideByIndex (_ebgeb ,_dgc );};

// HtmlPubPr returns the HtmlPubPr property.
func (_bcc PresentationProperties )HtmlPubPr ()*_ge .CT_HtmlPublishProperties {return _bcc ._gce .HtmlPubPr ;};

// PlaceHolders returns all of the content place holders within a given slide.
func (_gedg Slide )PlaceHolders ()[]PlaceHolder {_bbfe :=[]PlaceHolder {};for _ ,_gdee :=range _gedg ._gcgbd .CSld .SpTree .GroupShapeChoice {if _gdee .Sp !=nil &&_gdee .Sp .NvSpPr !=nil &&_gdee .Sp .NvSpPr .NvPr !=nil &&_gdee .Sp .NvSpPr .NvPr .Ph !=nil {_bbfe =append (_bbfe ,PlaceHolder {_gdee .Sp ,_gedg ._gcgbd });
};};return _bbfe ;};

// ValidateWithPath validates the slide passing path informaton for a better
// error message.
func (_eddb Slide )ValidateWithPath (path string )error {if _eefd :=_eddb ._gcgbd .ValidateWithPath (path );_eefd !=nil {return _eefd ;};for _ ,_ebcd :=range _eddb ._gcgbd .CSld .SpTree .GroupShapeChoice {if _ebcd .Sp !=nil &&_ebcd .Sp .TxBody !=nil {if len (_ebcd .Sp .TxBody .P )==0{return _fd .New (path +"\u0020\u003a \u0073\u006c\u0069\u0064\u0065 \u0073\u0068\u0061\u0070\u0065 \u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0074\u0078\u0062\u006f\u0064\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0073");
};};};return nil ;};