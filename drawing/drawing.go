//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package drawing ;import (_af "github.com/unidoc/unioffice/v2";_g "github.com/unidoc/unioffice/v2/color";_ad "github.com/unidoc/unioffice/v2/measurement";_ab "github.com/unidoc/unioffice/v2/schema/soo/dml";);

// X returns the inner wrapped XML type.
func (_ge ParagraphProperties )X ()*_ab .CT_TextParagraphProperties {return _ge ._dg };func (_dc LineProperties )SetSolidFill (c _g .Color ){_dc .clearFill ();_dc ._aa .LineFillPropertiesChoice .SolidFill =_ab .NewCT_SolidColorFillProperties ();_dc ._aa .LineFillPropertiesChoice .SolidFill .SrgbClr =_ab .NewCT_SRgbColor ();
_dc ._aa .LineFillPropertiesChoice .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// MakeParagraphProperties constructs a new ParagraphProperties wrapper.
func MakeParagraphProperties (x *_ab .CT_TextParagraphProperties )ParagraphProperties {return ParagraphProperties {x };};

// MakeParagraph constructs a new paragraph wrapper.
func MakeParagraph (x *_ab .CT_TextParagraph )Paragraph {return Paragraph {x }};

// AddRun adds a new run to a paragraph.
func (_bd Paragraph )AddRun ()Run {_eb :=MakeRun (_ab .NewEG_TextRun ());_bd ._bg .EG_TextRun =append (_bd ._bg .EG_TextRun ,_eb .X ());return _eb ;};

// Run is a run within a paragraph.
type Run struct{_fd *_ab .EG_TextRun };

// X returns the inner wrapped XML type.
func (_b LineProperties )X ()*_ab .CT_LineProperties {return _b ._aa };

// X returns the inner wrapped XML type.
func (_db Run )X ()*_ab .EG_TextRun {return _db ._fd };

// RunProperties controls the run properties.
type RunProperties struct{_gbb *_ab .CT_TextCharacterProperties ;};func (_bba ShapeProperties )SetSolidFill (c _g .Color ){_bba .clearFill ();_bba ._de .FillPropertiesChoice .SolidFill =_ab .NewCT_SolidColorFillProperties ();_bba ._de .FillPropertiesChoice .SolidFill .SrgbClr =_ab .NewCT_SRgbColor ();
_bba ._de .FillPropertiesChoice .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// MakeRun constructs a new Run wrapper.
func MakeRun (x *_ab .EG_TextRun )Run {return Run {x }};

// GetPosition gets the position of the shape in EMU.
func (_adg ShapeProperties )GetPosition ()(int64 ,int64 ){_adg .ensureXfrm ();if _adg ._de .Xfrm .Off ==nil {_adg ._de .Xfrm .Off =_ab .NewCT_Point2D ();};return *_adg ._de .Xfrm .Off .XAttr .ST_CoordinateUnqualified ,*_adg ._de .Xfrm .Off .YAttr .ST_CoordinateUnqualified ;
};

// Properties returns the paragraph properties.
func (_abe Paragraph )Properties ()ParagraphProperties {if _abe ._bg .PPr ==nil {_abe ._bg .PPr =_ab .NewCT_TextParagraphProperties ();};return MakeParagraphProperties (_abe ._bg .PPr );};

// SetJoin sets the line join style.
func (_c LineProperties )SetJoin (e LineJoin ){_c ._aa .LineJoinPropertiesChoice =_ab .NewEG_LineJoinPropertiesChoice ();switch e {case LineJoinRound :_c ._aa .LineJoinPropertiesChoice .Round =_ab .NewCT_LineJoinRound ();case LineJoinBevel :_c ._aa .LineJoinPropertiesChoice .Bevel =_ab .NewCT_LineJoinBevel ();
case LineJoinMiter :_c ._aa .LineJoinPropertiesChoice .Miter =_ab .NewCT_LineJoinMiterProperties ();};};

// LineJoin is the type of line join
type LineJoin byte ;func (_ag ShapeProperties )LineProperties ()LineProperties {if _ag ._de .Ln ==nil {_ag ._de .Ln =_ab .NewCT_LineProperties ();};return LineProperties {_ag ._de .Ln };};

// SetBulletChar sets the bullet character for the paragraph.
func (_bf ParagraphProperties )SetBulletChar (c string ){if c ==""{_bf ._dg .TextBulletChoice .BuChar =nil ;}else {_bf ._dg .TextBulletChoice .BuChar =_ab .NewCT_TextCharBullet ();_bf ._dg .TextBulletChoice .BuChar .CharAttr =c ;};};type LineProperties struct{_aa *_ab .CT_LineProperties };


// SetBulletFont controls the font for the bullet character.
func (_ff ParagraphProperties )SetBulletFont (f string ){if f ==""{_ff ._dg .TextBulletTypefaceChoice .BuFont =nil ;}else {_ff ._dg .TextBulletTypefaceChoice .BuFont =_ab .NewCT_TextFont ();_ff ._dg .TextBulletTypefaceChoice .BuFont .TypefaceAttr =f ;};
};

// SetText sets the run's text contents.
func (_dgd Run )SetText (s string ){_dgd ._fd .TextRunChoice .Br =nil ;_dgd ._fd .TextRunChoice .Fld =nil ;if _dgd ._fd .TextRunChoice .R ==nil {_dgd ._fd .TextRunChoice .R =_ab .NewCT_RegularTextRun ();};_dgd ._fd .TextRunChoice .R .T =s ;};func (_fa ShapeProperties )SetNoFill (){_fa .clearFill ();
_fa ._de .FillPropertiesChoice .NoFill =_ab .NewCT_NoFillProperties ();};

// Paragraph is a paragraph within a document.
type Paragraph struct{_bg *_ab .CT_TextParagraph };func (_e LineProperties )clearFill (){_e ._aa .LineFillPropertiesChoice =_ab .NewEG_LineFillPropertiesChoice ();};func (_ca ShapeProperties )clearFill (){_ca ._de .FillPropertiesChoice =_ab .NewEG_FillPropertiesChoice ();
};

// SetAlign controls the paragraph alignment
func (_ac ParagraphProperties )SetAlign (a _ab .ST_TextAlignType ){_ac ._dg .AlgnAttr =a };

// Properties returns the run's properties.
func (_abg Run )Properties ()RunProperties {if _abg ._fd .TextRunChoice .R ==nil {_abg ._fd .TextRunChoice .R =_ab .NewCT_RegularTextRun ();};if _abg ._fd .TextRunChoice .R .RPr ==nil {_abg ._fd .TextRunChoice .R .RPr =_ab .NewCT_TextCharacterProperties ();
};return RunProperties {_abg ._fd .TextRunChoice .R .RPr };};func MakeShapeProperties (x *_ab .CT_ShapeProperties )ShapeProperties {return ShapeProperties {x }};

// X returns the inner wrapped XML type.
func (_gg Paragraph )X ()*_ab .CT_TextParagraph {return _gg ._bg };

// SetSize sets the width and height of the shape.
func (_ga ShapeProperties )SetSize (w ,h _ad .Distance ){_ga .SetWidth (w );_ga .SetHeight (h )};

// SetFont controls the font of a run.
func (_be RunProperties )SetFont (s string ){_be ._gbb .Latin =_ab .NewCT_TextFont ();_be ._gbb .Latin .TypefaceAttr =s ;};

// SetGeometry sets the shape type of the shape
func (_fb ShapeProperties )SetGeometry (g _ab .ST_ShapeType ){if _fb ._de .GeometryChoice .PrstGeom ==nil {_fb ._de .GeometryChoice .PrstGeom =_ab .NewCT_PresetGeometry2D ();};_fb ._de .GeometryChoice .PrstGeom .PrstAttr =g ;};type ShapeProperties struct{_de *_ab .CT_ShapeProperties };


// MakeRunProperties constructs a new RunProperties wrapper.
func MakeRunProperties (x *_ab .CT_TextCharacterProperties )RunProperties {return RunProperties {x }};

// SetPosition sets the position of the shape.
func (_dd ShapeProperties )SetPosition (x ,y _ad .Distance ){_dd .ensureXfrm ();if _dd ._de .Xfrm .Off ==nil {_dd ._de .Xfrm .Off =_ab .NewCT_Point2D ();};_dd ._de .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_af .Int64 (int64 (x /_ad .EMU ));_dd ._de .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_af .Int64 (int64 (y /_ad .EMU ));
};

// SetHeight sets the height of the shape.
func (_deb ShapeProperties )SetHeight (h _ad .Distance ){_deb .ensureXfrm ();if _deb ._de .Xfrm .Ext ==nil {_deb ._de .Xfrm .Ext =_ab .NewCT_PositiveSize2D ();};_deb ._de .Xfrm .Ext .CyAttr =int64 (h /_ad .EMU );};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;
LineJoinMiter ;);

// SetLevel sets the level of indentation of a paragraph.
func (_ec ParagraphProperties )SetLevel (idx int32 ){_ec ._dg .LvlAttr =_af .Int32 (idx )};

// SetFlipHorizontal controls if the shape is flipped horizontally.
func (_da ShapeProperties )SetFlipHorizontal (b bool ){_da .ensureXfrm ();if !b {_da ._de .Xfrm .FlipHAttr =nil ;}else {_da ._de .Xfrm .FlipHAttr =_af .Bool (true );};};

// SetWidth sets the line width, MS products treat zero as the minimum width
// that can be displayed.
func (_d LineProperties )SetWidth (w _ad .Distance ){_d ._aa .WAttr =_af .Int32 (int32 (w /_ad .EMU ))};

// AddBreak adds a new line break to a paragraph.
func (_df Paragraph )AddBreak (){_f :=_ab .NewEG_TextRun ();_f .TextRunChoice .Br =_ab .NewCT_TextLineBreak ();_df ._bg .EG_TextRun =append (_df ._bg .EG_TextRun ,_f );};func (_gec ShapeProperties )ensureXfrm (){if _gec ._de .Xfrm ==nil {_gec ._de .Xfrm =_ab .NewCT_Transform2D ();
};};

// SetNumbered controls if bullets are numbered or not.
func (_bb ParagraphProperties )SetNumbered (scheme _ab .ST_TextAutonumberScheme ){if scheme ==_ab .ST_TextAutonumberSchemeUnset {_bb ._dg .TextBulletChoice .BuAutoNum =nil ;}else {_bb ._dg .TextBulletChoice .BuAutoNum =_ab .NewCT_TextAutonumberBullet ();
_bb ._dg .TextBulletChoice .BuAutoNum .TypeAttr =scheme ;};};

// SetSolidFill controls the text color of a run.
func (_fcf RunProperties )SetSolidFill (c _g .Color ){_fcf ._gbb .FillPropertiesChoice =_ab .NewEG_FillPropertiesChoice ();_fcf ._gbb .FillPropertiesChoice .SolidFill =_ab .NewCT_SolidColorFillProperties ();_fcf ._gbb .FillPropertiesChoice .SolidFill .SrgbClr =_ab .NewCT_SRgbColor ();
_fcf ._gbb .FillPropertiesChoice .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// SetSize sets the font size of the run text
func (_fc RunProperties )SetSize (sz _ad .Distance ){_fc ._gbb .SzAttr =_af .Int32 (int32 (sz /_ad .HundredthPoint ));};func (_gb LineProperties )SetNoFill (){_gb .clearFill ();_gb ._aa .LineFillPropertiesChoice .NoFill =_ab .NewCT_NoFillProperties ();
};

// ParagraphProperties allows controlling paragraph properties.
type ParagraphProperties struct{_dg *_ab .CT_TextParagraphProperties ;};

// SetWidth sets the width of the shape.
func (_ebd ShapeProperties )SetWidth (w _ad .Distance ){_ebd .ensureXfrm ();if _ebd ._de .Xfrm .Ext ==nil {_ebd ._de .Xfrm .Ext =_ab .NewCT_PositiveSize2D ();};_ebd ._de .Xfrm .Ext .CxAttr =int64 (w /_ad .EMU );};

// X returns the inner wrapped XML type.
func (_bbb ShapeProperties )X ()*_ab .CT_ShapeProperties {return _bbb ._de };

// SetBold controls the bolding of a run.
func (_ba RunProperties )SetBold (b bool ){_ba ._gbb .BAttr =_af .Bool (b )};

// SetFlipVertical controls if the shape is flipped vertically.
func (_cf ShapeProperties )SetFlipVertical (b bool ){_cf .ensureXfrm ();if !b {_cf ._de .Xfrm .FlipVAttr =nil ;}else {_cf ._de .Xfrm .FlipVAttr =_af .Bool (true );};};