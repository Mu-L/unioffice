//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package drawing ;import (_b "github.com/unidoc/unioffice/v2";_ad "github.com/unidoc/unioffice/v2/color";_e "github.com/unidoc/unioffice/v2/measurement";_c "github.com/unidoc/unioffice/v2/schema/soo/dml";);func (_f LineProperties )clearFill (){_f ._ac .LineFillPropertiesChoice =_c .NewEG_LineFillPropertiesChoice ();
};func MakeShapeProperties (x *_c .CT_ShapeProperties )ShapeProperties {return ShapeProperties {x }};func (_fb ShapeProperties )SetSolidFill (c _ad .Color ){_fb .clearFill ();_fb ._ea .FillPropertiesChoice .SolidFill =_c .NewCT_SolidColorFillProperties ();
_fb ._ea .FillPropertiesChoice .SolidFill .SrgbClr =_c .NewCT_SRgbColor ();_fb ._ea .FillPropertiesChoice .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// SetLevel sets the level of indentation of a paragraph.
func (_ce ParagraphProperties )SetLevel (idx int32 ){_ce ._eg .LvlAttr =_b .Int32 (idx )};type LineProperties struct{_ac *_c .CT_LineProperties };

// AddBreak adds a new line break to a paragraph.
func (_aa Paragraph )AddBreak (){_fg :=_c .NewEG_TextRun ();_fg .TextRunChoice .Br =_c .NewCT_TextLineBreak ();_aa ._af .EG_TextRun =append (_aa ._af .EG_TextRun ,_fg );};

// Run is a run within a paragraph.
type Run struct{_g *_c .EG_TextRun };

// SetGeometry sets the shape type of the shape
func (_ccg ShapeProperties )SetGeometry (g _c .ST_ShapeType ){if _ccg ._ea .GeometryChoice .PrstGeom ==nil {_ccg ._ea .GeometryChoice .PrstGeom =_c .NewCT_PresetGeometry2D ();};_ccg ._ea .GeometryChoice .PrstGeom .PrstAttr =g ;};func (_ba LineProperties )SetNoFill (){_ba .clearFill ();
_ba ._ac .LineFillPropertiesChoice .NoFill =_c .NewCT_NoFillProperties ();};

// X returns the inner wrapped XML type.
func (_ab ParagraphProperties )X ()*_c .CT_TextParagraphProperties {return _ab ._eg };

// SetBulletFont controls the font for the bullet character.
func (_fd ParagraphProperties )SetBulletFont (f string ){if f ==""{_fd ._eg .TextBulletTypefaceChoice .BuFont =nil ;}else {_fd ._eg .TextBulletTypefaceChoice .BuFont =_c .NewCT_TextFont ();_fd ._eg .TextBulletTypefaceChoice .BuFont .TypefaceAttr =f ;};
};

// SetWidth sets the line width, MS products treat zero as the minimum width
// that can be displayed.
func (_ef LineProperties )SetWidth (w _e .Distance ){_ef ._ac .WAttr =_b .Int32 (int32 (w /_e .EMU ))};

// X returns the inner wrapped XML type.
func (_ff Paragraph )X ()*_c .CT_TextParagraph {return _ff ._af };func (_db ShapeProperties )ensureXfrm (){if _db ._ea .Xfrm ==nil {_db ._ea .Xfrm =_c .NewCT_Transform2D ();};};func (_ccd LineProperties )SetSolidFill (c _ad .Color ){_ccd .clearFill ();
_ccd ._ac .LineFillPropertiesChoice .SolidFill =_c .NewCT_SolidColorFillProperties ();_ccd ._ac .LineFillPropertiesChoice .SolidFill .SrgbClr =_c .NewCT_SRgbColor ();_ccd ._ac .LineFillPropertiesChoice .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};


// Properties returns the paragraph properties.
func (_bc Paragraph )Properties ()ParagraphProperties {if _bc ._af .PPr ==nil {_bc ._af .PPr =_c .NewCT_TextParagraphProperties ();};return MakeParagraphProperties (_bc ._af .PPr );};

// SetSize sets the width and height of the shape.
func (_add ShapeProperties )SetSize (w ,h _e .Distance ){_add .SetWidth (w );_add .SetHeight (h )};

// X returns the inner wrapped XML type.
func (_be ShapeProperties )X ()*_c .CT_ShapeProperties {return _be ._ea };

// X returns the inner wrapped XML type.
func (_cc LineProperties )X ()*_c .CT_LineProperties {return _cc ._ac };

// SetAlign controls the paragraph alignment
func (_ae ParagraphProperties )SetAlign (a _c .ST_TextAlignType ){_ae ._eg .AlgnAttr =a };

// SetJoin sets the line join style.
func (_bf LineProperties )SetJoin (e LineJoin ){_bf ._ac .LineJoinPropertiesChoice =_c .NewEG_LineJoinPropertiesChoice ();switch e {case LineJoinRound :_bf ._ac .LineJoinPropertiesChoice .Round =_c .NewCT_LineJoinRound ();case LineJoinBevel :_bf ._ac .LineJoinPropertiesChoice .Bevel =_c .NewCT_LineJoinBevel ();
case LineJoinMiter :_bf ._ac .LineJoinPropertiesChoice .Miter =_c .NewCT_LineJoinMiterProperties ();};};

// SetPosition sets the position of the shape.
func (_cef ShapeProperties )SetPosition (x ,y _e .Distance ){_cef .ensureXfrm ();if _cef ._ea .Xfrm .Off ==nil {_cef ._ea .Xfrm .Off =_c .NewCT_Point2D ();};_cef ._ea .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_b .Int64 (int64 (x /_e .EMU ));_cef ._ea .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_b .Int64 (int64 (y /_e .EMU ));
};

// MakeParagraph constructs a new paragraph wrapper.
func MakeParagraph (x *_c .CT_TextParagraph )Paragraph {return Paragraph {x }};

// SetFont controls the font of a run.
func (_gge RunProperties )SetFont (s string ){_gge ._eb .Latin =_c .NewCT_TextFont ();_gge ._eb .Latin .TypefaceAttr =s ;};

// GetPosition gets the position of the shape in EMU.
func (_cb ShapeProperties )GetPosition ()(int64 ,int64 ){_cb .ensureXfrm ();if _cb ._ea .Xfrm .Off ==nil {_cb ._ea .Xfrm .Off =_c .NewCT_Point2D ();};return *_cb ._ea .Xfrm .Off .XAttr .ST_CoordinateUnqualified ,*_cb ._ea .Xfrm .Off .YAttr .ST_CoordinateUnqualified ;
};

// SetNumbered controls if bullets are numbered or not.
func (_bgf ParagraphProperties )SetNumbered (scheme _c .ST_TextAutonumberScheme ){if scheme ==_c .ST_TextAutonumberSchemeUnset {_bgf ._eg .TextBulletChoice .BuAutoNum =nil ;}else {_bgf ._eg .TextBulletChoice .BuAutoNum =_c .NewCT_TextAutonumberBullet ();
_bgf ._eg .TextBulletChoice .BuAutoNum .TypeAttr =scheme ;};};

// MakeRunProperties constructs a new RunProperties wrapper.
func MakeRunProperties (x *_c .CT_TextCharacterProperties )RunProperties {return RunProperties {x }};

// Properties returns the run's properties.
func (_gg Run )Properties ()RunProperties {if _gg ._g .TextRunChoice .R ==nil {_gg ._g .TextRunChoice .R =_c .NewCT_RegularTextRun ();};if _gg ._g .TextRunChoice .R .RPr ==nil {_gg ._g .TextRunChoice .R .RPr =_c .NewCT_TextCharacterProperties ();};return RunProperties {_gg ._g .TextRunChoice .R .RPr };
};func (_fbg ShapeProperties )LineProperties ()LineProperties {if _fbg ._ea .Ln ==nil {_fbg ._ea .Ln =_c .NewCT_LineProperties ();};return LineProperties {_fbg ._ea .Ln };};type ShapeProperties struct{_ea *_c .CT_ShapeProperties };

// MakeParagraphProperties constructs a new ParagraphProperties wrapper.
func MakeParagraphProperties (x *_c .CT_TextParagraphProperties )ParagraphProperties {return ParagraphProperties {x };};

// RunProperties controls the run properties.
type RunProperties struct{_eb *_c .CT_TextCharacterProperties ;};func (_cf ShapeProperties )clearFill (){_cf ._ea .FillPropertiesChoice =_c .NewEG_FillPropertiesChoice ();};

// SetSolidFill controls the text color of a run.
func (_bcf RunProperties )SetSolidFill (c _ad .Color ){_bcf ._eb .FillPropertiesChoice =_c .NewEG_FillPropertiesChoice ();_bcf ._eb .FillPropertiesChoice .SolidFill =_c .NewCT_SolidColorFillProperties ();_bcf ._eb .FillPropertiesChoice .SolidFill .SrgbClr =_c .NewCT_SRgbColor ();
_bcf ._eb .FillPropertiesChoice .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// ParagraphProperties allows controlling paragraph properties.
type ParagraphProperties struct{_eg *_c .CT_TextParagraphProperties ;};

// LineJoin is the type of line join
type LineJoin byte ;func (_d ShapeProperties )SetNoFill (){_d .clearFill ();_d ._ea .FillPropertiesChoice .NoFill =_c .NewCT_NoFillProperties ();};

// Paragraph is a paragraph within a document.
type Paragraph struct{_af *_c .CT_TextParagraph };

// MakeRun constructs a new Run wrapper.
func MakeRun (x *_c .EG_TextRun )Run {return Run {x }};

// SetSize sets the font size of the run text
func (_bd RunProperties )SetSize (sz _e .Distance ){_bd ._eb .SzAttr =_b .Int32 (int32 (sz /_e .HundredthPoint ));};

// SetHeight sets the height of the shape.
func (_gged ShapeProperties )SetHeight (h _e .Distance ){_gged .ensureXfrm ();if _gged ._ea .Xfrm .Ext ==nil {_gged ._ea .Xfrm .Ext =_c .NewCT_PositiveSize2D ();};_gged ._ea .Xfrm .Ext .CyAttr =int64 (h /_e .EMU );};

// SetText sets the run's text contents.
func (_aee Run )SetText (s string ){_aee ._g .TextRunChoice .Br =nil ;_aee ._g .TextRunChoice .Fld =nil ;if _aee ._g .TextRunChoice .R ==nil {_aee ._g .TextRunChoice .R =_c .NewCT_RegularTextRun ();};_aee ._g .TextRunChoice .R .T =s ;};

// SetWidth sets the width of the shape.
func (_afg ShapeProperties )SetWidth (w _e .Distance ){_afg .ensureXfrm ();if _afg ._ea .Xfrm .Ext ==nil {_afg ._ea .Xfrm .Ext =_c .NewCT_PositiveSize2D ();};_afg ._ea .Xfrm .Ext .CxAttr =int64 (w /_e .EMU );};

// SetBulletChar sets the bullet character for the paragraph.
func (_abc ParagraphProperties )SetBulletChar (c string ){if c ==""{_abc ._eg .TextBulletChoice .BuChar =nil ;}else {_abc ._eg .TextBulletChoice .BuChar =_c .NewCT_TextCharBullet ();_abc ._eg .TextBulletChoice .BuChar .CharAttr =c ;};};

// SetBold controls the bolding of a run.
func (_bab RunProperties )SetBold (b bool ){_bab ._eb .BAttr =_b .Bool (b )};

// SetFlipHorizontal controls if the shape is flipped horizontally.
func (_egd ShapeProperties )SetFlipHorizontal (b bool ){_egd .ensureXfrm ();if !b {_egd ._ea .Xfrm .FlipHAttr =nil ;}else {_egd ._ea .Xfrm .FlipHAttr =_b .Bool (true );};};

// AddRun adds a new run to a paragraph.
func (_bg Paragraph )AddRun ()Run {_cca :=MakeRun (_c .NewEG_TextRun ());_bg ._af .EG_TextRun =append (_bg ._af .EG_TextRun ,_cca .X ());return _cca ;};

// X returns the inner wrapped XML type.
func (_ga Run )X ()*_c .EG_TextRun {return _ga ._g };

// SetFlipVertical controls if the shape is flipped vertically.
func (_bef ShapeProperties )SetFlipVertical (b bool ){_bef .ensureXfrm ();if !b {_bef ._ea .Xfrm .FlipVAttr =nil ;}else {_bef ._ea .Xfrm .FlipVAttr =_b .Bool (true );};};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;LineJoinMiter ;);