//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package drawing ;import (_ce "github.com/unidoc/unioffice";_a "github.com/unidoc/unioffice/color";_f "github.com/unidoc/unioffice/measurement";_g "github.com/unidoc/unioffice/schema/soo/dml";);

// SetLevel sets the level of indentation of a paragraph.
func (_ad ParagraphProperties )SetLevel (idx int32 ){_ad ._dg .LvlAttr =_ce .Int32 (idx )};

// SetHeight sets the height of the shape.
func (_abf ShapeProperties )SetHeight (h _f .Distance ){_abf .ensureXfrm ();if _abf ._dgb .Xfrm .Ext ==nil {_abf ._dgb .Xfrm .Ext =_g .NewCT_PositiveSize2D ();};_abf ._dgb .Xfrm .Ext .CyAttr =int64 (h /_f .EMU );};type ShapeProperties struct{_dgb *_g .CT_ShapeProperties };


// MakeParagraphProperties constructs a new ParagraphProperties wrapper.
func MakeParagraphProperties (x *_g .CT_TextParagraphProperties )ParagraphProperties {return ParagraphProperties {x };};

// X returns the inner wrapped XML type.
func (_bf ParagraphProperties )X ()*_g .CT_TextParagraphProperties {return _bf ._dg };

// X returns the inner wrapped XML type.
func (_gg ShapeProperties )X ()*_g .CT_ShapeProperties {return _gg ._dgb };

// SetNumbered controls if bullets are numbered or not.
func (_bd ParagraphProperties )SetNumbered (scheme _g .ST_TextAutonumberScheme ){if scheme ==_g .ST_TextAutonumberSchemeUnset {_bd ._dg .BuAutoNum =nil ;}else {_bd ._dg .BuAutoNum =_g .NewCT_TextAutonumberBullet ();_bd ._dg .BuAutoNum .TypeAttr =scheme ;
};};

// Properties returns the run's properties.
func (_gfg Run )Properties ()RunProperties {if _gfg ._fa .R ==nil {_gfg ._fa .R =_g .NewCT_RegularTextRun ();};if _gfg ._fa .R .RPr ==nil {_gfg ._fa .R .RPr =_g .NewCT_TextCharacterProperties ();};return RunProperties {_gfg ._fa .R .RPr };};const (LineJoinRound LineJoin =iota ;
LineJoinBevel ;LineJoinMiter ;);

// ParagraphProperties allows controlling paragraph properties.
type ParagraphProperties struct{_dg *_g .CT_TextParagraphProperties ;};

// MakeRun constructs a new Run wrapper.
func MakeRun (x *_g .EG_TextRun )Run {return Run {x }};

// AddBreak adds a new line break to a paragraph.
func (_ca Paragraph )AddBreak (){_dc :=_g .NewEG_TextRun ();_dc .Br =_g .NewCT_TextLineBreak ();_ca ._gd .EG_TextRun =append (_ca ._gd .EG_TextRun ,_dc );};func MakeShapeProperties (x *_g .CT_ShapeProperties )ShapeProperties {return ShapeProperties {x }};
func (_bc ShapeProperties )clearFill (){_bc ._dgb .NoFill =nil ;_bc ._dgb .BlipFill =nil ;_bc ._dgb .GradFill =nil ;_bc ._dgb .GrpFill =nil ;_bc ._dgb .SolidFill =nil ;_bc ._dgb .PattFill =nil ;};func (_cb LineProperties )SetSolidFill (c _a .Color ){_cb .clearFill ();
_cb ._e .SolidFill =_g .NewCT_SolidColorFillProperties ();_cb ._e .SolidFill .SrgbClr =_g .NewCT_SRgbColor ();_cb ._e .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// LineJoin is the type of line join
type LineJoin byte ;

// SetJoin sets the line join style.
func (_d LineProperties )SetJoin (e LineJoin ){_d ._e .Round =nil ;_d ._e .Miter =nil ;_d ._e .Bevel =nil ;switch e {case LineJoinRound :_d ._e .Round =_g .NewCT_LineJoinRound ();case LineJoinBevel :_d ._e .Bevel =_g .NewCT_LineJoinBevel ();case LineJoinMiter :_d ._e .Miter =_g .NewCT_LineJoinMiterProperties ();
};};

// MakeParagraph constructs a new paragraph wrapper.
func MakeParagraph (x *_g .CT_TextParagraph )Paragraph {return Paragraph {x }};

// SetFlipVertical controls if the shape is flipped vertically.
func (_ec ShapeProperties )SetFlipVertical (b bool ){_ec .ensureXfrm ();if !b {_ec ._dgb .Xfrm .FlipVAttr =nil ;}else {_ec ._dgb .Xfrm .FlipVAttr =_ce .Bool (true );};};

// RunProperties controls the run properties.
type RunProperties struct{_ed *_g .CT_TextCharacterProperties ;};

// SetWidth sets the line width, MS products treat zero as the minimum width
// that can be displayed.
func (_cg LineProperties )SetWidth (w _f .Distance ){_cg ._e .WAttr =_ce .Int32 (int32 (w /_f .EMU ))};

// X returns the inner wrapped XML type.
func (_gb LineProperties )X ()*_g .CT_LineProperties {return _gb ._e };

// SetWidth sets the width of the shape.
func (_cf ShapeProperties )SetWidth (w _f .Distance ){_cf .ensureXfrm ();if _cf ._dgb .Xfrm .Ext ==nil {_cf ._dgb .Xfrm .Ext =_g .NewCT_PositiveSize2D ();};_cf ._dgb .Xfrm .Ext .CxAttr =int64 (w /_f .EMU );};

// X returns the inner wrapped XML type.
func (_gf Paragraph )X ()*_g .CT_TextParagraph {return _gf ._gd };

// MakeRunProperties constructs a new RunProperties wrapper.
func MakeRunProperties (x *_g .CT_TextCharacterProperties )RunProperties {return RunProperties {x }};

// SetBold controls the bolding of a run.
func (_feg RunProperties )SetBold (b bool ){_feg ._ed .BAttr =_ce .Bool (b )};func (_b LineProperties )SetNoFill (){_b .clearFill ();_b ._e .NoFill =_g .NewCT_NoFillProperties ()};

// SetFlipHorizontal controls if the shape is flipped horizontally.
func (_eg ShapeProperties )SetFlipHorizontal (b bool ){_eg .ensureXfrm ();if !b {_eg ._dgb .Xfrm .FlipHAttr =nil ;}else {_eg ._dgb .Xfrm .FlipHAttr =_ce .Bool (true );};};

// SetAlign controls the paragraph alignment
func (_cbd ParagraphProperties )SetAlign (a _g .ST_TextAlignType ){_cbd ._dg .AlgnAttr =a };

// SetFont controls the font of a run.
func (_aa RunProperties )SetFont (s string ){_aa ._ed .Latin =_g .NewCT_TextFont ();_aa ._ed .Latin .TypefaceAttr =s ;};type LineProperties struct{_e *_g .CT_LineProperties };func (_df ShapeProperties )SetSolidFill (c _a .Color ){_df .clearFill ();_df ._dgb .SolidFill =_g .NewCT_SolidColorFillProperties ();
_df ._dgb .SolidFill .SrgbClr =_g .NewCT_SRgbColor ();_df ._dgb .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// SetSize sets the font size of the run text
func (_cgc RunProperties )SetSize (sz _f .Distance ){_cgc ._ed .SzAttr =_ce .Int32 (int32 (sz /_f .HundredthPoint ));};func (_ag ShapeProperties )SetNoFill (){_ag .clearFill ();_ag ._dgb .NoFill =_g .NewCT_NoFillProperties ();};

// SetText sets the run's text contents.
func (_gba Run )SetText (s string ){_gba ._fa .Br =nil ;_gba ._fa .Fld =nil ;if _gba ._fa .R ==nil {_gba ._fa .R =_g .NewCT_RegularTextRun ();};_gba ._fa .R .T =s ;};

// X returns the inner wrapped XML type.
func (_ge Run )X ()*_g .EG_TextRun {return _ge ._fa };func (_bda ShapeProperties )ensureXfrm (){if _bda ._dgb .Xfrm ==nil {_bda ._dgb .Xfrm =_g .NewCT_Transform2D ();};};

// Properties returns the paragraph properties.
func (_fe Paragraph )Properties ()ParagraphProperties {if _fe ._gd .PPr ==nil {_fe ._gd .PPr =_g .NewCT_TextParagraphProperties ();};return MakeParagraphProperties (_fe ._gd .PPr );};

// Paragraph is a paragraph within a document.
type Paragraph struct{_gd *_g .CT_TextParagraph };

// SetBulletFont controls the font for the bullet character.
func (_ee ParagraphProperties )SetBulletFont (f string ){if f ==""{_ee ._dg .BuFont =nil ;}else {_ee ._dg .BuFont =_g .NewCT_TextFont ();_ee ._dg .BuFont .TypefaceAttr =f ;};};func (_cec LineProperties )clearFill (){_cec ._e .NoFill =nil ;_cec ._e .GradFill =nil ;
_cec ._e .SolidFill =nil ;_cec ._e .PattFill =nil ;};

// GetPosition gets the position of the shape in EMU.
func (_gfb ShapeProperties )GetPosition ()(int64 ,int64 ){_gfb .ensureXfrm ();if _gfb ._dgb .Xfrm .Off ==nil {_gfb ._dgb .Xfrm .Off =_g .NewCT_Point2D ();};return *_gfb ._dgb .Xfrm .Off .XAttr .ST_CoordinateUnqualified ,*_gfb ._dgb .Xfrm .Off .YAttr .ST_CoordinateUnqualified ;
};

// SetBulletChar sets the bullet character for the paragraph.
func (_ab ParagraphProperties )SetBulletChar (c string ){if c ==""{_ab ._dg .BuChar =nil ;}else {_ab ._dg .BuChar =_g .NewCT_TextCharBullet ();_ab ._dg .BuChar .CharAttr =c ;};};func (_ggd ShapeProperties )LineProperties ()LineProperties {if _ggd ._dgb .Ln ==nil {_ggd ._dgb .Ln =_g .NewCT_LineProperties ();
};return LineProperties {_ggd ._dgb .Ln };};

// SetGeometry sets the shape type of the shape
func (_de ShapeProperties )SetGeometry (g _g .ST_ShapeType ){if _de ._dgb .PrstGeom ==nil {_de ._dgb .PrstGeom =_g .NewCT_PresetGeometry2D ();};_de ._dgb .PrstGeom .PrstAttr =g ;};

// SetSolidFill controls the text color of a run.
func (_ga RunProperties )SetSolidFill (c _a .Color ){_ga ._ed .NoFill =nil ;_ga ._ed .BlipFill =nil ;_ga ._ed .GradFill =nil ;_ga ._ed .GrpFill =nil ;_ga ._ed .PattFill =nil ;_ga ._ed .SolidFill =_g .NewCT_SolidColorFillProperties ();_ga ._ed .SolidFill .SrgbClr =_g .NewCT_SRgbColor ();
_ga ._ed .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// AddRun adds a new run to a paragraph.
func (_gfe Paragraph )AddRun ()Run {_fg :=MakeRun (_g .NewEG_TextRun ());_gfe ._gd .EG_TextRun =append (_gfe ._gd .EG_TextRun ,_fg .X ());return _fg ;};

// SetPosition sets the position of the shape.
func (_db ShapeProperties )SetPosition (x ,y _f .Distance ){_db .ensureXfrm ();if _db ._dgb .Xfrm .Off ==nil {_db ._dgb .Xfrm .Off =_g .NewCT_Point2D ();};_db ._dgb .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_ce .Int64 (int64 (x /_f .EMU ));_db ._dgb .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_ce .Int64 (int64 (y /_f .EMU ));
};

// Run is a run within a paragraph.
type Run struct{_fa *_g .EG_TextRun };

// SetSize sets the width and height of the shape.
func (_aaa ShapeProperties )SetSize (w ,h _f .Distance ){_aaa .SetWidth (w );_aaa .SetHeight (h )};