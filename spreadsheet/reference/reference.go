//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package reference ;import (_e "errors";_ed "fmt";_fg "github.com/unidoc/unioffice/v2/spreadsheet/update";_b "regexp";_c "strconv";_f "strings";);

// ParseRangeReference splits a range reference of the form "A1:B5" into its
// components.
func ParseRangeReference (s string )(_ba ,_db CellReference ,_fga error ){_aac ,_ffb ,_fga :=_ee (s );if _fga !=nil {return CellReference {},CellReference {},_fga ;};_bac :=_f .Split (_ffb ,"\u003a");if len (_bac )!=2{return CellReference {},CellReference {},_e .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074");
};if _aac !=""{_bac [0]=_aac +"\u0021"+_bac [0];_bac [1]=_aac +"\u0021"+_bac [1];};_def ,_fga :=ParseCellReference (_bac [0]);if _fga !=nil {return CellReference {},CellReference {},_fga ;};_fef ,_fga :=ParseCellReference (_bac [1]);if _fga !=nil {return CellReference {},CellReference {},_fga ;
};return _def ,_fef ,nil ;};func _ee (_ac string )(string ,string ,error ){_fed :="";_ge :=_f .LastIndex (_ac ,"\u0021");if _ge > -1{_fed =_ac [:_ge ];_ac =_ac [_ge +1:];if _fed ==""{return "","",_e .New ("\u0049n\u0076a\u006c\u0069\u0064\u0020\u0073h\u0065\u0065t\u0020\u006e\u0061\u006d\u0065");
};};return _fed ,_ac ,nil ;};

// ColumnReference is a parsed reference to a column.  Input is of the form 'A',
// '$C', etc.
type ColumnReference struct{ColumnIdx uint32 ;Column string ;AbsoluteColumn bool ;SheetName string ;};

// ParseCellReference parses a cell reference of the form 'A10' and splits it
// into column/row segments.
func ParseCellReference (s string )(CellReference ,error ){s =_f .TrimSpace (s );if len (s )< 2{return CellReference {},_e .New ("\u0063\u0065\u006c\u006c\u0020\u0072\u0065\u0066e\u0072\u0065\u006ece\u0020\u006d\u0075\u0073\u0074\u0020h\u0061\u0076\u0065\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0077o\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074e\u0072\u0073");
};_d :=CellReference {};_dc ,_bd ,_fc :=_ee (s );if _fc !=nil {return CellReference {},_fc ;};if _dc !=""{_d .SheetName =_dc ;};if s [0]=='$'{_d .AbsoluteColumn =true ;_bd =_bd [1:];};_da :=-1;_gc :for _bb :=0;_bb < len (_bd );_bb ++{switch {case _bd [_bb ]>='0'&&_bd [_bb ]<='9'||_bd [_bb ]=='$':_da =_bb ;
break _gc ;};};switch _da {case 0:return CellReference {},_ed .Errorf ("\u006e\u006f\u0020\u006cet\u0074\u0065\u0072\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0069\u006e\u0020%\u0073",_bd );case -1:return CellReference {},_ed .Errorf ("\u006eo\u0020d\u0069\u0067\u0069\u0074\u0073\u0020\u0069\u006e\u0020\u0025\u0073",_bd );
};_d .Column =_bd [0:_da ];if _bd [_da ]=='$'{_d .AbsoluteRow =true ;_da ++;};_d .ColumnIdx =ColumnToIndex (_d .Column );_aa ,_fc :=_c .ParseUint (_bd [_da :],10,32);if _fc !=nil {return CellReference {},_ed .Errorf ("e\u0072\u0072\u006f\u0072 p\u0061r\u0073\u0069\u006e\u0067\u0020r\u006f\u0077\u003a\u0020\u0025\u0073",_fc );
};if _aa ==0{return CellReference {},_ed .Errorf ("\u0065\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0072\u006f\u0077\u003a \u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0030");};_d .RowIdx =uint32 (_aa );
return _d ,nil ;};

// CellReference is a parsed reference to a cell.  Input is of the form 'A1',
// '$C$2', etc.
type CellReference struct{RowIdx uint32 ;ColumnIdx uint32 ;Column string ;AbsoluteColumn bool ;AbsoluteRow bool ;SheetName string ;};

// ParseColumnRangeReference splits a range reference of the form "A:B" into its
// components.
func ParseColumnRangeReference (s string )(_bbdc ,_dbf ColumnReference ,_bcb error ){_eda :="";_ged :=_f .Split (s ,"\u0021");if len (_ged )==2{_eda =_ged [0];s =_ged [1];};_gg :=_f .Split (s ,"\u003a");if len (_gg )!=2{return ColumnReference {},ColumnReference {},_e .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074");
};if _eda !=""{_gg [0]=_eda +"\u0021"+_gg [0];_gg [1]=_eda +"\u0021"+_gg [1];};_feg ,_bcb :=ParseColumnReference (_gg [0]);if _bcb !=nil {return ColumnReference {},ColumnReference {},_bcb ;};_acc ,_bcb :=ParseColumnReference (_gg [1]);if _bcb !=nil {return ColumnReference {},ColumnReference {},_bcb ;
};return _feg ,_acc ,nil ;};

// Update updates reference to point one of the neighboring columns with respect to the update type after removing a row/column.
func (_ad *ColumnReference )Update (updateType _fg .UpdateAction )*ColumnReference {switch updateType {case _fg .UpdateActionRemoveColumn :_de :=_ad ;_de .ColumnIdx =_ad .ColumnIdx -1;_de .Column =IndexToColumn (_de .ColumnIdx );return _de ;default:return _ad ;
};};var _bda =_b .MustCompile ("^\u005b\u0061\u002d\u007aA-\u005a]\u0028\u005b\u0061\u002d\u007aA\u002d\u005a\u005d\u003f\u0029\u0024");

// Update updates reference to point one of the neighboring cells with respect to the update type after removing a row/column.
func (_bc *CellReference )Update (updateType _fg .UpdateAction )*CellReference {switch updateType {case _fg .UpdateActionRemoveColumn :_bca :=_bc ;_bca .ColumnIdx =_bc .ColumnIdx -1;_bca .Column =IndexToColumn (_bca .ColumnIdx );return _bca ;default:return _bc ;
};};

// String returns a string representation of CellReference.
func (_ab CellReference )String ()string {_g :=make ([]byte ,0,4);if _ab .AbsoluteColumn {_g =append (_g ,'$');};_g =append (_g ,_ab .Column ...);if _ab .AbsoluteRow {_g =append (_g ,'$');};_g =_c .AppendInt (_g ,int64 (_ab .RowIdx ),10);return string (_g );
};

// String returns a string representation of ColumnReference.
func (_gb ColumnReference )String ()string {_ff :=make ([]byte ,0,4);if _gb .AbsoluteColumn {_ff =append (_ff ,'$');};_ff =append (_ff ,_gb .Column ...);return string (_ff );};

// IndexToColumn maps a column number to a column name (e.g. 0 = A, 1 = B, 26 = AA)
func IndexToColumn (col uint32 )string {var _cab [64+1]byte ;_bf :=len (_cab );_cff :=col ;const _cdb =26;for _cff >=_cdb {_bf --;_bbd :=_cff /_cdb ;_cab [_bf ]=byte ('A'+uint (_cff -_bbd *_cdb ));_cff =_bbd -1;};_bf --;_cab [_bf ]=byte ('A'+uint (_cff ));
return string (_cab [_bf :]);};

// ParseColumnReference parses a column reference of the form 'Sheet1!A' and splits it
// into sheet name and column segments.
func ParseColumnReference (s string )(ColumnReference ,error ){s =_f .TrimSpace (s );if len (s )< 1{return ColumnReference {},_e .New ("\u0063\u006f\u006c\u0075\u006d\u006e \u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0063\u0068a\u0072a\u0063\u0074\u0065\u0072");
};_ca :=ColumnReference {};_dg ,_dad ,_cd :=_ee (s );if _cd !=nil {return ColumnReference {},_cd ;};if _dg !=""{_ca .SheetName =_dg ;};if _dad [0]=='$'{_ca .AbsoluteColumn =true ;_dad =_dad [1:];};if !_bda .MatchString (_dad ){return ColumnReference {},_e .New ("\u0063\u006f\u006c\u0075\u006dn\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0041\u0020\u0061\u006e\u0064\u0020\u005a\u005a");
};_ca .Column =_dad ;_ca .ColumnIdx =ColumnToIndex (_ca .Column );return _ca ,nil ;};

// ColumnToIndex maps a column to a zero based index (e.g. A = 0, B = 1, AA = 26)
func ColumnToIndex (col string )uint32 {col =_f .ToUpper (col );_fe :=uint32 (0);for _ ,_af :=range col {_fe *=26;_fe +=uint32 (_af -'A'+1);};return _fe -1;};