//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_e "bytes";_fc "errors";_g "fmt";_fg "github.com/unidoc/unioffice/v2/common/logger";_cc "github.com/unidoc/unioffice/v2/internal/sort";_ac "github.com/unidoc/unioffice/v2/internal/wildcard";_cd "github.com/unidoc/unioffice/v2/spreadsheet/format";
_eg "github.com/unidoc/unioffice/v2/spreadsheet/reference";_d "github.com/unidoc/unioffice/v2/spreadsheet/update";_a "io";_cf "math";_fcb "math/big";_bf "math/rand";_gd "regexp";_b "sort";_ee "strconv";_bb "strings";_c "sync";_aa "time";_gb "unicode";);


// Eval evaluates and returns a boolean.
func (_ae Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_ae ._eb )};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_ega ,_caf :=_ddec (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _caf .Type ==ResultTypeError {return _caf ;};_ede :=_ega ._bdcc ;_fdeb :=_ega ._bgca ;_dbfe :=_ega ._gfea ;_ebdeg :=_ega ._eff ;_fcbdd :=_ega ._fedc ;
_cadc :=_ega ._eca ;_agef :=_ega ._cfbf ;_ebff ,_cfdf :=_accg (_fdeb ,_dbfe ,_agef );if _cfdf .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");
};_egfe :=_ebff *_cadc *_ede ;if _fcbdd ==0{return MakeNumberResult (_egfe );};_edb :=_ede *_cadc ;_aeee :=_ede -_ebdeg ;_bdga :=int ((_aeee -_egfe )/_edb );if _fcbdd <=_bdga {return MakeNumberResult (_edb );}else if _fcbdd ==_bdga +1{return MakeNumberResult (_aeee -_edb *float64 (_bdga )-_egfe );
}else {return MakeNumberResult (0);};};var _daaf =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fcbf :=args [0].AsNumber ();if _fcbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_cf .Pi /180.0*_fcbf .ValueNumber );};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gagea :=args [0];switch _gagea .Type {case ResultTypeError :return _gagea ;
case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_gagea .ValueNumber !=0);};if _gagea .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _dccg (args );
case ResultTypeArray :return _bdage (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");
};};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_abbg :=len (args );if _abbg !=2&&_abbg !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_fbga ,_gbgb :=_agefa (args [0],args [1],"\u0058\u0049\u0052\u0052");if _gbgb .Type ==ResultTypeError {return _gbgb ;};_befc :=_fbga ._gdgb ;_cdd :=_fbga ._gegb ;_afgf :=0.1;if _abbg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afgf =args [2].ValueNumber ;if _afgf <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");
};};return _gfa (_befc ,_cdd ,_afgf );};const _bacfc =57377;

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acfcd :=int (args [0].ValueNumber );
return MakeBoolResult (_acfcd !=_acfcd /2*2);};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_ceef :=len (args );if _ceef < 5||_ceef > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eggcg :=args [0].ValueNumber ;if _eggcg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdcfe :=args [1].ValueNumber ;if _fdcfe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cfdg :=args [2].ValueNumber ;if _cfdg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _cfdg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_addb :=args [3].ValueNumber ;if _addb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgfeg :=args [4].ValueNumber ;if _addb > _cgfeg {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");
};if _cgfeg > _cfdg {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_becb :=2.0;if _ceef > 5{if args [5].Type ==ResultTypeEmpty {_becb =0.0;
}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_becb =args [5].ValueNumber ;if _becb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};};_deag :=false ;if _ceef > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_deag =args [6].ValueNumber !=0;};_fgd :=0.0;_gecfa :=_cf .Floor (_addb );_ecbbf :=_cf .Ceil (_cgfeg );if _deag {for _eaebf :=_gecfa +1;_eaebf <=_ecbbf ;_eaebf ++{_acdc :=_cfdcd (_eggcg ,_fdcfe ,_cfdg ,_eaebf ,_becb );if _eaebf ==_gecfa +1{_acdc *=_cf .Min (_cgfeg ,_gecfa +1)-_addb ;
}else if _eaebf ==_ecbbf {_acdc *=_cgfeg +1-_ecbbf ;};_fgd +=_acdc ;};}else {_acca :=_cfdg ;var _ffcg float64 ;if !_dcc (_addb ,_cf .Floor (_addb )){if _becb ==1{_feag :=_cfdg /2;if _addb > _feag ||_dcc (_addb ,_feag ){_ffcg =_addb -_feag ;_addb =_feag ;
_cgfeg -=_ffcg ;_acca ++;};};};if _becb !=0{_eggcg -=_cgcbb (_eggcg ,_fdcfe ,_cfdg ,_acca ,_addb ,_becb );};_fgd =_cgcbb (_eggcg ,_fdcfe ,_cfdg ,_cfdg -_addb ,_cgfeg -_addb ,_becb );};return MakeNumberResult (_fgd );};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_acfg :=args [0].ValueNumber ;if _acfg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};_cacc ,_geee :=_agefa (args [1],args [2],"\u0058\u004e\u0050\u0056");if _geee .Type ==ResultTypeError {return _geee ;};_cbce :=_cacc ._gdgb ;_dcefa :=_cacc ._gegb ;_eegc :=0.0;_feee :=_dcefa [0];for _egea ,_gegg :=range _cbce {_eegc +=_gegg /_cf .Pow (1+_acfg ,(_dcefa [_egea ]-_feee )/365);
};return MakeNumberResult (_eegc );};

// Bool is a boolean expression.
type Bool struct{_eb bool };const _bdfc ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";func _acdbc (_cfbc ,_fdf float64 ,_bbdf ,_ddc int )float64 {_cfcd :=_gdc (_cfbc );
_fcdb :=_gdc (_fdf );if _ddc ==1{_egde :=_aceca (_cfcd ,_fcdb ,_bbdf ,1);_fecf :=_egde .AddDate (0,12/_bbdf ,0);return _ecgdf (_egde ,_fecf ,_ddc );};return float64 (_eeg (0,_ddc ))/float64 (_bbdf );};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_aac :=_aa .Now ();_ ,_bbde :=_aac .Zone ();_dbef :=_bgcc (_egf ,_aac .Unix ()+int64 (_bbde ))+1;return MakeNumberResult (_dbef );};func _cbfd (_aacfg ,_eccc _aa .Time )bool {_gbe :=_aacfg .Unix ();_cbfb :=_eccc .Unix ();_fbcd :=_aacfg .Year ();_fgga :=_cgf (_fbcd ,_aa .March ,1);
if _fbdf (_fbcd )&&_gbe < _fgga &&_cbfb >=_fgga {return true ;};var _gcec =_eccc .Year ();var _acf =_cgf (_gcec ,_aa .March ,1);return (_fbdf (_gcec )&&_cbfb >=_acf &&_gbe < _acf );};

// Eval evaluates and returns the result of a function call.
func (_bddc FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_gddef :=LookupFunction (_bddc ._gaad );if _gddef !=nil {_bbfdb :=make ([]Result ,len (_bddc ._ddbcb ));for _cgec ,_dfafa :=range _bddc ._ddbcb {_bbfdb [_cgec ]=_dfafa .Eval (ctx ,ev );
_bbfdb [_cgec ].Ref =_dfafa .Reference (ctx ,ev );};if _ ,_gfed :=_geab [_bddc ._gaad ];!_gfed {if _abedc ,_bedgc :=_baegg (_bbfdb );_abedc {return _bedgc ;};};return _gddef (_bbfdb );};_dded :=LookupFunctionComplex (_bddc ._gaad );if _dded !=nil {_baffg :=make ([]Result ,len (_bddc ._ddbcb ));
for _egegg ,_gcecb :=range _bddc ._ddbcb {_baffg [_egegg ]=_gcecb .Eval (ctx ,ev );_baffg [_egegg ].Ref =_gcecb .Reference (ctx ,ev );};if _ ,_ecefc :=_geab [_bddc ._gaad ];!_ecefc {if _bdgf ,_febf :=_baegg (_baffg );_bdgf {return _febf ;};};return _dded (ctx ,ev ,_baffg );
};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_bddc ._gaad );};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_fgba :=args [0].AsNumber ();if _fgba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};var _agebd float64 ;_cbdc :=args [1].AsNumber ();if _cbdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_agebd =_cbdc .ValueNumber ;if _agebd < 0&&_fgba .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");
};_dbdba :=_fgba .ValueNumber ;_dbdba ,_eebc :=_cf .Modf (_dbdba /_agebd );if _eebc !=0{if _fgba .ValueNumber < 0&&_eebc < 0{_dbdba --;};};return MakeNumberResult (_dbdba *_agebd );};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ffcc :=args [0].AsString ();if _ffcc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");
};_cgade :="\u0041\u0031";if len (args )==2{_bfafc :=args [1].Ref ;if _bfafc .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};_cgade =_bfafc .Value ;};switch _ffcc .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_efbeb ,_badf :=_eg .ParseCellReference (_cgade );if _badf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cgade );
};_dbgd :="\u0024"+_efbeb .Column +"\u0024"+_ee .Itoa (int (_efbeb .RowIdx ));if _efbeb .SheetName !=""{_dbgd =_efbeb .SheetName +"\u0021"+_dbgd ;};return MakeStringResult (_dbgd );case "\u0063\u006f\u006c":_efag ,_dgff :=_eg .ParseCellReference (_cgade );
if _dgff !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cgade );};return MakeNumberResult (float64 (_efag .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_gdbcd :=_bb .Contains (ctx .GetFormat (_cgade ),"\u005b\u0052\u0045D\u005d");
return MakeBoolResult (_gdbcd );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_dccca :="\u0047";
_decf :=ctx .GetFormat (_cgade );if _decf =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_fedgb .MatchString (_decf ){_dccca ="\u0046\u0030";}else if _decf =="\u0030\u0025"{_dccca ="\u0050\u0030";}else if _decf =="\u004d\u004d\u004d\u0020\u0044\u0044"{_dccca ="\u0044\u0032";
}else if _decf =="\u004d\u004d\u002fY\u0059"{_dccca ="\u0044\u0033";}else if _decf =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_decf =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_dccca ="\u0044\u0034";
}else if _decf =="\u004d\u004d\u005c\u002d\u0044\u0044"{_dccca ="\u0044\u0035";}else if _decf =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_dccca ="\u0044\u0036";}else if _decf =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_dccca ="\u0044\u0037";
}else if _decf =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_dccca ="\u0044\u0038";}else if _decf =="\u0048\u0048\u003aM\u004d"{_dccca ="\u0044\u0039";}else if _abad .MatchString (_decf ){_dccca ="\u002e\u0030";}else if _cedf .MatchString (_decf ){_dccca ="\u002e\u0030\u0028\u0029";
}else if _ceece .MatchString (_decf ){_dccca ="\u0043\u0030";}else if _adfab .MatchString (_decf )||_adaee .MatchString (_decf ){_dccca ="\u0044\u0031";}else if _ecgf :=_fceb .FindStringSubmatch (_decf );len (_ecgf )> 1{_dccca ="\u0046"+_ee .Itoa (len (_ecgf [1]));
}else if _ebac :=_efedd .FindStringSubmatch (_decf );len (_ebac )> 1{_dccca ="\u002e"+_ee .Itoa (len (_ebac [2]));}else if _fcfe :=_gdbc .FindStringSubmatch (_decf );len (_fcfe )> 1{_dccca ="\u0050"+_ee .Itoa (len (_fcfe [2]));}else if _ebag :=_cfcgg .FindStringSubmatch (_decf );
len (_ebag )> 1{_dccca ="\u0043"+_cggb (_ebag ,1);}else if _cbgc :=_dcdb .FindStringSubmatch (_decf );len (_cbgc )> 1{_dccca ="\u0043"+_cggb (_cbgc ,1);}else if _cbeb :=_eabee .FindStringSubmatch (_decf );len (_cbeb )> 1{_dccca ="\u002e"+_cggb (_cbeb ,1)+"\u0028\u0029";
}else if _cfce :=_efacf .FindStringSubmatch (_decf );len (_cfce )> 1{_dccca ="\u002e"+_cggb (_cfce ,1);}else if _caae :=_aage .FindStringSubmatch (_decf );len (_caae )> 1{_dccca ="\u0053"+_cggb (_caae ,3);};if _dccca !="\u0047"&&_bb .Contains (_decf ,"\u005b\u0052\u0045D\u005d"){_dccca +="\u002d";
};return MakeStringResult (_dccca );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_gafcg :=ctx .GetFormat (_cgade );if _edfc .MatchString (_gafcg ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_cgade ));
case "\u0070r\u006f\u0074\u0065\u0063\u0074":_gcfc :=0.0;if ctx .GetLocked (_cgade ){_gcfc =1.0;};return MakeNumberResult (_gcfc );case "\u0072\u006f\u0077":_cccb ,_cgeb :=_eg .ParseCellReference (_cgade );if _cgeb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cgade );
};return MakeNumberResult (float64 (_cccb .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");
};case "\u0077\u0069\u0064t\u0068":_acaf ,_cgfc :=_eg .ParseCellReference (_cgade );if _cgfc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cgade );};if _acaf .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_acaf .ColumnIdx )));
}else {return MakeNumberResult (ctx .Sheet (_acaf .SheetName ).GetWidth (int (_acaf .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_ffcc .ValueString );
};const _gafca =57351;const _dag ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_deddb :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_deddb =int (args [1].ValueNumber );if _deddb < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");
};if _deddb ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_ffac :=args [0].Value ();
_dccce :=len (_ffac );if _deddb > _dccce {return MakeStringResult (_ffac );};return MakeStringResult (_ffac [_dccce -_deddb :_dccce ]);};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbcb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_faddd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbba :=args [2].ValueNumber ;if _fbba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccfb :=args [3].ValueNumber ;return MakeNumberResult (_ccfb *_fbcb *(_faddd /_fbba -1));};

// Reference returns an invalid reference for Error.
func (_gaf Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_debec ,_cbae ,_bbdd :=_egbae (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _bbdd .Type ==ResultTypeError {return _bbdd ;};if _cbae ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _debec ==0{return MakeNumberResult (0);};_dgfab :=_debec < 0;if _dgfab {_debec =-_debec ;};_beef :=float64 (int (_debec ));_dcdf :=args [0].Value ();_abfb :=_bb .Split (_dcdf ,"\u002e");_gdag :=0.0;if len (_abfb )> 1{var _agaa error ;_eccb :=_abfb [1];
_gdag ,_agaa =_ee .ParseFloat (_eccb ,64);if _agaa !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");
};_afadc :=float64 (len (_eccb ));_gdag /=_cf .Pow (10,_afadc );};_fbbc :=_gdag *_cbae /_cf .Pow (10,float64 (int (_cf .Log10 (_cbae )))+1)+_beef ;if _dgfab {_fbbc =-_fbbc ;};return MakeNumberResult (_fbbc );};func _bagb (_caddgb ,_dbbcfb float64 )float64 {_caddgb =_cf .Trunc (_caddgb );
_dbbcfb =_cf .Trunc (_dbbcfb );if _caddgb ==0&&_dbbcfb ==0{return 0;};return _caddgb *_dbbcfb /_bcfgc (_caddgb ,_dbbcfb );};

// Reference returns an invalid reference for EmptyExpr.
func (_gga EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _bbea =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};func _cegge (_fgbf Result ,_dffda *criteriaParsed )bool {if _fgbf .IsBoolean {return false ;
};_egebf :=_fgbf .Type ;if _dffda ._cgcd {return _egebf ==ResultTypeNumber &&_fgbf .ValueNumber ==_dffda ._afcf ;}else if _egebf ==ResultTypeNumber {return _bgcacf (_fgbf .ValueNumber ,_dffda ._aaebf );};return _afgb (_fgbf ,_dffda );};type node struct{_eedd tokenType ;
_faccf string ;};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_aecf :=args [0].AsNumber ();if _aecf .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cebb :=float64 (1);if _aecf .ValueNumber < 0{_cebb =-1;};if len (args )> 1{_bdfaf :=args [1].AsNumber ();if _bdfaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_cebb =_bdfaf .ValueNumber ;};_bacaf :=float64 (1);if len (args )> 2{_faeg :=args [2].AsNumber ();if _faeg .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bacaf =_faeg .ValueNumber ;};if len (args )==1{return MakeNumberResult (_cf .Floor (_aecf .ValueNumber ));};_edbe :=_aecf .ValueNumber ;_edbe ,_eegcd :=_cf .Modf (_edbe /_cebb );if _eegcd !=0&&_aecf .ValueNumber < 0&&_bacaf > 0{_edbe ++;};return MakeNumberResult (_edbe *_cebb );
};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_abb ,_afc :=_ee .ParseBool (v );if _afc !=nil {_fg .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_afc );
};return Bool {_eb :_abb };};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_aeegg ,_ddddb :=_ee .ParseFloat (v ,64);if _ddddb !=nil {_fg .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_ddddb );
};return Number {_ggdb :_aeegg };};

// HasFormula returns FALSE for the invalid reference context.
func (_cadab *ivr )HasFormula (cellRef string )bool {return false };func _ab (_ca Result )bool {if _ca .Type ==ResultTypeString {return _ca .ValueString =="";};return _ca .ValueNumber ==0;};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];
};return args [0];};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_fedca PrefixRangeExpr )Update (q *_d .UpdateQuery )Expression {_afbeeb :=_fedca ;_bcbea :=_fedca ._febd .String ();if _bcbea ==q .SheetToUpdate {_febcc :=*q ;_febcc .UpdateCurrentSheet =true ;_afbeeb ._fbad =_fedca ._fbad .Update (&_febcc );_afbeeb ._acfceb =_fedca ._acfceb .Update (&_febcc );
};return _afbeeb ;};type evCache struct{_gca map[string ]Result ;_cgcb *_c .Mutex ;};func _gfa (_bffec ,_cbeg []float64 ,_dgag float64 )Result {_cggd :=false ;_fcadb :=false ;for _ebfb :=0;_ebfb < len (_bffec );_ebfb ++{if _bffec [_ebfb ]> 0{_cggd =true ;
};if _bffec [_ebfb ]< 0{_fcadb =true ;};};if !_cggd ||!_fcadb {return MakeErrorResultType (ErrorTypeNum ,"");};_aba :=_dgag ;_cbee :=1e-10;_cgfb :=0;_fbdd :=50;_fbf :=false ;for {_acef :=_eggfd (_bffec ,_cbeg ,_aba );_badg :=_aba -_acef /_dddd (_bffec ,_cbeg ,_aba );
_ffeg :=_cf .Abs (_badg -_aba );_aba =_badg ;_cgfb ++;if _ffeg <=_cbee ||_cf .Abs (_acef )<=_cbee {break ;};if _cgfb > _fbdd {_fbf =true ;break ;};};if _fbf ||_cf .IsNaN (_aba )||_cf .IsInf (_aba ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_aba );
};func _efdfd (_bagg []Result ,_bega bool )(float64 ,float64 ){_fbgd :=0.0;_eefgd :=0.0;for _ ,_aaabg :=range _bagg {switch _aaabg .Type {case ResultTypeNumber :if _bega ||!_aaabg .IsBoolean {_eefgd +=_aaabg .ValueNumber ;_fbgd ++;};case ResultTypeList ,ResultTypeArray :_dbaaa ,_edgc :=_efdfd (_aaabg .ListValues (),_bega );
_eefgd +=_dbaaa ;_fbgd +=_edgc ;case ResultTypeString :if _bega {_fbgd ++;};case ResultTypeEmpty :};};return _eefgd ,_fbgd ;};var _dfdg =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};


// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_fggb :=_bb .ToLower (args [0].ValueString );if !_dea (_fggb ){_ ,_ ,_ ,_eecb ,_fcad :=_cbg (_fggb );if _fcad .Type ==ResultTypeError {_fcad .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";
return _fcad ;};if _eecb {return MakeNumberResult (0);};};_caac ,_cecc ,_eeff ,_cbe ,_ ,_cff :=_bfd (_fggb );if _cff .Type ==ResultTypeError {return _cff ;};_eceb :=_eddc (float64 (_caac ),float64 (_cecc ),_eeff );if _cbe {_eceb +=0.5;}else if _eceb >=1{_eceb -=float64 (int (_eceb ));
};return MakeNumberResult (_eceb );};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bfg :=ctx .GetEpoch ();_bfgb ,_ggg :=_ceag (args [0].Value (),_bfg );if _ggg !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (float64 (_bfgb .Year ()));};const _dafab =57378;

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bedg :=args [0];switch _bedg .Type {case ResultTypeError :return _bedg ;case ResultTypeNumber ,ResultTypeString :return _cdfcb (args [0]);case ResultTypeList :_cagbf :=_bedg .ValueList ;_deaee :=[]Result {};for _ ,_faef :=range _cagbf {_geedf :=_cdfcb (_faef );
if _geedf .Type ==ResultTypeError {return _geedf ;};_deaee =append (_deaee ,_geedf );};return MakeListResult (_deaee );case ResultTypeArray :_fdfc :=_bedg .ValueArray ;_bedf :=[][]Result {};for _ ,_bgff :=range _fdfc {_ggdg :=[]Result {};for _ ,_caefg :=range _bgff {_eeecg :=_cdfcb (_caefg );
if _eeecg .Type ==ResultTypeError {return _eeecg ;};_ggdg =append (_ggdg ,_eeecg );};_bedf =append (_bedf ,_ggdg );};return MakeArrayResult (_bedf );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_afeee :=args [0].AsNumber ();
if _afeee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcfb :=_cf .Signbit (_afeee .ValueNumber );
_egedd ,_ddbef :=_cf .Modf (_afeee .ValueNumber /2);_cdfg :=_egedd *2;if _ddbef !=0{if !_fcfb {_cdfg +=2;}else {_cdfg -=2;};};return MakeNumberResult (_cdfg );};const _afcb =86400000000000;

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_fece :=args [0].AsNumber ();_ebfgg :=args [1].AsNumber ();if _fece .Type !=ResultTypeNumber ||_ebfgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};if _ebfgg .ValueNumber < _fece .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");
};_gggcb :=int64 (_fece .ValueNumber );_fegee :=int64 (_ebfgg .ValueNumber );return MakeNumberResult (float64 (_eebg .Int63n (_fegee -_gggcb +1)+_gggcb ));};

// Reference returns a string reference value to a horizontal range with prefix.
func (_cgbeb PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_gcbfe :=_cgbeb ._bbec .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_cgbeb .horizontalRangeReference (_gcbfe .Value )};};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_cede :=_aa .Now ();
_ ,_gbg :=_cede .Zone ();_gfd :=_ebd +float64 (_cede .Unix ()+int64 (_gbg ))/86400;return MakeNumberResult (_gfd );};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_ebgba .Lock ();defer _ebgba .Unlock ();if _ ,_ffbba :=_egbeeg [name ];_ffbba {_fg .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_egbeeg [name ]=fn ;};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_baca :=args [0];_ecaa :=args [1];if _ecaa .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_fcdg :=args [2].AsNumber ();if _fcdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ffad :=false ;if len (args )==4{_bbeb :=args [3].AsNumber ();if _bbeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _bbeb .ValueNumber ==0{_ffad =true ;};};_bbbf :=-1;_ggcfd :=false ;if len (_ecaa .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");
};_bdgg :=_ecaa .ValueArray [0];_eaebd :for _ebcg ,_ddcd :=range _bdgg {switch _fbfa (_ddcd ,_baca ,false ,_ffad ){case _fdebc :_bbbf =_ebcg ;case _gcbfc :_bbbf =_ebcg ;_ggcfd =true ;break _eaebd ;};};if _bbbf ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_fbca :=int (_fcdg .ValueNumber )-1;if _fbca < 0||_fbca > len (_ecaa .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_bdgg =_ecaa .ValueArray [_fbca ];
if _bbbf < 0||_bbbf >=len (_bdgg ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _ggcfd ||!_ffad {return _bdgg [_bbbf ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};func _bebg (_dbe ,_dce int )int {if _dce ==2&&_fbdf (_dbe ){return 29;}else {return _gda [_dce -1];
};};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _egfae (args ,false )};

// Eval evaluates and returns the result of a Negate expression.
func (_fbfe Negate )Eval (ctx Context ,ev Evaluator )Result {_bgfea :=_fbfe ._fegef .Eval (ctx ,ev );if _bgfea .Type ==ResultTypeNumber {return MakeNumberResult (-_bgfea .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};

// String returns a string representation of a horizontal range.
func (_abfbeb HorizontalRange )String ()string {return _abfbeb .horizontalRangeReference ()};func _feb (_ceaf ,_bfgf ,_defc ,_dabd ,_dde float64 ,_gba int )Result {_facb ,_gdcf :=_accg (_ceaf ,_bfgf ,_gba );if _gdcf .Type ==ResultTypeError {return _gdcf ;
};_cca ,_bbcfe :=_gaeb (_ceaf ,_bfgf ,int (_dde ),_gba );if _bbcfe .Type ==ResultTypeError {return _bbcfe ;};_fegc :=0.0;_dcb :=0.0;_defc *=100/_dde ;_dabd /=_dde ;_dabd ++;_ead :=_facb *_dde -_cca ;for _defd :=1.0;_defd < _cca ;_defd ++{_cfbe :=_defd +_ead ;
_dgfa :=_defc /_cf .Pow (_dabd ,_cfbe );_dcb +=_dgfa ;_fegc +=_cfbe *_dgfa ;};_cfeg :=(_defc +100)/_cf .Pow (_dabd ,_cca +_ead );_dcb +=_cfeg ;_fegc +=(_cca +_ead )*_cfeg ;_fegc /=_dcb ;_fegc /=_dde ;return MakeNumberResult (_fegc );};type durationArgs struct{_ddf float64 ;
_cef float64 ;_fgcg float64 ;_cada float64 ;_fddbf float64 ;_fecfb int ;};func _cgcbb (_bgd ,_abedb ,_fabc ,_gbda ,_dedb ,_cecg float64 )float64 {var _feec ,_aceef float64 ;_bcgbf :=0.0;_babg :=_cf .Ceil (_dedb );_adaf :=_bgd -_abedb ;_ddfe :=false ;_ecbd :=0.0;
for _dedd :=1.0;_dedd <=_babg ;_dedd ++{if !_ddfe {_feec =_cfdcd (_bgd ,_abedb ,_fabc ,_dedd ,_cecg );_ecbd =_adaf /(_fabc -_dedd +1);if _ecbd > _feec {_aceef =_ecbd ;_ddfe =true ;}else {_aceef =_feec ;_adaf -=_feec ;};}else {_aceef =_ecbd ;};if _dedd ==_babg {_aceef *=_dedb +1-_babg ;
};_bcgbf +=_aceef ;};return _bcgbf ;};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_fbfg :=len (args );if _fbfg !=5&&_fbfg !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_egdea ,_gbge ,_ggeb :=_gfg (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _ggeb .Type ==ResultTypeError {return _ggeb ;};_fcac ,_ggeb :=_bfae (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");
if _ggeb .Type ==ResultTypeError {return _ggeb ;};if _fcac >=_egdea {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cceg :=args [3].ValueNumber ;if _cceg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_daba :=args [4].ValueNumber ;if _daba < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_edf :=0;if _fbfg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_edf =int (args [5].ValueNumber );if !_cagb (_edf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");
};};_ebba ,_ggeb :=_accg (_egdea ,_gbge ,_edf );if _ggeb .Type ==ResultTypeError {return _ggeb ;};_babb ,_ggeb :=_accg (_fcac ,_gbge ,_edf );if _ggeb .Type ==ResultTypeError {return _ggeb ;};_baa ,_ggeb :=_accg (_fcac ,_egdea ,_edf );if _ggeb .Type ==ResultTypeError {return _ggeb ;
};_gbddd :=1+_babb *_cceg ;_agce :=1+_ebba *_daba ;return MakeNumberResult ((_gbddd /_agce -_baa *_cceg )*100);};func _eggfd (_daeb ,_aebg []float64 ,_gbdd float64 )float64 {_ceadf :=_gbdd +1;_aaag :=_daeb [0];_bca :=len (_daeb );_egfa :=_aebg [0];for _gea :=1;
_gea < _bca ;_gea ++{_aaag +=_daeb [_gea ]/_cf .Pow (_ceadf ,(_aebg [_gea ]-_egfa )/365);};return _aaag ;};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_ebga :=args [0];if _ebga .Type !=ResultTypeArray &&_ebga .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_gdaf :=_ebga .ValueArray ;if len (_gdaf )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};return MakeNumberResult (float64 (len (_gdaf )));};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_dfbe ,_gffb :=_efec (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _gffb .Type ==ResultTypeError {return _gffb ;};_gagc :=_dfbe ._bbce ;_gfeg :=_dfbe ._gcgd ;_gafe ,_gffb :=_gaeb (_dfbe ._faec ,_dfbe ._dbba ,_gagc ,_gfeg );
if _gffb .Type ==ResultTypeError {return _gffb ;};return MakeNumberResult (_gafe );};func init (){_dgf ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );
RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );
RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );
RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// Reference returns a string reference value to a cell.
func (_ba CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_ba ._cfd };};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_cfege ,_ffdd :=_efdfd (args ,false );if _ffdd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_cfege /_ffdd );};func _egfae (_dbcbb []Result ,_bbbfe bool )Result {_afda :="\u004d\u0049\u004e";if _bbbfe {_afda ="\u004d\u0049\u004e\u0041";};if len (_dbcbb )==0{return MakeErrorResult (_afda +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aeaddf :=_cf .MaxFloat64 ;for _ ,_dfaf :=range _dbcbb {switch _dfaf .Type {case ResultTypeNumber :if (_bbbfe ||!_dfaf .IsBoolean )&&_dfaf .ValueNumber < _aeaddf {_aeaddf =_dfaf .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_fcde :=_egfae (_dfaf .ListValues (),_bbbfe );
if _fcde .ValueNumber < _aeaddf {_aeaddf =_fcde .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_ddbea :=0.0;if _bbbfe {_ddbea =_dfaf .AsNumber ().ValueNumber ;};if _ddbea < _aeaddf {_aeaddf =_ddbea ;};default:_fg .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_afda +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dfaf .Type );
};};if _aeaddf ==_cf .MaxFloat64 {_aeaddf =0;};return MakeNumberResult (_aeaddf );};func _bdbb (_gfdd Result )[]Result {_adefb :=_gfdd .ValueList ;if _gfdd .Type ==ResultTypeArray {_adefb =nil ;for _ ,_bade :=range _gfdd .ValueArray {if len (_bade )> 0{_adefb =append (_adefb ,_bade [0]);
}else {_adefb =append (_adefb ,_gdab );};};};return _adefb ;};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_edge :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acfd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ffaga :=args [2].ValueNumber ;if _ffaga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gecd :=args [3].ValueNumber ;if _gecd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _gecd > _ffaga {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");
};_bcga :=(_edge -_acfd )*(_ffaga -_gecd +1)*2;_bgfc :=_ffaga *(_ffaga +1);return MakeNumberResult (_bcga /_bgfc );};const _bggc =16;func (_cb BinOpType )String ()string {if _cb >=BinOpType (len (_bd )-1){return _g .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_cb );
};return _dd [_bd [_cb ]:_bd [_cb +1]];};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fcace :=args [0].AsNumber ();if _fcace .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_gaeea :=float64 (1);if _fcace .ValueNumber < 0{_gaeea =-1;};if len (args )> 1{_cfga :=args [1].AsNumber ();if _cfga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gaeea =_cfga .ValueNumber ;};if _gaeea < 0&&_fcace .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};if len (args )==1{return MakeNumberResult (_cf .Ceil (_fcace .ValueNumber ));};_dcad :=_fcace .ValueNumber ;_dcad ,_daga :=_cf .Modf (_dcad /_gaeea );if _daga > 0{_dcad ++;};return MakeNumberResult (_dcad *_gaeea );};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_aaae :=args [0].AsNumber ();if _aaae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_deae :=float64 (0);if len (args )> 1{_bcedb :=args [1].AsNumber ();if _bcedb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_deae =_bcedb .ValueNumber ;};_edfa :=_aaae .ValueNumber ;_agge :=1.0;if _deae >=0{_agge =_cf .Pow (1/10.0,_deae );}else {return MakeNumberResult (0);};_edfa ,_abfe :=_cf .Modf (_edfa /_agge );_feeg :=0.99999;if _abfe > _feeg {_edfa ++;}else if _abfe < -_feeg {_edfa --;
};_ =_abfe ;return MakeNumberResult (_edfa *_agge );};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _fcaa (args ,_cdfd )};const _bbb ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";
const _fb ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dddg :=args [0].ValueNumber ;if _dddg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aega :=args [1].ValueNumber ;if _aega <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_faaf :=args [2].ValueNumber ;if _faaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");
};return MakeNumberResult ((_cf .Log10 (_faaf )-_cf .Log10 (_aega ))/_cf .Log10 (1+_dddg ));};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type !=ResultTypeString );};type rmode byte ;

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_daae :=len (args );if _daae < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fded :=args [0].ValueNumber ;if _fded ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_geeb :=[]float64 {};for _ ,_fege :=range args [1:]{switch _fege .Type {case ResultTypeNumber :_geeb =append (_geeb ,_fege .ValueNumber );case ResultTypeArray ,ResultTypeList :_efae :=_badec (_fege );
for _ ,_acee :=range _efae {for _ ,_cecbg :=range _acee {if _cecbg .Type ==ResultTypeNumber &&!_cecbg .IsBoolean {_geeb =append (_geeb ,_cecbg .ValueNumber );};};};};};_eafe :=0.0;for _dbag ,_beca :=range _geeb {_eafe +=_beca /_cf .Pow (1+_fded ,float64 (_dbag )+1);
};return MakeNumberResult (_eafe );};

// String returns a string representation of ConstArrayExpr.
func (_beec ConstArrayExpr )String ()string {return ""};type defEval struct{evCache ;_cfg bool ;};func (_dafe *Lexer )lex (_ceaa _a .Reader ){_ffff ,_eacae ,_gedad :=0,0,0;_ebbag :=-1;_ccbbe ,_deff ,_ebeae :=0,0,0;_ =_ebeae ;_cccd :=1;_ =_cccd ;_eefc :=make ([]byte ,4096);
_faeag :=false ;for !_faeag {_bbefg :=0;if _ccbbe > 0{_bbefg =_eacae -_ccbbe ;};_eacae =0;_cdce ,_fgfc :=_ceaa .Read (_eefc [_bbefg :]);if _cdce ==0||_fgfc !=nil {_faeag =true ;};_gedad =_cdce +_bbefg ;if _gedad < len (_eefc ){_ebbag =_gedad ;};{_ffff =_cddfc ;
_ccbbe =0;_deff =0;_ebeae =0;};{var _dfdaa int ;var _adfbag uint ;if _eacae ==_gedad {goto _egca ;};if _ffff ==0{goto _egga ;};_bccca :_dfdaa =int (_cgdg [_ffff ]);_adfbag =uint (_daec [_dfdaa ]);_dfdaa ++;for ;_adfbag > 0;_adfbag --{_dfdaa ++;switch _daec [_dfdaa -1]{case 2:_ccbbe =_eacae ;
};};switch _ffff {case 30:switch _eefc [_eacae ]{case 34:goto _aabce ;case 35:goto _eafgg ;case 36:goto _ccccb ;case 38:goto _fdee ;case 39:goto _febc ;case 40:goto _dcaaa ;case 41:goto _dbgcc ;case 42:goto _gbgc ;case 43:goto _egebfb ;case 44:goto _dffg ;
case 45:goto _ecgee ;case 47:goto _ccaa ;case 58:goto _dcga ;case 59:goto _bdefb ;case 60:goto _edfaea ;case 61:goto _cfagb ;case 62:goto _ceadfd ;case 63:goto _fagdd ;case 70:goto _acfce ;case 84:goto _fbee ;case 92:goto _ddga ;case 94:goto _eaaba ;case 95:goto _ebgc ;
case 123:goto _cdcd ;case 125:goto _cdad ;};switch {case _eefc [_eacae ]< 65:switch {case _eefc [_eacae ]> 37:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _bcgc ;};case _eefc [_eacae ]>=33:goto _fagdd ;};case _eefc [_eacae ]> 90:switch {case _eefc [_eacae ]> 93:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _cdbe ;
};case _eefc [_eacae ]>=91:goto _fagdd ;};default:goto _dabf ;};goto _bgdae ;case 1:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 47:goto _agfg ;case 123:goto _agfg ;case 125:goto _agfg ;};switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _agfg ;
};case _eefc [_eacae ]> 45:switch {case _eefc [_eacae ]> 63:if 91<=_eefc [_eacae ]&&_eefc [_eacae ]<=94{goto _agfg ;};case _eefc [_eacae ]>=58:goto _agfg ;};default:goto _agfg ;};goto _bgdae ;case 0:goto _egga ;case 2:if _eefc [_eacae ]==34{goto _faecg ;
};goto _aabce ;case 31:if _eefc [_eacae ]==34{goto _aabce ;};goto _ebggb ;case 3:switch _eefc [_eacae ]{case 78:goto _dcefd ;case 82:goto _eegg ;};goto _fagdd ;case 4:switch _eefc [_eacae ]{case 47:goto _bcdc ;case 85:goto _acgbd ;};goto _fagdd ;case 5:if _eefc [_eacae ]==65{goto _bgdc ;
};goto _fagdd ;case 6:switch _eefc [_eacae ]{case 76:goto _fbea ;case 77:goto _befgf ;};goto _fagdd ;case 7:if _eefc [_eacae ]==76{goto _befgf ;};goto _fagdd ;case 8:if _eefc [_eacae ]==33{goto _bgdc ;};goto _fagdd ;case 9:if _eefc [_eacae ]==69{goto _bbad ;
};goto _fagdd ;case 10:if _eefc [_eacae ]==70{goto _cgbe ;};goto _fagdd ;case 11:if _eefc [_eacae ]==33{goto _dadcg ;};goto _fagdd ;case 12:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 47:goto _fagdd ;case 123:goto _fagdd ;case 125:goto _fagdd ;};switch {case _eefc [_eacae ]< 48:switch {case _eefc [_eacae ]> 35:if 37<=_eefc [_eacae ]&&_eefc [_eacae ]<=45{goto _fagdd ;
};case _eefc [_eacae ]>=34:goto _fagdd ;};case _eefc [_eacae ]> 57:switch {case _eefc [_eacae ]< 65:if 58<=_eefc [_eacae ]&&_eefc [_eacae ]<=63{goto _fagdd ;};case _eefc [_eacae ]> 90:if 91<=_eefc [_eacae ]&&_eefc [_eacae ]<=94{goto _fagdd ;};default:goto _caabc ;
};default:goto _ggea ;};goto _bgdae ;case 13:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 47:goto _fagdd ;case 58:goto _gecgg ;case 123:goto _fagdd ;case 125:goto _fagdd ;};switch {case _eefc [_eacae ]< 48:switch {case _eefc [_eacae ]> 35:if 37<=_eefc [_eacae ]&&_eefc [_eacae ]<=45{goto _fagdd ;
};case _eefc [_eacae ]>=34:goto _fagdd ;};case _eefc [_eacae ]> 57:switch {case _eefc [_eacae ]> 63:if 91<=_eefc [_eacae ]&&_eefc [_eacae ]<=94{goto _fagdd ;};case _eefc [_eacae ]>=59:goto _fagdd ;};default:goto _ggea ;};goto _bgdae ;case 14:if _eefc [_eacae ]==36{goto _acdeca ;
};if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _dbcbc ;};goto _agfg ;case 15:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _dbcbc ;};goto _agfg ;case 32:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _dbcbc ;};goto _cfdgb ;case 16:switch _eefc [_eacae ]{case 33:goto _bfgdg ;
case 36:goto _gbeagd ;case 47:goto _fagdd ;case 58:goto _fdce ;case 123:goto _fagdd ;case 125:goto _fagdd ;};switch {case _eefc [_eacae ]< 59:switch {case _eefc [_eacae ]> 45:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _aceeg ;};case _eefc [_eacae ]>=34:goto _fagdd ;
};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]> 90:if 91<=_eefc [_eacae ]&&_eefc [_eacae ]<=94{goto _fagdd ;};case _eefc [_eacae ]>=65:goto _caabc ;};default:goto _fagdd ;};goto _bgdae ;case 17:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 47:goto _agfg ;
case 123:goto _agfg ;case 125:goto _agfg ;};switch {case _eefc [_eacae ]< 48:switch {case _eefc [_eacae ]> 35:if 37<=_eefc [_eacae ]&&_eefc [_eacae ]<=45{goto _agfg ;};case _eefc [_eacae ]>=34:goto _agfg ;};case _eefc [_eacae ]> 57:switch {case _eefc [_eacae ]> 63:if 91<=_eefc [_eacae ]&&_eefc [_eacae ]<=94{goto _agfg ;
};case _eefc [_eacae ]>=58:goto _agfg ;};default:goto _aceeg ;};goto _bgdae ;case 33:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 47:goto _accab ;case 123:goto _accab ;case 125:goto _accab ;};switch {case _eefc [_eacae ]< 48:switch {case _eefc [_eacae ]> 35:if 37<=_eefc [_eacae ]&&_eefc [_eacae ]<=45{goto _accab ;
};case _eefc [_eacae ]>=34:goto _accab ;};case _eefc [_eacae ]> 57:switch {case _eefc [_eacae ]> 63:if 91<=_eefc [_eacae ]&&_eefc [_eacae ]<=94{goto _accab ;};case _eefc [_eacae ]>=58:goto _accab ;};default:goto _aceeg ;};goto _bgdae ;case 18:if _eefc [_eacae ]==36{goto _eebga ;
};if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _aecfg ;};goto _agfg ;case 19:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _aecfg ;};goto _agfg ;case 34:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _aecfg ;};goto _eeab ;case 20:switch _eefc [_eacae ]{case 39:goto _fagdd ;
case 42:goto _fagdd ;case 47:goto _fagdd ;case 58:goto _fagdd ;case 63:goto _fagdd ;};if 91<=_eefc [_eacae ]&&_eefc [_eacae ]<=93{goto _fagdd ;};goto _gdedc ;case 21:switch _eefc [_eacae ]{case 39:goto _dafabb ;case 42:goto _fagdd ;case 47:goto _fagdd ;
case 58:goto _fagdd ;case 63:goto _fagdd ;};if 91<=_eefc [_eacae ]&&_eefc [_eacae ]<=93{goto _fagdd ;};goto _gdedc ;case 22:if _eefc [_eacae ]==33{goto _adfc ;};goto _fagdd ;case 35:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 46:goto _fgcd ;case 58:goto _gecgg ;
case 101:goto _fgff ;case 123:goto _fcedc ;case 125:goto _fcedc ;};switch {case _eefc [_eacae ]< 48:switch {case _eefc [_eacae ]> 35:if 37<=_eefc [_eacae ]&&_eefc [_eacae ]<=47{goto _fcedc ;};case _eefc [_eacae ]>=34:goto _fcedc ;};case _eefc [_eacae ]> 57:switch {case _eefc [_eacae ]> 63:if 91<=_eefc [_eacae ]&&_eefc [_eacae ]<=94{goto _fcedc ;
};case _eefc [_eacae ]>=59:goto _fcedc ;};default:goto _bcgc ;};goto _bgdae ;case 36:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 47:goto _fcedc ;case 101:goto _fgff ;case 123:goto _fcedc ;case 125:goto _fcedc ;};switch {case _eefc [_eacae ]< 48:switch {case _eefc [_eacae ]> 35:if 37<=_eefc [_eacae ]&&_eefc [_eacae ]<=45{goto _fcedc ;
};case _eefc [_eacae ]>=34:goto _fcedc ;};case _eefc [_eacae ]> 57:switch {case _eefc [_eacae ]> 63:if 91<=_eefc [_eacae ]&&_eefc [_eacae ]<=94{goto _fcedc ;};case _eefc [_eacae ]>=58:goto _fcedc ;};default:goto _fgcd ;};goto _bgdae ;case 23:switch _eefc [_eacae ]{case 33:goto _bfgdg ;
case 47:goto _fadde ;case 123:goto _fadde ;case 125:goto _fadde ;};switch {case _eefc [_eacae ]< 48:switch {case _eefc [_eacae ]> 35:if 37<=_eefc [_eacae ]&&_eefc [_eacae ]<=45{goto _fadde ;};case _eefc [_eacae ]>=34:goto _fadde ;};case _eefc [_eacae ]> 57:switch {case _eefc [_eacae ]> 63:if 91<=_eefc [_eacae ]&&_eefc [_eacae ]<=94{goto _fadde ;
};case _eefc [_eacae ]>=58:goto _fadde ;};default:goto _cggba ;};goto _bgdae ;case 37:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 47:goto _fcedc ;case 123:goto _fcedc ;case 125:goto _fcedc ;};switch {case _eefc [_eacae ]< 48:switch {case _eefc [_eacae ]> 35:if 37<=_eefc [_eacae ]&&_eefc [_eacae ]<=45{goto _fcedc ;
};case _eefc [_eacae ]>=34:goto _fcedc ;};case _eefc [_eacae ]> 57:switch {case _eefc [_eacae ]> 63:if 91<=_eefc [_eacae ]&&_eefc [_eacae ]<=94{goto _fcedc ;};case _eefc [_eacae ]>=58:goto _fcedc ;};default:goto _cggba ;};goto _bgdae ;case 38:switch _eefc [_eacae ]{case 61:goto _eegea ;
case 62:goto _ceffd ;};goto _begf ;case 39:if _eefc [_eacae ]==61{goto _eadb ;};goto _ecfc ;case 24:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 36:goto _gbeagd ;case 40:goto _bfgg ;case 46:goto _dffffg ;case 58:goto _fdce ;case 92:goto _effc ;case 95:goto _bcdg ;
case 123:goto _fagdd ;case 125:goto _fagdd ;};switch {case _eefc [_eacae ]< 59:switch {case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _fegd ;};case _eefc [_eacae ]>=34:goto _fagdd ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _cdffa ;
};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;};default:goto _fagdd ;};default:goto _fagdd ;};goto _bgdae ;case 40:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 40:goto _bfgg ;case 46:goto _dffffg ;case 92:goto _effc ;
case 95:goto _bcdg ;case 123:goto _babfg ;case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 58:switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _babfg ;};case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _dffffg ;
};default:goto _babfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _dffffg ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;};default:goto _babfg ;};default:goto _babfg ;
};goto _bgdae ;case 41:switch _eefc [_eacae ]{case 46:goto _effc ;case 92:goto _effc ;case 95:goto _effc ;};switch {case _eefc [_eacae ]< 65:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _effc ;};case _eefc [_eacae ]> 90:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _effc ;
};default:goto _effc ;};goto _babfg ;case 42:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 46:goto _bcdg ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _babfg ;case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 58:switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _babfg ;
};case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _bcdg ;};default:goto _babfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _bcdg ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;
};default:goto _babfg ;};default:goto _babfg ;};goto _bgdae ;case 43:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 40:goto _bfgg ;case 46:goto _dffffg ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _accab ;case 125:goto _accab ;};switch {case _eefc [_eacae ]< 58:switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _accab ;
};case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _fegd ;};default:goto _accab ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _dffffg ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;
};default:goto _accab ;};default:goto _accab ;};goto _bgdae ;case 44:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 36:goto _gbeagd ;case 40:goto _bfgg ;case 46:goto _dffffg ;case 58:goto _fdce ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _agfg ;
case 125:goto _agfg ;};switch {case _eefc [_eacae ]< 59:switch {case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _fegd ;};case _eefc [_eacae ]>=34:goto _agfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _cdffa ;
};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;};default:goto _agfg ;};default:goto _agfg ;};goto _bgdae ;case 25:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 36:goto _gbeagd ;case 40:goto _bfgg ;case 46:goto _dffffg ;
case 58:goto _fdce ;case 65:goto _dcaff ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _fagdd ;case 125:goto _fagdd ;};switch {case _eefc [_eacae ]< 59:switch {case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _fegd ;};case _eefc [_eacae ]>=34:goto _fagdd ;
};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 66<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _cdffa ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;};default:goto _fagdd ;};default:goto _fagdd ;};goto _bgdae ;
case 45:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 36:goto _gbeagd ;case 40:goto _bfgg ;case 46:goto _dffffg ;case 58:goto _fdce ;case 76:goto _eecbg ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _babfg ;case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 59:switch {case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _fegd ;
};case _eefc [_eacae ]>=34:goto _babfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _cdffa ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;};default:goto _babfg ;
};default:goto _babfg ;};goto _bgdae ;case 46:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 36:goto _gbeagd ;case 40:goto _bfgg ;case 46:goto _dffffg ;case 58:goto _fdce ;case 83:goto _debf ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _babfg ;
case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 59:switch {case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _fegd ;};case _eefc [_eacae ]>=34:goto _babfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _cdffa ;
};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;};default:goto _babfg ;};default:goto _babfg ;};goto _bgdae ;case 47:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 36:goto _gbeagd ;case 40:goto _bfgg ;case 46:goto _dffffg ;
case 58:goto _fdce ;case 69:goto _cgcdg ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _babfg ;case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 59:switch {case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _fegd ;};case _eefc [_eacae ]>=34:goto _babfg ;
};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _cdffa ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;};default:goto _babfg ;};default:goto _babfg ;};goto _bgdae ;
case 26:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 36:goto _gbeagd ;case 40:goto _bfgg ;case 46:goto _dffffg ;case 58:goto _fdce ;case 79:goto _deedc ;case 82:goto _agcfb ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _fagdd ;case 125:goto _fagdd ;
};switch {case _eefc [_eacae ]< 59:switch {case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _fegd ;};case _eefc [_eacae ]>=34:goto _fagdd ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _cdffa ;
};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;};default:goto _fagdd ;};default:goto _fagdd ;};goto _bgdae ;case 48:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 36:goto _gbeagd ;case 40:goto _bfgg ;case 46:goto _dffffg ;
case 58:goto _fdce ;case 68:goto _faede ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _babfg ;case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 59:switch {case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _fegd ;};case _eefc [_eacae ]>=34:goto _babfg ;
};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _cdffa ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;};default:goto _babfg ;};default:goto _babfg ;};goto _bgdae ;
case 49:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 36:goto _gbeagd ;case 40:goto _bfgg ;case 46:goto _dffffg ;case 58:goto _fdce ;case 79:goto _befd ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _babfg ;case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 59:switch {case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _fegd ;
};case _eefc [_eacae ]>=34:goto _babfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _cdffa ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;};default:goto _babfg ;
};default:goto _babfg ;};goto _bgdae ;case 50:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 36:goto _gbeagd ;case 40:goto _bfgg ;case 46:goto _dffffg ;case 58:goto _fdce ;case 85:goto _debf ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _babfg ;
case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 59:switch {case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _fegd ;};case _eefc [_eacae ]>=34:goto _babfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _cdffa ;
};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;};default:goto _babfg ;};default:goto _babfg ;};goto _bgdae ;case 27:switch _eefc [_eacae ]{case 46:goto _effc ;case 92:goto _effc ;case 95:goto _effc ;};switch {case _eefc [_eacae ]< 65:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _effc ;
};case _eefc [_eacae ]> 90:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _effc ;};default:goto _effc ;};goto _fagdd ;case 28:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 46:goto _bcdg ;case 92:goto _effc ;case 95:goto _bcdg ;case 120:goto _gffc ;
case 123:goto _fagdd ;case 125:goto _fagdd ;};switch {case _eefc [_eacae ]< 58:switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _fagdd ;};case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _bcdg ;
};default:goto _fagdd ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _bcdg ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;};default:goto _fagdd ;};default:goto _fagdd ;
};goto _bgdae ;case 51:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 46:goto _bcdg ;case 92:goto _effc ;case 95:goto _bcdg ;case 108:goto _bfdag ;case 123:goto _babfg ;case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 58:switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _babfg ;
};case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _bcdg ;};default:goto _babfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _bcdg ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;
};default:goto _babfg ;};default:goto _babfg ;};goto _bgdae ;case 52:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 46:goto _bcdg ;case 92:goto _effc ;case 95:goto _bcdg ;case 102:goto _edgga ;case 110:goto _eeeb ;case 123:goto _babfg ;case 125:goto _babfg ;
};switch {case _eefc [_eacae ]< 58:switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _babfg ;};case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _bcdg ;};default:goto _babfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _bcdg ;
};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;};default:goto _babfg ;};default:goto _babfg ;};goto _bgdae ;case 53:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 46:goto _bcdg ;case 92:goto _effc ;case 95:goto _bcdg ;
case 110:goto _afbee ;case 123:goto _babfg ;case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 58:switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _babfg ;};case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _bcdg ;
};default:goto _babfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _bcdg ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;};default:goto _babfg ;};default:goto _babfg ;
};goto _bgdae ;case 54:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 46:goto _bbeef ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _babfg ;case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 58:switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _babfg ;
};case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _bcdg ;};default:goto _babfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _bcdg ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;
};default:goto _babfg ;};default:goto _babfg ;};goto _bgdae ;case 55:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 46:goto _bcdg ;case 92:goto _effc ;case 95:goto _ccag ;case 123:goto _babfg ;case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 58:switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _babfg ;
};case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _bcdg ;};default:goto _babfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _ccag ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;
};default:goto _babfg ;};default:goto _babfg ;};goto _bgdae ;case 56:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 40:goto _dddcg ;case 46:goto _ccag ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _babfg ;case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 58:switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _babfg ;
};case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _ccag ;};default:goto _babfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _ccag ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;
};default:goto _babfg ;};default:goto _babfg ;};goto _bgdae ;case 57:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 46:goto _bcdg ;case 92:goto _effc ;case 95:goto _bcdg ;case 109:goto _caeg ;case 123:goto _babfg ;case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 58:switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _babfg ;
};case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _bcdg ;};default:goto _babfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _bcdg ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;
};default:goto _babfg ;};default:goto _babfg ;};goto _bgdae ;case 58:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 46:goto _eecd ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _babfg ;case 125:goto _babfg ;};switch {case _eefc [_eacae ]< 58:switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _babfg ;
};case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _bcdg ;};default:goto _babfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _bcdg ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;
};default:goto _babfg ;};default:goto _babfg ;};goto _bgdae ;case 59:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 46:goto _bcdg ;case 92:goto _effc ;case 95:goto _bafe ;case 123:goto _agfg ;case 125:goto _agfg ;};switch {case _eefc [_eacae ]< 58:switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _agfg ;
};case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _bcdg ;};default:goto _agfg ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _bafe ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;
};default:goto _agfg ;};default:goto _agfg ;};goto _bgdae ;case 29:switch _eefc [_eacae ]{case 33:goto _bfgdg ;case 46:goto _bcdg ;case 92:goto _effc ;case 95:goto _bcdg ;case 123:goto _fagdd ;case 125:goto _fagdd ;};switch {case _eefc [_eacae ]< 58:switch {case _eefc [_eacae ]< 37:if 34<=_eefc [_eacae ]&&_eefc [_eacae ]<=35{goto _fagdd ;
};case _eefc [_eacae ]> 47:if 48<=_eefc [_eacae ]&&_eefc [_eacae ]<=57{goto _bcdg ;};default:goto _fagdd ;};case _eefc [_eacae ]> 63:switch {case _eefc [_eacae ]< 91:if 65<=_eefc [_eacae ]&&_eefc [_eacae ]<=90{goto _bcdg ;};case _eefc [_eacae ]> 94:if 97<=_eefc [_eacae ]&&_eefc [_eacae ]<=122{goto _bcdg ;
};default:goto _fagdd ;};default:goto _fagdd ;};goto _bgdae ;};_fagdd :_ffff =0;goto _gbece ;_bgdae :_ffff =1;goto _gbece ;_aabce :_ffff =2;goto _gbece ;_eafgg :_ffff =3;goto _gbece ;_dcefd :_ffff =4;goto _gbece ;_bcdc :_ffff =5;goto _gbece ;_acgbd :_ffff =6;
goto _gbece ;_fbea :_ffff =7;goto _gbece ;_befgf :_ffff =8;goto _gbece ;_eegg :_ffff =9;goto _gbece ;_bbad :_ffff =10;goto _gbece ;_cgbe :_ffff =11;goto _gbece ;_ccccb :_ffff =12;goto _gbece ;_ggea :_ffff =13;goto _gbece ;_gecgg :_ffff =14;goto _gbece ;
_acdeca :_ffff =15;goto _gbece ;_caabc :_ffff =16;goto _gbece ;_gbeagd :_ffff =17;goto _gbece ;_fdce :_ffff =18;goto _gbece ;_eebga :_ffff =19;goto _gbece ;_febc :_ffff =20;goto _gbece ;_gdedc :_ffff =21;goto _gbece ;_dafabb :_ffff =22;goto _gbece ;_fgff :_ffff =23;
goto _gbece ;_dabf :_ffff =24;goto _gbece ;_acfce :_ffff =25;goto _gbece ;_fbee :_ffff =26;goto _gbece ;_ddga :_ffff =27;goto _gbece ;_ebgc :_ffff =28;goto _gbece ;_cdbe :_ffff =29;goto _gbece ;_agfg :_ffff =30;goto _cabb ;_bfgdg :_ffff =30;goto _dagfb ;
_bgdc :_ffff =30;goto _bagbb ;_dadcg :_ffff =30;goto _ggacg ;_adfc :_ffff =30;goto _egcga ;_fadde :_ffff =30;goto _dggff ;_bfgg :_ffff =30;goto _fcded ;_fdee :_ffff =30;goto _feaf ;_dcaaa :_ffff =30;goto _cccbe ;_dbgcc :_ffff =30;goto _ccca ;_gbgc :_ffff =30;
goto _eeadb ;_egebfb :_ffff =30;goto _faab ;_dffg :_ffff =30;goto _ffbgd ;_ecgee :_ffff =30;goto _ecfbb ;_ccaa :_ffff =30;goto _addea ;_dcga :_ffff =30;goto _cabga ;_bdefb :_ffff =30;goto _aebbc ;_cfagb :_ffff =30;goto _baggc ;_eaaba :_ffff =30;goto _bfgbd ;
_cdcd :_ffff =30;goto _cbba ;_cdad :_ffff =30;goto _gfegb ;_ebggb :_ffff =30;goto _ddab ;_cfdgb :_ffff =30;goto _eefb ;_accab :_ffff =30;goto _fgeec ;_eeab :_ffff =30;goto _abef ;_fcedc :_ffff =30;goto _fbcg ;_begf :_ffff =30;goto _egbee ;_eegea :_ffff =30;
goto _daece ;_ceffd :_ffff =30;goto _cfeba ;_ecfc :_ffff =30;goto _debeae ;_eadb :_ffff =30;goto _adfcd ;_babfg :_ffff =30;goto _fddfg ;_dddcg :_ffff =30;goto _ffec ;_faecg :_ffff =31;goto _baade ;_dbcbc :_ffff =32;goto _gbece ;_aceeg :_ffff =33;goto _gceda ;
_aecfg :_ffff =34;goto _gbece ;_bcgc :_ffff =35;goto _eefde ;_fgcd :_ffff =36;goto _eefde ;_cggba :_ffff =37;goto _eefde ;_edfaea :_ffff =38;goto _gbece ;_ceadfd :_ffff =39;goto _gbece ;_dffffg :_ffff =40;goto _ebdcd ;_effc :_ffff =41;goto _gbece ;_bcdg :_ffff =42;
goto _ebdcd ;_fegd :_ffff =43;goto _gceda ;_cdffa :_ffff =44;goto _ebdcd ;_cgcdg :_ffff =44;goto _caegc ;_befd :_ffff =44;goto _bfgfg ;_dcaff :_ffff =45;goto _ebdcd ;_eecbg :_ffff =46;goto _ebdcd ;_debf :_ffff =47;goto _ebdcd ;_deedc :_ffff =48;goto _ebdcd ;
_faede :_ffff =49;goto _ebdcd ;_agcfb :_ffff =50;goto _ebdcd ;_gffc :_ffff =51;goto _ebdcd ;_bfdag :_ffff =52;goto _ebdcd ;_edgga :_ffff =53;goto _ebdcd ;_afbee :_ffff =54;goto _ebdcd ;_bbeef :_ffff =55;goto _ebdcd ;_ccag :_ffff =56;goto _ebdcd ;_eeeb :_ffff =57;
goto _ebdcd ;_caeg :_ffff =58;goto _ebdcd ;_eecd :_ffff =59;goto _ebdcd ;_bafe :_ffff =59;goto _adgdg ;_bagbb :_dfdaa =3;goto _dffa ;_ggacg :_dfdaa =5;goto _dffa ;_dagfb :_dfdaa =7;goto _dffa ;_egcga :_dfdaa =9;goto _dffa ;_fcded :_dfdaa =11;goto _dffa ;
_ffec :_dfdaa =13;goto _dffa ;_feaf :_dfdaa =15;goto _dffa ;_cbba :_dfdaa =17;goto _dffa ;_gfegb :_dfdaa =19;goto _dffa ;_cccbe :_dfdaa =21;goto _dffa ;_ccca :_dfdaa =23;goto _dffa ;_faab :_dfdaa =25;goto _dffa ;_ecfbb :_dfdaa =27;goto _dffa ;_eeadb :_dfdaa =29;
goto _dffa ;_addea :_dfdaa =31;goto _dffa ;_bfgbd :_dfdaa =33;goto _dffa ;_baggc :_dfdaa =35;goto _dffa ;_daece :_dfdaa =37;goto _dffa ;_adfcd :_dfdaa =39;goto _dffa ;_cfeba :_dfdaa =41;goto _dffa ;_cabga :_dfdaa =43;goto _dffa ;_aebbc :_dfdaa =45;goto _dffa ;
_ffbgd :_dfdaa =47;goto _dffa ;_fbcg :_dfdaa =49;goto _dffa ;_fgeec :_dfdaa =51;goto _dffa ;_eefb :_dfdaa =53;goto _dffa ;_abef :_dfdaa =55;goto _dffa ;_fddfg :_dfdaa =57;goto _dffa ;_ddab :_dfdaa =59;goto _dffa ;_egbee :_dfdaa =61;goto _dffa ;_debeae :_dfdaa =63;
goto _dffa ;_dggff :_dfdaa =65;goto _dffa ;_cabb :_dfdaa =67;goto _dffa ;_caegc :_dfdaa =72;goto _dffa ;_eefde :_dfdaa =75;goto _dffa ;_gceda :_dfdaa =78;goto _dffa ;_bfgfg :_dfdaa =81;goto _dffa ;_adgdg :_dfdaa =84;goto _dffa ;_ebdcd :_dfdaa =87;goto _dffa ;
_baade :_dfdaa =90;goto _dffa ;_dffa :_adfbag =uint (_daec [_dfdaa ]);_dfdaa ++;for ;_adfbag > 0;_adfbag --{_dfdaa ++;switch _daec [_dfdaa -1]{case 3:_deff =_eacae +1;case 4:_ebeae =1;case 5:_ebeae =2;case 6:_ebeae =3;case 7:_ebeae =4;case 8:_ebeae =11;
case 9:_ebeae =14;case 10:_ebeae =15;case 11:_deff =_eacae +1;{_dafe .emit (_fecfa ,_eefc [_ccbbe :_deff ]);};case 12:_deff =_eacae +1;{_dafe .emit (_fcdaa ,_eefc [_ccbbe :_deff ]);};case 13:_deff =_eacae +1;{_dafe .emit (_becaa ,_eefc [_ccbbe :_deff -1]);
};case 14:_deff =_eacae +1;{_dafe .emit (_becaa ,_eefc [_ccbbe +1:_deff -2]);};case 15:_deff =_eacae +1;{_dafe .emit (_ecbfg ,_eefc [_ccbbe :_deff -1]);};case 16:_deff =_eacae +1;{_dafe .emit (_ecbfg ,_eefc [_ccbbe :_deff -1]);};case 17:_deff =_eacae +1;
{_dafe .emit (_bacfc ,_eefc [_ccbbe :_deff ]);};case 18:_deff =_eacae +1;{_dafe .emit (_dgdd ,_eefc [_ccbbe :_deff ]);};case 19:_deff =_eacae +1;{_dafe .emit (_baeef ,_eefc [_ccbbe :_deff ]);};case 20:_deff =_eacae +1;{_dafe .emit (_ggba ,_eefc [_ccbbe :_deff ]);
};case 21:_deff =_eacae +1;{_dafe .emit (_adgeg ,_eefc [_ccbbe :_deff ]);};case 22:_deff =_eacae +1;{_dafe .emit (_bebf ,_eefc [_ccbbe :_deff ]);};case 23:_deff =_eacae +1;{_dafe .emit (_fcbaac ,_eefc [_ccbbe :_deff ]);};case 24:_deff =_eacae +1;{_dafe .emit (_geeeg ,_eefc [_ccbbe :_deff ]);
};case 25:_deff =_eacae +1;{_dafe .emit (_dfdb ,_eefc [_ccbbe :_deff ]);};case 26:_deff =_eacae +1;{_dafe .emit (_bacag ,_eefc [_ccbbe :_deff ]);};case 27:_deff =_eacae +1;{_dafe .emit (_ebgbg ,_eefc [_ccbbe :_deff ]);};case 28:_deff =_eacae +1;{_dafe .emit (_cgaca ,_eefc [_ccbbe :_deff ]);
};case 29:_deff =_eacae +1;{_dafe .emit (_acbb ,_eefc [_ccbbe :_deff ]);};case 30:_deff =_eacae +1;{_dafe .emit (_gafgd ,_eefc [_ccbbe :_deff ]);};case 31:_deff =_eacae +1;{_dafe .emit (_defeb ,_eefc [_ccbbe :_deff ]);};case 32:_deff =_eacae +1;{_dafe .emit (_dafab ,_eefc [_ccbbe :_deff ]);
};case 33:_deff =_eacae +1;{_dafe .emit (_cecgf ,_eefc [_ccbbe :_deff ]);};case 34:_deff =_eacae ;_eacae --;{_dafe .emit (_dabe ,_eefc [_ccbbe :_deff ]);};case 35:_deff =_eacae ;_eacae --;{_dafe .emit (_gdcfa ,_eefc [_ccbbe :_deff ]);};case 36:_deff =_eacae ;
_eacae --;{_dafe .emit (_fagd ,_eefc [_ccbbe :_deff ]);};case 37:_deff =_eacae ;_eacae --;{_dafe .emit (_ddge ,_eefc [_ccbbe :_deff ]);};case 38:_deff =_eacae ;_eacae --;{_dafe .emit (_gafca ,_eefc [_ccbbe :_deff ]);};case 39:_deff =_eacae ;_eacae --;{_dafe .emit (_cddf ,_eefc [_ccbbe +1:_deff -1]);
};case 40:_deff =_eacae ;_eacae --;{_dafe .emit (_edda ,_eefc [_ccbbe :_deff ]);};case 41:_deff =_eacae ;_eacae --;{_dafe .emit (_cgegb ,_eefc [_ccbbe :_deff ]);};case 42:_eacae =(_deff )-1;{_dafe .emit (_dabe ,_eefc [_ccbbe :_deff ]);};case 43:switch _ebeae {case 0:{_ffff =0;
goto _gbece ;};case 1:{_eacae =(_deff )-1;_dafe .emit (_bfbgb ,_eefc [_ccbbe :_deff ]);};case 2:{_eacae =(_deff )-1;_dafe .emit (_dabe ,_eefc [_ccbbe :_deff ]);};case 3:{_eacae =(_deff )-1;_dafe .emit (_gdcfa ,_eefc [_ccbbe :_deff ]);};case 4:{_eacae =(_deff )-1;
_dafe .emit (_ggfb ,_eefc [_ccbbe :_deff ]);};case 11:{_eacae =(_deff )-1;_dafe .emit (_addd ,_eefc [_ccbbe :_deff ]);};case 14:{_eacae =(_deff )-1;_dafe .emit (_gafca ,_eefc [_ccbbe :_deff ]);};case 15:{_eacae =(_deff )-1;_dafe .emit (_cddf ,_eefc [_ccbbe +1:_deff -1]);
};};};};goto _gbece ;_gbece :_dfdaa =int (_ebbce [_ffff ]);_adfbag =uint (_daec [_dfdaa ]);_dfdaa ++;for ;_adfbag > 0;_adfbag --{_dfdaa ++;switch _daec [_dfdaa -1]{case 0:_ccbbe =0;case 1:_ebeae =0;};};if _ffff ==0{goto _egga ;};if _eacae ++;_eacae !=_gedad {goto _bccca ;
};_egca :{};if _eacae ==_ebbag {switch _ffff {case 1:goto _agfg ;case 2:goto _agfg ;case 31:goto _ebggb ;case 14:goto _agfg ;case 15:goto _agfg ;case 32:goto _cfdgb ;case 17:goto _agfg ;case 33:goto _accab ;case 18:goto _agfg ;case 19:goto _agfg ;case 34:goto _eeab ;
case 35:goto _fcedc ;case 36:goto _fcedc ;case 23:goto _fadde ;case 37:goto _fcedc ;case 38:goto _begf ;case 39:goto _ecfc ;case 40:goto _babfg ;case 41:goto _babfg ;case 42:goto _babfg ;case 43:goto _accab ;case 44:goto _agfg ;case 45:goto _babfg ;case 46:goto _babfg ;
case 47:goto _babfg ;case 48:goto _babfg ;case 49:goto _babfg ;case 50:goto _babfg ;case 51:goto _babfg ;case 52:goto _babfg ;case 53:goto _babfg ;case 54:goto _babfg ;case 55:goto _babfg ;case 56:goto _babfg ;case 57:goto _babfg ;case 58:goto _babfg ;
case 59:goto _agfg ;};};_egga :{};};if _ccbbe > 0{copy (_eefc [0:],_eefc [_ccbbe :]);};};_ =_ebbag ;if _ffff ==_gfdcc {_dafe .emit (_bdbda ,nil );};close (_dafe ._aaddb );};func (_fgcb *Lexer )emit (_ddecf tokenType ,_eecec []byte ){if _edag {_g .Println ("\u0065\u006d\u0069\u0074",_ddecf ,_abgf (string (_eecec )));
};_fgcb ._aaddb <-&node {_ddecf ,string (_eecec )};};var _ebgba _c .Mutex ;var _egf int64 =_cgf (1900,_aa .January ,1);

// Eval evaluates and returns the result of a sheet expression.
func (_dfdfb SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");
};var (_aaded =0;_bbeac =false ;);func _cgf (_egdc int ,_aadd _aa .Month ,_caaca int )int64 {if _egdc ==1900&&int (_aadd )<=2{_caaca --;};_ecf :=_aa .Date (_egdc ,_aadd ,_caaca ,0,0,0,0,_aa .UTC );return _ecf .Unix ();};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgbf :=args [0].AsString ();if _cgbf .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (_cgbf .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (_cgbf .ValueString [0]));};var _egbeeg =map[string ]FunctionComplex {};func _ecfa (_aea ,_bffg ,_abc ,_aeae int )int {if !_acce (_aeae ){return _abc ;};_adae :=_abc ;_cdeb :=_bebg (_aea ,_bffg );if _adae > 30||_abc >=_cdeb ||_adae >=_cdeb {_adae =30;
};return _adae ;};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bfaea :=true ;for _ ,_cacb :=range args {_cacb =_cacb .AsNumber ();switch _cacb .Type {case ResultTypeList ,ResultTypeArray :_effd :=And (_cacb .ListValues ());if _effd .Type ==ResultTypeError {return _effd ;};if _effd .ValueNumber ==0{_bfaea =false ;
};case ResultTypeNumber :if _cacb .ValueNumber ==0{_bfaea =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
case ResultTypeError :return _cacb ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");
};};return MakeBoolResult (_bfaea );};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aaab :=args [0];switch _aaab .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
case ResultTypeString :_afee :=0.0;_dgee :=0.0;for _ ,_bged :=range _aaab .ValueString {_cebf :=0.0;switch _bged {case 'I':_cebf =1;case 'V':_cebf =5;case 'X':_cebf =10;case 'L':_cebf =50;case 'C':_cebf =100;case 'D':_cebf =500;case 'M':_cebf =1000;};_afee +=_cebf ;
switch {case _dgee ==_cebf &&(_dgee ==5||_dgee ==50||_dgee ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_dgee ==_cebf :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");
};if _dgee < _cebf {_afee -=2*_dgee ;};_dgee =_cebf ;};return MakeNumberResult (_afee );case ResultTypeError :return _aaab ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_aaab .Type ));
};};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_ccb :lhs ,_bbg :rhs ,_cg :op };};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_dbaf :v }};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ecgg :=args [0].AsString ();if _ecgg .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_agggcb :=_e .Buffer {};_ebca :=false ;for _ ,_ddggd :=range _ecgg .ValueString {if !_ebca &&_gb .IsLetter (_ddggd ){_agggcb .WriteRune (_gb .ToUpper (_ddggd ));}else {_agggcb .WriteRune (_gb .ToLower (_ddggd ));};_ebca =_gb .IsLetter (_ddggd );};return MakeStringResult (_agggcb .String ());
};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_ebgba .Lock ();defer _ebgba .Unlock ();if _aebcd ,_gfbc :=_egbeeg [name ];_gfbc {return _aebcd ;};return nil ;};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_dcba :=len (args );if _dcba < 2||_dcba > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ggb :=args [0];if _ggb .Type !=ResultTypeArray &&_ggb .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_eddcc :=args [1].AsNumber ();if _eddcc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_accgd :=int (_eddcc .ValueNumber )-1;_gfff :=-1;if _dcba ==3&&args [2].Type !=ResultTypeEmpty {_ccab :=args [2].AsNumber ();if _ccab .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_gfff =int (_ccab .ValueNumber )-1;};if _accgd ==-1&&_gfff ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};var _eggeg []Result ;if _ggb .Type ==ResultTypeArray {_ceace :=_ggb .ValueArray ;if _accgd < -1||_accgd >=len (_ceace ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _accgd ==-1{if _gfff >=len (_ceace [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_debad :=[][]Result {};for _ ,_gbfa :=range _ceace {_adad :=_gbfa [_gfff ];
if _adad .Type ==ResultTypeEmpty {_adad =MakeNumberResult (0);};_debad =append (_debad ,[]Result {_adad });};return MakeArrayResult (_debad );};_eggeg =_ceace [_accgd ];}else {_aaba :=_ggb .ValueList ;if _accgd < -1||_accgd >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _accgd ==-1{if _gfff >=len (_aaba ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_dbgc :=_aaba [_gfff ];if _dbgc .Type ==ResultTypeEmpty {_dbgc =MakeNumberResult (0);
};return _dbgc ;};_eggeg =_aaba ;};if _gfff < -1||_gfff > len (_eggeg ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _gfff ==-1{_aeeeg :=[]Result {};
for _ ,_eedb :=range _eggeg {if _eedb .Type ==ResultTypeEmpty {_aeeeg =append (_aeeeg ,MakeNumberResult (0));}else {_aeeeg =append (_aeeeg ,_eedb );};};return MakeArrayResult ([][]Result {_aeeeg });};_dcgg :=_eggeg [_gfff ];if _dcgg .Type ==ResultTypeEmpty {return MakeNumberResult (0);
};return _dcgg ;};

// Eval evaluates a range returning a list of results or an error.
func (_eabc Range )Eval (ctx Context ,ev Evaluator )Result {_ddbb :=_eabc ._fddg .Reference (ctx ,ev );_gedab :=_eabc ._bfeg .Reference (ctx ,ev );_fdag :=_ccaee (_ddbb ,_gedab );if _ddbb .Type ==ReferenceTypeCell &&_gedab .Type ==ReferenceTypeCell {if _cbbg ,_abeb :=ev .GetFromCache (_fdag );
_abeb {return _cbbg ;}else {_ccdcc :=_cggbdc (ctx ,ev ,_ddbb .Value ,_gedab .Value );ev .SetCache (_fdag ,_ccdcc );return _ccdcc ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_fdag );};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aedf :=args [0].ValueNumber ;if _aedf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_dcdg :=args [1].ValueNumber ;if _dcdg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bgbc :=args [2].ValueNumber ;if _bgbc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");
};return MakeNumberResult (_cf .Pow (_bgbc /_dcdg ,1/_aedf )-1);};

// Reference returns a string reference value to a vertical range.
func (_cdgfe VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_cdgfe .verticalRangeReference ()};};func _dga (_efgd ,_bgfe float64 ,_fagf ,_cfcb int )float64 {_ccc :=_gdc (_efgd );
_dgb :=_gdc (_bgfe );_gcf :=_aceca (_ccc ,_dgb ,_fagf ,_cfcb );return _ecgdf (_gcf ,_ccc ,_cfcb );};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_aade :=len (args );if _aade !=4&&_aade !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_cgac ,_gace ,_dbac :=_gfg (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _dbac .Type ==ResultTypeError {return _dbac ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cdgfa :=args [2].ValueNumber ;if _cdgfa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_acbg :=args [3].ValueNumber ;if _acbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecbb :=0;if _aade ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecbb =int (args [4].ValueNumber );if !_cagb (_ecbb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");
};};_ceac ,_dbac :=_accg (_cgac ,_gace ,_ecbb );if _dbac .Type ==ResultTypeError {return _dbac ;};return MakeNumberResult (_cdgfa /(1-_acbg *_ceac ));};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_degb :=args [0].AsNumber ();if _degb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_baaee :=_cf .Signbit (_degb .ValueNumber );_cefcef ,_gggc :=_cf .Modf ((_degb .ValueNumber -1)/2);_bgcg :=_cefcef *2+1;if _gggc !=0{if !_baaee {_bgcg +=2;}else {_bgcg -=2;};};return MakeNumberResult (_bgcg );};var _fedgb ,_fceb ,_abad ,_cedf ,_efacf ,_efedd ,_eabee ,_edfc ,_gdbc ,_ceece ,_cfcgg ,_dcdb ,_adfab ,_adaee ,_aage *_gd .Regexp ;


// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_cab ConstArrayExpr )Update (q *_d .UpdateQuery )Expression {return _cab };

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_fddg ,_bfeg Expression };

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_ceacd :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");
};_ceacd =int (args [1].ValueNumber );if _ceacd < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");
};if _ceacd ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_gcff :=args [0].Value ();
if _ceacd > len (_gcff ){return MakeStringResult (_gcff );};return MakeStringResult (_gcff [0:_ceacd ]);};var _gcg =[]*_gd .Regexp {};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_cgd *defEval )LastEvalIsRef ()bool {return _cgd ._cfg };func _aafc (_gbaf []Result ,_aeeg bool ,_cdaaf string )Result {var _efbbb ,_dffff string ;if _aeeg {_efbbb ="\u0074\u0068\u0072e\u0065";_dffff ="\u006f\u0064\u0064";}else {_efbbb ="\u0074\u0077\u006f";
_dffff ="\u0065\u0076\u0065\u006e";};_gcfa :=len (_gbaf );if (_aeeg &&_gcfa < 3)||(!_aeeg &&_gcfa < 2){return MakeErrorResult (_cdaaf +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_efbbb +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};if (_gcfa /2*2==_gcfa )==_aeeg {return MakeErrorResult (_cdaaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_dffff +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_gggg :=-1;_cbfbd :=-1;
for _gbab :=0;_gbab < _gcfa ;_gbab +=2{_ebfge :=_gbaf [_gbab ];if _ebfge .Type !=ResultTypeArray &&_ebfge .Type !=ResultTypeList {return MakeErrorResult (_cdaaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");
};_ffbg :=_badec (_ebfge );if _cbfbd ==-1{_cbfbd =len (_ffbg );_gggg =len (_ffbg [0]);}else if len (_ffbg )!=_cbfbd ||len (_ffbg [0])!=_gggg {return MakeErrorResult (_cdaaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");
};if _aeeg &&_gbab ==0{_gbab --;};};return _gdab ;};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dade :=args [0].AsString ();if _dade .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (len (_dade .ValueString )));};func _agefa (_bfeac ,_eafg Result ,_dbeeg string )(*xargs ,Result ){if _bfeac .Type !=ResultTypeList &&_bfeac .Type !=ResultTypeArray {return nil ,MakeErrorResult (_dbeeg +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_bgda :=_badec (_bfeac );_gfdf :=[]float64 {};for _ ,_aggg :=range _bgda {for _ ,_cdac :=range _aggg {if _cdac .Type ==ResultTypeNumber &&!_cdac .IsBoolean {_gfdf =append (_gfdf ,_cdac .ValueNumber );}else {return nil ,MakeErrorResult (_dbeeg +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");
};};};_daefg :=len (_gfdf );if len (_gfdf )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _eafg .Type !=ResultTypeList &&_eafg .Type !=ResultTypeArray {return nil ,MakeErrorResult (_dbeeg +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_bgdab :=_badec (_eafg );_gdgbd :=[]float64 {};_gbeag :=0.0;for _ ,_dced :=range _bgdab {for _ ,_efbe :=range _dced {if _efbe .Type ==ResultTypeNumber &&!_efbe .IsBoolean {_eddg :=float64 (int (_efbe .ValueNumber ));if _eddg < _gbeag {return nil ,MakeErrorResultType (ErrorTypeNum ,_dbeeg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");
};_gdgbd =append (_gdgbd ,_eddg );_gbeag =_eddg ;}else {return nil ,MakeErrorResult (_dbeeg +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_gdgbd )!=_daefg {return nil ,MakeErrorResultType (ErrorTypeNum ,"");
};return &xargs {_gfdf ,_gdgbd },MakeEmptyResult ();};

// String returns a string representation of a named range.
func (_cbca NamedRangeRef )String ()string {return _cbca ._dcfc };func _faegc (_fbef ,_fgaff Expression )(Expression ,Expression ,error ){_bebc ,_edbaa :=_fbef .(CellRef );if !_edbaa {return nil ,nil ,_fc .New (_g .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fbef .String ()));
};_cecgg ,_edbaa :=_fgaff .(CellRef );if !_edbaa {return nil ,nil ,_fc .New (_g .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fgaff .String ()));};_bfeef ,_dbcaf :=_eg .ParseCellReference (_bebc ._cfd );
if _dbcaf !=nil {return nil ,nil ,_dbcaf ;};_bgbe ,_bgcaca :=_eg .ParseCellReference (_cecgg ._cfd );if _bgcaca !=nil {return nil ,nil ,_bgcaca ;};_ceaae :=false ;if _bfeef .RowIdx > _bgbe .RowIdx {_ceaae =true ;_bfeef .RowIdx ,_bgbe .RowIdx =_bgbe .RowIdx ,_bfeef .RowIdx ;
};if _bfeef .ColumnIdx > _bgbe .ColumnIdx {_ceaae =true ;_bfeef .ColumnIdx ,_bgbe .ColumnIdx =_bgbe .ColumnIdx ,_bfeef .ColumnIdx ;_bfeef .Column ,_bgbe .Column =_bgbe .Column ,_bfeef .Column ;};if _ceaae {return NewCellRef (_bfeef .String ()),NewCellRef (_bgbe .String ()),nil ;
};return _fbef ,_fgaff ,nil ;};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_abgad :=args [0];if _abgad .Type ==ResultTypeNumber {return _abgad ;};if _abgad .Type ==ResultTypeString {_cgfbe ,_egbaea :=_ee .ParseFloat (_abgad .Value (),64);if _egbaea ==nil {return MakeNumberResult (_cgfbe );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");
};func _fcdgb (_dcagd string ,_cafe []Result )(*parsedReplaceObject ,Result ){if len (_cafe )!=4{return nil ,MakeErrorResult (_dcagd +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _cafe [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_dcagd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_bdgdf :=_cafe [0].ValueString ;if _cafe [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcagd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");
};_agebb :=int (_cafe [1].ValueNumber )-1;if _cafe [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcagd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_afbd :=int (_cafe [2].ValueNumber );if _cafe [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_dcagd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");
};_cdaae :=_cafe [3].ValueString ;return &parsedReplaceObject {_bdgdf ,_agebb ,_afbd ,_cdaae },_gdab ;};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_agdb :=args [0].Ref ;if _agdb .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .HasFormula (_agdb .Value ));};

// Reference returns a string reference value to a range.
func (_bdfac Range )Reference (ctx Context ,ev Evaluator )Reference {_bgad :=_bdfac ._fddg .Reference (ctx ,ev );_cddb :=_bdfac ._bfeg .Reference (ctx ,ev );if _bgad .Type ==ReferenceTypeCell &&_cddb .Type ==ReferenceTypeCell {return MakeRangeReference (_ccaee (_bgad ,_cddb ));
};return ReferenceInvalid ;};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_dbd :=args [0];switch _dbd .Type {case ResultTypeEmpty :return MakeNumberResult (1);
case ResultTypeNumber :_fed :=_gdc (_dbd .ValueNumber );return MakeNumberResult (float64 (_fed .Month ()));case ResultTypeString :_bgag :=_bb .ToLower (_dbd .ValueString );if !_cecd (_bgag ){_ ,_ ,_ ,_ ,_bfeae ,_dege :=_bfd (_bgag );if _dege .Type ==ResultTypeError {_dege .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";
return _dege ;};if _bfeae {return MakeNumberResult (1);};};_ ,_bbgb ,_ ,_ ,_dabc :=_cbg (_bgag );if _dabc .Type ==ResultTypeError {return _dabc ;};return MakeNumberResult (float64 (_bbgb ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");
};};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );
};

// Update updates the FunctionCall references after removing a row/column.
func (_aabf FunctionCall )Update (q *_d .UpdateQuery )Expression {_dgea :=[]Expression {};for _ ,_fbeb :=range _aabf ._ddbcb {_cgag :=_fbeb .Update (q );_dgea =append (_dgea ,_cgag );};return FunctionCall {_gaad :_aabf ._gaad ,_ddbcb :_dgea };};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };
case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };
case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };
default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};

// GetLocked returns FALSE for the invalid reference context.
func (_edcb *ivr )GetLocked (cellRef string )bool {return false };func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );
RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );
RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );
RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );
RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );
RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );
RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );
RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );
RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );
RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );
RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );
RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );
RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_cfea :=len (args );if _cfea !=4&&_cfea !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_caddge ,_gafea ,_cbccf :=_gfg (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _cbccf .Type ==ResultTypeError {return _cbccf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_gccge :=args [2].ValueNumber ;if _gccge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_eccf :=args [3].ValueNumber ;if _eccf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};_ceab :=0;if _cfea ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_ceab =int (args [4].ValueNumber );if !_cagb (_ceab ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");
};};_ffba ,_cbccf :=_accg (_caddge ,_gafea ,_ceab );if _cbccf .Type ==ResultTypeError {return _cbccf ;};return MakeNumberResult ((_eccf -_gccge )/_gccge /_ffba );};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_gdcba Context ,_abaa Evaluator ,_dcgbd []Result )Result ;func _bfae (_cdga Result ,_bdff ,_degf string )(float64 ,Result ){var _aeac float64 ;switch _cdga .Type {case ResultTypeNumber :_aeac =float64 (int (_cdga .ValueNumber ));
case ResultTypeString :_ggeg :=DateValue ([]Result {_cdga });if _ggeg .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_bdff +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_degf );
};_aeac =_ggeg .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_degf );};if _aeac < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_bdff +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};return _aeac ,_gdab ;};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_baga :=args [0].ValueNumber ;_afeg :=args [1].ValueNumber ;_cdgf :=args [2].ValueNumber ;_eab :=_eddc (_baga ,_afeg ,_cdgf );if _eab >=0{return MakeNumberResult (_eab );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};const (ResultTypeUnknown ResultType =iota ;
ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);

// ResultType is the type of the result
//
//go:generate stringer -type=ResultType
type ResultType byte ;

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_bdafc :=args [0].AsNumber ();if _bdafc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_eacga :=int (_bdafc .ValueNumber );_bfgaf :=make ([][]Result ,0,_eacga );for _ggab :=0;_ggab < _eacga ;_ggab ++{_efbbc :=make ([]Result ,_eacga );for _ccee :=0;_ccee < _eacga ;_ccee ++{if _ggab ==_ccee {_efbbc [_ccee ]=MakeNumberResult (1.0);}else {_efbbc [_ccee ]=MakeNumberResult (0.0);
};};_bfgaf =append (_bfgaf ,_efbbc );};return MakeArrayResult (_bfgaf );};func _bdage (_fadb []Result )Result {_fcdbf :=_fadb [0].ValueArray ;if len (_fadb )==1{_cded :=[][]Result {};for _ ,_gefc :=range _fcdbf {_cded =append (_cded ,_dccg ([]Result {MakeListResult (_gefc )}).ValueList );
};return MakeArrayResult (_cded );}else if len (_fadb )==2{_babf :=len (_fcdbf );_bgdd :=len (_fcdbf [0]);_ggbf :=_gcgc (_fadb [1],_babf ,_bgdd );_eddgb :=len (_ggbf );_beaef :=[][]Result {};var _gdf []Result ;for _gdgc ,_gaged :=range _fcdbf {if _gdgc < _eddgb {_gdf =_ggbf [_gdgc ];
}else {_gdf =_fdcd (MakeErrorResultType (ErrorTypeNA ,""),_bgdd );};_beaef =append (_beaef ,_dccg ([]Result {MakeListResult (_gaged ),MakeListResult (_gdf )}).ValueList );};return MakeArrayResult (_beaef );}else if len (_fadb )==3{_dbbcf :=len (_fcdbf );
_baffa :=len (_fcdbf [0]);_dgffd :=_gcgc (_fadb [1],_dbbcf ,_baffa );_bece :=_gcgc (_fadb [2],_dbbcf ,_baffa );_caed :=len (_dgffd );_faag :=len (_bece );_ecbc :=[][]Result {};var _dceg ,_bgddd []Result ;for _cfcc ,_faed :=range _fcdbf {if _cfcc < _caed {_dceg =_dgffd [_cfcc ];
}else {_dceg =_fdcd (MakeErrorResultType (ErrorTypeNA ,""),_baffa );};if _cfcc < _faag {_bgddd =_bece [_cfcc ];}else {_bgddd =_fdcd (MakeErrorResultType (ErrorTypeNA ,""),_baffa );};_ecbc =append (_ecbc ,_dccg ([]Result {MakeListResult (_faed ),MakeListResult (_dceg ),MakeListResult (_bgddd )}).ValueList );
};return MakeArrayResult (_ecbc );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_dfgc ,_gdbf :=_efec (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _gdbf .Type ==ResultTypeError {return _gdbf ;};return MakeNumberResult (_aebe (_dfgc ._faec ,_dfgc ._dbba ,_dfgc ._bbce ,_dfgc ._gcgd ));
};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_baed :=args [0].AsNumber ();if _baed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_ebfaa :=float64 (1);if _baed .ValueNumber < 0{_ebfaa =-1;};if len (args )> 1{_gfbda :=args [1].AsNumber ();if _gfbda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ebfaa =_gfbda .ValueNumber ;};_aeea :=float64 (1);if len (args )> 2{_bgaab :=args [2].AsNumber ();if _bgaab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_aeea =_bgaab .ValueNumber ;};if len (args )==1{return MakeNumberResult (_cf .Ceil (_baed .ValueNumber ));};_cagf :=_baed .ValueNumber ;_cagf ,_egdf :=_cf .Modf (_cagf /_ebfaa );if _egdf !=0{if _baed .ValueNumber > 0{_cagf ++;}else if _aeea < 0{_cagf --;
};};return MakeNumberResult (_cagf *_ebfaa );};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ccdg :=args [0].AsNumber ();if _ccdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bgae :=0;if len (args )> 1{_egege :=args [1];if _egege .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_bgae =int (_egege .ValueNumber );if _bgae < 0{_bgae =0;}else if _bgae > 4{_bgae =4;};};_bgaaa :=_cbbc ;switch _bgae {case 1:_bgaaa =_ddgbd ;case 2:_bgaaa =_beaefg ;case 3:_bgaaa =_gbbf ;case 4:_bgaaa =_gaa ;};_bcead :=_cf .Trunc (_ccdg .ValueNumber );
_bcda :=_e .Buffer {};for _ ,_dbbd :=range _bgaaa {for _bcead >=_dbbd ._dafa {_bcda .WriteString (_dbbd ._beag );_bcead -=_dbbd ._dafa ;};};return MakeStringResult (_bcda .String ());};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_gcecg :=_bb .Split (v ,"\u003a");if len (_gcecg )!=2{return nil ;};_aadae ,_ :=_ee .Atoi (_gcecg [0]);_ababf ,_ :=_ee .Atoi (_gcecg [1]);if _aadae > _ababf {_aadae ,_ababf =_ababf ,_aadae ;
};return PrefixHorizontalRange {_bbec :pfx ,_agdd :_aadae ,_gface :_ababf };};

// String returns a string representation of CellRef.
func (_gfb CellRef )String ()string {return _gfb ._cfd };const _acbb =57373;type yyLexer interface{Lex (_beadag *yySymType )int ;Error (_babbe string );};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cdece :=args [0].AsNumber ();_aaagg :=args [1].AsNumber ();if _cdece .Type !=ResultTypeNumber ||_aaagg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _aaagg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_cf .Trunc (_cdece .ValueNumber /_aaagg .ValueNumber ));
};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_fad [][]Expression };

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};_edbd :=args [0].ValueNumber ;if _edbd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");
};_cfba :=float64 (int (args [1].ValueNumber ));if _cfba < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult (_cf .Pow ((1+_edbd /_cfba ),_cfba )-1);};type ivr struct{};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_gcga ,_gadbe :=_dggd ("\u0046\u0049\u004e\u0044",args );if _gadbe .Type !=ResultTypeEmpty {return _gadbe ;};_fagfe :=_bb .ToLower (_gcga ._dggac );if _fagfe ==""{return MakeNumberResult (1.0);};_fdfg :=_bb .ToLower (_gcga ._eaadg );
_ecbcg :=_gcga ._aaabb ;_dddgd :=1;for _bbeg :=range _fdfg {if _dddgd < _ecbcg {_dddgd ++;continue ;};_eadfg :=_ac .Index (_fagfe ,_fdfg [_bbeg :]);if _eadfg ==0{return MakeNumberResult (float64 (_dddgd ));};_dddgd ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};

// Update returns the same object as updating sheet references does not affect Bool.
func (_bfb Bool )Update (q *_d .UpdateQuery )Expression {return _bfb };

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_fgfbf :=args [0];if _fgfbf .Type !=ResultTypeArray &&_fgfbf .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_ebbc :=_badec (_fgfbf );_bcfbf :=args [2];if _bcfbf .Type !=ResultTypeArray &&_bcfbf .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_eacde :=_badec (_bcfbf );_abfg :=_egfb (args [1]);_fecb :=0.0;for _abca ,_eebbg :=range _ebbc {for _aede ,_beda :=range _eebbg {if _cegge (_beda ,_abfg ){_fecb +=_eacde [_abca ][_aede ].ValueNumber ;};};};return MakeNumberResult (_fecb );};func _dfffa (_dbbc []Result ,_befcd bool )Result {var _bfgdab string ;
if _befcd {_bfgdab ="\u004c\u0041\u0052G\u0045";}else {_bfgdab ="\u0053\u004d\u0041L\u004c";};if len (_dbbc )!=2{return MakeErrorResult (_bfgdab +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_aacg :=_dbbc [0];var _affb [][]Result ;switch _aacg .Type {case ResultTypeArray :_affb =_aacg .ValueArray ;case ResultTypeList :_affb =[][]Result {_aacg .ValueList };default:return MakeErrorResult (_bfgdab +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");
};if len (_affb )==0{return MakeErrorResult (_bfgdab +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};if _dbbc [1].Type !=ResultTypeNumber {return MakeErrorResult (_bfgdab +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_bbfa :=_dbbc [1].ValueNumber ;if _bbfa < 1{return MakeErrorResultType (ErrorTypeNum ,_bfgdab +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_gced :=int (_bbfa );if float64 (_gced )!=_bbfa {return MakeErrorResultType (ErrorTypeNum ,_bfgdab +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_cdfc :=[]float64 {};for _ ,_aaff :=range _affb {for _ ,_cbgb :=range _aaff {if _cbgb .Type ==ResultTypeNumber {_cdfc =append (_cdfc ,_cbgb .ValueNumber );};};};if _gced > len (_cdfc ){return MakeErrorResultType (ErrorTypeNum ,_bfgdab +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_affbd :=_cc .MergeSort (_cdfc );if _befcd {return MakeNumberResult (_affbd [len (_affbd )-_gced ]);}else {return MakeNumberResult (_affbd [_gced -1]);};};func _abgag (_acgb string ,_eabea func (_ecdf float64 )float64 )Function {return func (_ccdb []Result )Result {if len (_ccdb )!=1{return MakeErrorResult (_acgb +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_dccb :=_ccdb [0].AsNumber ();switch _dccb .Type {case ResultTypeNumber :_agga :=_eabea (_dccb .ValueNumber );if _cf .IsNaN (_agga ){return MakeErrorResult (_acgb +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _cf .IsInf (_agga ,0){return MakeErrorResult (_acgb +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");
};if _agga ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_acgb +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_agga );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_acgb +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _dccb ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_acgb ,_dccb .Type ));
};};};var _gdab Result =MakeEmptyResult ();

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dfdf :=args [0].AsString ();_egecc :=args [1].AsString ();if _dfdf .Type !=ResultTypeString ||_egecc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};return MakeBoolResult (_dfdf .ValueString ==_egecc .ValueString );};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_cfcg string ,_edg Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_ag string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_aa .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_gcd int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_gcc string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_eag string )string ;

// GetFormat returns if cell is protected.
GetLocked (_dbc string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_eea string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_ggc string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_cgc ,_cgg int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_fcee string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_cbc string ,_eece bool );

// NamedRange returns a named range.
NamedRange (_ced string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_bbf ,_bbdb uint32 );};func _babdf (){_gffe =_gd .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_fcegc =_gd .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_ebdge =_gd .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");
_aege =_gd .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_acgg =_gd .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_bcb =_gd .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecded :=args [0];if _ecded .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_defdf :=len (_ecded .ValueArray );for _ ,_gfag :=range _ecded .ValueArray {if len (_gfag )!=_defdf {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");
};};return MakeNumberResult (_fdcbb (_ecded .ValueArray ));};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_bgfee Result )ListValues ()[]Result {if _bgfee .Type ==ResultTypeArray {_ddgdb :=[]Result {};for _ ,_cfegg :=range _bgfee .ValueArray {for _ ,_abff :=range _cfegg {_ddgdb =append (_ddgdb ,_abff );};};return _ddgdb ;};if _bgfee .Type ==ResultTypeList {return _bgfee .ValueList ;
};return nil ;};var _gbbf =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_fcec ,_ceecc ,_debg :=_gfg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _debg .Type ==ResultTypeError {return _debg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbff :=_ceecc -_fcec ;if _fbff > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_ddgb :=args [2].ValueNumber ;if _ddgb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (100*(1-_ddgb *_fbff /360));};const _ecbfg =57359;

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_gddg ,_bcce :=_cac (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _bcce .Type ==ResultTypeError {return _bcce ;};_beaea :=_gddg ._ddf ;_edadg :=_gddg ._cef ;_ffd :=_gddg ._fgcg ;_dgaf :=_gddg ._cada ;_dac :=_gddg ._fddbf ;
_eacdc :=_gddg ._fecfb ;_eaaa :=_feb (_beaea ,_edadg ,_ffd ,_dgaf ,_dac ,_eacdc );if _eaaa .Type ==ResultTypeError {return _eaaa ;};_fcdc :=_eaaa .ValueNumber /(1.0+_dgaf /_dac );return MakeNumberResult (_fcdc );};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_degfe ,_ddcf :=_efec (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _ddcf .Type ==ResultTypeError {return _ddcf ;};_baf :=_gdc (_degfe ._faec );_efee :=_gdc (_degfe ._dbba );_bgaa :=_degfe ._bbce ;_gegc :=_acfc (_baf ,_efee ,_bgaa );
_ebeb ,_dec ,_dbfc :=_gegc .Date ();return MakeNumberResult (_fcaf (_ebeb ,int (_dec ),_dbfc ));};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ebdg :=args [0].AsNumber ();
_ggad :=args [1].AsNumber ();if _ebdg .Type !=ResultTypeNumber ||_ggad .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};if _ggad .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_cfbdc ,_gaed :=_cf .Modf (_ebdg .ValueNumber /_ggad .ValueNumber );if _gaed < 0{_cfbdc --;
};return MakeNumberResult (_ebdg .ValueNumber -_ggad .ValueNumber *_cfbdc );};func _dea (_dda string )bool {for _ ,_feg :=range _gcg {_ceb :=_feg .FindStringSubmatch (_dda );if len (_ceb )> 1{return true ;};};return false ;};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_caaba :=args [0];_fbdffd :=args [1];if _fbdffd .Type !=ResultTypeArray &&_fbdffd .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_deeg :=_bdbb (_fbdffd );_bbe :=-1;for _gceg ,_becd :=range _deeg {if _fbfa (_caaba ,_becd ,false ,false )==_gcbfc {_bbe =_gceg ;};};if _bbe ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};_agag :=_deeg ;if len (args )==3{_agag =_bdbb (args [2]);};if _bbe < 0||_bbe >=len (_agag ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};return _agag [_bbe ];};

// LastColumn returns empty string for the invalid reference context.
func (_ffcgb *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_ddcea :=args [0].AsNumber ();if _ddcea .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_eeege :=10.0;if len (args )> 1{_bdagd :=args [1].AsNumber ();if _bdagd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");
};_eeege =args [1].ValueNumber ;};if _ddcea .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");
};if _eeege ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");
};return MakeNumberResult (_cf .Log (_ddcea .ValueNumber )/_cf .Log (_eeege ));};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_egfg :=len (args );if _egfg !=5&&_egfg !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bagd ,_gcgb ,_eacbg :=_gfg (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _eacbg .Type ==ResultTypeError {return _eacbg ;};_cgfac ,_eacbg :=_bfae (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");
if _eacbg .Type ==ResultTypeError {return _eacbg ;};if _cgfac >=_bagd {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_edcae :=args [3].ValueNumber ;if _edcae < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_ecbbd :=args [4].ValueNumber ;if _ecbbd <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};_gggf :=0;if _egfg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gggf =int (args [5].ValueNumber );if !_cagb (_gggf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");
};};_fggg ,_eacbg :=_accg (_cgfac ,_gcgb ,_gggf );if _eacbg .Type ==ResultTypeError {return _eacbg ;};_cggfd ,_eacbg :=_accg (_cgfac ,_bagd ,_gggf );if _eacbg .Type ==ResultTypeError {return _eacbg ;};_cfaa ,_eacbg :=_accg (_bagd ,_gcgb ,_gggf );if _eacbg .Type ==ResultTypeError {return _eacbg ;
};_fbffd :=1+_fggg *_edcae ;_fbffd /=_ecbbd /100+_cggfd *_edcae ;_fbffd --;_fbffd /=_cfaa ;return MakeNumberResult (_fbffd );};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ccgaf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afagb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_adec :=args [2].ValueNumber ;if _adec ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult ((_ccgaf -_afagb )/_adec );};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_cefc :=args [0].Ref ;for _cefc .Type ==ReferenceTypeNamedRange {_cefc =ctx .NamedRange (_cefc .Value );};_bfaf :="";switch _cefc .Type {case ReferenceTypeCell :_bfaf =_cefc .Value ;case ReferenceTypeRange :_gecgd :=_bb .Split (_cefc .Value ,"\u003a");
if len (_gecgd )==2{_bfaf =_gecgd [0];};default:return MakeErrorResult (_g .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_cefc .Type ));
};_edde ,_gdaa :=_eg .ParseCellReference (_bfaf );if _gdaa !=nil {return MakeErrorResult (_g .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_gdaa .Error ()));
};_dbgba ,_gfcd ,_cgbb :=_edde .Column ,_edde .RowIdx ,_edde .SheetName ;_gdac :=args [1].AsNumber ();if _gdac .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};_fdabd :=args [2].AsNumber ();if _fdabd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};var _beac ,_cbge Result ;if len (args )==3{_beac =MakeNumberResult (1);_cbge =MakeNumberResult (1);}else {_beac =args [3].AsNumber ();if _beac .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");
};if _beac .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_cbge =args [4].AsNumber ();if _cbge .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");
};if _cbge .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_dagg :=_eg .ColumnToIndex (_dbgba );_baaf :=_gfcd +uint32 (_gdac .ValueNumber );_edgd :=_dagg +uint32 (_fdabd .ValueNumber );_eadd :=_baaf +uint32 (_beac .ValueNumber );_gdba :=_edgd +uint32 (_cbge .ValueNumber );
if _beac .ValueNumber > 0{_eadd --;}else {_eadd ++;_baaf ,_eadd =_eadd ,_baaf ;};if _cbge .ValueNumber > 0{_gdba --;}else {_gdba ++;_edgd ,_gdba =_gdba ,_edgd ;};_defe :=_g .Sprintf ("\u0025\u0073\u0025\u0064",_eg .IndexToColumn (_edgd ),_baaf );_gcde :=_g .Sprintf ("\u0025\u0073\u0025\u0064",_eg .IndexToColumn (_gdba ),_eadd );
if _cgbb ==""{return _cggbdc (ctx ,ev ,_defe ,_gcde );}else {return _cggbdc (ctx .Sheet (_cgbb ),ev ,_defe ,_gcde );};};var _daec []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};
type yyParserImpl struct{_edcc yySymType ;_ccced [_bggc ]yySymType ;_cbfdb int ;};func _eeag (_ecff []Result ,_ffgdb string )(*cumulArgs ,Result ){if len (_ecff )!=6{return nil ,MakeErrorResult (_ffgdb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _ecff [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffgdb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_feca :=_ecff [0].ValueNumber ;
if _feca <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ffgdb +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _ecff [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffgdb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_ggff :=_ecff [1].ValueNumber ;if _ggff <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ffgdb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if _ecff [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffgdb +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gega :=_ecff [2].ValueNumber ;if _gega <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ffgdb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _ecff [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffgdb +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_fedcd :=_ecff [3].ValueNumber ;if _fedcd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ffgdb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _ecff [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffgdb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecge :=_ecff [4].ValueNumber ;if _ecge <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ffgdb +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if _ecge < _fedcd {return nil ,MakeErrorResultType (ErrorTypeNum ,_ffgdb +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");
};if _ecge > _ggff {return nil ,MakeErrorResultType (ErrorTypeNum ,_ffgdb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");
};_gfga :=int (_ecff [5].ValueNumber );if _gfga !=0&&_gfga !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_ffgdb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");
};return &cumulArgs {_feca ,_ggff ,_gega ,_fedcd ,_ecge ,_gfga },_gdab ;};func _accg (_gdabc ,_dddc float64 ,_afg int )(float64 ,Result ){_aacf ,_cggf :=_gdc (_gdabc ),_gdc (_dddc );_eeef :=_aacf .Unix ();_ceed :=_cggf .Unix ();if _eeef ==_ceed {return 0,_gdab ;
};_egba ,_aabc ,_bccb :=_aacf .Date ();_bbgf ,_agc ,_dcd :=_cggf .Date ();_ecgd ,_bffb :=int (_aabc ),int (_agc );var _ccbg ,_dgfd float64 ;switch _afg {case 0:if _bccb ==31{_bccb --;};if _bccb ==30&&_dcd ==31{_dcd --;}else if _cdec :=_fbdf (_egba );_ecgd ==2&&((_cdec &&_bccb ==29)||(!_cdec &&_bccb ==28)){_bccb =30;
if _daab :=_fbdf (_bbgf );_bffb ==2&&((_daab &&_dcd ==29)||(!_daab &&_dcd ==28)){_dcd =30;};};_ccbg =float64 ((_bbgf -_egba )*360+(_bffb -_ecgd )*30+(_dcd -_bccb ));_dgfd =360;case 1:_ccbg =_dddc -_gdabc ;_ecee :=_egba !=_bbgf ;if _ecee &&(_bbgf !=_egba +1||_ecgd < _bffb ||(_ecgd ==_bffb &&_bccb < _dcd )){_fec :=0;
for _fcf :=_egba ;_fcf <=_bbgf ;_fcf ++{_fec +=_eeg (_fcf ,1);};_dgfd =float64 (_fec )/float64 (_bbgf -_egba +1);}else {if !_ecee &&_fbdf (_egba ){_dgfd =366;}else {if _ecee &&((_fbdf (_egba )&&(_ecgd < 2||(_ecgd ==2&&_bccb <=29)))||(_fbdf (_bbgf )&&(_bffb > 2||(_bffb ==2&&_dcd ==29)))){_dgfd =366;
}else {_dgfd =365;};};};case 2:_ccbg =_dddc -_gdabc ;_dgfd =360;case 3:_ccbg =_dddc -_gdabc ;_dgfd =365;case 4:if _bccb ==31{_bccb --;};if _dcd ==31{_dcd --;};_ccbg =float64 ((_bbgf -_egba )*360+(_bffb -_ecgd )*30+(_dcd -_bccb ));_dgfd =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");
};return _ccbg /_dgfd ,_gdab ;};

// Update updates references in the VerticalRange after removing a row/column.
func (_cbcbg VerticalRange )Update (q *_d .UpdateQuery )Expression {if q .UpdateType ==_d .UpdateActionRemoveColumn {_cdgc :=_cbcbg ;if q .UpdateCurrentSheet {_gfeag :=q .ColumnIdx ;_cdgc ._cegfg =_bac (_cbcbg ._cegfg ,_gfeag );_cdgc ._aefbe =_bac (_cbcbg ._aefbe ,_gfeag );
};return _cdgc ;};return _cbcbg ;};func _badec (_abgg Result )[][]Result {switch _abgg .Type {case ResultTypeArray :return _abgg .ValueArray ;case ResultTypeList :return [][]Result {_abgg .ValueList };default:return [][]Result {};};};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dcac :=args [0].AsNumber ();_acgd :=args [1].AsNumber ();if _dcac .Type !=ResultTypeNumber ||_acgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_fddf :=_cf .Trunc (_dcac .ValueNumber );_egcb :=_cf .Trunc (_acgd .ValueNumber );if _fddf < _egcb {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");
};if _fddf ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_fddf +_egcb -1);args [1]=MakeNumberResult (_fddf -1);return Combin (args );};func _dcfb (_ecbde Result )bool {_bcedg :=_ecbde .Type ;return _bcedg !=ResultTypeArray &&_bcedg !=ResultTypeList ;
};

// BinOpType is the binary operation operator type
//
//go:generate stringer -type=BinOpType
type BinOpType byte ;func _bcdaa (_cgaf Result ,_acdec ,_cdbc string )(string ,Result ){switch _cgaf .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _cgaf .Value (),_gdab ;default:return "",MakeErrorResult (_acdec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_cdbc +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");
};};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_ffe ,_ebce :=_cac (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _ebce .Type ==ResultTypeError {return _ebce ;};_aead :=_ffe ._ddf ;_adff :=_ffe ._cef ;_gcbg :=_ffe ._fgcg ;_bgcfe :=_ffe ._cada ;_dgfb :=_ffe ._fddbf ;
_baee :=_ffe ._fecfb ;return _feb (_aead ,_adff ,_gcbg ,_bgcfe ,_dgfb ,_baee );};func _cggg (_ceabg Context ,_dabee ,_dcec string )(string ,string ){_cfcga :=_dabee +"\u0031";_cgebg :=_ceabg .LastRow (_dabee );_ddag :=_dcec +_ee .Itoa (_cgebg );return _cfcga ,_ddag ;
};var _egb =[]*_gd .Regexp {};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_bacf ,_cbag ,_agff :=_egbae (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _agff .Type ==ResultTypeError {return _agff ;};if _cbag < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");
};if _bacf ==0{return MakeNumberResult (0);};_aeef :=_bacf < 0;if _aeef {_bacf =-_bacf ;};_eefg :=args [0].Value ();_afaf :=_bb .Split (_eefg ,"\u002e");_gdbd :=float64 (int (_bacf ));_cdaa :=_afaf [1];_dbgb :=len (_cdaa );_ggfe :=int (_cf .Log10 (_cbag ))+1;
_bgbd :=float64 (_ggfe -_dbgb );_aabea ,_fdcb :=_ee .ParseFloat (_cdaa ,64);if _fdcb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");
};_aabea *=_cf .Pow (10,_bgbd );_gecf :=_gdbd +_aabea /_cbag ;if _aeef {_gecf =-_gecf ;};return MakeNumberResult (_gecf );};

// Eval evaluates and returns the result of an error expression.
func (_dbb Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_dbb ._dbaf )};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_eggb ,_fbdff :=_ddec (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _fbdff .Type ==ResultTypeError {return _fbdff ;};_aebc :=_eggb ._bdcc ;_dgbe :=_eggb ._bgca ;_caddg :=_eggb ._gfea ;_efac :=_eggb ._eff ;
_gde :=_eggb ._fedc ;_dddcb :=_eggb ._eca ;if _dddcb >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");
};_dceb :=_eggb ._cfbf ;_gdae :=1.0/_dddcb ;_gdd :=2.5;if _gdae < 3{_gdd =1;}else if _gdae < 5{_gdd =1.5;}else if _gdae <=6{_gdd =2;};_dddcb *=_gdd ;_aga ,_aecd :=_accg (_dgbe ,_caddg ,_dceb );if _aecd .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");
};_ebbf :=_efgf (_aga *_dddcb *_aebc );_aebc -=_ebbf ;_bce :=_aebc -_efac ;for _deba :=0;_deba < _gde ;_deba ++{_ebbf =_efgf (_dddcb *_aebc );_bce -=_ebbf ;if _bce < 0{switch _gde -_deba {case 0:case 1:return MakeNumberResult (_efgf (_aebc *0.5));default:return MakeNumberResult (0);
};};_aebc -=_ebbf ;};return MakeNumberResult (_ebbf );};func _ecgdf (_cda ,_gcbc _aa .Time ,_ebb int )float64 {if _cda .After (_gcbc ){_cda ,_gcbc =_gcbc ,_cda ;};_bebge :=0;_acdb ,_cgfa ,_efe :=_cda .Date ();_egc ,_ecec ,_dcgce :=_gcbc .Date ();_bdcea ,_dfb :=int (_cgfa ),int (_ecec );
_affa ,_bfab :=_ecfa (_acdb ,_bdcea ,_efe ,_ebb ),_ecfa (_egc ,_dfb ,_dcgce ,_ebb );if !_acce (_ebb ){return _fcaf (_egc ,_dfb ,_bfab )-_fcaf (_acdb ,_bdcea ,_affa );};if _ebb ==0{if (_bdcea ==2||_affa < 30)&&_dcgce ==31{_bfab =31;}else if _dfb ==2&&_bfab ==_bebg (_egc ,_dfb ){_bfab =_bebg (_egc ,2);
};}else {if _bdcea ==2&&_affa ==30{_affa =_bebg (_acdb ,2);};if _dfb ==2&&_bfab ==30{_bfab =_bebg (_egc ,2);};};if _acdb < _egc ||(_acdb ==_egc &&_bdcea < _dfb ){_bebge =30-_affa +1;_efe =1;_affa =1;_efg :=_aa .Date (_acdb ,_aa .Month (_bdcea ),_efe ,0,0,0,0,_aa .UTC ).AddDate (0,1,0);
if _efg .Year ()< _egc {_bebge +=_edad (_efg .Year (),int (_efg .Month ()),12,_ebb );_efg =_efg .AddDate (0,13-int (_efg .Month ()),0);_bebge +=_aegbb (_efg .Year (),_egc -1,_ebb );};_bebge +=_edad (_egc ,int (_efg .Month ()),_dfb -1,_ebb );_efg =_efg .AddDate (0,_dfb -int (_efg .Month ()),0);
_bdcea =_efg .Day ();};_bebge +=_bfab -_affa ;if _bebge > 0{return float64 (_bebge );}else {return 0;};};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_fadd :=len (args );if (_fadd !=2&&_fadd !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gce :=0;if _fadd ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gce =int (args [2].ValueNumber );if !_cagb (_gce ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");
};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_edc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_bae :=args [1].ValueNumber ;_gbf ,_fag :=_accg (_edc ,_bae ,_gce );if _fag .Type ==ResultTypeError {return _fag ;};return MakeNumberResult (_gbf );};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_efdb :=args [0].AsNumber ();if _efdb .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_debc ,_afff :=_cf .Modf (_efdb .ValueNumber );if _afff < 0{_debc --;};return MakeNumberResult (_debc );};func _dgf (){_acde ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_gd .MustCompile ("\u005e"+_gafg +_ebdbb );_acde ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_gd .MustCompile ("\u005e"+_bdg +_ebdbb );
_acde ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_gd .MustCompile ("\u005e"+_fb +_ebdbb );_acde ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_gd .MustCompile ("\u005e"+_cec +_ebdbb );_bfbg ["\u0068\u0068"]=_gd .MustCompile (_fef +_fae +"\u0024");
_bfbg ["\u0068\u0068\u003am\u006d"]=_gd .MustCompile (_fef +_ebdb +"\u0024");_bfbg ["\u006d\u006d\u003as\u0073"]=_gd .MustCompile (_fef +_ada +"\u0024");_bfbg ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_gd .MustCompile (_fef +_bbb +"\u0024");
_egb =[]*_gd .Regexp {_gd .MustCompile ("\u005e"+_gafg +"\u0024"),_gd .MustCompile ("\u005e"+_bdg +"\u0024"),_gd .MustCompile ("\u005e"+_fb +"\u0024"),_gd .MustCompile ("\u005e"+_cec +"\u0024")};_gcg =[]*_gd .Regexp {_gd .MustCompile ("\u005e"+_fae +"\u0024"),_gd .MustCompile ("\u005e"+_ebdb +"\u0024"),_gd .MustCompile ("\u005e"+_ada +"\u0024"),_gd .MustCompile ("\u005e"+_bbb +"\u0024")};
};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_aecc NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_gdgcc :=ctx .NamedRange (_aecc ._dcfc );_bfbeg :=_gdgcc .Value ;if _fgdd ,_cgcaf :=ev .GetFromCache (_bfbeg );_cgcaf {return _fgdd ;};_becbfd :=_bb .Split (_bfbeg ,"\u0021");if len (_becbfd )!=2{return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_bfbeg ));
};_eedf :=ctx .Sheet (_becbfd [0]);_dbaad :=_bb .Split (_becbfd [1],"\u003a");switch len (_dbaad ){case 1:_ceggg :=ev .Eval (_eedf ,_dbaad [0]);ev .SetCache (_bfbeg ,_ceggg );return _ceggg ;case 2:_faeb :=_cggbdc (_eedf ,ev ,_dbaad [0],_dbaad [1]);ev .SetCache (_bfbeg ,_faeb );
return _faeb ;};return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_gdgcc .Type ));};

// GetEpoch returns a null time object for the invalid reference context.
func (_fageg *ivr )GetEpoch ()_aa .Time {return _aa .Time {}};func _acfe (_gabg int )string {if _gabg >=0&&_gabg < len (_adab ){if _adab [_gabg ]!=""{return _adab [_gabg ];};};return _g .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_gabg );
};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dcefg :=args [0].AsNumber ();if _dcefg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eeee :=float64 (1);if _dcefg .ValueNumber < 0{_eeee =-1;};if len (args )> 1{_dadag :=args [1].AsNumber ();if _dadag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eeee =_cf .Abs (_dadag .ValueNumber );};if len (args )==1{return MakeNumberResult (_cf .Ceil (_dcefg .ValueNumber ));};_abdd :=_dcefg .ValueNumber ;_abdd ,_eefd :=_cf .Modf (_abdd /_eeee );if _eefd !=0{if _dcefg .ValueNumber > 0{_abdd ++;};};return MakeNumberResult (_abdd *_eeee );
};func _efaaa (_abec string ,_gefe func (_gaca float64 )float64 )Function {return func (_aaeb []Result )Result {if len (_aaeb )!=1{return MakeErrorResult (_abec +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_cfeb :=_aaeb [0].AsNumber ();switch _cfeb .Type {case ResultTypeNumber :_dbda :=_gefe (_cfeb .ValueNumber );if _cf .IsNaN (_dbda ){return MakeErrorResult (_abec +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _cf .IsInf (_dbda ,0){return MakeErrorResult (_abec +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");
};return MakeNumberResult (_dbda );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_abec +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _cfeb ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_abec ,_cfeb .Type ));
};};};func _efgf (_bdceag float64 )float64 {return float64 (int (_bdceag +0.5))};

// ReferenceType is a type of reference
//
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;const _ecea =-1000;

// Db implements the Excel DB function.
func Db (args []Result )Result {_eegf :=len (args );if _eegf !=4&&_eegf !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ccdc :=args [0].ValueNumber ;if _ccdc < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_efgc :=args [1].ValueNumber ;if _efgc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fdgd :=args [2].ValueNumber ;if _fdgd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gdda :=args [3].ValueNumber ;if _gdda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};if _gdda -_fdgd > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_aeacg :=12.0;if _eegf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aeacg =args [4].ValueNumber ;if _aeacg < 1||_aeacg > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");
};};if _aeacg ==12&&_gdda > _fdgd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _efgc >=_ccdc {return MakeNumberResult (0);
};_gcfd :=1-_cf .Pow (_efgc /_ccdc ,1/_fdgd );_gcfd =float64 (int (_gcfd *1000+0.5))/1000;_eaab :=_ccdc *_gcfd *_aeacg /12;if _gdda ==1{return MakeNumberResult (_eaab );};_aefbf :=_eaab ;_abegc :=0.0;_ceafd :=_fdgd ;if _ceafd > _gdda {_ceafd =_gdda ;};
for _fdba :=2.0;_fdba <=_ceafd ;_fdba ++{_abegc =(_ccdc -_aefbf )*_gcfd ;_aefbf +=_abegc ;};if _gdda > _fdgd {return MakeNumberResult ((_ccdc -_aefbf )*_gcfd *(12-_aeacg )/12);};return MakeNumberResult (_abegc );};type noCache struct{};

// Reference returns an invalid reference for BinaryExpr.
func (_be BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _gcbee =map[string ]Function {};

// Reference returns a string reference value to a range with prefix.
func (_cdgad PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_gaeeae :=_cdgad ._febd .Reference (ctx ,ev );_egfd :=_cdgad ._fbad .Reference (ctx ,ev );_afbb :=_cdgad ._acfceb .Reference (ctx ,ev );if _gaeeae .Type ==ReferenceTypeSheet &&_egfd .Type ==ReferenceTypeCell &&_afbb .Type ==ReferenceTypeCell {return MakeRangeReference (_eaddd (_gaeeae ,_egfd ,_afbb ));
};return ReferenceInvalid ;};

// Update updates references in the Range after removing a row/column.
func (_fbcbb Range )Update (q *_d .UpdateQuery )Expression {_gdbee :=_fbcbb ;if q .UpdateCurrentSheet {_gdbee ._fddg =_fbcbb ._fddg .Update (q );_gdbee ._bfeg =_fbcbb ._bfeg .Update (q );};return _gdbee ;};

// GetFilename returns an empty string for the invalid reference context.
func (_dcgd *ivr )GetFilename ()string {return ""};var _gafa =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};
var _adab =[...]string {};var _cbbc =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func _dcc (_dfbb ,_egac float64 )bool {return _cf .Abs (_dfbb -_egac )< 1.0e-6};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_egbcd string };func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );
RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );
RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );
RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};func _ccaee (_gaae ,_bdebe Reference )string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_gaae .Value ,_bdebe .Value );
};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_ffaeb :=MakeNumberResult (0);for _ ,_fdde :=range args {_fdde =_fdde .AsNumber ();switch _fdde .Type {case ResultTypeNumber :_ffaeb .ValueNumber +=_fdde .ValueNumber *_fdde .ValueNumber ;case ResultTypeList ,ResultTypeArray :_edaf :=SumSquares (_fdde .ListValues ());
if _edaf .Type !=ResultTypeNumber {return _edaf ;};_ffaeb .ValueNumber +=_edaf .ValueNumber ;case ResultTypeString :case ResultTypeError :return _fdde ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_fdde .Type ));
};};return _ffaeb ;};func (_dafb *noCache )GetFromCache (key string )(Result ,bool ){return _gdab ,false };

// Reference returns an invalid reference for FunctionCall.
func (_gfac FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _bd =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};const _ggfb =57349;

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_gee EmptyExpr )Update (q *_d .UpdateQuery )Expression {return _gee };

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_eebg .Float64 ());
};func _geebb (_fcfee []Result ,_cecfb countMode )float64 {_efggd :=0.0;for _ ,_cdcb :=range _fcfee {switch _cdcb .Type {case ResultTypeNumber :if _cecfb ==_dfc ||(_cecfb ==_deef &&!_cdcb .IsBoolean ){_efggd ++;};case ResultTypeList ,ResultTypeArray :_efggd +=_geebb (_cdcb .ListValues (),_cecfb );
case ResultTypeString :if _cecfb ==_dfc {_efggd ++;};case ResultTypeEmpty :if _cecfb ==_aaebg {_efggd ++;};};};return _efggd ;};var _geab =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };
type plex struct{_daed chan *node ;_caabb Expression ;_aagg string ;};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ddcfe :=false ;for _ ,_cbbd :=range args {switch _cbbd .Type {case ResultTypeList ,ResultTypeArray :_ebebd :=Or (_cbbd .ListValues ());if _ebebd .Type ==ResultTypeError {return _ebebd ;};if _ebebd .ValueNumber !=0{_ddcfe =true ;};case ResultTypeNumber :if _cbbd .ValueNumber !=0{_ddcfe =true ;
};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _cbbd ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");
};};return MakeBoolResult (_ddcfe );};

// Reference returns a string reference value to a sheet.
func (_bgfb SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_bgfb ._egbcd };};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};const _fcgda =2;


// Pv implements the Excel PV function.
func Pv (args []Result )Result {_egae :=len (args );if _egae < 3||_egae > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_edba :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_ggfc :=args [1].ValueNumber ;if _ggfc !=float64 (int (_ggfc )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ffdb :=args [2].ValueNumber ;_eebd :=0.0;if _egae >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eebd =args [3].ValueNumber ;};_fcbad :=0.0;if _egae ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fcbad =args [4].ValueNumber ;if _fcbad !=0{_fcbad =1;};};if _edba ==0{return MakeNumberResult (-_ffdb *_ggfc -_eebd );}else {return MakeNumberResult ((((1-_cf .Pow (1+_edba ,_ggfc ))/_edba )*_ffdb *(1+_edba *_fcbad )-_eebd )/_cf .Pow (1+_edba ,_ggfc ));
};};const _cbccfd =57344;

// Eval evaluates and returns a string.
func (_abag String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_abag ._efcb )};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};type parsedReplaceObject struct{_dfgcb string ;_acgga int ;_befa int ;_cccef string ;};var _cacbf =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};
func init (){_aabca ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );
RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );
RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );
RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};var _fgg =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};


// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_bcgd ,_agbd :=_dggd ("\u0046\u0049\u004e\u0044",args );if _agbd .Type !=ResultTypeEmpty {return _agbd ;};_aegad :=_bb .ToLower (_bcgd ._dggac );
_gdaec :=_bb .ToLower (_bcgd ._eaadg );if _aegad ==""{return MakeNumberResult (1.0);};_efaaf :=_bcgd ._aaabb -1;_abbab :=1;_fdbab :=0;for _dadc :=range _gdaec {if _dadc !=0{_dagab :=1;if _dadc -_fdbab > 1{_dagab =2;};_abbab +=_dagab ;};if _abbab > _efaaf {_cgeg :=_ac .Index (_aegad ,_gdaec [_dadc :]);
if _cgeg ==0{return MakeNumberResult (float64 (_abbab ));};};_fdbab =_dadc ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func _gfg (_cbcc ,_ebde Result ,_bdgd string )(float64 ,float64 ,Result ){_ebfe ,_bbcd :=_bfae (_cbcc ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_bdgd );
if _bbcd .Type ==ResultTypeError {return 0,0,_bbcd ;};_ecfb ,_bbcd :=_bfae (_ebde ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_bdgd );if _bbcd .Type ==ResultTypeError {return 0,0,_bbcd ;};if _ebfe >=_ecfb {return 0,0,MakeErrorResultType (ErrorTypeNum ,_bdgd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};return _ebfe ,_ecfb ,_gdab ;};type couponArgs struct{_faec float64 ;_dbba float64 ;_bbce int ;_gcgd int ;};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_gcea :=len (args );if _gcea !=3&&_gcea !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_edcf ,_ggcge :=_bcdaa (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _ggcge .Type ==ResultTypeError {return _ggcge ;};_aaed ,_ggcge :=_bcdaa (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");
if _ggcge .Type ==ResultTypeError {return _ggcge ;};_fdbe ,_ggcge :=_bcdaa (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _ggcge .Type ==ResultTypeError {return _ggcge ;};
_adecc :=0;if _gcea ==3{return MakeStringResult (_bb .Replace (_edcf ,_aaed ,_fdbe ,-1));}else {_bcfcg ,_gfeae :=_ebdae (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");
if _gfeae .Type ==ResultTypeError {return _gfeae ;};_adecc =int (_bcfcg );if _adecc < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");
};_fgdf :=_edcf ;_efgdg :=_adecc ;_feba :=-1;_dbfba :=len (_aaed );_cbccd :=0;for {_efgdg --;_cbad :=_bb .Index (_fgdf ,_aaed );if _cbad ==-1{_feba =-1;break ;}else {_feba =_cbad +_cbccd ;if _efgdg ==0{break ;};_daabb :=_dbfba +_cbad ;_cbccd +=_daabb ;
_fgdf =_fgdf [_daabb :];};};if _feba ==-1{return MakeStringResult (_edcf );}else {_cfcde :=_edcf [:_feba ];_eeba :=_edcf [_feba +_dbfba :];return MakeStringResult (_cfcde +_fdbe +_eeba );};};};func (_egbgg VerticalRange )verticalRangeReference ()string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_egbgg ._cegfg ,_egbgg ._aefbe );
};func (_abab *yyParserImpl )Parse (yylex yyLexer )int {_agcag :=_aa .Now ();var _gbedb int ;var _agaf yySymType ;var _cfdab []yySymType ;_ =_cfdab ;_ggfcg :=_abab ._ccced [:];Nerrs :=0;Errflag :=0;_bfcff :=0;_abab ._cbfdb =-1;_cfbb :=-1;defer func (){_bfcff =-1;
_abab ._cbfdb =-1;_cfbb =-1}();_dgce :=-1;goto _efcga ;_afeec :return 0;_gddcc :return 1;_efcga :if _dfege (_agcag ){_fg .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _gddcc ;};if _aaded >=4{_g .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_agegd (_cfbb ),_acfe (_bfcff ));
};_dgce ++;if _dgce >=len (_ggfcg ){_gfacf :=make ([]yySymType ,len (_ggfcg )*2);copy (_gfacf ,_ggfcg );_ggfcg =_gfacf ;};_ggfcg [_dgce ]=_agaf ;_ggfcg [_dgce ]._dgdf =_bfcff ;_afbe :if _dfege (_agcag ){_fg .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");
goto _gddcc ;};_gbedb =_dfdg [_bfcff ];if _gbedb <=_ecea {goto _fdaf ;};if _abab ._cbfdb < 0{_abab ._cbfdb ,_cfbb =_bcbe (yylex ,&_abab ._edcc );};_gbedb +=_cfbb ;if _gbedb < 0||_gbedb >=_dcdbf {goto _fdaf ;};_gbedb =_gafa [_gbedb ];if _cacbf [_gbedb ]==_cfbb {_abab ._cbfdb =-1;
_cfbb =-1;_agaf =_abab ._edcc ;_bfcff =_gbedb ;if Errflag > 0{Errflag --;};goto _efcga ;};_fdaf :if _dfege (_agcag ){_fg .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _gddcc ;};_gbedb =_fcbac [_bfcff ];
if _gbedb ==-2{if _abab ._cbfdb < 0{_abab ._cbfdb ,_cfbb =_bcbe (yylex ,&_abab ._edcc );};_gbedg :=0;for {if _dddb [_gbedg +0]==-1&&_dddb [_gbedg +1]==_bfcff {break ;};_gbedg +=2;};for _gbedg +=2;;_gbedg +=2{_gbedb =_dddb [_gbedg +0];if _gbedb < 0||_gbedb ==_cfbb {break ;
};};_gbedb =_dddb [_gbedg +1];if _gbedb < 0{goto _afeec ;};};if _gbedb ==0{switch Errflag {case 0:yylex .Error (_gbgbg (_bfcff ,_cfbb ));Nerrs ++;if _aaded >=1{_g .Printf ("\u0025\u0073",_acfe (_bfcff ));_g .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_agegd (_cfbb ));
};fallthrough;case 1,2:Errflag =3;for _dgce >=0{_gbedb =_dfdg [_ggfcg [_dgce ]._dgdf ]+_fcgda ;if _gbedb >=0&&_gbedb < _dcdbf {_bfcff =_gafa [_gbedb ];if _cacbf [_bfcff ]==_fcgda {goto _efcga ;};};if _aaded >=2{_g .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_ggfcg [_dgce ]._dgdf );
};_dgce --;};goto _gddcc ;case 3:if _aaded >=2{_g .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_agegd (_cfbb ));};if _cfbb ==_cdgg {goto _gddcc ;};_abab ._cbfdb =-1;
_cfbb =-1;goto _afbe ;};};if _aaded >=2{_g .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_gbedb ,_acfe (_bfcff ));};_abedec :=_gbedb ;_bbeeb :=_dgce ;_ =_bbeeb ;_dgce -=_daaf [_gbedb ];if _dgce +1>=len (_ggfcg ){_fcgde :=make ([]yySymType ,len (_ggfcg )*2);
copy (_fcgde ,_ggfcg );_ggfcg =_fcgde ;};_agaf =_ggfcg [_dgce +1];_gbedb =_adfe [_gbedb ];_gdfb :=_aaeag [_gbedb ];_aabcd :=_gdfb +_ggfcg [_dgce ]._dgdf +1;if _aabcd >=_dcdbf {_bfcff =_gafa [_gdfb ];}else {_bfcff =_gafa [_aabcd ];if _cacbf [_bfcff ]!=-_gbedb {_bfcff =_gafa [_gdfb ];
};};switch _abedec {case 1:_cfdab =_ggfcg [_bbeeb -1:_bbeeb +1];{yylex .(*plex )._caabb =_agaf ._fecbcg ;};case 3:_cfdab =_ggfcg [_bbeeb -2:_bbeeb +1];{_agaf ._fecbcg =_cfdab [2]._fecbcg ;};case 4:_cfdab =_ggfcg [_bbeeb -4:_bbeeb +1];{};case 5:_cfdab =_ggfcg [_bbeeb -1:_bbeeb +1];
{_agaf ._fecbcg =NewBool (_cfdab [1]._aadf ._faccf );};case 6:_cfdab =_ggfcg [_bbeeb -1:_bbeeb +1];{_agaf ._fecbcg =NewNumber (_cfdab [1]._aadf ._faccf );};case 7:_cfdab =_ggfcg [_bbeeb -1:_bbeeb +1];{_agaf ._fecbcg =NewString (_cfdab [1]._aadf ._faccf );
};case 8:_cfdab =_ggfcg [_bbeeb -1:_bbeeb +1];{_agaf ._fecbcg =NewError (_cfdab [1]._aadf ._faccf );};case 9:_cfdab =_ggfcg [_bbeeb -2:_bbeeb +1];{_agaf ._fecbcg =_cfdab [2]._fecbcg ;};case 10:_cfdab =_ggfcg [_bbeeb -2:_bbeeb +1];{_agaf ._fecbcg =NewNegate (_cfdab [2]._fecbcg );
};case 15:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =_cfdab [2]._fecbcg ;};case 17:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =NewConstArrayExpr (_cfdab [2]._acecf );};case 18:_cfdab =_ggfcg [_bbeeb -1:_bbeeb +1];{_agaf ._acecf =append (_agaf ._acecf ,_cfdab [1]._gfcc );
};case 19:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._acecf =append (_cfdab [1]._acecf ,_cfdab [3]._gfcc );};case 20:_cfdab =_ggfcg [_bbeeb -1:_bbeeb +1];{_agaf ._gfcc =append (_agaf ._gfcc ,_cfdab [1]._fecbcg );};case 21:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];
{_agaf ._gfcc =append (_cfdab [1]._gfcc ,_cfdab [3]._fecbcg );};case 23:_cfdab =_ggfcg [_bbeeb -2:_bbeeb +1];{_agaf ._fecbcg =NewPrefixExpr (_cfdab [1]._fecbcg ,_cfdab [2]._fecbcg );};case 25:_cfdab =_ggfcg [_bbeeb -1:_bbeeb +1];{_agaf ._fecbcg =NewSheetPrefixExpr (_cfdab [1]._aadf ._faccf );
};case 26:_cfdab =_ggfcg [_bbeeb -1:_bbeeb +1];{_agaf ._fecbcg =NewCellRef (_cfdab [1]._aadf ._faccf );};case 27:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =NewRange (_cfdab [1]._fecbcg ,_cfdab [3]._fecbcg );};case 28:_cfdab =_ggfcg [_bbeeb -4:_bbeeb +1];
{_agaf ._fecbcg =NewPrefixRangeExpr (_cfdab [1]._fecbcg ,_cfdab [2]._fecbcg ,_cfdab [4]._fecbcg );};case 29:_cfdab =_ggfcg [_bbeeb -1:_bbeeb +1];{_agaf ._fecbcg =NewNamedRangeRef (_cfdab [1]._aadf ._faccf );};case 30:_cfdab =_ggfcg [_bbeeb -1:_bbeeb +1];
{_agaf ._fecbcg =NewHorizontalRange (_cfdab [1]._aadf ._faccf );};case 31:_cfdab =_ggfcg [_bbeeb -1:_bbeeb +1];{_agaf ._fecbcg =NewVerticalRange (_cfdab [1]._aadf ._faccf );};case 32:_cfdab =_ggfcg [_bbeeb -2:_bbeeb +1];{_agaf ._fecbcg =NewPrefixHorizontalRange (_cfdab [1]._fecbcg ,_cfdab [2]._aadf ._faccf );
};case 33:_cfdab =_ggfcg [_bbeeb -2:_bbeeb +1];{_agaf ._fecbcg =NewPrefixVerticalRange (_cfdab [1]._fecbcg ,_cfdab [2]._aadf ._faccf );};case 34:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =NewBinaryExpr (_cfdab [1]._fecbcg ,BinOpTypePlus ,_cfdab [3]._fecbcg );
};case 35:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =NewBinaryExpr (_cfdab [1]._fecbcg ,BinOpTypeMinus ,_cfdab [3]._fecbcg );};case 36:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =NewBinaryExpr (_cfdab [1]._fecbcg ,BinOpTypeMult ,_cfdab [3]._fecbcg );
};case 37:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =NewBinaryExpr (_cfdab [1]._fecbcg ,BinOpTypeDiv ,_cfdab [3]._fecbcg );};case 38:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =NewBinaryExpr (_cfdab [1]._fecbcg ,BinOpTypeExp ,_cfdab [3]._fecbcg );
};case 39:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =NewBinaryExpr (_cfdab [1]._fecbcg ,BinOpTypeLT ,_cfdab [3]._fecbcg );};case 40:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =NewBinaryExpr (_cfdab [1]._fecbcg ,BinOpTypeGT ,_cfdab [3]._fecbcg );
};case 41:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =NewBinaryExpr (_cfdab [1]._fecbcg ,BinOpTypeLEQ ,_cfdab [3]._fecbcg );};case 42:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =NewBinaryExpr (_cfdab [1]._fecbcg ,BinOpTypeGEQ ,_cfdab [3]._fecbcg );
};case 43:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =NewBinaryExpr (_cfdab [1]._fecbcg ,BinOpTypeEQ ,_cfdab [3]._fecbcg );};case 44:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =NewBinaryExpr (_cfdab [1]._fecbcg ,BinOpTypeNE ,_cfdab [3]._fecbcg );
};case 45:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._fecbcg =NewBinaryExpr (_cfdab [1]._fecbcg ,BinOpTypeConcat ,_cfdab [3]._fecbcg );};case 47:_cfdab =_ggfcg [_bbeeb -2:_bbeeb +1];{_agaf ._fecbcg =NewFunction (_cfdab [1]._aadf ._faccf ,nil );};case 48:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];
{_agaf ._fecbcg =NewFunction (_cfdab [1]._aadf ._faccf ,_cfdab [2]._gfcc );};case 49:_cfdab =_ggfcg [_bbeeb -1:_bbeeb +1];{_agaf ._gfcc =append (_agaf ._gfcc ,_cfdab [1]._fecbcg );};case 50:_cfdab =_ggfcg [_bbeeb -3:_bbeeb +1];{_agaf ._gfcc =append (_cfdab [1]._gfcc ,_cfdab [3]._fecbcg );
};case 53:_cfdab =_ggfcg [_bbeeb -0:_bbeeb +1];{_agaf ._fecbcg =NewEmptyExpr ();};};goto _efcga ;};const _ada ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// Value returns a string version of the result.
func (_eaba Result )Value ()string {switch _eaba .Type {case ResultTypeNumber :_cegf :=_ee .FormatFloat (_eaba .ValueNumber ,'f',-1,64);if len (_cegf )> 12{_addc :=12;for _eedbc :=_addc ;_eedbc > 0&&_cegf [_eedbc ]=='0';_eedbc --{_addc --;};_cegf =_cegf [0:_addc +1];
};return _cegf ;case ResultTypeError :return _eaba .ValueString ;case ResultTypeString :return _eaba .ValueString ;case ResultTypeList :if len (_eaba .ValueList )==0{return "";};return _eaba .ValueList [0].Value ();case ResultTypeArray :if len (_eaba .ValueArray )==0||len (_eaba .ValueArray [0])==0{return "";
};return _eaba .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cgb :=args [1].ValueNumber ;
_dcf :=args [0];var _adag float64 ;switch _dcf .Type {case ResultTypeEmpty :_adag =0;case ResultTypeNumber :_adag =_dcf .ValueNumber ;case ResultTypeString :_egd :=DateValue ([]Result {args [0]});if _egd .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};_adag =_egd .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_caaf :=_gdc (_adag );
_ccg :=_caaf .AddDate (0,int (_cgb +1),0);_bbcf ,_fddb ,_ :=_ccg .Date ();_edgb :=_fcaf (_bbcf ,int (_fddb ),0);if _edgb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};if _bbcf ==1900&&_fddb ==3{_edgb --;};return MakeNumberResult (_edgb );};func _fecbc (_cefca []Result ,_bcfc bool )Result {_gdbcb :="\u004d\u0041\u0058";if _bcfc {_gdbcb ="\u004d\u0041\u0058\u0041";};if len (_cefca )==0{return MakeErrorResult (_gdbcb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gabac :=-_cf .MaxFloat64 ;for _ ,_fgda :=range _cefca {switch _fgda .Type {case ResultTypeNumber :if (_bcfc ||!_fgda .IsBoolean )&&_fgda .ValueNumber > _gabac {_gabac =_fgda .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_fcbaa :=_fecbc (_fgda .ListValues (),_bcfc );
if _fcbaa .ValueNumber > _gabac {_gabac =_fcbaa .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_dcea :=0.0;if _bcfc {_dcea =_fgda .AsNumber ().ValueNumber ;};if _dcea > _gabac {_gabac =_dcea ;};default:_fg .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_gdbcb +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fgda .Type );
};};if _gabac ==-_cf .MaxFloat64 {_gabac =0;};return MakeNumberResult (_gabac );};func _fbfa (_ddfeb ,_accf Result ,_eccd ,_dgfdf bool )cmpResult {_ddfeb =_ddfeb .AsNumber ();_accf =_accf .AsNumber ();if _ddfeb .Type !=_accf .Type {return _dcca ;};if _ddfeb .Type ==ResultTypeNumber {if _ddfeb .ValueNumber ==_accf .ValueNumber {return _gcbfc ;
};if _ddfeb .ValueNumber < _accf .ValueNumber {return _fdebc ;};return _fba ;};if _ddfeb .Type ==ResultTypeString {_dage :=_ddfeb .ValueString ;_gcbcd :=_accf .ValueString ;if !_eccd {_dage =_bb .ToLower (_dage );_gcbcd =_bb .ToLower (_gcbcd );};if _dgfdf {_dada :=_ac .Match (_gcbcd ,_dage );
if _dada {return _gcbfc ;}else {return _fba ;};};return cmpResult (_bb .Compare (_dage ,_gcbcd ));};if _ddfeb .Type ==ResultTypeEmpty {return _gcbfc ;};if _ddfeb .Type ==ResultTypeList {if len (_ddfeb .ValueList )< len (_accf .ValueList ){return _fdebc ;
};if len (_ddfeb .ValueList )> len (_accf .ValueList ){return _fba ;};for _gbcc :=range _ddfeb .ValueList {_dgca :=_fbfa (_ddfeb .ValueList [_gbcc ],_accf .ValueList [_gbcc ],_eccd ,_dgfdf );if _dgca !=_gcbfc {return _dgca ;};};return _gcbfc ;};if _ddfeb .Type ==ResultTypeList {if len (_ddfeb .ValueArray )< len (_accf .ValueArray ){return _fdebc ;
};if len (_ddfeb .ValueArray )> len (_accf .ValueArray ){return _fba ;};for _ddaa :=range _ddfeb .ValueArray {_babd :=_ddfeb .ValueArray [_ddaa ];_bbgga :=_ddfeb .ValueArray [_ddaa ];if len (_babd )< len (_bbgga ){return _fdebc ;};if len (_babd )> len (_bbgga ){return _fba ;
};for _gbcef :=range _babd {_agggf :=_fbfa (_babd [_gbcef ],_bbgga [_gbcef ],_eccd ,_dgfdf );if _agggf !=_gcbfc {return _agggf ;};};};return _gcbfc ;};return _dcca ;};

// Eval evaluates a vertical range returning a list of results or an error.
func (_bdad VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_cgab :=_bdad .verticalRangeReference ();if _ebdbc ,_bdcce :=ev .GetFromCache (_cgab );_bdcce {return _ebdbc ;};_afddd ,_bfffg :=_cggg (ctx ,_bdad ._cegfg ,_bdad ._aefbe );_dcfd :=_cggbdc (ctx ,ev ,_afddd ,_bfffg );
ev .SetCache (_cgab ,_dcfd );return _dcfd ;};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_geag :=args [0].AsNumber ();if _geag .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};if _geag .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};return MakeNumberResult (_fdca (_geag .ValueNumber ));};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_gcef ,_dcag :=_efdfd (args ,true );if _dcag ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_gcef /_dcag );};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_cabee :=MakeNumberResult (0);for _ ,_ecacf :=range args {_ecacf =_ecacf .AsNumber ();switch _ecacf .Type {case ResultTypeNumber :_cabee .ValueNumber +=_ecacf .ValueNumber ;case ResultTypeList ,ResultTypeArray :_acgbc :=Sum (_ecacf .ListValues ());
if _acgbc .Type !=ResultTypeNumber {return _acgbc ;};_cabee .ValueNumber +=_acgbc .ValueNumber ;case ResultTypeString :case ResultTypeError :return _ecacf ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ecacf .Type ));
};};return _cabee ;};

// SetLocked does nothing for the invalid reference context.
func (_bdbe *ivr )SetLocked (cellRef string ,locked bool ){};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_cfd :v }};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_bfcb ,_dgaa ,_bdbc :=_faegc (from ,to );if _bdbc !=nil {_fg .Log .Debug (_bdbc .Error ());return NewError (_bdbc .Error ());};return PrefixRangeExpr {_febd :pfx ,_fbad :_bfcb ,_acfceb :_dgaa };
};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_gdede :=args [0].AsNumber ();if _gdede .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_effa :=float64 (1);if _gdede .ValueNumber < 0{_effa =-1;};if len (args )> 1{_dfda :=args [1].AsNumber ();if _dfda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");
};_effa =_cf .Abs (_dfda .ValueNumber );};if len (args )==1{return MakeNumberResult (_cf .Floor (_gdede .ValueNumber ));};_gbga :=_gdede .ValueNumber ;_gbga ,_bfff :=_cf .Modf (_gbga /_effa );if _bfff !=0{if _gdede .ValueNumber < 0{_gbga --;};};return MakeNumberResult (_gbga *_effa );
};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );
RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );
RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};var _bfbg =map[string ]*_gd .Regexp {};

// Reference returns a string reference value to a vertical range with prefix.
func (_fdgga PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_ebfga :=_fdgga ._fbce .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_fdgga .verticalRangeReference (_ebfga .Value )};};func _ddd (_edd int )int {if _edd < 1900{if _edd < 30{_edd +=2000;
}else {_edd +=1900;};};return _edd ;};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_fegg :=_aafc (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _fegg .Type !=ResultTypeEmpty {return _fegg ;};_cafg :=_dbed (args [1:]);_bbcb :=-_cf .MaxFloat64 ;_dbfb :=_badec (args [0]);for _ ,_ebfc :=range _cafg {_bfeaa :=_dbfb [_ebfc ._ccbc ][_ebfc ._ceadc ].ValueNumber ;
if _bbcb < _bfeaa {_bbcb =_bfeaa ;};};if _bbcb ==-_cf .MaxFloat64 {_bbcb =0;};return MakeNumberResult (float64 (_bbcb ));};type yySymType struct{_dgdf int ;_aadf *node ;_fecbcg Expression ;_gfcc []Expression ;_acecf [][]Expression ;};

// Error is an error expression.
type Error struct{_dbaf string };

// LastRow returns 0 for the invalid reference context.
func (_gffgc *ivr )LastRow (colFrom string )int {return 0};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_ffab :=[]string {};for _ededa :=range _gcbee {_ffab =append (_ffab ,_ededa );};for _becc :=range _egbeeg {_ffab =append (_ffab ,_becc );};_b .Strings (_ffab );return _ffab ;};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");
};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_dcaa :=args [0];if _dcaa .Type ==ResultTypeError ||_dcaa .Type ==ResultTypeString {return _dcaa ;};return _gdab ;};func _ceag (_gcge string ,_badge _aa .Time )(_aa .Time ,error ){_cgee ,_ ,_ddde :=_fcb .ParseFloat (_gcge ,10,128,_fcb .ToNearestEven );
if _ddde !=nil {return _aa .Time {},_ddde ;};_gbcaf :=new (_fcb .Float );_gbcaf .SetUint64 (uint64 (24*_aa .Hour ));_cgee .Mul (_cgee ,_gbcaf );_bbbg ,_ :=_cgee .Uint64 ();_eega :=_badge .Add (_aa .Duration (_bbbg ));return _daca (_eega ),nil ;};var _gffe ,_fcegc ,_aege ,_ebdge ,_bcb ,_acgg *_gd .Regexp ;


// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gded :=args [0].Ref ;if _gded .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");
};_dcggd ,_ecga :=_eg .ParseCellReference (_gded .Value );if _ecga !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gded .Value );};return MakeNumberResult (float64 (_dcggd .RowIdx ));
};func _ce (_eged BinOpType ,_cde []Result ,_cdb Result )Result {_fd :=[]Result {};switch _cdb .Type {case ResultTypeNumber :_efa :=_cdb .ValueNumber ;for _cfc :=range _cde {_cag :=_cde [_cfc ].AsNumber ();if _cag .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _eged {case BinOpTypePlus :_fd =append (_fd ,MakeNumberResult (_cag .ValueNumber +_efa ));case BinOpTypeMinus :_fd =append (_fd ,MakeNumberResult (_cag .ValueNumber -_efa ));case BinOpTypeMult :_fd =append (_fd ,MakeNumberResult (_cag .ValueNumber *_efa ));
case BinOpTypeDiv :if _efa ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fd =append (_fd ,MakeNumberResult (_cag .ValueNumber /_efa ));case BinOpTypeExp :_fd =append (_fd ,MakeNumberResult (_cf .Pow (_cag .ValueNumber ,_efa )));case BinOpTypeLT :_fd =append (_fd ,MakeBoolResult (_cag .ValueNumber < _efa ));
case BinOpTypeGT :_fd =append (_fd ,MakeBoolResult (_cag .ValueNumber > _efa ));case BinOpTypeEQ :_fd =append (_fd ,MakeBoolResult (_cag .ValueNumber ==_efa ));case BinOpTypeLEQ :_fd =append (_fd ,MakeBoolResult (_cag .ValueNumber <=_efa ));case BinOpTypeGEQ :_fd =append (_fd ,MakeBoolResult (_cag .ValueNumber >=_efa ));
case BinOpTypeNE :_fd =append (_fd ,MakeBoolResult (_cag .ValueNumber !=_efa ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_eged ));
};};case ResultTypeString :_gbb :=_cdb .ValueString ;for _gf :=range _cde {_cfa :=_cde [_gf ].AsString ();if _cfa .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _eged {case BinOpTypeLT :_fd =append (_fd ,MakeBoolResult (_cfa .ValueString < _gbb ));case BinOpTypeGT :_fd =append (_fd ,MakeBoolResult (_cfa .ValueString > _gbb ));case BinOpTypeEQ :_fd =append (_fd ,MakeBoolResult (_cfa .ValueString ==_gbb ));
case BinOpTypeLEQ :_fd =append (_fd ,MakeBoolResult (_cfa .ValueString <=_gbb ));case BinOpTypeGEQ :_fd =append (_fd ,MakeBoolResult (_cfa .ValueString >=_gbb ));case BinOpTypeNE :_fd =append (_fd ,MakeBoolResult (_cfa .ValueString !=_gbb ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_eged ));
};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");
};return MakeListResult (_fd );};

// Update updates references in the BinaryExpr after removing a row/column.
func (_eed BinaryExpr )Update (q *_d .UpdateQuery )Expression {_da :=_eed ;_da ._ccb =_eed ._ccb .Update (q );_da ._bbg =_eed ._bbg .Update (q );return _da ;};func init (){_eebg =_bf .New (_bf .NewSource (_aa .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_efaaa ("\u0041\u0053\u0049\u004e",_cf .Abs ));
RegisterFunction ("\u0041\u0043\u004f\u0053",_efaaa ("\u0041\u0053\u0049\u004e",_cf .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_efaaa ("\u0041\u0053\u0049\u004e",_cf .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_efaaa ("\u0041\u0043\u004f\u0054",func (_eecaa float64 )float64 {return _cf .Pi /2-_cf .Atan (_eecaa )}));
RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_efaaa ("\u0041\u0043\u004fT\u0048",func (_gebda float64 )float64 {return _cf .Atanh (1/_gebda )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );
RegisterFunction ("\u0041\u0053\u0049\u004e",_efaaa ("\u0041\u0053\u0049\u004e",_cf .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_efaaa ("\u0041\u0053\u0049N\u0048",_cf .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_efaaa ("\u0041\u0054\u0041\u004e",_cf .Atan ));
RegisterFunction ("\u0041\u0054\u0041N\u0048",_efaaa ("\u0041\u0054\u0041N\u0048",_cf .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );
RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );
RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_efaaa ("\u0043\u004f\u0053",_cf .Cos ));
RegisterFunction ("\u0043\u004f\u0053\u0048",_efaaa ("\u0043\u004f\u0053\u0048",_cf .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_abgag ("\u0043\u004f\u0054",_cf .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_abgag ("\u0043\u004f\u0054\u0048",_cf .Tanh ));
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_abgag ("\u0043\u0053\u0043",_cf .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_abgag ("\u0043\u0053\u0043",_cf .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );
RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_efaaa ("\u0045\u0058\u0050",_cf .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );
RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );
RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );
RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_efaaa ("\u004c\u004e",_cf .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_efaaa ("\u004c\u004f\u00471\u0030",_cf .Log10 ));
RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );
RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );
RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );
RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_abgag ("\u0053\u0045\u0043",_cf .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_abgag ("\u0053\u0045\u0043\u0048",_cf .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );
RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_efaaa ("\u0053\u0049\u004e",_cf .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_efaaa ("\u0053\u0049\u004e\u0048",_cf .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_efaaa ("\u0053\u0051\u0052\u0054",_cf .Sqrt ));
RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_efaaa ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_adfb float64 )float64 {return _cf .Sqrt (_adfb *_cf .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );
RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_efaaa ("\u0054\u0041\u004e",_cf .Tan ));
RegisterFunction ("\u0054\u0041\u004e\u0048",_efaaa ("\u0054\u0041\u004e\u0048",_cf .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eagcg :=args [0].AsString ();if _eagcg .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeStringResult (_bb .ToUpper (_eagcg .ValueString ));};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_cf .Pi );};func _dccg (_ecgb []Result )Result {_gbcd :=_ecgb [0].ValueList ;
_bfaeg :=len (_gbcd );switch len (_ecgb ){case 1:_ecfbe :=[]Result {};for _ ,_cdfe :=range _gbcd {_ecfbe =append (_ecfbe ,MakeBoolResult (_cdfe .ValueNumber !=0));};return MakeListResult (_ecfbe );case 2:_gbceg :=_ecgb [1];switch _gbceg .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_ecca :=[]Result {};
for _ ,_gdafa :=range _gbcd {var _ebgg Result ;if _gdafa .ValueNumber ==0{_ebgg =MakeBoolResult (false );}else {_ebgg =_gbceg ;};_ecca =append (_ecca ,_ebgg );};return MakeListResult (_ecca );case ResultTypeList :_cefce :=_fdcd (_gbceg ,_bfaeg );_baae :=[]Result {};
for _dgbef ,_bgcca :=range _gbcd {var _adda Result ;if _bgcca .ValueNumber ==0{_adda =MakeBoolResult (false );}else {_adda =_cefce [_dgbef ];};_baae =append (_baae ,_adda );};return MakeListResult (_baae );case ResultTypeArray :_fdebd :=_gcgc (_gbceg ,len (_gbceg .ValueArray ),_bfaeg );
_bafa :=[][]Result {};for _ ,_gacd :=range _fdebd {_faaag :=[]Result {};for _deeb ,_ffbb :=range _gbcd {var _ecebg Result ;if _ffbb .ValueNumber ==0{_ecebg =MakeBoolResult (false );}else {_ecebg =_gacd [_deeb ];};_faaag =append (_faaag ,_ecebg );};_bafa =append (_bafa ,_faaag );
};return MakeArrayResult (_bafa );};case 3:_accd :=_ecgb [1];_egdee :=_ecgb [2];_gcgda :=_dcfb (_accd );_dgga :=_dcfb (_egdee );if _gcgda &&_dgga {_dgcf :=[]Result {};for _ ,_agdbe :=range _gbcd {var _afagd Result ;if _agdbe .ValueNumber ==0{_afagd =_egdee ;
}else {_afagd =_accd ;};_dgcf =append (_dgcf ,_afagd );};return MakeListResult (_dgcf );};if _accd .Type !=ResultTypeArray &&_egdee .Type !=ResultTypeArray {_edfg :=_fdcd (_accd ,_bfaeg );_adgd :=_fdcd (_egdee ,_bfaeg );_cgcag :=[]Result {};for _cadaa ,_agca :=range _gbcd {var _gddc Result ;
if _agca .ValueNumber ==0{_gddc =_adgd [_cadaa ];}else {_gddc =_edfg [_cadaa ];};_cgcag =append (_cgcag ,_gddc );};return MakeListResult (_cgcag );};_becec ,_aeeed :=len (_accd .ValueArray ),len (_egdee .ValueArray );_fefd ,_adbf :=_becec ,_aeeed ;if _aeeed > _fefd {_fefd ,_adbf =_adbf ,_fefd ;
};_dbec :=_gcgc (_accd ,_fefd ,_bfaeg );_gbae :=_gcgc (_egdee ,_fefd ,_bfaeg );_cfgfg :=[][]Result {};for _cdea :=0;_cdea < _fefd ;_cdea ++{_acbda :=[]Result {};for _bbbc ,_ggga :=range _gbcd {var _eebdg Result ;if _ggga .ValueNumber ==0{if _cdea < _aeeed {_eebdg =_gbae [_cdea ][_bbbc ];
}else {_eebdg =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _cdea < _becec {_eebdg =_dbec [_cdea ][_bbbc ];}else {_eebdg =MakeErrorResultType (ErrorTypeNA ,"");};};_acbda =append (_acbda ,_eebdg );};_cfgfg =append (_cfgfg ,_acbda );};return MakeArrayResult (_cfgfg );
};return MakeErrorResult ("");};func _acce (_eaeb int )bool {return _eaeb ==0||_eaeb ==4};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_aaddb chan *node ;_ddef _c .Mutex ;_dcddcc []chan *node ;_eebcg []*node ;};const _fcbaac =57365;const (_gcbfc cmpResult =0;_fdebc cmpResult =-1;_fba cmpResult =1;_dcca cmpResult =2;);

// Eval evaluates a horizontal range returning a list of results or an error.
func (_dfbf HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_dgagc :=_dfbf .horizontalRangeReference ();if _cdcgg ,_cdfa :=ev .GetFromCache (_dgagc );_cdfa {return _cdcgg ;};_aebgf ,_fcada :=_ggggc (ctx ,_dfbf ._adgc ,_dfbf ._abce );_defca :=_cggbdc (ctx ,ev ,_aebgf ,_fcada );
ev .SetCache (_dgagc ,_defca );return _defca ;};func (_eagg *Lexer )nextRaw ()*node {for len (_eagg ._dcddcc )!=0{_ffdc :=<-_eagg ._dcddcc [len (_eagg ._dcddcc )-1];if _ffdc !=nil {return _ffdc ;};_eagg ._dcddcc =_eagg ._dcddcc [0:len (_eagg ._dcddcc )-1];
};return <-_eagg ._aaddb ;};func _eeg (_fbb ,_fdgg int )int {switch _fdgg {case 1:if _fbdf (_fbb ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};const _bfdac int =30;


// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _fecbc (args ,true )};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_fegef :e }};

// Update updates references in the Negate after removing a row/column.
func (_baabg Negate )Update (q *_d .UpdateQuery )Expression {return Negate {_fegef :_baabg ._fegef .Update (q )};};var _eadbf =[...]uint8 {0,20,37,60,78,96};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_fedg :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_fedg *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_geecb :=_badec (args [1]);for _ ,_dgd :=range _geecb {for _ ,_gfgg :=range _dgd {if _gfgg .Type !=ResultTypeNumber ||_gfgg .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");
};_fedg *=1.0+_gfgg .ValueNumber ;};};return MakeNumberResult (_fedg );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");
};};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_adcg :=1.0;for _ ,_afadd :=range args {_afadd =_afadd .AsNumber ();switch _afadd .Type {case ResultTypeNumber :_adcg *=_afadd .ValueNumber ;case ResultTypeList ,ResultTypeArray :_bagac :=Product (_afadd .ListValues ());
if _bagac .Type !=ResultTypeNumber {return _bagac ;};_adcg *=_bagac .ValueNumber ;case ResultTypeString :case ResultTypeError :return _afadd ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_afadd .Type ));
};};return MakeNumberResult (_adcg );};type rangeIndex struct{_ccbc int ;_ceadc int ;};func _bgcacf (_fgdg float64 ,_agbf *criteriaRegex )bool {_affg ,_gecdb :=_ee .ParseFloat (_agbf ._ddgc ,64);if _gecdb !=nil {return false ;};switch _agbf ._aebefe {case _gfdc :return _fgdg ==_affg ;
case _gccd :return _fgdg <=_affg ;case _fddbb :return _fgdg >=_affg ;case _fbgb :return _fgdg < _affg ;case _egag :return _fgdg > _affg ;};return false ;};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};const _bacag =57368;func _ebdae (_adeb Result ,_ddcc ,_gbag string )(float64 ,Result ){switch _adeb .Type {case ResultTypeEmpty :return 0,_gdab ;
case ResultTypeNumber :return _adeb .ValueNumber ,_gdab ;case ResultTypeString :_defg ,_edfac :=_ee .ParseFloat (_adeb .ValueString ,64);if _edfac !=nil {return 0,MakeErrorResult (_gbag +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_ddcc );
};return _defg ,_gdab ;default:return 0,MakeErrorResult (_ddcc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gbag +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");
};};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_afagc :=len (args );if _afagc !=6&&_afagc !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bgba ,_edce ,_acdbg :=_gfg (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _acdbg .Type ==ResultTypeError {return _acdbg ;};_cgdee :=args [2];if _cgdee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_decg :=_cgdee .ValueNumber ;if _decg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_dcddc :=args [3];if _dcddc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gfad :=_dcddc .ValueNumber ;if _gfad <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_bdceac :=args [4];if _bdceac .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_ggda :=_bdceac .ValueNumber ;if _ggda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_agfba :=args [5];
if _agfba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dgbd :=float64 (int (_agfba .ValueNumber ));if !_eccg (_dgbd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_cgad :=0;if _afagc ==7&&args [6].Type !=ResultTypeEmpty {_bfbb :=args [6];
if _bfbb .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_cgad =int (_bfbb .ValueNumber );
if !_cagb (_cgad ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_adcd :=0.0;
_bbfc :=0.0;_ceabd :=1.0;_fadea ,_acdbg :=_fgad (_bgba ,_edce ,_decg ,_bbfc ,_ggda ,_dgbd ,_cgad );if _acdbg .Type ==ResultTypeError {return _acdbg ;};_gfdfd ,_acdbg :=_fgad (_bgba ,_edce ,_decg ,_ceabd ,_ggda ,_dgbd ,_cgad );if _acdbg .Type ==ResultTypeError {return _acdbg ;
};_dccc :=(_ceabd -_bbfc )*0.5;for _gdef :=0;_gdef < 100&&_adcd !=_gfad ;_gdef ++{_adcd ,_acdbg =_fgad (_bgba ,_edce ,_decg ,_dccc ,_ggda ,_dgbd ,_cgad );if _acdbg .Type ==ResultTypeError {return _acdbg ;};if _gfad ==_fadea {return MakeNumberResult (_bbfc );
}else if _gfad ==_gfdfd {return MakeNumberResult (_ceabd );}else if _gfad ==_adcd {return MakeNumberResult (_dccc );}else if _gfad < _gfdfd {_ceabd *=2.0;_gfdfd ,_acdbg =_fgad (_bgba ,_edce ,_decg ,_ceabd ,_ggda ,_dgbd ,_cgad );if _acdbg .Type ==ResultTypeError {return _acdbg ;
};_dccc =(_ceabd -_bbfc )*0.5;}else {if _gfad < _adcd {_bbfc =_dccc ;_fadea =_adcd ;}else {_ceabd =_dccc ;_gfdfd =_adcd ;};_dccc =_ceabd -(_ceabd -_bbfc )*((_gfad -_gfdfd )/(_fadea -_gfdfd ));};};return MakeNumberResult (_dccc );};const _dabe =57353;

// Reference returns a string reference value to a named range.
func (_geeegf NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_geeegf ._dcfc };};

// Reference returns an invalid reference for Bool.
func (_ebf Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _cdede =[...]struct{_ggfbb int ;_bbba int ;_gfdce string ;}{};func (_feae HorizontalRange )horizontalRangeReference ()string {return _g .Sprintf ("\u0025\u0064\u003a%\u0064",_feae ._adgc ,_feae ._abce );
};

// Eval evaluates and returns the result of a constant array expression.
func (_gg ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_ea :=[][]Result {};for _ ,_daf :=range _gg ._fad {_bee :=[]Result {};for _ ,_gdg :=range _daf {_bee =append (_bee ,_gdg .Eval (ctx ,ev ));};_ea =append (_ea ,_bee );};return MakeArrayResult (_ea );
};const _dcdbf =187;const _fcdaa =57356;func _fdca (_dcgba float64 )float64 {_daeg :=float64 (1);for _dgcg :=float64 (2);_dgcg <=_dcgba ;_dgcg ++{_daeg *=_dgcg ;};return _daeg ;};const _dgdd =57360;

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_fbgdc PrefixHorizontalRange )Update (q *_d .UpdateQuery )Expression {return _fbgdc };

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aedg :=args [0].AsNumber ();if _aedg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ecbf :=int (_aedg .ValueNumber );if _ecbf < 0||_ecbf > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");
};return MakeStringResult (_g .Sprintf ("\u0025\u0063",_ecbf ));};type criteriaParsed struct{_cgcd bool ;_afcf float64 ;_bbgc string ;_aaebf *criteriaRegex ;};const _gafgd =57374;func _dcdd (_ageb ,_fbe ,_dbefc ,_bdfa ,_adef float64 ,_cdeg int )float64 {_aebee :=_aag (_ageb ,_dbefc ,_bdfa ,_adef ,_cdeg );
var _defa float64 ;if _fbe ==1{if _cdeg ==1{_defa =0;}else {_defa =-_bdfa ;};}else {if _cdeg ==1{_defa =_gbd (_ageb ,_fbe -2,_aebee ,_bdfa ,1)-_aebee ;}else {_defa =_gbd (_ageb ,_fbe -1,_aebee ,_bdfa ,0);};};return _defa *_ageb ;};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _fcaa (args ,_edef )};

// Reference returns a string reference value to a horizontal range.
func (_bgdda HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_bgdda .horizontalRangeReference ()};};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_caaaf :=_aafc (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _caaaf .Type !=ResultTypeEmpty {return _caaaf ;};_dbfd :=_dbed (args [1:]);_gadb :=_cf .MaxFloat64 ;_ggega :=_badec (args [0]);for _ ,_gccgc :=range _dbfd {_adfba :=_ggega [_gccgc ._ccbc ][_gccgc ._ceadc ].ValueNumber ;
if _gadb > _adfba {_gadb =_adfba ;};};if _gadb ==_cf .MaxFloat64 {_gadb =0;};return MakeNumberResult (float64 (_gadb ));};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_aagc PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_dffdb :=_aagc ._fbce .Reference (ctx ,ev );switch _dffdb .Type {case ReferenceTypeSheet :if _ebcaa (_dffdb ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dffdb .Value ));
};_adgee :=_aagc .verticalRangeReference (_dffdb .Value );if _accb ,_cgdba :=ev .GetFromCache (_adgee );_cgdba {return _accb ;};_fbfge :=ctx .Sheet (_dffdb .Value );_cebfc ,_ceecb :=_cggg (_fbfge ,_aagc ._bbab ,_aagc ._bfafb );_dedc :=_cggbdc (_fbfge ,ev ,_cebfc ,_ceecb );
ev .SetCache (_adgee ,_dedc );return _dedc ;default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dffdb .Type ));
};};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");
};_fgca ,_bdbd ,_dbbfc :=_abdga (args );if _dbbfc .Type ==ResultTypeError {return _dbbfc ;};return MakeNumberResult (_fdca (_fgca )/_bdbd );};

// String returns a string representation of a vertical range with prefix.
func (_adgcd PrefixVerticalRange )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_adgcd ._fbce .String (),_adgcd ._bbab ,_adgcd ._bfafb );};func _daca (_cccc _aa .Time )_aa .Time {_cccc =_cccc .UTC ();return _aa .Date (_cccc .Year (),_cccc .Month (),_cccc .Day (),_cccc .Hour (),_cccc .Minute (),_cccc .Second (),_cccc .Nanosecond (),_aa .Local );
};var _aaeag =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_gaaa SheetPrefixExpr )Update (q *_d .UpdateQuery )Expression {return _gaaa };

// String returns a string representation of SheetPrefixExpr.
func (_ddfeg SheetPrefixExpr )String ()string {return _ddfeg ._egbcd };func _cggb (_cdaf []string ,_eaef int )string {return _ee .Itoa (len (_cdaf [len (_cdaf )-1-_eaef ]))};const _addd =57348;var _gafeaf =[...]int {0};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bage :=args [0].AsString ();if _bage .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_beeb :=_e .Buffer {};for _ ,_abfge :=range _bage .ValueString {if _gb .IsPrint (_abfge ){_beeb .WriteRune (_abfge );};};return MakeStringResult (_beeb .String ());};var _beaefg =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_egbcd :s }};func _gbd (_bace ,_ccad ,_aabe ,_aecg float64 ,_gbc int )float64 {var _efgg float64 ;if _bace ==0{_efgg =_aecg +_aabe *_ccad ;}else {_daefa :=_cf .Pow (1+_bace ,_ccad );
if _gbc ==1{_efgg =_aecg *_daefa +_aabe *(1+_bace )*(_daefa -1)/_bace ;}else {_efgg =_aecg *_daefa +_aabe *(_daefa -1)/_bace ;};};return -_efgg ;};var _gaa =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_geebb (args ,_aaebg ));};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_egab :=_bb .Split (v ,"\u003a");if len (_egab )!=2{return nil ;};if _egab [0]> _egab [1]{_egab [0],_egab [1]=_egab [1],_egab [0];};return VerticalRange {_cegfg :_egab [0],_aefbe :_egab [1]};};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_fbce Expression ;_bbab ,_bfafb string ;};func _eccg (_decd float64 )bool {return _decd ==1||_decd ==2||_decd ==4};func (_aceba *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };func init (){_babdf ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );
RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );
RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );
RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );
RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};var InvalidReferenceContext =&ivr {};


// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};
_eacf :=int (args [0].ValueNumber );return MakeBoolResult (_eacf ==_eacf /2*2);};

// Update returns the same object as updating sheet references does not affect Number.
func (_gfdfa Number )Update (q *_d .UpdateQuery )Expression {return _gfdfa };func _fgad (_dbaa ,_dadb ,_egad ,_efdf ,_cccg ,_ecb float64 ,_bgbg int )(float64 ,Result ){_ecd :=int (_ecb );_addf :=_acdbc (_dbaa ,_dadb ,_ecd ,_bgbg );_dca :=_aebe (_dbaa ,_dadb ,_ecd ,_bgbg )/_addf ;
_eacb ,_bge :=_gaeb (_dbaa ,_dadb ,_ecd ,_bgbg );if _bge .Type ==ResultTypeError {return 0,_bge ;};_gdbgd :=_dga (_dbaa ,_dadb ,_ecd ,_bgbg );_ddce :=_cccg /_cf .Pow (1+_efdf /_ecb ,_eacb -1+_dca );_ddce -=100*_egad /_ecb *_gdbgd /_addf ;_afcg :=100*_egad /_ecb ;
_gcgf :=1+_efdf /_ecb ;for _cfdd :=0.0;_cfdd < _eacb ;_cfdd ++{_ddce +=_afcg /_cf .Pow (_gcgf ,_cfdd +_dca );};return _ddce ,MakeEmptyResult ();};func _fbdf (_agf int )bool {if _agf ==_agf /400*400{return true ;};if _agf ==_agf /100*100{return false ;};
return _agf ==_agf /4*4;};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_ddggc :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");
};_bbfd :=args [1].ValueNumber !=0;_cfebc :=_bcefe (args [2:],[]string {},_bbfd );return MakeStringResult (_bb .Join (_cfebc ,_ddggc ));};const _cgegb =57371;

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};const (_ byte =iota ;_gfdc ;_gccd ;_fddbb ;_fbgb ;_egag ;);

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_deged :=len (args );if _deged !=6&&_deged !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_cadcf ,_gggb ,_afec :=_gfg (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _afec .Type ==ResultTypeError {return _afec ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cabe :=args [2].ValueNumber ;if _cabe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_efbg :=args [3].ValueNumber ;if _efbg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bcgf :=args [4].ValueNumber ;if _bcgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_faee :=args [5];if _faee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_daabe :=_faee .ValueNumber ;if !_eccg (_daabe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_afca :=0;if _deged ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afca =int (args [6].ValueNumber );if !_cagb (_afca ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");
};};_gffd ,_afec :=_fgad (_cadcf ,_gggb ,_cabe ,_efbg ,_bcgf ,_daabe ,_afca );if _afec .Type ==ResultTypeError {return _afec ;};return MakeNumberResult (_gffd );};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _dfffa (args ,false )};func _ebcaa (_gcgg Reference ,_fagec Context )bool {return _fagec .Sheet (_gcgg .Value )==InvalidReferenceContext ;};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_fee ,_dgec ,_agebc :=_gfg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _agebc .Type ==ResultTypeError {return _agebc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcgde :=_dgec -_fee ;if _gcgde > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_fedgf :=args [2].ValueNumber ;if _fedgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgfb :=(100-_fedgf )/_fedgf ;_fdggd :=360/_gcgde ;return MakeNumberResult (_fgfb *_fdggd );};const _ebdb ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_fbda :=len (args );if _fbda < 3||_fbda > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dad :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfeg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_gafc :=args [2].ValueNumber ;_efed :=0.0;if _fbda >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_efed =args [3].ValueNumber ;};_gfeb :=0.0;if _fbda ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gfeb =args [4].ValueNumber ;if _gfeb !=0{_gfeb =1;};};_ffae :=_dfeg *(1+_dad *_gfeb )-_efed *_dad ;_cbege :=(_gafc *_dad +_dfeg *(1+_dad *_gfeb ));return MakeNumberResult (_cf .Log (_ffae /_cbege )/_cf .Log (1+_dad ));};func _dffd (_adced []Result )[]float64 {_cefe :=make ([]float64 ,0);
for _ ,_bfeab :=range _adced {if _bfeab .Type ==ResultTypeEmpty {continue ;};_bfeab =_bfeab .AsNumber ();switch _bfeab .Type {case ResultTypeNumber :if !_bfeab .IsBoolean {_cefe =append (_cefe ,_bfeab .ValueNumber );};case ResultTypeList ,ResultTypeArray :_cefe =append (_cefe ,_dffd (_bfeab .ListValues ())...);
case ResultTypeString :default:_fg .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bfeab .Type );
};};return _cefe ;};func (_dbea *ivr )SetOffset (col ,row uint32 ){};func (_eaebb PrefixHorizontalRange )horizontalRangeReference (_cbga string )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_cbga ,_eaebb ._agdd ,_eaebb ._gface );
};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_fcfd :=len (args );if _fcfd !=4&&_fcfd !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eccgf ,_dgece ,_ecgeb :=_gfg (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _ecgeb .Type ==ResultTypeError {return _ecgeb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebda :=args [2].ValueNumber ;if _ebda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_aecb :=args [3].ValueNumber ;if _aecb <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_egbc :=0;if _fcfd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egbc =int (args [4].ValueNumber );if !_cagb (_egbc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");
};};_eede ,_ecgeb :=_accg (_eccgf ,_dgece ,_egbc );if _ecgeb .Type ==ResultTypeError {return _ecgeb ;};return MakeNumberResult ((_aecb /_ebda -1)/_eede );};type cumulArgs struct{_gdbg float64 ;_egeg float64 ;_eegb float64 ;_ggaca float64 ;_gbac float64 ;
_bed int ;};

// Update returns the same object as updating sheet references does not affect String.
func (_ffgda String )Update (q *_d .UpdateQuery )Expression {return _ffgda };func _dddd (_fdab ,_aefd []float64 ,_fcfg float64 )float64 {_bada :=_fcfg +1;_aeaee :=0.0;_ebea :=len (_fdab );_aada :=_aefd [0];for _gaef :=1;_gaef < _ebea ;_gaef ++{_edaag :=(_aefd [_gaef ]-_aada )/365;
_aeaee -=_edaag *_fdab [_gaef ]/_cf .Pow (_bada ,_edaag +1);};return _aeaee ;};func (_dae *defEval )checkLastEvalIsRef (_aae Context ,_cfe Expression ){switch _cfe .(type ){case FunctionCall :switch _cfe .(FunctionCall )._gaad {case "\u0049\u0053\u0052E\u0046":for _ ,_afd :=range _cfe .(FunctionCall )._ddbcb {switch _afd .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_afa :=_afd .Eval (_aae ,_dae );
_dae ._cfg =!(_afa .Type ==ResultTypeError &&_afa .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_dae ._cfg =false ;};};};};};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_ade ,_cgdb :=_eeag (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _cgdb .Type ==ResultTypeError {return _cgdb ;};_bffa :=_ade ._gdbg ;_cgef :=_ade ._egeg ;_afdg :=_ade ._eegb ;_fff :=_ade ._ggaca ;_acff :=_ade ._gbac ;
_fdda :=_ade ._bed ;_acbf :=_aag (_bffa ,_cgef ,_afdg ,0,_fdda );_debe :=0.0;if _fff ==1{if _fdda ==0{_debe =_acbf +_afdg *_bffa ;}else {_debe =_acbf ;};_fff ++;};for _gbgf :=_fff ;_gbgf <=_acff ;_gbgf ++{if _fdda ==1{_debe +=_acbf -(_gbd (_bffa ,_gbgf -2,_acbf ,_afdg ,1)-_acbf )*_bffa ;
}else {_debe +=_acbf -_gbd (_bffa ,_gbgf -1,_acbf ,_afdg ,0)*_bffa ;};};return MakeNumberResult (_debe );};var _eebbe =[...]int {1};const _bdg =_ggf +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";
const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bfgda ,_afgc ,_baff :=_gfg (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _baff .Type ==ResultTypeError {return _baff ;};_ded ,_baff :=_bfae (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _baff .Type ==ResultTypeError {return _baff ;};if _ded >=_bfgda {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};_aebef :=args [3];if _aebef .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cace :=_aebef .ValueNumber ;if _cace < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_dadg :=args [4];if _dadg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_fede :=_dadg .ValueNumber ;if _fede < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_faaa :=args [5];
if _faaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_ccgc :=_faaa .ValueNumber ;if _ccgc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_fgbgg :=args [6];
if _fgbgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ddadg :=float64 (int (_fgbgg .ValueNumber ));if !_eccg (_ddadg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_eegff :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_debaf :=args [7];
if _debaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_eegff =int (_debaf .ValueNumber );if !_cagb (_eegff ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");
};};_cffb ,_baff :=_accg (_ded ,_afgc ,_eegff );if _baff .Type ==ResultTypeError {return _baff ;};_cffb *=_ddadg ;_bcfg ,_baff :=_accg (_bfgda ,_afgc ,_eegff );if _baff .Type ==ResultTypeError {return _baff ;};_bcfg *=_ddadg ;_cdc ,_baff :=_accg (_ded ,_bfgda ,_eegff );
if _baff .Type ==ResultTypeError {return _baff ;};_cdc *=_ddadg ;_fcc :=_ccgc +_cffb *100*_cace /_ddadg ;_fcc /=_bcfg *_fede /_ddadg +1;_fcc -=_cdc *100*_cace /_ddadg ;return MakeNumberResult (_fcc );};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _fcaa (args ,_dabce )};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_acdbb :=len (args );if _acdbb < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _acdbb > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fbcc :=args [0];_bccc :=args [1];if _bccc .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_ffgf :=args [2].AsNumber ();if _ffgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gbec :=false ;if _acdbb ==4&&args [3].Type !=ResultTypeEmpty {_gdee :=args [3].AsNumber ();if _gdee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _gdee .ValueNumber ==0{_gbec =true ;};};_agbc :=int (_ffgf .ValueNumber )-1;_afgd :=-1;_abfbe :=false ;_agd :for _cbea ,_abfd :=range _bccc .ValueArray {if len (_abfd )==0{continue ;};_cbda :=_abfd [0];switch _fbfa (_cbda ,_fbcc ,false ,_gbec ){case _fdebc :_afgd =_cbea ;
case _gcbfc :_afgd =_cbea ;_abfbe =true ;break _agd ;};};if _afgd ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gcbf :=_bccc .ValueArray [_afgd ];
if _agbc < 0||_agbc >=len (_gcbf ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _abfbe ||!_gbec {return _gcbf [_agbc ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};func (_gafgdf *plex )Lex (lval *yySymType )int {_bbeac =true ;_aecca :=<-_gafgdf ._daed ;
if _aecca !=nil {lval ._aadf =_aecca ;return int (lval ._aadf ._eedd );};return 0;};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_cf .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};const _dfdb =57367;const _cgaca =57372;func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );
RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );
RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );
RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );
RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );
RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );
RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_gaad :name ,_ddbcb :args };};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_geecf :=args [0].AsNumber ();if _geecf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ecced :=args [1].AsNumber ();if _ecced .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};return MakeNumberResult (_cf .Pow (_geecf .ValueNumber ,_ecced .ValueNumber ));};func _cecd (_ffbe string )bool {for _ ,_df :=range _egb {_ace :=_df .FindStringSubmatch (_ffbe );if len (_ace )> 1{return true ;};};return false ;};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _egfae (args ,true )};var _ddgbd =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func _aag (_dabde ,_adf ,_bffc ,_gdgd float64 ,_ddgg int )float64 {var _ddad float64 ;if _dabde ==0{_ddad =(_bffc +_gdgd )/_adf ;}else {_aeeb :=_cf .Pow (1+_dabde ,_adf );if _ddgg ==1{_ddad =(_gdgd *_dabde /(_aeeb -1)+_bffc *_dabde /(1-1/_aeeb ))/(1+_dabde );
}else {_ddad =_gdgd *_dabde /(_aeeb -1)+_bffc *_dabde /(1-1/_aeeb );};};return -_ddad ;};

// Eval evaluates the binary expression using the context given.
func (_ff BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_caa :=_ff ._ccb .Eval (ctx ,ev );if _caa .Type ==ResultTypeError {return _caa ;};_fce :=_ff ._bbg .Eval (ctx ,ev );if _fce .Type ==ResultTypeError {return _fce ;};if _caa .Type ==_fce .Type {if _caa .Type ==ResultTypeArray {if !_ef (_caa .ValueArray ,_fce .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _fca (_ff ._cg ,_caa .ValueArray ,_fce .ValueArray );}else if _caa .Type ==ResultTypeList {if len (_caa .ValueList )!=len (_fce .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _beb (_ff ._cg ,_caa .ValueList ,_fce .ValueList );};}else if _caa .Type ==ResultTypeArray &&(_fce .Type ==ResultTypeNumber ||_fce .Type ==ResultTypeString ){return _aad (_ff ._cg ,_caa .ValueArray ,_fce );}else if _caa .Type ==ResultTypeList &&(_fce .Type ==ResultTypeNumber ||_fce .Type ==ResultTypeString ){return _ce (_ff ._cg ,_caa .ValueList ,_fce );
};switch _ff ._cg {case BinOpTypePlus :if _caa .Type ==_fce .Type {if _caa .Type ==ResultTypeNumber {return MakeNumberResult (_caa .ValueNumber +_fce .ValueNumber );};};case BinOpTypeMinus :if _caa .Type ==_fce .Type {if _caa .Type ==ResultTypeNumber {return MakeNumberResult (_caa .ValueNumber -_fce .ValueNumber );
};};case BinOpTypeMult :if _caa .Type ==_fce .Type {if _caa .Type ==ResultTypeNumber {return MakeNumberResult (_caa .ValueNumber *_fce .ValueNumber );};};case BinOpTypeDiv :if _caa .Type ==_fce .Type {if _caa .Type ==ResultTypeNumber {if _fce .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");
};return MakeNumberResult (_caa .ValueNumber /_fce .ValueNumber );};};case BinOpTypeExp :if _caa .Type ==_fce .Type {if _caa .Type ==ResultTypeNumber {return MakeNumberResult (_cf .Pow (_caa .ValueNumber ,_fce .ValueNumber ));};};case BinOpTypeLT :if _caa .Type ==_fce .Type {if _caa .Type ==ResultTypeNumber {return MakeBoolResult (_caa .ValueNumber < _fce .ValueNumber );
};if _caa .Type ==ResultTypeString {return MakeBoolResult (_caa .ValueString < _fce .ValueString );};if _caa .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _caa .Type ==ResultTypeString &&_fce .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _caa .Type ==ResultTypeNumber &&_fce .Type ==ResultTypeString {return MakeBoolResult (true );}else if _caa .Type ==ResultTypeEmpty &&(_fce .Type ==ResultTypeNumber ||_fce .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_caa .Type ==ResultTypeNumber ||_caa .Type ==ResultTypeString )&&_fce .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};case BinOpTypeGT :if _caa .Type ==_fce .Type {if _caa .Type ==ResultTypeNumber {return MakeBoolResult (_caa .ValueNumber > _fce .ValueNumber );};if _caa .Type ==ResultTypeString {return MakeBoolResult (_caa .ValueString > _fce .ValueString );};if _caa .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if _caa .Type ==ResultTypeString &&_fce .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _caa .Type ==ResultTypeNumber &&_fce .Type ==ResultTypeString {return MakeBoolResult (false );}else if _caa .Type ==ResultTypeEmpty &&(_fce .Type ==ResultTypeNumber ||_fce .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if (_caa .Type ==ResultTypeNumber ||_caa .Type ==ResultTypeString )&&_fce .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _caa .Type ==_fce .Type {if _caa .Type ==ResultTypeNumber {return MakeBoolResult (_caa .ValueNumber ==_fce .ValueNumber );
};if _caa .Type ==ResultTypeString {return MakeBoolResult (_caa .ValueString ==_fce .ValueString );};if _caa .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_caa .Type ==ResultTypeString &&_fce .Type ==ResultTypeNumber )||(_caa .Type ==ResultTypeNumber &&_fce .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if _caa .Type ==ResultTypeEmpty &&(_fce .Type ==ResultTypeNumber ||_fce .Type ==ResultTypeString ){return MakeBoolResult (_ab (_fce ));}else if (_caa .Type ==ResultTypeNumber ||_caa .Type ==ResultTypeString )&&_fce .Type ==ResultTypeEmpty {return MakeBoolResult (_ab (_caa ));
};case BinOpTypeNE :if _caa .Type ==_fce .Type {if _caa .Type ==ResultTypeNumber {return MakeBoolResult (_caa .ValueNumber !=_fce .ValueNumber );};if _caa .Type ==ResultTypeString {return MakeBoolResult (_caa .ValueString !=_fce .ValueString );};if _caa .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if (_caa .Type ==ResultTypeString &&_fce .Type ==ResultTypeNumber )||(_caa .Type ==ResultTypeNumber &&_fce .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _caa .Type ==ResultTypeEmpty &&(_fce .Type ==ResultTypeNumber ||_fce .Type ==ResultTypeString ){return MakeBoolResult (!_ab (_fce ));
}else if (_caa .Type ==ResultTypeNumber ||_caa .Type ==ResultTypeString )&&_fce .Type ==ResultTypeEmpty {return MakeBoolResult (!_ab (_caa ));};case BinOpTypeLEQ :if _caa .Type ==_fce .Type {if _caa .Type ==ResultTypeNumber {return MakeBoolResult (_caa .ValueNumber <=_fce .ValueNumber );
};if _caa .Type ==ResultTypeString {return MakeBoolResult (_caa .ValueString <=_fce .ValueString );};if _caa .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _caa .Type ==ResultTypeString &&_fce .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _caa .Type ==ResultTypeNumber &&_fce .Type ==ResultTypeString {return MakeBoolResult (true );}else if _caa .Type ==ResultTypeEmpty &&(_fce .Type ==ResultTypeNumber ||_fce .Type ==ResultTypeString ){return MakeBoolResult (_ab (_fce ));}else if (_caa .Type ==ResultTypeNumber ||_caa .Type ==ResultTypeString )&&_fce .Type ==ResultTypeEmpty {return MakeBoolResult (_ab (_caa ));
};case BinOpTypeGEQ :if _caa .Type ==_fce .Type {if _caa .Type ==ResultTypeNumber {return MakeBoolResult (_caa .ValueNumber >=_fce .ValueNumber );};if _caa .Type ==ResultTypeString {return MakeBoolResult (_caa .ValueString >=_fce .ValueString );};if _caa .Type ==ResultTypeEmpty {return MakeBoolResult (true );
};}else if _caa .Type ==ResultTypeString &&_fce .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _caa .Type ==ResultTypeNumber &&_fce .Type ==ResultTypeString {return MakeBoolResult (false );}else if _caa .Type ==ResultTypeEmpty &&(_fce .Type ==ResultTypeNumber ||_fce .Type ==ResultTypeString ){return MakeBoolResult (_ab (_fce ));
}else if (_caa .Type ==ResultTypeNumber ||_caa .Type ==ResultTypeString )&&_fce .Type ==ResultTypeEmpty {return MakeBoolResult (_ab (_caa ));};case BinOpTypeConcat :return MakeStringResult (_caa .Value ()+_fce .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");
};var _ebd float64 =25569.0;func _efec (_ffbc []Result ,_ebg string )(*couponArgs ,Result ){_ggcf :=len (_ffbc );if _ggcf !=3&&_ggcf !=4{return nil ,MakeErrorResult (_ebg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bdd ,_ebc ,_abedg :=_gfg (_ffbc [0],_ffbc [1],_ebg );if _abedg .Type ==ResultTypeError {return nil ,_abedg ;};if _ffbc [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebg +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eacg :=_ffbc [2].ValueNumber ;if !_eccg (_eacg ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_ebg );};_ebgb :=0;if _ggcf ==4&&_ffbc [3].Type !=ResultTypeEmpty {if _ffbc [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebg +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ebgb =int (_ffbc [3].ValueNumber );if !_cagb (_ebgb ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_ebg );
};};return &couponArgs {_bdd ,_ebc ,int (_eacg ),_ebgb },_gdab ;};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_bafb ,_dgba :=_dggd ("\u0046\u0049\u004e\u0044",args );if _dgba .Type !=ResultTypeEmpty {return _dgba ;};_cgdad :=_bafb ._dggac ;if _cgdad ==""{return MakeNumberResult (1.0);};_cfdce :=_bafb ._eaadg ;_fcea :=_bafb ._aaabb ;
_fbab :=1;for _cdged :=range _cfdce {if _fbab < _fcea {_fbab ++;continue ;};_ddac :=_bb .Index (_cfdce [_cdged :],_cgdad );if _ddac ==0{return MakeNumberResult (float64 (_fbab ));};_fbab ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};var _eeed =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};
func _gaeb (_gcae ,_gbbbc float64 ,_efd ,_bcf int )(float64 ,Result ){_ggfa ,_fega :=_gdc (_gcae ),_gdc (_gbbbc );if _fega .After (_ggfa ){_adge :=_aceca (_ggfa ,_fega ,_efd ,_bcf );_afdd :=(_fega .Year ()-_adge .Year ())*12+int (_fega .Month ())-int (_adge .Month ());
return float64 (_afdd *_efd )/12.0,_gdab ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");
};const _fef ="\u005e\u0028\u0028"+_gafg +"\u007c"+_bdg +"\u007c"+_fb +"\u007c"+_cec +"\u0029\u0020\u0029\u003f";

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_accc :=args [0].AsString ();if _accc .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_eaagf :=args [1].AsNumber ();if _eaagf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _eaagf .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");
};if _eaagf .ValueNumber ==0{return MakeStringResult ("");};_ecag :=_e .Buffer {};for _bgee :=0;_bgee < int (_eaagf .ValueNumber );_bgee ++{_ecag .WriteString (_accc .ValueString );};return MakeStringResult (_ecag .String ());};func (_fddd ResultType )String ()string {if _fddd >=ResultType (len (_abbb )-1){return _g .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_fddd );
};return _dffag [_abbb [_fddd ]:_abbb [_fddd +1]];};var _ebbce []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// IsBool returns false for the invalid reference context.
func (_bdcfd *ivr )IsBool (cellRef string )bool {return false };

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _a .Reader )Expression {_aaec :=&plex {_daed :LexReader (r )};_fcgb (_aaec );if _aaec ._aagg !=""{return nil ;};return _aaec ._caabb ;};func _dfege (_eaac _aa .Time )bool {return _aa .Now ().Sub (_eaac )>=_degd };

// GetWidth returns 0 for the invalid reference context.
func (_affc *ivr )GetWidth (colIdx int )float64 {return float64 (0)};func (_cafef ReferenceType )String ()string {if _cafef >=ReferenceType (len (_eadbf )-1){return _g .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_cafef );
};return _geedff [_eadbf [_cafef ]:_eadbf [_cafef +1]];};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_efaa Context ,formula string )Result ;SetCache (_cadd string ,_fcgd Result );GetFromCache (_bfe string )(Result ,bool );LastEvalIsRef ()bool ;};

// CellRef is a reference to a single cell
type CellRef struct{_cfd string };

// String returns a string representation of a range with prefix.
func (_gcgba PrefixRangeExpr )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gcgba ._febd .String (),_gcgba ._fbad .String (),_gcgba ._acfceb .String ());};const _bebf =57364;func _fdcd (_acdg Result ,_gada int )[]Result {_aeag :=[]Result {};
switch _acdg .Type {case ResultTypeList :_fdae :=_acdg .ValueList ;_dddcf :=len (_fdae );for _gcda :=0;_gcda < _gada ;_gcda ++{if _gcda < _dddcf {_aeag =append (_aeag ,_fdae [_gcda ]);}else {_aeag =append (_aeag ,MakeErrorResultType (ErrorTypeNA ,""));
};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _effb :=0;_effb < _gada ;_effb ++{_aeag =append (_aeag ,_acdg );};};return _aeag ;};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_bbec Expression ;_agdd ,_gface int ;};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_facg :=len (args );if _facg !=4&&_facg !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_cgcg ,_cgde :=_bfae (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _cgde .Type ==ResultTypeError {return _cgde ;};_ffag ,_cgde :=_bfae (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");
if _cgde .Type ==ResultTypeError {return _cgde ;};if _cgcg >=_ffag {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_bdef :=args [2].ValueNumber ;if _bdef <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acg :=args [3].ValueNumber ;if _acg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgb :=0;if _facg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgb =int (args [4].ValueNumber );if !_cagb (_fgb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");
};};_eaec ,_cgde :=_accg (_cgcg ,_ffag ,_fgb );if _cgde .Type ==ResultTypeError {return _cgde ;};return MakeNumberResult (_acg *_bdef *_eaec );};func _afgb (_fccg Result ,_gecb *criteriaParsed )bool {_aged :=_bb .ToLower (_fccg .ValueString );_ddcb :=_gecb ._aaebf ._aebefe ;
_gcaf :=_gecb ._aaebf ._ddgc ;if _ddcb ==_gfdc {return _aged ==_gcaf ||_ac .Match (_gcaf ,_aged );};if _fccg .Type !=ResultTypeEmpty {if _aged ==_gecb ._bbgc ||_ac .Match (_gecb ._bbgc ,_aged ){return true ;};if _ ,_cbgf :=_ee .ParseFloat (_gcaf ,64);_cbgf ==nil {return false ;
};switch _ddcb {case _gccd :return _aged <=_gcaf ;case _fddbb :return _aged >=_gcaf ;case _fbgb :return _aged < _gcaf ;case _egag :return _aged > _gcaf ;};};return false ;};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gfaf :=args [0].AsString ();if _gfaf .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_faae :=_e .Buffer {};_bcaab :=false ;_gfgad :=false ;_aafe :=0;for _ ,_gfae :=range _gfaf .ValueString {_fceeef :=_gfae ==' ';if _fceeef {if !_bcaab {continue ;};if !_gfgad {_aafe ++;_faae .WriteRune (_gfae );};}else {_aafe =0;_bcaab =true ;_faae .WriteRune (_gfae );
};_gfgad =_fceeef ;};_faae .Truncate (_faae .Len ()-_aafe );return MakeStringResult (_faae .String ());};func (_ecagg node )String ()string {return _g .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_ecagg ._eedd ,_abgf (string (_ecagg ._faccf )));};
const _geeeg =57366;const _cdgg =1;

// Reference returns an invalid reference for ConstArrayExpr.
func (_bag ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_bdccb :=len (args );if _bdccb !=4&&_bdccb !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_eeb ,_fcba ,_gffg :=_gfg (args [0],args [1],"\u0044\u0049\u0053\u0043");if _gffg .Type ==ResultTypeError {return _gffg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dbbb :=args [2].ValueNumber ;if _dbbb <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbfc :=args [3].ValueNumber ;if _cbfc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cba :=0;if _bdccb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cba =int (args [4].ValueNumber );if !_cagb (_cba ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");
};};_eagf ,_gffg :=_accg (_eeb ,_fcba ,_cba );if _gffg .Type ==ResultTypeError {return _gffg ;};return MakeNumberResult ((_cbfc -_dbbb )/_cbfc /_eagf );};

// String returns a string representation of FunctionCall expression.
func (_bgffb FunctionCall )String ()string {_ggbfa :=_e .Buffer {};_ggbfa .WriteString (_bgffb ._gaad );_ggbfa .WriteString ("\u0028");_edged :=len (_bgffb ._ddbcb )-1;for _fbdg ,_gdacb :=range _bgffb ._ddbcb {_ggbfa .WriteString (_gdacb .String ());if _fbdg !=_edged {_ggbfa .WriteString ("\u002c");
};};_ggbfa .WriteString ("\u0029");return _ggbfa .String ();};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_gfaa :=ctx .GetEpoch ();_cfbaa ,_acab :=_ceag (args [0].Value (),_gfaa );if _acab !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_fgdb :=_cfbaa .Year ();return MakeBoolResult (_fbdf (_fgdb ));};const _edda =57370;func _abdga (_bbgd []Result )(float64 ,float64 ,Result ){_cfegb :=0.0;_afabe :=1.0;for _ ,_fedgbb :=range _bbgd {switch _fedgbb .Type {case ResultTypeNumber :_cfegb +=_fedgbb .ValueNumber ;
_afabe *=_fdca (_fedgbb .ValueNumber );case ResultTypeList ,ResultTypeArray :_dgbdfb ,_cdfbf ,_cdcc :=_abdga (_fedgbb .ListValues ());_cfegb +=_dgbdfb ;_afabe *=_fdca (_cdfbf );if _cdcc .Type ==ResultTypeError {return 0,0,_cdcc ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
case ResultTypeError :return 0,0,_fedgbb ;};};return _cfegb ,_afabe ,_gdab ;};func (_dbf *evCache )GetFromCache (key string )(Result ,bool ){_dbf ._cgcb .Lock ();_faf ,_abe :=_dbf ._gca [key ];_dbf ._cgcb .Unlock ();return _faf ,_abe ;};var _cgdg []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};for _bbee :=0;_bbee < len (args )-1;_bbee +=2{if args [_bbee ].ValueNumber ==1{return args [_bbee +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aegd :=args [0].AsString ();if _aegd .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};if len (_aegd .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_aegd .ValueString [0]));};func LexReader (r _a .Reader )chan *node {_cbcb :=NewLexer ();go _cbcb .lex (r );return _cbcb ._aaddb };type Reference struct{Type ReferenceType ;
Value string ;};

// Reference returns an invalid reference for String.
func (_afddc String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _abgf (_eeecd string )string {_eeecd =_bb .Replace (_eeecd ,"\u000a","\u005c\u006e",-1);_eeecd =_bb .Replace (_eeecd ,"\u000d","\u005c\u0072",-1);_eeecd =_bb .Replace (_eeecd ,"\u0009","\u005c\u0074",-1);
return _eeecd ;};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_cbef :=args [0];if _cbef .Type ==ResultTypeList {_ccdf :=[][]Result {};for _ ,_bdfe :=range _cbef .ValueList {_ccdf =append (_ccdf ,[]Result {_bdfe });};return MakeArrayResult (_ccdf );};_dfae :=make ([][]Result ,len (_cbef .ValueArray [0]));for _ ,_eafb :=range _cbef .ValueArray {for _fcece ,_bgab :=range _eafb {_dfae [_fcece ]=append (_dfae [_fcece ],_bgab );
};};return MakeArrayResult (_dfae );};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_baec :=len (args );if _baec < 3||_baec > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbfa :=args [0].ValueNumber ;if _cbfa !=float64 (int (_cbfa )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgccb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_bdda :=args [2].ValueNumber ;_fced :=0.0;if _baec >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_fced =args [3].ValueNumber ;};_fgf :=0.0;if _baec >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fgf =args [4].ValueNumber ;if _fgf !=0{_fgf =1;};};_gbaa :=0.1;if _baec >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gbaa =args [5].ValueNumber ;};_cgdea :=100;_gage :=0;_fdcg :=false ;_gedc :=1e-6;_eabe :=_gbaa ;for _gage < _cgdea &&!_fdcg {_cebc :=_cf .Pow (_eabe +1,_cbfa );_dgcd :=_cf .Pow (_eabe +1,_cbfa -1);_ebge :=_eabe *_fgf +1;_egbe :=_cgccb *(_cebc -1);_agebg :=_fced +_cebc *_bdda +_egbe *_ebge /_eabe ;
_fefe :=_cbfa *_dgcd *_bdda -_egbe *_ebge /_cf .Pow (_eabe ,2);_edff :=(_cbfa *_cgccb *_dgcd *_ebge +_egbe *_fgf )/_eabe ;_baag :=_agebg /(_fefe +_edff );if _cf .Abs (_baag )< _gedc {_fdcg =true ;};_gage ++;_eabe -=_baag ;};return MakeNumberResult (_eabe );
};func (_faca Result )AsString ()Result {switch _faca .Type {case ResultTypeNumber :return MakeStringResult (_faca .Value ());default:return _faca ;};};func _edad (_gbbb ,_aeb ,_aee ,_ceec int )int {if _aeb > _aee {return 0;};if _acce (_ceec ){return (_aee -_aeb +1)*30;
};_afaa :=0;for _daefd :=_aeb ;_daefd <=_aee ;_daefd ++{_afaa +=_bebg (_gbbb ,_daefd );};return _afaa ;};func _aegbb (_cfdad ,_ccd ,_gagg int )int {if _cfdad > _ccd {return 0;};if _acce (_gagg ){return (_ccd -_cfdad +1)*360;};_ffa :=0;for _fcag :=_cfdad ;
_fcag <=_ccd ;_fcag ++{_bfga :=365;if _fbdf (_fcag ){_bfga =366;};_ffa +=_bfga ;};return _ffa ;};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_bec :=len (args );if _bec !=4&&_bec !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gaba :=args [0].ValueNumber ;if _gaba < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfcg :=args [1].ValueNumber ;if _gfcg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fggf :=args [2].ValueNumber ;if _fggf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gbba :=args [3].ValueNumber ;if _gbba < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");
};if _gbba > _fggf {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_aacfb :=2.0;if _bec ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aacfb =args [4].ValueNumber ;if _aacfb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};return MakeNumberResult (_cfdcd (_gaba ,_gfcg ,_fggf ,_gbba ,_aacfb ));};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };const (_deef countMode =iota ;_dfc ;_aaebg ;);

// Update returns the same object as updating sheet references does not affect Error.
func (_cdgb Error )Update (q *_d .UpdateQuery )Expression {return _cdgb };const _ebgbg =57369;func _cagb (_ebdc int )bool {return _ebdc >=0&&_ebdc <=4};func _fffd (_gfffe string )*criteriaRegex {_cgcf :=&criteriaRegex {};if _gfffe ==""{return _cgcf ;};
if _afgfe :=_gffe .FindStringSubmatch (_gfffe );len (_afgfe )> 1{_cgcf ._aebefe =_gfdc ;_cgcf ._ddgc =_afgfe [1];}else if _eagca :=_fcegc .FindStringSubmatch (_gfffe );len (_eagca )> 1{_cgcf ._aebefe =_gfdc ;_cgcf ._ddgc =_eagca [1];}else if _efcg :=_acgg .FindStringSubmatch (_gfffe );
len (_efcg )> 1{_cgcf ._aebefe =_gccd ;_cgcf ._ddgc =_efcg [1];}else if _fbcca :=_bcb .FindStringSubmatch (_gfffe );len (_fbcca )> 1{_cgcf ._aebefe =_fddbb ;_cgcf ._ddgc =_fbcca [1];}else if _caef :=_ebdge .FindStringSubmatch (_gfffe );len (_caef )> 1{_cgcf ._aebefe =_fbgb ;
_cgcf ._ddgc =_caef [1];}else if _bfdg :=_aege .FindStringSubmatch (_gfffe );len (_bfdg )> 1{_cgcf ._aebefe =_egag ;_cgcf ._ddgc =_bfdg [1];};return _cgcf ;};type cmpResult int8 ;

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// Eval evaluates and returns an expression with prefix.
func (_caaeb PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_dfgb :=_caaeb ._cagbg .Reference (ctx ,ev );switch _dfgb .Type {case ReferenceTypeSheet :if _ebcaa (_dfgb ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dfgb .Value ));
};_bfcdf :=ctx .Sheet (_dfgb .Value );return _caaeb ._abefd .Eval (_bfcdf ,ev );default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dfgb .Type ));
};};

// String returns a string representation of Number.
func (_fffac Number )String ()string {return _ee .FormatFloat (_fffac ._ggdb ,'f',-1,64)};

// Negate is a negate expression like -A1.
type Negate struct{_fegef Expression };func _abga (_bcec Result ,_bead *criteriaParsed )bool {if _bcec .Type ==ResultTypeEmpty {return false ;};if _bead ._cgcd {return _bcec .ValueNumber ==_bead ._afcf ;}else {_edadgg :=_bb .ToLower (_bcec .ValueString );
return _bead ._bbgc ==_edadgg ||_ac .Match (_bead ._bbgc ,_edadgg );};};func (_cfbage PrefixVerticalRange )verticalRangeReference (_dcacf string )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dcacf ,_cfbage ._bbab ,_cfbage ._bfafb );
};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_bb .NewReader (s ));};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fbbcg :=args [0].AsString ();if _fbbcg .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");
};_egdd :=args [1].AsNumber ();if _egdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cdega :=_fbbcg .ValueString ;if len (_cdega )> 2&&(_bb .HasPrefix (_cdega ,"\u0030\u0078")||_bb .HasPrefix (_cdega ,"\u0030\u0058")){_cdega =_cdega [2:];};_efad ,_bccg :=_ee .ParseInt (_cdega ,int (_egdd .ValueNumber ),64);if _bccg !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");
};return MakeNumberResult (float64 (_efad ));};func _bgga (_agggc [][]Result ,_baab int )[][]Result {_agcf :=[][]Result {};for _efca :=range _agggc {if _efca ==0{continue ;};_egee :=[]Result {};for _bffed :=range _agggc {if _bffed ==_baab {continue ;};
_egee =append (_egee ,_agggc [_efca ][_bffed ]);};_agcf =append (_agcf ,_egee );};return _agcf ;};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_acdeb PrefixVerticalRange )Update (q *_d .UpdateQuery )Expression {if q .UpdateType ==_d .UpdateActionRemoveColumn {_cfef :=_acdeb ;_egfdc :=_acdeb ._fbce .String ();if _egfdc ==q .SheetToUpdate {_eecbf :=q .ColumnIdx ;_cfef ._bbab =_bac (_acdeb ._bbab ,_eecbf );
_cfef ._bfafb =_bac (_acdeb ._bfafb ,_eecbf );};return _cfef ;};return _acdeb ;};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_dcfc :v }};

// Update updates references in the PrefixExpr after removing a row/column.
func (_dfgf PrefixExpr )Update (q *_d .UpdateQuery )Expression {_febe :=_dfgf ;_dabeb :=_dfgf ._cagbg .String ();if _dabeb ==q .SheetToUpdate {_fbccf :=*q ;_fbccf .UpdateCurrentSheet =true ;_febe ._abefd =_dfgf ._abefd .Update (&_fbccf );};return _febe ;
};func _cggbdc (_gfge Context ,_cgea Evaluator ,_gdefd ,_ebfeg string )Result {_gfca ,_aaebd :=_eg .ParseCellReference (_gdefd );if _aaebd !=nil {return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gdefd ,_aaebd .Error ()));
};_fecfba ,_gcafc :=_gfca .ColumnIdx ,_gfca .RowIdx ;_adcff ,_bagda :=_eg .ParseCellReference (_ebfeg );if _bagda !=nil {return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_ebfeg ,_bagda .Error ()));
};_fcbc ,_cfcf :=_adcff .ColumnIdx ,_adcff .RowIdx ;_bgbag :=[][]Result {};for _gbdcb :=_gcafc ;_gbdcb <=_cfcf ;_gbdcb ++{_aeafg :=[]Result {};for _cbfgd :=_fecfba ;_cbfgd <=_fcbc ;_cbfgd ++{_gadg :=_gfge .Cell (_g .Sprintf ("\u0025\u0073\u0025\u0064",_eg .IndexToColumn (_cbfgd ),_gbdcb ),_cgea );
_aeafg =append (_aeafg ,_gadg );};_bgbag =append (_bgbag ,_aeafg );};if len (_bgbag )==1{if len (_bgbag [0])==1{return _bgbag [0][0];};return MakeListResult (_bgbag [0]);};return MakeArrayResult (_bgbag );};

// GetFormat returns an empty string for the invalid reference context.
func (_eaga *ivr )GetFormat (cellRef string )string {return ""};var _abbb =[...]uint8 {0,17,33,49,63,78,93,108};const _ggf ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";


// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_geebb (args ,_dfc ))};func _fdcbb (_fedb [][]Result )float64 {if len (_fedb )==2{_bcef :=_fedb [0][0].AsNumber ();_ccae :=_fedb [0][1].AsNumber ();_geagc :=_fedb [1][0].AsNumber ();_fegaa :=_fedb [1][1].AsNumber ();
if _bcef .Type !=ResultTypeNumber ||_ccae .Type !=ResultTypeNumber ||_geagc .Type !=ResultTypeNumber ||_fegaa .Type !=ResultTypeNumber {return _cf .NaN ();};return _bcef .ValueNumber *_fegaa .ValueNumber -_geagc .ValueNumber *_ccae .ValueNumber ;};_caad :=float64 (0);
_efbc :=float64 (1);for _bcea :=range _fedb {_caad +=_efbc *_fedb [0][_bcea ].ValueNumber *_fdcbb (_bgga (_fedb ,_bcea ));_efbc *=-1;};return _caad ;};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_cagbg :pfx ,_abefd :exp }};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bgce :=args [0].Ref ;
if _bgce .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");
};_dbgg ,_cbfg :=_eg .ParseCellReference (_bgce .Value );if _cbfg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bgce .Value );};return MakeNumberResult (float64 (_dbgg .ColumnIdx +1));
};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_dbca ,_dfga ,_gefd :=_faegc (from ,to );if _gefd !=nil {_fg .Log .Debug (_gefd .Error ());return NewError (_gefd .Error ());};return Range {_fddg :_dbca ,_bfeg :_dfga };};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_dgeb Result )AsNumber ()Result {if _dgeb .Type ==ResultTypeString {_befff ,_ddgd :=_ee .ParseFloat (_dgeb .ValueString ,64);if _ddgd ==nil {return MakeNumberResult (_befff );};};if _dgeb .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _dgeb ;
};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError );};const _egeb =_aa .Second *1;

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_febd ,_fbad ,_acfceb Expression };func _aceca (_bfde ,_eba _aa .Time ,_bfec ,_gad int )_aa .Time {_eagb :=_eba ;_bdb :=_bfde .Year ()-_eba .Year ();_eagb =_eagb .AddDate (_bdb ,0,0);if _bfde .After (_eagb ){_eagb =_eagb .AddDate (1,0,0);
};_fdec :=-12/_bfec ;for _eagb .After (_bfde ){_eagb =_eagb .AddDate (0,_fdec ,0);};return _eagb ;};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_agb :=len (args );if _agb !=4&&_agb !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_agfb ,_beff ,_feaad :=_gfg (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _feaad .Type ==ResultTypeError {return _feaad ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bbac :=args [2].ValueNumber ;if _bbac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_bfbe :=args [3].ValueNumber ;if _bfbe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");
};_cfdba :=0;if _agb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfdba =int (args [4].ValueNumber );if !_cagb (_cfdba ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");
};};_gddgc ,_feaad :=_accg (_agfb ,_beff ,_cfdba );if _feaad .Type ==ResultTypeError {return _feaad ;};return MakeNumberResult (_bfbe *(1-_bbac *_gddgc ));};const _ggba =57362;

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_edgedb :=_bb .Split (v ,"\u003a");if len (_edgedb )!=2{return nil ;};if _edgedb [0]> _edgedb [1]{_edgedb [0],_edgedb [1]=_edgedb [1],_edgedb [0];};return PrefixVerticalRange {_fbce :pfx ,_bbab :_edgedb [0],_bfafb :_edgedb [1]};
};func _egbae (_aceg []Result ,_adfa string )(float64 ,float64 ,Result ){if len (_aceg )!=2{return 0,0,MakeErrorResult (_adfa +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _aceg [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_adfa +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cbfcb :=_aceg [0].ValueNumber ;if _aceg [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_adfa +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gfbd :=float64 (int (_aceg [1].ValueNumber ));if _gfbd < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_adfa +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");
};return _cbfcb ,_gfbd ,_gdab ;};func _ef (_fa ,_bfa [][]Result )bool {if len (_fa )!=len (_bfa ){return false ;};for _af :=range _fa {if len (_fa [_af ])!=len (_bfa [_af ]){return false ;};};return true ;};func _bcfgc (_faccc ,_gdbeg float64 )float64 {_faccc =_cf .Trunc (_faccc );
_gdbeg =_cf .Trunc (_gdbeg );if _faccc ==0{return _gdbeg ;};if _gdbeg ==0{return _faccc ;};for _faccc !=_gdbeg {if _faccc > _gdbeg {_faccc =_faccc -_gdbeg ;}else {_gdbeg =_gdbeg -_faccc ;};};return _faccc ;};

// String returns a string representation for Bool.
func (_cdg Bool )String ()string {if _cdg ._eb {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_cafa ,_cggbd :=_fcdgb ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _cggbd .Type !=ResultTypeEmpty {return _cggbd ;};_fdcag :=_cafa ._dfgcb ;_gfgf :=_cafa ._acgga ;_eddea :=_cafa ._befa ;_deec :=_cafa ._cccef ;
_adfd :=len (_fdcag );if _gfgf > _adfd {_gfgf =_adfd ;};_ebaa :=_gfgf +_eddea ;if _ebaa > _adfd {_ebaa =_adfd ;};_cabd :=_fdcag [0:_gfgf ]+_deec +_fdcag [_ebaa :];return MakeStringResult (_cabd );};const _adgeg =57363;func _dbed (_aecda []Result )[]rangeIndex {_cfbce :=[]rangeIndex {};
_gdbfd :=len (_aecda );for _cadb :=0;_cadb < _gdbfd -1;_cadb +=2{_eead :=[]rangeIndex {};_fbac :=_badec (_aecda [_cadb ]);_bfcd :=_egfb (_aecda [_cadb +1]);if _cadb ==0{for _bfcf ,_bgcaa :=range _fbac {for _eaee ,_bccbg :=range _bgcaa {if _cegge (_bccbg ,_bfcd ){_eead =append (_eead ,rangeIndex {_bfcf ,_eaee });
};};};}else {for _ ,_agcg :=range _cfbce {_adee :=_fbac [_agcg ._ccbc ][_agcg ._ceadc ];if _cegge (_adee ,_bfcd ){_eead =append (_eead ,_agcg );};};};if len (_eead )==0{return []rangeIndex {};};_cfbce =_eead [:];};return _cfbce ;};var _eebg *_bf .Rand ;


// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bdaf :=args [0].Ref ;if _bdaf .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .Cell (_bdaf .Value ,ev ).IsBoolean );};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;
);

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};_bddg :=args [0];if _bddg .Type !=ResultTypeArray &&_bddg .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_degc :=_egfb (args [1]);_edfae :=0;for _ ,_baeb :=range _badec (_bddg ){for _ ,_effe :=range _baeb {if _cegge (_effe ,_degc ){_edfae ++;};};};return MakeNumberResult (float64 (_edfae ));};

// Update updates the horizontal range references after removing a row/column.
func (_eaca HorizontalRange )Update (q *_d .UpdateQuery )Expression {return _eaca };

// Eval evaluates a range with prefix returning a list of results or an error.
func (_affd PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_fdff :=_affd ._febd .Reference (ctx ,ev );_bdaged :=_affd ._fbad .Reference (ctx ,ev );_afba :=_affd ._acfceb .Reference (ctx ,ev );switch _fdff .Type {case ReferenceTypeSheet :if _ebcaa (_fdff ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_fdff .Value ));
};_dfaeg :=_eaddd (_fdff ,_bdaged ,_afba );if _bdaged .Type ==ReferenceTypeCell &&_afba .Type ==ReferenceTypeCell {if _fcfdb ,_afada :=ev .GetFromCache (_dfaeg );_afada {return _fcfdb ;}else {_ggaad :=_cggbdc (ctx .Sheet (_fdff .Value ),ev ,_bdaged .Value ,_afba .Value );
ev .SetCache (_dfaeg ,_ggaad );return _ggaad ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_dfaeg );default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fdff .Type ));
};};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_bb .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_efcb :v };};func NewLexer ()*Lexer {return &Lexer {_aaddb :make (chan *node )}};const _fecfa =57355;

// Eval evaluates and returns a number.
func (_bfdf Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_bfdf ._ggdb )};type amorArgs struct{_bdcc float64 ;_bgca float64 ;_gfea float64 ;_eff float64 ;_fedc int ;_eca float64 ;_cfbf int ;};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_bffe :=args [1].ValueNumber ;_aec :=args [0];var _ebed float64 ;switch _aec .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
case ResultTypeNumber :_ebed =_aec .ValueNumber ;case ResultTypeString :_fade :=DateValue ([]Result {args [0]});if _fade .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_ebed =_fade .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_abba :=_gdc (_ebed );_geb :=_abba .AddDate (0,int (_bffe ),0);
_ebfa ,_eaad ,_daef :=_geb .Date ();_acb :=_fcaf (_ebfa ,int (_eaad ),_daef );if _acb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};return MakeNumberResult (_acb );};func _ggggc (_agaaa Context ,_beaead ,_gbbd int )(string ,string ){_gddca :="\u0041"+_ee .Itoa (_beaead );_bdge :=_agaaa .LastColumn (_beaead ,_gbbd );_cbcd :=_bdge +_ee .Itoa (_gbbd );return _gddca ,_cbcd ;};const _fagd =57346;


// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_fad :data }};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfab :=0;_dbbf :=false ;for _ ,_cdcg :=range args {switch _cdcg .Type {case ResultTypeList ,ResultTypeArray :_cccca :=Xor (_cdcg .ListValues ());if _cccca .Type ==ResultTypeError {return _cccca ;};if _cccca .ValueNumber !=0{_cfab ++;};_dbbf =true ;case ResultTypeNumber :if _cdcg .ValueNumber !=0{_cfab ++;
};_dbbf =true ;case ResultTypeString :case ResultTypeError :return _cdcg ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");
};};if !_dbbf {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_cfab %2!=0);};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};


// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _fecbc (args ,false )};func _ecaaa ()yyParser {return &yyParserImpl {}};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_ebgba .Lock ();defer _ebgba .Unlock ();if _ ,_eagd :=_gcbee [name ];_eagd {_fg .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_gcbee [name ]=fn ;};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_caaa :=_bb .ToLower (args [0].ValueString );if !_cecd (_caaa ){_ ,_ ,_ ,_ ,_ffb ,_dbg :=_bfd (_caaa );if _dbg .Type ==ResultTypeError {_dbg .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";
return _dbg ;};if _ffb {return MakeNumberResult (0);};};_beaf ,_ecg ,_aca ,_ ,_afe :=_cbg (_caaa );if _afe .Type ==ResultTypeError {return _afe ;};return MakeNumberResult (_fcaf (_beaf ,_ecg ,_aca ));};var _edag =false ;

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_afbf :=_aafc (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _afbf .Type !=ResultTypeEmpty {return _afbf ;};_edga :=_dbed (args );return MakeNumberResult (float64 (len (_edga )));};func _ddec (_cge []Result ,_add string )(*amorArgs ,Result ){_dcef :=len (_cge );
if _dcef !=6&&_dcef !=7{return nil ,MakeErrorResult (_add +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _cge [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_add +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_eafc :=_cge [0].ValueNumber ;if _eafc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_add +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_ebdec ,_ccgb :=_bfae (_cge [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_add );if _ccgb .Type ==ResultTypeError {return nil ,_ccgb ;};_ebcc ,_ccgb :=_bfae (_cge [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_add );
if _ccgb .Type ==ResultTypeError {return nil ,_ccgb ;};if _ebcc < _ebdec {return nil ,MakeErrorResultType (ErrorTypeNum ,_add +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");
};if _cge [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_add +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dgfg :=_cge [3].ValueNumber ;if _dgfg < 0||_dgfg > _eafc {return nil ,MakeErrorResultType (ErrorTypeNum ,_add +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");
};if _cge [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_add +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bgfg :=int (_cge [4].ValueNumber );if _bgfg < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_add +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if _cge [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_add +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_fcafb :=_cge [5].ValueNumber ;if _fcafb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_add +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");
};_bdeb :=0;if _dcef ==7&&_cge [6].Type !=ResultTypeEmpty {if _cge [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_add +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bdeb =int (_cge [6].ValueNumber );if !_cagb (_bdeb )||_bdeb ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_add );
};};return &amorArgs {_eafc ,_ebdec ,_ebcc ,_dgfg ,_bgfg ,_fcafb ,_bdeb },_gdab ;};func _cfdcd (_edgeg ,_egge ,_afea ,_bcfb ,_cecf float64 )float64 {var _bdccf float64 ;_cfag :=_cecf /_afea ;if _cfag >=1{_cfag =1;if _bcfb ==1{_bdccf =_edgeg ;}else {_bdccf =0;
};}else {_bdccf =_edgeg *_cf .Pow (1-_cfag ,_bcfb -1);};_ecef :=_edgeg *_cf .Pow (1-_cfag ,_bcfb );var _gcbe float64 ;if _ecef < _egge {_gcbe =_bdccf -_egge ;}else {_gcbe =_bdccf -_ecef ;};if _gcbe < 0{_gcbe =0;};return _gcbe ;};func (_eefe *Lexer )Next ()*node {_eefe ._ddef .Lock ();
defer _eefe ._ddef .Unlock ();if len (_eefe ._eebcg )> 0{_fdcae :=_eefe ._eebcg [0];_eefe ._eebcg =_eefe ._eebcg [1:];return _fdcae ;};return _eefe .nextRaw ();};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_fgge *ivr )GetLabelPrefix (cellRef string )string {return ""};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gbed ,_eeca ,_adb :=_gfg (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _adb .Type ==ResultTypeError {return _adb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egada :=_eeca -_gbed ;if _egada > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");
};_cdgeb :=args [2].ValueNumber ;if _cdgeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult ((365*_cdgeb )/(360-_cdgeb *_egada ));};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_cagbg Expression ;_abefd Expression ;};func _beecd ()evCache {_gab :=evCache {};_gab ._gca =make (map[string ]Result );_gab ._cgcb =&_c .Mutex {};return _gab ;};func (_ceae tokenType )String ()string {return _agegd (int (_ceae ))};


// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eded :=_dffd (args );_b .Float64s (_eded );var _dbeed float64 ;if len (_eded )%2==0{_dbeed =(_eded [len (_eded )/2-1]+_eded [len (_eded )/2])/2;}else {_dbeed =_eded [len (_eded )/2];};return MakeNumberResult (_dbeed );};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_dbce :=args [0];
if _dbce .Type !=ResultTypeArray &&_dbce .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_gaga :=_dbce .ValueArray ;if len (_gaga )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");
};return MakeNumberResult (float64 (len (_gaga [0])));};func _bfd (_fac string )(int ,int ,float64 ,bool ,bool ,Result ){_bgc :="";_dgc :=[]string {};for _daa ,_acbd :=range _bfbg {_dgc =_acbd .FindStringSubmatch (_fac );if len (_dgc )> 1{_bgc =_daa ;break ;
};};if _bgc ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dag );};_gfcf :=_dgc [1]=="";_dgc =_dgc [49:];_def :=len (_dgc );_bfeb :=_dgc [_def -1];_dfa :=_bfeb =="\u0061\u006d";_cee :=_bfeb =="\u0070\u006d";var _fada ,_acec int ;
var _gff float64 ;var _edaa error ;switch _bgc {case "\u0068\u0068":_fada ,_edaa =_ee .Atoi (_dgc [0]);if _edaa !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dag );};_acec =0;_gff =0;case "\u0068\u0068\u003am\u006d":_fada ,_edaa =_ee .Atoi (_dgc [0]);
if _edaa !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dag );};_acec ,_edaa =_ee .Atoi (_dgc [2]);if _edaa !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dag );};_gff =0;case "\u006d\u006d\u003as\u0073":_fada =0;
_acec ,_edaa =_ee .Atoi (_dgc [0]);if _edaa !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dag );};_gff ,_edaa =_ee .ParseFloat (_dgc [2],64);if _edaa !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dag );
};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_fada ,_edaa =_ee .Atoi (_dgc [0]);if _edaa !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dag );};_acec ,_edaa =_ee .Atoi (_dgc [2]);if _edaa !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dag );
};_gff ,_edaa =_ee .ParseFloat (_dgc [4],64);if _edaa !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dag );};};if _acec >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dag );};if _dfa ||_cee {if _fada > 12||_gff >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dag );
}else if _fada ==12{_fada =0;};}else if _fada >=24||_gff >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dag );};return _fada ,_acec ,_gff ,_cee ,_gfcf ,_gdab ;};

// Function is a standard function whose result only depends on its arguments.
type Function func (_bedgcc []Result )Result ;const _defeb =57375;

// Reference returns an invalid reference for Negate.
func (_dede Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_ccgg :=len (args );if _ccgg < 3||_ccgg > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dge :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dagb :=args [1].ValueNumber ;if _dagb ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ccfa :=args [2].ValueNumber ;_egbg :=0.0;if _ccgg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egbg =args [3].ValueNumber ;};_gaff :=0.0;if _ccgg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gaff =args [4].ValueNumber ;if _gaff !=0{_gaff =1;};};var _acbfg float64 ;if _dge ==0{_acbfg =(_ccfa +_egbg )/_dagb ;}else {_ecac :=_cf .Pow (1+_dge ,_dagb );if _gaff ==1{_acbfg =(_egbg *_dge /(_ecac -1)+_ccfa *_dge /(1-1/_ecac ))/(1+_dge );}else {_acbfg =_egbg *_dge /(_ecac -1)+_ccfa *_dge /(1-1/_ecac );
};};return MakeNumberResult (-_acbfg );};

// Eval evaluates the binary expression using the context given.
func (_cea BinaryExpr )String ()string {_aaa :="";switch _cea ._cg {case BinOpTypePlus :_aaa ="\u002b";case BinOpTypeMinus :_aaa ="\u002d";case BinOpTypeMult :_aaa ="\u002a";case BinOpTypeDiv :_aaa ="\u002f";case BinOpTypeExp :_aaa ="\u005e";case BinOpTypeLT :_aaa ="\u003c";
case BinOpTypeGT :_aaa ="\u003e";case BinOpTypeEQ :_aaa ="\u003d";case BinOpTypeLEQ :_aaa ="\u003c\u003d";case BinOpTypeGEQ :_aaa ="\u003e\u003d";case BinOpTypeNE :_aaa ="\u003c\u003e";case BinOpTypeConcat :_aaa ="\u0026";};return _cea ._ccb .String ()+_aaa +_cea ._bbg .String ();
};

// String returns an empty string for EmptyExpr.
func (_ecc EmptyExpr )String ()string {return ""};const _degd =_aa .Millisecond *1000;func (_fffe *noCache )SetCache (key string ,value Result ){};var _fcbac =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};
var _acde =map[string ]*_gd .Regexp {};const _baeef =57361;

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_dff :=args [0].ValueNumber ;if _dff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};_cecb :=float64 (int (args [1].ValueNumber ));if _cecb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult ((_cf .Pow (_dff +1,1/_cecb )-1)*_cecb );};func (_ecad *yyParserImpl )Lookahead ()int {return _ecad ._cbfdb };func _fca (_fga BinOpType ,_acd ,_gdb [][]Result )Result {_egg :=[][]Result {};for _dg :=range _acd {_bbgg :=_beb (_fga ,_acd [_dg ],_gdb [_dg ]);
if _bbgg .Type ==ResultTypeError {return _bbgg ;};_egg =append (_egg ,_bbgg .ValueList );};return MakeArrayResult (_egg );};func _bbc (_ed string ,_bga *_d .UpdateQuery )string {_bbd ,_ga :=_eg .ParseCellReference (_ed );if _ga !=nil {return "\u0023\u0052\u0045F\u0021";
};if _bga .UpdateType ==_d .UpdateActionRemoveColumn {_bda :=_bga .ColumnIdx ;_aeg :=_bbd .ColumnIdx ;if _aeg < _bda {return _ed ;}else if _aeg ==_bda {return "\u0023\u0052\u0045F\u0021";}else {return _bbd .Update (_d .UpdateActionRemoveColumn ).String ();
};};return _ed ;};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_fgcf :=args [0].ValueNumber ;_bbae :=args [1].ValueNumber ;if _bbae < _fgcf {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");
};if _bbae ==_fgcf {return MakeNumberResult (0);};_eaag :=_bb .ToLower (args [2].ValueString );if _eaag =="\u0064"{return MakeNumberResult (_bbae -_fgcf );};_fceg :=_gdc (_fgcf );_cfde :=_gdc (_bbae );_ebdf ,_dab ,_ece :=_fceg .Date ();_geca ,_cead ,_aef :=_cfde .Date ();
_cfb :=int (_dab );_caab :=int (_cead );var _acc float64 ;switch _eaag {case "\u0079":_acc =float64 (_geca -_ebdf );if _caab < _cfb ||(_caab ==_cfb &&_aef < _ece ){_acc --;};case "\u006d":_beg :=_geca -_ebdf ;_cfgc :=_caab -_cfb ;if _aef < _ece {_cfgc --;
};if _cfgc < 0{_beg --;_cfgc +=12;};_acc =float64 (_beg *12+_cfgc );case "\u006d\u0064":_fceee :=_caab ;if _aef < _ece {_fceee --;};_acc =float64 (int (_bbae -_fcaf (_geca ,_fceee ,_ece )));case "\u0079\u006d":_acc =float64 (_caab -_cfb );if _aef < _ece {_acc --;
};if _acc < 0{_acc +=12;};case "\u0079\u0064":_bbaf :=_geca ;if _caab < _cfb ||(_caab ==_cfb &&_aef < _ece ){_bbaf --;};_acc =float64 (int (_bbae -_fcaf (_bbaf ,_cfb ,_ece )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");
};return MakeNumberResult (_acc );};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_afbfg :=args [0];if _afbfg .Type ==ResultTypeError {return _afbfg ;
};if _afbfg .Type !=ResultTypeString &&_afbfg .Type !=ResultTypeNumber &&_afbfg .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_bcaa :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dbfbf :=int (args [1].ValueNumber );if _dbfbf < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bdbg :=int (args [2].ValueNumber );if _bdbg < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_gdgg :=len (_bcaa );if _dbfbf > _gdgg {return MakeStringResult ("");};_dbfbf --;_ffaa :=_dbfbf +_bdbg ;if _ffaa > _gdgg {return MakeStringResult (_bcaa [_dbfbf :]);}else {return MakeStringResult (_bcaa [_dbfbf :_ffaa ]);};};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_cedg :=args [0].AsNumber ();if _cedg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ddfa :=float64 (1);_bbef :=args [1].AsNumber ();if _bbef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_ddfa =_bbef .ValueNumber ;if _ddfa < 0&&_cedg .ValueNumber > 0||_ddfa > 0&&_cedg .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");
};_fgde :=_cedg .ValueNumber ;_fgde ,_dagge :=_cf .Modf (_fgde /_ddfa );if _cf .Trunc (_dagge +0.5)> 0{_fgde ++;};return MakeNumberResult (_fgde *_ddfa );};func _dggd (_ddea string ,_fdbc []Result )(*parsedSearchObject ,Result ){_aaabe :=len (_fdbc );if _aaabe !=2&&_aaabe !=3{return nil ,MakeErrorResult (_ddea +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bffbc :=_fdbc [0];if _bffbc .Type ==ResultTypeError {return nil ,_bffbc ;};if _bffbc .Type !=ResultTypeString &&_bffbc .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_debea :=_fdbc [1];if _debea .Type ==ResultTypeError {return nil ,_debea ;};if _debea .Type !=ResultTypeString &&_debea .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");
};_afbfc :=_debea .Value ();_fgafg :=_bffbc .Value ();_edadb :=1;if _aaabe ==3&&_fdbc [2].Type !=ResultTypeEmpty {_dbefcg :=_fdbc [2];if _dbefcg .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");
};_edadb =int (_dbefcg .ValueNumber );if _edadb < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};if _edadb > len (_afbfc ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};};return &parsedSearchObject {_fgafg ,_afbfc ,_edadb },_gdab ;};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_efc :=args [0].AsNumber ();_abac :=args [1].AsNumber ();if _efc .Type !=ResultTypeNumber ||_abac .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_beada :=_cf .Trunc (_efc .ValueNumber );_cbac :=_cf .Trunc (_abac .ValueNumber );if _cbac > _beada {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");
};if _cbac ==_beada ||_cbac ==0{return MakeNumberResult (1);};_dfd :=float64 (1);for _fadda :=float64 (1);_fadda <=_cbac ;_fadda ++{_dfd *=(_beada +1-_fadda )/_fadda ;};return MakeNumberResult (_dfd );};func _cbg (_dfe string )(int ,int ,int ,bool ,Result ){_adg :="";
_afad :=[]string {};for _faa ,_bdc :=range _acde {_afad =_bdc .FindStringSubmatch (_dfe );if len (_afad )> 1{_adg =_faa ;break ;};};if _adg ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );};_ddbg :=false ;var _eac ,_geed ,_bef int ;
var _dfee error ;switch _adg {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_geed ,_dfee =_ee .Atoi (_afad [1]);if _dfee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );};_bef ,_dfee =_ee .Atoi (_afad [3]);if _dfee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );
};_eac ,_dfee =_ee .Atoi (_afad [5]);if _dfee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );};if _eac < 0||_eac > 9999||(_eac > 99&&_eac < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );};_eac =_ddd (_eac );
_ddbg =_afad [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_geed =_fgg [_afad [1]];_bef ,_dfee =_ee .Atoi (_afad [14]);if _dfee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );};_eac ,_dfee =_ee .Atoi (_afad [16]);
if _dfee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );};if _eac < 0||_eac > 9999||(_eac > 99&&_eac < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );};_eac =_ddd (_eac );_ddbg =_afad [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_gag ,_deg :=_ee .Atoi (_afad [1]);
if _deg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );};_ffc ,_deg :=_ee .Atoi (_afad [3]);if _deg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );};_egec ,_deg :=_ee .Atoi (_afad [5]);if _deg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );
};if _gag >=1900&&_gag < 10000{_eac =_gag ;_geed =_ffc ;_bef =_egec ;}else if _gag > 0&&_gag < 13{_geed =_gag ;_bef =_ffc ;_eac =_egec ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );};_ddbg =_afad [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_eac ,_dfee =_ee .Atoi (_afad [16]);
if _dfee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );};_geed =_fgg [_afad [3]];_bef ,_dfee =_ee .Atoi (_afad [1]);if _dfee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );};_ddbg =_afad [19]=="";};if !_cfda (_eac ,_geed ,_bef ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bdfc );
};return _eac ,_geed ,_bef ,_ddbg ,_gdab ;};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gccg :=args [0];switch _gccg .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_fgc :=_gdc (_gccg .ValueNumber );return MakeNumberResult (float64 (_fgc .Day ()));case ResultTypeString :_ddb :=_bb .ToLower (_gccg .ValueString );if !_cecd (_ddb ){_ ,_ ,_ ,_ ,_eaa ,_eggc :=_bfd (_ddb );if _eggc .Type ==ResultTypeError {_eggc .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";
return _eggc ;};if _eaa {return MakeNumberResult (0);};};_ ,_ ,_bdf ,_ ,_ccf :=_cbg (_ddb );if _ccf .Type ==ResultTypeError {return _ccf ;};return MakeNumberResult (float64 (_bdf ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");
};};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_bfdagd NamedRangeRef )Update (q *_d .UpdateQuery )Expression {return _bfdagd };

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_bab :=len (args );if _bab < 4||_bab > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ccgd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgfef :=args [1].ValueNumber ;if _cgfef <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfgcd :=args [2].ValueNumber ;if _cfgcd < _cgfef {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_fbg :=args [3].ValueNumber ;_cffe :=0.0;if _bab >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cffe =args [4].ValueNumber ;};_ebae :=0;if _bab ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ebae =int (args [5].ValueNumber );if _ebae !=0{_ebae =1;};};return MakeNumberResult (_aag (_ccgd ,_cfgcd ,_fbg ,_cffe ,_ebae )-_dcdd (_ccgd ,_cgfef ,_cfgcd ,_fbg ,_cffe ,_ebae ));};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_ggd :=len (args );if _ggd < 3||_ggd > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bacc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_dbga :=args [1].ValueNumber ;if _dbga !=float64 (int (_dbga )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dcgb :=args [2].ValueNumber ;_cga :=0.0;if _ggd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cga =args [3].ValueNumber ;};_bfc :=0;if _ggd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bfc =int (args [4].ValueNumber );if _bfc !=0{_bfc =1;};};return MakeNumberResult (_gbd (_bacc ,_dbga ,_dcgb ,_cga ,_bfc ));};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_ccga ,_cabg :=_eeag (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _cabg .Type ==ResultTypeError {return _cabg ;};_efbb :=_ccga ._gdbg ;_edca :=_ccga ._egeg ;_ffgd :=_ccga ._eegb ;_cfbd :=_ccga ._ggaca ;_gebd :=_ccga ._gbac ;
_edgg :=_ccga ._bed ;_gcca :=_aag (_efbb ,_edca ,_ffgd ,0,_edgg );_dcbd :=0.0;if _cfbd ==1{if _edgg ==0{_dcbd =-_ffgd ;_cfbd ++;};};for _gef :=_cfbd ;_gef <=_gebd ;_gef ++{if _edgg ==1{_dcbd +=_gbd (_efbb ,_gef -2,_gcca ,_ffgd ,1)-_gcca ;}else {_dcbd +=_gbd (_efbb ,_gef -1,_gcca ,_ffgd ,0);
};};_dcbd *=_efbb ;return MakeNumberResult (_dcbd );};

// Reference returns an invalid reference for Number.
func (_caafe Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_cbf CellRef )Update (q *_d .UpdateQuery )Expression {if q .UpdateCurrentSheet {_cbf ._cfd =_bbc (_cbf ._cfd ,q );};return _cbf ;};func _aabca (){_fedgb =_gd .MustCompile ("\u005e\u0030\u002b\u0024");_abad =_gd .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");
_cedf =_gd .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_fceb =_gd .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_efacf =_gd .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");
_efedd =_gd .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_eabee =_gd .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");
_gdbc =_gd .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_ceece =_gd .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");
_cfcgg =_gd .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");
_dcdb =_gd .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");
_adfab =_gd .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_degfg +_degfg +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_degfg +_degfg +"\u0029\u002b\u0059+\u0024");_adaee =_gd .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_degfg +_degfg +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_degfg +_degfg +"\u0029\u002b\u0059+\u0024");
_aage =_gd .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_edfc =_gd .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");
};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ddbf :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_adce :=args [2].ValueNumber +1;if _adce ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bdfd :=_badec (args [0]);_gdcd :=float64 (len (_bdfd ));_gbdc ,_ecce :=0.0,0.0;_gdde ,_aafd :=1.0,1.0;_cegg ,_fdge :=false ,false ;for _ ,_agg :=range _bdfd {for _ ,_afb :=range _agg {if _afb .Type ==ResultTypeNumber &&!_afb .IsBoolean {_gede :=_afb .ValueNumber ;
if _gede ==0{continue ;}else {if _gede > 0{_cegg =true ;_ecce +=_afb .ValueNumber *_aafd ;}else {_fdge =true ;_gbdc +=_afb .ValueNumber *_gdde ;};_gdde /=_ddbf ;_aafd /=_adce ;};};};};if !_cegg ||!_fdge {return MakeErrorResultType (ErrorTypeDivideByZero ,"");
};_fgbg :=-_ecce /_gbdc ;_fgbg *=_cf .Pow (_adce ,_gdcd -1);_fgbg =_cf .Pow (_fgbg ,1/(_gdcd -1));return MakeNumberResult (_fgbg -1);};

// Eval evaluates and returns the result of an empty expression.
func (_afab EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// String returns a string representation of a vertical range.
func (_ebfag VerticalRange )String ()string {return _ebfag .verticalRangeReference ()};func _agegd (_afaga int )string {if _afaga >=1&&_afaga -1< len (_eeed ){if _eeed [_afaga -1]!=""{return _eeed [_afaga -1];};};return _g .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_afaga );
};func _bcbe (_fgee yyLexer ,_ccabg *yySymType )(_bfda ,_gfef int ){_gfef =0;_bfda =_fgee .Lex (_ccabg );if _bfda <=0{_gfef =_eebbe [0];goto _ccbcb ;};if _bfda < len (_eebbe ){_gfef =_eebbe [_bfda ];goto _ccbcb ;};if _bfda >=_cbccfd {if _bfda < _cbccfd +len (_bbea ){_gfef =_bbea [_bfda -_cbccfd ];
goto _ccbcb ;};};for _cebbb :=0;_cebbb < len (_gafeaf );_cebbb +=2{_gfef =_gafeaf [_cebbb +0];if _gfef ==_bfda {_gfef =_gafeaf [_cebbb +1];goto _ccbcb ;};};_ccbcb :if _gfef ==0{_gfef =_bbea [1];};if _aaded >=3{_g .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_agegd (_gfef ),uint (_bfda ));
};return _bfda ,_gfef ;};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_aeebb :=len (args );if _aeebb < 4||_aeebb > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_acae :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfdc :=args [1].ValueNumber ;if _cfdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfgc :=args [2].ValueNumber ;if _gfgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_bddd :=args [3].ValueNumber ;_eabg :=0.0;if _aeebb > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_eabg =args [4].ValueNumber ;};_bcff :=0;if _aeebb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bcff =int (args [5].ValueNumber );if _bcff !=0{_bcff =1;};};return MakeNumberResult (_dcdd (_acae ,_cfdc ,_gfgc ,_bddd ,_eabg ,_bcff ));};const _ddge =57347;

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_eadf :=args [0].AsNumber ();
_badfd :=args [1].AsNumber ();if _eadf .Type ==ResultTypeNumber &&_badfd .Type ==ResultTypeNumber {_facc :=_cf .Atan2 (_badfd .ValueNumber ,_eadf .ValueNumber );if _facc !=_facc {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");
};return MakeNumberResult (_facc );};for _ ,_gade :=range []ResultType {_eadf .Type ,_badfd .Type }{switch _gade {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
case ResultTypeError :return _eadf ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gade ));
};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Reference returns a string reference value to an expression with prefix.
func (_geebbc PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_aece :=_geebbc ._cagbg .Reference (ctx ,ev );_gbfe :=_geebbc ._abefd .Reference (ctx ,ev );if _aece .Type ==ReferenceTypeSheet &&_gbfe .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_aece .Value +"\u0021"+_gbfe .Value };
};return ReferenceInvalid ;};const _bdbda =57350;type xargs struct{_gdgb []float64 ;_gegb []float64 ;};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_ddadc :=_e .Buffer {};for _ ,_cfeab :=range args {switch _cfeab .Type {case ResultTypeString :_ddadc .WriteString (_cfeab .ValueString );case ResultTypeNumber :var _dacd string ;if _cfeab .IsBoolean {if _cfeab .ValueNumber ==0{_dacd ="\u0046\u0041\u004cS\u0045";
}else {_dacd ="\u0054\u0052\u0055\u0045";};}else {_dacd =_cfeab .AsString ().ValueString ;};_ddadc .WriteString (_dacd );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
};};return MakeStringResult (_ddadc .String ());};func _eaddd (_ddba ,_ebfaaa ,_ebggf Reference )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_ddba .Value ,_ebfaaa .Value ,_ebggf .Value );};var _gda =[]int {31,28,31,30,31,30,31,31,30,31,30,31};
const _cddfc int =30;func _bgcc (_bgcf ,_bgb int64 )float64 {return float64 (int (0.5+float64 ((_bgb -_bgcf )/86400)))};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_adgc ,_abce int };

// String is a string expression.
type String struct{_efcb string };

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (ev .LastEvalIsRef ());};

// String returns a string of a range.
func (_daee Range )String ()string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_daee ._fddg .String (),_daee ._bfeg .String ());};const _gdcfa =57358;func (_dbfca *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");
};

// String returns an empty string for Error.
func (_aed Error )String ()string {return ""};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;const (_cdfd rmode =iota ;_dabce ;_edef ;);

// String returns a string representation of PrefixExpr.
func (_ggdaf PrefixExpr )String ()string {return _g .Sprintf ("\u0025\u0073\u0021%\u0073",_ggdaf ._cagbg .String (),_ggdaf ._abefd .String ());};func (_dbfgb *ivr )Sheet (name string )Context {return _dbfgb };

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _cfee ,_fcd float64 ;switch args [0].Type {case ResultTypeNumber :_fcd =args [0].ValueNumber ;
case ResultTypeString :_gec :=DateValue ([]Result {args [0]});if _gec .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");
};_fcd =_gec .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_cfee =args [1].ValueNumber ;
if _cfee < 62&&_fcd >=62{_cfee --;};case ResultTypeString :_cagg :=DateValue ([]Result {args [1]});if _cagg .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");
};_cfee =_cagg .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_cgda :=float64 (int (_fcd -_cfee ));return MakeNumberResult (_cgda );
};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_ebgba .Lock ();defer _ebgba .Unlock ();if _cgdbb ,_gfbe :=_gcbee [name ];_gfbe {return _cgdbb ;};return nil ;};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aegae :=args [0].AsNumber ();if _aegae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _aegae .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_gddf :=float64 (1);_dggf :=_cf .Trunc (_aegae .ValueNumber );for _ecae :=_dggf ;_ecae > 1;_ecae -=2{_gddf *=_ecae ;};return MakeNumberResult (_gddf );};func _fcaf (_eaf ,_bbag ,_fea int )float64 {return float64 (_cgf (_eaf ,_aa .Month (_bbag ),_fea )/86400)+_ebd ;
};func (_fgbd Result )String ()string {return _fgbd .Value ()};

// Match implements the MATCH function.
func Match (args []Result )Result {_fcda :=len (args );if _fcda !=2&&_fcda !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_cfaee :=1;if _fcda ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_cgca :=args [2].ValueNumber ;if _cgca ==-1||_cgca ==0{_cfaee =int (_cgca );};};_ecde :=args [1];var _bgg []Result ;switch _ecde .Type {case ResultTypeList :_bgg =_ecde .ValueList ;case ResultTypeArray :_aaaa :=_ecde .ValueArray ;for _ ,_ddbd :=range _aaaa {if len (_ddbd )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_bgg =append (_bgg ,_ddbd [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_eggcc :=_egfb (args [0]);switch _cfaee {case 0:for _addg ,_fecfg :=range _bgg {if _abga (_fecfg ,_eggcc ){return MakeNumberResult (float64 (_addg +1));};};case -1:for _bbcdb :=0;_bbcdb < len (_bgg );_bbcdb ++{if _abga (_bgg [_bbcdb ],_eggcc ){return MakeNumberResult (float64 (_bbcdb +1));
};if _eggcc ._cgcd &&(_bgg [_bbcdb ].ValueNumber < _eggcc ._afcf ){if _bbcdb ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_bbcdb ));};};case 1:for _ddbe :=0;_ddbe < len (_bgg );_ddbe ++{if _abga (_bgg [_ddbe ],_eggcc ){return MakeNumberResult (float64 (_ddbe +1));
};if _eggcc ._cgcd &&(_bgg [_ddbe ].ValueNumber > _eggcc ._afcf ){if _ddbe ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_ddbe ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// IsDBCS returns false for the invalid reference context.
func (_cfdfg *ivr )IsDBCS ()bool {return false };const _ebdbb ="\u0028\u0020\u0028"+_fae +"\u007c"+_ebdb +"\u007c"+_ada +"\u007c"+_bbb +"\u0029\u0029\u003f\u0024";

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_dcfc string };func _cdfcb (_ccde Result )Result {if _ccde .Type ==ResultTypeEmpty {return _ccde ;};_geedb :=_ccde .AsString ();if _geedb .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _ccde .IsBoolean {if _geedb .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _geedb .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};}else {return MakeStringResult (_bb .ToLower (_geedb .ValueString ));};};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_fbd :=int (args [0].ValueNumber );if _fbd < 0||_fbd >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _fbd <=1899{_fbd +=1900;};_eae :=_aa .Month (args [1].ValueNumber );
_dcg :=int (args [2].ValueNumber );_bea :=_cgf (_fbd ,_eae ,_dcg );_fcgf :=_bgcc (_egf ,_bea )+1;if _fcgf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_fcgf );
};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};var _dddb =[...]int {-1,1,1,-1,-2,0};type countMode byte ;

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_deb :=args [0];switch _deb .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_fdc :=_gdc (_deb .ValueNumber );return MakeNumberResult (float64 (_fdc .Minute ()));case ResultTypeString :_fbc :=_bb .ToLower (_deb .ValueString );if !_dea (_fbc ){_ ,_ ,_ ,_dfg ,_dbfg :=_cbg (_fbc );if _dbfg .Type ==ResultTypeError {_dbfg .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";
return _dbfg ;};if _dfg {return MakeNumberResult (0);};};_ ,_bfea ,_ ,_ ,_ ,_dbee :=_bfd (_fbc );if _dbee .Type ==ResultTypeError {return _dbee ;};return MakeNumberResult (float64 (_bfea ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");
};};func _bac (_gdbe string ,_fdb uint32 )string {_eec :=_eg .ColumnToIndex (_gdbe );if _eec ==_fdb {return "\u0023\u0052\u0045F\u0021";}else if _eec > _fdb {return _eg .IndexToColumn (_eec -1);}else {return _gdbe ;};};func _egfb (_bffd Result )*criteriaParsed {_bbbb :=_bffd .Type ==ResultTypeNumber ;
_baeg :=_bffd .ValueNumber ;_eagc :=_bb .ToLower (_bffd .ValueString );_adafg :=_fffd (_eagc );return &criteriaParsed {_bbbb ,_baeg ,_eagc ,_adafg };};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};const _gafg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";


// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_cadf :=args [0];
if _cadf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dbdb :=int (_cadf .ValueNumber );if _dbdb < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");
};if len (args )<=_dbdb {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");
};return args [_dbdb ];};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];
case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));
default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gabb :=args [0].AsNumber ();_eacff :=args [1].AsNumber ();_abcb :=args [2].AsNumber ();_gbgaa :=args [3].ListValues ();if _gabb .Type !=ResultTypeNumber ||_eacff .Type !=ResultTypeNumber ||_abcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_cdae :=float64 (0);for _fgaf ,_daea :=range _gbgaa {_cdae +=_daea .ValueNumber *_cf .Pow (_gabb .ValueNumber ,_eacff .ValueNumber +float64 (_fgaf )*_abcb .ValueNumber );};return MakeNumberResult (_cdae );};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gffdb :=args [0].AsNumber ();if _gffdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (180.0/_cf .Pi *_gffdb .ValueNumber );};const _cec ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_ggf +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";var _adfe =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};


// Eval evaluates and returns the result of a formula.
func (_fab *defEval )Eval (ctx Context ,formula string )Result {_bc :=ParseString (formula );_aff :=make (chan Result );go func (){if _bc ==nil {_aff <-MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));
}else {_fab .checkLastEvalIsRef (ctx ,_bc );_aff <-_bc .Eval (ctx ,_fab );};}();select{case _fe :=<-_aff :return _fe ;case <-_aa .After (_egeb ):_fg .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");
return MakeNumberResult (0);};};

// String returns a string representation for Negate.
func (_afbfa Negate )String ()string {return "\u002d"+_afbfa ._fegef .String ()};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};func _cfda (_cbd ,_ebdfc ,_bdce int )bool {if _ebdfc < 1||_ebdfc > 12{return false ;};if _bdce < 1{return false ;};return _bdce <=_bebg (_cbd ,_ebdfc );};

// FunctionCall is a function call expression.
type FunctionCall struct{_gaad string ;_ddbcb []Expression ;};const _fae ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";func _baegg (_fccb []Result )(bool ,Result ){for _ ,_bebb :=range _fccb {if _bebb .Type ==ResultTypeError {return true ,_bebb ;
};};return false ,MakeEmptyResult ();};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ccb ,_bbg Expression ;_cg BinOpType ;};func _gdc (_gfc float64 )_aa .Time {_abed :=int64 ((_gfc -_ebd )*_afcb );return _aa .Unix (0,_abed ).UTC ();};

// String returns a string representation of a horizontal range with prefix.
func (_edfd PrefixHorizontalRange )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_edfd ._bbec .String (),_edfd ._agdd ,_edfd ._gface );};func _bcefe (_gfdg []Result ,_ggcd []string ,_edae bool )[]string {for _ ,_ggaa :=range _gfdg {switch _ggaa .Type {case ResultTypeEmpty :if !_edae {_ggcd =append (_ggcd ,"");
};case ResultTypeString :if _ggaa .ValueString !=""||!_edae {_ggcd =append (_ggcd ,_ggaa .ValueString );};case ResultTypeNumber :_ggcd =append (_ggcd ,_ggaa .Value ());case ResultTypeList :_ggcd =_babde (_ggcd ,_bcefe (_ggaa .ValueList ,[]string {},_edae ));
case ResultTypeArray :for _ ,_cccea :=range _ggaa .ValueArray {_ggcd =_babde (_ggcd ,_bcefe (_cccea ,[]string {},_edae ));};};};return _ggcd ;};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_gbea :=len (args );if _gbea ==0||_gbea > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");
};_faba :=_badec (args [0]);_bgfa :=[]float64 {};for _ ,_dee :=range _faba {for _ ,_ffbcd :=range _dee {if _ffbcd .Type ==ResultTypeNumber &&!_ffbcd .IsBoolean {_bgfa =append (_bgfa ,_ffbcd .ValueNumber );};};};_abdg :=len (_bgfa );if len (_bgfa )< 2{return MakeErrorResultType (ErrorTypeNum ,"");
};_ebebf :=0.1;if _gbea ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ebebf =args [1].ValueNumber ;if _ebebf <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");
};};_cce :=[]float64 {};for _ged :=0;_ged < _abdg ;_ged ++{if _ged ==0{_cce =append (_cce ,0);}else {_cce =append (_cce ,_cce [_ged -1]+365);};};return _gfa (_bgfa ,_cce ,_ebebf );};func _fcgb (_abede yyLexer )int {return _ecaaa ().Parse (_abede )};const _cddf =57354;
type parsedSearchObject struct{_dggac string ;_eaadg string ;_aaabb int ;};func _gbgbg (_adcf ,_afcgb int )string {const TOKSTART =4;if !_bbeac {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_adcdf :=range _cdede {if _adcdf ._ggfbb ==_adcf &&_adcdf ._bbba ==_afcgb {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_adcdf ._gfdce ;
};};_bbgdc :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_agegd (_afcgb );_adcdd :=make ([]int ,0,4);_caea :=_dfdg [_adcf ];for _baaef :=TOKSTART ;_baaef -1< len (_eeed );_baaef ++{if _dfcb :=_caea +_baaef ;
_dfcb >=0&&_dfcb < _dcdbf &&_cacbf [_gafa [_dfcb ]]==_baaef {if len (_adcdd )==cap (_adcdd ){return _bbgdc ;};_adcdd =append (_adcdd ,_baaef );};};if _fcbac [_adcf ]==-2{_eaeba :=0;for _dddb [_eaeba ]!=-1||_dddb [_eaeba +1]!=_adcf {_eaeba +=2;};for _eaeba +=2;
_dddb [_eaeba ]>=0;_eaeba +=2{_abgd :=_dddb [_eaeba ];if _abgd < TOKSTART ||_dddb [_eaeba +1]==0{continue ;};if len (_adcdd )==cap (_adcdd ){return _bbgdc ;};_adcdd =append (_adcdd ,_abgd );};if _dddb [_eaeba +1]!=0{return _bbgdc ;};};for _gffa ,_dcfe :=range _adcdd {if _gffa ==0{_bbgdc +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";
}else {_bbgdc +="\u0020\u006f\u0072\u0020";};_bbgdc +=_agegd (_dcfe );};return _bbgdc ;};func _gcgc (_cfad Result ,_eegcb ,_ddaf int )[][]Result {_dcgbe :=[][]Result {};switch _cfad .Type {case ResultTypeArray :for _ecbe ,_fdeg :=range _cfad .ValueArray {if _ecbe < _eegcb {_dcgbe =append (_dcgbe ,_fdcd (MakeListResult (_fdeg ),_ddaf ));
}else {_dcgbe =append (_dcgbe ,_fdcd (MakeErrorResultType (ErrorTypeNA ,""),_ddaf ));};};case ResultTypeList :_ggcg :=_fdcd (_cfad ,_ddaf );for _adbg :=0;_adbg < _eegcb ;_adbg ++{_dcgbe =append (_dcgbe ,_ggcg );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _bbceg :=0;
_bbceg < _eegcb ;_bbceg ++{_ceff :=_fdcd (_cfad ,_ddaf );_dcgbe =append (_dcgbe ,_ceff );};};return _dcgbe ;};type tokenType int ;const _gfdcc int =0;const _becaa =57357;

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bdfcd :=args [0].Type ;for _ ,_gccf :=range args {if _gccf .Type !=_bdfcd {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");
};};switch _bdfcd {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_aeaf :=len (args [0].ListValues ());_gbef :=make ([]float64 ,_aeaf );for _dbdd :=range _gbef {_gbef [_dbdd ]=1.0;};for _ ,_dbde :=range args {if len (_dbde .ListValues ())!=_aeaf {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");
};for _ccdd ,_abdc :=range _dbde .ListValues (){_abdc =_abdc .AsNumber ();if _abdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");
};_gbef [_ccdd ]=_gbef [_ccdd ]*_abdc .ValueNumber ;};};_ffga :=0.0;for _ ,_fdbb :=range _gbef {_ffga +=_fdbb ;};return MakeNumberResult (_ffga );};return MakeNumberResult (1.0);};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_geebb (args ,_deef ))};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_acfca :=[]float64 {};
for _ ,_caca :=range args {switch _caca .Type {case ResultTypeString :_bcag :=_caca .AsNumber ();if _bcag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_acfca =append (_acfca ,_bcag .ValueNumber );case ResultTypeList :_cfac :=LCM (_caca .ValueList );if _cfac .Type !=ResultTypeNumber {return _cfac ;};_acfca =append (_acfca ,_cfac .ValueNumber );case ResultTypeNumber :_acfca =append (_acfca ,_caca .ValueNumber );
case ResultTypeEmpty :case ResultTypeError :return _caca ;};};if len (_acfca )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if _acfca [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_acfca )==1{return MakeNumberResult (_acfca [0]);
};_cfeec :=_acfca [0];for _bdae :=1;_bdae < len (_acfca );_bdae ++{if _acfca [_bdae ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_cfeec =_bagb (_cfeec ,_acfca [_bdae ]);};return MakeNumberResult (_cfeec );};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_ccda ,_feaa :=_efec (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _feaa .Type ==ResultTypeError {return _feaa ;};return MakeNumberResult (_dga (_ccda ._faec ,_ccda ._dbba ,_ccda ._bbce ,_ccda ._gcgd ));
};type ri struct{_dafa float64 ;_beag string ;};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};func _fcaa (_adfaa []Result ,_bfecg rmode )Result {if len (_adfaa )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dcaf :=_adfaa [0].AsNumber ();if _dcaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gbeg :=_adfaa [1].AsNumber ();if _gbeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_agea :=_gbeg .ValueNumber ;_fcfebe :=_dcaf .ValueNumber ;_abacb :=1.0;if _agea > 0{_abacb =_cf .Pow (1/10.0,_agea );}else {_abacb =_cf .Pow (10.0,-_agea );};_fcfebe ,_ggce :=_cf .Modf (_fcfebe /_abacb );switch _bfecg {case _cdfd :const _gfec =0.499999999;
if _ggce >=_gfec {_fcfebe ++;}else if _ggce <=-_gfec {_fcfebe --;};case _dabce :case _edef :if _ggce > 0{_fcfebe ++;}else if _ggce < 0{_fcfebe --;};};return MakeNumberResult (_fcfebe *_abacb );};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_aefb ,_dbbe :=_efec (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _dbbe .Type ==ResultTypeError {return _dbbe ;};return MakeNumberResult (_acdbc (_aefb ._faec ,_aefb ._dbba ,_aefb ._bbce ,_aefb ._gcgd ));
};const _fdfa int =30;type criteriaRegex struct{_aebefe byte ;_ddgc string ;};const _cecgf =57376;

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_aacb :=[]float64 {};
for _ ,_gfdfe :=range args {switch _gfdfe .Type {case ResultTypeString :_gefce :=_gfdfe .AsNumber ();if _gefce .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_aacb =append (_aacb ,_gefce .ValueNumber );case ResultTypeList ,ResultTypeArray :_cecba :=GCD (_gfdfe .ListValues ());if _cecba .Type !=ResultTypeNumber {return _cecba ;};_aacb =append (_aacb ,_cecba .ValueNumber );case ResultTypeNumber :_aacb =append (_aacb ,_gfdfe .ValueNumber );
case ResultTypeError :return _gfdfe ;default:return MakeErrorResult (_g .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gfdfe .Type ));
};};if _aacb [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_aacb )==1{return MakeNumberResult (_aacb [0]);
};_fgeg :=_aacb [0];for _aceb :=1;_aceb < len (_aacb );_aceb ++{if _aacb [_aceb ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fgeg =_bcfgc (_fgeg ,_aacb [_aceb ]);};return MakeNumberResult (_fgeg );};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_cegfg ,_aefbe string };func _cac (_cae []Result ,_gaee string )(*durationArgs ,Result ){_fgcc :=len (_cae );if _fgcc !=5&&_fgcc !=6{return nil ,MakeErrorResult (_gaee +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bfgd ,_gac ,_dfeb :=_gfg (_cae [0],_cae [1],_gaee );if _dfeb .Type ==ResultTypeError {return nil ,_dfeb ;};_cfae :=_cae [2];if _cfae .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gaee +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_bde :=_cfae .ValueNumber ;if _bde < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_befg :=_cae [3];if _befg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gaee +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_adc :=_befg .ValueNumber ;if _adc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_abd :=_cae [4];if _abd .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gaee +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_afag :=float64 (int (_abd .ValueNumber ));if !_eccg (_afag ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bffgg :=0;if _fgcc ==6&&_cae [5].Type !=ResultTypeEmpty {_cdge :=_cae [5];
if _cdge .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gaee +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bffgg =int (_cdge .ValueNumber );
if !_cagb (_bffgg ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_gaee );};};return &durationArgs {_bfgd ,_gac ,_bde ,_adc ,_afag ,_bffgg },_gdab ;
};func _eddc (_geec ,_edgbb ,_dbad float64 )float64 {return (_geec *3600+_edgbb *60+_dbad )/86400};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _dfffa (args ,true )};func (_gbbg *evCache )SetCache (key string ,value Result ){_gbbg ._cgcb .Lock ();_gbbg ._gca [key ]=value ;_gbbg ._cgcb .Unlock ();};

// Number is a nubmer expression.
type Number struct{_ggdb float64 };func _aad (_gcb BinOpType ,_db [][]Result ,_dc Result )Result {_dba :=[][]Result {};for _fcg :=range _db {_ccba :=_ce (_gcb ,_db [_fcg ],_dc );if _ccba .Type ==ResultTypeError {return _ccba ;};_dba =append (_dba ,_ccba .ValueList );
};return MakeArrayResult (_dba );};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_aeccf PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_cedfb :=_aeccf ._bbec .Reference (ctx ,ev );switch _cedfb .Type {case ReferenceTypeSheet :if _ebcaa (_cedfb ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_cedfb .Value ));
};_cbec :=_aeccf .horizontalRangeReference (_cedfb .Value );if _dgfabf ,_cbcf :=ev .GetFromCache (_cbec );_cbcf {return _dgfabf ;};_bbbe :=ctx .Sheet (_cedfb .Value );_gcaa ,_cfegbg :=_ggggc (_bbbe ,_aeccf ._agdd ,_aeccf ._gface );_bfbd :=_cggbdc (_bbbe ,ev ,_gcaa ,_cfegbg );
ev .SetCache (_cbec ,_bfbd );return _bfbd ;default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cedfb .Type ));
};};const _bfbgb =57352;

// Error is called in the case of parsing error and saves an error to a plex.
func (_bfbga *plex )Error (s string ){_fg .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_bfbga ._aagg =s ;};func _acfc (_dgg ,_acea _aa .Time ,_ggac int )_aa .Time {_fabg :=_aa .Date (_dgg .Year (),_acea .Month (),_acea .Day (),0,0,0,0,_aa .UTC );
if _fabg .After (_dgg ){_fabg =_fabg .AddDate (-1,0,0);};for !_fabg .After (_dgg ){_fabg =_fabg .AddDate (0,12/_ggac ,0);};return _fabg ;};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_gagcd :=_bb .Split (v ,"\u003a");if len (_gagcd )!=2{return nil ;};_cfbde ,_ :=_ee .Atoi (_gagcd [0]);_deed ,_ :=_ee .Atoi (_gagcd [1]);if _cfbde > _deed {_cfbde ,_deed =_deed ,_cfbde ;};return HorizontalRange {_adgc :_cfbde ,_abce :_deed };
};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_caddb ,_bgafe ,_fdcbc :=_gfg (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _fdcbc .Type ==ResultTypeError {return _fdcbc ;};_cdf ,_fdcbc :=_bfae (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _fdcbc .Type ==ResultTypeError {return _fdcbc ;};if _cdf >=_caddb {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cgfe :=args [3].ValueNumber ;if _cgfe < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gbce :=args [4].ValueNumber ;if _gbce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_fegaf :=args [5].ValueNumber ;if _fegaf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cacd :=float64 (int (args [6].ValueNumber ));if !_eccg (_cacd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dfff :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dfff =int (args [7].ValueNumber );if !_cagb (_dfff ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");
};};_cefa ,_fdcbc :=_accg (_cdf ,_bgafe ,_dfff );if _fdcbc .Type ==ResultTypeError {return _fdcbc ;};_cefa *=_cacd ;_cdfb ,_fdcbc :=_accg (_caddb ,_bgafe ,_dfff );if _fdcbc .Type ==ResultTypeError {return _fdcbc ;};_cdfb *=_cacd ;_ggde ,_fdcbc :=_accg (_cdf ,_caddb ,_dfff );
if _fdcbc .Type ==ResultTypeError {return _fdcbc ;};_ggde *=_cacd ;_cadcb :=_fegaf +_cefa *100*_cgfe /_cacd ;_cadcb /=_gbce +_ggde *100*_cgfe /_cacd ;_cadcb --;_cadcb *=_cacd /_cdfb ;return MakeNumberResult (_cadcb );};var _degfg string =string ([]byte {92});


// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_ebfd ,_abg :=_efec (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _abg .Type ==ResultTypeError {return _abg ;};_eacd :=_gdc (_ebfd ._faec );_dbgf :=_gdc (_ebfd ._dbba );_cgbg :=_ebfd ._bbce ;_ageg :=_ebfd ._gcgd ;
_abbe :=_aceca (_eacd ,_dbgf ,_cgbg ,_ageg );_fdcf ,_gfe ,_gdcc :=_abbe .Date ();return MakeNumberResult (_fcaf (_fdcf ,int (_gfe ),_gdcc ));};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_agbb :=_aafc (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _agbb .Type !=ResultTypeEmpty {return _agbb ;};_beee :=_dbed (args [1:]);_geda :=0.0;_gfgb :=_badec (args [0]);for _ ,_dgae :=range _beee {_geda +=_gfgb [_dgae ._ccbc ][_dgae ._ceadc ].ValueNumber ;
};return MakeNumberResult (float64 (_geda ));};func _beb (_ec BinOpType ,_bg ,_gc []Result )Result {_bba :=[]Result {};for _ge :=range _bg {_ege :=_bg [_ge ].AsNumber ();_de :=_gc [_ge ].AsNumber ();if _ege .Type !=ResultTypeNumber ||_de .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _ec {case BinOpTypePlus :_bba =append (_bba ,MakeNumberResult (_ege .ValueNumber +_de .ValueNumber ));case BinOpTypeMinus :_bba =append (_bba ,MakeNumberResult (_ege .ValueNumber -_de .ValueNumber ));case BinOpTypeMult :_bba =append (_bba ,MakeNumberResult (_ege .ValueNumber *_de .ValueNumber ));
case BinOpTypeDiv :if _de .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bba =append (_bba ,MakeNumberResult (_ege .ValueNumber /_de .ValueNumber ));case BinOpTypeExp :_bba =append (_bba ,MakeNumberResult (_cf .Pow (_ege .ValueNumber ,_de .ValueNumber )));
case BinOpTypeLT :_bba =append (_bba ,MakeBoolResult (_ege .ValueNumber < _de .ValueNumber ));case BinOpTypeGT :_bba =append (_bba ,MakeBoolResult (_ege .ValueNumber > _de .ValueNumber ));case BinOpTypeEQ :_bba =append (_bba ,MakeBoolResult (_ege .ValueNumber ==_de .ValueNumber ));
case BinOpTypeLEQ :_bba =append (_bba ,MakeBoolResult (_ege .ValueNumber <=_de .ValueNumber ));case BinOpTypeGEQ :_bba =append (_bba ,MakeBoolResult (_ege .ValueNumber >=_de .ValueNumber ));case BinOpTypeNE :_bba =append (_bba ,MakeBoolResult (_ege .ValueNumber !=_de .ValueNumber ));
default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ec ));};};return MakeListResult (_bba );};func _aebe (_feac ,_bdgc float64 ,_ffg ,_dcdc int )float64 {_abeg :=_gdc (_feac );
_deaa :=_gdc (_bdgc );_gabe :=_acfc (_abeg ,_deaa ,_ffg );return _ecgdf (_abeg ,_gabe ,_dcdc );};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dgcc :=args [0].AsString ();if _dgcc .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};return ctx .Cell (_dgcc .ValueString ,ev );};

// Eval evaluates and returns the result of the cell reference.
func (_eee CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_eee ._cfd ,ev )};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_efece :=args [0].AsNumber ();
if _efece .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ebgbb :=args [1].AsNumber ();if _ebgbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fffa :=int (_ebgbb .ValueNumber );if _fffa < 0||_fffa > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");
};_gggaf :=0;if len (args )> 2{_eege :=args [2].AsNumber ();if _eege .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gggaf =int (_eege .ValueNumber );};_ecfbg :=_ee .FormatInt (int64 (_efece .ValueNumber ),_fffa );if len (_ecfbg )< _gggaf {_ecfbg =_bb .Repeat ("\u0030",_gggaf -len (_ecfbg ))+_ecfbg ;};return MakeStringResult (_ecfbg );};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_bgcac :=args [0].AsNumber ();if _bgcac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _bgcac .ValueNumber < 0{return MakeNumberResult (-1);}else if _bgcac .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_afdb :=&defEval {};_afdb .evCache =_beecd ();return _afdb };type Expression interface{Eval (_ad Context ,_bad Evaluator )Result ;Reference (_fda Context ,_bcg Evaluator )Reference ;String ()string ;Update (_fde *_d .UpdateQuery )Expression ;
};

// String returns a string representation of String.
func (_cegfd String )String ()string {return "\u0022"+_cegfd ._efcb +"\u0022"};const _dffag ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";
func _babde (_bcfcb ,_dbcc []string )[]string {for _ ,_ffddf :=range _dbcc {_bcfcb =append (_bcfcb ,_ffddf );};return _bcfcb ;};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_dedg :=args [0];if _dedg .Type !=ResultTypeNumber &&_dedg .Type !=ResultTypeString &&_dedg .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");
};_cdfce :=args [1].ValueString ;switch _dedg .Type {case ResultTypeNumber :return MakeStringResult (_cd .Number (_dedg .ValueNumber ,_cdfce ));case ResultTypeString :return MakeStringResult (_cd .String (_dedg .ValueString ,_cdfce ));case ResultTypeEmpty :return MakeStringResult (_cd .Number (0,_cdfce ));
case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");
};};const _geedff ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";


// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_adbfe ,_ageag :=_dggd ("\u0046\u0049\u004e\u0044",args );if _ageag .Type !=ResultTypeEmpty {return _ageag ;};_fecg :=_adbfe ._dggac ;if _fecg ==""{return MakeNumberResult (1.0);
};_abdgb :=_adbfe ._eaadg ;_afgde :=_adbfe ._aaabb -1;_adbfa :=1;_gfgbc :=0;for _acecab :=range _abdgb {if _acecab !=0{_gecgb :=1;if _acecab -_gfgbc > 1{_gecgb =2;};_adbfa +=_gecgb ;};if _adbfa > _afgde {_ffbbf :=_bb .Index (_abdgb [_acecab :],_fecg );
if _ffbbf ==0{return MakeNumberResult (float64 (_adbfa ));};};_gfgbc =_acecab ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};const _dd ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";
