//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_fg "bytes";_c "errors";_g "fmt";_gf "github.com/unidoc/unioffice/common/logger";_fd "github.com/unidoc/unioffice/internal/mergesort";_ce "github.com/unidoc/unioffice/internal/wildcard";_ded "github.com/unidoc/unioffice/spreadsheet/format";
_dc "github.com/unidoc/unioffice/spreadsheet/reference";_bc "github.com/unidoc/unioffice/spreadsheet/update";_f "io";_cba "math";_b "math/big";_fb "math/rand";_de "regexp";_ff "sort";_cf "strconv";_cb "strings";_bf "sync";_cc "time";_e "unicode";);

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gefcg :=args [0];switch _gefcg .Type {case ResultTypeError :return _gefcg ;
case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_gefcg .ValueNumber !=0);};if _gefcg .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _afag (args );
case ResultTypeArray :return _dgef (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");
};};

// SetLocked does nothing for the invalid reference context.
func (_cgafc *ivr )SetLocked (cellRef string ,locked bool ){};func _dedd (_fbde Result ,_fcb ,_beegd string )(float64 ,Result ){var _caec float64 ;switch _fbde .Type {case ResultTypeNumber :_caec =float64 (int (_fbde .ValueNumber ));case ResultTypeString :_gged :=DateValue ([]Result {_fbde });
if _gged .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_fcb +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_beegd );};_caec =_gged .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_beegd );
};if _caec < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_fcb +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _caec ,_acae ;};const _agdb =57369;

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_deee :=args [0].AsNumber ();if _deee .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_cbcad :=int (_deee .ValueNumber );_ffbe :=make ([][]Result ,0,_cbcad );for _adab :=0;_adab < _cbcad ;_adab ++{_ebgg :=make ([]Result ,_cbcad );for _bbcc :=0;_bbcc < _cbcad ;_bbcc ++{if _adab ==_bbcc {_ebgg [_bbcc ]=MakeNumberResult (1.0);}else {_ebgg [_bbcc ]=MakeNumberResult (0.0);
};};_ffbe =append (_ffbe ,_ebgg );};return MakeArrayResult (_ffbe );};func _geeb (_cgda ,_gca ,_dffa int )bool {if _gca < 1||_gca > 12{return false ;};if _dffa < 1{return false ;};return _dffa <=_ddgb (_cgda ,_gca );};type parsedReplaceObject struct{_fcab string ;
_dgfba int ;_cdcd int ;_dcccc string ;};

// GetFilename returns an empty string for the invalid reference context.
func (_cadf *ivr )GetFilename ()string {return ""};type defEval struct{evCache ;_cdf bool ;};var _gddec =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Reference returns an invalid reference for BinaryExpr.
func (_dcg BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fbdg :=_cc .Now ();_ ,_bge :=_fbdg .Zone ();_aggg :=_badf (_bfac ,_fbdg .Unix ()+int64 (_bge ))+1;return MakeNumberResult (_aggg );};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfdf :=args [0].Type ;for _ ,_fdcdg :=range args {if _fdcdg .Type !=_dfdf {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");
};};switch _dfdf {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_deaba :=len (args [0].ListValues ());_agcf :=make ([]float64 ,_deaba );for _aebe :=range _agcf {_agcf [_aebe ]=1.0;};for _ ,_acff :=range args {if len (_acff .ListValues ())!=_deaba {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");
};for _gbcff ,_befbb :=range _acff .ListValues (){_befbb =_befbb .AsNumber ();if _befbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");
};_agcf [_gbcff ]=_agcf [_gbcff ]*_befbb .ValueNumber ;};};_acace :=0.0;for _ ,_gfdc :=range _agcf {_acace +=_gfdc ;};return MakeNumberResult (_acace );};return MakeNumberResult (1.0);};func (_afffg *yyParserImpl )Parse (yylex yyLexer )int {_gaefge :=_cc .Now ();
var _eefbg int ;var _fabe yySymType ;var _dfdd []yySymType ;_ =_dfdd ;_begf :=_afffg ._dgeeg [:];Nerrs :=0;Errflag :=0;_gbcad :=0;_afffg ._egag =-1;_gadd :=-1;defer func (){_gbcad =-1;_afffg ._egag =-1;_gadd =-1}();_gfdbb :=-1;goto _egedc ;_fagggf :return 0;
_fced :return 1;_egedc :if _efgcg (_gaefge ){_gf .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _fced ;};if _efaf >=4{_g .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_ceacg (_gadd ),_fgbde (_gbcad ));
};_gfdbb ++;if _gfdbb >=len (_begf ){_aefag :=make ([]yySymType ,len (_begf )*2);copy (_aefag ,_begf );_begf =_aefag ;};_begf [_gfdbb ]=_fabe ;_begf [_gfdbb ]._dcdb =_gbcad ;_dcda :if _efgcg (_gaefge ){_gf .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");
goto _fced ;};_eefbg =_ebgaa [_gbcad ];if _eefbg <=_bdfgce {goto _dagg ;};if _afffg ._egag < 0{_afffg ._egag ,_gadd =_efcbb (yylex ,&_afffg ._gbbee );};_eefbg +=_gadd ;if _eefbg < 0||_eefbg >=_cdaff {goto _dagg ;};_eefbg =_bccfa [_eefbg ];if _cedcg [_eefbg ]==_gadd {_afffg ._egag =-1;
_gadd =-1;_fabe =_afffg ._gbbee ;_gbcad =_eefbg ;if Errflag > 0{Errflag --;};goto _egedc ;};_dagg :if _efgcg (_gaefge ){_gf .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _fced ;};_eefbg =_faadf [_gbcad ];
if _eefbg ==-2{if _afffg ._egag < 0{_afffg ._egag ,_gadd =_efcbb (yylex ,&_afffg ._gbbee );};_ggeda :=0;for {if _cgfe [_ggeda +0]==-1&&_cgfe [_ggeda +1]==_gbcad {break ;};_ggeda +=2;};for _ggeda +=2;;_ggeda +=2{_eefbg =_cgfe [_ggeda +0];if _eefbg < 0||_eefbg ==_gadd {break ;
};};_eefbg =_cgfe [_ggeda +1];if _eefbg < 0{goto _fagggf ;};};if _eefbg ==0{switch Errflag {case 0:yylex .Error (_adgcb (_gbcad ,_gadd ));Nerrs ++;if _efaf >=1{_g .Printf ("\u0025\u0073",_fgbde (_gbcad ));_g .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_ceacg (_gadd ));
};fallthrough;case 1,2:Errflag =3;for _gfdbb >=0{_eefbg =_ebgaa [_begf [_gfdbb ]._dcdb ]+_gffaf ;if _eefbg >=0&&_eefbg < _cdaff {_gbcad =_bccfa [_eefbg ];if _cedcg [_gbcad ]==_gffaf {goto _egedc ;};};if _efaf >=2{_g .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_begf [_gfdbb ]._dcdb );
};_gfdbb --;};goto _fced ;case 3:if _efaf >=2{_g .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_ceacg (_gadd ));};if _gadd ==_fcdg {goto _fced ;};_afffg ._egag =-1;
_gadd =-1;goto _dcda ;};};if _efaf >=2{_g .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_eefbg ,_fgbde (_gbcad ));};_abcbe :=_eefbg ;_aedfe :=_gfdbb ;_ =_aedfe ;_gfdbb -=_abec [_eefbg ];if _gfdbb +1>=len (_begf ){_ebac :=make ([]yySymType ,len (_begf )*2);
copy (_ebac ,_begf );_begf =_ebac ;};_fabe =_begf [_gfdbb +1];_eefbg =_caggf [_eefbg ];_ccbgg :=_ebfcb [_eefbg ];_dfega :=_ccbgg +_begf [_gfdbb ]._dcdb +1;if _dfega >=_cdaff {_gbcad =_bccfa [_ccbgg ];}else {_gbcad =_bccfa [_dfega ];if _cedcg [_gbcad ]!=-_eefbg {_gbcad =_bccfa [_ccbgg ];
};};switch _abcbe {case 1:_dfdd =_begf [_aedfe -1:_aedfe +1];{yylex .(*plex )._gdecf =_fabe ._eaeccd ;};case 3:_dfdd =_begf [_aedfe -2:_aedfe +1];{_fabe ._eaeccd =_dfdd [2]._eaeccd ;};case 4:_dfdd =_begf [_aedfe -4:_aedfe +1];{};case 5:_dfdd =_begf [_aedfe -1:_aedfe +1];
{_fabe ._eaeccd =NewBool (_dfdd [1]._eebg ._aacd );};case 6:_dfdd =_begf [_aedfe -1:_aedfe +1];{_fabe ._eaeccd =NewNumber (_dfdd [1]._eebg ._aacd );};case 7:_dfdd =_begf [_aedfe -1:_aedfe +1];{_fabe ._eaeccd =NewString (_dfdd [1]._eebg ._aacd );};case 8:_dfdd =_begf [_aedfe -1:_aedfe +1];
{_fabe ._eaeccd =NewError (_dfdd [1]._eebg ._aacd );};case 9:_dfdd =_begf [_aedfe -2:_aedfe +1];{_fabe ._eaeccd =_dfdd [2]._eaeccd ;};case 10:_dfdd =_begf [_aedfe -2:_aedfe +1];{_fabe ._eaeccd =NewNegate (_dfdd [2]._eaeccd );};case 15:_dfdd =_begf [_aedfe -3:_aedfe +1];
{_fabe ._eaeccd =_dfdd [2]._eaeccd ;};case 17:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewConstArrayExpr (_dfdd [2]._adddg );};case 18:_dfdd =_begf [_aedfe -1:_aedfe +1];{_fabe ._adddg =append (_fabe ._adddg ,_dfdd [1]._ddda );};case 19:_dfdd =_begf [_aedfe -3:_aedfe +1];
{_fabe ._adddg =append (_dfdd [1]._adddg ,_dfdd [3]._ddda );};case 20:_dfdd =_begf [_aedfe -1:_aedfe +1];{_fabe ._ddda =append (_fabe ._ddda ,_dfdd [1]._eaeccd );};case 21:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._ddda =append (_dfdd [1]._ddda ,_dfdd [3]._eaeccd );
};case 23:_dfdd =_begf [_aedfe -2:_aedfe +1];{_fabe ._eaeccd =NewPrefixExpr (_dfdd [1]._eaeccd ,_dfdd [2]._eaeccd );};case 25:_dfdd =_begf [_aedfe -1:_aedfe +1];{_fabe ._eaeccd =NewSheetPrefixExpr (_dfdd [1]._eebg ._aacd );};case 26:_dfdd =_begf [_aedfe -1:_aedfe +1];
{_fabe ._eaeccd =NewCellRef (_dfdd [1]._eebg ._aacd );};case 27:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewRange (_dfdd [1]._eaeccd ,_dfdd [3]._eaeccd );};case 28:_dfdd =_begf [_aedfe -4:_aedfe +1];{_fabe ._eaeccd =NewPrefixRangeExpr (_dfdd [1]._eaeccd ,_dfdd [2]._eaeccd ,_dfdd [4]._eaeccd );
};case 29:_dfdd =_begf [_aedfe -1:_aedfe +1];{_fabe ._eaeccd =NewNamedRangeRef (_dfdd [1]._eebg ._aacd );};case 30:_dfdd =_begf [_aedfe -1:_aedfe +1];{_fabe ._eaeccd =NewHorizontalRange (_dfdd [1]._eebg ._aacd );};case 31:_dfdd =_begf [_aedfe -1:_aedfe +1];
{_fabe ._eaeccd =NewVerticalRange (_dfdd [1]._eebg ._aacd );};case 32:_dfdd =_begf [_aedfe -2:_aedfe +1];{_fabe ._eaeccd =NewPrefixHorizontalRange (_dfdd [1]._eaeccd ,_dfdd [2]._eebg ._aacd );};case 33:_dfdd =_begf [_aedfe -2:_aedfe +1];{_fabe ._eaeccd =NewPrefixVerticalRange (_dfdd [1]._eaeccd ,_dfdd [2]._eebg ._aacd );
};case 34:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewBinaryExpr (_dfdd [1]._eaeccd ,BinOpTypePlus ,_dfdd [3]._eaeccd );};case 35:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewBinaryExpr (_dfdd [1]._eaeccd ,BinOpTypeMinus ,_dfdd [3]._eaeccd );
};case 36:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewBinaryExpr (_dfdd [1]._eaeccd ,BinOpTypeMult ,_dfdd [3]._eaeccd );};case 37:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewBinaryExpr (_dfdd [1]._eaeccd ,BinOpTypeDiv ,_dfdd [3]._eaeccd );
};case 38:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewBinaryExpr (_dfdd [1]._eaeccd ,BinOpTypeExp ,_dfdd [3]._eaeccd );};case 39:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewBinaryExpr (_dfdd [1]._eaeccd ,BinOpTypeLT ,_dfdd [3]._eaeccd );
};case 40:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewBinaryExpr (_dfdd [1]._eaeccd ,BinOpTypeGT ,_dfdd [3]._eaeccd );};case 41:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewBinaryExpr (_dfdd [1]._eaeccd ,BinOpTypeLEQ ,_dfdd [3]._eaeccd );
};case 42:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewBinaryExpr (_dfdd [1]._eaeccd ,BinOpTypeGEQ ,_dfdd [3]._eaeccd );};case 43:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewBinaryExpr (_dfdd [1]._eaeccd ,BinOpTypeEQ ,_dfdd [3]._eaeccd );
};case 44:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewBinaryExpr (_dfdd [1]._eaeccd ,BinOpTypeNE ,_dfdd [3]._eaeccd );};case 45:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewBinaryExpr (_dfdd [1]._eaeccd ,BinOpTypeConcat ,_dfdd [3]._eaeccd );
};case 47:_dfdd =_begf [_aedfe -2:_aedfe +1];{_fabe ._eaeccd =NewFunction (_dfdd [1]._eebg ._aacd ,nil );};case 48:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._eaeccd =NewFunction (_dfdd [1]._eebg ._aacd ,_dfdd [2]._ddda );};case 49:_dfdd =_begf [_aedfe -1:_aedfe +1];
{_fabe ._ddda =append (_fabe ._ddda ,_dfdd [1]._eaeccd );};case 50:_dfdd =_begf [_aedfe -3:_aedfe +1];{_fabe ._ddda =append (_dfdd [1]._ddda ,_dfdd [3]._eaeccd );};case 53:_dfdd =_begf [_aedfe -0:_aedfe +1];{_fabe ._eaeccd =NewEmptyExpr ();};};goto _egedc ;
};const _fbdgb =57355;

// Update returns the same object as updating sheet references does not affect Bool.
func (_gec Bool )Update (q *_bc .UpdateQuery )Expression {return _gec };

// Number is a nubmer expression.
type Number struct{_fcdae float64 };func (_adbc ReferenceType )String ()string {if _adbc >=ReferenceType (len (_decd )-1){return _g .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_adbc );};
return _ceacf [_decd [_adbc ]:_decd [_adbc +1]];};const _gdafab =57344;var _cde =[]*_de .Regexp {};func _fc (_abb BinOpType ,_be []Result ,_fba Result )Result {_cge :=[]Result {};switch _fba .Type {case ResultTypeNumber :_ecd :=_fba .ValueNumber ;for _fbg :=range _be {_ac :=_be [_fbg ].AsNumber ();
if _ac .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _abb {case BinOpTypePlus :_cge =append (_cge ,MakeNumberResult (_ac .ValueNumber +_ecd ));case BinOpTypeMinus :_cge =append (_cge ,MakeNumberResult (_ac .ValueNumber -_ecd ));case BinOpTypeMult :_cge =append (_cge ,MakeNumberResult (_ac .ValueNumber *_ecd ));
case BinOpTypeDiv :if _ecd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cge =append (_cge ,MakeNumberResult (_ac .ValueNumber /_ecd ));case BinOpTypeExp :_cge =append (_cge ,MakeNumberResult (_cba .Pow (_ac .ValueNumber ,_ecd )));case BinOpTypeLT :_cge =append (_cge ,MakeBoolResult (_ac .ValueNumber < _ecd ));
case BinOpTypeGT :_cge =append (_cge ,MakeBoolResult (_ac .ValueNumber > _ecd ));case BinOpTypeEQ :_cge =append (_cge ,MakeBoolResult (_ac .ValueNumber ==_ecd ));case BinOpTypeLEQ :_cge =append (_cge ,MakeBoolResult (_ac .ValueNumber <=_ecd ));case BinOpTypeGEQ :_cge =append (_cge ,MakeBoolResult (_ac .ValueNumber >=_ecd ));
case BinOpTypeNE :_cge =append (_cge ,MakeBoolResult (_ac .ValueNumber !=_ecd ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_abb ));
};};case ResultTypeString :_cfb :=_fba .ValueString ;for _ba :=range _be {_cag :=_be [_ba ].AsString ();if _cag .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _abb {case BinOpTypeLT :_cge =append (_cge ,MakeBoolResult (_cag .ValueString < _cfb ));case BinOpTypeGT :_cge =append (_cge ,MakeBoolResult (_cag .ValueString > _cfb ));case BinOpTypeEQ :_cge =append (_cge ,MakeBoolResult (_cag .ValueString ==_cfb ));
case BinOpTypeLEQ :_cge =append (_cge ,MakeBoolResult (_cag .ValueString <=_cfb ));case BinOpTypeGEQ :_cge =append (_cge ,MakeBoolResult (_cag .ValueString >=_cfb ));case BinOpTypeNE :_cge =append (_cge ,MakeBoolResult (_cag .ValueString !=_cfb ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_abb ));
};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");
};return MakeListResult (_cge );};func _cbg (_eaef ,_bfab _cc .Time )bool {_facg :=_eaef .Unix ();_fad :=_bfab .Unix ();_ffcg :=_eaef .Year ();_dfcab :=_babc (_ffcg ,_cc .March ,1);if _gecf (_ffcg )&&_facg < _dfcab &&_fad >=_dfcab {return true ;};var _cbabb =_bfab .Year ();
var _bdad =_babc (_cbabb ,_cc .March ,1);return (_gecf (_cbabb )&&_fad >=_bdad &&_facg < _bdad );};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_faf :=&defEval {};_faf .evCache =_dca ();return _faf };

// Eval evaluates and returns the result of the cell reference.
func (_bfa CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_bfa ._fe ,ev )};const _deg ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// String returns a string representation of ConstArrayExpr.
func (_cfcd ConstArrayExpr )String ()string {return ""};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_aeeca :=args [0].AsNumber ();if _aeeca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_aea :=float64 (1);if _aeeca .ValueNumber < 0{_aea =-1;};if len (args )> 1{_efb :=args [1].AsNumber ();if _efb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_aea =_efb .ValueNumber ;};_dggd :=float64 (1);if len (args )> 2{_fgee :=args [2].AsNumber ();if _fgee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_dggd =_fgee .ValueNumber ;};if len (args )==1{return MakeNumberResult (_cba .Ceil (_aeeca .ValueNumber ));};_cagdb :=_aeeca .ValueNumber ;_cagdb ,_bgdef :=_cba .Modf (_cagdb /_aea );if _bgdef !=0{if _aeeca .ValueNumber > 0{_cagdb ++;}else if _dggd < 0{_cagdb --;
};};return MakeNumberResult (_cagdb *_aea );};func _efgcg (_ffeaa _cc .Time )bool {return _cc .Now ().Sub (_ffeaa )>=_edddf };

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_ccgbf ,_fafe ,_fdeee :=_gbacc (from ,to );if _fdeee !=nil {_gf .Log .Debug (_fdeee .Error ());return NewError (_fdeee .Error ());};return Range {_dfbb :_ccgbf ,_gedbb :_fafe };};var _gcd =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};


// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_edfc ,_bggb :=_fbdf (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _bggb .Type ==ResultTypeError {return _bggb ;};_add :=_edfc ._aceb ;_accc :=_edfc ._fbcf ;_deea :=_edfc ._dcef ;_fcad :=_edfc ._bbbe ;
_ffeg :=_edfc ._fede ;_abac :=_edfc ._cgace ;_fff :=_edfc ._gedc ;_bdgc ,_eafg :=_dgae (_accc ,_deea ,_fff );if _eafg .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");
};_dde :=_bdgc *_abac *_add ;if _ffeg ==0{return MakeNumberResult (_dde );};_bfgf :=_add *_abac ;_abcc :=_add -_fcad ;_ggcae :=int ((_abcc -_dde )/_bfgf );if _ffeg <=_ggcae {return MakeNumberResult (_bfgf );}else if _ffeg ==_ggcae +1{return MakeNumberResult (_abcc -_bfgf *float64 (_ggcae )-_dde );
}else {return MakeNumberResult (0);};};type xargs struct{_dfedd []float64 ;_dcag []float64 ;};const _bcca ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";
func _dgae (_gabc ,_aedd float64 ,_cff int )(float64 ,Result ){_aeeg ,_gbc :=_gac (_gabc ),_gac (_aedd );_bfc :=_aeeg .Unix ();_daf :=_gbc .Unix ();if _bfc ==_daf {return 0,_acae ;};_gbga ,_cgg ,_cecfd :=_aeeg .Date ();_dbag ,_bdbg ,_ddca :=_gbc .Date ();
_caea ,_deag :=int (_cgg ),int (_bdbg );var _gefc ,_fda float64 ;switch _cff {case 0:if _cecfd ==31{_cecfd --;};if _cecfd ==30&&_ddca ==31{_ddca --;}else if _dfca :=_gecf (_gbga );_caea ==2&&((_dfca &&_cecfd ==29)||(!_dfca &&_cecfd ==28)){_cecfd =30;if _bab :=_gecf (_dbag );
_deag ==2&&((_bab &&_ddca ==29)||(!_bab &&_ddca ==28)){_ddca =30;};};_gefc =float64 ((_dbag -_gbga )*360+(_deag -_caea )*30+(_ddca -_cecfd ));_fda =360;case 1:_gefc =_aedd -_gabc ;_daef :=_gbga !=_dbag ;if _daef &&(_dbag !=_gbga +1||_caea < _deag ||(_caea ==_deag &&_cecfd < _ddca )){_ebbg :=0;
for _cecc :=_gbga ;_cecc <=_dbag ;_cecc ++{_ebbg +=_ebda (_cecc ,1);};_fda =float64 (_ebbg )/float64 (_dbag -_gbga +1);}else {if !_daef &&_gecf (_gbga ){_fda =366;}else {if _daef &&((_gecf (_gbga )&&(_caea < 2||(_caea ==2&&_cecfd <=29)))||(_gecf (_dbag )&&(_deag > 2||(_deag ==2&&_ddca ==29)))){_fda =366;
}else {_fda =365;};};};case 2:_gefc =_aedd -_gabc ;_fda =360;case 3:_gefc =_aedd -_gabc ;_fda =365;case 4:if _cecfd ==31{_cecfd --;};if _ddca ==31{_ddca --;};_gefc =float64 ((_dbag -_gbga )*360+(_deag -_caea )*30+(_ddca -_cecfd ));_fda =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");
};return _gefc /_fda ,_acae ;};var _ega =[]*_de .Regexp {};const _cdef ="\u0028\u0020\u0028"+_daa +"\u007c"+_edb +"\u007c"+_deg +"\u007c"+_dbad +"\u0029\u0029\u003f\u0024";

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_dbefa :=args [0];if _dbefa .Type !=ResultTypeArray &&_dbefa .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_afbe :=_dbefa .ValueArray ;if len (_afbe )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};return MakeNumberResult (float64 (len (_afbe )));};func _afbg (_abaca ,_ecdd []float64 ,_cegf float64 )float64 {_agefb :=_cegf +1;_aafa :=0.0;_fdcfe :=len (_abaca );_egba :=_ecdd [0];for _fdfae :=1;_fdfae < _fdcfe ;_fdfae ++{_aeed :=(_ecdd [_fdfae ]-_egba )/365;
_aafa -=_aeed *_abaca [_fdfae ]/_cba .Pow (_agefb ,_aeed +1);};return _aafa ;};func _abea (_ggabf float64 )bool {return _ggabf ==1||_ggabf ==2||_ggabf ==4};func _bea (_decf ,_ebca float64 )bool {return _cba .Abs (_decf -_ebca )< 1.0e-6};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bfaf :=args [0].Ref ;if _bfaf .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .HasFormula (_bfaf .Value ));};var _dga =map[string ]*_de .Regexp {};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_febb :=len (args );if _febb !=6&&_febb !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dbef ,_babg ,_cagf :=_geec (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _cagf .Type ==ResultTypeError {return _cagf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dcce :=args [2].ValueNumber ;if _dcce < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_gffe :=args [3].ValueNumber ;if _gffe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_geeg :=args [4].ValueNumber ;if _geeg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfea :=args [5];if _cfea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bbbee :=_cfea .ValueNumber ;if !_abea (_bbbee ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ccafc :=0;if _febb ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccafc =int (args [6].ValueNumber );if !_ebga (_ccafc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");
};};_bfdf ,_cagf :=_gfafa (_dbef ,_babg ,_dcce ,_gffe ,_geeg ,_bbbee ,_ccafc );if _cagf .Type ==ResultTypeError {return _cagf ;};return MakeNumberResult (_bfdf );};type cumulArgs struct{_ddgca float64 ;_gfga float64 ;_afgd float64 ;_fbaa float64 ;_gfgaf float64 ;
_egcae int ;};var _cfeb ,_bgbe ,_cdd ,_dgeb ,_fgfg ,_dbggf ,_dfge ,_fbdc ,_febba ,_bcdf ,_daee ,_dgdb ,_daeg ,_dfbce ,_fgcg *_de .Regexp ;const _efad =57364;

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_acfd :=args [0].AsNumber ();
_abfc :=args [1].AsNumber ();if _acfd .Type !=ResultTypeNumber ||_abfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};if _abfc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_ceaeg ,_ddgbg :=_cba .Modf (_acfd .ValueNumber /_abfc .ValueNumber );if _ddgbg < 0{_ceaeg --;
};return MakeNumberResult (_acfd .ValueNumber -_abfc .ValueNumber *_ceaeg );};func _cgcc (_afbafc ,_abaed []string )[]string {for _ ,_dead :=range _abaed {_afbafc =append (_afbafc ,_dead );};return _afbafc ;};

// Update returns the same object as updating sheet references does not affect Error.
func (_edg Error )Update (q *_bc .UpdateQuery )Expression {return _edg };

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ffbd :=args [0].AsString ();if _ffbd .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (len (_ffbd .ValueString )));};

// GetFormat returns an empty string for the invalid reference context.
func (_gdga *ivr )GetFormat (cellRef string )string {return ""};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_bdce string };func (_ddgg PrefixVerticalRange )verticalRangeReference (_aaeag string )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_aaeag ,_ddgg ._decaad ,_ddgg ._dgaad );};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_dcfb :=len (args );if _dcfb < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _dcfb > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_cgdga :=args [0];_afdd :=args [1];if _afdd .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_cfefg :=args [2].AsNumber ();if _cfefg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_efde :=false ;if _dcfb ==4&&args [3].Type !=ResultTypeEmpty {_fcbg :=args [3].AsNumber ();if _fcbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _fcbg .ValueNumber ==0{_efde =true ;};};_bgdf :=int (_cfefg .ValueNumber )-1;_ceacd :=-1;_baaee :=false ;_eebf :for _gead ,_dcba :=range _afdd .ValueArray {if len (_dcba )==0{continue ;};_ddeg :=_dcba [0];switch _egdd (_ddeg ,_cgdga ,false ,_efde ){case _afed :_ceacd =_gead ;
case _cgcg :_ceacd =_gead ;_baaee =true ;break _eebf ;};};if _ceacd ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_dfee :=_afdd .ValueArray [_ceacd ];
if _bgdf < 0||_bgdf >=len (_dfee ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _baaee ||!_efde {return _dfee [_bgdf ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};func _faa (_gbe _cc .Time )_cc .Time {_gbe =_gbe .UTC ();return _cc .Date (_gbe .Year (),_gbe .Month (),_gbe .Day (),_gbe .Hour (),_gbe .Minute (),_gbe .Second (),_gbe .Nanosecond (),_cc .Local );
};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_gaeec ,_eggg :=_cadd (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _eggg .Type ==ResultTypeError {return _eggg ;};_fgda :=_gaeec ._efcb ;_aafb :=_gaeec ._ffec ;_fae :=_gaeec ._bdc ;_ddfe :=_gaeec ._eged ;
_befeg :=_gaeec ._gaee ;_bfgbf :=_gaeec ._bdfg ;return _ffg (_fgda ,_aafb ,_fae ,_ddfe ,_befeg ,_bfgbf );};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ggee :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eeg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ebcg :=args [2].ValueNumber ;if _ebcg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult ((_ggee -_eeg )/_ebcg );};const (_ byte =iota ;_baaa ;_acfca ;_eadd ;_aadfa ;_fage ;);const _addc =57363;const _gdacb =57377;func init (){_ecg ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );
RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );
RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );
RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );
};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_cad Context ,formula string )Result ;SetCache (_eab string ,_cae Result );GetFromCache (_gaa string )(Result ,bool );LastEvalIsRef ()bool ;};var _ebfcb =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};func _fagc (_cdgg []string ,_bcdb int )string {return _cf .Itoa (len (_cdgg [len (_cdgg )-1-_bcdb ]))};
func _ceacg (_eddag int )string {if _eddag >=1&&_eddag -1< len (_feee ){if _feee [_eddag -1]!=""{return _feee [_eddag -1];};};return _g .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_eddag );};var _fbag =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfege :=args [0].AsNumber ();if _dfege .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _dfege .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_dgcde :=float64 (1);_acbae :=_cba .Trunc (_dfege .ValueNumber );for _dgadd :=_acbae ;_dgadd > 1;_dgadd -=2{_dgcde *=_dgadd ;};return MakeNumberResult (_dgcde );};func _ddgb (_dfd ,_bbg int )int {if _bbg ==2&&_gecf (_dfd ){return 29;}else {return _dbf [_bbg -1];
};};

// Update updates the horizontal range references after removing a row/column.
func (_fefdb HorizontalRange )Update (q *_bc .UpdateQuery )Expression {return _fefdb };func _ddgc (_bdb ,_ace ,_bag int )float64 {return float64 (_babc (_bdb ,_cc .Month (_ace ),_bag )/86400)+_ged ;};func _fbe (_ccc string ,_eb *_bc .UpdateQuery )string {_bd ,_bba :=_dc .ParseCellReference (_ccc );
if _bba !=nil {return "\u0023\u0052\u0045F\u0021";};if _eb .UpdateType ==_bc .UpdateActionRemoveColumn {_fbd :=_eb .ColumnIdx ;_ddc :=_bd .ColumnIdx ;if _ddc < _fbd {return _ccc ;}else if _ddc ==_fbd {return "\u0023\u0052\u0045F\u0021";}else {return _bd .Update (_bc .UpdateActionRemoveColumn ).String ();
};};return _ccc ;};const _edb ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_cedfa :=_cb .Split (v ,"\u003a");if len (_cedfa )!=2{return nil ;};if _cedfa [0]> _cedfa [1]{_cedfa [0],_cedfa [1]=_cedfa [1],_cedfa [0];};return PrefixVerticalRange {_ddgae :pfx ,_decaad :_cedfa [0],_dgaad :_cedfa [1]};
};var (_efaf =0;_aecg =false ;);const _gdfcd =57349;func _dgdfd (_decfg Result ,_bcfd *criteriaParsed )bool {_cggcb :=_cb .ToLower (_decfg .ValueString );_faggg :=_bcfd ._dgeac ._dddfc ;_bcba :=_bcfd ._dgeac ._gfdb ;if _faggg ==_baaa {return _cggcb ==_bcba ||_ce .Match (_bcba ,_cggcb );
};if _decfg .Type !=ResultTypeEmpty {if _cggcb ==_bcfd ._fgef ||_ce .Match (_bcfd ._fgef ,_cggcb ){return true ;};if _ ,_cfgg :=_cf .ParseFloat (_bcba ,64);_cfgg ==nil {return false ;};switch _faggg {case _acfca :return _cggcb <=_bcba ;case _eadd :return _cggcb >=_bcba ;
case _aadfa :return _cggcb < _bcba ;case _fage :return _cggcb > _bcba ;};};return false ;};

// IsDBCS returns false for the invalid reference context.
func (_fbff *ivr )IsDBCS ()bool {return false };

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};_bffd :=args [0].ValueNumber ;if _bffd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");
};_eefe :=float64 (int (args [1].ValueNumber ));if _eefe < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult (_cba .Pow ((1+_bffd /_eefe ),_eefe )-1);};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_acfe :=len (args );if _acfe !=4&&_acfe !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_cabe ,_degae ,_dadc :=_geec (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _dadc .Type ==ResultTypeError {return _dadc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_abcec :=args [2].ValueNumber ;if _abcec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gaab :=args [3].ValueNumber ;if _gaab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adbfc :=0;if _acfe ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adbfc =int (args [4].ValueNumber );if !_ebga (_adbfc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");
};};_bgcc ,_dadc :=_dgae (_cabe ,_degae ,_adbfc );if _dadc .Type ==ResultTypeError {return _dadc ;};return MakeNumberResult (_abcec /(1-_gaab *_bgcc ));};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_eggaf :=len (args );if _eggaf !=3&&_eggaf !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fabg ,_aaeb :=_dadde (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _aaeb .Type ==ResultTypeError {return _aaeb ;};_ffgaa ,_aaeb :=_dadde (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");
if _aaeb .Type ==ResultTypeError {return _aaeb ;};_ddbd ,_aaeb :=_dadde (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _aaeb .Type ==ResultTypeError {return _aaeb ;};_gced :=0;
if _eggaf ==3{return MakeStringResult (_cb .Replace (_fabg ,_ffgaa ,_ddbd ,-1));}else {_bccg ,_bdef :=_acec (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");
if _bdef .Type ==ResultTypeError {return _bdef ;};_gced =int (_bccg );if _gced < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");
};_fgdfb :=_fabg ;_dggb :=_gced ;_beead :=-1;_cfcg :=len (_ffgaa );_fadab :=0;for {_dggb --;_dfcaf :=_cb .Index (_fgdfb ,_ffgaa );if _dfcaf ==-1{_beead =-1;break ;}else {_beead =_dfcaf +_fadab ;if _dggb ==0{break ;};_cebf :=_cfcg +_dfcaf ;_fadab +=_cebf ;
_fgdfb =_fgdfb [_cebf :];};};if _beead ==-1{return MakeStringResult (_fabg );}else {_dbfg :=_fabg [:_beead ];_dgdg :=_fabg [_beead +_cfcg :];return MakeStringResult (_dbfg +_ddbd +_dgdg );};};};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func _cgb (_ffa string ,_aca uint32 )string {_efa :=_dc .ColumnToIndex (_ffa );if _efa ==_aca {return "\u0023\u0052\u0045F\u0021";}else if _efa > _aca {return _dc .IndexToColumn (_efa -1);
}else {return _ffa ;};};func _ddga (){_cfeb =_de .MustCompile ("\u005e\u0030\u002b\u0024");_cdd =_de .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_dgeb =_de .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");
_bgbe =_de .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_fgfg =_de .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");
_dbggf =_de .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_dfge =_de .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");
_febba =_de .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_bcdf =_de .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");
_daee =_de .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");
_dgdb =_de .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");
_daeg =_de .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_gcbd +_gcbd +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_gcbd +_gcbd +"\u0029\u002b\u0059+\u0024");_dfbce =_de .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_gcbd +_gcbd +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_gcbd +_gcbd +"\u0029\u002b\u0059+\u0024");
_fgcg =_de .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_fbdc =_de .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");
};func _bdcf (_feef []Result )[]rangeIndex {_geba :=[]rangeIndex {};_cggg :=len (_feef );for _cdada :=0;_cdada < _cggg -1;_cdada +=2{_fabb :=[]rangeIndex {};_acaf :=_fedf (_feef [_cdada ]);_ceed :=_acage (_feef [_cdada +1]);if _cdada ==0{for _ebfef ,_aafga :=range _acaf {for _fgeae ,_dcgee :=range _aafga {if _acbg (_dcgee ,_ceed ){_fabb =append (_fabb ,rangeIndex {_ebfef ,_fgeae });
};};};}else {for _ ,_dgbd :=range _geba {_ccbg :=_acaf [_dgbd ._fbfc ][_dgbd ._ebebc ];if _acbg (_ccbg ,_ceed ){_fabb =append (_fabb ,_dgbd );};};};if len (_fabb )==0{return []rangeIndex {};};_geba =_fabb [:];};return _geba ;};const _gdbba =57372;func _fedf (_babb Result )[][]Result {switch _babb .Type {case ResultTypeArray :return _babb .ValueArray ;
case ResultTypeList :return [][]Result {_babb .ValueList };default:return [][]Result {};};};

// GetLocked returns FALSE for the invalid reference context.
func (_edgf *ivr )GetLocked (cellRef string )bool {return false };

// Match implements the MATCH function.
func Match (args []Result )Result {_dgac :=len (args );if _dgac !=2&&_dgac !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_efcc :=1;if _dgac ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_bcddf :=args [2].ValueNumber ;if _bcddf ==-1||_bcddf ==0{_efcc =int (_bcddf );};};_cacg :=args [1];var _cegg []Result ;switch _cacg .Type {case ResultTypeList :_cegg =_cacg .ValueList ;case ResultTypeArray :_gfbcb :=_cacg .ValueArray ;for _ ,_bded :=range _gfbcb {if len (_bded )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_cegg =append (_cegg ,_bded [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_cbfe :=_acage (args [0]);switch _efcc {case 0:for _bggc ,_dfeg :=range _cegg {if _beeb (_dfeg ,_cbfe ){return MakeNumberResult (float64 (_bggc +1));};};case -1:for _faddd :=0;_faddd < len (_cegg );_faddd ++{if _beeb (_cegg [_faddd ],_cbfe ){return MakeNumberResult (float64 (_faddd +1));
};if _cbfe ._fdcdb &&(_cegg [_faddd ].ValueNumber < _cbfe ._dddfa ){if _faddd ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_faddd ));};};case 1:for _geafg :=0;_geafg < len (_cegg );_geafg ++{if _beeb (_cegg [_geafg ],_cbfe ){return MakeNumberResult (float64 (_geafg +1));
};if _cbfe ._fdcdb &&(_cegg [_geafg ].ValueNumber > _cbfe ._dddfa ){if _geafg ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_geafg ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};var _bccfa =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};
func _bgdb (_ecee ,_badfa float64 ,_aeec ,_feae int )float64 {_bdaf :=_gac (_ecee );_cefe :=_gac (_badfa );_cede :=_bgg (_bdaf ,_cefe ,_aeec );return _cgf (_bdaf ,_cede ,_feae );};func _gdd (_babf ,_gfaaf ,_daga int )int {if _babf > _gfaaf {return 0;};
if _edbf (_daga ){return (_gfaaf -_babf +1)*360;};_cgac :=0;for _gdf :=_babf ;_gdf <=_gfaaf ;_gdf ++{_bae :=365;if _gecf (_gdf ){_bae =366;};_cgac +=_bae ;};return _cgac ;};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_gecg :=len (args );if _gecg < 3||_gecg > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dbacd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_bddb :=args [1].ValueNumber ;if _bddb !=float64 (int (_bddb )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcdc :=args [2].ValueNumber ;_efeg :=0.0;if _gecg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_efeg =args [3].ValueNumber ;};_gcec :=0;if _gecg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gcec =int (args [4].ValueNumber );if _gcec !=0{_gcec =1;};};return MakeNumberResult (_fcaa (_dbacd ,_bddb ,_gcdc ,_efeg ,_gcec ));};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cfd :=args [1].ValueNumber ;
_fbgg :=args [0];var _deff float64 ;switch _fbgg .Type {case ResultTypeEmpty :_deff =0;case ResultTypeNumber :_deff =_fbgg .ValueNumber ;case ResultTypeString :_fdba :=DateValue ([]Result {args [0]});if _fdba .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};_deff =_fdba .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_gfgc :=_gac (_deff );
_edc :=_gfgc .AddDate (0,int (_cfd +1),0);_gegg ,_gff ,_ :=_edc .Date ();_fdbc :=_ddgc (_gegg ,int (_gff ),0);if _fdbc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};if _gegg ==1900&&_gff ==3{_fdbc --;};return MakeNumberResult (_fdbc );};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_decb :=args [0];if _decb .Type ==ResultTypeList {_defaf :=[][]Result {};for _ ,_afbga :=range _decb .ValueList {_defaf =append (_defaf ,[]Result {_afbga });};return MakeArrayResult (_defaf );};_gfeb :=make ([][]Result ,len (_decb .ValueArray [0]));for _ ,_aabb :=range _decb .ValueArray {for _caed ,_gfeg :=range _aabb {_gfeb [_caed ]=append (_gfeb [_caed ],_gfeg );
};};return MakeArrayResult (_gfeb );};func _bgg (_deb ,_fec _cc .Time ,_dafe int )_cc .Time {_edef :=_cc .Date (_deb .Year (),_fec .Month (),_fec .Day (),0,0,0,0,_cc .UTC );if _edef .After (_deb ){_edef =_edef .AddDate (-1,0,0);};for !_edef .After (_deb ){_edef =_edef .AddDate (0,12/_dafe ,0);
};return _edef ;};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ccac :=args [0].Ref ;if _ccac .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");
};_bacg ,_abbg :=_dc .ParseCellReference (_ccac .Value );if _abbg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ccac .Value );};return MakeNumberResult (float64 (_bacg .RowIdx ));
};

// Bool is a boolean expression.
type Bool struct{_ge bool };

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};for _aedb :=0;_aedb < len (args )-1;_aedb +=2{if args [_aedb ].ValueNumber ==1{return args [_aedb +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;type couponArgs struct{_fcc float64 ;_abae float64 ;_ecec int ;_egd int ;};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_bgaf :s }};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_afeed :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");
};_acefe :=args [1].ValueNumber !=0;_aeee :=_dgegd (args [2:],[]string {},_acefe );return MakeStringResult (_cb .Join (_aeee ,_afeed ));};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_aabde ,_babcd ,_caeca Expression };func _fgf (_ffcd ,_ffce float64 ,_acac ,_geaf int )(float64 ,Result ){_ccag ,_dgafe :=_gac (_ffcd ),_gac (_ffce );if _dgafe .After (_ccag ){_gbaf :=_eaec (_ccag ,_dgafe ,_acac ,_geaf );_fgdb :=(_dgafe .Year ()-_gbaf .Year ())*12+int (_dgafe .Month ())-int (_gbaf .Month ());
return float64 (_fgdb *_acac )/12.0,_acae ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");
};var _edf =map[string ]*_de .Regexp {};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_aceg ,_ggge :=_caedb (args ,true );if _ggge ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_aceg /_ggge );};const _cfgd ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";
const _gba =86400000000000;

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gebbg :=args [0].ValueNumber ;if _gebbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};_eedfa ,_bcff :=_cdeg (args [1],args [2],"\u0058\u004e\u0050\u0056");if _bcff .Type ==ResultTypeError {return _bcff ;};_aece :=_eedfa ._dfedd ;_bddbg :=_eedfa ._dcag ;_ccda :=0.0;_geda :=_bddbg [0];for _aeecd ,_gedfa :=range _aece {_ccda +=_gedfa /_cba .Pow (1+_gebbg ,(_bddbg [_aeecd ]-_geda )/365);
};return MakeNumberResult (_ccda );};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_beba ,_bfbd ,_cecca :=_dcdf (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _cecca .Type ==ResultTypeError {return _cecca ;};if _bfbd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _beba ==0{return MakeNumberResult (0);};_dfcg :=_beba < 0;if _dfcg {_beba =-_beba ;};_gcc :=float64 (int (_beba ));_aacc :=args [0].Value ();_bada :=_cb .Split (_aacc ,"\u002e");_acdg :=0.0;if len (_bada )> 1{var _fbega error ;_egde :=_bada [1];_acdg ,_fbega =_cf .ParseFloat (_egde ,64);
if _fbega !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");
};_bbf :=float64 (len (_egde ));_acdg /=_cba .Pow (10,_bbf );};_ecfd :=_acdg *_bfbd /_cba .Pow (10,float64 (int (_cba .Log10 (_bfbd )))+1)+_gcc ;if _dfcg {_ecfd =-_ecfd ;};return MakeNumberResult (_ecfd );};func _cefea (_gfaf []Result ,_fbee string )(*cumulArgs ,Result ){if len (_gfaf )!=6{return nil ,MakeErrorResult (_fbee +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _gfaf [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbee +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dgbg :=_gfaf [0].ValueNumber ;
if _dgbg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbee +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _gfaf [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbee +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_fdcf :=_gfaf [1].ValueNumber ;if _fdcf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbee +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if _gfaf [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbee +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bcbfa :=_gfaf [2].ValueNumber ;if _bcbfa <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbee +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _gfaf [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbee +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_ebbga :=_gfaf [3].ValueNumber ;if _ebbga <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbee +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _gfaf [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbee +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dgbgf :=_gfaf [4].ValueNumber ;if _dgbgf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbee +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if _dgbgf < _ebbga {return nil ,MakeErrorResultType (ErrorTypeNum ,_fbee +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");
};if _dgbgf > _fdcf {return nil ,MakeErrorResultType (ErrorTypeNum ,_fbee +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");
};_deafe :=int (_gfaf [5].ValueNumber );if _deafe !=0&&_deafe !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbee +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");
};return &cumulArgs {_dgbg ,_fdcf ,_bcbfa ,_ebbga ,_dgbgf ,_deafe },_acae ;};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gaeg :=args [0].AsString ();if _gaeg .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bcdec :=args [1].AsNumber ();if _bcdec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_agdd :=_gaeg .ValueString ;if len (_agdd )> 2&&(_cb .HasPrefix (_agdd ,"\u0030\u0078")||_cb .HasPrefix (_agdd ,"\u0030\u0058")){_agdd =_agdd [2:];};_egbc ,_geff :=_cf .ParseInt (_agdd ,int (_bcdec .ValueNumber ),64);if _geff !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");
};return MakeNumberResult (float64 (_egbc ));};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eaefd :=args [0];if _eaefd .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bdgdf :=len (_eaefd .ValueArray );for _ ,_bgacc :=range _eaefd .ValueArray {if len (_bgacc )!=_bdgdf {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");
};};return MakeNumberResult (_dffca (_eaefd .ValueArray ));};func _fgbd (_cgcb ,_fegd ,_cgce ,_dgfb ,_fgcf float64 )float64 {var _ebgac float64 ;_abd :=_fgcf /_cgce ;if _abd >=1{_abd =1;if _dgfb ==1{_ebgac =_cgcb ;}else {_ebgac =0;};}else {_ebgac =_cgcb *_cba .Pow (1-_abd ,_dgfb -1);
};_cfed :=_cgcb *_cba .Pow (1-_abd ,_dgfb );var _cgfg float64 ;if _cfed < _fegd {_cgfg =_ebgac -_fegd ;}else {_cgfg =_ebgac -_cfed ;};if _cgfg < 0{_cgfg =0;};return _cgfg ;};

// Eval evaluates and returns a number.
func (_cegd Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_cegd ._fcdae )};

// FunctionCall is a function call expression.
type FunctionCall struct{_acbea string ;_efab []Expression ;};var _cgcee =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func _dgef (_eegd []Result )Result {_gdeac :=_eegd [0].ValueArray ;if len (_eegd )==1{_baaedf :=[][]Result {};for _ ,_eeba :=range _gdeac {_baaedf =append (_baaedf ,_afag ([]Result {MakeListResult (_eeba )}).ValueList );};return MakeArrayResult (_baaedf );
}else if len (_eegd )==2{_fcbc :=len (_gdeac );_affcb :=len (_gdeac [0]);_caedc :=_egfaf (_eegd [1],_fcbc ,_affcb );_ggbe :=len (_caedc );_faceg :=[][]Result {};var _efea []Result ;for _dgad ,_gbccb :=range _gdeac {if _dgad < _ggbe {_efea =_caedc [_dgad ];
}else {_efea =_cfcdc (MakeErrorResultType (ErrorTypeNA ,""),_affcb );};_faceg =append (_faceg ,_afag ([]Result {MakeListResult (_gbccb ),MakeListResult (_efea )}).ValueList );};return MakeArrayResult (_faceg );}else if len (_eegd )==3{_ffebf :=len (_gdeac );
_dbfad :=len (_gdeac [0]);_agd :=_egfaf (_eegd [1],_ffebf ,_dbfad );_bdfgcd :=_egfaf (_eegd [2],_ffebf ,_dbfad );_gebdf :=len (_agd );_fbaff :=len (_bdfgcd );_afdb :=[][]Result {};var _fdg ,_acag []Result ;for _geebd ,_eaac :=range _gdeac {if _geebd < _gebdf {_fdg =_agd [_geebd ];
}else {_fdg =_cfcdc (MakeErrorResultType (ErrorTypeNA ,""),_dbfad );};if _geebd < _fbaff {_acag =_bdfgcd [_geebd ];}else {_acag =_cfcdc (MakeErrorResultType (ErrorTypeNA ,""),_dbfad );};_afdb =append (_afdb ,_afag ([]Result {MakeListResult (_eaac ),MakeListResult (_fdg ),MakeListResult (_acag )}).ValueList );
};return MakeArrayResult (_afdb );};return MakeErrorResultType (ErrorTypeValue ,"");};func _babc (_dbgg int ,_gae _cc .Month ,_gcaa int )int64 {if _dbgg ==1900&&int (_gae )<=2{_gcaa --;};_ggfa :=_cc .Date (_dbgg ,_gae ,_gcaa ,0,0,0,0,_cc .UTC );return _ggfa .Unix ();
};func (_cgeda *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );
RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );
RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );
RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );
RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );
RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );
RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );
RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );
RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );
RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );
RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );
RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );
RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );
};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ffdgg :=args [0].AsString ();_cfcae :=args [1].AsString ();if _ffdgg .Type !=ResultTypeString ||_cfcae .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};return MakeBoolResult (_ffdgg .ValueString ==_cfcae .ValueString );};

// String returns a string representation of a vertical range with prefix.
func (_gcbfe PrefixVerticalRange )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gcbfe ._ddgae .String (),_gcbfe ._decaad ,_gcbfe ._dgaad );};

// Eval evaluates and returns a boolean.
func (_dag Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_dag ._ge )};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdeb :=args [0].AsNumber ();_cbed :=args [1].AsNumber ();if _fdeb .Type !=ResultTypeNumber ||_cbed .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_ccgd :=_cba .Trunc (_fdeb .ValueNumber );_gacd :=_cba .Trunc (_cbed .ValueNumber );if _gacd > _ccgd {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");
};if _gacd ==_ccgd ||_gacd ==0{return MakeNumberResult (1);};_cbcc :=float64 (1);for _fgge :=float64 (1);_fgge <=_gacd ;_fgge ++{_cbcc *=(_ccgd +1-_fgge )/_fgge ;};return MakeNumberResult (_cbcc );};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_bbbb :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbbb =int (args [1].ValueNumber );if _bbbb < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");
};if _bbbb ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_cafg :=args [0].Value ();
_bgbgd :=len (_cafg );if _bbbb > _bgbgd {return MakeStringResult (_cafg );};return MakeStringResult (_cafg [_bgbgd -_bbbb :_bgbgd ]);};func _dca ()evCache {_eda :=evCache {};_eda ._eea =make (map[string ]Result );_eda ._ddf =&_bf .Mutex {};return _eda ;
};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};_dbfb :=args [0];if _dbfb .Type !=ResultTypeArray &&_dbfb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_acaca :=_acage (args [1]);_eggb :=0;for _ ,_ebcbc :=range _fedf (_dbfb ){for _ ,_fcec :=range _ebcbc {if _acbg (_fcec ,_acaca ){_eggb ++;};};};return MakeNumberResult (float64 (_eggb ));};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_baaf :e }};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ebce :=args [0].AsString ();if _ebce .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dbbab :=_fg .Buffer {};_ccdd :=false ;for _ ,_dgff :=range _ebce .ValueString {if !_ccdd &&_e .IsLetter (_dgff ){_dbbab .WriteRune (_e .ToUpper (_dgff ));}else {_dbbab .WriteRune (_e .ToLower (_dgff ));};_ccdd =_e .IsLetter (_dgff );};return MakeStringResult (_dbbab .String ());
};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_efcfc .Lock ();defer _efcfc .Unlock ();if _ ,_cgbg :=_bfdfa [name ];_cgbg {_gf .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_bfdfa [name ]=fn ;};var _cfcgf =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _fcgb (args ,true )};func (_dadg tokenType )String ()string {return _ceacg (int (_dadg ))};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ebfeb :=args [0].AsNumber ();if _ebfeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_cbca :=float64 (1);if _ebfeb .ValueNumber < 0{_cbca =-1;};if len (args )> 1{_gceff :=args [1].AsNumber ();if _gceff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cbca =_gceff .ValueNumber ;};if _cbca < 0&&_ebfeb .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};if len (args )==1{return MakeNumberResult (_cba .Ceil (_ebfeb .ValueNumber ));};_dgaa :=_ebfeb .ValueNumber ;_dgaa ,_cbdc :=_cba .Modf (_dgaa /_cbca );if _cbdc > 0{_dgaa ++;};return MakeNumberResult (_dgaa *_cbca );};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_bgcca :=args [0];
if _bgcca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_baefb :=int (_bgcca .ValueNumber );if _baefb < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");
};if len (args )<=_baefb {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");
};return args [_baefb ];};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};
_ggedg :=int (args [0].ValueNumber );return MakeBoolResult (_ggedg ==_ggedg /2*2);};func _aedf (_feg ,_afa float64 ,_gbdd ,_adb int )float64 {_abba :=_gac (_feg );_bcda :=_gac (_afa );if _adb ==1{_face :=_eaec (_abba ,_bcda ,_gbdd ,1);_bgec :=_face .AddDate (0,12/_gbdd ,0);
return _cgf (_face ,_bgec ,_adb );};return float64 (_ebda (0,_adb ))/float64 (_gbdd );};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_dcge :=len (args );if _dcge < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bga :=args [0].ValueNumber ;if _bga ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ddfed :=[]float64 {};for _ ,_gcfc :=range args [1:]{switch _gcfc .Type {case ResultTypeNumber :_ddfed =append (_ddfed ,_gcfc .ValueNumber );case ResultTypeArray ,ResultTypeList :_bdfcb :=_fedf (_gcfc );
for _ ,_ffdg :=range _bdfcb {for _ ,_cagc :=range _ffdg {if _cagc .Type ==ResultTypeNumber &&!_cagc .IsBoolean {_ddfed =append (_ddfed ,_cagc .ValueNumber );};};};};};_edaf :=0.0;for _cfga ,_gggcc :=range _ddfed {_edaf +=_gggcc /_cba .Pow (1+_bga ,float64 (_cfga )+1);
};return MakeNumberResult (_edaf );};

// Reference returns an invalid reference for Bool.
func (_fgeg Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };type node struct{_aabc tokenType ;_aacd string ;};

// BinOpType is the binary operation operator type
//
//go:generate stringer -type=BinOpType
type BinOpType byte ;const _accf =57346;

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_dbc ,_dffc ,_fcdf :=_geec (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _fcdf .Type ==ResultTypeError {return _fcdf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_degb :=_dffc -_dbc ;if _degb > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_eecc :=args [2].ValueNumber ;if _eecc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (100*(1-_eecc *_degb /360));};

// Reference returns a string reference value to an expression with prefix.
func (_ggcab PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_cfec :=_ggcab ._gbde .Reference (ctx ,ev );_deddd :=_ggcab ._becd .Reference (ctx ,ev );if _cfec .Type ==ReferenceTypeSheet &&_deddd .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_cfec .Value +"\u0021"+_deddd .Value };
};return ReferenceInvalid ;};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_dffg :=len (args );if _dffg < 3||_dffg > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dadda :=args [0].ValueNumber ;if _dadda !=float64 (int (_dadda )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdcb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_gegb :=args [2].ValueNumber ;_cdced :=0.0;if _dffg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cdced =args [3].ValueNumber ;};_cfdbd :=0.0;if _dffg >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cfdbd =args [4].ValueNumber ;if _cfdbd !=0{_cfdbd =1;};};_dbbb :=0.1;if _dffg >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbbb =args [5].ValueNumber ;};_fagf :=100;_geab :=0;_bbfe :=false ;_abfg :=1e-6;_eeae :=_dbbb ;for _geab < _fagf &&!_bbfe {_ddge :=_cba .Pow (_eeae +1,_dadda );_fcg :=_cba .Pow (_eeae +1,_dadda -1);_fbcfe :=_eeae *_cfdbd +1;_dgeg :=_fdcb *(_ddge -1);
_cbfg :=_cdced +_ddge *_gegb +_dgeg *_fbcfe /_eeae ;_gdff :=_dadda *_fcg *_gegb -_dgeg *_fbcfe /_cba .Pow (_eeae ,2);_cdag :=(_dadda *_fdcb *_fcg *_fbcfe +_dgeg *_cfdbd )/_eeae ;_dffaa :=_cbfg /(_gdff +_cdag );if _cba .Abs (_dffaa )< _abfg {_bbfe =true ;
};_geab ++;_eeae -=_dffaa ;};return MakeNumberResult (_eeae );};

// Reference returns an invalid reference for String.
func (_gggd String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// String returns an empty string for Error.
func (_efd Error )String ()string {return ""};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dcaba :=_dbga (args );_ff .Float64s (_dcaba );var _adag float64 ;if len (_dcaba )%2==0{_adag =(_dcaba [len (_dcaba )/2-1]+_dcaba [len (_dcaba )/2])/2;}else {_adag =_dcaba [len (_dcaba )/2];};return MakeNumberResult (_adag );};const _gffaf =2;func _caedb (_gdgcg []Result ,_gdeg bool )(float64 ,float64 ){_eddaba :=0.0;
_edefg :=0.0;for _ ,_dggda :=range _gdgcg {switch _dggda .Type {case ResultTypeNumber :if _gdeg ||!_dggda .IsBoolean {_edefg +=_dggda .ValueNumber ;_eddaba ++;};case ResultTypeList ,ResultTypeArray :_fdfcf ,_ccgg :=_caedb (_dggda .ListValues (),_gdeg );
_edefg +=_fdfcf ;_eddaba +=_ccgg ;case ResultTypeString :if _gdeg {_eddaba ++;};case ResultTypeEmpty :};};return _edefg ,_eddaba ;};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_baca ,_cgdd ,_bbbd :=_geec (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _bbbd .Type ==ResultTypeError {return _bbbd ;};_bbaf ,_bbbd :=_dedd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _bbbd .Type ==ResultTypeError {return _bbbd ;};if _bbaf >=_baca {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};_bcgg :=args [3];if _bcgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_eca :=_bcgg .ValueNumber ;if _eca < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_eaag :=args [4];if _eaag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cega :=_eaag .ValueNumber ;if _cega < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_eebd :=args [5];
if _eebd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_gbbb :=_eebd .ValueNumber ;if _gbbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_acgf :=args [6];
if _acgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_aadf :=float64 (int (_acgf .ValueNumber ));if !_abea (_aadf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gbca :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_fggba :=args [7];
if _fggba .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gbca =int (_fggba .ValueNumber );if !_ebga (_gbca ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");
};};_bfgc ,_bbbd :=_dgae (_bbaf ,_cgdd ,_gbca );if _bbbd .Type ==ResultTypeError {return _bbbd ;};_bfgc *=_aadf ;_aff ,_bbbd :=_dgae (_baca ,_cgdd ,_gbca );if _bbbd .Type ==ResultTypeError {return _bbbd ;};_aff *=_aadf ;_efacc ,_bbbd :=_dgae (_bbaf ,_baca ,_gbca );
if _bbbd .Type ==ResultTypeError {return _bbbd ;};_efacc *=_aadf ;_ecdfb :=_gbbb +_bfgc *100*_eca /_aadf ;_ecdfb /=_aff *_cega /_aadf +1;_ecdfb -=_efacc *100*_eca /_aadf ;return MakeNumberResult (_ecdfb );};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_efcf :=len (args );if _efcf !=5&&_efcf !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ccce ,_egbd ,_fbfb :=_geec (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _fbfb .Type ==ResultTypeError {return _fbfb ;};_bfdc ,_fbfb :=_dedd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");
if _fbfb .Type ==ResultTypeError {return _fbfb ;};if _bfdc >=_ccce {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_adba :=args [3].ValueNumber ;if _adba < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cdaf :=args [4].ValueNumber ;if _cdaf <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};_cafd :=0;if _efcf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cafd =int (args [5].ValueNumber );if !_ebga (_cafd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");
};};_bcgff ,_fbfb :=_dgae (_bfdc ,_egbd ,_cafd );if _fbfb .Type ==ResultTypeError {return _fbfb ;};_aegg ,_fbfb :=_dgae (_bfdc ,_ccce ,_cafd );if _fbfb .Type ==ResultTypeError {return _fbfb ;};_bfcda ,_fbfb :=_dgae (_ccce ,_egbd ,_cafd );if _fbfb .Type ==ResultTypeError {return _fbfb ;
};_ggcc :=1+_bcgff *_adba ;_ggcc /=_cdaf /100+_aegg *_adba ;_ggcc --;_ggcc /=_bfcda ;return MakeNumberResult (_ggcc );};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_bebb :=MakeNumberResult (0);for _ ,_adfb :=range args {_adfb =_adfb .AsNumber ();switch _adfb .Type {case ResultTypeNumber :_bebb .ValueNumber +=_adfb .ValueNumber ;case ResultTypeList ,ResultTypeArray :_dbggb :=Sum (_adfb .ListValues ());
if _dbggb .Type !=ResultTypeNumber {return _dbggb ;};_bebb .ValueNumber +=_dbggb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _adfb ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_adfb .Type ));
};};return _bebb ;};func _afba (_fdgg float64 )float64 {_bedac :=float64 (1);for _bafgg :=float64 (2);_bafgg <=_fdgg ;_bafgg ++{_bedac *=_bafgg ;};return _bedac ;};func _eafe (_gffa float64 )float64 {return float64 (int (_gffa +0.5))};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_fefe :=len (args );if _fefe !=4&&_fefe !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_addf :=args [0].ValueNumber ;if _addf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_agfe :=args [1].ValueNumber ;if _agfe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gegd :=args [2].ValueNumber ;if _gegd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dafc :=args [3].ValueNumber ;if _dafc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");
};if _dafc > _gegd {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_acfa :=2.0;if _fefe ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acfa =args [4].ValueNumber ;if _acfa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};return MakeNumberResult (_fgbd (_addf ,_agfe ,_gegd ,_dafc ,_acfa ));};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_ggce :=len (args );if _ggce !=4&&_ggce !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cgad ,_acbc ,_caefa :=_geec (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _caefa .Type ==ResultTypeError {return _caefa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eac :=args [2].ValueNumber ;if _eac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_bgge :=args [3].ValueNumber ;if _bgge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");
};_ecfb :=0;if _ggce ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecfb =int (args [4].ValueNumber );if !_ebga (_ecfb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");
};};_gaca ,_caefa :=_dgae (_cgad ,_acbc ,_ecfb );if _caefa .Type ==ResultTypeError {return _caefa ;};return MakeNumberResult (_bgge *(1-_eac *_gaca ));};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ggfc :=[]float64 {};
for _ ,_fgbdb :=range args {switch _fgbdb .Type {case ResultTypeString :_ddde :=_fgbdb .AsNumber ();if _ddde .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_ggfc =append (_ggfc ,_ddde .ValueNumber );case ResultTypeList :_gegf :=LCM (_fgbdb .ValueList );if _gegf .Type !=ResultTypeNumber {return _gegf ;};_ggfc =append (_ggfc ,_gegf .ValueNumber );case ResultTypeNumber :_ggfc =append (_ggfc ,_fgbdb .ValueNumber );
case ResultTypeEmpty :case ResultTypeError :return _fgbdb ;};};if len (_ggfc )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if _ggfc [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_ggfc )==1{return MakeNumberResult (_ggfc [0]);
};_caaec :=_ggfc [0];for _fdde :=1;_fdde < len (_ggfc );_fdde ++{if _ggfc [_fdde ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_caaec =_bged (_caaec ,_ggfc [_fdde ]);};return MakeNumberResult (_caaec );};func _fgbde (_ecccd int )string {if _ecccd >=0&&_ecccd < len (_edgg ){if _edgg [_ecccd ]!=""{return _edgg [_ecccd ];};};return _g .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_ecccd );
};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};type yyParserImpl struct{_gbbee yySymType ;_dgeeg [_eceag ]yySymType ;_egag int ;
};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_bafeg :=len (args );if _bafeg !=2&&_bafeg !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_dage ,_cgfc :=_cdeg (args [0],args [1],"\u0058\u0049\u0052\u0052");if _cgfc .Type ==ResultTypeError {return _cgfc ;};_ggcde :=_dage ._dfedd ;_afgf :=_dage ._dcag ;_eecfc :=0.1;if _bafeg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eecfc =args [2].ValueNumber ;if _eecfc <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");
};};return _bdba (_ggcde ,_afgf ,_eecfc );};type Reference struct{Type ReferenceType ;Value string ;};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_efcfc .Lock ();defer _efcfc .Unlock ();if _afbf ,_cgafa :=_agbb [name ];_cgafa {return _afbf ;};return nil ;};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_aaea :=args [1].ValueNumber ;_ffcc :=args [0];var _dgbe float64 ;switch _ffcc .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
case ResultTypeNumber :_dgbe =_ffcc .ValueNumber ;case ResultTypeString :_beea :=DateValue ([]Result {args [0]});if _beea .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_dgbe =_beea .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_gge :=_gac (_dgbe );_gab :=_gge .AddDate (0,int (_aaea ),0);
_ecff ,_agc ,_eee :=_gab .Date ();_ccb :=_ddgc (_ecff ,int (_agc ),_eee );if _ccb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};return MakeNumberResult (_ccb );};func _fcd (_bbd string )(int ,int ,float64 ,bool ,bool ,Result ){_dadf :="";_acc :=[]string {};for _dcc ,_afcb :=range _dga {_acc =_afcb .FindStringSubmatch (_bbd );if len (_acc )> 1{_dadf =_dcc ;break ;};};if _dadf ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ebc );
};_aga :=_acc [1]=="";_acc =_acc [49:];_edce :=len (_acc );_dab :=_acc [_edce -1];_aacg :=_dab =="\u0061\u006d";_dcd :=_dab =="\u0070\u006d";var _dee ,_ddd int ;var _dgg float64 ;var _ggb error ;switch _dadf {case "\u0068\u0068":_dee ,_ggb =_cf .Atoi (_acc [0]);
if _ggb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ebc );};_ddd =0;_dgg =0;case "\u0068\u0068\u003am\u006d":_dee ,_ggb =_cf .Atoi (_acc [0]);if _ggb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ebc );
};_ddd ,_ggb =_cf .Atoi (_acc [2]);if _ggb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ebc );};_dgg =0;case "\u006d\u006d\u003as\u0073":_dee =0;_ddd ,_ggb =_cf .Atoi (_acc [0]);if _ggb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ebc );
};_dgg ,_ggb =_cf .ParseFloat (_acc [2],64);if _ggb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ebc );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_dee ,_ggb =_cf .Atoi (_acc [0]);if _ggb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ebc );
};_ddd ,_ggb =_cf .Atoi (_acc [2]);if _ggb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ebc );};_dgg ,_ggb =_cf .ParseFloat (_acc [4],64);if _ggb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ebc );};
};if _ddd >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ebc );};if _aacg ||_dcd {if _dee > 12||_dgg >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ebc );}else if _dee ==12{_dee =0;};}else if _dee >=24||_dgg >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ebc );
};return _dee ,_ddd ,_dgg ,_dcd ,_aga ,_acae ;};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_gbde :pfx ,_becd :exp }};func _fbec (_baf ,_fdfa ,_efgc float64 )float64 {return (_baf *3600+_fdfa *60+_efgc )/86400};type rangeIndex struct{_fbfc int ;_ebebc int ;};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dcegd :=args [0].AsString ();if _dcegd .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeStringResult (_cb .ToUpper (_dcegd .ValueString ));};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_dfbb ,_gedbb Expression };

// Eval evaluates and returns the result of a sheet expression.
func (_ggcdb SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");
};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_ddbeg ,_fgagc :=_caedb (args ,false );if _fgagc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_ddbeg /_fgagc );};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_aaec :=args [0].AsString ();if _aaec .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};return ctx .Cell (_aaec .ValueString ,ev );};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_edac :=args [0].AsNumber ();if _edac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (180.0/_cba .Pi *_edac .ValueNumber );};const _eceag =16;

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_gefg :=_eebdg (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _gefg .Type !=ResultTypeEmpty {return _gefg ;};_cbfb :=_bdcf (args [1:]);_cfdg :=-_cba .MaxFloat64 ;_bdcba :=_fedf (args [0]);for _ ,_cefed :=range _cbfb {_ccfgd :=_bdcba [_cefed ._fbfc ][_cefed ._ebebc ].ValueNumber ;
if _cfdg < _ccfgd {_cfdg =_ccfgd ;};};if _cfdg ==-_cba .MaxFloat64 {_cfdg =0;};return MakeNumberResult (float64 (_cfdg ));};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;
);func _cfcdc (_cdgd Result ,_edbed int )[]Result {_geegb :=[]Result {};switch _cdgd .Type {case ResultTypeList :_dgbb :=_cdgd .ValueList ;_bcde :=len (_dgbb );for _fdfc :=0;_fdfc < _edbed ;_fdfc ++{if _fdfc < _bcde {_geegb =append (_geegb ,_dgbb [_fdfc ]);
}else {_geegb =append (_geegb ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _abad :=0;_abad < _edbed ;_abad ++{_geegb =append (_geegb ,_cdgd );};};return _geegb ;};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_ggfag (args ,_cddg ))};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbeaa :=0;_dbca :=false ;for _ ,_debc :=range args {switch _debc .Type {case ResultTypeList ,ResultTypeArray :_bbgc :=Xor (_debc .ListValues ());if _bbgc .Type ==ResultTypeError {return _bbgc ;};if _bbgc .ValueNumber !=0{_cbeaa ++;};_dbca =true ;case ResultTypeNumber :if _debc .ValueNumber !=0{_cbeaa ++;
};_dbca =true ;case ResultTypeString :case ResultTypeError :return _debc ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");
};};if !_dbca {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_cbeaa %2!=0);};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );
};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgbcf :=args [0];if _cgbcf .Type ==ResultTypeNumber {return _cgbcf ;};if _cgbcf .Type ==ResultTypeString {_gbcag ,_dbdg :=_cf .ParseFloat (_cgbcf .Value (),64);if _dbdg ==nil {return MakeNumberResult (_gbcag );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");
};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_gdge :=len (args );if _gdge < 2||_gdge > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_edfd :=args [0];if _edfd .Type !=ResultTypeArray &&_edfd .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_eegf :=args [1].AsNumber ();if _eegf .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_ecfbe :=int (_eegf .ValueNumber )-1;_bafbe :=-1;if _gdge ==3&&args [2].Type !=ResultTypeEmpty {_gbcf :=args [2].AsNumber ();if _gbcf .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_bafbe =int (_gbcf .ValueNumber )-1;};if _ecfbe ==-1&&_bafbe ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};var _aeff []Result ;if _edfd .Type ==ResultTypeArray {_bbga :=_edfd .ValueArray ;if _ecfbe < -1||_ecfbe >=len (_bbga ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _ecfbe ==-1{if _bafbe >=len (_bbga [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_addd :=[][]Result {};for _ ,_efdc :=range _bbga {_gebfd :=_efdc [_bafbe ];
if _gebfd .Type ==ResultTypeEmpty {_gebfd =MakeNumberResult (0);};_addd =append (_addd ,[]Result {_gebfd });};return MakeArrayResult (_addd );};_aeff =_bbga [_ecfbe ];}else {_fcee :=_edfd .ValueList ;if _ecfbe < -1||_ecfbe >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _ecfbe ==-1{if _bafbe >=len (_fcee ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_febe :=_fcee [_bafbe ];if _febe .Type ==ResultTypeEmpty {_febe =MakeNumberResult (0);
};return _febe ;};_aeff =_fcee ;};if _bafbe < -1||_bafbe > len (_aeff ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _bafbe ==-1{_bage :=[]Result {};
for _ ,_geaa :=range _aeff {if _geaa .Type ==ResultTypeEmpty {_bage =append (_bage ,MakeNumberResult (0));}else {_bage =append (_bage ,_geaa );};};return MakeArrayResult ([][]Result {_bage });};_ggag :=_aeff [_bafbe ];if _ggag .Type ==ResultTypeEmpty {return MakeNumberResult (0);
};return _ggag ;};func _gfafa (_aefc ,_gdde ,_ggfb ,_ccfg ,_fdbf ,_daabc float64 ,_aabf int )(float64 ,Result ){_gddd :=int (_daabc );_bdfgc :=_aedf (_aefc ,_gdde ,_gddd ,_aabf );_ffeb :=_bgdb (_aefc ,_gdde ,_gddd ,_aabf )/_bdfgc ;_dadd ,_fadb :=_fgf (_aefc ,_gdde ,_gddd ,_aabf );
if _fadb .Type ==ResultTypeError {return 0,_fadb ;};_ccfc :=_gdecd (_aefc ,_gdde ,_gddd ,_aabf );_dagbd :=_fdbf /_cba .Pow (1+_ccfg /_daabc ,_dadd -1+_ffeb );_dagbd -=100*_ggfb /_daabc *_ccfc /_bdfgc ;_adbe :=100*_ggfb /_daabc ;_gaea :=1+_ccfg /_daabc ;
for _bafg :=0.0;_bafg < _dadd ;_bafg ++{_dagbd +=_adbe /_cba .Pow (_gaea ,_bafg +_ffeb );};return _dagbd ,MakeEmptyResult ();};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ggccd :=args [0].AsString ();if _ggccd .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");
};_fafd :="\u0041\u0031";if len (args )==2{_bgee :=args [1].Ref ;if _bgee .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};_fafd =_bgee .Value ;};switch _ggccd .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_cgbd ,_gcfe :=_dc .ParseCellReference (_fafd );if _gcfe !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fafd );
};_fada :="\u0024"+_cgbd .Column +"\u0024"+_cf .Itoa (int (_cgbd .RowIdx ));if _cgbd .SheetName !=""{_fada =_cgbd .SheetName +"\u0021"+_fada ;};return MakeStringResult (_fada );case "\u0063\u006f\u006c":_fdd ,_aeef :=_dc .ParseCellReference (_fafd );if _aeef !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fafd );
};return MakeNumberResult (float64 (_fdd .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_fbdb :=_cb .Contains (ctx .GetFormat (_fafd ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_fbdb );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];
case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_ggbf :="\u0047";_gdfc :=ctx .GetFormat (_fafd );if _gdfc =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_cfeb .MatchString (_gdfc ){_ggbf ="\u0046\u0030";
}else if _gdfc =="\u0030\u0025"{_ggbf ="\u0050\u0030";}else if _gdfc =="\u004d\u004d\u004d\u0020\u0044\u0044"{_ggbf ="\u0044\u0032";}else if _gdfc =="\u004d\u004d\u002fY\u0059"{_ggbf ="\u0044\u0033";}else if _gdfc =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_gdfc =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_ggbf ="\u0044\u0034";
}else if _gdfc =="\u004d\u004d\u005c\u002d\u0044\u0044"{_ggbf ="\u0044\u0035";}else if _gdfc =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_ggbf ="\u0044\u0036";}else if _gdfc =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_ggbf ="\u0044\u0037";
}else if _gdfc =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_ggbf ="\u0044\u0038";}else if _gdfc =="\u0048\u0048\u003aM\u004d"{_ggbf ="\u0044\u0039";}else if _cdd .MatchString (_gdfc ){_ggbf ="\u002e\u0030";}else if _dgeb .MatchString (_gdfc ){_ggbf ="\u002e\u0030\u0028\u0029";
}else if _bcdf .MatchString (_gdfc ){_ggbf ="\u0043\u0030";}else if _daeg .MatchString (_gdfc )||_dfbce .MatchString (_gdfc ){_ggbf ="\u0044\u0031";}else if _badcf :=_bgbe .FindStringSubmatch (_gdfc );len (_badcf )> 1{_ggbf ="\u0046"+_cf .Itoa (len (_badcf [1]));
}else if _beefb :=_dbggf .FindStringSubmatch (_gdfc );len (_beefb )> 1{_ggbf ="\u002e"+_cf .Itoa (len (_beefb [2]));}else if _fcfbb :=_febba .FindStringSubmatch (_gdfc );len (_fcfbb )> 1{_ggbf ="\u0050"+_cf .Itoa (len (_fcfbb [2]));}else if _efacb :=_daee .FindStringSubmatch (_gdfc );
len (_efacb )> 1{_ggbf ="\u0043"+_fagc (_efacb ,1);}else if _ebfe :=_dgdb .FindStringSubmatch (_gdfc );len (_ebfe )> 1{_ggbf ="\u0043"+_fagc (_ebfe ,1);}else if _edgac :=_dfge .FindStringSubmatch (_gdfc );len (_edgac )> 1{_ggbf ="\u002e"+_fagc (_edgac ,1)+"\u0028\u0029";
}else if _gedb :=_fgfg .FindStringSubmatch (_gdfc );len (_gedb )> 1{_ggbf ="\u002e"+_fagc (_gedb ,1);}else if _cgee :=_fgcg .FindStringSubmatch (_gdfc );len (_cgee )> 1{_ggbf ="\u0053"+_fagc (_cgee ,3);};if _ggbf !="\u0047"&&_cb .Contains (_gdfc ,"\u005b\u0052\u0045D\u005d"){_ggbf +="\u002d";
};return MakeStringResult (_ggbf );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_gedae :=ctx .GetFormat (_fafd );if _fbdc .MatchString (_gedae ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_fafd ));
case "\u0070r\u006f\u0074\u0065\u0063\u0074":_fgegd :=0.0;if ctx .GetLocked (_fafd ){_fgegd =1.0;};return MakeNumberResult (_fgegd );case "\u0072\u006f\u0077":_ecebc ,_fecd :=_dc .ParseCellReference (_fafd );if _fecd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fafd );
};return MakeNumberResult (float64 (_ecebc .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");
};case "\u0077\u0069\u0064t\u0068":_fgedg ,_fbbfg :=_dc .ParseCellReference (_fafd );if _fbbfg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fafd );};if _fgedg .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_fgedg .ColumnIdx )));
}else {return MakeNumberResult (ctx .Sheet (_fgedg .SheetName ).GetWidth (int (_fgedg .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_ggccd .ValueString );
};const _ddaa =57353;func _efcbb (_begb yyLexer ,_bccgb *yySymType )(_fefdg ,_ceca int ){_ceca =0;_fefdg =_begb .Lex (_bccgb );if _fefdg <=0{_ceca =_gbba [0];goto _ggdgf ;};if _fefdg < len (_gbba ){_ceca =_gbba [_fefdg ];goto _ggdgf ;};if _fefdg >=_gdafab {if _fefdg < _gdafab +len (_cfcgf ){_ceca =_cfcgf [_fefdg -_gdafab ];
goto _ggdgf ;};};for _adda :=0;_adda < len (_dfeeg );_adda +=2{_ceca =_dfeeg [_adda +0];if _ceca ==_fefdg {_ceca =_dfeeg [_adda +1];goto _ggdgf ;};};_ggdgf :if _ceca ==0{_ceca =_cfcgf [1];};if _efaf >=3{_g .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_ceacg (_ceca ),uint (_fefdg ));
};return _fefdg ,_ceca ;};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_caf :=len (args );if _caf < 5||_caf > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_acaaa :=args [0].ValueNumber ;if _acaaa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aagf :=args [1].ValueNumber ;if _aagf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gfaff :=args [2].ValueNumber ;if _gfaff ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _gfaff < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_baff :=args [3].ValueNumber ;if _baff < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdafa :=args [4].ValueNumber ;if _baff > _gdafa {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");
};if _gdafa > _gfaff {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_eecd :=2.0;if _caf > 5{if args [5].Type ==ResultTypeEmpty {_eecd =0.0;
}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eecd =args [5].ValueNumber ;if _eecd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};};_eedg :=false ;if _caf > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_eedg =args [6].ValueNumber !=0;};_bagf :=0.0;_cedf :=_cba .Floor (_baff );_fbab :=_cba .Ceil (_gdafa );if _eedg {for _cagfg :=_cedf +1;_cagfg <=_fbab ;_cagfg ++{_cggc :=_fgbd (_acaaa ,_aagf ,_gfaff ,_cagfg ,_eecd );if _cagfg ==_cedf +1{_cggc *=_cba .Min (_gdafa ,_cedf +1)-_baff ;
}else if _cagfg ==_fbab {_cggc *=_gdafa +1-_fbab ;};_bagf +=_cggc ;};}else {_acgae :=_gfaff ;var _ggfd float64 ;if !_bea (_baff ,_cba .Floor (_baff )){if _eecd ==1{_dcdc :=_gfaff /2;if _baff > _dcdc ||_bea (_baff ,_dcdc ){_ggfd =_baff -_dcdc ;_baff =_dcdc ;
_gdafa -=_ggfd ;_acgae ++;};};};if _eecd !=0{_acaaa -=_eafa (_acaaa ,_aagf ,_gfaff ,_acgae ,_baff ,_eecd );};_bagf =_eafa (_acaaa ,_aagf ,_gfaff ,_gfaff -_baff ,_gdafa -_baff ,_eecd );};return MakeNumberResult (_bagf );};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eebe :=args [0].AsNumber ();if _eebe .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bebee :=float64 (1);if _eebe .ValueNumber < 0{_bebee =-1;};if len (args )> 1{_faga :=args [1].AsNumber ();if _faga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_bebee =_faga .ValueNumber ;};_badaf :=float64 (1);if len (args )> 2{_bgac :=args [2].AsNumber ();if _bgac .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_badaf =_bgac .ValueNumber ;};if len (args )==1{return MakeNumberResult (_cba .Floor (_eebe .ValueNumber ));};_egcf :=_eebe .ValueNumber ;_egcf ,_egdda :=_cba .Modf (_egcf /_bebee );if _egdda !=0&&_eebe .ValueNumber < 0&&_badaf > 0{_egcf ++;};return MakeNumberResult (_egcf *_bebee );
};var _afaa =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};const _cdg =_cfgd +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";


// Negate is a negate expression like -A1.
type Negate struct{_baaf Expression };

// Reference returns a string reference value to a vertical range.
func (_ffbce VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_ffbce .verticalRangeReference ()};};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aaaa :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dcab :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_febd :=args [2].ValueNumber ;if _febd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_caca :=args [3].ValueNumber ;return MakeNumberResult (_caca *_aaaa *(_dcab /_febd -1));};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dccg :=args [0].AsNumber ();
if _dccg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_adbfg :=args [1].AsNumber ();if _adbfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_abaeb :=int (_adbfg .ValueNumber );if _abaeb < 0||_abaeb > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");
};_addg :=0;if len (args )> 2{_fccad :=args [2].AsNumber ();if _fccad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_addg =int (_fccad .ValueNumber );};_gbeg :=_cf .FormatInt (int64 (_dccg .ValueNumber ),_abaeb );if len (_gbeg )< _addg {_gbeg =_cb .Repeat ("\u0030",_addg -len (_gbeg ))+_gbeg ;};return MakeStringResult (_gbeg );};

// String returns a string representation of a range with prefix.
func (_gedbda PrefixRangeExpr )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gedbda ._aabde .String (),_gedbda ._babcd .String (),_gedbda ._caeca .String ());};

// String returns a string representation of a horizontal range.
func (_gfff HorizontalRange )String ()string {return _gfff .horizontalRangeReference ()};

// String returns a string representation of SheetPrefixExpr.
func (_efeee SheetPrefixExpr )String ()string {return _efeee ._bgaf };

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _bfcf (args ,false )};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fdgf :=args [0].AsNumber ();
if _fdgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gaga :=_cba .Signbit (_fdgf .ValueNumber );
_gdddf ,_dacf :=_cba .Modf (_fdgf .ValueNumber /2);_aged :=_gdddf *2;if _dacf !=0{if !_gaga {_aged +=2;}else {_aged -=2;};};return MakeNumberResult (_aged );};

// Value returns a string version of the result.
func (_gdc Result )Value ()string {switch _gdc .Type {case ResultTypeNumber :_eddc :=_cf .FormatFloat (_gdc .ValueNumber ,'f',-1,64);if len (_eddc )> 12{_dddfb :=12;for _aegf :=_dddfb ;_aegf > 0&&_eddc [_aegf ]=='0';_aegf --{_dddfb --;};_eddc =_eddc [0:_dddfb +1];
};return _eddc ;case ResultTypeError :return _gdc .ValueString ;case ResultTypeString :return _gdc .ValueString ;case ResultTypeList :if len (_gdc .ValueList )==0{return "";};return _gdc .ValueList [0].Value ();case ResultTypeArray :if len (_gdc .ValueArray )==0||len (_gdc .ValueArray [0])==0{return "";
};return _gdc .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_gbde Expression ;_becd Expression ;};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );
RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );
RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );
RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};const _bdfgce =-1000;

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fefa :=args [0];switch _fefa .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_gdg :=_gac (_fefa .ValueNumber );return MakeNumberResult (float64 (_gdg .Day ()));case ResultTypeString :_bde :=_cb .ToLower (_fefa .ValueString );if !_cgc (_bde ){_ ,_ ,_ ,_ ,_dcaa ,_ffb :=_fcd (_bde );if _ffb .Type ==ResultTypeError {_ffb .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";
return _ffb ;};if _dcaa {return MakeNumberResult (0);};};_ ,_ ,_ecdb ,_ ,_geg :=_dgb (_bde );if _geg .Type ==ResultTypeError {return _geg ;};return MakeNumberResult (float64 (_ecdb ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");
};};func _acec (_dfdc Result ,_egfac ,_fabf string )(float64 ,Result ){switch _dfdc .Type {case ResultTypeEmpty :return 0,_acae ;case ResultTypeNumber :return _dfdc .ValueNumber ,_acae ;case ResultTypeString :_bffdb ,_gacdb :=_cf .ParseFloat (_dfdc .ValueString ,64);
if _gacdb !=nil {return 0,MakeErrorResult (_fabf +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_egfac );};return _bffdb ,_acae ;default:return 0,MakeErrorResult (_egfac +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_fabf +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");
};};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _ccbb (args ,false )};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _aac ,_cgbb float64 ;switch args [0].Type {case ResultTypeNumber :_cgbb =args [0].ValueNumber ;
case ResultTypeString :_ecea :=DateValue ([]Result {args [0]});if _ecea .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");
};_cgbb =_ecea .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_aac =args [1].ValueNumber ;
if _aac < 62&&_cgbb >=62{_aac --;};case ResultTypeString :_fbf :=DateValue ([]Result {args [1]});if _fbf .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");
};_aac =_fbf .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_gdgc :=float64 (int (_cgbb -_aac ));return MakeNumberResult (_gdgc );
};func _dddba (_fdaa string )*criteriaRegex {_gdab :=&criteriaRegex {};if _fdaa ==""{return _gdab ;};if _cdee :=_dddd .FindStringSubmatch (_fdaa );len (_cdee )> 1{_gdab ._dddfc =_baaa ;_gdab ._gfdb =_cdee [1];}else if _cabeb :=_ecbd .FindStringSubmatch (_fdaa );
len (_cabeb )> 1{_gdab ._dddfc =_baaa ;_gdab ._gfdb =_cabeb [1];}else if _dgaec :=_edefa .FindStringSubmatch (_fdaa );len (_dgaec )> 1{_gdab ._dddfc =_acfca ;_gdab ._gfdb =_dgaec [1];}else if _fcdfcg :=_egaa .FindStringSubmatch (_fdaa );len (_fcdfcg )> 1{_gdab ._dddfc =_eadd ;
_gdab ._gfdb =_fcdfcg [1];}else if _geabc :=_gfbe .FindStringSubmatch (_fdaa );len (_geabc )> 1{_gdab ._dddfc =_aadfa ;_gdab ._gfdb =_geabc [1];}else if _cefb :=_dcbe .FindStringSubmatch (_fdaa );len (_cefb )> 1{_gdab ._dddfc =_fage ;_gdab ._gfdb =_cefb [1];
};return _gdab ;};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ceaf :=args [0].AsNumber ();if _ceaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bbdcg :=float64 (1);_deeg :=args [1].AsNumber ();if _deeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_bbdcg =_deeg .ValueNumber ;if _bbdcg < 0&&_ceaf .ValueNumber > 0||_bbdcg > 0&&_ceaf .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");
};_cdba :=_ceaf .ValueNumber ;_cdba ,_fcbgf :=_cba .Modf (_cdba /_bbdcg );if _cba .Trunc (_fcbgf +0.5)> 0{_cdba ++;};return MakeNumberResult (_cdba *_bbdcg );};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_dbee ,_ddab :=_afec ("\u0046\u0049\u004e\u0044",args );if _ddab .Type !=ResultTypeEmpty {return _ddab ;};_bfaef :=_dbee ._aefe ;if _bfaef ==""{return MakeNumberResult (1.0);
};_deac :=_dbee ._gfdg ;_gabd :=_dbee ._dffb -1;_dcgbd :=1;_bfaa :=0;for _fcbca :=range _deac {if _fcbca !=0{_fgeff :=1;if _fcbca -_bfaa > 1{_fgeff =2;};_dcgbd +=_fgeff ;};if _dcgbd > _gabd {_fcaee :=_cb .Index (_deac [_fcbca :],_bfaef );if _fcaee ==0{return MakeNumberResult (float64 (_dcgbd ));
};};_bfaa =_fcbca ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// String returns a string representation for Bool.
func (_fgd Bool )String ()string {if _fgd ._ge {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};const _ffbeg int =0;

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eedf :=args [0].ValueNumber ;if _eedf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ffega :=args [1].ValueNumber ;if _ffega <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbdc :=args [2].ValueNumber ;if _bbdc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");
};return MakeNumberResult (_cba .Pow (_bbdc /_ffega ,1/_eedf )-1);};var _cgfe =[...]int {-1,1,1,-1,-2,0};func _dbeff (_fegdg ,_fdggc float64 )float64 {_fegdg =_cba .Trunc (_fegdg );_fdggc =_cba .Trunc (_fdggc );if _fegdg ==0{return _fdggc ;};if _fdggc ==0{return _fegdg ;
};for _fegdg !=_fdggc {if _fegdg > _fdggc {_fegdg =_fegdg -_fdggc ;}else {_fdggc =_fdggc -_fegdg ;};};return _fegdg ;};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bcfa :=args [0].AsNumber ();_gefbb :=args [1].AsNumber ();_ccdb :=args [2].AsNumber ();_bgcf :=args [3].ListValues ();if _bcfa .Type !=ResultTypeNumber ||_gefbb .Type !=ResultTypeNumber ||_ccdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_bbeed :=float64 (0);for _ebcfa ,_dgfbe :=range _bgcf {_bbeed +=_dgfbe .ValueNumber *_cba .Pow (_bcfa .ValueNumber ,_gefbb .ValueNumber +float64 (_ebcfa )*_ccdb .ValueNumber );};return MakeNumberResult (_bbeed );};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};func _fge (_ced Result )bool {if _ced .Type ==ResultTypeString {return _ced .ValueString =="";};return _ced .ValueNumber ==0;};const _dfbf =57356;

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _gffeg (args ,_agdf )};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dcafa :=args [0].AsString ();if _dcafa .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gbae :=_fg .Buffer {};_ddfd :=false ;_eacgf :=false ;_fagea :=0;for _ ,_abcba :=range _dcafa .ValueString {_gdfcb :=_abcba ==' ';if _gdfcb {if !_ddfd {continue ;};if !_eacgf {_fagea ++;_gbae .WriteRune (_abcba );};}else {_fagea =0;_ddfd =true ;_gbae .WriteRune (_abcba );
};_eacgf =_gdfcb ;};_gbae .Truncate (_gbae .Len ()-_fagea );return MakeStringResult (_gbae .String ());};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_ede ,_cdb :=_bgdc (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _cdb .Type ==ResultTypeError {return _cdb ;};_gebff :=_gac (_ede ._fcc );_fbc :=_gac (_ede ._abae );_eaa :=_ede ._ecec ;_gfdf :=_ede ._egd ;_cabc :=_eaec (_gebff ,_fbc ,_eaa ,_gfdf );
_bdeb ,_cgag ,_gga :=_cabc .Date ();return MakeNumberResult (_ddgc (_bdeb ,int (_cgag ),_gga ));};func _agbe (_bfgb ,_fgaa ,_dfe ,_beeg int )int {if !_edbf (_beeg ){return _dfe ;};_cbge :=_dfe ;_gagd :=_ddgb (_bfgb ,_fgaa );if _cbge > 30||_dfe >=_gagd ||_cbge >=_gagd {_cbge =30;
};return _cbge ;};func init (){_ddga ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );
RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );
RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );
RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};const _eebb int =30;
var _gcbd string =string ([]byte {92});

// Reference returns an invalid reference for EmptyExpr.
func (_bac EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_bda :data }};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_dged PrefixHorizontalRange )Update (q *_bc .UpdateQuery )Expression {return _dged };var _dfeeg =[...]int {0};

// Reference returns a string reference value to a horizontal range with prefix.
func (_bgdea PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_bffc :=_bgdea ._fcbb .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_bgdea .horizontalRangeReference (_bffc .Value )};};const _cbdg =57367;
func _cadd (_dgaff []Result ,_degf string )(*durationArgs ,Result ){_fgba :=len (_dgaff );if _fgba !=5&&_fgba !=6{return nil ,MakeErrorResult (_degf +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gaff ,_gce ,_edag :=_geec (_dgaff [0],_dgaff [1],_degf );if _edag .Type ==ResultTypeError {return nil ,_edag ;};_fgbe :=_dgaff [2];if _fgbe .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_degf +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_cagg :=_fgbe .ValueNumber ;if _cagg < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_eeff :=_dgaff [3];if _eeff .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_degf +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_egca :=_eeff .ValueNumber ;if _egca < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_fegc :=_dgaff [4];if _fegc .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_degf +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gfe :=float64 (int (_fegc .ValueNumber ));if !_abea (_gfe ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_fafg :=0;if _fgba ==6&&_dgaff [5].Type !=ResultTypeEmpty {_bdga :=_dgaff [5];
if _bdga .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_degf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fafg =int (_bdga .ValueNumber );
if !_ebga (_fafg ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_degf );};};return &durationArgs {_gaff ,_gce ,_cagg ,_egca ,_gfe ,_fafg },_acae ;
};func _fccb (_eeaec []Result )(bool ,Result ){for _ ,_fgceg :=range _eeaec {if _fgceg .Type ==ResultTypeError {return true ,_fgceg ;};};return false ,MakeEmptyResult ();};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fdae :=args [0].AsNumber ();if _fdae .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cfda ,_gebcb :=_cba .Modf (_fdae .ValueNumber );if _gebcb < 0{_cfda --;};return MakeNumberResult (_cfda );};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fbebe :=args [0].Ref ;for _fbebe .Type ==ReferenceTypeNamedRange {_fbebe =ctx .NamedRange (_fbebe .Value );};_cgcf :="";switch _fbebe .Type {case ReferenceTypeCell :_cgcf =_fbebe .Value ;case ReferenceTypeRange :_cbgeg :=_cb .Split (_fbebe .Value ,"\u003a");
if len (_cbgeg )==2{_cgcf =_cbgeg [0];};default:return MakeErrorResult (_g .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_fbebe .Type ));
};_daaa ,_ecda :=_dc .ParseCellReference (_cgcf );if _ecda !=nil {return MakeErrorResult (_g .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_ecda .Error ()));
};_ecce ,_gbcc ,_gcge :=_daaa .Column ,_daaa .RowIdx ,_daaa .SheetName ;_egaf :=args [1].AsNumber ();if _egaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};_dafg :=args [2].AsNumber ();if _dafg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};var _ddb ,_gccb Result ;if len (args )==3{_ddb =MakeNumberResult (1);_gccb =MakeNumberResult (1);}else {_ddb =args [3].AsNumber ();if _ddb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");
};if _ddb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_gccb =args [4].AsNumber ();if _gccb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");
};if _gccb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_gccf :=_dc .ColumnToIndex (_ecce );_ggbca :=_gbcc +uint32 (_egaf .ValueNumber );_abcd :=_gccf +uint32 (_dafg .ValueNumber );_cfdf :=_ggbca +uint32 (_ddb .ValueNumber );_dfdac :=_abcd +uint32 (_gccb .ValueNumber );
if _ddb .ValueNumber > 0{_cfdf --;}else {_cfdf ++;_ggbca ,_cfdf =_cfdf ,_ggbca ;};if _gccb .ValueNumber > 0{_dfdac --;}else {_dfdac ++;_abcd ,_dfdac =_dfdac ,_abcd ;};_deeb :=_g .Sprintf ("\u0025\u0073\u0025\u0064",_dc .IndexToColumn (_abcd ),_ggbca );
_cagb :=_g .Sprintf ("\u0025\u0073\u0025\u0064",_dc .IndexToColumn (_dfdac ),_cfdf );if _gcge ==""{return _fgfd (ctx ,ev ,_deeb ,_cagb );}else {return _fgfd (ctx .Sheet (_gcge ),ev ,_deeb ,_cagb );};};const _edbc =57370;type noCache struct{};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_aace :=_cc .Now ();
_ ,_fga :=_aace .Zone ();_eeaf :=_ged +float64 (_aace .Unix ()+int64 (_fga ))/86400;return MakeNumberResult (_eeaf );};var _bcfg []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};
var _edgg =[...]string {};func (_cdbbd *ivr )Sheet (name string )Context {return _cdbbd };

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_efag :=false ;for _ ,_dece :=range args {switch _dece .Type {case ResultTypeList ,ResultTypeArray :_gdggc :=Or (_dece .ListValues ());if _gdggc .Type ==ResultTypeError {return _gdggc ;};if _gdggc .ValueNumber !=0{_efag =true ;};case ResultTypeNumber :if _dece .ValueNumber !=0{_efag =true ;
};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _dece ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");
};};return MakeBoolResult (_efag );};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_fedg :=len (args );if _fedg ==0||_fedg > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");
};_gffd :=_fedf (args [0]);_bca :=[]float64 {};for _ ,_cgeg :=range _gffd {for _ ,_gccg :=range _cgeg {if _gccg .Type ==ResultTypeNumber &&!_gccg .IsBoolean {_bca =append (_bca ,_gccg .ValueNumber );};};};_cfdb :=len (_bca );if len (_bca )< 2{return MakeErrorResultType (ErrorTypeNum ,"");
};_ecdf :=0.1;if _fedg ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ecdf =args [1].ValueNumber ;if _ecdf <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");
};};_gaed :=[]float64 {};for _defd :=0;_defd < _cfdb ;_defd ++{if _defd ==0{_gaed =append (_gaed ,0);}else {_gaed =append (_gaed ,_gaed [_defd -1]+365);};};return _bdba (_bca ,_gaed ,_ecdf );};const _edddf =_cc .Millisecond *1000;func init (){RegisterFunction ("\u0041\u004e\u0044",And );
RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );
};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_gccd :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");
};_gccd =int (args [1].ValueNumber );if _gccd < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");
};if _gccd ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_befde :=args [0].Value ();
if _gccd > len (_befde ){return MakeStringResult (_befde );};return MakeStringResult (_befde [0:_gccd ]);};func (_gfg *evCache )SetCache (key string ,value Result ){_gfg ._ddf .Lock ();_gfg ._eea [key ]=value ;_gfg ._ddf .Unlock ();};func _egc (_egce int )int {if _egce < 1900{if _egce < 30{_egce +=2000;
}else {_egce +=1900;};};return _egce ;};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afdf :=args [0].AsNumber ();if _afdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_cba .Pi /180.0*_afdf .ValueNumber );};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_cbbb :=len (args );if _cbbb !=4&&_cbbb !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bebe ,_eba ,_cbgc :=_geec (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _cbgc .Type ==ResultTypeError {return _cbgc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_dedc :=args [2].ValueNumber ;if _dedc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_adbf :=args [3].ValueNumber ;if _adbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};_daff :=0;if _cbbb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_daff =int (args [4].ValueNumber );if !_ebga (_daff ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");
};};_fafb ,_cbgc :=_dgae (_bebe ,_eba ,_daff );if _cbgc .Type ==ResultTypeError {return _cbgc ;};return MakeNumberResult ((_adbf -_dedc )/_dedc /_fafb );};const _ecebb =57357;

// String returns a string representation of a vertical range.
func (_ccgdd VerticalRange )String ()string {return _ccgdd .verticalRangeReference ()};var _dddd ,_ecbd ,_dcbe ,_gfbe ,_egaa ,_edefa *_de .Regexp ;

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_degg :=args [0].AsNumber ();if _degg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bebf :=float64 (1);if _degg .ValueNumber < 0{_bebf =-1;};if len (args )> 1{_eedd :=args [1].AsNumber ();if _eedd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bebf =_cba .Abs (_eedd .ValueNumber );};if len (args )==1{return MakeNumberResult (_cba .Ceil (_degg .ValueNumber ));};_caag :=_degg .ValueNumber ;_caag ,_cgagc :=_cba .Modf (_caag /_bebf );if _cgagc !=0{if _degg .ValueNumber > 0{_caag ++;};};return MakeNumberResult (_caag *_bebf );
};

// Eval evaluates a vertical range returning a list of results or an error.
func (_gddf VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_dbdcb :=_gddf .verticalRangeReference ();if _cegb ,_degaa :=ev .GetFromCache (_dbdcb );_degaa {return _cegb ;};_febeg ,_fcea :=_gdege (ctx ,_gddf ._effg ,_gddf ._caggb );_cdfc :=_fgfd (ctx ,ev ,_febeg ,_fcea );
ev .SetCache (_dbdcb ,_cdfc );return _cdfc ;};const _ccgdg =57358;var _cdgc *_fb .Rand ;

// String returns a string representation of String.
func (_edfde String )String ()string {return "\u0022"+_edfde ._aeaa +"\u0022"};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_deecf PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_affag :=_deecf ._aabde .Reference (ctx ,ev );_cabd :=_deecf ._babcd .Reference (ctx ,ev );_dfegg :=_deecf ._caeca .Reference (ctx ,ev );switch _affag .Type {case ReferenceTypeSheet :if _agefg (_affag ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_affag .Value ));
};_dbbd :=_adfc (_affag ,_cabd ,_dfegg );if _cabd .Type ==ReferenceTypeCell &&_dfegg .Type ==ReferenceTypeCell {if _dfae ,_ebcgc :=ev .GetFromCache (_dbbd );_ebcgc {return _dfae ;}else {_afge :=_fgfd (ctx .Sheet (_affag .Value ),ev ,_cabd .Value ,_dfegg .Value );
ev .SetCache (_dbbd ,_afge );return _afge ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_dbbd );default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_affag .Type ));
};};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");
};_bbdg ,_dcfd ,_adcb :=_bgfb (args );if _adcb .Type ==ResultTypeError {return _adcb ;};return MakeNumberResult (_afba (_bbdg )/_dcfd );};func _dcdf (_fgaag []Result ,_eaga string )(float64 ,float64 ,Result ){if len (_fgaag )!=2{return 0,0,MakeErrorResult (_eaga +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _fgaag [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_eaga +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_dcbd :=_fgaag [0].ValueNumber ;if _fgaag [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_eaga +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bddd :=float64 (int (_fgaag [1].ValueNumber ));if _bddd < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_eaga +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");
};return _dcbd ,_bddd ,_acae ;};func init (){_cdgc =_fb .New (_fb .NewSource (_cc .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_gcdf ("\u0041\u0053\u0049\u004e",_cba .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_gcdf ("\u0041\u0053\u0049\u004e",_cba .Acos ));
RegisterFunction ("\u0041\u0043\u004fS\u0048",_gcdf ("\u0041\u0053\u0049\u004e",_cba .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_gcdf ("\u0041\u0043\u004f\u0054",func (_fded float64 )float64 {return _cba .Pi /2-_cba .Atan (_fded )}));
RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_gcdf ("\u0041\u0043\u004fT\u0048",func (_adc float64 )float64 {return _cba .Atanh (1/_adc )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );
RegisterFunction ("\u0041\u0053\u0049\u004e",_gcdf ("\u0041\u0053\u0049\u004e",_cba .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_gcdf ("\u0041\u0053\u0049N\u0048",_cba .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_gcdf ("\u0041\u0054\u0041\u004e",_cba .Atan ));
RegisterFunction ("\u0041\u0054\u0041N\u0048",_gcdf ("\u0041\u0054\u0041N\u0048",_cba .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );
RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );
RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_gcdf ("\u0043\u004f\u0053",_cba .Cos ));
RegisterFunction ("\u0043\u004f\u0053\u0048",_gcdf ("\u0043\u004f\u0053\u0048",_cba .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_gdbd ("\u0043\u004f\u0054",_cba .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_gdbd ("\u0043\u004f\u0054\u0048",_cba .Tanh ));
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_gdbd ("\u0043\u0053\u0043",_cba .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_gdbd ("\u0043\u0053\u0043",_cba .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );
RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_gcdf ("\u0045\u0058\u0050",_cba .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );
RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );
RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );
RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_gcdf ("\u004c\u004e",_cba .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_gcdf ("\u004c\u004f\u00471\u0030",_cba .Log10 ));
RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );
RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );
RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );
RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_gdbd ("\u0053\u0045\u0043",_cba .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_gdbd ("\u0053\u0045\u0043\u0048",_cba .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );
RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_gcdf ("\u0053\u0049\u004e",_cba .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_gcdf ("\u0053\u0049\u004e\u0048",_cba .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_gcdf ("\u0053\u0051\u0052\u0054",_cba .Sqrt ));
RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_gcdf ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_bbcd float64 )float64 {return _cba .Sqrt (_bbcd *_cba .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );
RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_gcdf ("\u0054\u0041\u004e",_cba .Tan ));
RegisterFunction ("\u0054\u0041\u004e\u0048",_gcdf ("\u0054\u0041\u004e\u0048",_cba .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// Error is called in the case of parsing error and saves an error to a plex.
func (_gaagb *plex )Error (s string ){_gf .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_gaagb ._dgec =s ;};const _bgab =57350;func (_bcdbc *Lexer )Next ()*node {_bcdbc ._cbdcc .Lock ();defer _bcdbc ._cbdcc .Unlock ();
if len (_bcdbc ._adff )> 0{_dabgd :=_bcdbc ._adff [0];_bcdbc ._adff =_bcdbc ._adff [1:];return _dabgd ;};return _bcdbc .nextRaw ();};func _bfcf (_bfbb []Result ,_dafa bool )Result {_eace :="\u004d\u0049\u004e";if _dafa {_eace ="\u004d\u0049\u004e\u0041";
};if len (_bfbb )==0{return MakeErrorResult (_eace +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcggd :=_cba .MaxFloat64 ;
for _ ,_dafaf :=range _bfbb {switch _dafaf .Type {case ResultTypeNumber :if (_dafa ||!_dafaf .IsBoolean )&&_dafaf .ValueNumber < _bcggd {_bcggd =_dafaf .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_fbcc :=_bfcf (_dafaf .ListValues (),_dafa );if _fbcc .ValueNumber < _bcggd {_bcggd =_fbcc .ValueNumber ;
};case ResultTypeEmpty :case ResultTypeString :_agcc :=0.0;if _dafa {_agcc =_dafaf .AsNumber ().ValueNumber ;};if _agcc < _bcggd {_bcggd =_agcc ;};default:_gf .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_eace +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dafaf .Type );
};};if _bcggd ==_cba .MaxFloat64 {_bcggd =0;};return MakeNumberResult (_bcggd );};

// LastRow returns 0 for the invalid reference context.
func (_ggbeb *ivr )LastRow (colFrom string )int {return 0};type evCache struct{_eea map[string ]Result ;_ddf *_bf .Mutex ;};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_bgaf string };func _bdba (_edad ,_fadd []float64 ,_bbcf float64 )Result {_gfaad :=false ;_cffa :=false ;for _gabe :=0;_gabe < len (_edad );_gabe ++{if _edad [_gabe ]> 0{_gfaad =true ;};if _edad [_gabe ]< 0{_cffa =true ;};};
if !_gfaad ||!_cffa {return MakeErrorResultType (ErrorTypeNum ,"");};_bccbb :=_bbcf ;_befd :=1e-10;_eccg :=0;_fdbaa :=50;_cdce :=false ;for {_bddc :=_agbd (_edad ,_fadd ,_bccbb );_ddcc :=_bccbb -_bddc /_afbg (_edad ,_fadd ,_bccbb );_ddgdg :=_cba .Abs (_ddcc -_bccbb );
_bccbb =_ddcc ;_eccg ++;if _ddgdg <=_befd ||_cba .Abs (_bddc )<=_befd {break ;};if _eccg > _fdbaa {_cdce =true ;break ;};};if _cdce ||_cba .IsNaN (_bccbb )||_cba .IsInf (_bccbb ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_bccbb );
};

// String returns a string representation of Number.
func (_efeb Number )String ()string {return _cf .FormatFloat (_efeb ._fcdae ,'f',-1,64)};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_effg ,_caggb string };const _ddcg ="\u005e\u0028\u0028"+_dbae +"\u007c"+_cdg +"\u007c"+_baac +"\u007c"+_egg +"\u0029\u0020\u0029\u003f";func _gac (_fgg float64 )_cc .Time {_cab :=int64 ((_fgg -_ged )*_gba );return _cc .Unix (0,_cab ).UTC ()};
func _bged (_gaaf ,_abbd float64 )float64 {_gaaf =_cba .Trunc (_gaaf );_abbd =_cba .Trunc (_abbd );if _gaaf ==0&&_abbd ==0{return 0;};return _gaaf *_abbd /_dbeff (_gaaf ,_abbd );};func (_ffc BinOpType )String ()string {if _ffc >=BinOpType (len (_gb )-1){return _g .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ffc );
};return _bb [_gb [_ffc ]:_gb [_ffc +1]];};func _bagc (_fefca string ,_aacgc _cc .Time )(_cc .Time ,error ){_dbfeg ,_ ,_eabd :=_b .ParseFloat (_fefca ,10,128,_b .ToNearestEven );if _eabd !=nil {return _cc .Time {},_eabd ;};_geabd :=new (_b .Float );_geabd .SetUint64 (uint64 (24*_cc .Hour ));
_dbfeg .Mul (_dbfeg ,_geabd );_dbagc ,_ :=_dbfeg .Uint64 ();_bbfec :=_aacgc .Add (_cc .Duration (_dbagc ));return _faa (_bbfec ),nil ;};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _gffeg (args ,_ffeec )};var _ged float64 =25569.0;func (_fgab ResultType )String ()string {if _fgab >=ResultType (len (_fdabb )-1){return _g .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_fgab );
};return _faec [_fdabb [_fgab ]:_fdabb [_fgab +1]];};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _gffeg (args ,_acebd )};var _fdabb =[...]uint8 {0,17,33,49,63,78,93,108};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_gfdd :=len (args );if _gfdd < 4||_gfdd > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bfde :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ceac :=args [1].ValueNumber ;if _ceac <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cecfc :=args [2].ValueNumber ;if _cecfc < _ceac {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_ffge :=args [3].ValueNumber ;_dac :=0.0;if _gfdd >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_dac =args [4].ValueNumber ;};_fdfe :=0;if _gfdd ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fdfe =int (args [5].ValueNumber );if _fdfe !=0{_fdfe =1;};};return MakeNumberResult (_bdbf (_bfde ,_cecfc ,_ffge ,_dac ,_fdfe )-_bbc (_bfde ,_ceac ,_cecfc ,_ffge ,_dac ,_fdfe ));};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gdec :=args [0].ValueNumber ;_bbe :=args [1].ValueNumber ;_dgaf :=args [2].ValueNumber ;_caef :=_fbec (_gdec ,_bbe ,_dgaf );if _caef >=0{return MakeNumberResult (_caef );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// Reference returns a string reference value to a cell.
func (_cgd CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_cgd ._fe };};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_aec ConstArrayExpr )Update (q *_bc .UpdateQuery )Expression {return _aec };func _agbd (_gbaa ,_egf []float64 ,_dccc float64 )float64 {_accd :=_dccc +1;_cbf :=_gbaa [0];_ccbc :=len (_gbaa );_bade :=_egf [0];for _daab :=1;_daab < _ccbc ;_daab ++{_cbf +=_gbaa [_daab ]/_cba .Pow (_accd ,(_egf [_daab ]-_bade )/365);
};return _cbf ;};const _fecf =57347;

// Reference returns an invalid reference for Negate.
func (_eaddc Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Update returns the same object as updating sheet references does not affect Number.
func (_eacgb Number )Update (q *_bc .UpdateQuery )Expression {return _eacgb };

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_gacb ,_fefc ,_ffag :=_dcdf (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _ffag .Type ==ResultTypeError {return _ffag ;};if _fefc < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");
};if _gacb ==0{return MakeNumberResult (0);};_ada :=_gacb < 0;if _ada {_gacb =-_gacb ;};_afeg :=args [0].Value ();_fcag :=_cb .Split (_afeg ,"\u002e");_bdgcd :=float64 (int (_gacb ));_aefa :=_fcag [1];_efgd :=len (_aefa );_edff :=int (_cba .Log10 (_fefc ))+1;
_fedd :=float64 (_edff -_efgd );_fgdc ,_gdef :=_cf .ParseFloat (_aefa ,64);if _gdef !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");
};_fgdc *=_cba .Pow (10,_fedd );_dbaec :=_bdgcd +_fgdc /_fefc ;if _ada {_dbaec =-_dbaec ;};return MakeNumberResult (_dbaec );};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_gaeab :=args [0].AsNumber ();if _gaeab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_agbc :=float64 (1);if _gaeab .ValueNumber < 0{_agbc =-1;};if len (args )> 1{_ebcd :=args [1].AsNumber ();if _ebcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");
};_agbc =_cba .Abs (_ebcd .ValueNumber );};if len (args )==1{return MakeNumberResult (_cba .Floor (_gaeab .ValueNumber ));};_begd :=_gaeab .ValueNumber ;_begd ,_dabgc :=_cba .Modf (_begd /_agbc );if _dabgc !=0{if _gaeab .ValueNumber < 0{_begd --;};};return MakeNumberResult (_begd *_agbc );
};func _afaf (_acbb ,_abgc Reference )string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_acbb .Value ,_abgc .Value );};

// String returns an empty string for EmptyExpr.
func (_gee EmptyExpr )String ()string {return ""};const _bddf =57351;

// String returns a string representation of a horizontal range with prefix.
func (_edgc PrefixHorizontalRange )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_edgc ._fcbb .String (),_edgc ._afbb ,_edgc ._cdfba );};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_eccc :=args [0].AsNumber ();if _eccc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_dccd :=10.0;if len (args )> 1{_baggg :=args [1].AsNumber ();if _baggg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");
};_dccd =args [1].ValueNumber ;};if _eccc .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");
};if _dccd ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");
};return MakeNumberResult (_cba .Log (_eccc .ValueNumber )/_cba .Log (_dccd ));};const _gcea =57368;func _dcfdc ()yyParser {return &yyParserImpl {}};const _ceacf ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";
func _gdae (_cbea Result )[]Result {_cagd :=_cbea .ValueList ;if _cbea .Type ==ResultTypeArray {_cagd =nil ;for _ ,_bbbg :=range _cbea .ValueArray {if len (_bbbg )> 0{_cagd =append (_cagd ,_bbbg [0]);}else {_cagd =append (_cagd ,_acae );};};};return _cagd ;
};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// Update updates references in the BinaryExpr after removing a row/column.
func (_dd BinaryExpr )Update (q *_bc .UpdateQuery )Expression {_gc :=_dd ;_gc ._ccd =_dd ._ccd .Update (q );_gc ._df =_dd ._df .Update (q );return _gc ;};const _faec ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";


// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bgbg :=args [0].AsNumber ();if _bgbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ecfda :=args [1].AsNumber ();if _ecfda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};return MakeNumberResult (_cba .Pow (_bgbg .ValueNumber ,_ecfda .ValueNumber ));};const _dcbaa int =30;

// GetEpoch returns a null time object for the invalid reference context.
func (_acfef *ivr )GetEpoch ()_cc .Time {return _cc .Time {}};func _cgf (_dgbcf ,_bccb _cc .Time ,_edba int )float64 {if _dgbcf .After (_bccb ){_dgbcf ,_bccb =_bccb ,_dgbcf ;};_bdgf :=0;_gfcb ,_abg ,_cac :=_dgbcf .Date ();_gdgg ,_fbbe ,_fbeg :=_bccb .Date ();
_bfg ,_afe :=int (_abg ),int (_fbbe );_dbac ,_bcf :=_agbe (_gfcb ,_bfg ,_cac ,_edba ),_agbe (_gdgg ,_afe ,_fbeg ,_edba );if !_edbf (_edba ){return _ddgc (_gdgg ,_afe ,_bcf )-_ddgc (_gfcb ,_bfg ,_dbac );};if _edba ==0{if (_bfg ==2||_dbac < 30)&&_fbeg ==31{_bcf =31;
}else if _afe ==2&&_bcf ==_ddgb (_gdgg ,_afe ){_bcf =_ddgb (_gdgg ,2);};}else {if _bfg ==2&&_dbac ==30{_dbac =_ddgb (_gfcb ,2);};if _afe ==2&&_bcf ==30{_bcf =_ddgb (_gdgg ,2);};};if _gfcb < _gdgg ||(_gfcb ==_gdgg &&_bfg < _afe ){_bdgf =30-_dbac +1;_cac =1;
_dbac =1;_edbd :=_cc .Date (_gfcb ,_cc .Month (_bfg ),_cac ,0,0,0,0,_cc .UTC ).AddDate (0,1,0);if _edbd .Year ()< _gdgg {_bdgf +=_afb (_edbd .Year (),int (_edbd .Month ()),12,_edba );_edbd =_edbd .AddDate (0,13-int (_edbd .Month ()),0);_bdgf +=_gdd (_edbd .Year (),_gdgg -1,_edba );
};_bdgf +=_afb (_gdgg ,int (_edbd .Month ()),_afe -1,_edba );_edbd =_edbd .AddDate (0,_afe -int (_edbd .Month ()),0);_bfg =_edbd .Day ();};_bdgf +=_bcf -_dbac ;if _bdgf > 0{return float64 (_bdgf );}else {return 0;};};const (_cgcg cmpResult =0;_afed cmpResult =-1;
_dgdee cmpResult =1;_cgbc cmpResult =2;);func _fadf (_gefcec Context ,_caaf ,_eggbg int )(string ,string ){_bcee :="\u0041"+_cf .Itoa (_caaf );_cgca :=_gefcec .LastColumn (_caaf ,_eggbg );_eaffd :=_cgca +_cf .Itoa (_eggbg );return _bcee ,_eaffd ;};func (_cebde Result )AsString ()Result {switch _cebde .Type {case ResultTypeNumber :return MakeStringResult (_cebde .Value ());
default:return _cebde ;};};

// Eval evaluates and returns the result of a function call.
func (_ccfb FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_cbdcg :=LookupFunction (_ccfb ._acbea );if _cbdcg !=nil {_ceace :=make ([]Result ,len (_ccfb ._efab ));for _abfa ,_fbgc :=range _ccfb ._efab {_ceace [_abfa ]=_fbgc .Eval (ctx ,ev );_ceace [_abfa ].Ref =_fbgc .Reference (ctx ,ev );
};if _ ,_gfbee :=_deae [_ccfb ._acbea ];!_gfbee {if _eaddf ,_dbdegd :=_fccb (_ceace );_eaddf {return _dbdegd ;};};return _cbdcg (_ceace );};_fbdgf :=LookupFunctionComplex (_ccfb ._acbea );if _fbdgf !=nil {_fecg :=make ([]Result ,len (_ccfb ._efab ));for _dddeg ,_gfegc :=range _ccfb ._efab {_fecg [_dddeg ]=_gfegc .Eval (ctx ,ev );
_fecg [_dddeg ].Ref =_gfegc .Reference (ctx ,ev );};if _ ,_eefd :=_deae [_ccfb ._acbea ];!_eefd {if _geaeb ,_bbgg :=_fccb (_fecg );_geaeb {return _bbgg ;};};return _fbdgf (ctx ,ev ,_fecg );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_ccfb ._acbea );
};func _badf (_bfae ,_cef int64 )float64 {return float64 (int (0.5+float64 ((_cef -_bfae )/86400)))};

// Eval evaluates the binary expression using the context given.
func (_dfc BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_cg :=_dfc ._ccd .Eval (ctx ,ev );if _cg .Type ==ResultTypeError {return _cg ;};_bcc :=_dfc ._df .Eval (ctx ,ev );if _bcc .Type ==ResultTypeError {return _bcc ;};if _cg .Type ==_bcc .Type {if _cg .Type ==ResultTypeArray {if !_cd (_cg .ValueArray ,_bcc .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _db (_dfc ._dg ,_cg .ValueArray ,_bcc .ValueArray );}else if _cg .Type ==ResultTypeList {if len (_cg .ValueList )!=len (_bcc .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _ae (_dfc ._dg ,_cg .ValueList ,_bcc .ValueList );};}else if _cg .Type ==ResultTypeArray &&(_bcc .Type ==ResultTypeNumber ||_bcc .Type ==ResultTypeString ){return _ccg (_dfc ._dg ,_cg .ValueArray ,_bcc );}else if _cg .Type ==ResultTypeList &&(_bcc .Type ==ResultTypeNumber ||_bcc .Type ==ResultTypeString ){return _fc (_dfc ._dg ,_cg .ValueList ,_bcc );
};switch _dfc ._dg {case BinOpTypePlus :if _cg .Type ==_bcc .Type {if _cg .Type ==ResultTypeNumber {return MakeNumberResult (_cg .ValueNumber +_bcc .ValueNumber );};};case BinOpTypeMinus :if _cg .Type ==_bcc .Type {if _cg .Type ==ResultTypeNumber {return MakeNumberResult (_cg .ValueNumber -_bcc .ValueNumber );
};};case BinOpTypeMult :if _cg .Type ==_bcc .Type {if _cg .Type ==ResultTypeNumber {return MakeNumberResult (_cg .ValueNumber *_bcc .ValueNumber );};};case BinOpTypeDiv :if _cg .Type ==_bcc .Type {if _cg .Type ==ResultTypeNumber {if _bcc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");
};return MakeNumberResult (_cg .ValueNumber /_bcc .ValueNumber );};};case BinOpTypeExp :if _cg .Type ==_bcc .Type {if _cg .Type ==ResultTypeNumber {return MakeNumberResult (_cba .Pow (_cg .ValueNumber ,_bcc .ValueNumber ));};};case BinOpTypeLT :if _cg .Type ==_bcc .Type {if _cg .Type ==ResultTypeNumber {return MakeBoolResult (_cg .ValueNumber < _bcc .ValueNumber );
};if _cg .Type ==ResultTypeString {return MakeBoolResult (_cg .ValueString < _bcc .ValueString );};if _cg .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _cg .Type ==ResultTypeString &&_bcc .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _cg .Type ==ResultTypeNumber &&_bcc .Type ==ResultTypeString {return MakeBoolResult (true );}else if _cg .Type ==ResultTypeEmpty &&(_bcc .Type ==ResultTypeNumber ||_bcc .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString )&&_bcc .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};case BinOpTypeGT :if _cg .Type ==_bcc .Type {if _cg .Type ==ResultTypeNumber {return MakeBoolResult (_cg .ValueNumber > _bcc .ValueNumber );};if _cg .Type ==ResultTypeString {return MakeBoolResult (_cg .ValueString > _bcc .ValueString );};if _cg .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if _cg .Type ==ResultTypeString &&_bcc .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _cg .Type ==ResultTypeNumber &&_bcc .Type ==ResultTypeString {return MakeBoolResult (false );}else if _cg .Type ==ResultTypeEmpty &&(_bcc .Type ==ResultTypeNumber ||_bcc .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if (_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString )&&_bcc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _cg .Type ==_bcc .Type {if _cg .Type ==ResultTypeNumber {return MakeBoolResult (_cg .ValueNumber ==_bcc .ValueNumber );
};if _cg .Type ==ResultTypeString {return MakeBoolResult (_cg .ValueString ==_bcc .ValueString );};if _cg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_cg .Type ==ResultTypeString &&_bcc .Type ==ResultTypeNumber )||(_cg .Type ==ResultTypeNumber &&_bcc .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if _cg .Type ==ResultTypeEmpty &&(_bcc .Type ==ResultTypeNumber ||_bcc .Type ==ResultTypeString ){return MakeBoolResult (_fge (_bcc ));}else if (_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString )&&_bcc .Type ==ResultTypeEmpty {return MakeBoolResult (_fge (_cg ));
};case BinOpTypeNE :if _cg .Type ==_bcc .Type {if _cg .Type ==ResultTypeNumber {return MakeBoolResult (_cg .ValueNumber !=_bcc .ValueNumber );};if _cg .Type ==ResultTypeString {return MakeBoolResult (_cg .ValueString !=_bcc .ValueString );};if _cg .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if (_cg .Type ==ResultTypeString &&_bcc .Type ==ResultTypeNumber )||(_cg .Type ==ResultTypeNumber &&_bcc .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _cg .Type ==ResultTypeEmpty &&(_bcc .Type ==ResultTypeNumber ||_bcc .Type ==ResultTypeString ){return MakeBoolResult (!_fge (_bcc ));
}else if (_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString )&&_bcc .Type ==ResultTypeEmpty {return MakeBoolResult (!_fge (_cg ));};case BinOpTypeLEQ :if _cg .Type ==_bcc .Type {if _cg .Type ==ResultTypeNumber {return MakeBoolResult (_cg .ValueNumber <=_bcc .ValueNumber );
};if _cg .Type ==ResultTypeString {return MakeBoolResult (_cg .ValueString <=_bcc .ValueString );};if _cg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _cg .Type ==ResultTypeString &&_bcc .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _cg .Type ==ResultTypeNumber &&_bcc .Type ==ResultTypeString {return MakeBoolResult (true );}else if _cg .Type ==ResultTypeEmpty &&(_bcc .Type ==ResultTypeNumber ||_bcc .Type ==ResultTypeString ){return MakeBoolResult (_fge (_bcc ));}else if (_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString )&&_bcc .Type ==ResultTypeEmpty {return MakeBoolResult (_fge (_cg ));
};case BinOpTypeGEQ :if _cg .Type ==_bcc .Type {if _cg .Type ==ResultTypeNumber {return MakeBoolResult (_cg .ValueNumber >=_bcc .ValueNumber );};if _cg .Type ==ResultTypeString {return MakeBoolResult (_cg .ValueString >=_bcc .ValueString );};if _cg .Type ==ResultTypeEmpty {return MakeBoolResult (true );
};}else if _cg .Type ==ResultTypeString &&_bcc .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _cg .Type ==ResultTypeNumber &&_bcc .Type ==ResultTypeString {return MakeBoolResult (false );}else if _cg .Type ==ResultTypeEmpty &&(_bcc .Type ==ResultTypeNumber ||_bcc .Type ==ResultTypeString ){return MakeBoolResult (_fge (_bcc ));
}else if (_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString )&&_bcc .Type ==ResultTypeEmpty {return MakeBoolResult (_fge (_cg ));};case BinOpTypeConcat :return MakeStringResult (_cg .Value ()+_bcc .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");
};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (ev .LastEvalIsRef ());};func _ggfag (_deca []Result ,_befdd countMode )float64 {_bgfa :=0.0;for _ ,_cdac :=range _deca {switch _cdac .Type {case ResultTypeNumber :if _befdd ==_fceb ||(_befdd ==_cddg &&!_cdac .IsBoolean ){_bgfa ++;
};case ResultTypeList ,ResultTypeArray :_bgfa +=_ggfag (_cdac .ListValues (),_befdd );case ResultTypeString :if _befdd ==_fceb {_bgfa ++;};case ResultTypeEmpty :if _befdd ==_deaa {_bgfa ++;};};};return _bgfa ;};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_bdab :=len (args );if _bdab !=6&&_bdab !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_caggg ,_cbga ,_fdca :=_geec (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _fdca .Type ==ResultTypeError {return _fdca ;};_dbdbc :=args [2];if _dbdbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gdb :=_dbdbc .ValueNumber ;if _gdb < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_cfac :=args [3];if _cfac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ddgef :=_cfac .ValueNumber ;if _ddgef <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_edefb :=args [4];if _edefb .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_ebcf :=_edefb .ValueNumber ;if _ebcf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gbbe :=args [5];
if _gbbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dbcg :=float64 (int (_gbbe .ValueNumber ));if !_abea (_dbcg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_acfc :=0;if _bdab ==7&&args [6].Type !=ResultTypeEmpty {_fbcge :=args [6];
if _fbcge .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_acfc =int (_fbcge .ValueNumber );
if !_ebga (_acfc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_adfab :=0.0;
_bfabe :=0.0;_bdfb :=1.0;_affab ,_fdca :=_gfafa (_caggg ,_cbga ,_gdb ,_bfabe ,_ebcf ,_dbcg ,_acfc );if _fdca .Type ==ResultTypeError {return _fdca ;};_bgeg ,_fdca :=_gfafa (_caggg ,_cbga ,_gdb ,_bdfb ,_ebcf ,_dbcg ,_acfc );if _fdca .Type ==ResultTypeError {return _fdca ;
};_gebc :=(_bdfb -_bfabe )*0.5;for _ddaed :=0;_ddaed < 100&&_adfab !=_ddgef ;_ddaed ++{_adfab ,_fdca =_gfafa (_caggg ,_cbga ,_gdb ,_gebc ,_ebcf ,_dbcg ,_acfc );if _fdca .Type ==ResultTypeError {return _fdca ;};if _ddgef ==_affab {return MakeNumberResult (_bfabe );
}else if _ddgef ==_bgeg {return MakeNumberResult (_bdfb );}else if _ddgef ==_adfab {return MakeNumberResult (_gebc );}else if _ddgef < _bgeg {_bdfb *=2.0;_bgeg ,_fdca =_gfafa (_caggg ,_cbga ,_gdb ,_bdfb ,_ebcf ,_dbcg ,_acfc );if _fdca .Type ==ResultTypeError {return _fdca ;
};_gebc =(_bdfb -_bfabe )*0.5;}else {if _ddgef < _adfab {_bfabe =_gebc ;_affab =_adfab ;}else {_bdfb =_gebc ;_bgeg =_adfab ;};_gebc =_bdfb -(_bdfb -_bfabe )*((_ddgef -_bgeg )/(_affab -_bgeg ));};};return MakeNumberResult (_gebc );};type ivr struct{};const _faad =57374;
var _efcfc _bf .Mutex ;

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_bdce :v }};

// Error is an error expression.
type Error struct{_gde string };

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cbfa :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_dfg :=args [2].ValueNumber +1;if _dfg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_babce :=_fedf (args [0]);_aad :=float64 (len (_babce ));_cgdag ,_aeg :=0.0,0.0;_edea ,_dbadc :=1.0,1.0;_gecb ,_efda :=false ,false ;for _ ,_bbfg :=range _babce {for _ ,_gffdf :=range _bbfg {if _gffdf .Type ==ResultTypeNumber &&!_gffdf .IsBoolean {_faed :=_gffdf .ValueNumber ;
if _faed ==0{continue ;}else {if _faed > 0{_gecb =true ;_aeg +=_gffdf .ValueNumber *_dbadc ;}else {_efda =true ;_cgdag +=_gffdf .ValueNumber *_edea ;};_edea /=_cbfa ;_dbadc /=_dfg ;};};};};if !_gecb ||!_efda {return MakeErrorResultType (ErrorTypeDivideByZero ,"");
};_bcac :=-_aeg /_cgdag ;_bcac *=_cba .Pow (_dfg ,_aad -1);_bcac =_cba .Pow (_bcac ,1/(_aad -1));return MakeNumberResult (_bcac -1);};func init (){_ggae ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );
RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );
RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );
RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );
RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// Update updates references in the Negate after removing a row/column.
func (_cfeag Negate )Update (q *_bc .UpdateQuery )Expression {return Negate {_baaf :_cfeag ._baaf .Update (q )};};type ri struct{_bbca float64 ;_ddfg string ;};

// Eval evaluates a range returning a list of results or an error.
func (_gacfb Range )Eval (ctx Context ,ev Evaluator )Result {_cabdf :=_gacfb ._dfbb .Reference (ctx ,ev );_afgee :=_gacfb ._gedbb .Reference (ctx ,ev );_ddbeb :=_afaf (_cabdf ,_afgee );if _cabdf .Type ==ReferenceTypeCell &&_afgee .Type ==ReferenceTypeCell {if _fbbcb ,_fbbeb :=ev .GetFromCache (_ddbeb );
_fbbeb {return _fbbcb ;}else {_dadb :=_fgfd (ctx ,ev ,_cabdf .Value ,_afgee .Value );ev .SetCache (_ddbeb ,_dadb );return _dadb ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_ddbeb );};const (BinOpTypeUnknown BinOpType =iota ;
BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_ecdfbf ,_afda ,_abcg :=_geec (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _abcg .Type ==ResultTypeError {return _abcg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eeed :=_afda -_ecdfbf ;if _eeed > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_daeb :=args [2].ValueNumber ;if _daeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cee :=(100-_daeb )/_daeb ;_dfbc :=360/_eeed ;return MakeNumberResult (_cee *_dfbc );};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_dabe :=args [0].AsNumber ();
_cacb :=args [1].AsNumber ();if _dabe .Type ==ResultTypeNumber &&_cacb .Type ==ResultTypeNumber {_dcee :=_cba .Atan2 (_cacb .ValueNumber ,_dabe .ValueNumber );if _dcee !=_dcee {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");
};return MakeNumberResult (_dcee );};for _ ,_dabc :=range []ResultType {_dabe .Type ,_cacb .Type }{switch _dabc {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
case ResultTypeError :return _dabe ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dabc ));
};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _fcgb (args ,false )};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_fbfe :=_cb .ToLower (args [0].ValueString );if !_cgc (_fbfe ){_ ,_ ,_ ,_ ,_cbc ,_bgf :=_fcd (_fbfe );if _bgf .Type ==ResultTypeError {_bgf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";
return _bgf ;};if _cbc {return MakeNumberResult (0);};};_bdf ,_bace ,_cbbe ,_ ,_fac :=_dgb (_fbfe );if _fac .Type ==ResultTypeError {return _fac ;};return MakeNumberResult (_ddgc (_bdf ,_bace ,_cbbe ));};func _gdecd (_cbe ,_ccge float64 ,_cgdg ,_gefd int )float64 {_efgf :=_gac (_cbe );
_dce :=_gac (_ccge );_gaf :=_eaec (_efgf ,_dce ,_cgdg ,_gefd );return _cgf (_gaf ,_efgf ,_gefd );};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _bfcf (args ,true )};func _eebdg (_gcac []Result ,_gdfe bool ,_ggefe string )Result {var _dcced ,_caad string ;if _gdfe {_dcced ="\u0074\u0068\u0072e\u0065";_caad ="\u006f\u0064\u0064";}else {_dcced ="\u0074\u0077\u006f";
_caad ="\u0065\u0076\u0065\u006e";};_bbgb :=len (_gcac );if (_gdfe &&_bbgb < 3)||(!_gdfe &&_bbgb < 2){return MakeErrorResult (_ggefe +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_dcced +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};if (_bbgb /2*2==_bbgb )==_gdfe {return MakeErrorResult (_ggefe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_caad +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_dbdcg :=-1;_bebd :=-1;
for _bccbf :=0;_bccbf < _bbgb ;_bccbf +=2{_afdc :=_gcac [_bccbf ];if _afdc .Type !=ResultTypeArray &&_afdc .Type !=ResultTypeList {return MakeErrorResult (_ggefe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");
};_bbge :=_fedf (_afdc );if _bebd ==-1{_bebd =len (_bbge );_dbdcg =len (_bbge [0]);}else if len (_bbge )!=_bebd ||len (_bbge [0])!=_dbdcg {return MakeErrorResult (_ggefe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");
};if _gdfe &&_bccbf ==0{_bccbf --;};};return _acae ;};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_beg :=args [0];switch _beg .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_gag :=_gac (_beg .ValueNumber );return MakeNumberResult (float64 (_gag .Minute ()));case ResultTypeString :_beb :=_cb .ToLower (_beg .ValueString );if !_ecb (_beb ){_ ,_ ,_ ,_bdge ,_ggca :=_dgb (_beb );if _ggca .Type ==ResultTypeError {_ggca .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";
return _ggca ;};if _bdge {return MakeNumberResult (0);};};_ ,_dad ,_ ,_ ,_ ,_fab :=_fcd (_beb );if _fab .Type ==ResultTypeError {return _fab ;};return MakeNumberResult (float64 (_dad ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");
};};func NewLexer ()*Lexer {return &Lexer {_ceeg :make (chan *node )}};func _bgdc (_fgag []Result ,_dbgc string )(*couponArgs ,Result ){_dceg :=len (_fgag );if _dceg !=3&&_dceg !=4{return nil ,MakeErrorResult (_dbgc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fgbb ,_afcc ,_fbbc :=_geec (_fgag [0],_fgag [1],_dbgc );if _fbbc .Type ==ResultTypeError {return nil ,_fbbc ;};if _fgag [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbgc +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bfacc :=_fgag [2].ValueNumber ;if !_abea (_bfacc ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_dbgc );};_bffb :=0;if _dceg ==4&&_fgag [3].Type !=ResultTypeEmpty {if _fgag [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbgc +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bffb =int (_fgag [3].ValueNumber );if !_ebga (_bffb ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_dbgc );
};};return &couponArgs {_fgbb ,_afcc ,int (_bfacc ),_bffb },_acae ;};const _egged =57375;

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_ffecc ,_dgefa :=_afec ("\u0046\u0049\u004e\u0044",args );if _dgefa .Type !=ResultTypeEmpty {return _dgefa ;};_ebgae :=_ffecc ._aefe ;if _ebgae ==""{return MakeNumberResult (1.0);};_afbaf :=_ffecc ._gfdg ;_gfef :=_ffecc ._dffb ;
_eddd :=1;for _bebfb :=range _afbaf {if _eddd < _gfef {_eddd ++;continue ;};_bagag :=_cb .Index (_afbaf [_bebfb :],_ebgae );if _bagag ==0{return MakeNumberResult (float64 (_eddd ));};_eddd ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_baad :=args [0].AsNumber ();if _baad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};var _egbab float64 ;_egddaa :=args [1].AsNumber ();if _egddaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_egbab =_egddaa .ValueNumber ;if _egbab < 0&&_baad .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");
};_efae :=_baad .ValueNumber ;_efae ,_gdbc :=_cba .Modf (_efae /_egbab );if _gdbc !=0{if _baad .ValueNumber < 0&&_gdbc < 0{_efae --;};};return MakeNumberResult (_efae *_egbab );};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_aacf :=_cb .Split (v ,"\u003a");if len (_aacf )!=2{return nil ;};if _aacf [0]> _aacf [1]{_aacf [0],_aacf [1]=_aacf [1],_aacf [0];};return VerticalRange {_effg :_aacf [0],_caggb :_aacf [1]};};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_ecc :=int (args [0].ValueNumber );if _ecc < 0||_ecc >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _ecc <=1899{_ecc +=1900;};_fgc :=_cc .Month (args [1].ValueNumber );
_fea :=int (args [2].ValueNumber );_fbae :=_babc (_ecc ,_fgc ,_fea );_abe :=_badf (_bfac ,_fbae )+1;if _abe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_abe );
};

// Eval evaluates and returns the result of a constant array expression.
func (_af ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_cgde :=[][]Result {};for _ ,_bff :=range _af ._bda {_cfg :=[]Result {};for _ ,_fgb :=range _bff {_cfg =append (_cfg ,_fgb .Eval (ctx ,ev ));};_cgde =append (_cgde ,_cfg );};return MakeArrayResult (_cgde );
};func _afag (_fabd []Result )Result {_cgcgg :=_fabd [0].ValueList ;_cgea :=len (_cgcgg );switch len (_fabd ){case 1:_becb :=[]Result {};for _ ,_dafb :=range _cgcgg {_becb =append (_becb ,MakeBoolResult (_dafb .ValueNumber !=0));};return MakeListResult (_becb );
case 2:_aaed :=_fabd [1];switch _aaed .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_ebcb :=[]Result {};for _ ,_dcbf :=range _cgcgg {var _baeg Result ;if _dcbf .ValueNumber ==0{_baeg =MakeBoolResult (false );}else {_baeg =_aaed ;};_ebcb =append (_ebcb ,_baeg );
};return MakeListResult (_ebcb );case ResultTypeList :_cdgf :=_cfcdc (_aaed ,_cgea );_ggbce :=[]Result {};for _bdegc ,_beab :=range _cgcgg {var _dbdbf Result ;if _beab .ValueNumber ==0{_dbdbf =MakeBoolResult (false );}else {_dbdbf =_cdgf [_bdegc ];};_ggbce =append (_ggbce ,_dbdbf );
};return MakeListResult (_ggbce );case ResultTypeArray :_ecba :=_egfaf (_aaed ,len (_aaed .ValueArray ),_cgea );_efdd :=[][]Result {};for _ ,_dbdec :=range _ecba {_dddf :=[]Result {};for _bfgec ,_babeg :=range _cgcgg {var _gbfb Result ;if _babeg .ValueNumber ==0{_gbfb =MakeBoolResult (false );
}else {_gbfb =_dbdec [_bfgec ];};_dddf =append (_dddf ,_gbfb );};_efdd =append (_efdd ,_dddf );};return MakeArrayResult (_efdd );};case 3:_dbefe :=_fabd [1];_ebge :=_fabd [2];_daacf :=_acdca (_dbefe );_bgde :=_acdca (_ebge );if _daacf &&_bgde {_gacbf :=[]Result {};
for _ ,_efcdf :=range _cgcgg {var _fgbg Result ;if _efcdf .ValueNumber ==0{_fgbg =_ebge ;}else {_fgbg =_dbefe ;};_gacbf =append (_gacbf ,_fgbg );};return MakeListResult (_gacbf );};if _dbefe .Type !=ResultTypeArray &&_ebge .Type !=ResultTypeArray {_cecg :=_cfcdc (_dbefe ,_cgea );
_ggbfe :=_cfcdc (_ebge ,_cgea );_agfd :=[]Result {};for _agcba ,_bacgc :=range _cgcgg {var _dgcg Result ;if _bacgc .ValueNumber ==0{_dgcg =_ggbfe [_agcba ];}else {_dgcg =_cecg [_agcba ];};_agfd =append (_agfd ,_dgcg );};return MakeListResult (_agfd );};
_cbac ,_fgec :=len (_dbefe .ValueArray ),len (_ebge .ValueArray );_cbgcb ,_ffga :=_cbac ,_fgec ;if _fgec > _cbgcb {_cbgcb ,_ffga =_ffga ,_cbgcb ;};_gefce :=_egfaf (_dbefe ,_cbgcb ,_cgea );_debf :=_egfaf (_ebge ,_cbgcb ,_cgea );_cgef :=[][]Result {};for _ddag :=0;
_ddag < _cbgcb ;_ddag ++{_cgabb :=[]Result {};for _bfafe ,_gaeaf :=range _cgcgg {var _degdg Result ;if _gaeaf .ValueNumber ==0{if _ddag < _fgec {_degdg =_debf [_ddag ][_bfafe ];}else {_degdg =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _ddag < _cbac {_degdg =_gefce [_ddag ][_bfafe ];
}else {_degdg =MakeErrorResultType (ErrorTypeNA ,"");};};_cgabb =append (_cgabb ,_degdg );};_cgef =append (_cgef ,_cgabb );};return MakeArrayResult (_cgef );};return MakeErrorResult ("");};func _eaec (_egbb ,_aecbg _cc .Time ,_aef ,_gbcd int )_cc .Time {_ggab :=_aecbg ;
_cebd :=_egbb .Year ()-_aecbg .Year ();_ggab =_ggab .AddDate (_cebd ,0,0);if _egbb .After (_ggab ){_ggab =_ggab .AddDate (1,0,0);};_adge :=-12/_aef ;for _ggab .After (_egbb ){_ggab =_ggab .AddDate (0,_adge ,0);};return _ggab ;};

// String returns a string representation of CellRef.
func (_aaa CellRef )String ()string {return _aaa ._fe };func _acage (_bfdca Result )*criteriaParsed {_gafg :=_bfdca .Type ==ResultTypeNumber ;_ccgb :=_bfdca .ValueNumber ;_eaecc :=_cb .ToLower (_bfdca .ValueString );_abeg :=_dddba (_eaecc );return &criteriaParsed {_gafg ,_ccgb ,_eaecc ,_abeg };
};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_fgaf ,_dgcfg :=_afec ("\u0046\u0049\u004e\u0044",args );if _dgcfg .Type !=ResultTypeEmpty {return _dgcfg ;};_eeda :=_cb .ToLower (_fgaf ._aefe );
_dfefc :=_cb .ToLower (_fgaf ._gfdg );if _eeda ==""{return MakeNumberResult (1.0);};_cgge :=_fgaf ._dffb -1;_cbeeg :=1;_acaff :=0;for _ccdeg :=range _dfefc {if _ccdeg !=0{_cbgbe :=1;if _ccdeg -_acaff > 1{_cbgbe =2;};_cbeeg +=_cbgbe ;};if _cbeeg > _cgge {_cfaf :=_ce .Index (_eeda ,_dfefc [_ccdeg :]);
if _cfaf ==0{return MakeNumberResult (float64 (_cbeeg ));};};_acaff =_ccdeg ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_bbcdf :=_cb .Split (v ,"\u003a");if len (_bbcdf )!=2{return nil ;};_bbfd ,_ :=_cf .Atoi (_bbcdf [0]);_aafdb ,_ :=_cf .Atoi (_bbcdf [1]);if _bbfd > _aafdb {_bbfd ,_aafdb =_aafdb ,_bbfd ;
};return PrefixHorizontalRange {_fcbb :pfx ,_afbb :_bbfd ,_cdfba :_aafdb };};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_gdega ,_cbacd :=_afec ("\u0046\u0049\u004e\u0044",args );if _cbacd .Type !=ResultTypeEmpty {return _cbacd ;};_adec :=_cb .ToLower (_gdega ._aefe );if _adec ==""{return MakeNumberResult (1.0);};_aefba :=_cb .ToLower (_gdega ._gfdg );
_eecfe :=_gdega ._dffb ;_fbbfa :=1;for _dcccd :=range _aefba {if _fbbfa < _eecfe {_fbbfa ++;continue ;};_decaa :=_ce .Index (_adec ,_aefba [_dcccd :]);if _decaa ==0{return MakeNumberResult (float64 (_fbbfa ));};_fbbfa ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_caaef :=args [0];if _caaef .Type ==ResultTypeError ||_caaef .Type ==ResultTypeString {return _caaef ;};return _acae ;};type amorArgs struct{_aceb float64 ;_fbcf float64 ;_dcef float64 ;_bbbe float64 ;_fede int ;_cgace float64 ;_gedc int ;};func _edbf (_bafe int )bool {return _bafe ==0||_bafe ==4};


// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_fbgaf :=args [0];if _fbgaf .Type ==ResultTypeError {return _fbgaf ;
};if _fbgaf .Type !=ResultTypeString &&_fbgaf .Type !=ResultTypeNumber &&_fbgaf .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_dgcga :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_agfb :=int (args [1].ValueNumber );if _agfb < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gcefa :=int (args [2].ValueNumber );if _gcefa < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_gcdd :=len (_dgcga );if _agfb > _gcdd {return MakeStringResult ("");};_agfb --;_cbfgf :=_agfb +_gcefa ;if _cbfgf > _gcdd {return MakeStringResult (_dgcga [_agfb :]);}else {return MakeStringResult (_dgcga [_agfb :_cbfgf ]);};};

// Eval evaluates and returns the result of an error expression.
func (_bacf Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_bacf ._gde )};type countMode byte ;func _egfaf (_gcgeg Result ,_acbf ,_cfgc int )[][]Result {_afgfc :=[][]Result {};switch _gcgeg .Type {case ResultTypeArray :for _cdad ,_edefd :=range _gcgeg .ValueArray {if _cdad < _acbf {_afgfc =append (_afgfc ,_cfcdc (MakeListResult (_edefd ),_cfgc ));
}else {_afgfc =append (_afgfc ,_cfcdc (MakeErrorResultType (ErrorTypeNA ,""),_cfgc ));};};case ResultTypeList :_facc :=_cfcdc (_gcgeg ,_cfgc );for _acba :=0;_acba < _acbf ;_acba ++{_afgfc =append (_afgfc ,_facc );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _dcacf :=0;
_dcacf < _acbf ;_dcacf ++{_dgebe :=_cfcdc (_gcgeg ,_cfgc );_afgfc =append (_afgfc ,_dgebe );};};return _afgfc ;};const _cdaff =187;func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );
RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );
RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );
RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );
RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );
RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );
RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};type plex struct{_fcgf chan *node ;
_gdecf Expression ;_dgec string ;};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };
case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };
case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };
default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};var _ebgaa =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};
const _efgde =57360;func _bbc (_cbgbc ,_daaf ,_cedb ,_ggeb ,_fcbf float64 ,_cdbb int )float64 {_bdfc :=_bdbf (_cbgbc ,_cedb ,_ggeb ,_fcbf ,_cdbb );var _gebb float64 ;if _daaf ==1{if _cdbb ==1{_gebb =0;}else {_gebb =-_ggeb ;};}else {if _cdbb ==1{_gebb =_fcaa (_cbgbc ,_daaf -2,_bdfc ,_ggeb ,1)-_bdfc ;
}else {_gebb =_fcaa (_cbgbc ,_daaf -1,_bdfc ,_ggeb ,0);};};return _gebb *_cbgbc ;};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_gbge :=len (args );if _gbge !=4&&_gbge !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_bcdd ,_cdca ,_bbgd :=_geec (args [0],args [1],"\u0044\u0049\u0053\u0043");if _bbgd .Type ==ResultTypeError {return _bbgd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fagg :=args [2].ValueNumber ;if _fagg <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acgad :=args [3].ValueNumber ;if _acgad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_caab :=0;if _gbge ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_caab =int (args [4].ValueNumber );if !_ebga (_caab ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");
};};_dec ,_bbgd :=_dgae (_bcdd ,_cdca ,_caab );if _bbgd .Type ==ResultTypeError {return _bbgd ;};return MakeNumberResult ((_acgad -_fagg )/_acgad /_dec );};func _dadde (_gdabd Result ,_beeaf ,_bdae string )(string ,Result ){switch _gdabd .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _gdabd .Value (),_acae ;
default:return "",MakeErrorResult (_beeaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_bdae +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};func _acdca (_deec Result )bool {_fgbc :=_deec .Type ;
return _fgbc !=ResultTypeArray &&_fgbc !=ResultTypeList ;};const _agag =57359;

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_efcg :=args [0].AsString ();if _efcg .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_ebfec :=args [1].AsNumber ();if _ebfec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _ebfec .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");
};if _ebfec .ValueNumber ==0{return MakeStringResult ("");};_afced :=_fg .Buffer {};for _ccbe :=0;_ccbe < int (_ebfec .ValueNumber );_ccbe ++{_afced .WriteString (_efcg .ValueString );};return MakeStringResult (_afced .String ());};const _gcbfa =57348;


// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cfebc :=args [0];switch _cfebc .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
case ResultTypeString :_dcec :=0.0;_fcba :=0.0;for _ ,_gbac :=range _cfebc .ValueString {_dccf :=0.0;switch _gbac {case 'I':_dccf =1;case 'V':_dccf =5;case 'X':_dccf =10;case 'L':_dccf =50;case 'C':_dccf =100;case 'D':_dccf =500;case 'M':_dccf =1000;};
_dcec +=_dccf ;switch {case _fcba ==_dccf &&(_fcba ==5||_fcba ==50||_fcba ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_fcba ==_dccf :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");
};if _fcba < _dccf {_dcec -=2*_fcba ;};_fcba =_dccf ;};return MakeNumberResult (_dcec );case ResultTypeError :return _cfebc ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cfebc .Type ));
};};

// Reference returns a string reference value to a vertical range with prefix.
func (_gafd PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_efabb :=_gafd ._ddgae .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_gafd .verticalRangeReference (_efabb .Value )};};const _baac ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";


// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ecbg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_babe :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gecgf :=args [2].ValueNumber ;if _gecgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fce :=args [3].ValueNumber ;if _fce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _fce > _gecgf {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");
};_gcb :=(_ecbg -_babe )*(_gecgf -_fce +1)*2;_defa :=_gecgf *(_gecgf +1);return MakeNumberResult (_gcb /_defa );};func _dgegd (_cdea []Result ,_ebde []string ,_abgb bool )[]string {for _ ,_dabeb :=range _cdea {switch _dabeb .Type {case ResultTypeEmpty :if !_abgb {_ebde =append (_ebde ,"");
};case ResultTypeString :if _dabeb .ValueString !=""||!_abgb {_ebde =append (_ebde ,_dabeb .ValueString );};case ResultTypeNumber :_ebde =append (_ebde ,_dabeb .Value ());case ResultTypeList :_ebde =_cgcc (_ebde ,_dgegd (_dabeb .ValueList ,[]string {},_abgb ));
case ResultTypeArray :for _ ,_egbac :=range _dabeb .ValueArray {_ebde =_cgcc (_ebde ,_dgegd (_egbac ,[]string {},_abgb ));};};};return _ebde ;};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_acbea :name ,_efab :args };};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_cb .NewReader (s ));};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_cba .Pi );};func (_gggcg *Lexer )lex (_gdfce _f .Reader ){_begde ,_eabb ,_gabec :=0,0,0;
_acdbg :=-1;_fegcd ,_gcae ,_gcdb :=0,0,0;_ =_gcdb ;_gabcg :=1;_ =_gabcg ;_gabef :=make ([]byte ,4096);_ccbcf :=false ;for !_ccbcf {_ddba :=0;if _fegcd > 0{_ddba =_eabb -_fegcd ;};_eabb =0;_dbbgg ,_cacgf :=_gdfce .Read (_gabef [_ddba :]);if _dbbgg ==0||_cacgf !=nil {_ccbcf =true ;
};_gabec =_dbbgg +_ddba ;if _gabec < len (_gabef ){_acdbg =_gabec ;};{_begde =_eebb ;_fegcd =0;_gcae =0;_gcdb =0;};{var _cfdbc int ;var _gefa uint ;if _eabb ==_gabec {goto _afaag ;};if _begde ==0{goto _bbgagb ;};_fagfa :_cfdbc =int (_bfbdc [_begde ]);_gefa =uint (_bcfg [_cfdbc ]);
_cfdbc ++;for ;_gefa > 0;_gefa --{_cfdbc ++;switch _bcfg [_cfdbc -1]{case 2:_fegcd =_eabb ;};};switch _begde {case 30:switch _gabef [_eabb ]{case 34:goto _ebcc ;case 35:goto _fgagcg ;case 36:goto _bdbcg ;case 38:goto _aaac ;case 39:goto _aegb ;case 40:goto _bgacf ;
case 41:goto _accfe ;case 42:goto _cbaf ;case 43:goto _feba ;case 44:goto _gecgg ;case 45:goto _eecg ;case 47:goto _acgc ;case 58:goto _fbeab ;case 59:goto _efaga ;case 60:goto _afcbd ;case 61:goto _baccc ;case 62:goto _gffad ;case 63:goto _dcdeb ;case 70:goto _cbbeg ;
case 84:goto _ccgc ;case 92:goto _ceegb ;case 94:goto _gdad ;case 95:goto _bfefb ;case 123:goto _gfca ;case 125:goto _bdfcbf ;};switch {case _gabef [_eabb ]< 65:switch {case _gabef [_eabb ]> 37:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _gedag ;};
case _gabef [_eabb ]>=33:goto _dcdeb ;};case _gabef [_eabb ]> 90:switch {case _gabef [_eabb ]> 93:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _ccca ;};case _gabef [_eabb ]>=91:goto _dcdeb ;};default:goto _cgaa ;};goto _eegc ;case 1:switch _gabef [_eabb ]{case 33:goto _afgc ;
case 47:goto _adcbe ;case 123:goto _adcbe ;case 125:goto _adcbe ;};switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _adcbe ;};case _gabef [_eabb ]> 45:switch {case _gabef [_eabb ]> 63:if 91<=_gabef [_eabb ]&&_gabef [_eabb ]<=94{goto _adcbe ;
};case _gabef [_eabb ]>=58:goto _adcbe ;};default:goto _adcbe ;};goto _eegc ;case 0:goto _bbgagb ;case 2:if _gabef [_eabb ]==34{goto _acaee ;};goto _ebcc ;case 31:if _gabef [_eabb ]==34{goto _ebcc ;};goto _abdc ;case 3:switch _gabef [_eabb ]{case 78:goto _babege ;
case 82:goto _deadg ;};goto _dcdeb ;case 4:switch _gabef [_eabb ]{case 47:goto _cbfed ;case 85:goto _cegc ;};goto _dcdeb ;case 5:if _gabef [_eabb ]==65{goto _eafee ;};goto _dcdeb ;case 6:switch _gabef [_eabb ]{case 76:goto _befcb ;case 77:goto _ffba ;};
goto _dcdeb ;case 7:if _gabef [_eabb ]==76{goto _ffba ;};goto _dcdeb ;case 8:if _gabef [_eabb ]==33{goto _eafee ;};goto _dcdeb ;case 9:if _gabef [_eabb ]==69{goto _bbfgf ;};goto _dcdeb ;case 10:if _gabef [_eabb ]==70{goto _cfeda ;};goto _dcdeb ;case 11:if _gabef [_eabb ]==33{goto _cdcb ;
};goto _dcdeb ;case 12:switch _gabef [_eabb ]{case 33:goto _afgc ;case 47:goto _dcdeb ;case 123:goto _dcdeb ;case 125:goto _dcdeb ;};switch {case _gabef [_eabb ]< 48:switch {case _gabef [_eabb ]> 35:if 37<=_gabef [_eabb ]&&_gabef [_eabb ]<=45{goto _dcdeb ;
};case _gabef [_eabb ]>=34:goto _dcdeb ;};case _gabef [_eabb ]> 57:switch {case _gabef [_eabb ]< 65:if 58<=_gabef [_eabb ]&&_gabef [_eabb ]<=63{goto _dcdeb ;};case _gabef [_eabb ]> 90:if 91<=_gabef [_eabb ]&&_gabef [_eabb ]<=94{goto _dcdeb ;};default:goto _fdee ;
};default:goto _gdfb ;};goto _eegc ;case 13:switch _gabef [_eabb ]{case 33:goto _afgc ;case 47:goto _dcdeb ;case 58:goto _cfcaa ;case 123:goto _dcdeb ;case 125:goto _dcdeb ;};switch {case _gabef [_eabb ]< 48:switch {case _gabef [_eabb ]> 35:if 37<=_gabef [_eabb ]&&_gabef [_eabb ]<=45{goto _dcdeb ;
};case _gabef [_eabb ]>=34:goto _dcdeb ;};case _gabef [_eabb ]> 57:switch {case _gabef [_eabb ]> 63:if 91<=_gabef [_eabb ]&&_gabef [_eabb ]<=94{goto _dcdeb ;};case _gabef [_eabb ]>=59:goto _dcdeb ;};default:goto _gdfb ;};goto _eegc ;case 14:if _gabef [_eabb ]==36{goto _dbcd ;
};if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _gage ;};goto _adcbe ;case 15:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _gage ;};goto _adcbe ;case 32:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _gage ;};goto _gedd ;case 16:switch _gabef [_eabb ]{case 33:goto _afgc ;
case 36:goto _bgff ;case 47:goto _dcdeb ;case 58:goto _afbag ;case 123:goto _dcdeb ;case 125:goto _dcdeb ;};switch {case _gabef [_eabb ]< 59:switch {case _gabef [_eabb ]> 45:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _agee ;};case _gabef [_eabb ]>=34:goto _dcdeb ;
};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]> 90:if 91<=_gabef [_eabb ]&&_gabef [_eabb ]<=94{goto _dcdeb ;};case _gabef [_eabb ]>=65:goto _fdee ;};default:goto _dcdeb ;};goto _eegc ;case 17:switch _gabef [_eabb ]{case 33:goto _afgc ;case 47:goto _adcbe ;
case 123:goto _adcbe ;case 125:goto _adcbe ;};switch {case _gabef [_eabb ]< 48:switch {case _gabef [_eabb ]> 35:if 37<=_gabef [_eabb ]&&_gabef [_eabb ]<=45{goto _adcbe ;};case _gabef [_eabb ]>=34:goto _adcbe ;};case _gabef [_eabb ]> 57:switch {case _gabef [_eabb ]> 63:if 91<=_gabef [_eabb ]&&_gabef [_eabb ]<=94{goto _adcbe ;
};case _gabef [_eabb ]>=58:goto _adcbe ;};default:goto _agee ;};goto _eegc ;case 33:switch _gabef [_eabb ]{case 33:goto _afgc ;case 47:goto _becbc ;case 123:goto _becbc ;case 125:goto _becbc ;};switch {case _gabef [_eabb ]< 48:switch {case _gabef [_eabb ]> 35:if 37<=_gabef [_eabb ]&&_gabef [_eabb ]<=45{goto _becbc ;
};case _gabef [_eabb ]>=34:goto _becbc ;};case _gabef [_eabb ]> 57:switch {case _gabef [_eabb ]> 63:if 91<=_gabef [_eabb ]&&_gabef [_eabb ]<=94{goto _becbc ;};case _gabef [_eabb ]>=58:goto _becbc ;};default:goto _agee ;};goto _eegc ;case 18:if _gabef [_eabb ]==36{goto _ggga ;
};if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _baffe ;};goto _adcbe ;case 19:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _baffe ;};goto _adcbe ;case 34:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _baffe ;};goto _edbad ;case 20:switch _gabef [_eabb ]{case 39:goto _dcdeb ;
case 42:goto _dcdeb ;case 47:goto _dcdeb ;case 58:goto _dcdeb ;case 63:goto _dcdeb ;};if 91<=_gabef [_eabb ]&&_gabef [_eabb ]<=93{goto _dcdeb ;};goto _bfea ;case 21:switch _gabef [_eabb ]{case 39:goto _fbdge ;case 42:goto _dcdeb ;case 47:goto _dcdeb ;case 58:goto _dcdeb ;
case 63:goto _dcdeb ;};if 91<=_gabef [_eabb ]&&_gabef [_eabb ]<=93{goto _dcdeb ;};goto _bfea ;case 22:if _gabef [_eabb ]==33{goto _gebfb ;};goto _dcdeb ;case 35:switch _gabef [_eabb ]{case 33:goto _afgc ;case 46:goto _gafc ;case 58:goto _cfcaa ;case 101:goto _dfad ;
case 123:goto _ffgdg ;case 125:goto _ffgdg ;};switch {case _gabef [_eabb ]< 48:switch {case _gabef [_eabb ]> 35:if 37<=_gabef [_eabb ]&&_gabef [_eabb ]<=47{goto _ffgdg ;};case _gabef [_eabb ]>=34:goto _ffgdg ;};case _gabef [_eabb ]> 57:switch {case _gabef [_eabb ]> 63:if 91<=_gabef [_eabb ]&&_gabef [_eabb ]<=94{goto _ffgdg ;
};case _gabef [_eabb ]>=59:goto _ffgdg ;};default:goto _gedag ;};goto _eegc ;case 36:switch _gabef [_eabb ]{case 33:goto _afgc ;case 47:goto _ffgdg ;case 101:goto _dfad ;case 123:goto _ffgdg ;case 125:goto _ffgdg ;};switch {case _gabef [_eabb ]< 48:switch {case _gabef [_eabb ]> 35:if 37<=_gabef [_eabb ]&&_gabef [_eabb ]<=45{goto _ffgdg ;
};case _gabef [_eabb ]>=34:goto _ffgdg ;};case _gabef [_eabb ]> 57:switch {case _gabef [_eabb ]> 63:if 91<=_gabef [_eabb ]&&_gabef [_eabb ]<=94{goto _ffgdg ;};case _gabef [_eabb ]>=58:goto _ffgdg ;};default:goto _gafc ;};goto _eegc ;case 23:switch _gabef [_eabb ]{case 33:goto _afgc ;
case 47:goto _eaeg ;case 123:goto _eaeg ;case 125:goto _eaeg ;};switch {case _gabef [_eabb ]< 48:switch {case _gabef [_eabb ]> 35:if 37<=_gabef [_eabb ]&&_gabef [_eabb ]<=45{goto _eaeg ;};case _gabef [_eabb ]>=34:goto _eaeg ;};case _gabef [_eabb ]> 57:switch {case _gabef [_eabb ]> 63:if 91<=_gabef [_eabb ]&&_gabef [_eabb ]<=94{goto _eaeg ;
};case _gabef [_eabb ]>=58:goto _eaeg ;};default:goto _dgfg ;};goto _eegc ;case 37:switch _gabef [_eabb ]{case 33:goto _afgc ;case 47:goto _ffgdg ;case 123:goto _ffgdg ;case 125:goto _ffgdg ;};switch {case _gabef [_eabb ]< 48:switch {case _gabef [_eabb ]> 35:if 37<=_gabef [_eabb ]&&_gabef [_eabb ]<=45{goto _ffgdg ;
};case _gabef [_eabb ]>=34:goto _ffgdg ;};case _gabef [_eabb ]> 57:switch {case _gabef [_eabb ]> 63:if 91<=_gabef [_eabb ]&&_gabef [_eabb ]<=94{goto _ffgdg ;};case _gabef [_eabb ]>=58:goto _ffgdg ;};default:goto _dgfg ;};goto _eegc ;case 38:switch _gabef [_eabb ]{case 61:goto _aaaaf ;
case 62:goto _ffbf ;};goto _bfaba ;case 39:if _gabef [_eabb ]==61{goto _eebeg ;};goto _fbdd ;case 24:switch _gabef [_eabb ]{case 33:goto _afgc ;case 36:goto _bgff ;case 40:goto _eeca ;case 46:goto _acgd ;case 58:goto _afbag ;case 92:goto _cgddf ;case 95:goto _cbaad ;
case 123:goto _dcdeb ;case 125:goto _dcdeb ;};switch {case _gabef [_eabb ]< 59:switch {case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _edafa ;};case _gabef [_eabb ]>=34:goto _dcdeb ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _dcca ;
};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;};default:goto _dcdeb ;};default:goto _dcdeb ;};goto _eegc ;case 40:switch _gabef [_eabb ]{case 33:goto _afgc ;case 40:goto _eeca ;case 46:goto _acgd ;case 92:goto _cgddf ;
case 95:goto _cbaad ;case 123:goto _gcca ;case 125:goto _gcca ;};switch {case _gabef [_eabb ]< 58:switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _gcca ;};case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _acgd ;
};default:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _acgd ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;};default:goto _gcca ;};default:goto _gcca ;
};goto _eegc ;case 41:switch _gabef [_eabb ]{case 46:goto _cgddf ;case 92:goto _cgddf ;case 95:goto _cgddf ;};switch {case _gabef [_eabb ]< 65:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _cgddf ;};case _gabef [_eabb ]> 90:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cgddf ;
};default:goto _cgddf ;};goto _gcca ;case 42:switch _gabef [_eabb ]{case 33:goto _afgc ;case 46:goto _cbaad ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _gcca ;case 125:goto _gcca ;};switch {case _gabef [_eabb ]< 58:switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _gcca ;
};case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _cbaad ;};default:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _cbaad ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;
};default:goto _gcca ;};default:goto _gcca ;};goto _eegc ;case 43:switch _gabef [_eabb ]{case 33:goto _afgc ;case 40:goto _eeca ;case 46:goto _acgd ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _becbc ;case 125:goto _becbc ;};switch {case _gabef [_eabb ]< 58:switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _becbc ;
};case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _edafa ;};default:goto _becbc ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _acgd ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;
};default:goto _becbc ;};default:goto _becbc ;};goto _eegc ;case 44:switch _gabef [_eabb ]{case 33:goto _afgc ;case 36:goto _bgff ;case 40:goto _eeca ;case 46:goto _acgd ;case 58:goto _afbag ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _adcbe ;
case 125:goto _adcbe ;};switch {case _gabef [_eabb ]< 59:switch {case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _edafa ;};case _gabef [_eabb ]>=34:goto _adcbe ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _dcca ;
};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;};default:goto _adcbe ;};default:goto _adcbe ;};goto _eegc ;case 25:switch _gabef [_eabb ]{case 33:goto _afgc ;case 36:goto _bgff ;case 40:goto _eeca ;case 46:goto _acgd ;
case 58:goto _afbag ;case 65:goto _fdbfd ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _dcdeb ;case 125:goto _dcdeb ;};switch {case _gabef [_eabb ]< 59:switch {case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _edafa ;
};case _gabef [_eabb ]>=34:goto _dcdeb ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 66<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _dcca ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;};default:goto _dcdeb ;
};default:goto _dcdeb ;};goto _eegc ;case 45:switch _gabef [_eabb ]{case 33:goto _afgc ;case 36:goto _bgff ;case 40:goto _eeca ;case 46:goto _acgd ;case 58:goto _afbag ;case 76:goto _edeb ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _gcca ;
case 125:goto _gcca ;};switch {case _gabef [_eabb ]< 59:switch {case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _edafa ;};case _gabef [_eabb ]>=34:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _dcca ;
};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;};default:goto _gcca ;};default:goto _gcca ;};goto _eegc ;case 46:switch _gabef [_eabb ]{case 33:goto _afgc ;case 36:goto _bgff ;case 40:goto _eeca ;case 46:goto _acgd ;
case 58:goto _afbag ;case 83:goto _gdbf ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _gcca ;case 125:goto _gcca ;};switch {case _gabef [_eabb ]< 59:switch {case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _edafa ;};
case _gabef [_eabb ]>=34:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _dcca ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;};default:goto _gcca ;
};default:goto _gcca ;};goto _eegc ;case 47:switch _gabef [_eabb ]{case 33:goto _afgc ;case 36:goto _bgff ;case 40:goto _eeca ;case 46:goto _acgd ;case 58:goto _afbag ;case 69:goto _fadag ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _gcca ;
case 125:goto _gcca ;};switch {case _gabef [_eabb ]< 59:switch {case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _edafa ;};case _gabef [_eabb ]>=34:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _dcca ;
};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;};default:goto _gcca ;};default:goto _gcca ;};goto _eegc ;case 26:switch _gabef [_eabb ]{case 33:goto _afgc ;case 36:goto _bgff ;case 40:goto _eeca ;case 46:goto _acgd ;
case 58:goto _afbag ;case 79:goto _cbfc ;case 82:goto _gbbc ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _dcdeb ;case 125:goto _dcdeb ;};switch {case _gabef [_eabb ]< 59:switch {case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _edafa ;
};case _gabef [_eabb ]>=34:goto _dcdeb ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _dcca ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;};default:goto _dcdeb ;
};default:goto _dcdeb ;};goto _eegc ;case 48:switch _gabef [_eabb ]{case 33:goto _afgc ;case 36:goto _bgff ;case 40:goto _eeca ;case 46:goto _acgd ;case 58:goto _afbag ;case 68:goto _cfcb ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _gcca ;
case 125:goto _gcca ;};switch {case _gabef [_eabb ]< 59:switch {case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _edafa ;};case _gabef [_eabb ]>=34:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _dcca ;
};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;};default:goto _gcca ;};default:goto _gcca ;};goto _eegc ;case 49:switch _gabef [_eabb ]{case 33:goto _afgc ;case 36:goto _bgff ;case 40:goto _eeca ;case 46:goto _acgd ;
case 58:goto _afbag ;case 79:goto _bebff ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _gcca ;case 125:goto _gcca ;};switch {case _gabef [_eabb ]< 59:switch {case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _edafa ;};
case _gabef [_eabb ]>=34:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _dcca ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;};default:goto _gcca ;
};default:goto _gcca ;};goto _eegc ;case 50:switch _gabef [_eabb ]{case 33:goto _afgc ;case 36:goto _bgff ;case 40:goto _eeca ;case 46:goto _acgd ;case 58:goto _afbag ;case 85:goto _gdbf ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _gcca ;case 125:goto _gcca ;
};switch {case _gabef [_eabb ]< 59:switch {case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _edafa ;};case _gabef [_eabb ]>=34:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _dcca ;
};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;};default:goto _gcca ;};default:goto _gcca ;};goto _eegc ;case 27:switch _gabef [_eabb ]{case 46:goto _cgddf ;case 92:goto _cgddf ;case 95:goto _cgddf ;};switch {case _gabef [_eabb ]< 65:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _cgddf ;
};case _gabef [_eabb ]> 90:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cgddf ;};default:goto _cgddf ;};goto _dcdeb ;case 28:switch _gabef [_eabb ]{case 33:goto _afgc ;case 46:goto _cbaad ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 120:goto _edefea ;
case 123:goto _dcdeb ;case 125:goto _dcdeb ;};switch {case _gabef [_eabb ]< 58:switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _dcdeb ;};case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _cbaad ;
};default:goto _dcdeb ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _cbaad ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;};default:goto _dcdeb ;};default:goto _dcdeb ;
};goto _eegc ;case 51:switch _gabef [_eabb ]{case 33:goto _afgc ;case 46:goto _cbaad ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 108:goto _gcdcc ;case 123:goto _gcca ;case 125:goto _gcca ;};switch {case _gabef [_eabb ]< 58:switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _gcca ;
};case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _cbaad ;};default:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _cbaad ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;
};default:goto _gcca ;};default:goto _gcca ;};goto _eegc ;case 52:switch _gabef [_eabb ]{case 33:goto _afgc ;case 46:goto _cbaad ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 102:goto _gcacd ;case 110:goto _bcaf ;case 123:goto _gcca ;case 125:goto _gcca ;
};switch {case _gabef [_eabb ]< 58:switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _gcca ;};case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _cbaad ;};default:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _cbaad ;
};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;};default:goto _gcca ;};default:goto _gcca ;};goto _eegc ;case 53:switch _gabef [_eabb ]{case 33:goto _afgc ;case 46:goto _cbaad ;case 92:goto _cgddf ;case 95:goto _cbaad ;
case 110:goto _abed ;case 123:goto _gcca ;case 125:goto _gcca ;};switch {case _gabef [_eabb ]< 58:switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _gcca ;};case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _cbaad ;
};default:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _cbaad ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;};default:goto _gcca ;};default:goto _gcca ;
};goto _eegc ;case 54:switch _gabef [_eabb ]{case 33:goto _afgc ;case 46:goto _bdfaf ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _gcca ;case 125:goto _gcca ;};switch {case _gabef [_eabb ]< 58:switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _gcca ;
};case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _cbaad ;};default:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _cbaad ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;
};default:goto _gcca ;};default:goto _gcca ;};goto _eegc ;case 55:switch _gabef [_eabb ]{case 33:goto _afgc ;case 46:goto _cbaad ;case 92:goto _cgddf ;case 95:goto _cacad ;case 123:goto _gcca ;case 125:goto _gcca ;};switch {case _gabef [_eabb ]< 58:switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _gcca ;
};case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _cbaad ;};default:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _cacad ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;
};default:goto _gcca ;};default:goto _gcca ;};goto _eegc ;case 56:switch _gabef [_eabb ]{case 33:goto _afgc ;case 40:goto _ceba ;case 46:goto _cacad ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _gcca ;case 125:goto _gcca ;};switch {case _gabef [_eabb ]< 58:switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _gcca ;
};case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _cacad ;};default:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _cacad ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;
};default:goto _gcca ;};default:goto _gcca ;};goto _eegc ;case 57:switch _gabef [_eabb ]{case 33:goto _afgc ;case 46:goto _cbaad ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 109:goto _eegag ;case 123:goto _gcca ;case 125:goto _gcca ;};switch {case _gabef [_eabb ]< 58:switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _gcca ;
};case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _cbaad ;};default:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _cbaad ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;
};default:goto _gcca ;};default:goto _gcca ;};goto _eegc ;case 58:switch _gabef [_eabb ]{case 33:goto _afgc ;case 46:goto _fbed ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _gcca ;case 125:goto _gcca ;};switch {case _gabef [_eabb ]< 58:switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _gcca ;
};case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _cbaad ;};default:goto _gcca ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _cbaad ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;
};default:goto _gcca ;};default:goto _gcca ;};goto _eegc ;case 59:switch _gabef [_eabb ]{case 33:goto _afgc ;case 46:goto _cbaad ;case 92:goto _cgddf ;case 95:goto _cbcf ;case 123:goto _adcbe ;case 125:goto _adcbe ;};switch {case _gabef [_eabb ]< 58:switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _adcbe ;
};case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _cbaad ;};default:goto _adcbe ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _cbcf ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;
};default:goto _adcbe ;};default:goto _adcbe ;};goto _eegc ;case 29:switch _gabef [_eabb ]{case 33:goto _afgc ;case 46:goto _cbaad ;case 92:goto _cgddf ;case 95:goto _cbaad ;case 123:goto _dcdeb ;case 125:goto _dcdeb ;};switch {case _gabef [_eabb ]< 58:switch {case _gabef [_eabb ]< 37:if 34<=_gabef [_eabb ]&&_gabef [_eabb ]<=35{goto _dcdeb ;
};case _gabef [_eabb ]> 47:if 48<=_gabef [_eabb ]&&_gabef [_eabb ]<=57{goto _cbaad ;};default:goto _dcdeb ;};case _gabef [_eabb ]> 63:switch {case _gabef [_eabb ]< 91:if 65<=_gabef [_eabb ]&&_gabef [_eabb ]<=90{goto _cbaad ;};case _gabef [_eabb ]> 94:if 97<=_gabef [_eabb ]&&_gabef [_eabb ]<=122{goto _cbaad ;
};default:goto _dcdeb ;};default:goto _dcdeb ;};goto _eegc ;};_dcdeb :_begde =0;goto _bfdd ;_eegc :_begde =1;goto _bfdd ;_ebcc :_begde =2;goto _bfdd ;_fgagcg :_begde =3;goto _bfdd ;_babege :_begde =4;goto _bfdd ;_cbfed :_begde =5;goto _bfdd ;_cegc :_begde =6;
goto _bfdd ;_befcb :_begde =7;goto _bfdd ;_ffba :_begde =8;goto _bfdd ;_deadg :_begde =9;goto _bfdd ;_bbfgf :_begde =10;goto _bfdd ;_cfeda :_begde =11;goto _bfdd ;_bdbcg :_begde =12;goto _bfdd ;_gdfb :_begde =13;goto _bfdd ;_cfcaa :_begde =14;goto _bfdd ;
_dbcd :_begde =15;goto _bfdd ;_fdee :_begde =16;goto _bfdd ;_bgff :_begde =17;goto _bfdd ;_afbag :_begde =18;goto _bfdd ;_ggga :_begde =19;goto _bfdd ;_aegb :_begde =20;goto _bfdd ;_bfea :_begde =21;goto _bfdd ;_fbdge :_begde =22;goto _bfdd ;_dfad :_begde =23;
goto _bfdd ;_cgaa :_begde =24;goto _bfdd ;_cbbeg :_begde =25;goto _bfdd ;_ccgc :_begde =26;goto _bfdd ;_ceegb :_begde =27;goto _bfdd ;_bfefb :_begde =28;goto _bfdd ;_ccca :_begde =29;goto _bfdd ;_adcbe :_begde =30;goto _bebec ;_afgc :_begde =30;goto _ecdc ;
_eafee :_begde =30;goto _ffacce ;_cdcb :_begde =30;goto _dbcge ;_gebfb :_begde =30;goto _dgbcb ;_eaeg :_begde =30;goto _fcdgb ;_eeca :_begde =30;goto _cgceg ;_aaac :_begde =30;goto _eaacb ;_bgacf :_begde =30;goto _ccfe ;_accfe :_begde =30;goto _feagg ;
_cbaf :_begde =30;goto _eecb ;_feba :_begde =30;goto _ddef ;_gecgg :_begde =30;goto _cfae ;_eecg :_begde =30;goto _gdefe ;_acgc :_begde =30;goto _aadg ;_fbeab :_begde =30;goto _feded ;_efaga :_begde =30;goto _gcga ;_baccc :_begde =30;goto _gdfcde ;_gdad :_begde =30;
goto _gfec ;_gfca :_begde =30;goto _dacg ;_bdfcbf :_begde =30;goto _gdffe ;_abdc :_begde =30;goto _afcgg ;_gedd :_begde =30;goto _defdd ;_becbc :_begde =30;goto _ddeb ;_edbad :_begde =30;goto _ceaa ;_ffgdg :_begde =30;goto _gbafe ;_bfaba :_begde =30;goto _fbfdc ;
_aaaaf :_begde =30;goto _cacgb ;_ffbf :_begde =30;goto _caac ;_fbdd :_begde =30;goto _dfdab ;_eebeg :_begde =30;goto _bbea ;_gcca :_begde =30;goto _fgcfc ;_ceba :_begde =30;goto _egggg ;_acaee :_begde =31;goto _bcfc ;_gage :_begde =32;goto _bfdd ;_agee :_begde =33;
goto _afab ;_baffe :_begde =34;goto _bfdd ;_gedag :_begde =35;goto _cfdga ;_gafc :_begde =36;goto _cfdga ;_dgfg :_begde =37;goto _cfdga ;_afcbd :_begde =38;goto _bfdd ;_gffad :_begde =39;goto _bfdd ;_acgd :_begde =40;goto _eece ;_cgddf :_begde =41;goto _bfdd ;
_cbaad :_begde =42;goto _eece ;_edafa :_begde =43;goto _afab ;_dcca :_begde =44;goto _eece ;_fadag :_begde =44;goto _adbad ;_bebff :_begde =44;goto _gccc ;_fdbfd :_begde =45;goto _eece ;_edeb :_begde =46;goto _eece ;_gdbf :_begde =47;goto _eece ;_cbfc :_begde =48;
goto _eece ;_cfcb :_begde =49;goto _eece ;_gbbc :_begde =50;goto _eece ;_edefea :_begde =51;goto _eece ;_gcdcc :_begde =52;goto _eece ;_gcacd :_begde =53;goto _eece ;_abed :_begde =54;goto _eece ;_bdfaf :_begde =55;goto _eece ;_cacad :_begde =56;goto _eece ;
_bcaf :_begde =57;goto _eece ;_eegag :_begde =58;goto _eece ;_fbed :_begde =59;goto _eece ;_cbcf :_begde =59;goto _geegg ;_ffacce :_cfdbc =3;goto _fcffb ;_dbcge :_cfdbc =5;goto _fcffb ;_ecdc :_cfdbc =7;goto _fcffb ;_dgbcb :_cfdbc =9;goto _fcffb ;_cgceg :_cfdbc =11;
goto _fcffb ;_egggg :_cfdbc =13;goto _fcffb ;_eaacb :_cfdbc =15;goto _fcffb ;_dacg :_cfdbc =17;goto _fcffb ;_gdffe :_cfdbc =19;goto _fcffb ;_ccfe :_cfdbc =21;goto _fcffb ;_feagg :_cfdbc =23;goto _fcffb ;_ddef :_cfdbc =25;goto _fcffb ;_gdefe :_cfdbc =27;
goto _fcffb ;_eecb :_cfdbc =29;goto _fcffb ;_aadg :_cfdbc =31;goto _fcffb ;_gfec :_cfdbc =33;goto _fcffb ;_gdfcde :_cfdbc =35;goto _fcffb ;_cacgb :_cfdbc =37;goto _fcffb ;_bbea :_cfdbc =39;goto _fcffb ;_caac :_cfdbc =41;goto _fcffb ;_feded :_cfdbc =43;
goto _fcffb ;_gcga :_cfdbc =45;goto _fcffb ;_cfae :_cfdbc =47;goto _fcffb ;_gbafe :_cfdbc =49;goto _fcffb ;_ddeb :_cfdbc =51;goto _fcffb ;_defdd :_cfdbc =53;goto _fcffb ;_ceaa :_cfdbc =55;goto _fcffb ;_fgcfc :_cfdbc =57;goto _fcffb ;_afcgg :_cfdbc =59;
goto _fcffb ;_fbfdc :_cfdbc =61;goto _fcffb ;_dfdab :_cfdbc =63;goto _fcffb ;_fcdgb :_cfdbc =65;goto _fcffb ;_bebec :_cfdbc =67;goto _fcffb ;_adbad :_cfdbc =72;goto _fcffb ;_cfdga :_cfdbc =75;goto _fcffb ;_afab :_cfdbc =78;goto _fcffb ;_gccc :_cfdbc =81;
goto _fcffb ;_geegg :_cfdbc =84;goto _fcffb ;_eece :_cfdbc =87;goto _fcffb ;_bcfc :_cfdbc =90;goto _fcffb ;_fcffb :_gefa =uint (_bcfg [_cfdbc ]);_cfdbc ++;for ;_gefa > 0;_gefa --{_cfdbc ++;switch _bcfg [_cfdbc -1]{case 3:_gcae =_eabb +1;case 4:_gcdb =1;
case 5:_gcdb =2;case 6:_gcdb =3;case 7:_gcdb =4;case 8:_gcdb =11;case 9:_gcdb =14;case 10:_gcdb =15;case 11:_gcae =_eabb +1;{_gggcg .emit (_fbdgb ,_gabef [_fegcd :_gcae ]);};case 12:_gcae =_eabb +1;{_gggcg .emit (_dfbf ,_gabef [_fegcd :_gcae ]);};case 13:_gcae =_eabb +1;
{_gggcg .emit (_ecebb ,_gabef [_fegcd :_gcae -1]);};case 14:_gcae =_eabb +1;{_gggcg .emit (_ecebb ,_gabef [_fegcd +1:_gcae -2]);};case 15:_gcae =_eabb +1;{_gggcg .emit (_agag ,_gabef [_fegcd :_gcae -1]);};case 16:_gcae =_eabb +1;{_gggcg .emit (_agag ,_gabef [_fegcd :_gcae -1]);
};case 17:_gcae =_eabb +1;{_gggcg .emit (_gdacb ,_gabef [_fegcd :_gcae ]);};case 18:_gcae =_eabb +1;{_gggcg .emit (_efgde ,_gabef [_fegcd :_gcae ]);};case 19:_gcae =_eabb +1;{_gggcg .emit (_aaecf ,_gabef [_fegcd :_gcae ]);};case 20:_gcae =_eabb +1;{_gggcg .emit (_fcbaf ,_gabef [_fegcd :_gcae ]);
};case 21:_gcae =_eabb +1;{_gggcg .emit (_addc ,_gabef [_fegcd :_gcae ]);};case 22:_gcae =_eabb +1;{_gggcg .emit (_efad ,_gabef [_fegcd :_gcae ]);};case 23:_gcae =_eabb +1;{_gggcg .emit (_cccee ,_gabef [_fegcd :_gcae ]);};case 24:_gcae =_eabb +1;{_gggcg .emit (_bdca ,_gabef [_fegcd :_gcae ]);
};case 25:_gcae =_eabb +1;{_gggcg .emit (_cbdg ,_gabef [_fegcd :_gcae ]);};case 26:_gcae =_eabb +1;{_gggcg .emit (_gcea ,_gabef [_fegcd :_gcae ]);};case 27:_gcae =_eabb +1;{_gggcg .emit (_agdb ,_gabef [_fegcd :_gcae ]);};case 28:_gcae =_eabb +1;{_gggcg .emit (_gdbba ,_gabef [_fegcd :_gcae ]);
};case 29:_gcae =_eabb +1;{_gggcg .emit (_dbda ,_gabef [_fegcd :_gcae ]);};case 30:_gcae =_eabb +1;{_gggcg .emit (_faad ,_gabef [_fegcd :_gcae ]);};case 31:_gcae =_eabb +1;{_gggcg .emit (_egged ,_gabef [_fegcd :_gcae ]);};case 32:_gcae =_eabb +1;{_gggcg .emit (_eebfc ,_gabef [_fegcd :_gcae ]);
};case 33:_gcae =_eabb +1;{_gggcg .emit (_dfa ,_gabef [_fegcd :_gcae ]);};case 34:_gcae =_eabb ;_eabb --;{_gggcg .emit (_ddaa ,_gabef [_fegcd :_gcae ]);};case 35:_gcae =_eabb ;_eabb --;{_gggcg .emit (_ccgdg ,_gabef [_fegcd :_gcae ]);};case 36:_gcae =_eabb ;
_eabb --;{_gggcg .emit (_accf ,_gabef [_fegcd :_gcae ]);};case 37:_gcae =_eabb ;_eabb --;{_gggcg .emit (_fecf ,_gabef [_fegcd :_gcae ]);};case 38:_gcae =_eabb ;_eabb --;{_gggcg .emit (_bddf ,_gabef [_fegcd :_gcae ]);};case 39:_gcae =_eabb ;_eabb --;{_gggcg .emit (_cecfa ,_gabef [_fegcd +1:_gcae -1]);
};case 40:_gcae =_eabb ;_eabb --;{_gggcg .emit (_edbc ,_gabef [_fegcd :_gcae ]);};case 41:_gcae =_eabb ;_eabb --;{_gggcg .emit (_abbf ,_gabef [_fegcd :_gcae ]);};case 42:_eabb =(_gcae )-1;{_gggcg .emit (_ddaa ,_gabef [_fegcd :_gcae ]);};case 43:switch _gcdb {case 0:{_begde =0;
goto _bfdd ;};case 1:{_eabb =(_gcae )-1;_gggcg .emit (_fbgcb ,_gabef [_fegcd :_gcae ]);};case 2:{_eabb =(_gcae )-1;_gggcg .emit (_ddaa ,_gabef [_fegcd :_gcae ]);};case 3:{_eabb =(_gcae )-1;_gggcg .emit (_ccgdg ,_gabef [_fegcd :_gcae ]);};case 4:{_eabb =(_gcae )-1;
_gggcg .emit (_gdfcd ,_gabef [_fegcd :_gcae ]);};case 11:{_eabb =(_gcae )-1;_gggcg .emit (_gcbfa ,_gabef [_fegcd :_gcae ]);};case 14:{_eabb =(_gcae )-1;_gggcg .emit (_bddf ,_gabef [_fegcd :_gcae ]);};case 15:{_eabb =(_gcae )-1;_gggcg .emit (_cecfa ,_gabef [_fegcd +1:_gcae -1]);
};};};};goto _bfdd ;_bfdd :_cfdbc =int (_fefce [_begde ]);_gefa =uint (_bcfg [_cfdbc ]);_cfdbc ++;for ;_gefa > 0;_gefa --{_cfdbc ++;switch _bcfg [_cfdbc -1]{case 0:_fegcd =0;case 1:_gcdb =0;};};if _begde ==0{goto _bbgagb ;};if _eabb ++;_eabb !=_gabec {goto _fagfa ;
};_afaag :{};if _eabb ==_acdbg {switch _begde {case 1:goto _adcbe ;case 2:goto _adcbe ;case 31:goto _abdc ;case 14:goto _adcbe ;case 15:goto _adcbe ;case 32:goto _gedd ;case 17:goto _adcbe ;case 33:goto _becbc ;case 18:goto _adcbe ;case 19:goto _adcbe ;
case 34:goto _edbad ;case 35:goto _ffgdg ;case 36:goto _ffgdg ;case 23:goto _eaeg ;case 37:goto _ffgdg ;case 38:goto _bfaba ;case 39:goto _fbdd ;case 40:goto _gcca ;case 41:goto _gcca ;case 42:goto _gcca ;case 43:goto _becbc ;case 44:goto _adcbe ;case 45:goto _gcca ;
case 46:goto _gcca ;case 47:goto _gcca ;case 48:goto _gcca ;case 49:goto _gcca ;case 50:goto _gcca ;case 51:goto _gcca ;case 52:goto _gcca ;case 53:goto _gcca ;case 54:goto _gcca ;case 55:goto _gcca ;case 56:goto _gcca ;case 57:goto _gcca ;case 58:goto _gcca ;
case 59:goto _adcbe ;};};_bbgagb :{};};if _fegcd > 0{copy (_gabef [0:],_gabef [_fegcd :]);};};_ =_acdbg ;if _begde ==_ffbeg {_gggcg .emit (_bgab ,nil );};close (_gggcg ._ceeg );};

// Db implements the Excel DB function.
func Db (args []Result )Result {_bfge :=len (args );if _bfge !=4&&_bfge !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dbgb :=args [0].ValueNumber ;if _dbgb < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bacd :=args [1].ValueNumber ;if _bacd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cbgb :=args [2].ValueNumber ;if _cbgb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ggac :=args [3].ValueNumber ;if _ggac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};if _ggac -_cbgb > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_begg :=12.0;if _bfge ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_begg =args [4].ValueNumber ;if _begg < 1||_begg > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");
};};if _begg ==12&&_ggac > _cbgb {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _bacd >=_dbgb {return MakeNumberResult (0);
};_dgde :=1-_cba .Pow (_bacd /_dbgb ,1/_cbgb );_dgde =float64 (int (_dgde *1000+0.5))/1000;_gda :=_dbgb *_dgde *_begg /12;if _ggac ==1{return MakeNumberResult (_gda );};_gdea :=_gda ;_cabb :=0.0;_bcgd :=_cbgb ;if _bcgd > _ggac {_bcgd =_ggac ;};for _cabg :=2.0;
_cabg <=_bcgd ;_cabg ++{_cabb =(_dbgb -_gdea )*_dgde ;_gdea +=_cabb ;};if _ggac > _cbgb {return MakeNumberResult ((_dbgb -_gdea )*_dgde *(12-_begg )/12);};return MakeNumberResult (_cabb );};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_bgcb PrefixRangeExpr )Update (q *_bc .UpdateQuery )Expression {_cdde :=_bgcb ;_aaade :=_bgcb ._aabde .String ();if _aaade ==q .SheetToUpdate {_aeeaf :=*q ;_aeeaf .UpdateCurrentSheet =true ;_cdde ._babcd =_bgcb ._babcd .Update (&_aeeaf );_cdde ._caeca =_bgcb ._caeca .Update (&_aeeaf );
};return _cdde ;};func _ae (_ab BinOpType ,_ee ,_cdc []Result )Result {_abc :=[]Result {};for _dea :=range _ee {_aa :=_ee [_dea ].AsNumber ();_ecf :=_cdc [_dea ].AsNumber ();if _aa .Type !=ResultTypeNumber ||_ecf .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _ab {case BinOpTypePlus :_abc =append (_abc ,MakeNumberResult (_aa .ValueNumber +_ecf .ValueNumber ));case BinOpTypeMinus :_abc =append (_abc ,MakeNumberResult (_aa .ValueNumber -_ecf .ValueNumber ));case BinOpTypeMult :_abc =append (_abc ,MakeNumberResult (_aa .ValueNumber *_ecf .ValueNumber ));
case BinOpTypeDiv :if _ecf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_abc =append (_abc ,MakeNumberResult (_aa .ValueNumber /_ecf .ValueNumber ));case BinOpTypeExp :_abc =append (_abc ,MakeNumberResult (_cba .Pow (_aa .ValueNumber ,_ecf .ValueNumber )));
case BinOpTypeLT :_abc =append (_abc ,MakeBoolResult (_aa .ValueNumber < _ecf .ValueNumber ));case BinOpTypeGT :_abc =append (_abc ,MakeBoolResult (_aa .ValueNumber > _ecf .ValueNumber ));case BinOpTypeEQ :_abc =append (_abc ,MakeBoolResult (_aa .ValueNumber ==_ecf .ValueNumber ));
case BinOpTypeLEQ :_abc =append (_abc ,MakeBoolResult (_aa .ValueNumber <=_ecf .ValueNumber ));case BinOpTypeGEQ :_abc =append (_abc ,MakeBoolResult (_aa .ValueNumber >=_ecf .ValueNumber ));case BinOpTypeNE :_abc =append (_abc ,MakeBoolResult (_aa .ValueNumber !=_ecf .ValueNumber ));
default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ab ));};};return MakeListResult (_abc );};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_bagg :=len (args );if _bagg < 3||_bagg > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cggd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bacc :=args [1].ValueNumber ;if _bacc ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_bfcb :=args [2].ValueNumber ;_cdfg :=0.0;if _bagg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cdfg =args [3].ValueNumber ;};_eec :=0.0;if _bagg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eec =args [4].ValueNumber ;if _eec !=0{_eec =1;};};var _fcaab float64 ;if _cggd ==0{_fcaab =(_bfcb +_cdfg )/_bacc ;}else {_bddbc :=_cba .Pow (1+_cggd ,_bacc );if _eec ==1{_fcaab =(_cdfg *_cggd /(_bddbc -1)+_bfcb *_cggd /(1-1/_bddbc ))/(1+_cggd );}else {_fcaab =_cdfg *_cggd /(_bddbc -1)+_bfcb *_cggd /(1-1/_bddbc );
};};return MakeNumberResult (-_fcaab );};

// ResultType is the type of the result
//
//go:generate stringer -type=ResultType
type ResultType byte ;func _fcaa (_afd ,_degd ,_fbad ,_dfed float64 ,_gaef int )float64 {var _fbbb float64 ;if _afd ==0{_fbbb =_dfed +_fbad *_degd ;}else {_cebe :=_cba .Pow (1+_afd ,_degd );if _gaef ==1{_fbbb =_dfed *_cebe +_fbad *(1+_afd )*(_cebe -1)/_afd ;
}else {_fbbb =_dfed *_cebe +_fbad *(_cebe -1)/_afd ;};};return -_fbbb ;};

// String is a string expression.
type String struct{_aeaa string };

// Eval evaluates a horizontal range returning a list of results or an error.
func (_dafd HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_acbac :=_dafd .horizontalRangeReference ();if _gfbd ,_dafdf :=ev .GetFromCache (_acbac );_dafdf {return _gfbd ;};_gbgb ,_agagc :=_fadf (ctx ,_dafd ._cfdc ,_dafd ._geece );_cgbe :=_fgfd (ctx ,ev ,_gbgb ,_agagc );
ev .SetCache (_acbac ,_cgbe );return _cgbe ;};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];
case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));
default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};func _ecg (){_edf ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_de .MustCompile ("\u005e"+_dbae +_cdef );
_edf ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_de .MustCompile ("\u005e"+_cdg +_cdef );_edf ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_de .MustCompile ("\u005e"+_baac +_cdef );_edf ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_de .MustCompile ("\u005e"+_egg +_cdef );
_dga ["\u0068\u0068"]=_de .MustCompile (_ddcg +_daa +"\u0024");_dga ["\u0068\u0068\u003am\u006d"]=_de .MustCompile (_ddcg +_edb +"\u0024");_dga ["\u006d\u006d\u003as\u0073"]=_de .MustCompile (_ddcg +_deg +"\u0024");_dga ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_de .MustCompile (_ddcg +_dbad +"\u0024");
_ega =[]*_de .Regexp {_de .MustCompile ("\u005e"+_dbae +"\u0024"),_de .MustCompile ("\u005e"+_cdg +"\u0024"),_de .MustCompile ("\u005e"+_baac +"\u0024"),_de .MustCompile ("\u005e"+_egg +"\u0024")};_cde =[]*_de .Regexp {_de .MustCompile ("\u005e"+_daa +"\u0024"),_de .MustCompile ("\u005e"+_edb +"\u0024"),_de .MustCompile ("\u005e"+_deg +"\u0024"),_de .MustCompile ("\u005e"+_dbad +"\u0024")};
};func _abga (_egfaff [][]Result ,_gded int )[][]Result {_egeg :=[][]Result {};for _eceee :=range _egfaff {if _eceee ==0{continue ;};_feff :=[]Result {};for _abdg :=range _egfaff {if _abdg ==_gded {continue ;};_feff =append (_feff ,_egfaff [_eceee ][_abdg ]);
};_egeg =append (_egeg ,_feff );};return _egeg ;};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_efcfc .Lock ();defer _efcfc .Unlock ();if _ ,_dgeee :=_agbb [name ];_dgeee {_gf .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_agbb [name ]=fn ;};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_ccde :=args [0].ValueNumber ;_acf :=args [1].ValueNumber ;if _acf < _ccde {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");
};if _acf ==_ccde {return MakeNumberResult (0);};_edd :=_cb .ToLower (args [2].ValueString );if _edd =="\u0064"{return MakeNumberResult (_acf -_ccde );};_dbbe :=_gac (_ccde );_gfaa :=_gac (_acf );_cfe ,_fbb ,_gggb :=_dbbe .Date ();_gfb ,_bee ,_cbaa :=_gfaa .Date ();
_aaee :=int (_fbb );_fbeb :=int (_bee );var _fdbe float64 ;switch _edd {case "\u0079":_fdbe =float64 (_gfb -_cfe );if _fbeb < _aaee ||(_fbeb ==_aaee &&_cbaa < _gggb ){_fdbe --;};case "\u006d":_dcae :=_gfb -_cfe ;_aba :=_fbeb -_aaee ;if _cbaa < _gggb {_aba --;
};if _aba < 0{_dcae --;_aba +=12;};_fdbe =float64 (_dcae *12+_aba );case "\u006d\u0064":_gef :=_fbeb ;if _cbaa < _gggb {_gef --;};_fdbe =float64 (int (_acf -_ddgc (_gfb ,_gef ,_gggb )));case "\u0079\u006d":_fdbe =float64 (_fbeb -_aaee );if _cbaa < _gggb {_fdbe --;
};if _fdbe < 0{_fdbe +=12;};case "\u0079\u0064":_cgab :=_gfb ;if _fbeb < _aaee ||(_fbeb ==_aaee &&_cbaa < _gggb ){_cgab --;};_fdbe =float64 (int (_acf -_ddgc (_cgab ,_aaee ,_gggb )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");
};return MakeNumberResult (_fdbe );};type tokenType int ;func LexReader (r _f .Reader )chan *node {_eccde :=NewLexer ();go _eccde .lex (r );return _eccde ._ceeg };

// IsBool returns false for the invalid reference context.
func (_fagef *ivr )IsBool (cellRef string )bool {return false };func _ebga (_bcbf int )bool {return _bcbf >=0&&_bcbf <=4};const _fcdd int =30;

// Update updates references in the Range after removing a row/column.
func (_fafbg Range )Update (q *_bc .UpdateQuery )Expression {_defafe :=_fafbg ;if q .UpdateCurrentSheet {_defafe ._dfbb =_fafbg ._dfbb .Update (q );_defafe ._gedbb =_fafbg ._gedbb .Update (q );};return _defafe ;};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_edfec :=args [0].AsNumber ();if _edfec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _edfec .ValueNumber < 0{return MakeNumberResult (-1);}else if _edfec .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};func (_afac *Lexer )nextRaw ()*node {for len (_afac ._feab )!=0{_feag :=<-_afac ._feab [len (_afac ._feab )-1];
if _feag !=nil {return _feag ;};_afac ._feab =_afac ._feab [0:len (_afac ._feab )-1];};return <-_afac ._ceeg ;};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");
};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_gbgf ,_afca :=_cadd (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _afca .Type ==ResultTypeError {return _afca ;};_bgeb :=_gbgf ._efcb ;_dcgc :=_gbgf ._ffec ;_beda :=_gbgf ._bdc ;_abcf :=_gbgf ._eged ;
_bdff :=_gbgf ._gaee ;_agcb :=_gbgf ._bdfg ;_aafd :=_ffg (_bgeb ,_dcgc ,_beda ,_abcf ,_bdff ,_agcb );if _aafd .Type ==ResultTypeError {return _aafd ;};_gfae :=_aafd .ValueNumber /(1.0+_abcf /_bdff );return MakeNumberResult (_gfae );};const _daa ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";
const _cccee =57365;const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_cfdc ,_geece int };func _afb (_fca ,_dgf ,_fed ,_dadfa int )int {if _dgf > _fed {return 0;};if _edbf (_dadfa ){return (_fed -_dgf +1)*30;};_defb :=0;for _ege :=_dgf ;_ege <=_fed ;_ege ++{_defb +=_ddgb (_fca ,_ege );};return _defb ;
};

// Eval evaluates and returns the result of a Negate expression.
func (_ebdg Negate )Eval (ctx Context ,ev Evaluator )Result {_gddb :=_ebdg ._baaf .Eval (ctx ,ev );if _gddb .Type ==ResultTypeNumber {return MakeNumberResult (-_gddb .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bbad :=args [0].AsNumber ();if _bbad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cged :=float64 (0);if len (args )> 1{_gacf :=args [1].AsNumber ();if _gacf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cged =_gacf .ValueNumber ;};_cffb :=_bbad .ValueNumber ;_bagda :=1.0;if _cged >=0{_bagda =_cba .Pow (1/10.0,_cged );}else {return MakeNumberResult (0);};_cffb ,_efec :=_cba .Modf (_cffb /_bagda );_ffaca :=0.99999;if _efec > _ffaca {_cffb ++;}else if _efec < -_ffaca {_cffb --;
};_ =_efec ;return MakeNumberResult (_cffb *_bagda );};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_bfgea :=len (args );if _bfgea !=4&&_bfgea !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eeea ,_gad ,_ggceb :=_geec (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _ggceb .Type ==ResultTypeError {return _ggceb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dcfa :=args [2].ValueNumber ;if _dcfa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_ggbd :=args [3].ValueNumber ;if _ggbd <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_gagf :=0;if _bfgea ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gagf =int (args [4].ValueNumber );if !_ebga (_gagf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");
};};_dgdf ,_ggceb :=_dgae (_eeea ,_gad ,_gagf );if _ggceb .Type ==ResultTypeError {return _ggceb ;};return MakeNumberResult ((_ggbd /_dcfa -1)/_dgdf );};func _agefg (_gcedg Reference ,_ggdd Context )bool {return _ggdd .Sheet (_gcedg .Value )==InvalidReferenceContext ;
};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_egga :=len (args );if _egga < 3||_egga > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cada :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_ffdc :=args [1].ValueNumber ;if _ffdc !=float64 (int (_ffdc )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fcca :=args [2].ValueNumber ;_fece :=0.0;if _egga >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fece =args [3].ValueNumber ;};_abcfe :=0.0;if _egga ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_abcfe =args [4].ValueNumber ;if _abcfe !=0{_abcfe =1;};};if _cada ==0{return MakeNumberResult (-_fcca *_ffdc -_fece );}else {return MakeNumberResult ((((1-_cba .Pow (1+_cada ,_ffdc ))/_cada )*_fcca *(1+_cada *_abcfe )-_fece )/_cba .Pow (1+_cada ,_ffdc ));
};};

// Update updates references in the VerticalRange after removing a row/column.
func (_dffff VerticalRange )Update (q *_bc .UpdateQuery )Expression {if q .UpdateType ==_bc .UpdateActionRemoveColumn {_dccga :=_dffff ;if q .UpdateCurrentSheet {_cgefe :=q .ColumnIdx ;_dccga ._effg =_cgb (_dffff ._effg ,_cgefe );_dccga ._caggb =_cgb (_dffff ._caggb ,_cgefe );
};return _dccga ;};return _dffff ;};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _ccbb (args ,true )};func _cedbc (_aabda yyLexer )int {return _dcfdc ().Parse (_aabda )};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_fcbb Expression ;_afbb ,_cdfba int ;};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_ggaa ,_afdg :=_cf .ParseFloat (v ,64);if _afdg !=nil {_gf .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_afdg );
};return Number {_fcdae :_ggaa };};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_aafg :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_aafg *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_edda :=_fedf (args [1]);for _ ,_ccded :=range _edda {for _ ,_dfeb :=range _ccded {if _dfeb .Type !=ResultTypeNumber ||_dfeb .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");
};_aafg *=1.0+_dfeb .ValueNumber ;};};return MakeNumberResult (_aafg );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");
};};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_badg :=args [0].ValueNumber ;if _badg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};_gbb :=float64 (int (args [1].ValueNumber ));if _gbb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult ((_cba .Pow (_badg +1,1/_gbb )-1)*_gbb );};const _egg ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_cfgd +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _f .Reader )Expression {_cead :=&plex {_fcgf :LexReader (r )};_cedbc (_cead );if _cead ._dgec !=""{return nil ;};return _cead ._gdecf ;};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_gcbf :=args [0];if _gcbf .Type !=ResultTypeNumber &&_gcbf .Type !=ResultTypeString &&_gcbf .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");
};_cceg :=args [1].ValueString ;switch _gcbf .Type {case ResultTypeNumber :return MakeStringResult (_ded .Number (_gcbf .ValueNumber ,_cceg ));case ResultTypeString :return MakeStringResult (_ded .String (_gcbf .ValueString ,_cceg ));case ResultTypeEmpty :return MakeStringResult (_ded .Number (0,_cceg ));
case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");
};};

// String returns a string representation for Negate.
func (_begc Negate )String ()string {return "\u002d"+_begc ._baaf .String ()};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fcce :=args [0].AsNumber ();_bafc :=args [1].AsNumber ();if _fcce .Type !=ResultTypeNumber ||_bafc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_adbb :=_cba .Trunc (_fcce .ValueNumber );_deda :=_cba .Trunc (_bafc .ValueNumber );if _adbb < _deda {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");
};if _adbb ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_adbb +_deda -1);args [1]=MakeNumberResult (_adbb -1);return Combin (args );};func _ggae (){_dddd =_de .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");
_ecbd =_de .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_gfbe =_de .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_dcbe =_de .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_edefa =_de .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");
_egaa =_de .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};const (_cddg countMode =iota ;_fceb ;_deaa ;);

// Reference returns a string reference value to a range.
func (_eabg Range )Reference (ctx Context ,ev Evaluator )Reference {_gfcfa :=_eabg ._dfbb .Reference (ctx ,ev );_dfebc :=_eabg ._gedbb .Reference (ctx ,ev );if _gfcfa .Type ==ReferenceTypeCell &&_dfebc .Type ==ReferenceTypeCell {return MakeRangeReference (_afaf (_gfcfa ,_dfebc ));
};return ReferenceInvalid ;};

// Update updates the FunctionCall references after removing a row/column.
func (_eggfa FunctionCall )Update (q *_bc .UpdateQuery )Expression {_eabc :=[]Expression {};for _ ,_fbecd :=range _eggfa ._efab {_acdee :=_fbecd .Update (q );_eabc =append (_eabc ,_acdee );};return FunctionCall {_acbea :_eggfa ._acbea ,_efab :_eabc };};
func _ecb (_cca string )bool {for _ ,_bafb :=range _cde {_fbfd :=_bafb .FindStringSubmatch (_cca );if len (_fbfd )> 1{return true ;};};return false ;};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gadc :=args [0].AsNumber ();if _gadc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_febda :=0;if len (args )> 1{_fadc :=args [1];if _fadc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_febda =int (_fadc .ValueNumber );if _febda < 0{_febda =0;}else if _febda > 4{_febda =4;};};_gdgef :=_afaa ;switch _febda {case 1:_gdgef =_fbag ;case 2:_gdgef =_edge ;case 3:_gdgef =_gddec ;case 4:_gdgef =_cgcee ;};_acfg :=_cba .Trunc (_gadc .ValueNumber );
_fddf :=_fg .Buffer {};for _ ,_cfaa :=range _gdgef {for _acfg >=_cfaa ._bbca {_fddf .WriteString (_cfaa ._ddfg );_acfg -=_cfaa ._bbca ;};};return MakeStringResult (_fddf .String ());};var InvalidReferenceContext =&ivr {};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_cbabba NamedRangeRef )Update (q *_bc .UpdateQuery )Expression {return _cbabba };

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_gbbgg Result )ListValues ()[]Result {if _gbbgg .Type ==ResultTypeArray {_ddbg :=[]Result {};for _ ,_dfgad :=range _gbbgg .ValueArray {for _ ,_acfed :=range _dfgad {_ddbg =append (_ddbg ,_acfed );};};return _ddbg ;};if _gbbgg .Type ==ResultTypeList {return _gbbgg .ValueList ;
};return nil ;};

// Reference returns an invalid reference for Error.
func (_bce Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _ffg (_ffad ,_cbgd ,_deab ,_dggg ,_gcf float64 ,_gfcg int )Result {_dbdb ,_abgd :=_dgae (_ffad ,_cbgd ,_gfcg );if _abgd .Type ==ResultTypeError {return _abgd ;
};_aagb ,_gbf :=_fgf (_ffad ,_cbgd ,int (_gcf ),_gfcg );if _gbf .Type ==ResultTypeError {return _gbf ;};_aced :=0.0;_baee :=0.0;_deab *=100/_gcf ;_dggg /=_gcf ;_dggg ++;_abfb :=_dbdb *_gcf -_aagb ;for _eaf :=1.0;_eaf < _aagb ;_eaf ++{_dgd :=_eaf +_abfb ;
_bcgf :=_deab /_cba .Pow (_dggg ,_dgd );_baee +=_bcgf ;_aced +=_dgd *_bcgf ;};_ccf :=(_deab +100)/_cba .Pow (_dggg ,_aagb +_abfb );_baee +=_ccf ;_aced +=(_aagb +_abfb )*_ccf ;_aced /=_baee ;_aced /=_gcf ;return MakeNumberResult (_aced );};var _cedcg =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};
var _eacd =false ;

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_fef *defEval )LastEvalIsRef ()bool {return _fef ._cdf };

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bec :=args [0].ValueNumber ;if _bec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dega :=args [1].ValueNumber ;if _dega <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acdc :=args [2].ValueNumber ;if _acdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");
};return MakeNumberResult ((_cba .Log10 (_acdc )-_cba .Log10 (_dega ))/_cba .Log10 (1+_bec ));};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};var _bfac int64 =_babc (1900,_cc .January ,1);func (_cedg Result )String ()string {return _cedg .Value ()};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_cb .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_aeaa :v };};

// HasFormula returns FALSE for the invalid reference context.
func (_acgb *ivr )HasFormula (cellRef string )bool {return false };

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_ebdda :=MakeNumberResult (0);for _ ,_gedbd :=range args {_gedbd =_gedbd .AsNumber ();switch _gedbd .Type {case ResultTypeNumber :_ebdda .ValueNumber +=_gedbd .ValueNumber *_gedbd .ValueNumber ;case ResultTypeList ,ResultTypeArray :_bedg :=SumSquares (_gedbd .ListValues ());
if _bedg .Type !=ResultTypeNumber {return _bedg ;};_ebdda .ValueNumber +=_bedg .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gedbd ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_gedbd .Type ));
};};return _ebdda ;};

// CellRef is a reference to a single cell
type CellRef struct{_fe string };

// Update updates references in the PrefixExpr after removing a row/column.
func (_ggcg PrefixExpr )Update (q *_bc .UpdateQuery )Expression {_bfbe :=_ggcg ;_gbdb :=_ggcg ._gbde .String ();if _gbdb ==q .SheetToUpdate {_fdefd :=*q ;_fdefd .UpdateCurrentSheet =true ;_bfbe ._becd =_ggcg ._becd .Update (&_fdefd );};return _bfbe ;};


// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_cba .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};func _acbg (_decef Result ,_dfbe *criteriaParsed )bool {if _decef .IsBoolean {return false ;};_gbef :=_decef .Type ;
if _dfbe ._fdcdb {return _gbef ==ResultTypeNumber &&_decef .ValueNumber ==_dfbe ._dddfa ;}else if _gbef ==ResultTypeNumber {return _dcbfa (_decef .ValueNumber ,_dfbe ._dgeac );};return _dgdfd (_decef ,_dfbe );};func _cd (_a ,_dfb [][]Result )bool {if len (_a )!=len (_dfb ){return false ;
};for _gfc :=range _a {if len (_a [_gfc ])!=len (_dfb [_gfc ]){return false ;};};return true ;};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_bcec ,_eeffc :=_fbdf (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _eeffc .Type ==ResultTypeError {return _eeffc ;};_baef :=_bcec ._aceb ;_ebdd :=_bcec ._fbcf ;_dedf :=_bcec ._dcef ;_caecc :=_bcec ._bbbe ;
_abgg :=_bcec ._fede ;_afee :=_bcec ._cgace ;if _afee >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");
};_befc :=_bcec ._gedc ;_eaff :=1.0/_afee ;_edbfd :=2.5;if _eaff < 3{_edbfd =1;}else if _eaff < 5{_edbfd =1.5;}else if _eaff <=6{_edbfd =2;};_afee *=_edbfd ;_gege ,_aecab :=_dgae (_ebdd ,_dedf ,_befc );if _aecab .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");
};_gcfd :=_eafe (_gege *_afee *_baef );_baef -=_gcfd ;_ebf :=_baef -_caecc ;for _cbdbg :=0;_cbdbg < _abgg ;_cbdbg ++{_gcfd =_eafe (_afee *_baef );_ebf -=_gcfd ;if _ebf < 0{switch _abgg -_cbdbg {case 0:case 1:return MakeNumberResult (_eafe (_baef *0.5));
default:return MakeNumberResult (0);};};_baef -=_gcfd ;};return MakeNumberResult (_gcfd );};func _gdege (_bccgg Context ,_cfbg ,_efedd string )(string ,string ){_gbaad :=_cfbg +"\u0031";_fcffc :=_bccgg .LastRow (_cfbg );_agefa :=_efedd +_cf .Itoa (_fcffc );
return _gbaad ,_agefa ;};func _bdbf (_fbbf ,_cege ,_befe ,_bcbd float64 ,_adfa int )float64 {var _bccf float64 ;if _fbbf ==0{_bccf =(_befe +_bcbd )/_cege ;}else {_gedf :=_cba .Pow (1+_fbbf ,_cege );if _adfa ==1{_bccf =(_bcbd *_fbbf /(_gedf -1)+_befe *_fbbf /(1-1/_gedf ))/(1+_fbbf );
}else {_bccf =_bcbd *_fbbf /(_gedf -1)+_befe *_fbbf /(1-1/_gedf );};};return -_bccf ;};

// Reference returns an invalid reference for FunctionCall.
func (_deege FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_ffd ,_aab :=_cefea (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _aab .Type ==ResultTypeError {return _aab ;};_dbdc :=_ffd ._ddgca ;_ffee :=_ffd ._gfga ;_beed :=_ffd ._afgd ;_geae :=_ffd ._fbaa ;_dgea :=_ffd ._gfgaf ;
_caa :=_ffd ._egcae ;_fgea :=_bdbf (_dbdc ,_ffee ,_beed ,0,_caa );_cbee :=0.0;if _geae ==1{if _caa ==0{_cbee =-_beed ;_geae ++;};};for _eeafd :=_geae ;_eeafd <=_dgea ;_eeafd ++{if _caa ==1{_cbee +=_fcaa (_dbdc ,_eeafd -2,_fgea ,_beed ,1)-_fgea ;}else {_cbee +=_fcaa (_dbdc ,_eeafd -1,_fgea ,_beed ,0);
};};_cbee *=_dbdc ;return MakeNumberResult (_cbee );};

// Update returns the same object as updating sheet references does not affect String.
func (_dcbc String )Update (q *_bc .UpdateQuery )Expression {return _dcbc };

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_fdb ,_agf :=_cf .ParseBool (v );if _agf !=nil {_gf .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_agf );
};return Bool {_ge :_fdb };};const _cecfa =57354;func (_ccff *noCache )SetCache (key string ,value Result ){};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eface :=ctx .GetEpoch ();_abf ,_egb :=_bagc (args [0].Value (),_eface );if _egb !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (float64 (_abf .Year ()));};func (_ddg *evCache )GetFromCache (key string )(Result ,bool ){_ddg ._ddf .Lock ();_baae ,_bfd :=_ddg ._eea [key ];_ddg ._ddf .Unlock ();return _baae ,_bfd ;};type yyLexer interface{Lex (_ccegb *yySymType )int ;
Error (_aaad string );};func _eafa (_acdb ,_acfaa ,_gbdg ,_agbda ,_acgg ,_dfdb float64 )float64 {var _adeda ,_feac float64 ;_eaba :=0.0;_ebeb :=_cba .Ceil (_acgg );_dddb :=_acdb -_acfaa ;_affc :=false ;_fffb :=0.0;for _affa :=1.0;_affa <=_ebeb ;_affa ++{if !_affc {_adeda =_fgbd (_acdb ,_acfaa ,_gbdg ,_affa ,_dfdb );
_fffb =_dddb /(_gbdg -_affa +1);if _fffb > _adeda {_feac =_fffb ;_affc =true ;}else {_feac =_adeda ;_dddb -=_adeda ;};}else {_feac =_fffb ;};if _affa ==_ebeb {_feac *=_acgg +1-_ebeb ;};_eaba +=_feac ;};return _eaba ;};func _db (_da BinOpType ,_ec ,_gd [][]Result )Result {_cfc :=[][]Result {};
for _fa :=range _ec {_ef :=_ae (_da ,_ec [_fa ],_gd [_fa ]);if _ef .Type ==ResultTypeError {return _ef ;};_cfc =append (_cfc ,_ef .ValueList );};return MakeArrayResult (_cfc );};func _egdd (_edga ,_adbd Result ,_cfgf ,_cbfge bool )cmpResult {_edga =_edga .AsNumber ();
_adbd =_adbd .AsNumber ();if _edga .Type !=_adbd .Type {return _cgbc ;};if _edga .Type ==ResultTypeNumber {if _edga .ValueNumber ==_adbd .ValueNumber {return _cgcg ;};if _edga .ValueNumber < _adbd .ValueNumber {return _afed ;};return _dgdee ;};if _edga .Type ==ResultTypeString {_dbec :=_edga .ValueString ;
_eceb :=_adbd .ValueString ;if !_cfgf {_dbec =_cb .ToLower (_dbec );_eceb =_cb .ToLower (_eceb );};if _cbfge {_fbfbd :=_ce .Match (_eceb ,_dbec );if _fbfbd {return _cgcg ;}else {return _dgdee ;};};return cmpResult (_cb .Compare (_dbec ,_eceb ));};if _edga .Type ==ResultTypeEmpty {return _cgcg ;
};if _edga .Type ==ResultTypeList {if len (_edga .ValueList )< len (_adbd .ValueList ){return _afed ;};if len (_edga .ValueList )> len (_adbd .ValueList ){return _dgdee ;};for _bdcb :=range _edga .ValueList {_dddg :=_egdd (_edga .ValueList [_bdcb ],_adbd .ValueList [_bdcb ],_cfgf ,_cbfge );
if _dddg !=_cgcg {return _dddg ;};};return _cgcg ;};if _edga .Type ==ResultTypeList {if len (_edga .ValueArray )< len (_adbd .ValueArray ){return _afed ;};if len (_edga .ValueArray )> len (_adbd .ValueArray ){return _dgdee ;};for _afgda :=range _edga .ValueArray {_cdcf :=_edga .ValueArray [_afgda ];
_eabf :=_edga .ValueArray [_afgda ];if len (_cdcf )< len (_eabf ){return _afed ;};if len (_cdcf )> len (_eabf ){return _dgdee ;};for _bccc :=range _cdcf {_bcbc :=_egdd (_cdcf [_bccc ],_eabf [_bccc ],_cfgf ,_cbfge );if _bcbc !=_cgcg {return _bcbc ;};};};
return _cgcg ;};return _cgbc ;};func _fgfd (_ddac Context ,_gacaa Evaluator ,_eeecf ,_gfdbg string )Result {_adffe ,_dfba :=_dc .ParseCellReference (_eeecf );if _dfba !=nil {return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_eeecf ,_dfba .Error ()));
};_affac ,_baaaf :=_adffe .ColumnIdx ,_adffe .RowIdx ;_cdab ,_bgbdf :=_dc .ParseCellReference (_gfdbg );if _bgbdf !=nil {return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gfdbg ,_bgbdf .Error ()));
};_ecgd ,_eadf :=_cdab .ColumnIdx ,_cdab .RowIdx ;_bafca :=[][]Result {};for _bfce :=_baaaf ;_bfce <=_eadf ;_bfce ++{_agdg :=[]Result {};for _gada :=_affac ;_gada <=_ecgd ;_gada ++{_ecca :=_ddac .Cell (_g .Sprintf ("\u0025\u0073\u0025\u0064",_dc .IndexToColumn (_gada ),_bfce ),_gacaa );
_agdg =append (_agdg ,_ecca );};_bafca =append (_bafca ,_agdg );};if len (_bafca )==1{if len (_bafca [0])==1{return _bafca [0][0];};return MakeListResult (_bafca [0]);};return MakeArrayResult (_bafca );};func (_ffac *defEval )checkLastEvalIsRef (_acd Context ,_agb Expression ){switch _agb .(type ){case FunctionCall :switch _agb .(FunctionCall )._acbea {case "\u0049\u0053\u0052E\u0046":for _ ,_ebb :=range _agb .(FunctionCall )._efab {switch _ebb .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_gbg :=_ebb .Eval (_acd ,_ffac );
_ffac ._cdf =!(_gbg .Type ==ResultTypeError &&_gbg .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_ffac ._cdf =false ;};};};};};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};func (_fdda HorizontalRange )horizontalRangeReference ()string {return _g .Sprintf ("\u0025\u0064\u003a%\u0064",_fdda ._cfdc ,_fdda ._geece );};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_bfe :=len (args );if (_bfe !=2&&_bfe !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dgc :=0;if _bfe ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dgc =int (args [2].ValueNumber );if !_ebga (_dgc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");
};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fefg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_badc :=args [1].ValueNumber ;_bdbdb ,_ggcd :=_dgae (_fefg ,_badc ,_dgc );if _ggcd .Type ==ResultTypeError {return _ggcd ;};return MakeNumberResult (_bdbdb );};func _ebda (_eae ,_bgbc int )int {switch _bgbc {case 1:if _gecf (_eae ){return 366;}else {return 365;
};case 3:return 365;default:return 360;};};const _fbgcb =57352;

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_dccff :=1.0;for _ ,_ffea :=range args {_ffea =_ffea .AsNumber ();switch _ffea .Type {case ResultTypeNumber :_dccff *=_ffea .ValueNumber ;case ResultTypeList ,ResultTypeArray :_eggf :=Product (_ffea .ListValues ());
if _eggf .Type !=ResultTypeNumber {return _eggf ;};_dccff *=_eggf .ValueNumber ;case ResultTypeString :case ResultTypeError :return _ffea ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_ffea .Type ));
};};return MakeNumberResult (_dccff );};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_deeed :=args [0];if _deeed .Type !=ResultTypeArray &&_deeed .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_cbdd :=_fedf (_deeed );_bgda :=args [2];if _bgda .Type !=ResultTypeArray &&_bgda .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_dgee :=_fedf (_bgda );_bggef :=_acage (args [1]);_cedc :=0.0;for _dgfc ,_afgdf :=range _cbdd {for _eccd ,_gedad :=range _afgdf {if _acbg (_gedad ,_bggef ){_cedc +=_dgee [_dgfc ][_eccd ].ValueNumber ;};};};return MakeNumberResult (_cedc );};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_afff :=args [0].AsNumber ();_fdab :=args [1].AsNumber ();if _afff .Type !=ResultTypeNumber ||_fdab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};if _fdab .ValueNumber < _afff .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");
};_bdcd :=int64 (_afff .ValueNumber );_afcag :=int64 (_fdab .ValueNumber );return MakeNumberResult (float64 (_cdgc .Int63n (_afcag -_bdcd +1)+_bdcd ));};const _dbda =57373;

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_acg ,_abag :=_bgdc (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _abag .Type ==ResultTypeError {return _abag ;};return MakeNumberResult (_aedf (_acg ._fcc ,_acg ._abae ,_acg ._ecec ,_acg ._egd ));};


// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fbaf :=args [0];_fdff :=args [1];if _fdff .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_eddab :=args [2].AsNumber ();if _eddab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_egac :=false ;if len (args )==4{_gfbf :=args [3].AsNumber ();if _gfbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _gfbf .ValueNumber ==0{_egac =true ;};};_caefc :=-1;_eff :=false ;if len (_fdff .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");
};_abacg :=_fdff .ValueArray [0];_dbfc :for _cgec ,_aafgb :=range _abacg {switch _egdd (_aafgb ,_fbaf ,false ,_egac ){case _afed :_caefc =_cgec ;case _cgcg :_caefc =_cgec ;_eff =true ;break _dbfc ;};};if _caefc ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_eeafc :=int (_eddab .ValueNumber )-1;if _eeafc < 0||_eeafc > len (_fdff .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_abacg =_fdff .ValueArray [_eeafc ];
if _caefc < 0||_caefc >=len (_abacg ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _eff ||!_egac {return _abacg [_caefc ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};func _ccbb (_gfdfa []Result ,_bafea bool )Result {var _ffgeb string ;if _bafea {_ffgeb ="\u004c\u0041\u0052G\u0045";
}else {_ffgeb ="\u0053\u004d\u0041L\u004c";};if len (_gfdfa )!=2{return MakeErrorResult (_ffgeb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cdec :=_gfdfa [0];var _eddabe [][]Result ;
switch _cdec .Type {case ResultTypeArray :_eddabe =_cdec .ValueArray ;case ResultTypeList :_eddabe =[][]Result {_cdec .ValueList };default:return MakeErrorResult (_ffgeb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");
};if len (_eddabe )==0{return MakeErrorResult (_ffgeb +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};if _gfdfa [1].Type !=ResultTypeNumber {return MakeErrorResult (_ffgeb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_fcfb :=_gfdfa [1].ValueNumber ;if _fcfb < 1{return MakeErrorResultType (ErrorTypeNum ,_ffgeb +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_ddcb :=int (_fcfb );if float64 (_ddcb )!=_fcfb {return MakeErrorResultType (ErrorTypeNum ,_ffgeb +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_bgdce :=[]float64 {};for _ ,_afcac :=range _eddabe {for _ ,_ffdf :=range _afcac {if _ffdf .Type ==ResultTypeNumber {_bgdce =append (_bgdce ,_ffdf .ValueNumber );};};};if _ddcb > len (_bgdce ){return MakeErrorResultType (ErrorTypeNum ,_ffgeb +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_fgce :=_fd .MergeSort (_bgdce );if _bafea {return MakeNumberResult (_fgce [len (_fgce )-_ddcb ]);}else {return MakeNumberResult (_fgce [_ddcb -1]);};};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_fgagg :=len (args );if _fgagg !=5&&_fgagg !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_edefe ,_dcf ,_ggcdf :=_geec (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _ggcdf .Type ==ResultTypeError {return _ggcdf ;};_eecf ,_ggcdf :=_dedd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");
if _ggcdf .Type ==ResultTypeError {return _ggcdf ;};if _eecf >=_edefe {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_aafag :=args [3].ValueNumber ;if _aafag < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_fdcd :=args [4].ValueNumber ;if _fdcd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_bdeg :=0;if _fgagg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bdeg =int (args [5].ValueNumber );if !_ebga (_bdeg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");
};};_dcac ,_ggcdf :=_dgae (_edefe ,_dcf ,_bdeg );if _ggcdf .Type ==ResultTypeError {return _ggcdf ;};_faca ,_ggcdf :=_dgae (_eecf ,_dcf ,_bdeg );if _ggcdf .Type ==ResultTypeError {return _ggcdf ;};_cfeef ,_ggcdf :=_dgae (_eecf ,_edefe ,_bdeg );if _ggcdf .Type ==ResultTypeError {return _ggcdf ;
};_gcef :=1+_faca *_aafag ;_gdaa :=1+_dcac *_fdcd ;return MakeNumberResult ((_gcef /_gdaa -_cfeef *_aafag )*100);};func (_bdbdg node )String ()string {return _g .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_bdbdg ._aabc ,_cbba (string (_bdbdg ._aacd )));
};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_egfad NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_dbdfe :=ctx .NamedRange (_egfad ._bdce );_bbgec :=_dbdfe .Value ;if _fdac ,_ecad :=ev .GetFromCache (_bbgec );_ecad {return _fdac ;};_edcb :=_cb .Split (_bbgec ,"\u0021");if len (_edcb )!=2{return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_bbgec ));
};_bcaa :=ctx .Sheet (_edcb [0]);_edae :=_cb .Split (_edcb [1],"\u003a");switch len (_edae ){case 1:_gdbfb :=ev .Eval (_bcaa ,_edae [0]);ev .SetCache (_bbgec ,_gdbfb );return _gdbfb ;case 2:_acfab :=_fgfd (_bcaa ,ev ,_edae [0],_edae [1]);ev .SetCache (_bbgec ,_acfab );
return _acfab ;};return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_dbdfe .Type ));};type yyParser interface{Parse (yyLexer )int ;
Lookahead ()int ;};

// String returns a string representation of FunctionCall expression.
func (_eege FunctionCall )String ()string {_dbcgf :=_fg .Buffer {};_dbcgf .WriteString (_eege ._acbea );_dbcgf .WriteString ("\u0028");_dabb :=len (_eege ._efab )-1;for _gdfca ,_cfggg :=range _eege ._efab {_dbcgf .WriteString (_cfggg .String ());if _gdfca !=_dabb {_dbcgf .WriteString ("\u002c");
};};_dbcgf .WriteString ("\u0029");return _dbcgf .String ();};const _dbae ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";
func _beeb (_fcdfc Result ,_bfabb *criteriaParsed )bool {if _fcdfc .Type ==ResultTypeEmpty {return false ;};if _bfabb ._fdcdb {return _fcdfc .ValueNumber ==_bfabb ._dddfa ;}else {_cebc :=_cb .ToLower (_fcdfc .ValueString );return _bfabb ._fgef ==_cebc ||_ce .Match (_bfabb ._fgef ,_cebc );
};};func _gffeg (_fbfg []Result ,_dfede rmode )Result {if len (_fbfg )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_caeaa :=_fbfg [0].AsNumber ();if _caeaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ebfa :=_fbfg [1].AsNumber ();if _ebfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dcacfe :=_ebfa .ValueNumber ;_bgdg :=_caeaa .ValueNumber ;_cefa :=1.0;if _dcacfe > 0{_cefa =_cba .Pow (1/10.0,_dcacfe );}else {_cefa =_cba .Pow (10.0,-_dcacfe );};_bgdg ,_gfcge :=_cba .Modf (_bgdg /_cefa );switch _dfede {case _agdf :const _ggdg =0.499999999;
if _gfcge >=_ggdg {_bgdg ++;}else if _gfcge <=-_ggdg {_bgdg --;};case _ffeec :case _acebd :if _gfcge > 0{_bgdg ++;}else if _gfcge < 0{_bgdg --;};};return MakeNumberResult (_bgdg *_cefa );};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_aeca ,_dfda :=_bgdc (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _dfda .Type ==ResultTypeError {return _dfda ;};_cbabg :=_aeca ._ecec ;_dcb :=_aeca ._egd ;_eceg ,_dfda :=_fgf (_aeca ._fcc ,_aeca ._abae ,_cbabg ,_dcb );
if _dfda .Type ==ResultTypeError {return _dfda ;};return MakeNumberResult (_eceg );};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_baba :=args [0].AsString ();if _baba .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};if len (_baba .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_baba .ValueString [0]));};func _bgfb (_ggfba []Result )(float64 ,float64 ,Result ){_dacd :=0.0;_ceag :=1.0;for _ ,_fead :=range _ggfba {switch _fead .Type {case ResultTypeNumber :_dacd +=_fead .ValueNumber ;
_ceag *=_afba (_fead .ValueNumber );case ResultTypeList ,ResultTypeArray :_ggff ,_abgde ,_fgagd :=_bgfb (_fead .ListValues ());_dacd +=_ggff ;_ceag *=_afba (_abgde );if _fgagd .Type ==ResultTypeError {return 0,0,_fgagd ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
case ResultTypeError :return 0,0,_fead ;};};return _dacd ,_ceag ,_acae ;};func _gcdf (_fcef string ,_eegaf func (_edbea float64 )float64 )Function {return func (_faaa []Result )Result {if len (_faaa )!=1{return MakeErrorResult (_fcef +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_bedd :=_faaa [0].AsNumber ();switch _bedd .Type {case ResultTypeNumber :_cdcfd :=_eegaf (_bedd .ValueNumber );if _cba .IsNaN (_cdcfd ){return MakeErrorResult (_fcef +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};
if _cba .IsInf (_cdcfd ,0){return MakeErrorResult (_fcef +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_cdcfd );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_fcef +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _bedd ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fcef ,_bedd .Type ));
};};};const _bb ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";


// GetWidth returns 0 for the invalid reference context.
func (_bdffa *ivr )GetWidth (colIdx int )float64 {return float64 (0)};func _dbga (_cegeg []Result )[]float64 {_efed :=make ([]float64 ,0);for _ ,_ggccf :=range _cegeg {if _ggccf .Type ==ResultTypeEmpty {continue ;};_ggccf =_ggccf .AsNumber ();switch _ggccf .Type {case ResultTypeNumber :if !_ggccf .IsBoolean {_efed =append (_efed ,_ggccf .ValueNumber );
};case ResultTypeList ,ResultTypeArray :_efed =append (_efed ,_dbga (_ggccf .ListValues ())...);case ResultTypeString :default:_gf .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ggccf .Type );
};};return _efed ;};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_bdbag ,_bdfa :=_fdbfc ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _bdfa .Type !=ResultTypeEmpty {return _bdfa ;};_aaca :=_bdbag ._fcab ;_feda :=_bdbag ._dgfba ;_acab :=_bdbag ._cdcd ;_decee :=_bdbag ._dcccc ;
_gfad :=len (_aaca );if _feda > _gfad {_feda =_gfad ;};_daca :=_feda +_acab ;if _daca > _gfad {_daca =_gfad ;};_edgaf :=_aaca [0:_feda ]+_decee +_aaca [_daca :];return MakeStringResult (_edgaf );};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_efcfc .Lock ();defer _efcfc .Unlock ();if _gabdf ,_beedg :=_bfdfa [name ];_beedg {return _gabdf ;};return nil ;};func (_efefa *noCache )GetFromCache (key string )(Result ,bool ){return _acae ,false };
func _fdcfg (_eage Result )Result {if _eage .Type ==ResultTypeEmpty {return _eage ;};_acbe :=_eage .AsString ();if _acbe .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _eage .IsBoolean {if _acbe .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _acbe .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};}else {return MakeStringResult (_cb .ToLower (_acbe .ValueString ));};};type criteriaParsed struct{_fdcdb bool ;_dddfa float64 ;_fgef string ;_dgeac *criteriaRegex ;};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_ccaf :=len (args );if _ccaf < 4||_ccaf > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_aefb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aggf :=args [1].ValueNumber ;if _aggf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acaa :=args [2].ValueNumber ;if _acaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_efacf :=args [3].ValueNumber ;_dbfef :=0.0;if _ccaf > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_dbfef =args [4].ValueNumber ;};_ggdf :=0;if _ccaf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ggdf =int (args [5].ValueNumber );if _ggdf !=0{_ggdf =1;};};return MakeNumberResult (_bbc (_aefb ,_aggf ,_acaa ,_efacf ,_dbfef ,_ggdf ));};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_ccd :lhs ,_df :rhs ,_dg :op };};

// String returns a string of a range.
func (_dfga Range )String ()string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_dfga ._dfbb .String (),_dfga ._gedbb .String ());};func _fdbfc (_bcacg string ,_dgaea []Result )(*parsedReplaceObject ,Result ){if len (_dgaea )!=4{return nil ,MakeErrorResult (_bcacg +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _dgaea [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_bcacg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_gacbg :=_dgaea [0].ValueString ;if _dgaea [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bcacg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");
};_gdac :=int (_dgaea [1].ValueNumber )-1;if _dgaea [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bcacg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gdbb :=int (_dgaea [2].ValueNumber );if _dgaea [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_bcacg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");
};_gedfe :=_dgaea [3].ValueString ;return &parsedReplaceObject {_gacbg ,_gdac ,_gdbb ,_gedfe },_acae ;};

// String returns a string representation of PrefixExpr.
func (_aefd PrefixExpr )String ()string {return _g .Sprintf ("\u0025\u0073\u0021%\u0073",_aefd ._gbde .String (),_aefd ._becd .String ());};type Expression interface{Eval (_dba Context ,_efc Evaluator )Result ;Reference (_efe Context ,_bgb Evaluator )Reference ;
String ()string ;Update (_bad *_bc .UpdateQuery )Expression ;};func (_ecfdc *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_fe :v }};

// String returns a string representation of a named range.
func (_agda NamedRangeRef )String ()string {return _agda ._bdce };

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_baa EmptyExpr )Update (q *_bc .UpdateQuery )Expression {return _baa };type rmode byte ;

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_cdgc .Float64 ());
};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_bgdd Result )AsNumber ()Result {if _bgdd .Type ==ResultTypeString {_abgdd ,_aggc :=_cf .ParseFloat (_bgdd .ValueString ,64);if _aggc ==nil {return MakeNumberResult (_abgdd );};};if _bgdd .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _bgdd ;
};

// Reference returns a string reference value to a range with prefix.
func (_cfebg PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_ebaf :=_cfebg ._aabde .Reference (ctx ,ev );_adefc :=_cfebg ._babcd .Reference (ctx ,ev );_gcfga :=_cfebg ._caeca .Reference (ctx ,ev );if _ebaf .Type ==ReferenceTypeSheet &&_adefc .Type ==ReferenceTypeCell &&_gcfga .Type ==ReferenceTypeCell {return MakeRangeReference (_adfc (_ebaf ,_adefc ,_gcfga ));
};return ReferenceInvalid ;};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_cbgbd PrefixVerticalRange )Update (q *_bc .UpdateQuery )Expression {if q .UpdateType ==_bc .UpdateActionRemoveColumn {_deafc :=_cbgbd ;_bgbd :=_cbgbd ._ddgae .String ();if _bgbd ==q .SheetToUpdate {_gbacg :=q .ColumnIdx ;_deafc ._decaad =_cgb (_cbgbd ._decaad ,_gbacg );
_deafc ._dgaad =_cgb (_cbgbd ._dgaad ,_gbacg );};return _deafc ;};return _cbgbd ;};

// Reference returns an invalid reference for ConstArrayExpr.
func (_cbd ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_baaeee :=args [0].AsString ();if _baaeee .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_afbee :=_fg .Buffer {};for _ ,_gaae :=range _baaeee .ValueString {if _e .IsPrint (_gaae ){_afbee .WriteRune (_gaae );};};return MakeStringResult (_afbee .String ());};var _feee =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};


// Reference returns a string reference value to a horizontal range.
func (_cfbec HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_cfbec .horizontalRangeReference ()};};func _cgc (_fdc string )bool {for _ ,_dbd :=range _ega {_ggc :=_dbd .FindStringSubmatch (_fdc );
if len (_ggc )> 1{return true ;};};return false ;};func _cdeg (_ecdfe ,_gaefg Result ,_fdeg string )(*xargs ,Result ){if _ecdfe .Type !=ResultTypeList &&_ecdfe .Type !=ResultTypeArray {return nil ,MakeErrorResult (_fdeg +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_caeb :=_fedf (_ecdfe );_dced :=[]float64 {};for _ ,_bffba :=range _caeb {for _ ,_afde :=range _bffba {if _afde .Type ==ResultTypeNumber &&!_afde .IsBoolean {_dced =append (_dced ,_afde .ValueNumber );}else {return nil ,MakeErrorResult (_fdeg +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");
};};};_abbe :=len (_dced );if len (_dced )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _gaefg .Type !=ResultTypeList &&_gaefg .Type !=ResultTypeArray {return nil ,MakeErrorResult (_fdeg +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_ggbc :=_fedf (_gaefg );_eacg :=[]float64 {};_dgddg :=0.0;for _ ,_dcgg :=range _ggbc {for _ ,_efee :=range _dcgg {if _efee .Type ==ResultTypeNumber &&!_efee .IsBoolean {_fee :=float64 (int (_efee .ValueNumber ));if _fee < _dgddg {return nil ,MakeErrorResultType (ErrorTypeNum ,_fdeg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");
};_eacg =append (_eacg ,_fee );_dgddg =_fee ;}else {return nil ,MakeErrorResult (_fdeg +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_eacg )!=_abbe {return nil ,MakeErrorResultType (ErrorTypeNum ,"");
};return &xargs {_dced ,_eacg },MakeEmptyResult ();};

// Eval evaluates and returns the result of a formula.
func (_ggg *defEval )Eval (ctx Context ,formula string )Result {_cga :=ParseString (formula );_ea :=make (chan Result );go func (){if _cga ==nil {_ea <-MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));
}else {_ggg .checkLastEvalIsRef (ctx ,_cga );_ea <-_cga .Eval (ctx ,_ggg );};}();select{case _feb :=<-_ea :return _feb ;case <-_cc .After (_acb ):_gf .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");
return MakeNumberResult (0);};};var _agbb =map[string ]Function {};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_ebaa ,_fgae ,_gcag :=_gbacc (from ,to );if _gcag !=nil {_gf .Log .Debug (_gcag .Error ());return NewError (_gcag .Error ());};return PrefixRangeExpr {_aabde :pfx ,_babcd :_ebaa ,_caeca :_fgae };
};var _caggf =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_dff string ,_eg Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_aag string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_cc .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_bgd int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_dbb string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_age string )string ;

// GetFormat returns if cell is protected.
GetLocked (_ad string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_cbab string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_gfd string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_ece ,_efac int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_gfa string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_aagc string ,_bbb bool );

// NamedRange returns a named range.
NamedRange (_fdf string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_ed ,_cec uint32 );};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cegef :=args [0].Ref ;
if _cegef .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");
};_egbf ,_bbdcd :=_dc .ParseCellReference (_cegef .Value );if _bbdcd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cegef .Value );};return MakeNumberResult (float64 (_egbf .ColumnIdx +1));
};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_gde :v }};func _gbacc (_geag ,_fgdgg Expression )(Expression ,Expression ,error ){_afcd ,_eade :=_geag .(CellRef );if !_eade {return nil ,nil ,_c .New (_g .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_geag .String ()));
};_babfe ,_eade :=_fgdgg .(CellRef );if !_eade {return nil ,nil ,_c .New (_g .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fgdgg .String ()));};_accb ,_dadff :=_dc .ParseCellReference (_afcd ._fe );
if _dadff !=nil {return nil ,nil ,_dadff ;};_adfbc ,_cbeg :=_dc .ParseCellReference (_babfe ._fe );if _cbeg !=nil {return nil ,nil ,_cbeg ;};_cbbbb :=false ;if _accb .RowIdx > _adfbc .RowIdx {_cbbbb =true ;_accb .RowIdx ,_adfbc .RowIdx =_adfbc .RowIdx ,_accb .RowIdx ;
};if _accb .ColumnIdx > _adfbc .ColumnIdx {_cbbbb =true ;_accb .ColumnIdx ,_adfbc .ColumnIdx =_adfbc .ColumnIdx ,_accb .ColumnIdx ;_accb .Column ,_adfbc .Column =_adfbc .Column ,_accb .Column ;};if _cbbbb {return NewCellRef (_accb .String ()),NewCellRef (_adfbc .String ()),nil ;
};return _geag ,_fgdgg ,nil ;};var _faadf =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};


// Reference returns a string reference value to a named range.
func (_dgbea NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_dgbea ._bdce };};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gdfa :=args [0].AsNumber ();_gdda :=args [1].AsNumber ();if _gdfa .Type !=ResultTypeNumber ||_gdda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _gdda .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_cba .Trunc (_gdfa .ValueNumber /_gdda .ValueNumber ));
};func _gdbd (_caae string ,_debe func (_beggf float64 )float64 )Function {return func (_egacd []Result )Result {if len (_egacd )!=1{return MakeErrorResult (_caae +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_ffaa :=_egacd [0].AsNumber ();switch _ffaa .Type {case ResultTypeNumber :_dcff :=_debe (_ffaa .ValueNumber );if _cba .IsNaN (_dcff ){return MakeErrorResult (_caae +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _cba .IsInf (_dcff ,0){return MakeErrorResult (_caae +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");
};if _dcff ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_caae +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_dcff );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_caae +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _ffaa ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_caae ,_ffaa .Type ));
};};};

// Reference returns a string reference value to a sheet.
func (_gbbgb SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_gbbgb ._bgaf };};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbgb :=args [0].Ref ;if _fbgb .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .Cell (_fbgb .Value ,ev ).IsBoolean );};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ccd ,_df Expression ;_dg BinOpType ;};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_eag :=args [0];switch _eag .Type {case ResultTypeEmpty :return MakeNumberResult (1);
case ResultTypeNumber :_agg :=_gac (_eag .ValueNumber );return MakeNumberResult (float64 (_agg .Month ()));case ResultTypeString :_bcd :=_cb .ToLower (_eag .ValueString );if !_cgc (_bcd ){_ ,_ ,_ ,_ ,_cgaf ,_gfce :=_fcd (_bcd );if _gfce .Type ==ResultTypeError {_gfce .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";
return _gfce ;};if _cgaf {return MakeNumberResult (1);};};_ ,_ebg ,_ ,_ ,_gcg :=_dgb (_bcd );if _gcg .Type ==ResultTypeError {return _gcg ;};return MakeNumberResult (float64 (_ebg ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");
};};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_adg :=_cb .ToLower (args [0].ValueString );if !_ecb (_adg ){_ ,_ ,_ ,_agef ,_dge :=_dgb (_adg );if _dge .Type ==ResultTypeError {_dge .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";
return _dge ;};if _agef {return MakeNumberResult (0);};};_cdgb ,_edbe ,_gbd ,_agfg ,_ ,_aed :=_fcd (_adg );if _aed .Type ==ResultTypeError {return _aed ;};_dfdg :=_fbec (float64 (_cdgb ),float64 (_edbe ),_gbd );if _agfg {_dfdg +=0.5;}else if _dfdg >=1{_dfdg -=float64 (int (_dfdg ));
};return MakeNumberResult (_dfdg );};type cmpResult int8 ;const _dfa =57376;type durationArgs struct{_efcb float64 ;_ffec float64 ;_bdc float64 ;_eged float64 ;_gaee float64 ;_bdfg int ;};func _fbdf (_gace []Result ,_ffacc string )(*amorArgs ,Result ){_aeb :=len (_gace );
if _aeb !=6&&_aeb !=7{return nil ,MakeErrorResult (_ffacc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gace [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffacc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_cfee :=_gace [0].ValueNumber ;if _cfee < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ffacc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_badd ,_bedc :=_dedd (_gace [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_ffacc );if _bedc .Type ==ResultTypeError {return nil ,_bedc ;};_fbga ,_bedc :=_dedd (_gace [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_ffacc );
if _bedc .Type ==ResultTypeError {return nil ,_bedc ;};if _fbga < _badd {return nil ,MakeErrorResultType (ErrorTypeNum ,_ffacc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");
};if _gace [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffacc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dbfa :=_gace [3].ValueNumber ;if _dbfa < 0||_dbfa > _cfee {return nil ,MakeErrorResultType (ErrorTypeNum ,_ffacc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");
};if _gace [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffacc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gdfd :=int (_gace [4].ValueNumber );if _gdfd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ffacc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if _gace [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffacc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_fcf :=_gace [5].ValueNumber ;if _fcf < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ffacc +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");
};_dbagd :=0;if _aeb ==7&&_gace [6].Type !=ResultTypeEmpty {if _gace [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffacc +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dbagd =int (_gace [6].ValueNumber );if !_ebga (_dbagd )||_dbagd ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_ffacc );
};};return &amorArgs {_cfee ,_badd ,_fbga ,_dbfa ,_gdfd ,_fcf ,_dbagd },_acae ;};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_cda CellRef )Update (q *_bc .UpdateQuery )Expression {if q .UpdateCurrentSheet {_cda ._fe =_fbe (_cda ._fe ,q );};return _cda ;};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_aded ,_facb :=_bgdc (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _facb .Type ==ResultTypeError {return _facb ;};return MakeNumberResult (_bgdb (_aded ._fcc ,_aded ._abae ,_aded ._ecec ,_aded ._egd ));
};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_ecgb :=_eebdg (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _ecgb .Type !=ResultTypeEmpty {return _ecgb ;};_ggfe :=_bdcf (args [1:]);_bagd :=0.0;_bbgce :=_fedf (args [0]);for _ ,_gbbg :=range _ggfe {_bagd +=_bbgce [_gbbg ._fbfc ][_gbbg ._ebebc ].ValueNumber ;
};return MakeNumberResult (float64 (_bagd ));};var _gb =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_agdbc PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_dbdfg :=_agdbc ._ddgae .Reference (ctx ,ev );switch _dbdfg .Type {case ReferenceTypeSheet :if _agefg (_dbdfg ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dbdfg .Value ));
};_eafc :=_agdbc .verticalRangeReference (_dbdfg .Value );if _gddaf ,_bfbee :=ev .GetFromCache (_eafc );_bfbee {return _gddaf ;};_gebce :=ctx .Sheet (_dbdfg .Value );_ccdf ,_eaae :=_gdege (_gebce ,_agdbc ._decaad ,_agdbc ._dgaad );_edeg :=_fgfd (_gebce ,ev ,_ccdf ,_eaae );
ev .SetCache (_eafc ,_edeg );return _edeg ;default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dbdfg .Type ));
};};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_efgce :=args [0].AsNumber ();if _efgce .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bafbc :=_cba .Signbit (_efgce .ValueNumber );_dfff ,_dgcf :=_cba .Modf ((_efgce .ValueNumber -1)/2);_aafda :=_dfff *2+1;if _dgcf !=0{if !_bafbc {_aafda +=2;}else {_aafda -=2;};};return MakeNumberResult (_aafda );};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_ggfag (args ,_fceb ))};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_gdggd *ivr )GetLabelPrefix (cellRef string )string {return ""};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_caee :=[]float64 {};
for _ ,_cbedc :=range args {switch _cbedc .Type {case ResultTypeString :_bcddfg :=_cbedc .AsNumber ();if _bcddfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_caee =append (_caee ,_bcddfg .ValueNumber );case ResultTypeList ,ResultTypeArray :_eabaa :=GCD (_cbedc .ListValues ());if _eabaa .Type !=ResultTypeNumber {return _eabaa ;};_caee =append (_caee ,_eabaa .ValueNumber );case ResultTypeNumber :_caee =append (_caee ,_cbedc .ValueNumber );
case ResultTypeError :return _cbedc ;default:return MakeErrorResult (_g .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cbedc .Type ));
};};if _caee [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_caee )==1{return MakeNumberResult (_caee [0]);
};_fccac :=_caee [0];for _cce :=1;_cce < len (_caee );_cce ++{if _caee [_cce ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fccac =_dbeff (_fccac ,_caee [_cce ]);};return MakeNumberResult (_fccac );};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_ddgae Expression ;_decaad ,_dgaad string ;};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ebddae :=args [0];switch _ebddae .Type {case ResultTypeError :return _ebddae ;case ResultTypeNumber ,ResultTypeString :return _fdcfg (args [0]);case ResultTypeList :_eeee :=_ebddae .ValueList ;_eeeb :=[]Result {};for _ ,_gcgc :=range _eeee {_edfa :=_fdcfg (_gcgc );
if _edfa .Type ==ResultTypeError {return _edfa ;};_eeeb =append (_eeeb ,_edfa );};return MakeListResult (_eeeb );case ResultTypeArray :_aafe :=_ebddae .ValueArray ;_bdabe :=[][]Result {};for _ ,_cbccf :=range _aafe {_dbcef :=[]Result {};for _ ,_dcacb :=range _cbccf {_bedf :=_fdcfg (_dcacb );
if _bedf .Type ==ResultTypeError {return _bedf ;};_dbcef =append (_dbcef ,_bedf );};_bdabe =append (_bdabe ,_dbcef );};return MakeArrayResult (_bdabe );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_egge :=args [0];
if _egge .Type !=ResultTypeArray &&_egge .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_bfgcf :=_egge .ValueArray ;if len (_bfgcf )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");
};return MakeNumberResult (float64 (len (_bfgcf [0])));};var _abec =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// Eval evaluates and returns a string.
func (_beedb String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_beedb ._aeaa )};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fcfd :=args [0].AsString ();if _fcfd .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (_fcfd .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (_fcfd .ValueString [0]));};func _gecf (_ggd int )bool {if _ggd ==_ggd /400*400{return true ;};if _ggd ==_ggd /100*100{return false ;};return _ggd ==_ggd /4*4;};func (_ecebbc *Lexer )emit (_fcefa tokenType ,_cbag []byte ){if _eacd {_g .Println ("\u0065\u006d\u0069\u0074",_fcefa ,_cbba (string (_cbag )));
};_ecebbc ._ceeg <-&node {_fcefa ,string (_cbag )};};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_bdd ,_acef :=_bgdc (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _acef .Type ==ResultTypeError {return _acef ;};return MakeNumberResult (_gdecd (_bdd ._fcc ,_bdd ._abae ,_bdd ._ecec ,_bdd ._egd ));};func _fcgb (_fbea []Result ,_geef bool )Result {_acbad :="\u004d\u0041\u0058";
if _geef {_acbad ="\u004d\u0041\u0058\u0041";};if len (_fbea )==0{return MakeErrorResult (_acbad +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fefd :=-_cba .MaxFloat64 ;for _ ,_fcff :=range _fbea {switch _fcff .Type {case ResultTypeNumber :if (_geef ||!_fcff .IsBoolean )&&_fcff .ValueNumber > _fefd {_fefd =_fcff .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_bege :=_fcgb (_fcff .ListValues (),_geef );
if _bege .ValueNumber > _fefd {_fefd =_bege .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_befcc :=0.0;if _geef {_befcc =_fcff .AsNumber ().ValueNumber ;};if _befcc > _fefd {_fefd =_befcc ;};default:_gf .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_acbad +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fcff .Type );
};};if _fefd ==-_cba .MaxFloat64 {_fefd =0;};return MakeNumberResult (_fefd );};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_abacf :=_eebdg (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _abacf .Type !=ResultTypeEmpty {return _abacf ;};_deed :=_bdcf (args [1:]);_dgab :=_cba .MaxFloat64 ;_egfb :=_fedf (args [0]);for _ ,_febde :=range _deed {_fadcb :=_egfb [_febde ._fbfc ][_febde ._ebebc ].ValueNumber ;
if _dgab > _fadcb {_dgab =_fadcb ;};};if _dgab ==_cba .MaxFloat64 {_dgab =0;};return MakeNumberResult (float64 (_dgab ));};const _aaecf =57361;

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gdaf ,_ccfa ,_abce :=_geec (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _abce .Type ==ResultTypeError {return _abce ;};_bdda ,_abce :=_dedd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _abce .Type ==ResultTypeError {return _abce ;};if _bdda >=_gdaf {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_egfa :=args [3].ValueNumber ;if _egfa < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cgdf :=args [4].ValueNumber ;if _cgdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_dfdge :=args [5].ValueNumber ;if _dfdge < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ebee :=float64 (int (args [6].ValueNumber ));if !_abea (_ebee ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_fbca :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_fbca =int (args [7].ValueNumber );if !_ebga (_fbca ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");
};};_agge ,_abce :=_dgae (_bdda ,_ccfa ,_fbca );if _abce .Type ==ResultTypeError {return _abce ;};_agge *=_ebee ;_fgdg ,_abce :=_dgae (_gdaf ,_ccfa ,_fbca );if _abce .Type ==ResultTypeError {return _abce ;};_fgdg *=_ebee ;_ggeg ,_abce :=_dgae (_bdda ,_gdaf ,_fbca );
if _abce .Type ==ResultTypeError {return _abce ;};_ggeg *=_ebee ;_adgc :=_dfdge +_agge *100*_egfa /_ebee ;_adgc /=_cgdf +_ggeg *100*_egfa /_ebee ;_adgc --;_adgc *=_ebee /_fgdg ;return MakeNumberResult (_adgc );};var _decd =[...]uint8 {0,20,37,60,78,96};


// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_gadb SheetPrefixExpr )Update (q *_bc .UpdateQuery )Expression {return _gadb };

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_abbae :=_eebdg (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _abbae .Type !=ResultTypeEmpty {return _abbae ;};_acdcb :=_bdcf (args );return MakeNumberResult (float64 (len (_acdcb )));};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_facgd :=[]string {};for _ecag :=range _agbb {_facgd =append (_facgd ,_ecag );};for _accdb :=range _bfdfa {_facgd =append (_facgd ,_accdb );};_ff .Strings (_facgd );return _facgd ;};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_dbbge :=_fg .Buffer {};for _ ,_bgag :=range args {switch _bgag .Type {case ResultTypeString :_dbbge .WriteString (_bgag .ValueString );case ResultTypeNumber :var _dgbbc string ;if _bgag .IsBoolean {if _bgag .ValueNumber ==0{_dgbbc ="\u0046\u0041\u004cS\u0045";
}else {_dgbbc ="\u0054\u0052\u0055\u0045";};}else {_dgbbc =_bgag .AsString ().ValueString ;};_dbbge .WriteString (_dgbbc );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
};};return MakeStringResult (_dbbge .String ());};const _eebfc =57378;

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_ceeg chan *node ;_cbdcc _bf .Mutex ;_feab []chan *node ;_adff []*node ;};const _fcbaf =57362;

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_ebbb :=len (args );if _ebbb !=4&&_ebbb !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_baaed ,_dabd :=_dedd (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _dabd .Type ==ResultTypeError {return _dabd ;};_fag ,_dabd :=_dedd (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");
if _dabd .Type ==ResultTypeError {return _dabd ;};if _baaed >=_fag {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_befa :=args [2].ValueNumber ;if _befa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebbc :=args [3].ValueNumber ;if _ebbc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbfe :=0;if _ebbb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbfe =int (args [4].ValueNumber );if !_ebga (_dbfe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");
};};_ffbg ,_dabd :=_dgae (_baaed ,_fag ,_dbfe );if _dabd .Type ==ResultTypeError {return _dabd ;};return MakeNumberResult (_ebbc *_befa *_ffbg );};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_cfag PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_abgbg :=_cfag ._fcbb .Reference (ctx ,ev );switch _abgbg .Type {case ReferenceTypeSheet :if _agefg (_abgbg ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_abgbg .Value ));
};_cccb :=_cfag .horizontalRangeReference (_abgbg .Value );if _eadb ,_gffc :=ev .GetFromCache (_cccb );_gffc {return _eadb ;};_aead :=ctx .Sheet (_abgbg .Value );_ccdbg ,_cgabc :=_fadf (_aead ,_cfag ._afbb ,_cfag ._cdfba );_dbace :=_fgfd (_aead ,ev ,_ccdbg ,_cgabc );
ev .SetCache (_cccb ,_dbace );return _dbace ;default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_abgbg .Type ));
};};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_afce :=args [0].AsNumber ();if _afce .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};if _afce .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};return MakeNumberResult (_afba (_afce .ValueNumber ));};type parsedSearchObject struct{_aefe string ;_gfdg string ;_dffb int ;};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_cafe :=args [0];_cefd :=args [1];if _cefd .Type !=ResultTypeArray &&_cefd .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_aaag :=_gdae (_cefd );_eega :=-1;for _dbfaa ,_dgcd :=range _aaag {if _egdd (_cafe ,_dgcd ,false ,false )==_cgcg {_eega =_dbfaa ;};};if _eega ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};_bbee :=_aaag ;if len (args )==3{_bbee =_gdae (args [2]);};if _eega < 0||_eega >=len (_bbee ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};return _bbee [_eega ];};

// LastColumn returns empty string for the invalid reference context.
func (_fbfdf *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};var _gbba =[...]int {1};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bfef :=true ;for _ ,_cabea :=range args {_cabea =_cabea .AsNumber ();switch _cabea .Type {case ResultTypeList ,ResultTypeArray :_eceaa :=And (_cabea .ListValues ());if _eceaa .Type ==ResultTypeError {return _eceaa ;};if _eceaa .ValueNumber ==0{_bfef =false ;
};case ResultTypeNumber :if _cabea .ValueNumber ==0{_bfef =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
case ResultTypeError :return _cabea ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");
};};return MakeBoolResult (_bfef );};func _cbba (_gcfge string )string {_gcfge =_cb .Replace (_gcfge ,"\u000a","\u005c\u006e",-1);_gcfge =_cb .Replace (_gcfge ,"\u000d","\u005c\u0072",-1);_gcfge =_cb .Replace (_gcfge ,"\u0009","\u005c\u0074",-1);return _gcfge ;
};var _bfdfa =map[string ]FunctionComplex {};func (_gcad *ivr )SetOffset (col ,row uint32 ){};var _bfbdc []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];
};return args [0];};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcdg :=int (args [0].ValueNumber );
return MakeBoolResult (_dcdg !=_dcdg /2*2);};

// Eval evaluates and returns an expression with prefix.
func (_cbff PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_eabbd :=_cbff ._gbde .Reference (ctx ,ev );switch _eabbd .Type {case ReferenceTypeSheet :if _agefg (_eabbd ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_eabbd .Value ));
};_acdf :=ctx .Sheet (_eabbd .Value );return _cbff ._becd .Eval (_acdf ,ev );default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eabbd .Type ));
};};var _acae Result =MakeEmptyResult ();const _bdca =57366;

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_bda [][]Expression };

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gbbbf ,_cfcdf ,_acbce :=_geec (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _acbce .Type ==ResultTypeError {return _acbce ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbeg :=_cfcdf -_gbbbf ;if _bbeg > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");
};_dabg :=args [2].ValueNumber ;if _dabg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult ((365*_dabg )/(360-_dabg *_bbeg ));};func _dffca (_eeedc [][]Result )float64 {if len (_eeedc )==2{_cgacf :=_eeedc [0][0].AsNumber ();_gecgc :=_eeedc [0][1].AsNumber ();_dcde :=_eeedc [1][0].AsNumber ();_fbaaf :=_eeedc [1][1].AsNumber ();
if _cgacf .Type !=ResultTypeNumber ||_gecgc .Type !=ResultTypeNumber ||_dcde .Type !=ResultTypeNumber ||_fbaaf .Type !=ResultTypeNumber {return _cba .NaN ();};return _cgacf .ValueNumber *_fbaaf .ValueNumber -_dcde .ValueNumber *_gecgc .ValueNumber ;};_cgada :=float64 (0);
_bgca :=float64 (1);for _agfc :=range _eeedc {_cgada +=_bgca *_eeedc [0][_agfc ].ValueNumber *_dffca (_abga (_eeedc ,_agfc ));_bgca *=-1;};return _cgada ;};type yySymType struct{_dcdb int ;_eebg *node ;_eaeccd Expression ;_ddda []Expression ;_adddg [][]Expression ;
};

// Eval evaluates the binary expression using the context given.
func (_ceg BinaryExpr )String ()string {_gg :="";switch _ceg ._dg {case BinOpTypePlus :_gg ="\u002b";case BinOpTypeMinus :_gg ="\u002d";case BinOpTypeMult :_gg ="\u002a";case BinOpTypeDiv :_gg ="\u002f";case BinOpTypeExp :_gg ="\u005e";case BinOpTypeLT :_gg ="\u003c";
case BinOpTypeGT :_gg ="\u003e";case BinOpTypeEQ :_gg ="\u003d";case BinOpTypeLEQ :_gg ="\u003c\u003d";case BinOpTypeGEQ :_gg ="\u003e\u003d";case BinOpTypeNE :_gg ="\u003c\u003e";case BinOpTypeConcat :_gg ="\u0026";};return _ceg ._ccd .String ()+_gg +_ceg ._df .String ();
};func _afec (_cafc string ,_baga []Result )(*parsedSearchObject ,Result ){_dedabf :=len (_baga );if _dedabf !=2&&_dedabf !=3{return nil ,MakeErrorResult (_cafc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bbgag :=_baga [0];if _bbgag .Type ==ResultTypeError {return nil ,_bbgag ;};if _bbgag .Type !=ResultTypeString &&_bbgag .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_bccd :=_baga [1];if _bccd .Type ==ResultTypeError {return nil ,_bccd ;};if _bccd .Type !=ResultTypeString &&_bccd .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");
};_cfbe :=_bccd .Value ();_fdgd :=_bbgag .Value ();_fdege :=1;if _dedabf ==3&&_baga [2].Type !=ResultTypeEmpty {_fcda :=_baga [2];if _fcda .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");
};_fdege =int (_fcda .ValueNumber );if _fdege < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};if _fdege > len (_cfbe ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};};return &parsedSearchObject {_fdgd ,_cfbe ,_fdege },_acae ;};var _deae =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };


// Eval evaluates and returns the result of an empty expression.
func (_dedb EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};const (_agdf rmode =iota ;_ffeec ;_acebd ;);const _dbad ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";
func _geec (_aaf ,_cfca Result ,_gfbc string )(float64 ,float64 ,Result ){_dcgd ,_cecd :=_dedd (_aaf ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_gfbc );if _cecd .Type ==ResultTypeError {return 0,0,_cecd ;};_dcafb ,_cecd :=_dedd (_cfca ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_gfbc );
if _cecd .Type ==ResultTypeError {return 0,0,_cecd ;};if _dcgd >=_dcafb {return 0,0,MakeErrorResultType (ErrorTypeNum ,_gfbc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};return _dcgd ,_dcafb ,_acae ;};func _dgb (_ade string )(int ,int ,int ,bool ,Result ){_bdbd :="";_fged :=[]string {};for _ddgd ,_bdbdc :=range _edf {_fged =_bdbdc .FindStringSubmatch (_ade );if len (_fged )> 1{_bdbd =_ddgd ;break ;};};if _bdbd ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );
};_dgbc :=false ;var _dcaf ,_afc ,_cecf int ;var _efg error ;switch _bdbd {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_afc ,_efg =_cf .Atoi (_fged [1]);if _efg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );};_cecf ,_efg =_cf .Atoi (_fged [3]);
if _efg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );};_dcaf ,_efg =_cf .Atoi (_fged [5]);if _efg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );};if _dcaf < 0||_dcaf > 9999||(_dcaf > 99&&_dcaf < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );
};_dcaf =_egc (_dcaf );_dgbc =_fged [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_afc =_gcd [_fged [1]];_cecf ,_efg =_cf .Atoi (_fged [14]);if _efg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );};_dcaf ,_efg =_cf .Atoi (_fged [16]);
if _efg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );};if _dcaf < 0||_dcaf > 9999||(_dcaf > 99&&_dcaf < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );};_dcaf =_egc (_dcaf );_dgbc =_fged [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_edde ,_dcgb :=_cf .Atoi (_fged [1]);
if _dcgb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );};_aecb ,_dcgb :=_cf .Atoi (_fged [3]);if _dcgb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );};_eeac ,_dcgb :=_cf .Atoi (_fged [5]);if _dcgb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );
};if _edde >=1900&&_edde < 10000{_dcaf =_edde ;_afc =_aecb ;_cecf =_eeac ;}else if _edde > 0&&_edde < 13{_afc =_edde ;_cecf =_aecb ;_dcaf =_eeac ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );};_dgbc =_fged [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_dcaf ,_efg =_cf .Atoi (_fged [16]);
if _efg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );};_afc =_gcd [_fged [3]];_cecf ,_efg =_cf .Atoi (_fged [1]);if _efg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );};_dgbc =_fged [19]=="";};if !_geeb (_dcaf ,_afc ,_cecf ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bcca );
};return _dcaf ,_afc ,_cecf ,_dgbc ,_acae ;};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};func _adfc (_bebg ,_gbegc ,_ebddc Reference )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_bebg .Value ,_gbegc .Value ,_ebddc .Value );};const _acb =_cc .Second *1;

// ReferenceType is a type of reference
//
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;func _ccg (_ag BinOpType ,_aae [][]Result ,_bg Result )Result {_ca :=[][]Result {};for _bfb :=range _aae {_ga :=_fc (_ag ,_aae [_bfb ],_bg );if _ga .Type ==ResultTypeError {return _ga ;};_ca =append (_ca ,_ga .ValueList );};return MakeArrayResult (_ca );
};var _fefce []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};const _fcdg =1;func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};


// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_acga ,_cea :=_cefea (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _cea .Type ==ResultTypeError {return _cea ;};_efaa :=_acga ._ddgca ;_fggb :=_acga ._gfga ;_efgcf :=_acga ._afgd ;_dcaeb :=_acga ._fbaa ;
_gece :=_acga ._gfgaf ;_bcce :=_acga ._egcae ;_baeec :=_bdbf (_efaa ,_fggb ,_efgcf ,0,_bcce );_abfbd :=0.0;if _dcaeb ==1{if _bcce ==0{_abfbd =_baeec +_efgcf *_efaa ;}else {_abfbd =_baeec ;};_dcaeb ++;};for _fbcg :=_dcaeb ;_fbcg <=_gece ;_fbcg ++{if _bcce ==1{_abfbd +=_baeec -(_fcaa (_efaa ,_fbcg -2,_baeec ,_efgcf ,1)-_baeec )*_efaa ;
}else {_abfbd +=_baeec -_fcaa (_efaa ,_fbcg -1,_baeec ,_efgcf ,0)*_efaa ;};};return MakeNumberResult (_abfbd );};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_baefd :=args [0].AsNumber ();if _baefd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gccge :=int (_baefd .ValueNumber );if _gccge < 0||_gccge > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");
};return MakeStringResult (_g .Sprintf ("\u0025\u0063",_gccge ));};func _adgcb (_ggbfb ,_gbfd int )string {const TOKSTART =4;if !_aecg {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_deaad :=range _afbec {if _deaad ._aegc ==_ggbfb &&_deaad ._geffg ==_gbfd {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_deaad ._gdfeb ;
};};_afffe :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_ceacg (_gbfd );_fdcc :=make ([]int ,0,4);_cfad :=_ebgaa [_ggbfb ];for _cgded :=TOKSTART ;_cgded -1< len (_feee );_cgded ++{if _afae :=_cfad +_cgded ;
_afae >=0&&_afae < _cdaff &&_cedcg [_bccfa [_afae ]]==_cgded {if len (_fdcc )==cap (_fdcc ){return _afffe ;};_fdcc =append (_fdcc ,_cgded );};};if _faadf [_ggbfb ]==-2{_dagc :=0;for _cgfe [_dagc ]!=-1||_cgfe [_dagc +1]!=_ggbfb {_dagc +=2;};for _dagc +=2;
_cgfe [_dagc ]>=0;_dagc +=2{_bbdca :=_cgfe [_dagc ];if _bbdca < TOKSTART ||_cgfe [_dagc +1]==0{continue ;};if len (_fdcc )==cap (_fdcc ){return _afffe ;};_fdcc =append (_fdcc ,_bbdca );};if _cgfe [_dagc +1]!=0{return _afffe ;};};for _dcbb ,_dfab :=range _fdcc {if _dcbb ==0{_afffe +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";
}else {_afffe +="\u0020\u006f\u0072\u0020";};_afffe +=_ceacg (_dfab );};return _afffe ;};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_ggfag (args ,_deaa ));};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_gbgd :=_cb .Split (v ,"\u003a");if len (_gbgd )!=2{return nil ;};_ggbb ,_ :=_cf .Atoi (_gbgd [0]);_ccad ,_ :=_cf .Atoi (_gbgd [1]);if _ggbb > _ccad {_ggbb ,_ccad =_ccad ,_ggbb ;};return HorizontalRange {_cfdc :_ggbb ,_geece :_ccad };
};func (_ccbgd *plex )Lex (lval *yySymType )int {_aecg =true ;_dcad :=<-_ccbgd ._fcgf ;if _dcad !=nil {lval ._eebg =_dcad ;return int (lval ._eebg ._aabc );};return 0;};

// Function is a standard function whose result only depends on its arguments.
type Function func (_fgeeg []Result )Result ;func (_aage *yyParserImpl )Lookahead ()int {return _aage ._egag };func (_cabgd PrefixHorizontalRange )horizontalRangeReference (_cecgf string )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_cecgf ,_cabgd ._afbb ,_cabgd ._cdfba );
};var _dbf =[]int {31,28,31,30,31,30,31,31,30,31,30,31};const _abbf =57371;const _ebc ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";
func (_daefa VerticalRange )verticalRangeReference ()string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_daefa ._effg ,_daefa ._caggb );};type criteriaRegex struct{_dddfc byte ;_gfdb string ;};var _afbec =[...]struct{_aegc int ;_geffg int ;_gdfeb string ;
}{};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_cbdb ,_deaf :=_bgdc (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _deaf .Type ==ResultTypeError {return _deaf ;};_cdfb :=_gac (_cbdb ._fcc );_efcd :=_gac (_cbdb ._abae );_bebc :=_cbdb ._ecec ;_ddae :=_bgg (_cdfb ,_efcd ,_bebc );
_dagb ,_ceb ,_fgdf :=_ddae .Date ();return MakeNumberResult (_ddgc (_dagb ,int (_ceb ),_fgdf ));};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_gefb :=len (args );if _gefb < 3||_gefb > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cgfd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aeea :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_gdgcf :=args [2].ValueNumber ;_ggef :=0.0;if _gefb >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ggef =args [3].ValueNumber ;};_dfcag :=0.0;if _gefb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dfcag =args [4].ValueNumber ;if _dfcag !=0{_dfcag =1;};};_cbde :=_aeea *(1+_cgfd *_dfcag )-_ggef *_cgfd ;_dgdd :=(_gdgcf *_cgfd +_aeea *(1+_cgfd *_dfcag ));return MakeNumberResult (_cba .Log (_cbde /_dgdd )/_cba .Log (1+_cgfd ));};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_gebd :=ctx .GetEpoch ();_dbde ,_ddgdc :=_bagc (args [0].Value (),_gebd );if _ddgdc !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_eaagc :=_dbde .Year ();return MakeBoolResult (_gecf (_eaagc ));};

// Reference returns an invalid reference for Number.
func (_dgfge Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_dedag Context ,_facce Evaluator ,_bggcc []Result )Result ;var _edge =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func _dcbfa (_fdag float64 ,_ebcfg *criteriaRegex )bool {_cebb ,_aefbg :=_cf .ParseFloat (_ebcfg ._gfdb ,64);if _aefbg !=nil {return false ;};switch _ebcfg ._dddfc {case _baaa :return _fdag ==_cebb ;case _acfca :return _fdag <=_cebb ;case _eadd :return _fdag >=_cebb ;
case _aadfa :return _fdag < _cebb ;case _fage :return _fdag > _cebb ;};return false ;};