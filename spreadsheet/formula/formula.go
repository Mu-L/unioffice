//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_fg "bytes";_d "errors";_c "fmt";_cgg "github.com/unidoc/unioffice/common/logger";_cbb "github.com/unidoc/unioffice/internal/mergesort";_bde "github.com/unidoc/unioffice/internal/wildcard";_fga "github.com/unidoc/unioffice/spreadsheet/format";
_ba "github.com/unidoc/unioffice/spreadsheet/reference";_be "github.com/unidoc/unioffice/spreadsheet/update";_e "io";_cd "math";_bb "math/big";_a "math/rand";_fe "regexp";_dd "sort";_ac "strconv";_cg "strings";_cb "sync";_bd "time";_b "unicode";);

// String returns a string representation of a named range.
func (_cbbga NamedRangeRef )String ()string {return _cbbga ._eaee };

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_cge :lhs ,_fed :rhs ,_fa :op };};func _gae (_caff []Result ,_badb string )(*cumulArgs ,Result ){if len (_caff )!=6{return nil ,MakeErrorResult (_badb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _caff [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_badb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ffcb :=_caff [0].ValueNumber ;
if _ffcb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_badb +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _caff [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_badb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_babe :=_caff [1].ValueNumber ;if _babe <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_badb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if _caff [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_badb +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdfe :=_caff [2].ValueNumber ;if _gdfe <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_badb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _caff [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_badb +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_dbgd :=_caff [3].ValueNumber ;if _dbgd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_badb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _caff [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_badb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cecb :=_caff [4].ValueNumber ;if _cecb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_badb +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if _cecb < _dbgd {return nil ,MakeErrorResultType (ErrorTypeNum ,_badb +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");
};if _cecb > _babe {return nil ,MakeErrorResultType (ErrorTypeNum ,_badb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");
};_ddfg :=int (_caff [5].ValueNumber );if _ddfg !=0&&_ddfg !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_badb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");
};return &cumulArgs {_ffcb ,_babe ,_gdfe ,_dbgd ,_cecb ,_ddfg },_aaa ;};const _adbd =57364;

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_cadeg .Lock ();defer _cadeg .Unlock ();if _dage ,_gggaa :=_cfebb [name ];_gggaa {return _dage ;};return nil ;};func LexReader (r _e .Reader )chan *node {_dgdc :=NewLexer ();go _dgdc .lex (r );return _dgdc ._fdada };
const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);var _bbceg =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};


// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_gaede :=args [0].Ref ;for _gaede .Type ==ReferenceTypeNamedRange {_gaede =ctx .NamedRange (_gaede .Value );};_deba :="";switch _gaede .Type {case ReferenceTypeCell :_deba =_gaede .Value ;case ReferenceTypeRange :_dcgce :=_cg .Split (_gaede .Value ,"\u003a");
if len (_dcgce )==2{_deba =_dcgce [0];};default:return MakeErrorResult (_c .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_gaede .Type ));
};_cbcf ,_cgbbe :=_ba .ParseCellReference (_deba );if _cgbbe !=nil {return MakeErrorResult (_c .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_cgbbe .Error ()));
};_bbad ,_ffac ,_bbaf :=_cbcf .Column ,_cbcf .RowIdx ,_cbcf .SheetName ;_fddfa :=args [1].AsNumber ();if _fddfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};_aedeb :=args [2].AsNumber ();if _aedeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};var _debf ,_bcdc Result ;if len (args )==3{_debf =MakeNumberResult (1);_bcdc =MakeNumberResult (1);}else {_debf =args [3].AsNumber ();if _debf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");
};if _debf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_bcdc =args [4].AsNumber ();if _bcdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");
};if _bcdc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_ggec :=_ba .ColumnToIndex (_bbad );_cgeb :=_ffac +uint32 (_fddfa .ValueNumber );_ccgae :=_ggec +uint32 (_aedeb .ValueNumber );_cacb :=_cgeb +uint32 (_debf .ValueNumber );_efed :=_ccgae +uint32 (_bcdc .ValueNumber );
if _debf .ValueNumber > 0{_cacb --;}else {_cacb ++;_cgeb ,_cacb =_cacb ,_cgeb ;};if _bcdc .ValueNumber > 0{_efed --;}else {_efed ++;_ccgae ,_efed =_efed ,_ccgae ;};_aege :=_c .Sprintf ("\u0025\u0073\u0025\u0064",_ba .IndexToColumn (_ccgae ),_cgeb );_gdfa :=_c .Sprintf ("\u0025\u0073\u0025\u0064",_ba .IndexToColumn (_efed ),_cacb );
if _bbaf ==""{return _afeeb (ctx ,ev ,_aege ,_gdfa );}else {return _afeeb (ctx .Sheet (_bbaf ),ev ,_aege ,_gdfa );};};func _adcfg (_aaff Result ,_abfb ,_gbde string )(float64 ,Result ){switch _aaff .Type {case ResultTypeEmpty :return 0,_aaa ;case ResultTypeNumber :return _aaff .ValueNumber ,_aaa ;
case ResultTypeString :_aeaad ,_ggbda :=_ac .ParseFloat (_aaff .ValueString ,64);if _ggbda !=nil {return 0,MakeErrorResult (_gbde +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_abfb );
};return _aeaad ,_aaa ;default:return 0,MakeErrorResult (_abfb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gbde +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");
};};var _ggdc =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };


// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fcff :=args [0].AsNumber ();
_bead :=args [1].AsNumber ();if _fcff .Type !=ResultTypeNumber ||_bead .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};if _bead .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_cefbc ,_bbdgg :=_cd .Modf (_fcff .ValueNumber /_bead .ValueNumber );if _bbdgg < 0{_cefbc --;
};return MakeNumberResult (_fcff .ValueNumber -_bead .ValueNumber *_cefbc );};const _aca ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";
var _cgebe ,_cffb ,_ddce ,_gadc ,_fdgd ,_gdda ,_dag ,_dbbd ,_eage ,_gfbc ,_bbdc ,_ggbf ,_fbed ,_dedd ,_aeeb *_fe .Regexp ;type criteriaRegex struct{_decfd byte ;_ffaa string ;};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_caag :=len (args );if _caag < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bgag :=args [0].ValueNumber ;if _bgag ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fcec :=[]float64 {};for _ ,_fegc :=range args [1:]{switch _fegc .Type {case ResultTypeNumber :_fcec =append (_fcec ,_fegc .ValueNumber );case ResultTypeArray ,ResultTypeList :_effb :=_gfcf (_fegc );
for _ ,_edggc :=range _effb {for _ ,_eeba :=range _edggc {if _eeba .Type ==ResultTypeNumber &&!_eeba .IsBoolean {_fcec =append (_fcec ,_eeba .ValueNumber );};};};};};_abca :=0.0;for _facg ,_fedd :=range _fcec {_abca +=_fedd /_cd .Pow (1+_bgag ,float64 (_facg )+1);
};return MakeNumberResult (_abca );};func _aefad (_acdf string ,_cegg _bd .Time )(_bd .Time ,error ){_dbeb ,_ ,_fad :=_bb .ParseFloat (_acdf ,10,128,_bb .ToNearestEven );if _fad !=nil {return _bd .Time {},_fad ;};_bbbg :=new (_bb .Float );_bbbg .SetUint64 (uint64 (24*_bd .Hour ));
_dbeb .Mul (_dbeb ,_bbbg );_gbffc ,_ :=_dbeb .Uint64 ();_dgbde :=_cegg .Add (_bd .Duration (_gbffc ));return _bdfge (_dgbde ),nil ;};func _gddg (_aaafd [][]Result ,_dfaff int )[][]Result {_bgde :=[][]Result {};for _bbdb :=range _aaafd {if _bbdb ==0{continue ;
};_aaad :=[]Result {};for _ebagd :=range _aaafd {if _ebagd ==_dfaff {continue ;};_aaad =append (_aaad ,_aaafd [_bbdb ][_ebagd ]);};_bgde =append (_bgde ,_aaad );};return _bgde ;};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");
};_gcab ,_egbbe ,_ddaf :=_gcfe (args );if _ddaf .Type ==ResultTypeError {return _ddaf ;};return MakeNumberResult (_bdbg (_gcab )/_egbbe );};

// IsDBCS returns false for the invalid reference context.
func (_dfad *ivr )IsDBCS ()bool {return false };func (_gecde Result )String ()string {return _gecde .Value ()};func _egbe (_efc ,_bbbb ,_deea ,_fgd int )int {if !_aee (_fgd ){return _deea ;};_ebe :=_deea ;_feaf :=_ffe (_efc ,_bbbb );if _ebe > 30||_deea >=_feaf ||_ebe >=_feaf {_ebe =30;
};return _ebe ;};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_eedc :=args [0].AsString ();if _eedc .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};return ctx .Cell (_eedc .ValueString ,ev );};

// Eval evaluates and returns the result of an error expression.
func (_eed Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_eed ._dggd )};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_beda :=args [0].AsNumber ();if _beda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};var _cgca float64 ;_dgcc :=args [1].AsNumber ();if _dgcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cgca =_dgcc .ValueNumber ;if _cgca < 0&&_beda .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");
};_edfee :=_beda .ValueNumber ;_edfee ,_fbddb :=_cd .Modf (_edfee /_cgca );if _fbddb !=0{if _beda .ValueNumber < 0&&_fbddb < 0{_edfee --;};};return MakeNumberResult (_edfee *_cgca );};func _febb (_bgfe ,_afa float64 ,_cda ,_ebc int )float64 {_eec :=_dcbd (_bgfe );
_ebcg :=_dcbd (_afa );_gcca :=_bgg (_eec ,_ebcg ,_cda );return _fcd (_eec ,_gcca ,_ebc );};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _gfaeb (args ,true )};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );
};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_agda :=args [0];switch _agda .Type {case ResultTypeEmpty :return MakeNumberResult (1);
case ResultTypeNumber :_caae :=_dcbd (_agda .ValueNumber );return MakeNumberResult (float64 (_caae .Month ()));case ResultTypeString :_fdcd :=_cg .ToLower (_agda .ValueString );if !_gbgd (_fdcd ){_ ,_ ,_ ,_ ,_gdfd ,_gea :=_ecd (_fdcd );if _gea .Type ==ResultTypeError {_gea .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";
return _gea ;};if _gdfd {return MakeNumberResult (1);};};_ ,_fgbc ,_ ,_ ,_ecg :=_eba (_fdcd );if _ecg .Type ==ResultTypeError {return _ecg ;};return MakeNumberResult (float64 (_fgbc ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");
};};func _egef (_gagcee ,_ggfc float64 )float64 {_gagcee =_cd .Trunc (_gagcee );_ggfc =_cd .Trunc (_ggfc );if _gagcee ==0&&_ggfc ==0{return 0;};return _gagcee *_ggfc /_bedb (_gagcee ,_ggfc );};func _ddgge (_dcdg Result )*criteriaParsed {_dfefd :=_dcdg .Type ==ResultTypeNumber ;
_cfce :=_dcdg .ValueNumber ;_bdcgg :=_cg .ToLower (_dcdg .ValueString );_cfcacd :=_gecdd (_bdcgg );return &criteriaParsed {_dfefd ,_cfce ,_bdcgg ,_cfcacd };};func (_bcb *evCache )GetFromCache (key string )(Result ,bool ){_bcb ._cad .Lock ();_bdc ,_afd :=_bcb ._abc [key ];
_bcb ._cad .Unlock ();return _bdc ,_afd ;};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_fbab :name ,_bfaa :args };};func _egdfb (_aacb []Result ,_febcb bool )Result {_aaea :="\u004d\u0041\u0058";if _febcb {_aaea ="\u004d\u0041\u0058\u0041";};if len (_aacb )==0{return MakeErrorResult (_aaea +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gedag :=-_cd .MaxFloat64 ;for _ ,_fdffa :=range _aacb {switch _fdffa .Type {case ResultTypeNumber :if (_febcb ||!_fdffa .IsBoolean )&&_fdffa .ValueNumber > _gedag {_gedag =_fdffa .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_fgaf :=_egdfb (_fdffa .ListValues (),_febcb );
if _fgaf .ValueNumber > _gedag {_gedag =_fgaf .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_acdc :=0.0;if _febcb {_acdc =_fdffa .AsNumber ().ValueNumber ;};if _acdc > _gedag {_gedag =_acdc ;};default:_cgg .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_aaea +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fdffa .Type );
};};if _gedag ==-_cd .MaxFloat64 {_gedag =0;};return MakeNumberResult (_gedag );};

// LastRow returns 0 for the invalid reference context.
func (_fabad *ivr )LastRow (colFrom string )int {return 0};type parsedSearchObject struct{_fefe string ;_afdg string ;_bdgb int ;};

// BinOpType is the binary operation operator type
//
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_bc ,_gfa :=_ac .ParseBool (v );if _gfa !=nil {_cgg .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_gfa );
};return Bool {_cgab :_bc };};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_ggff :=len (args );if _ggff < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _ggff > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_gdag :=args [0];_cbdg :=args [1];if _cbdg .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_dbfaf :=args [2].AsNumber ();if _dbfaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gdee :=false ;if _ggff ==4&&args [3].Type !=ResultTypeEmpty {_edbd :=args [3].AsNumber ();if _edbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _edbd .ValueNumber ==0{_gdee =true ;};};_egba :=int (_dbfaf .ValueNumber )-1;_febc :=-1;_dfea :=false ;_gfcc :for _facd ,_aecde :=range _cbdg .ValueArray {if len (_aecde )==0{continue ;};_bbfg :=_aecde [0];switch _bcage (_bbfg ,_gdag ,false ,_gdee ){case _cadca :_febc =_facd ;
case _aefd :_febc =_facd ;_dfea =true ;break _gfcc ;};};if _febc ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_badce :=_cbdg .ValueArray [_febc ];
if _egba < 0||_egba >=len (_badce ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _dfea ||!_gdee {return _badce [_egba ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_dffc :=args [0];if _dffc .Type !=ResultTypeArray &&_dffc .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_gaag :=_dffc .ValueArray ;if len (_gaag )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};return MakeNumberResult (float64 (len (_gaag )));};

// IsBool returns false for the invalid reference context.
func (_edde *ivr )IsBool (cellRef string )bool {return false };

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ddeaf :=args [0].Ref ;if _ddeaf .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .Cell (_ddeaf .Value ,ev ).IsBoolean );};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_agdg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccaa :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gbga :=args [2].ValueNumber ;if _gbga ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult ((_agdg -_ccaa )/_gbga );};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};var _eagce []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


// Negate is a negate expression like -A1.
type Negate struct{_dbfbe Expression };

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_cbbdb :pfx ,_dcee :exp }};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type !=ResultTypeString );};func _gbgg (_aae []Result ,_gcf string )(*couponArgs ,Result ){_ddcf :=len (_aae );if _ddcf !=3&&_ddcf !=4{return nil ,MakeErrorResult (_gcf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fbf ,_ebde ,_eaab :=_bbd (_aae [0],_aae [1],_gcf );if _eaab .Type ==ResultTypeError {return nil ,_eaab ;};if _aae [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gcf +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbe :=_aae [2].ValueNumber ;if !_cbae (_fbe ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_gcf );};_abcf :=0;if _ddcf ==4&&_aae [3].Type !=ResultTypeEmpty {if _aae [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gcf +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_abcf =int (_aae [3].ValueNumber );if !_fgcgb (_abcf ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_gcf );
};};return &couponArgs {_fbf ,_ebde ,int (_fbe ),_abcf },_aaa ;};var _efdb =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// ResultType is the type of the result
//
//go:generate stringer -type=ResultType
type ResultType byte ;

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cee :=args [0];switch _cee .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_fdc :=_dcbd (_cee .ValueNumber );return MakeNumberResult (float64 (_fdc .Day ()));case ResultTypeString :_age :=_cg .ToLower (_cee .ValueString );if !_gbgd (_age ){_ ,_ ,_ ,_ ,_afc ,_aeg :=_ecd (_age );if _aeg .Type ==ResultTypeError {_aeg .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";
return _aeg ;};if _afc {return MakeNumberResult (0);};};_ ,_ ,_gag ,_ ,_dgb :=_eba (_age );if _dgb .Type ==ResultTypeError {return _dgb ;};return MakeNumberResult (float64 (_gag ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");
};};func _adad (_cfeeg Result ,_gbgfa int )[]Result {_dfcea :=[]Result {};switch _cfeeg .Type {case ResultTypeList :_gdagd :=_cfeeg .ValueList ;_dadb :=len (_gdagd );for _fggde :=0;_fggde < _gbgfa ;_fggde ++{if _fggde < _dadb {_dfcea =append (_dfcea ,_gdagd [_fggde ]);
}else {_dfcea =append (_dfcea ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _cedb :=0;_cedb < _gbgfa ;_cedb ++{_dfcea =append (_dfcea ,_cfeeg );};};return _dfcea ;};func _dbcf (_ceaf ,_bgfg ,_dfce int )int {if _ceaf > _bgfg {return 0;
};if _aee (_dfce ){return (_bgfg -_ceaf +1)*360;};_caf :=0;for _acg :=_ceaf ;_acg <=_bgfg ;_acg ++{_addf :=365;if _badc (_acg ){_addf =366;};_caf +=_addf ;};return _caf ;};func _dbfff (_ebgd []Result )Result {_eeff :=_ebgd [0].ValueArray ;if len (_ebgd )==1{_ccda :=[][]Result {};
for _ ,_dbgc :=range _eeff {_ccda =append (_ccda ,_bfbf ([]Result {MakeListResult (_dbgc )}).ValueList );};return MakeArrayResult (_ccda );}else if len (_ebgd )==2{_cceb :=len (_eeff );_beac :=len (_eeff [0]);_adge :=_eebag (_ebgd [1],_cceb ,_beac );_edfd :=len (_adge );
_decfc :=[][]Result {};var _agef []Result ;for _edcb ,_acff :=range _eeff {if _edcb < _edfd {_agef =_adge [_edcb ];}else {_agef =_adad (MakeErrorResultType (ErrorTypeNA ,""),_beac );};_decfc =append (_decfc ,_bfbf ([]Result {MakeListResult (_acff ),MakeListResult (_agef )}).ValueList );
};return MakeArrayResult (_decfc );}else if len (_ebgd )==3{_eacf :=len (_eeff );_egbaf :=len (_eeff [0]);_aece :=_eebag (_ebgd [1],_eacf ,_egbaf );_dgbg :=_eebag (_ebgd [2],_eacf ,_egbaf );_dcab :=len (_aece );_aaac :=len (_dgbg );_beag :=[][]Result {};
var _bgfge ,_fedf []Result ;for _gbdg ,_agba :=range _eeff {if _gbdg < _dcab {_bgfge =_aece [_gbdg ];}else {_bgfge =_adad (MakeErrorResultType (ErrorTypeNA ,""),_egbaf );};if _gbdg < _aaac {_fedf =_dgbg [_gbdg ];}else {_fedf =_adad (MakeErrorResultType (ErrorTypeNA ,""),_egbaf );
};_beag =append (_beag ,_bfbf ([]Result {MakeListResult (_agba ),MakeListResult (_bgfge ),MakeListResult (_fedf )}).ValueList );};return MakeArrayResult (_beag );};return MakeErrorResultType (ErrorTypeValue ,"");};func (_gdced *Lexer )Next ()*node {_gdced ._cgcd .Lock ();
defer _gdced ._cgcd .Unlock ();if len (_gdced ._aedee )> 0{_gcbaf :=_gdced ._aedee [0];_gdced ._aedee =_gdced ._aedee [1:];return _gcbaf ;};return _gdced .nextRaw ();};const _egfbg =57360;

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_afae ,_aebb :=_cfde ("\u0046\u0049\u004e\u0044",args );if _aebb .Type !=ResultTypeEmpty {return _aebb ;};_dafd :=_afae ._fefe ;if _dafd ==""{return MakeNumberResult (1.0);};_facdd :=_afae ._afdg ;_fbfdf :=_afae ._bdgb ;
_fedgd :=1;for _gafef :=range _facdd {if _fedgd < _fbfdf {_fedgd ++;continue ;};_bdag :=_cg .Index (_facdd [_gafef :],_dafd );if _bdag ==0{return MakeNumberResult (float64 (_fedgd ));};_fedgd ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bdaa :=args [0].AsNumber ();if _bdaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acfe :=0;if len (args )> 1{_fbfa :=args [1];if _fbfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_acfe =int (_fbfa .ValueNumber );if _acfe < 0{_acfe =0;}else if _acfe > 4{_acfe =4;};};_gcgc :=_ecec ;switch _acfe {case 1:_gcgc =_dbde ;case 2:_gcgc =_efdb ;case 3:_gcgc =_cgbed ;case 4:_gcgc =_dbbb ;};_gbdgb :=_cd .Trunc (_bdaa .ValueNumber );_cfaf :=_fg .Buffer {};
for _ ,_gccc :=range _gcgc {for _gbdgb >=_gccc ._dgag {_cfaf .WriteString (_gccc ._bcede );_gbdgb -=_gccc ._dgag ;};};return MakeStringResult (_cfaf .String ());};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_cadfc ,_bdfbe ,_eedbb :=_cbfe (from ,to );if _eedbb !=nil {_cgg .Log .Debug (_eedbb .Error ());return NewError (_eedbb .Error ());};return PrefixRangeExpr {_aafc :pfx ,_dedc :_cadfc ,_bdcec :_bdfbe };
};

// GetLocked returns FALSE for the invalid reference context.
func (_dgac *ivr )GetLocked (cellRef string )bool {return false };

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fedfc :=args [0].AsNumber ();if _fedfc .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};if _fedfc .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};return MakeNumberResult (_bdbg (_fedfc .ValueNumber ));};func init (){_dba ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );
RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );
RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );
RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gcabg :=args [0].AsString ();if _gcabg .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cedda :=_fg .Buffer {};_gdgfg :=false ;_ddfb :=false ;_efffg :=0;for _ ,_gaca :=range _gcabg .ValueString {_dgfe :=_gaca ==' ';if _dgfe {if !_gdgfg {continue ;};if !_ddfb {_efffg ++;_cedda .WriteRune (_gaca );};}else {_efffg =0;_gdgfg =true ;_cedda .WriteRune (_gaca );
};_ddfb =_dgfe ;};_cedda .Truncate (_cedda .Len ()-_efffg );return MakeStringResult (_cedda .String ());};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_acee ,_bdce ,_efae :=_bbd (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _efae .Type ==ResultTypeError {return _efae ;};_bdeg ,_efae :=_ffeg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _efae .Type ==ResultTypeError {return _efae ;};if _bdeg >=_acee {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};_cbgd :=args [3];if _cbgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_acbc :=_cbgd .ValueNumber ;if _acbc < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_gfae :=args [4];if _gfae .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gbaee :=_gfae .ValueNumber ;if _gbaee < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_bddf :=args [5];
if _bddf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_efff :=_bddf .ValueNumber ;if _efff < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_cegbg :=args [6];
if _cegbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bgbgf :=float64 (int (_cegbg .ValueNumber ));if !_cbae (_bgbgf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_badbg :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_abcff :=args [7];
if _abcff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_badbg =int (_abcff .ValueNumber );if !_fgcgb (_badbg ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");
};};_egcc ,_efae :=_egdg (_bdeg ,_bdce ,_badbg );if _efae .Type ==ResultTypeError {return _efae ;};_egcc *=_bgbgf ;_cgcfc ,_efae :=_egdg (_acee ,_bdce ,_badbg );if _efae .Type ==ResultTypeError {return _efae ;};_cgcfc *=_bgbgf ;_beaa ,_efae :=_egdg (_bdeg ,_acee ,_badbg );
if _efae .Type ==ResultTypeError {return _efae ;};_beaa *=_bgbgf ;_bafe :=_efff +_egcc *100*_acbc /_bgbgf ;_bafe /=_cgcfc *_gbaee /_bgbgf +1;_bafe -=_beaa *100*_acbc /_bgbgf ;return MakeNumberResult (_bafe );};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_bbgge :s }};func _gfcf (_dcfd Result )[][]Result {switch _dcfd .Type {case ResultTypeArray :return _dcfd .ValueArray ;case ResultTypeList :return [][]Result {_dcfd .ValueList };default:return [][]Result {};
};};type yySymType struct{_caafa int ;_gbcef *node ;_gcef Expression ;_fccgd []Expression ;_begf [][]Expression ;};type parsedReplaceObject struct{_dgccd string ;_dfgbg int ;_bdgc int ;_fbeeb string ;};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_deace PrefixVerticalRange )Update (q *_be .UpdateQuery )Expression {if q .UpdateType ==_be .UpdateActionRemoveColumn {_ffbdf :=_deace ;_fbfg :=_deace ._cacbb .String ();if _fbfg ==q .SheetToUpdate {_acbbd :=q .ColumnIdx ;_ffbdf ._eafdf =_ff (_deace ._eafdf ,_acbbd );
_ffbdf ._bcdae =_ff (_deace ._bcdae ,_acbbd );};return _ffbdf ;};return _deace ;};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_aagg :=args [0].ValueNumber ;_acae :=args [1].ValueNumber ;_ebbg :=args [2].ValueNumber ;_fce :=_acd (_aagg ,_acae ,_ebbg );if _fce >=0{return MakeNumberResult (_fce );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_adbgd :=ctx .GetEpoch ();_fcdge ,_ebfe :=_aefad (args [0].Value (),_adbgd );if _ebfe !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_ccac :=_fcdge .Year ();return MakeBoolResult (_badc (_ccac ));};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_fggd :=len (args );if _fggd < 3||_fggd > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bfcg :=args [0].ValueNumber ;if _bfcg !=float64 (int (_bfcg )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_faeg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_bbag :=args [2].ValueNumber ;_degd :=0.0;if _fggd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_degd =args [3].ValueNumber ;};_gffc :=0.0;if _fggd >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gffc =args [4].ValueNumber ;if _gffc !=0{_gffc =1;};};_bcba :=0.1;if _fggd >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bcba =args [5].ValueNumber ;};_efbfa :=100;_cbcg :=0;_aggfe :=false ;_cabga :=1e-6;_cadcb :=_bcba ;for _cbcg < _efbfa &&!_aggfe {_efeg :=_cd .Pow (_cadcb +1,_bfcg );_bddc :=_cd .Pow (_cadcb +1,_bfcg -1);_egac :=_cadcb *_gffc +1;_aecf :=_faeg *(_efeg -1);
_cfca :=_degd +_efeg *_bbag +_aecf *_egac /_cadcb ;_gegb :=_bfcg *_bddc *_bbag -_aecf *_egac /_cd .Pow (_cadcb ,2);_befc :=(_bfcg *_faeg *_bddc *_egac +_aecf *_gffc )/_cadcb ;_efecc :=_cfca /(_gegb +_befc );if _cd .Abs (_efecc )< _cabga {_aggfe =true ;
};_cbcg ++;_cadcb -=_efecc ;};return MakeNumberResult (_cadcb );};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_bccga ,_bdad :=_gbgg (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _bdad .Type ==ResultTypeError {return _bdad ;};_febe :=_dcbd (_bccga ._gab );_gead :=_dcbd (_bccga ._cbge );_dgbc :=_bccga ._fddd ;_bgbg :=_bgg (_febe ,_gead ,_dgbc );
_gbda ,_bffb ,_cbga :=_bgbg .Date ();return MakeNumberResult (_caca (_gbda ,int (_bffb ),_cbga ));};const _fbfe =57362;

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_afaaa ,_dgf ,_fecg :=_agbb (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _fecg .Type ==ResultTypeError {return _fecg ;};if _dgf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _afaaa ==0{return MakeNumberResult (0);};_daf :=_afaaa < 0;if _daf {_afaaa =-_afaaa ;};_bgfd :=float64 (int (_afaaa ));_bcgb :=args [0].Value ();_eddf :=_cg .Split (_bcgb ,"\u002e");_agcd :=0.0;if len (_eddf )> 1{var _ggcd error ;_fbff :=_eddf [1];
_agcd ,_ggcd =_ac .ParseFloat (_fbff ,64);if _ggcd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");
};_ddfa :=float64 (len (_fbff ));_agcd /=_cd .Pow (10,_ddfa );};_gbef :=_agcd *_dgf /_cd .Pow (10,float64 (int (_cd .Log10 (_dgf )))+1)+_bgfd ;if _daf {_gbef =-_gbef ;};return MakeNumberResult (_gbef );};const _ddf ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";
var _acced =[...]uint8 {0,20,37,60,78,96};const _badcd =57363;

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_cebc Context ,_bdef Evaluator ,_ccceg []Result )Result ;

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_cecg :=_cg .ToLower (args [0].ValueString );if !_gbgd (_cecg ){_ ,_ ,_ ,_ ,_fcb ,_ddgf :=_ecd (_cecg );if _ddgf .Type ==ResultTypeError {_ddgf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";
return _ddgf ;};if _fcb {return MakeNumberResult (0);};};_aaaf ,_bega ,_bae ,_ ,_cabg :=_eba (_cecg );if _cabg .Type ==ResultTypeError {return _cabg ;};return MakeNumberResult (_caca (_aaaf ,_bega ,_bae ));};func _ddc (_ecea ,_egaf _bd .Time )bool {_dfgc :=_ecea .Unix ();
_ecgf :=_egaf .Unix ();_aeb :=_ecea .Year ();_fdda :=_gggg (_aeb ,_bd .March ,1);if _badc (_aeb )&&_dfgc < _fdda &&_ecgf >=_fdda {return true ;};var _ggc =_egaf .Year ();var _bee =_gggg (_ggc ,_bd .March ,1);return (_badc (_ggc )&&_ecgf >=_bee &&_dfgc < _bee );
};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};

// Eval evaluates and returns the result of an empty expression.
func (_ddg EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};func _bcggf (_ebcgg int )string {if _ebcgg >=1&&_ebcgg -1< len (_adbeb ){if _adbeb [_ebcgg -1]!=""{return _adbeb [_ebcgg -1];
};};return _c .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_ebcgg );};const _fcacd =57377;

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aafa :=args [0].ValueNumber ;if _aafa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fcgf :=args [1].ValueNumber ;if _fcgf <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dggc :=args [2].ValueNumber ;if _dggc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");
};return MakeNumberResult ((_cd .Log10 (_dggc )-_cd .Log10 (_fcgf ))/_cd .Log10 (1+_aafa ));};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_ebea :=len (args );if _ebea < 5||_ebea > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dfdac :=args [0].ValueNumber ;if _dfdac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dceg :=args [1].ValueNumber ;if _dceg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ccbca :=args [2].ValueNumber ;if _ccbca ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _ccbca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfgee :=args [3].ValueNumber ;if _cfgee < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_beef :=args [4].ValueNumber ;if _cfgee > _beef {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");
};if _beef > _ccbca {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_gagce :=2.0;if _ebea > 5{if args [5].Type ==ResultTypeEmpty {_gagce =0.0;
}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gagce =args [5].ValueNumber ;if _gagce < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};};_aacc :=false ;if _ebea > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_aacc =args [6].ValueNumber !=0;};_fcf :=0.0;_fdag :=_cd .Floor (_cfgee );_dcc :=_cd .Ceil (_beef );if _aacc {for _ffad :=_fdag +1;_ffad <=_dcc ;_ffad ++{_bcbga :=_cbcd (_dfdac ,_dceg ,_ccbca ,_ffad ,_gagce );if _ffad ==_fdag +1{_bcbga *=_cd .Min (_beef ,_fdag +1)-_cfgee ;
}else if _ffad ==_dcc {_bcbga *=_beef +1-_dcc ;};_fcf +=_bcbga ;};}else {_fafg :=_ccbca ;var _ccbb float64 ;if !_cfcca (_cfgee ,_cd .Floor (_cfgee )){if _gagce ==1{_acgg :=_ccbca /2;if _cfgee > _acgg ||_cfcca (_cfgee ,_acgg ){_ccbb =_cfgee -_acgg ;_cfgee =_acgg ;
_beef -=_ccbb ;_fafg ++;};};};if _gagce !=0{_dfdac -=_cegd (_dfdac ,_dceg ,_ccbca ,_fafg ,_cfgee ,_gagce );};_fcf =_cegd (_dfdac ,_dceg ,_ccbca ,_ccbca -_cfgee ,_beef -_cfgee ,_gagce );};return MakeNumberResult (_fcf );};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};


// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_dgdee :=_eegg (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _dgdee .Type !=ResultTypeEmpty {return _dgdee ;};_bcaee :=_eedca (args [1:]);_dffab :=0.0;_dgbcd :=_gfcf (args [0]);for _ ,_egcd :=range _bcaee {_dffab +=_dgbcd [_egcd ._cbfc ][_egcd ._bcfgb ].ValueNumber ;
};return MakeNumberResult (float64 (_dffab ));};var _cbbg string =string ([]byte {92});func _agge (_eabd ,_cggdg []string )[]string {for _ ,_dafc :=range _cggdg {_eabd =append (_eabd ,_dafc );};return _eabd ;};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_affe :=_cg .Split (v ,"\u003a");if len (_affe )!=2{return nil ;};_cdbcf ,_ :=_ac .Atoi (_affe [0]);_efee ,_ :=_ac .Atoi (_affe [1]);if _cdbcf > _efee {_cdbcf ,_efee =_efee ,_cdbcf ;};
return PrefixHorizontalRange {_geebd :pfx ,_agefc :_cdbcf ,_ffde :_efee };};func _badc (_cgga int )bool {if _cgga ==_cgga /400*400{return true ;};if _cgga ==_cgga /100*100{return false ;};return _cgga ==_cgga /4*4;};const _dfega =57359;type couponArgs struct{_gab float64 ;
_cbge float64 ;_fddd int ;_aebe int ;};func _ffe (_bcce ,_cefa int )int {if _cefa ==2&&_badc (_bcce ){return 29;}else {return _bgd [_cefa -1];};};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gdab :=args [0].AsNumber ();
if _gdab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eagb :=_cd .Signbit (_gdab .ValueNumber );
_fgfe ,_cbfdd :=_cd .Modf (_gdab .ValueNumber /2);_aebfe :=_fgfe *2;if _cbfdd !=0{if !_eagb {_aebfe +=2;}else {_aebfe -=2;};};return MakeNumberResult (_aebfe );};func _gfed (_cfgfb float64 ,_afecg *criteriaRegex )bool {_ccad ,_gcfc :=_ac .ParseFloat (_afecg ._ffaa ,64);
if _gcfc !=nil {return false ;};switch _afecg ._decfd {case _bfea :return _cfgfb ==_ccad ;case _dcfaf :return _cfgfb <=_ccad ;case _dccg :return _cfgfb >=_ccad ;case _affc :return _cfgfb < _ccad ;case _gade :return _cfgfb > _ccad ;};return false ;};func (_bffbf ReferenceType )String ()string {if _bffbf >=ReferenceType (len (_acced )-1){return _c .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_bffbf );
};return _eggea [_acced [_bffbf ]:_acced [_bffbf +1]];};func _egdg (_fagf ,_faad float64 ,_bcg int )(float64 ,Result ){_becb ,_gge :=_dcbd (_fagf ),_dcbd (_faad );_gff :=_becb .Unix ();_ccbc :=_gge .Unix ();if _gff ==_ccbc {return 0,_aaa ;};_fbae ,_bced ,_fea :=_becb .Date ();
_cecf ,_bcde ,_aeae :=_gge .Date ();_cgdf ,_aaf :=int (_bced ),int (_bcde );var _fgab ,_ced float64 ;switch _bcg {case 0:if _fea ==31{_fea --;};if _fea ==30&&_aeae ==31{_aeae --;}else if _dad :=_badc (_fbae );_cgdf ==2&&((_dad &&_fea ==29)||(!_dad &&_fea ==28)){_fea =30;
if _abfa :=_badc (_cecf );_aaf ==2&&((_abfa &&_aeae ==29)||(!_abfa &&_aeae ==28)){_aeae =30;};};_fgab =float64 ((_cecf -_fbae )*360+(_aaf -_cgdf )*30+(_aeae -_fea ));_ced =360;case 1:_fgab =_faad -_fagf ;_ddga :=_fbae !=_cecf ;if _ddga &&(_cecf !=_fbae +1||_cgdf < _aaf ||(_cgdf ==_aaf &&_fea < _aeae )){_dab :=0;
for _accbb :=_fbae ;_accbb <=_cecf ;_accbb ++{_dab +=_eeg (_accbb ,1);};_ced =float64 (_dab )/float64 (_cecf -_fbae +1);}else {if !_ddga &&_badc (_fbae ){_ced =366;}else {if _ddga &&((_badc (_fbae )&&(_cgdf < 2||(_cgdf ==2&&_fea <=29)))||(_badc (_cecf )&&(_aaf > 2||(_aaf ==2&&_aeae ==29)))){_ced =366;
}else {_ced =365;};};};case 2:_fgab =_faad -_fagf ;_ced =360;case 3:_fgab =_faad -_fagf ;_ced =365;case 4:if _fea ==31{_fea --;};if _aeae ==31{_aeae --;};_fgab =float64 ((_cecf -_fbae )*360+(_aaf -_cgdf )*30+(_aeae -_fea ));_ced =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");
};return _fgab /_ced ,_aaa ;};func _gggg (_gfe int ,_gdg _bd .Month ,_gede int )int64 {if _gfe ==1900&&int (_gdg )<=2{_gede --;};_dbc :=_bd .Date (_gfe ,_gdg ,_gede ,0,0,0,0,_bd .UTC );return _dbc .Unix ();};var _bgec =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};


// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_cccd :=len (args );if _cccd !=4&&_cccd !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_bacb ,_ddcd ,_cabc :=_bbd (args [0],args [1],"\u0044\u0049\u0053\u0043");if _cabc .Type ==ResultTypeError {return _cabc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ecbf :=args [2].ValueNumber ;if _ecbf <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbfda :=args [3].ValueNumber ;if _cbfda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdd :=0;if _cccd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdd =int (args [4].ValueNumber );if !_fgcgb (_gdd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");
};};_cfbd ,_cabc :=_egdg (_bacb ,_ddcd ,_gdd );if _cabc .Type ==ResultTypeError {return _cabc ;};return MakeNumberResult ((_cbfda -_ecbf )/_cbfda /_cfbd );};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;
BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);type Reference struct{Type ReferenceType ;Value string ;};

// String returns a string representation of a horizontal range with prefix.
func (_becf PrefixHorizontalRange )String ()string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_becf ._geebd .String (),_becf ._agefc ,_becf ._ffde );};

// Reference returns an invalid reference for String.
func (_geadb String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _gadb (_ccca ,_fafb ,_bacg ,_bcbg ,_eaf ,_daef float64 ,_fecgb int )(float64 ,Result ){_decb :=int (_daef );_gcdf :=_ecfd (_ccca ,_fafb ,_decb ,_fecgb );
_afba :=_febb (_ccca ,_fafb ,_decb ,_fecgb )/_gcdf ;_cdgc ,_dfaf :=_edgg (_ccca ,_fafb ,_decb ,_fecgb );if _dfaf .Type ==ResultTypeError {return 0,_dfaf ;};_bbf :=_gdfc (_ccca ,_fafb ,_decb ,_fecgb );_fbg :=_eaf /_cd .Pow (1+_bcbg /_daef ,_cdgc -1+_afba );
_fbg -=100*_bacg /_daef *_bbf /_gcdf ;_ggbd :=100*_bacg /_daef ;_caea :=1+_bcbg /_daef ;for _fcgg :=0.0;_fcgg < _cdgc ;_fcgg ++{_fbg +=_ggbd /_cd .Pow (_caea ,_fcgg +_afba );};return _fbg ,MakeEmptyResult ();};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_dfgcf :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_deedf :=args [2].ValueNumber +1;if _deedf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_baeg :=_gfcf (args [0]);_bdb :=float64 (len (_baeg ));_geg ,_decff :=0.0,0.0;_dbca ,_ecfa :=1.0,1.0;_dbbf ,_abbf :=false ,false ;for _ ,_edda :=range _baeg {for _ ,_aaee :=range _edda {if _aaee .Type ==ResultTypeNumber &&!_aaee .IsBoolean {_fcef :=_aaee .ValueNumber ;
if _fcef ==0{continue ;}else {if _fcef > 0{_dbbf =true ;_decff +=_aaee .ValueNumber *_ecfa ;}else {_abbf =true ;_geg +=_aaee .ValueNumber *_dbca ;};_dbca /=_dfgcf ;_ecfa /=_deedf ;};};};};if !_dbbf ||!_abbf {return MakeErrorResultType (ErrorTypeDivideByZero ,"");
};_fdgf :=-_decff /_geg ;_fdgf *=_cd .Pow (_deedf ,_bdb -1);_fdgf =_cd .Pow (_fdgf ,1/(_bdb -1));return MakeNumberResult (_fdgf -1);};var _bcd =[]*_fe .Regexp {};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};_ccag :=args [0];if _ccag .Type !=ResultTypeArray &&_ccag .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_dfebb :=_ddgge (args [1]);_cdfc :=0;for _ ,_aaafc :=range _gfcf (_ccag ){for _ ,_bege :=range _aaafc {if _aaedf (_bege ,_dfebb ){_cdfc ++;};};};return MakeNumberResult (float64 (_cdfc ));};

// Update updates references in the Range after removing a row/column.
func (_dfec Range )Update (q *_be .UpdateQuery )Expression {_bdgbg :=_dfec ;if q .UpdateCurrentSheet {_bdgbg ._edegf =_dfec ._edegf .Update (q );_bdgbg ._acfgb =_dfec ._acfgb .Update (q );};return _bdgbg ;};

// String returns a string representation of CellRef.
func (_bdd CellRef )String ()string {return _bdd ._dfe };

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_adga :=args [0].AsString ();if _adga .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_cgef :=args [1].AsNumber ();if _cgef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _cgef .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");
};if _cgef .ValueNumber ==0{return MakeStringResult ("");};_bebec :=_fg .Buffer {};for _ecfdg :=0;_ecfdg < int (_cgef .ValueNumber );_ecfdg ++{_bebec .WriteString (_adga .ValueString );};return MakeStringResult (_bebec .String ());};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_ffaf :=len (args );if _ffaf !=6&&_ffaf !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_gceb ,_gdgg ,_aceec :=_bbd (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _aceec .Type ==ResultTypeError {return _aceec ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_edga :=args [2].ValueNumber ;if _edga < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_gbdd :=args [3].ValueNumber ;if _gbdd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfce :=args [4].ValueNumber ;if _gfce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bfdfd :=args [5];if _bfdfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bdda :=_bfdfd .ValueNumber ;if !_cbae (_bdda ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gcbb :=0;if _ffaf ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcbb =int (args [6].ValueNumber );if !_fgcgb (_gcbb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");
};};_cgde ,_aceec :=_gadb (_gceb ,_gdgg ,_edga ,_gbdd ,_gfce ,_bdda ,_gcbb );if _aceec .Type ==ResultTypeError {return _aceec ;};return MakeNumberResult (_cgde );};func _ccff (_gaafc []Result ,_aagc rmode )Result {if len (_gaafc )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_agcac :=_gaafc [0].AsNumber ();if _agcac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_afeg :=_gaafc [1].AsNumber ();if _afeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_edafg :=_afeg .ValueNumber ;_bbgd :=_agcac .ValueNumber ;_caaaa :=1.0;if _edafg > 0{_caaaa =_cd .Pow (1/10.0,_edafg );}else {_caaaa =_cd .Pow (10.0,-_edafg );};_bbgd ,_gdfbf :=_cd .Modf (_bbgd /_caaaa );switch _aagc {case _dbge :const _fgfge =0.499999999;
if _gdfbf >=_fgfge {_bbgd ++;}else if _gdfbf <=-_fgfge {_bbgd --;};case _cegff :case _ceee :if _gdfbf > 0{_bbgd ++;}else if _gdfbf < 0{_bbgd --;};};return MakeNumberResult (_bbgd *_caaaa );};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_ad *defEval )LastEvalIsRef ()bool {return _ad ._caaa };

// String returns a string representation for Bool.
func (_cefb Bool )String ()string {if _cefb ._cgab {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_bbe :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_bbe *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_edge :=_gfcf (args [1]);for _ ,_dddd :=range _edge {for _ ,_cbaec :=range _dddd {if _cbaec .Type !=ResultTypeNumber ||_cbaec .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");
};_bbe *=1.0+_cbaec .ValueNumber ;};};return MakeNumberResult (_bbe );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");
};};const _daag ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";
func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );
RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );
RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );
RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );
RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );
RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );
RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );
RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );
RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );
RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );
RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );
RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );
RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_defc :=args [0].AsNumber ();_gbea :=args [1].AsNumber ();_bedba :=args [2].AsNumber ();_eeab :=args [3].ListValues ();if _defc .Type !=ResultTypeNumber ||_gbea .Type !=ResultTypeNumber ||_bedba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_cbff :=float64 (0);for _bffc ,_cdcbf :=range _eeab {_cbff +=_cdcbf .ValueNumber *_cd .Pow (_defc .ValueNumber ,_gbea .ValueNumber +float64 (_bffc )*_bedba .ValueNumber );};return MakeNumberResult (_cbff );};const _fdcdg =57353;

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gbce :=args [0].Ref ;
if _gbce .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");
};_edbc ,_aadb :=_ba .ParseCellReference (_gbce .Value );if _aadb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gbce .Value );};return MakeNumberResult (float64 (_edbc .ColumnIdx +1));
};func _af (_cbd BinOpType ,_df []Result ,_gaa Result )Result {_fc :=[]Result {};switch _gaa .Type {case ResultTypeNumber :_aff :=_gaa .ValueNumber ;for _gcc :=range _df {_da :=_df [_gcc ].AsNumber ();if _da .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _cbd {case BinOpTypePlus :_fc =append (_fc ,MakeNumberResult (_da .ValueNumber +_aff ));case BinOpTypeMinus :_fc =append (_fc ,MakeNumberResult (_da .ValueNumber -_aff ));case BinOpTypeMult :_fc =append (_fc ,MakeNumberResult (_da .ValueNumber *_aff ));
case BinOpTypeDiv :if _aff ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fc =append (_fc ,MakeNumberResult (_da .ValueNumber /_aff ));case BinOpTypeExp :_fc =append (_fc ,MakeNumberResult (_cd .Pow (_da .ValueNumber ,_aff )));case BinOpTypeLT :_fc =append (_fc ,MakeBoolResult (_da .ValueNumber < _aff ));
case BinOpTypeGT :_fc =append (_fc ,MakeBoolResult (_da .ValueNumber > _aff ));case BinOpTypeEQ :_fc =append (_fc ,MakeBoolResult (_da .ValueNumber ==_aff ));case BinOpTypeLEQ :_fc =append (_fc ,MakeBoolResult (_da .ValueNumber <=_aff ));case BinOpTypeGEQ :_fc =append (_fc ,MakeBoolResult (_da .ValueNumber >=_aff ));
case BinOpTypeNE :_fc =append (_fc ,MakeBoolResult (_da .ValueNumber !=_aff ));default:return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_cbd ));
};};case ResultTypeString :_daa :=_gaa .ValueString ;for _cef :=range _df {_gf :=_df [_cef ].AsString ();if _gf .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _cbd {case BinOpTypeLT :_fc =append (_fc ,MakeBoolResult (_gf .ValueString < _daa ));case BinOpTypeGT :_fc =append (_fc ,MakeBoolResult (_gf .ValueString > _daa ));case BinOpTypeEQ :_fc =append (_fc ,MakeBoolResult (_gf .ValueString ==_daa ));
case BinOpTypeLEQ :_fc =append (_fc ,MakeBoolResult (_gf .ValueString <=_daa ));case BinOpTypeGEQ :_fc =append (_fc ,MakeBoolResult (_gf .ValueString >=_daa ));case BinOpTypeNE :_fc =append (_fc ,MakeBoolResult (_gf .ValueString !=_daa ));default:return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_cbd ));
};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");
};return MakeListResult (_fc );};const _fbcf =57351;const _agbad int =0;const _aebee ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";


// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_ddda :=len (args );if _ddda !=4&&_ddda !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_geaf ,_dgaa ,_acaeg :=_bbd (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _acaeg .Type ==ResultTypeError {return _acaeg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ffdc :=args [2].ValueNumber ;if _ffdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_bgdd :=args [3].ValueNumber ;if _bgdd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");
};_cdad :=0;if _ddda ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cdad =int (args [4].ValueNumber );if !_fgcgb (_cdad ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");
};};_afde ,_acaeg :=_egdg (_geaf ,_dgaa ,_cdad );if _acaeg .Type ==ResultTypeError {return _acaeg ;};return MakeNumberResult (_bgdd *(1-_ffdc *_afde ));};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_dcb string ,_ddd Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_bdfe string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_bd .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_dda int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_ea string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_aea string )string ;

// GetFormat returns if cell is protected.
GetLocked (_cfg string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_dfg string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_cac string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_dfef ,_cgfd int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_agfb string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_bfd string ,_gdb bool );

// NamedRange returns a named range.
NamedRange (_gb string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_ebd ,_baf uint32 );};var _ecec =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Update updates references in the Negate after removing a row/column.
func (_gdgdf Negate )Update (q *_be .UpdateQuery )Expression {return Negate {_dbfbe :_gdgdf ._dbfbe .Update (q )};};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_bbcda PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_ebcae :=_bbcda ._cacbb .Reference (ctx ,ev );switch _ebcae .Type {case ReferenceTypeSheet :if _bcaaa (_ebcae ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ebcae .Value ));
};_aade :=_bbcda .verticalRangeReference (_ebcae .Value );if _fffd ,_fdfc :=ev .GetFromCache (_aade );_fdfc {return _fffd ;};_gcaef :=ctx .Sheet (_ebcae .Value );_aabgc ,_bfgad :=_deeg (_gcaef ,_bbcda ._eafdf ,_bbcda ._bcdae );_agfgag :=_afeeb (_gcaef ,ev ,_aabgc ,_bfgad );
ev .SetCache (_aade ,_agfgag );return _agfgag ;default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ebcae .Type ));
};};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _ccff (args ,_dbge )};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_gfde ,_cfae :=_gcaf (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _cfae .Type ==ResultTypeError {return _cfae ;};_fabg :=_gfde ._bcff ;_cfb :=_gfde ._egca ;_gadde :=_gfde ._acgd ;_ffc :=_gfde ._gccb ;
_agcg :=_gfde ._cfefe ;_fgee :=_gfde ._ceccc ;if _fgee >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");
};_aagb :=_gfde ._aefe ;_abfad :=1.0/_fgee ;_adcf :=2.5;if _abfad < 3{_adcf =1;}else if _abfad < 5{_adcf =1.5;}else if _abfad <=6{_adcf =2;};_fgee *=_adcf ;_agdd ,_ebcb :=_egdg (_cfb ,_gadde ,_aagb );if _ebcb .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");
};_ddgg :=_aabf (_agdd *_fgee *_fabg );_fabg -=_ddgg ;_addd :=_fabg -_ffc ;for _abcfd :=0;_abcfd < _agcg ;_abcfd ++{_ddgg =_aabf (_fgee *_fabg );_addd -=_ddgg ;if _addd < 0{switch _agcg -_abcfd {case 0:case 1:return MakeNumberResult (_aabf (_fabg *0.5));
default:return MakeNumberResult (0);};};_fabg -=_ddgg ;};return MakeNumberResult (_ddgg );};func (_effg *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// LastColumn returns empty string for the invalid reference context.
func (_fccf *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_abdd :=_eegg (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _abdd .Type !=ResultTypeEmpty {return _abdd ;};_dggcb :=_eedca (args [1:]);_dcada :=-_cd .MaxFloat64 ;_acggc :=_gfcf (args [0]);for _ ,_effbe :=range _dggcb {_febg :=_acggc [_effbe ._cbfc ][_effbe ._bcfgb ].ValueNumber ;
if _dcada < _febg {_dcada =_febg ;};};if _dcada ==-_cd .MaxFloat64 {_dcada =0;};return MakeNumberResult (float64 (_dcada ));};type rmode byte ;func (_aeecg HorizontalRange )horizontalRangeReference ()string {return _c .Sprintf ("\u0025\u0064\u003a%\u0064",_aeecg ._efda ,_aeecg ._bgae );
};func _bec (_ca Result )bool {if _ca .Type ==ResultTypeString {return _ca .ValueString =="";};return _ca .ValueNumber ==0;};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_abfc :=len (args );if _abfc !=4&&_abfc !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_acca ,_egfe ,_cead :=_bbd (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _cead .Type ==ResultTypeError {return _cead ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdad :=args [2].ValueNumber ;if _gdad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_fdee :=args [3].ValueNumber ;if _fdee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aebc :=0;if _abfc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aebc =int (args [4].ValueNumber );if !_fgcgb (_aebc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");
};};_ccfc ,_cead :=_egdg (_acca ,_egfe ,_aebc );if _cead .Type ==ResultTypeError {return _cead ;};return MakeNumberResult (_gdad /(1-_fdee *_ccfc ));};const _cfaee =57373;

// CellRef is a reference to a single cell
type CellRef struct{_dfe string };func _gcge (){_cgebe =_fe .MustCompile ("\u005e\u0030\u002b\u0024");_ddce =_fe .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_gadc =_fe .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");
_cffb =_fe .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_fdgd =_fe .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");
_gdda =_fe .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_dag =_fe .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");
_eage =_fe .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_gfbc =_fe .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");
_bbdc =_fe .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");
_ggbf =_fe .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");
_fbed =_fe .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_cbbg +_cbbg +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_cbbg +_cbbg +"\u0029\u002b\u0059+\u0024");_dedd =_fe .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_cbbg +_cbbg +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_cbbg +_cbbg +"\u0029\u002b\u0059+\u0024");
_aeeb =_fe .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_dbbd =_fe .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");
};func _bfaae (_dbaec []Result )(bool ,Result ){for _ ,_daae :=range _dbaec {if _daae .Type ==ResultTypeError {return true ,_daae ;};};return false ,MakeEmptyResult ();};

// Update returns the same object as updating sheet references does not affect Bool.
func (_bbb Bool )Update (q *_be .UpdateQuery )Expression {return _bbb };

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_cg .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_ceadf :v };};func (_dccea *plex )Lex (lval *yySymType )int {_aceb =true ;_acac :=<-_dccea ._bagbf ;if _acac !=nil {lval ._gbcef =_acac ;return int (lval ._gbcef ._abga );
};return 0;};

// Eval evaluates and returns the result of the cell reference.
func (_eb CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_eb ._dfe ,ev )};func _bcaaa (_ceaa Reference ,_bdbd Context )bool {return _bdbd .Sheet (_ceaa .Value )==InvalidReferenceContext ;};type amorArgs struct{_bcff float64 ;_egca float64 ;
_acgd float64 ;_gccb float64 ;_cfefe int ;_ceccc float64 ;_aefe int ;};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_ebcag :=args [0].AsNumber ();if _ebcag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bdfcd :=_cd .Signbit (_ebcag .ValueNumber );_eebcd ,_geafa :=_cd .Modf ((_ebcag .ValueNumber -1)/2);_cdec :=_eebcd *2+1;if _geafa !=0{if !_bdfcd {_cdec +=2;}else {_cdec -=2;};};return MakeNumberResult (_cdec );};const (_aefd cmpResult =0;_cadca cmpResult =-1;
_afbf cmpResult =1;_addb cmpResult =2;);func _egace (_fgae string ,_gdce func (_egggdb float64 )float64 )Function {return func (_edgee []Result )Result {if len (_edgee )!=1{return MakeErrorResult (_fgae +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_dbfe :=_edgee [0].AsNumber ();switch _dbfe .Type {case ResultTypeNumber :_aaeb :=_gdce (_dbfe .ValueNumber );if _cd .IsNaN (_aaeb ){return MakeErrorResult (_fgae +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _cd .IsInf (_aaeb ,0){return MakeErrorResult (_fgae +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");
};if _aaeb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_fgae +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_aaeb );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_fgae +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _dbfe ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fgae ,_dbfe .Type ));
};};};func _gcaf (_abff []Result ,_adf string )(*amorArgs ,Result ){_afcd :=len (_abff );if _afcd !=6&&_afcd !=7{return nil ,MakeErrorResult (_adf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _abff [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_adf +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_agea :=_abff [0].ValueNumber ;
if _agea < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_adf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_ggaf ,_eff :=_ffeg (_abff [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_adf );if _eff .Type ==ResultTypeError {return nil ,_eff ;};_dec ,_eff :=_ffeg (_abff [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_adf );
if _eff .Type ==ResultTypeError {return nil ,_eff ;};if _dec < _ggaf {return nil ,MakeErrorResultType (ErrorTypeNum ,_adf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");
};if _abff [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_adf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cegb :=_abff [3].ValueNumber ;if _cegb < 0||_cegb > _agea {return nil ,MakeErrorResultType (ErrorTypeNum ,_adf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");
};if _abff [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_adf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dgdd :=int (_abff [4].ValueNumber );if _dgdd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_adf +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if _abff [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_adf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_daed :=_abff [5].ValueNumber ;if _daed < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_adf +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");
};_edbb :=0;if _afcd ==7&&_abff [6].Type !=ResultTypeEmpty {if _abff [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_adf +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_edbb =int (_abff [6].ValueNumber );if !_fgcgb (_edbb )||_edbb ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_adf );
};};return &amorArgs {_agea ,_ggaf ,_dec ,_cegb ,_dgdd ,_daed ,_edbb },_aaa ;};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_agfga :=args [0];_ddddg :=args [1];if _ddddg .Type !=ResultTypeArray &&_ddddg .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_ggee :=_abeg (_ddddg );_cbcce :=-1;for _eeaf ,_aceed :=range _ggee {if _bcage (_agfga ,_aceed ,false ,false )==_aefd {_cbcce =_eeaf ;};};if _cbcce ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};_bccgb :=_ggee ;if len (args )==3{_bccgb =_abeg (args [2]);};if _cbcce < 0||_cbcce >=len (_bccgb ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};return _bccgb [_cbcce ];};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};func _fcag (_eagfb _bd .Time )bool {return _bd .Now ().Sub (_eagfb )>=_fbcdd };

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_agfc [][]Expression };func _bbd (_dbad ,_cedd Result ,_ceb string )(float64 ,float64 ,Result ){_bdeb ,_eadd :=_ffeg (_dbad ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_ceb );if _eadd .Type ==ResultTypeError {return 0,0,_eadd ;
};_cgfdg ,_eadd :=_ffeg (_cedd ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_ceb );if _eadd .Type ==ResultTypeError {return 0,0,_eadd ;};if _bdeb >=_cgfdg {return 0,0,MakeErrorResultType (ErrorTypeNum ,_ceb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};return _bdeb ,_cgfdg ,_aaa ;};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _ccff (args ,_ceee )};func (_cabca *yyParserImpl )Lookahead ()int {return _cabca ._bdfec };

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_fcdg ,_addcg :=_gbgg (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _addcg .Type ==ResultTypeError {return _addcg ;};return MakeNumberResult (_gdfc (_fcdg ._gab ,_fcdg ._cbge ,_fcdg ._fddd ,_fcdg ._aebe ));
};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_fadb :=MakeNumberResult (0);for _ ,_fdcfb :=range args {_fdcfb =_fdcfb .AsNumber ();switch _fdcfb .Type {case ResultTypeNumber :_fadb .ValueNumber +=_fdcfb .ValueNumber *_fdcfb .ValueNumber ;case ResultTypeList ,ResultTypeArray :_fdde :=SumSquares (_fdcfb .ListValues ());
if _fdde .Type !=ResultTypeNumber {return _fdde ;};_fadb .ValueNumber +=_fdde .ValueNumber ;case ResultTypeString :case ResultTypeError :return _fdcfb ;case ResultTypeEmpty :default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_fdcfb .Type ));
};};return _fadb ;};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_egge ,_fagd ,_adagd :=_bbd (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _adagd .Type ==ResultTypeError {return _adagd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adagg :=_fagd -_egge ;if _adagg > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");
};_gaed :=args [2].ValueNumber ;if _gaed <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult ((365*_gaed )/(360-_gaed *_adagg ));};func (_fafe *Lexer )emit (_ccgca tokenType ,_aacgb []byte ){if _ecbfb {_c .Println ("\u0065\u006d\u0069\u0074",_ccgca ,_dbfdc (string (_aacgb )));};_fafe ._fdada <-&node {_ccgca ,string (_aacgb )};
};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_efcaa :=[]float64 {};
for _ ,_fcbc :=range args {switch _fcbc .Type {case ResultTypeString :_dcge :=_fcbc .AsNumber ();if _dcge .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_efcaa =append (_efcaa ,_dcge .ValueNumber );case ResultTypeList :_bdecc :=LCM (_fcbc .ValueList );if _bdecc .Type !=ResultTypeNumber {return _bdecc ;};_efcaa =append (_efcaa ,_bdecc .ValueNumber );case ResultTypeNumber :_efcaa =append (_efcaa ,_fcbc .ValueNumber );
case ResultTypeEmpty :case ResultTypeError :return _fcbc ;};};if len (_efcaa )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if _efcaa [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_efcaa )==1{return MakeNumberResult (_efcaa [0]);
};_eagc :=_efcaa [0];for _egec :=1;_egec < len (_efcaa );_egec ++{if _efcaa [_egec ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_eagc =_egef (_eagc ,_efcaa [_egec ]);};return MakeNumberResult (_eagc );};var _debbe =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};func _agbd (_dcdgb yyLexer ,_dafdf *yySymType )(_edae ,_cfbf int ){_cfbf =0;_edae =_dcdgb .Lex (_dafdf );
if _edae <=0{_cfbf =_gdggb [0];goto _aacd ;};if _edae < len (_gdggb ){_cfbf =_gdggb [_edae ];goto _aacd ;};if _edae >=_debe {if _edae < _debe +len (_ccdbb ){_cfbf =_ccdbb [_edae -_debe ];goto _aacd ;};};for _dcbdab :=0;_dcbdab < len (_cadeb );_dcbdab +=2{_cfbf =_cadeb [_dcbdab +0];
if _cfbf ==_edae {_cfbf =_cadeb [_dcbdab +1];goto _aacd ;};};_aacd :if _cfbf ==0{_cfbf =_ccdbb [1];};if _aagfd >=3{_c .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_bcggf (_cfbf ),uint (_edae ));};return _edae ,_cfbf ;};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_fdada chan *node ;_cgcd _cb .Mutex ;_bddaf []chan *node ;_aedee []*node ;};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};for _dbadg :=0;_dbadg < len (args )-1;_dbadg +=2{if args [_dbadg ].ValueNumber ==1{return args [_dbadg +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_befd :=len (args );if _befd !=4&&_befd !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bbcg ,_baee ,_fdff :=_bbd (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _fdff .Type ==ResultTypeError {return _fdff ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_bagb :=args [2].ValueNumber ;if _bagb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_bbda :=args [3].ValueNumber ;if _bbda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};_fgba :=0;if _befd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_fgba =int (args [4].ValueNumber );if !_fgcgb (_fgba ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");
};};_aede ,_fdff :=_egdg (_bbcg ,_baee ,_fgba );if _fdff .Type ==ResultTypeError {return _fdff ;};return MakeNumberResult ((_bbda -_bagb )/_bagb /_aede );};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ffbf :=args [0].AsString ();if _ffbf .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cgba :=_fg .Buffer {};for _ ,_fdea :=range _ffbf .ValueString {if _b .IsPrint (_fdea ){_cgba .WriteRune (_fdea );};};return MakeStringResult (_cgba .String ());};

// Reference returns an invalid reference for FunctionCall.
func (_fafaa FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _fcdc int =30;type ivr struct{};func _eba (_geca string )(int ,int ,int ,bool ,Result ){_gafa :="";_gca :=[]string {};for _gggbd ,_fec :=range _beb {_gca =_fec .FindStringSubmatch (_geca );
if len (_gca )> 1{_gafa =_gggbd ;break ;};};if _gafa ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );};_cgce :=false ;var _egc ,_fee ,_ffg int ;var _cgee error ;switch _gafa {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_fee ,_cgee =_ac .Atoi (_gca [1]);
if _cgee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );};_ffg ,_cgee =_ac .Atoi (_gca [3]);if _cgee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );};_egc ,_cgee =_ac .Atoi (_gca [5]);if _cgee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );
};if _egc < 0||_egc > 9999||(_egc > 99&&_egc < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );};_egc =_babc (_egc );_cgce =_gca [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_fee =_bac [_gca [1]];_ffg ,_cgee =_ac .Atoi (_gca [14]);
if _cgee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );};_egc ,_cgee =_ac .Atoi (_gca [16]);if _cgee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );};if _egc < 0||_egc > 9999||(_egc > 99&&_egc < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );
};_egc =_babc (_egc );_cgce =_gca [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_dbf ,_accb :=_ac .Atoi (_gca [1]);if _accb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );};_bab ,_accb :=_ac .Atoi (_gca [3]);if _accb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );
};_eabf ,_accb :=_ac .Atoi (_gca [5]);if _accb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );};if _dbf >=1900&&_dbf < 10000{_egc =_dbf ;_fee =_bab ;_ffg =_eabf ;}else if _dbf > 0&&_dbf < 13{_fee =_dbf ;_ffg =_bab ;_egc =_eabf ;
}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );};_cgce =_gca [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_egc ,_cgee =_ac .Atoi (_gca [16]);if _cgee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );
};_fee =_bac [_gca [3]];_ffg ,_cgee =_ac .Atoi (_gca [1]);if _cgee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );};_cgce =_gca [19]=="";};if !_bda (_egc ,_fee ,_ffg ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ddf );
};return _egc ,_fee ,_ffg ,_cgce ,_aaa ;};

// ReferenceType is a type of reference
//
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;var _ecbfb =false ;

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_gbge :=args [0];if _gbge .Type !=ResultTypeArray &&_gbge .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_bdddf :=_gfcf (_gbge );_bdgg :=args [2];if _bdgg .Type !=ResultTypeArray &&_bdgg .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_dfba :=_gfcf (_bdgg );_fgabb :=_ddgge (args [1]);_eadbd :=0.0;for _cbaf ,_bagf :=range _bdddf {for _abeed ,_dgdg :=range _bagf {if _aaedf (_dgdg ,_fgabb ){_eadbd +=_dfba [_cbaf ][_abeed ].ValueNumber ;};};};return MakeNumberResult (_eadbd );};type yyParserImpl struct{_ccdg yySymType ;
_gfgf [_cdgeb ]yySymType ;_bdfec int ;};func _bgbed (_aacbb Result ,_aecb ,_fdegf string )(string ,Result ){switch _aacbb .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _aacbb .Value (),_aaa ;default:return "",MakeErrorResult (_aecb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_fdegf +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");
};};const _dff ="\u0028\u0020\u0028"+_bcdf +"\u007c"+_gbd +"\u007c"+_daag +"\u007c"+_def +"\u0029\u0029\u003f\u0024";var _bgd =[]int {31,28,31,30,31,30,31,31,30,31,30,31};var _beb =map[string ]*_fe .Regexp {};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_agf CellRef )Update (q *_be .UpdateQuery )Expression {if q .UpdateCurrentSheet {_agf ._dfe =_bded (_agf ._dfe ,q );};return _agf ;};type ri struct{_dgag float64 ;_bcede string ;};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_abaa :=args [0];switch _abaa .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_bacf :=_dcbd (_abaa .ValueNumber );return MakeNumberResult (float64 (_bacf .Minute ()));case ResultTypeString :_acb :=_cg .ToLower (_abaa .ValueString );if !_bcae (_acb ){_ ,_ ,_ ,_cfee ,_bdaf :=_eba (_acb );if _bdaf .Type ==ResultTypeError {_bdaf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";
return _bdaf ;};if _cfee {return MakeNumberResult (0);};};_ ,_bdg ,_ ,_ ,_ ,_agd :=_ecd (_acb );if _agd .Type ==ResultTypeError {return _agd ;};return MakeNumberResult (float64 (_bdg ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");
};};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_badgc NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_ddfbd :=ctx .NamedRange (_badgc ._eaee );_cfgeb :=_ddfbd .Value ;if _gfgac ,_cffgg :=ev .GetFromCache (_cfgeb );_cffgg {return _gfgac ;};_dafb :=_cg .Split (_cfgeb ,"\u0021");if len (_dafb )!=2{return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_cfgeb ));
};_ddeb :=ctx .Sheet (_dafb [0]);_cbef :=_cg .Split (_dafb [1],"\u003a");switch len (_cbef ){case 1:_dbbg :=ev .Eval (_ddeb ,_cbef [0]);ev .SetCache (_cfgeb ,_dbbg );return _dbbg ;case 2:_ffada :=_afeeb (_ddeb ,ev ,_cbef [0],_cbef [1]);ev .SetCache (_cfgeb ,_ffada );
return _ffada ;};return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_ddfbd .Type ));};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fadg :=args [0].AsNumber ();
if _fadg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bgge :=args [1].AsNumber ();if _bgge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ebcf :=int (_bgge .ValueNumber );if _ebcf < 0||_ebcf > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");
};_egeg :=0;if len (args )> 2{_ecdd :=args [2].AsNumber ();if _ecdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_egeg =int (_ecdd .ValueNumber );};_edgd :=_ac .FormatInt (int64 (_fadg .ValueNumber ),_ebcf );if len (_edgd )< _egeg {_edgd =_cg .Repeat ("\u0030",_egeg -len (_edgd ))+_edgd ;};return MakeStringResult (_edgd );};const _decba =57361;func _cegda (_adfbg []Result ,_cgbba bool )Result {var _fdabd string ;
if _cgbba {_fdabd ="\u004c\u0041\u0052G\u0045";}else {_fdabd ="\u0053\u004d\u0041L\u004c";};if len (_adfbg )!=2{return MakeErrorResult (_fdabd +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gaeg :=_adfbg [0];var _eafg [][]Result ;switch _gaeg .Type {case ResultTypeArray :_eafg =_gaeg .ValueArray ;case ResultTypeList :_eafg =[][]Result {_gaeg .ValueList };default:return MakeErrorResult (_fdabd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");
};if len (_eafg )==0{return MakeErrorResult (_fdabd +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};if _adfbg [1].Type !=ResultTypeNumber {return MakeErrorResult (_fdabd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_ceac :=_adfbg [1].ValueNumber ;if _ceac < 1{return MakeErrorResultType (ErrorTypeNum ,_fdabd +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_dffe :=int (_ceac );if float64 (_dffe )!=_ceac {return MakeErrorResultType (ErrorTypeNum ,_fdabd +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_gcce :=[]float64 {};for _ ,_degc :=range _eafg {for _ ,_egcg :=range _degc {if _egcg .Type ==ResultTypeNumber {_gcce =append (_gcce ,_egcg .ValueNumber );};};};if _dffe > len (_gcce ){return MakeErrorResultType (ErrorTypeNum ,_fdabd +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_cacac :=_cbb .MergeSort (_gcce );if _cgbba {return MakeNumberResult (_cacac [len (_cacac )-_dffe ]);}else {return MakeNumberResult (_cacac [_dffe -1]);};};

// String is a string expression.
type String struct{_ceadf string };

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};
_gefb :=int (args [0].ValueNumber );return MakeBoolResult (_gefb ==_gefb /2*2);};

// Reference returns an invalid reference for ConstArrayExpr.
func (_ded ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const (_ byte =iota ;_bfea ;_dcfaf ;_dccg ;_affc ;_gade ;);

// Update updates references in the PrefixExpr after removing a row/column.
func (_abafg PrefixExpr )Update (q *_be .UpdateQuery )Expression {_bbbf :=_abafg ;_baeaf :=_abafg ._cbbdb .String ();if _baeaf ==q .SheetToUpdate {_dceeg :=*q ;_dceeg .UpdateCurrentSheet =true ;_bbbf ._dcee =_abafg ._dcee .Update (&_dceeg );};return _bbbf ;
};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cggd :=args [0].AsNumber ();if _cggd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_aaef :=float64 (1);if _cggd .ValueNumber < 0{_aaef =-1;};if len (args )> 1{_caga :=args [1].AsNumber ();if _caga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_aaef =_caga .ValueNumber ;};_fbgf :=float64 (1);if len (args )> 2{_fgcea :=args [2].AsNumber ();if _fgcea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_fbgf =_fgcea .ValueNumber ;};if len (args )==1{return MakeNumberResult (_cd .Ceil (_cggd .ValueNumber ));};_gffae :=_cggd .ValueNumber ;_gffae ,_gdfeb :=_cd .Modf (_gffae /_aaef );if _gdfeb !=0{if _cggd .ValueNumber > 0{_gffae ++;}else if _fbgf < 0{_gffae --;
};};return MakeNumberResult (_gffae *_aaef );};

// Eval evaluates and returns an expression with prefix.
func (_cbaba PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_dbead :=_cbaba ._cbbdb .Reference (ctx ,ev );switch _dbead .Type {case ReferenceTypeSheet :if _bcaaa (_dbead ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dbead .Value ));
};_bcda :=ctx .Sheet (_dbead .Value );return _cbaba ._dcee .Eval (_bcda ,ev );default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dbead .Type ));
};};const _afbd =57352;

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_cfaca ,_cecfc :=_cfde ("\u0046\u0049\u004e\u0044",args );if _cecfc .Type !=ResultTypeEmpty {return _cecfc ;};_dfgf :=_cg .ToLower (_cfaca ._fefe );if _dfgf ==""{return MakeNumberResult (1.0);};_dceb :=_cg .ToLower (_cfaca ._afdg );
_cabgab :=_cfaca ._bdgb ;_badbd :=1;for _gdfaa :=range _dceb {if _badbd < _cabgab {_badbd ++;continue ;};_cfdg :=_bde .Index (_dfgf ,_dceb [_gdfaa :]);if _cfdg ==0{return MakeNumberResult (float64 (_badbd ));};_badbd ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};

// Reference returns a string reference value to a cell.
func (_gad CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_gad ._dfe };};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );
RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );
RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );
RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};


// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_geaea :=args [0].Ref ;if _geaea .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");
};_bagg ,_dgbd :=_ba .ParseCellReference (_geaea .Value );if _dgbd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_geaea .Value );};return MakeNumberResult (float64 (_bagg .RowIdx ));
};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_gbgdb :=args [0].AsNumber ();if _gbgdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_feebb :=float64 (1);_fadf :=args [1].AsNumber ();if _fadf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_feebb =_fadf .ValueNumber ;if _feebb < 0&&_gbgdb .ValueNumber > 0||_feebb > 0&&_gbgdb .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");
};_gdcff :=_gbgdb .ValueNumber ;_gdcff ,_bfgb :=_cd .Modf (_gdcff /_feebb );if _cd .Trunc (_bfgb +0.5)> 0{_gdcff ++;};return MakeNumberResult (_gdcff *_feebb );};const _bcca =57348;func _afdce (_aecc []Result ,_gege []string ,_agfe bool )[]string {for _ ,_egbc :=range _aecc {switch _egbc .Type {case ResultTypeEmpty :if !_agfe {_gege =append (_gege ,"");
};case ResultTypeString :if _egbc .ValueString !=""||!_agfe {_gege =append (_gege ,_egbc .ValueString );};case ResultTypeNumber :_gege =append (_gege ,_egbc .Value ());case ResultTypeList :_gege =_agge (_gege ,_afdce (_egbc .ValueList ,[]string {},_agfe ));
case ResultTypeArray :for _ ,_dcdae :=range _egbc .ValueArray {_gege =_agge (_gege ,_afdce (_dcdae ,[]string {},_agfe ));};};};return _gege ;};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_cbeg :=args [0];if _cbeg .Type ==ResultTypeError ||_cbeg .Type ==ResultTypeString {return _cbeg ;};return _aaa ;};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_fdeg :=len (args );if _fdeg !=5&&_fdeg !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_egggd ,_eada ,_fecc :=_bbd (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _fecc .Type ==ResultTypeError {return _fecc ;};_aaca ,_fecc :=_ffeg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");
if _fecc .Type ==ResultTypeError {return _fecc ;};if _aaca >=_egggd {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_ggbe :=args [3].ValueNumber ;if _ggbe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bbce :=args [4].ValueNumber ;if _bbce < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_dfafb :=0;if _fdeg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfafb =int (args [5].ValueNumber );if !_fgcgb (_dfafb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");
};};_eacg ,_fecc :=_egdg (_egggd ,_eada ,_dfafb );if _fecc .Type ==ResultTypeError {return _fecc ;};_eebgg ,_fecc :=_egdg (_aaca ,_eada ,_dfafb );if _fecc .Type ==ResultTypeError {return _fecc ;};_adbf ,_fecc :=_egdg (_aaca ,_egggd ,_dfafb );if _fecc .Type ==ResultTypeError {return _fecc ;
};_efca :=1+_eebgg *_ggbe ;_eegc :=1+_eacg *_bbce ;return MakeNumberResult ((_efca /_eegc -_adbf *_ggbe )*100);};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_fbffb :=len (args );if _fbffb !=3&&_fbffb !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_egcf ,_eaeg :=_bgbed (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _eaeg .Type ==ResultTypeError {return _eaeg ;};_bgaf ,_eaeg :=_bgbed (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");
if _eaeg .Type ==ResultTypeError {return _eaeg ;};_fbdcg ,_eaeg :=_bgbed (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _eaeg .Type ==ResultTypeError {return _eaeg ;};_baac :=0;
if _fbffb ==3{return MakeStringResult (_cg .Replace (_egcf ,_bgaf ,_fbdcg ,-1));}else {_ecgde ,_edac :=_adcfg (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");
if _edac .Type ==ResultTypeError {return _edac ;};_baac =int (_ecgde );if _baac < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");
};_dfeac :=_egcf ;_ddfge :=_baac ;_ceec :=-1;_dbeg :=len (_bgaf );_dfcg :=0;for {_ddfge --;_cfec :=_cg .Index (_dfeac ,_bgaf );if _cfec ==-1{_ceec =-1;break ;}else {_ceec =_cfec +_dfcg ;if _ddfge ==0{break ;};_adaea :=_dbeg +_cfec ;_dfcg +=_adaea ;_dfeac =_dfeac [_adaea :];
};};if _ceec ==-1{return MakeStringResult (_egcf );}else {_bdabd :=_egcf [:_ceec ];_bdgd :=_egcf [_ceec +_dbeg :];return MakeStringResult (_bdabd +_fbdcg +_bdgd );};};};

// Reference returns an invalid reference for EmptyExpr.
func (_cdf EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bcgg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgcf :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ffcc :=args [2].ValueNumber ;if _ffcc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gaeca :=args [3].ValueNumber ;return MakeNumberResult (_gaeca *_bcgg *(_fgcf /_ffcc -1));};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_dfgca ,_defac :=_gcaf (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _defac .Type ==ResultTypeError {return _defac ;};_eecd :=_dfgca ._bcff ;_daab :=_dfgca ._egca ;_dfbgd :=_dfgca ._acgd ;_ffa :=_dfgca ._gccb ;
_ffd :=_dfgca ._cfefe ;_feed :=_dfgca ._ceccc ;_ccfb :=_dfgca ._aefe ;_efbfb ,_cgbf :=_egdg (_daab ,_dfbgd ,_ccfb );if _cgbf .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");
};_bedc :=_efbfb *_feed *_eecd ;if _ffd ==0{return MakeNumberResult (_bedc );};_dgae :=_eecd *_feed ;_bcfd :=_eecd -_ffa ;_fedg :=int ((_bcfd -_bedc )/_dgae );if _ffd <=_fedg {return MakeNumberResult (_dgae );}else if _ffd ==_fedg +1{return MakeNumberResult (_bcfd -_dgae *float64 (_fedg )-_bedc );
}else {return MakeNumberResult (0);};};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_bfg :=&defEval {};_bfg .evCache =_cag ();return _bfg };const _debe =57344;type cumulArgs struct{_ebce float64 ;_gaga float64 ;_dgca float64 ;_bagd float64 ;_defb float64 ;_fgeee int ;};var _abb =map[string ]*_fe .Regexp {};


// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_dgc :=int (args [0].ValueNumber );if _dgc < 0||_dgc >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _dgc <=1899{_dgc +=1900;};_ada :=_bd .Month (args [1].ValueNumber );
_gada :=int (args [2].ValueNumber );_egf :=_gggg (_dgc ,_ada ,_gada );_edd :=_aggd (_befg ,_egf )+1;if _edd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_edd );
};var _dbbb =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_efdg :=args [0];switch _efdg .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
case ResultTypeString :_gccd :=0.0;_dbbfb :=0.0;for _ ,_fecd :=range _efdg .ValueString {_cfdd :=0.0;switch _fecd {case 'I':_cfdd =1;case 'V':_cfdd =5;case 'X':_cfdd =10;case 'L':_cfdd =50;case 'C':_cfdd =100;case 'D':_cfdd =500;case 'M':_cfdd =1000;};
_gccd +=_cfdd ;switch {case _dbbfb ==_cfdd &&(_dbbfb ==5||_dbbfb ==50||_dbbfb ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_dbbfb ==_cfdd :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");
};if _dbbfb < _cfdd {_gccd -=2*_dbbfb ;};_dbbfb =_cfdd ;};return MakeNumberResult (_gccd );case ResultTypeError :return _efdg ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_efdg .Type ));
};};func _fd (_dca BinOpType ,_gaf [][]Result ,_ceg Result )Result {_ae :=[][]Result {};for _gc :=range _gaf {_ag :=_af (_dca ,_gaf [_gc ],_ceg );if _ag .Type ==ResultTypeError {return _ag ;};_ae =append (_ae ,_ag .ValueList );};return MakeArrayResult (_ae );
};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_fbd :=args [1].ValueNumber ;_agb :=args [0];var _dggb float64 ;switch _agb .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
case ResultTypeNumber :_dggb =_agb .ValueNumber ;case ResultTypeString :_adc :=DateValue ([]Result {args [0]});if _adc .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_dggb =_adc .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_dgce :=_dcbd (_dggb );_egff :=_dgce .AddDate (0,int (_fbd ),0);
_fgbe ,_fgc ,_edb :=_egff .Date ();_aag :=_caca (_fgbe ,int (_fgc ),_edb );if _aag < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};return MakeNumberResult (_aag );};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dafg :=args [0].AsNumber ();if _dafg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_cd .Pi /180.0*_dafg .ValueNumber );};var _ccdbb =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};func init (){_gcge ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );
RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );
RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );
RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );
RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_fdd ConstArrayExpr )Update (q *_be .UpdateQuery )Expression {return _fdd };func _acd (_dae ,_bea ,_cbg float64 )float64 {return (_dae *3600+_bea *60+_cbg )/86400};func _ff (_fbb string ,_fdf uint32 )string {_ggg :=_ba .ColumnToIndex (_fbb );if _ggg ==_fdf {return "\u0023\u0052\u0045F\u0021";
}else if _ggg > _fdf {return _ba .IndexToColumn (_ggg -1);}else {return _fbb ;};};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_aafg :=args [0].AsString ();if _aafg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");
};_ebcgb :="\u0041\u0031";if len (args )==2{_bbdca :=args [1].Ref ;if _bbdca .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};_ebcgb =_bbdca .Value ;};switch _aafg .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_gdfcc ,_dacf :=_ba .ParseCellReference (_ebcgb );if _dacf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ebcgb );
};_daeb :="\u0024"+_gdfcc .Column +"\u0024"+_ac .Itoa (int (_gdfcc .RowIdx ));if _gdfcc .SheetName !=""{_daeb =_gdfcc .SheetName +"\u0021"+_daeb ;};return MakeStringResult (_daeb );case "\u0063\u006f\u006c":_afff ,_gded :=_ba .ParseCellReference (_ebcgb );
if _gded !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ebcgb );};return MakeNumberResult (float64 (_afff .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_abbcd :=_cg .Contains (ctx .GetFormat (_ebcgb ),"\u005b\u0052\u0045D\u005d");
return MakeBoolResult (_abbcd );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_baec :="\u0047";
_edbf :=ctx .GetFormat (_ebcgb );if _edbf =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_cgebe .MatchString (_edbf ){_baec ="\u0046\u0030";}else if _edbf =="\u0030\u0025"{_baec ="\u0050\u0030";}else if _edbf =="\u004d\u004d\u004d\u0020\u0044\u0044"{_baec ="\u0044\u0032";
}else if _edbf =="\u004d\u004d\u002fY\u0059"{_baec ="\u0044\u0033";}else if _edbf =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_edbf =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_baec ="\u0044\u0034";
}else if _edbf =="\u004d\u004d\u005c\u002d\u0044\u0044"{_baec ="\u0044\u0035";}else if _edbf =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_baec ="\u0044\u0036";}else if _edbf =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_baec ="\u0044\u0037";
}else if _edbf =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_baec ="\u0044\u0038";}else if _edbf =="\u0048\u0048\u003aM\u004d"{_baec ="\u0044\u0039";}else if _ddce .MatchString (_edbf ){_baec ="\u002e\u0030";}else if _gadc .MatchString (_edbf ){_baec ="\u002e\u0030\u0028\u0029";
}else if _gfbc .MatchString (_edbf ){_baec ="\u0043\u0030";}else if _fbed .MatchString (_edbf )||_dedd .MatchString (_edbf ){_baec ="\u0044\u0031";}else if _gbfb :=_cffb .FindStringSubmatch (_edbf );len (_gbfb )> 1{_baec ="\u0046"+_ac .Itoa (len (_gbfb [1]));
}else if _gaeb :=_gdda .FindStringSubmatch (_edbf );len (_gaeb )> 1{_baec ="\u002e"+_ac .Itoa (len (_gaeb [2]));}else if _ecgbf :=_eage .FindStringSubmatch (_edbf );len (_ecgbf )> 1{_baec ="\u0050"+_ac .Itoa (len (_ecgbf [2]));}else if _afec :=_bbdc .FindStringSubmatch (_edbf );
len (_afec )> 1{_baec ="\u0043"+_fedga (_afec ,1);}else if _ccaf :=_ggbf .FindStringSubmatch (_edbf );len (_ccaf )> 1{_baec ="\u0043"+_fedga (_ccaf ,1);}else if _cbad :=_dag .FindStringSubmatch (_edbf );len (_cbad )> 1{_baec ="\u002e"+_fedga (_cbad ,1)+"\u0028\u0029";
}else if _bgdc :=_fdgd .FindStringSubmatch (_edbf );len (_bgdc )> 1{_baec ="\u002e"+_fedga (_bgdc ,1);}else if _fbag :=_aeeb .FindStringSubmatch (_edbf );len (_fbag )> 1{_baec ="\u0053"+_fedga (_fbag ,3);};if _baec !="\u0047"&&_cg .Contains (_edbf ,"\u005b\u0052\u0045D\u005d"){_baec +="\u002d";
};return MakeStringResult (_baec );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_cfgg :=ctx .GetFormat (_ebcgb );if _dbbd .MatchString (_cfgg ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_ebcgb ));
case "\u0070r\u006f\u0074\u0065\u0063\u0074":_dbcb :=0.0;if ctx .GetLocked (_ebcgb ){_dbcb =1.0;};return MakeNumberResult (_dbcb );case "\u0072\u006f\u0077":_dgfde ,_fbcc :=_ba .ParseCellReference (_ebcgb );if _fbcc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ebcgb );
};return MakeNumberResult (float64 (_dgfde .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");
};case "\u0077\u0069\u0064t\u0068":_baea ,_cdae :=_ba .ParseCellReference (_ebcgb );if _cdae !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ebcgb );};if _baea .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_baea .ColumnIdx )));
}else {return MakeNumberResult (ctx .Sheet (_baea .SheetName ).GetWidth (int (_baea .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_aafg .ValueString );
};const _eacaa =57366;

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgbe :=int (args [0].ValueNumber );
return MakeBoolResult (_cgbe !=_cgbe /2*2);};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dabc :=args [0].AsString ();if _dabc .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (len (_dabc .ValueString )));};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bfb :=ctx .GetEpoch ();_gda ,_cca :=_aefad (args [0].Value (),_bfb );if _cca !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (float64 (_gda .Year ()));};func (_cdea *noCache )GetFromCache (key string )(Result ,bool ){return _aaa ,false };

// Reference returns an invalid reference for BinaryExpr.
func (_g BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// String returns a string representation for Negate.
func (_degdc Negate )String ()string {return "\u002d"+_degdc ._dbfbe .String ()};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_egcbb :=_cg .Split (v ,"\u003a");if len (_egcbb )!=2{return nil ;};if _egcbb [0]> _egcbb [1]{_egcbb [0],_egcbb [1]=_egcbb [1],_egcbb [0];};return PrefixVerticalRange {_cacbb :pfx ,_eafdf :_egcbb [0],_bcdae :_egcbb [1]};
};const _eedff =57370;

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_eaee :v }};

// GetEpoch returns a null time object for the invalid reference context.
func (_bfbg *ivr )GetEpoch ()_bd .Time {return _bd .Time {}};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_aedde :=_cg .Split (v ,"\u003a");if len (_aedde )!=2{return nil ;};if _aedde [0]> _aedde [1]{_aedde [0],_aedde [1]=_aedde [1],_aedde [0];};return VerticalRange {_ffge :_aedde [0],_eggdd :_aedde [1]};};

// Eval evaluates and returns the result of a Negate expression.
func (_afgd Negate )Eval (ctx Context ,ev Evaluator )Result {_decde :=_afgd ._dbfbe .Eval (ctx ,ev );if _decde .Type ==ResultTypeNumber {return MakeNumberResult (-_decde .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_baecg :=args [0].AsNumber ();if _baecg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_abdf :=float64 (1);if _baecg .ValueNumber < 0{_abdf =-1;};if len (args )> 1{_bedcc :=args [1].AsNumber ();if _bedcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_abdf =_cd .Abs (_bedcc .ValueNumber );};if len (args )==1{return MakeNumberResult (_cd .Ceil (_baecg .ValueNumber ));};_ggaa :=_baecg .ValueNumber ;_ggaa ,_fgbg :=_cd .Modf (_ggaa /_abdf );if _fgbg !=0{if _baecg .ValueNumber > 0{_ggaa ++;};};return MakeNumberResult (_ggaa *_abdf );
};func _adba (_gcdg Result ,_feafe *criteriaParsed )bool {if _gcdg .Type ==ResultTypeEmpty {return false ;};if _feafe ._eeaad {return _gcdg .ValueNumber ==_feafe ._cbdbd ;}else {_gcac :=_cg .ToLower (_gcdg .ValueString );return _feafe ._feba ==_gcac ||_bde .Match (_feafe ._feba ,_gcac );
};};func _ecd (_edad string )(int ,int ,float64 ,bool ,bool ,Result ){_abf :="";_agc :=[]string {};for _cbca ,_dga :=range _abb {_agc =_dga .FindStringSubmatch (_edad );if len (_agc )> 1{_abf =_cbca ;break ;};};if _abf ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geae );
};_bfdf :=_agc [1]=="";_agc =_agc [49:];_ggb :=len (_agc );_cbf :=_agc [_ggb -1];_eagf :=_cbf =="\u0061\u006d";_bfec :=_cbf =="\u0070\u006d";var _ecee ,_gcd int ;var _eceg float64 ;var _ddb error ;switch _abf {case "\u0068\u0068":_ecee ,_ddb =_ac .Atoi (_agc [0]);
if _ddb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geae );};_gcd =0;_eceg =0;case "\u0068\u0068\u003am\u006d":_ecee ,_ddb =_ac .Atoi (_agc [0]);if _ddb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geae );
};_gcd ,_ddb =_ac .Atoi (_agc [2]);if _ddb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geae );};_eceg =0;case "\u006d\u006d\u003as\u0073":_ecee =0;_gcd ,_ddb =_ac .Atoi (_agc [0]);if _ddb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geae );
};_eceg ,_ddb =_ac .ParseFloat (_agc [2],64);if _ddb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geae );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_ecee ,_ddb =_ac .Atoi (_agc [0]);if _ddb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geae );
};_gcd ,_ddb =_ac .Atoi (_agc [2]);if _ddb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geae );};_eceg ,_ddb =_ac .ParseFloat (_agc [4],64);if _ddb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geae );
};};if _gcd >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geae );};if _eagf ||_bfec {if _ecee > 12||_eceg >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geae );}else if _ecee ==12{_ecee =0;};}else if _ecee >=24||_eceg >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geae );
};return _ecee ,_gcd ,_eceg ,_bfec ,_bfdf ,_aaa ;};func _abgc (_bdbea ,_dfgcgd Reference )string {return _c .Sprintf ("\u0025\u0073\u003a%\u0073",_bdbea .Value ,_dfgcgd .Value );};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );
RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );
RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};func _aggd (_dgdf ,_efec int64 )float64 {return float64 (int (0.5+float64 ((_efec -_dgdf )/86400)))};
const _dfae =1;

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_agfc :data }};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_ccbf PrefixHorizontalRange )Update (q *_be .UpdateQuery )Expression {return _ccbf };

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_fcac :=len (args );if _fcac ==0||_fcac > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");
};_ebbgf :=_gfcf (args [0]);_fgbb :=[]float64 {};for _ ,_adgc :=range _ebbgf {for _ ,_gccfd :=range _adgc {if _gccfd .Type ==ResultTypeNumber &&!_gccfd .IsBoolean {_fgbb =append (_fgbb ,_gccfd .ValueNumber );};};};_gbca :=len (_fgbb );if len (_fgbb )< 2{return MakeErrorResultType (ErrorTypeNum ,"");
};_faf :=0.1;if _fcac ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_faf =args [1].ValueNumber ;if _faf <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");
};};_eecc :=[]float64 {};for _gfdg :=0;_gfdg < _gbca ;_gfdg ++{if _gfdg ==0{_eecc =append (_eecc ,0);}else {_eecc =append (_eecc ,_eecc [_gfdg -1]+365);};};return _efbac (_fgbb ,_eecc ,_faf );};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_ccbd :=len (args );if _ccbd < 3||_ccbd > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bdcg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_gfag :=args [1].ValueNumber ;if _gfag !=float64 (int (_gfag )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbac :=args [2].ValueNumber ;_adfce :=0.0;if _ccbd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adfce =args [3].ValueNumber ;};_fdabe :=0.0;if _ccbd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fdabe =args [4].ValueNumber ;if _fdabe !=0{_fdabe =1;};};if _bdcg ==0{return MakeNumberResult (-_dbac *_gfag -_adfce );}else {return MakeNumberResult ((((1-_cd .Pow (1+_bdcg ,_gfag ))/_bdcg )*_dbac *(1+_bdcg *_fdabe )-_adfce )/_cd .Pow (1+_bdcg ,_gfag ));
};};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_gbbf :=len (args );if _gbbf < 4||_gbbf > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fcde :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dgff :=args [1].ValueNumber ;if _dgff <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdb :=args [2].ValueNumber ;if _fdb < _dgff {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_eebe :=args [3].ValueNumber ;_gggc :=0.0;if _gbbf >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gggc =args [4].ValueNumber ;};_gbgf :=0;if _gbbf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gbgf =int (args [5].ValueNumber );if _gbgf !=0{_gbgf =1;};};return MakeNumberResult (_beca (_fcde ,_fdb ,_eebe ,_gggc ,_gbgf )-_ccga (_fcde ,_dgff ,_fdb ,_eebe ,_gggc ,_gbgf ));};func _dcbd (_cgaf float64 )_bd .Time {_fda :=int64 ((_cgaf -_eab )*_dgcb );
return _bd .Unix (0,_fda ).UTC ();};const _addac =57375;func (_beed Result )AsString ()Result {switch _beed .Type {case ResultTypeNumber :return MakeStringResult (_beed .Value ());default:return _beed ;};};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _ccff (args ,_cegff )};var _gaecc []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };
case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };
case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };
default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_fafbb :=_fg .Buffer {};for _ ,_gbgaf :=range args {switch _gbgaf .Type {case ResultTypeString :_fafbb .WriteString (_gbgaf .ValueString );case ResultTypeNumber :var _fgad string ;if _gbgaf .IsBoolean {if _gbgaf .ValueNumber ==0{_fgad ="\u0046\u0041\u004cS\u0045";
}else {_fgad ="\u0054\u0052\u0055\u0045";};}else {_fgad =_gbgaf .AsString ().ValueString ;};_fafbb .WriteString (_fgad );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
};};return MakeStringResult (_fafbb .String ());};func _gg (_abd BinOpType ,_fb ,_ga [][]Result )Result {_bdf :=[][]Result {};for _ce :=range _fb {_fba :=_cgc (_abd ,_fb [_ce ],_ga [_ce ]);if _fba .Type ==ResultTypeError {return _fba ;};_bdf =append (_bdf ,_fba .ValueList );
};return MakeArrayResult (_bdf );};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebba :=true ;for _ ,_cfbb :=range args {_cfbb =_cfbb .AsNumber ();switch _cfbb .Type {case ResultTypeList ,ResultTypeArray :_gdcfb :=And (_cfbb .ListValues ());if _gdcfb .Type ==ResultTypeError {return _gdcfb ;};if _gdcfb .ValueNumber ==0{_ebba =false ;
};case ResultTypeNumber :if _cfbb .ValueNumber ==0{_ebba =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
case ResultTypeError :return _cfbb ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");
};};return MakeBoolResult (_ebba );};func init (){_gedc =_a .New (_a .NewSource (_bd .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_adea ("\u0041\u0053\u0049\u004e",_cd .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_adea ("\u0041\u0053\u0049\u004e",_cd .Acos ));
RegisterFunction ("\u0041\u0043\u004fS\u0048",_adea ("\u0041\u0053\u0049\u004e",_cd .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_adea ("\u0041\u0043\u004f\u0054",func (_abed float64 )float64 {return _cd .Pi /2-_cd .Atan (_abed )}));
RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_adea ("\u0041\u0043\u004fT\u0048",func (_adcb float64 )float64 {return _cd .Atanh (1/_adcb )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );
RegisterFunction ("\u0041\u0053\u0049\u004e",_adea ("\u0041\u0053\u0049\u004e",_cd .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_adea ("\u0041\u0053\u0049N\u0048",_cd .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_adea ("\u0041\u0054\u0041\u004e",_cd .Atan ));
RegisterFunction ("\u0041\u0054\u0041N\u0048",_adea ("\u0041\u0054\u0041N\u0048",_cd .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );
RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );
RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_adea ("\u0043\u004f\u0053",_cd .Cos ));
RegisterFunction ("\u0043\u004f\u0053\u0048",_adea ("\u0043\u004f\u0053\u0048",_cd .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_egace ("\u0043\u004f\u0054",_cd .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_egace ("\u0043\u004f\u0054\u0048",_cd .Tanh ));
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_egace ("\u0043\u0053\u0043",_cd .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_egace ("\u0043\u0053\u0043",_cd .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );
RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_adea ("\u0045\u0058\u0050",_cd .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );
RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );
RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_adea ("\u004c\u004e",_cd .Log ));
RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_adea ("\u004c\u004f\u00471\u0030",_cd .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );
RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );
RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );
RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );
RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_egace ("\u0053\u0045\u0043",_cd .Cos ));
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_egace ("\u0053\u0045\u0043\u0048",_cd .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );
RegisterFunction ("\u0053\u0049\u004e",_adea ("\u0053\u0049\u004e",_cd .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_adea ("\u0053\u0049\u004e\u0048",_cd .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_adea ("\u0053\u0051\u0052\u0054",_cd .Sqrt ));
RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_adea ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_eafab float64 )float64 {return _cd .Sqrt (_eafab *_cd .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );
RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_adea ("\u0054\u0041\u004e",_cd .Tan ));
RegisterFunction ("\u0054\u0041\u004e\u0048",_adea ("\u0054\u0041\u004e\u0048",_cd .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};var _eab float64 =25569.0;

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_bcgd PrefixRangeExpr )Update (q *_be .UpdateQuery )Expression {_abffg :=_bcgd ;_ecdca :=_bcgd ._aafc .String ();if _ecdca ==q .SheetToUpdate {_eebgd :=*q ;_eebgd .UpdateCurrentSheet =true ;_abffg ._dedc =_bcgd ._dedc .Update (&_eebgd );_abffg ._bdcec =_bcgd ._bdcec .Update (&_eebgd );
};return _abffg ;};func _dba (){_beb ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_fe .MustCompile ("\u005e"+_aca +_dff );_beb ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_fe .MustCompile ("\u005e"+_cec +_dff );_beb ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_fe .MustCompile ("\u005e"+_bdfg +_dff );
_beb ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_fe .MustCompile ("\u005e"+_ece +_dff );_abb ["\u0068\u0068"]=_fe .MustCompile (_aga +_bcdf +"\u0024");_abb ["\u0068\u0068\u003am\u006d"]=_fe .MustCompile (_aga +_gbd +"\u0024");_abb ["\u006d\u006d\u003as\u0073"]=_fe .MustCompile (_aga +_daag +"\u0024");
_abb ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_fe .MustCompile (_aga +_def +"\u0024");_gec =[]*_fe .Regexp {_fe .MustCompile ("\u005e"+_aca +"\u0024"),_fe .MustCompile ("\u005e"+_cec +"\u0024"),_fe .MustCompile ("\u005e"+_bdfg +"\u0024"),_fe .MustCompile ("\u005e"+_ece +"\u0024")};
_bcd =[]*_fe .Regexp {_fe .MustCompile ("\u005e"+_bcdf +"\u0024"),_fe .MustCompile ("\u005e"+_gbd +"\u0024"),_fe .MustCompile ("\u005e"+_daag +"\u0024"),_fe .MustCompile ("\u005e"+_def +"\u0024")};};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");
};const _gccg =57347;

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_deeca ,_agcf ,_edeg :=_bbd (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _edeg .Type ==ResultTypeError {return _edeg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebbd :=_agcf -_deeca ;if _ebbd > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_bffg :=args [2].ValueNumber ;if _bffg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gebb :=(100-_bffg )/_bffg ;_bebea :=360/_ebbd ;return MakeNumberResult (_gebb *_bebea );};func _gecdd (_ecdcd string )*criteriaRegex {_eafb :=&criteriaRegex {};if _ecdcd ==""{return _eafb ;};if _cbea :=_fagab .FindStringSubmatch (_ecdcd );len (_cbea )> 1{_eafb ._decfd =_bfea ;
_eafb ._ffaa =_cbea [1];}else if _becbg :=_gdac .FindStringSubmatch (_ecdcd );len (_becbg )> 1{_eafb ._decfd =_bfea ;_eafb ._ffaa =_becbg [1];}else if _bbga :=_cgda .FindStringSubmatch (_ecdcd );len (_bbga )> 1{_eafb ._decfd =_dcfaf ;_eafb ._ffaa =_bbga [1];
}else if _cdfe :=_bbbd .FindStringSubmatch (_ecdcd );len (_cdfe )> 1{_eafb ._decfd =_dccg ;_eafb ._ffaa =_cdfe [1];}else if _faeb :=_dfff .FindStringSubmatch (_ecdcd );len (_faeb )> 1{_eafb ._decfd =_affc ;_eafb ._ffaa =_faeb [1];}else if _bbcd :=_dbfdg .FindStringSubmatch (_ecdcd );
len (_bbcd )> 1{_eafb ._decfd =_gade ;_eafb ._ffaa =_bbcd [1];};return _eafb ;};const _gdcd =57369;

// GetWidth returns 0 for the invalid reference context.
func (_ebfbe *ivr )GetWidth (colIdx int )float64 {return float64 (0)};const (_dbge rmode =iota ;_cegff ;_ceee ;);

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gddba :=args [0].AsNumber ();if _gddba .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ggag :=float64 (1);if _gddba .ValueNumber < 0{_ggag =-1;};if len (args )> 1{_cfcac :=args [1].AsNumber ();if _cfcac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_ggag =_cfcac .ValueNumber ;};_fdad :=float64 (1);if len (args )> 2{_ffcf :=args [2].AsNumber ();if _ffcf .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fdad =_ffcf .ValueNumber ;};if len (args )==1{return MakeNumberResult (_cd .Floor (_gddba .ValueNumber ));};_dcdaa :=_gddba .ValueNumber ;_dcdaa ,_bedg :=_cd .Modf (_dcdaa /_ggag );if _bedg !=0&&_gddba .ValueNumber < 0&&_fdad > 0{_dcdaa ++;};return MakeNumberResult (_dcdaa *_ggag );
};

// Reference returns a string reference value to a horizontal range.
func (_feab HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_feab .horizontalRangeReference ()};};

// Update updates the horizontal range references after removing a row/column.
func (_gebeg HorizontalRange )Update (q *_be .UpdateQuery )Expression {return _gebeg };

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_cddcd :=args [0].AsNumber ();if _cddcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_fdfb :=10.0;if len (args )> 1{_abad :=args [1].AsNumber ();if _abad .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");
};_fdfb =args [1].ValueNumber ;};if _cddcd .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");
};if _fdfb ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");
};return MakeNumberResult (_cd .Log (_cddcd .ValueNumber )/_cd .Log (_fdfb ));};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_cadeg .Lock ();defer _cadeg .Unlock ();if _ ,_fcbgbc :=_cfebb [name ];_fcbgbc {_cgg .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_cfebb [name ]=fn ;};type plex struct{_bagbf chan *node ;_bbgb Expression ;_cafb string ;};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_gdega :=args [0].AsNumber ();_eedb :=args [1].AsNumber ();if _gdega .Type !=ResultTypeNumber ||_eedb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};if _eedb .ValueNumber < _gdega .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");
};_gffcf :=int64 (_gdega .ValueNumber );_bcbag :=int64 (_eedb .ValueNumber );return MakeNumberResult (float64 (_gedc .Int63n (_bcbag -_gffcf +1)+_gffcf ));};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ggga :=args [0].AsNumber ();if _ggga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _ggga .ValueNumber < 0{return MakeNumberResult (-1);}else if _ggga .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};type tokenType int ;

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_aafc ,_dedc ,_bdcec Expression };const _addfg =57346;const _eebaf =57367;

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_eef :=len (args );if _eef < 3||_eef > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_afe :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fced :=args [1].ValueNumber ;if _fced ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_aecac :=args [2].ValueNumber ;_gfg :=0.0;if _eef >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfg =args [3].ValueNumber ;};_gecd :=0.0;if _eef ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gecd =args [4].ValueNumber ;if _gecd !=0{_gecd =1;};};var _eeaa float64 ;if _afe ==0{_eeaa =(_aecac +_gfg )/_fced ;}else {_cbgab :=_cd .Pow (1+_afe ,_fced );if _gecd ==1{_eeaa =(_gfg *_afe /(_cbgab -1)+_aecac *_afe /(1-1/_cbgab ))/(1+_afe );}else {_eeaa =_gfg *_afe /(_cbgab -1)+_aecac *_afe /(1-1/_cbgab );
};};return MakeNumberResult (-_eeaa );};

// String returns a string of a range.
func (_fcfg Range )String ()string {return _c .Sprintf ("\u0025\u0073\u003a%\u0073",_fcfg ._edegf .String (),_fcfg ._acfgb .String ());};const _dadd =57355;const _cc ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";


// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_efda ,_bgae int };var _cadeb =[...]int {0};func (_eceed *Lexer )lex (_dfade _e .Reader ){_bccc ,_bcgfb ,_ebadb :=0,0,0;_bfcd :=-1;_fecdc ,_cbead ,_cafa :=0,0,0;_ =_cafa ;_cbed :=1;_ =_cbed ;_cbcga :=make ([]byte ,4096);_afccf :=false ;
for !_afccf {_bdbe :=0;if _fecdc > 0{_bdbe =_bcgfb -_fecdc ;};_bcgfb =0;_fcgd ,_ddba :=_dfade .Read (_cbcga [_bdbe :]);if _fcgd ==0||_ddba !=nil {_afccf =true ;};_ebadb =_fcgd +_bdbe ;if _ebadb < len (_cbcga ){_bfcd =_ebadb ;};{_bccc =_fcdc ;_fecdc =0;
_cbead =0;_cafa =0;};{var _aaccg int ;var _gddd uint ;if _bcgfb ==_ebadb {goto _eddae ;};if _bccc ==0{goto _abbab ;};_dfadd :_aaccg =int (_eagce [_bccc ]);_gddd =uint (_gecf [_aaccg ]);_aaccg ++;for ;_gddd > 0;_gddd --{_aaccg ++;switch _gecf [_aaccg -1]{case 2:_fecdc =_bcgfb ;
};};switch _bccc {case 30:switch _cbcga [_bcgfb ]{case 34:goto _gbaae ;case 35:goto _gcffa ;case 36:goto _ebbc ;case 38:goto _aafd ;case 39:goto _fbffa ;case 40:goto _gbdf ;case 41:goto _aeffc ;case 42:goto _gdeff ;case 43:goto _dagfd ;case 44:goto _acgdd ;
case 45:goto _dffae ;case 47:goto _acdd ;case 58:goto _fcbgb ;case 59:goto _ebeg ;case 60:goto _ececf ;case 61:goto _ffegd ;case 62:goto _badfa ;case 63:goto _bafb ;case 70:goto _ebfbed ;case 84:goto _baab ;case 92:goto _dcac ;case 94:goto _bcgga ;case 95:goto _cffg ;
case 123:goto _cfaedb ;case 125:goto _gdeb ;};switch {case _cbcga [_bcgfb ]< 65:switch {case _cbcga [_bcgfb ]> 37:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _aadf ;};case _cbcga [_bcgfb ]>=33:goto _bafb ;};case _cbcga [_bcgfb ]> 90:switch {case _cbcga [_bcgfb ]> 93:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _fede ;
};case _cbcga [_bcgfb ]>=91:goto _bafb ;};default:goto _gbgdg ;};goto _ceffd ;case 1:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 47:goto _bcadg ;case 123:goto _bcadg ;case 125:goto _bcadg ;};switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _bcadg ;
};case _cbcga [_bcgfb ]> 45:switch {case _cbcga [_bcgfb ]> 63:if 91<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=94{goto _bcadg ;};case _cbcga [_bcgfb ]>=58:goto _bcadg ;};default:goto _bcadg ;};goto _ceffd ;case 0:goto _abbab ;case 2:if _cbcga [_bcgfb ]==34{goto _cfdf ;
};goto _gbaae ;case 31:if _cbcga [_bcgfb ]==34{goto _gbaae ;};goto _bcggc ;case 3:switch _cbcga [_bcgfb ]{case 78:goto _ffcgf ;case 82:goto _afbgf ;};goto _bafb ;case 4:switch _cbcga [_bcgfb ]{case 47:goto _adacb ;case 85:goto _bcfeg ;};goto _bafb ;case 5:if _cbcga [_bcgfb ]==65{goto _bcggfb ;
};goto _bafb ;case 6:switch _cbcga [_bcgfb ]{case 76:goto _ecfga ;case 77:goto _geacg ;};goto _bafb ;case 7:if _cbcga [_bcgfb ]==76{goto _geacg ;};goto _bafb ;case 8:if _cbcga [_bcgfb ]==33{goto _bcggfb ;};goto _bafb ;case 9:if _cbcga [_bcgfb ]==69{goto _cbee ;
};goto _bafb ;case 10:if _cbcga [_bcgfb ]==70{goto _gfga ;};goto _bafb ;case 11:if _cbcga [_bcgfb ]==33{goto _fdafb ;};goto _bafb ;case 12:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 47:goto _bafb ;case 123:goto _bafb ;case 125:goto _bafb ;};switch {case _cbcga [_bcgfb ]< 48:switch {case _cbcga [_bcgfb ]> 35:if 37<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=45{goto _bafb ;
};case _cbcga [_bcgfb ]>=34:goto _bafb ;};case _cbcga [_bcgfb ]> 57:switch {case _cbcga [_bcgfb ]< 65:if 58<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=63{goto _bafb ;};case _cbcga [_bcgfb ]> 90:if 91<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=94{goto _bafb ;};default:goto _cddfd ;
};default:goto _bddca ;};goto _ceffd ;case 13:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 47:goto _bafb ;case 58:goto _eecg ;case 123:goto _bafb ;case 125:goto _bafb ;};switch {case _cbcga [_bcgfb ]< 48:switch {case _cbcga [_bcgfb ]> 35:if 37<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=45{goto _bafb ;
};case _cbcga [_bcgfb ]>=34:goto _bafb ;};case _cbcga [_bcgfb ]> 57:switch {case _cbcga [_bcgfb ]> 63:if 91<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=94{goto _bafb ;};case _cbcga [_bcgfb ]>=59:goto _bafb ;};default:goto _bddca ;};goto _ceffd ;case 14:if _cbcga [_bcgfb ]==36{goto _dcec ;
};if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _gdcdf ;};goto _bcadg ;case 15:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _gdcdf ;};goto _bcadg ;case 32:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _gdcdf ;};goto _fada ;case 16:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;
case 36:goto _aabb ;case 47:goto _bafb ;case 58:goto _gggf ;case 123:goto _bafb ;case 125:goto _bafb ;};switch {case _cbcga [_bcgfb ]< 59:switch {case _cbcga [_bcgfb ]> 45:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _fbaa ;};case _cbcga [_bcgfb ]>=34:goto _bafb ;
};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]> 90:if 91<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=94{goto _bafb ;};case _cbcga [_bcgfb ]>=65:goto _cddfd ;};default:goto _bafb ;};goto _ceffd ;case 17:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 47:goto _bcadg ;
case 123:goto _bcadg ;case 125:goto _bcadg ;};switch {case _cbcga [_bcgfb ]< 48:switch {case _cbcga [_bcgfb ]> 35:if 37<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=45{goto _bcadg ;};case _cbcga [_bcgfb ]>=34:goto _bcadg ;};case _cbcga [_bcgfb ]> 57:switch {case _cbcga [_bcgfb ]> 63:if 91<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=94{goto _bcadg ;
};case _cbcga [_bcgfb ]>=58:goto _bcadg ;};default:goto _fbaa ;};goto _ceffd ;case 33:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 47:goto _gdfed ;case 123:goto _gdfed ;case 125:goto _gdfed ;};switch {case _cbcga [_bcgfb ]< 48:switch {case _cbcga [_bcgfb ]> 35:if 37<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=45{goto _gdfed ;
};case _cbcga [_bcgfb ]>=34:goto _gdfed ;};case _cbcga [_bcgfb ]> 57:switch {case _cbcga [_bcgfb ]> 63:if 91<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=94{goto _gdfed ;};case _cbcga [_bcgfb ]>=58:goto _gdfed ;};default:goto _fbaa ;};goto _ceffd ;case 18:if _cbcga [_bcgfb ]==36{goto _dcce ;
};if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _bbade ;};goto _bcadg ;case 19:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _bbade ;};goto _bcadg ;case 34:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _bbade ;};goto _aagea ;case 20:switch _cbcga [_bcgfb ]{case 39:goto _bafb ;
case 42:goto _bafb ;case 47:goto _bafb ;case 58:goto _bafb ;case 63:goto _bafb ;};if 91<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=93{goto _bafb ;};goto _gacb ;case 21:switch _cbcga [_bcgfb ]{case 39:goto _aaeeg ;case 42:goto _bafb ;case 47:goto _bafb ;case 58:goto _bafb ;
case 63:goto _bafb ;};if 91<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=93{goto _bafb ;};goto _gacb ;case 22:if _cbcga [_bcgfb ]==33{goto _bfba ;};goto _bafb ;case 35:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 46:goto _aaafb ;case 58:goto _eecg ;case 101:goto _bddag ;
case 123:goto _bcffc ;case 125:goto _bcffc ;};switch {case _cbcga [_bcgfb ]< 48:switch {case _cbcga [_bcgfb ]> 35:if 37<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=47{goto _bcffc ;};case _cbcga [_bcgfb ]>=34:goto _bcffc ;};case _cbcga [_bcgfb ]> 57:switch {case _cbcga [_bcgfb ]> 63:if 91<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=94{goto _bcffc ;
};case _cbcga [_bcgfb ]>=59:goto _bcffc ;};default:goto _aadf ;};goto _ceffd ;case 36:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 47:goto _bcffc ;case 101:goto _bddag ;case 123:goto _bcffc ;case 125:goto _bcffc ;};switch {case _cbcga [_bcgfb ]< 48:switch {case _cbcga [_bcgfb ]> 35:if 37<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=45{goto _bcffc ;
};case _cbcga [_bcgfb ]>=34:goto _bcffc ;};case _cbcga [_bcgfb ]> 57:switch {case _cbcga [_bcgfb ]> 63:if 91<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=94{goto _bcffc ;};case _cbcga [_bcgfb ]>=58:goto _bcffc ;};default:goto _aaafb ;};goto _ceffd ;case 23:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;
case 47:goto _bcebg ;case 123:goto _bcebg ;case 125:goto _bcebg ;};switch {case _cbcga [_bcgfb ]< 48:switch {case _cbcga [_bcgfb ]> 35:if 37<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=45{goto _bcebg ;};case _cbcga [_bcgfb ]>=34:goto _bcebg ;};case _cbcga [_bcgfb ]> 57:switch {case _cbcga [_bcgfb ]> 63:if 91<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=94{goto _bcebg ;
};case _cbcga [_bcgfb ]>=58:goto _bcebg ;};default:goto _gegf ;};goto _ceffd ;case 37:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 47:goto _bcffc ;case 123:goto _bcffc ;case 125:goto _bcffc ;};switch {case _cbcga [_bcgfb ]< 48:switch {case _cbcga [_bcgfb ]> 35:if 37<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=45{goto _bcffc ;
};case _cbcga [_bcgfb ]>=34:goto _bcffc ;};case _cbcga [_bcgfb ]> 57:switch {case _cbcga [_bcgfb ]> 63:if 91<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=94{goto _bcffc ;};case _cbcga [_bcgfb ]>=58:goto _bcffc ;};default:goto _gegf ;};goto _ceffd ;case 38:switch _cbcga [_bcgfb ]{case 61:goto _aeccg ;
case 62:goto _agcbc ;};goto _efdge ;case 39:if _cbcga [_bcgfb ]==61{goto _cafd ;};goto _gdbd ;case 24:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 36:goto _aabb ;case 40:goto _faggg ;case 46:goto _bedadd ;case 58:goto _gggf ;case 92:goto _feff ;case 95:goto _ecac ;
case 123:goto _bafb ;case 125:goto _bafb ;};switch {case _cbcga [_bcgfb ]< 59:switch {case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _gbbae ;};case _cbcga [_bcgfb ]>=34:goto _bafb ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _acged ;
};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;};default:goto _bafb ;};default:goto _bafb ;};goto _ceffd ;case 40:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 40:goto _faggg ;case 46:goto _bedadd ;case 92:goto _feff ;
case 95:goto _ecac ;case 123:goto _dddab ;case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 58:switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _dddab ;};case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _bedadd ;
};default:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _bedadd ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;};default:goto _dddab ;
};default:goto _dddab ;};goto _ceffd ;case 41:switch _cbcga [_bcgfb ]{case 46:goto _feff ;case 92:goto _feff ;case 95:goto _feff ;};switch {case _cbcga [_bcgfb ]< 65:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _feff ;};case _cbcga [_bcgfb ]> 90:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _feff ;
};default:goto _feff ;};goto _dddab ;case 42:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 46:goto _ecac ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _dddab ;case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 58:switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _dddab ;
};case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _ecac ;};default:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _ecac ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;
};default:goto _dddab ;};default:goto _dddab ;};goto _ceffd ;case 43:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 40:goto _faggg ;case 46:goto _bedadd ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _gdfed ;case 125:goto _gdfed ;};switch {case _cbcga [_bcgfb ]< 58:switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _gdfed ;
};case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _gbbae ;};default:goto _gdfed ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _bedadd ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;
};default:goto _gdfed ;};default:goto _gdfed ;};goto _ceffd ;case 44:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 36:goto _aabb ;case 40:goto _faggg ;case 46:goto _bedadd ;case 58:goto _gggf ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _bcadg ;
case 125:goto _bcadg ;};switch {case _cbcga [_bcgfb ]< 59:switch {case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _gbbae ;};case _cbcga [_bcgfb ]>=34:goto _bcadg ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _acged ;
};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;};default:goto _bcadg ;};default:goto _bcadg ;};goto _ceffd ;case 25:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 36:goto _aabb ;case 40:goto _faggg ;case 46:goto _bedadd ;
case 58:goto _gggf ;case 65:goto _egfac ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _bafb ;case 125:goto _bafb ;};switch {case _cbcga [_bcgfb ]< 59:switch {case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _gbbae ;
};case _cbcga [_bcgfb ]>=34:goto _bafb ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 66<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _acged ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;};default:goto _bafb ;
};default:goto _bafb ;};goto _ceffd ;case 45:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 36:goto _aabb ;case 40:goto _faggg ;case 46:goto _bedadd ;case 58:goto _gggf ;case 76:goto _gbfda ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _dddab ;
case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 59:switch {case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _gbbae ;};case _cbcga [_bcgfb ]>=34:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _acged ;
};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;};default:goto _dddab ;};default:goto _dddab ;};goto _ceffd ;case 46:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 36:goto _aabb ;case 40:goto _faggg ;case 46:goto _bedadd ;
case 58:goto _gggf ;case 83:goto _ggeb ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _dddab ;case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 59:switch {case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _gbbae ;
};case _cbcga [_bcgfb ]>=34:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _acged ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;};default:goto _dddab ;
};default:goto _dddab ;};goto _ceffd ;case 47:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 36:goto _aabb ;case 40:goto _faggg ;case 46:goto _bedadd ;case 58:goto _gggf ;case 69:goto _cdgg ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _dddab ;
case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 59:switch {case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _gbbae ;};case _cbcga [_bcgfb ]>=34:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _acged ;
};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;};default:goto _dddab ;};default:goto _dddab ;};goto _ceffd ;case 26:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 36:goto _aabb ;case 40:goto _faggg ;case 46:goto _bedadd ;
case 58:goto _gggf ;case 79:goto _cdafg ;case 82:goto _eeccc ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _bafb ;case 125:goto _bafb ;};switch {case _cbcga [_bcgfb ]< 59:switch {case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _gbbae ;
};case _cbcga [_bcgfb ]>=34:goto _bafb ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _acged ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;};default:goto _bafb ;
};default:goto _bafb ;};goto _ceffd ;case 48:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 36:goto _aabb ;case 40:goto _faggg ;case 46:goto _bedadd ;case 58:goto _gggf ;case 68:goto _eabdg ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _dddab ;
case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 59:switch {case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _gbbae ;};case _cbcga [_bcgfb ]>=34:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _acged ;
};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;};default:goto _dddab ;};default:goto _dddab ;};goto _ceffd ;case 49:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 36:goto _aabb ;case 40:goto _faggg ;case 46:goto _bedadd ;
case 58:goto _gggf ;case 79:goto _daaca ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _dddab ;case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 59:switch {case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _gbbae ;
};case _cbcga [_bcgfb ]>=34:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _acged ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;};default:goto _dddab ;
};default:goto _dddab ;};goto _ceffd ;case 50:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 36:goto _aabb ;case 40:goto _faggg ;case 46:goto _bedadd ;case 58:goto _gggf ;case 85:goto _ggeb ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _dddab ;
case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 59:switch {case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _gbbae ;};case _cbcga [_bcgfb ]>=34:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _acged ;
};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;};default:goto _dddab ;};default:goto _dddab ;};goto _ceffd ;case 27:switch _cbcga [_bcgfb ]{case 46:goto _feff ;case 92:goto _feff ;case 95:goto _feff ;};switch {case _cbcga [_bcgfb ]< 65:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _feff ;
};case _cbcga [_bcgfb ]> 90:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _feff ;};default:goto _feff ;};goto _bafb ;case 28:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 46:goto _ecac ;case 92:goto _feff ;case 95:goto _ecac ;case 120:goto _efbg ;
case 123:goto _bafb ;case 125:goto _bafb ;};switch {case _cbcga [_bcgfb ]< 58:switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _bafb ;};case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _ecac ;
};default:goto _bafb ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _ecac ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;};default:goto _bafb ;};
default:goto _bafb ;};goto _ceffd ;case 51:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 46:goto _ecac ;case 92:goto _feff ;case 95:goto _ecac ;case 108:goto _ffbd ;case 123:goto _dddab ;case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 58:switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _dddab ;
};case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _ecac ;};default:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _ecac ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;
};default:goto _dddab ;};default:goto _dddab ;};goto _ceffd ;case 52:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 46:goto _ecac ;case 92:goto _feff ;case 95:goto _ecac ;case 102:goto _ggfce ;case 110:goto _eagg ;case 123:goto _dddab ;case 125:goto _dddab ;
};switch {case _cbcga [_bcgfb ]< 58:switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _dddab ;};case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _ecac ;};default:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _ecac ;
};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;};default:goto _dddab ;};default:goto _dddab ;};goto _ceffd ;case 53:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 46:goto _ecac ;case 92:goto _feff ;case 95:goto _ecac ;
case 110:goto _cfccd ;case 123:goto _dddab ;case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 58:switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _dddab ;};case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _ecac ;
};default:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _ecac ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;};default:goto _dddab ;
};default:goto _dddab ;};goto _ceffd ;case 54:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 46:goto _afad ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _dddab ;case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 58:switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _dddab ;
};case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _ecac ;};default:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _ecac ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;
};default:goto _dddab ;};default:goto _dddab ;};goto _ceffd ;case 55:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 46:goto _ecac ;case 92:goto _feff ;case 95:goto _ddfef ;case 123:goto _dddab ;case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 58:switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _dddab ;
};case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _ecac ;};default:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _ddfef ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;
};default:goto _dddab ;};default:goto _dddab ;};goto _ceffd ;case 56:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 40:goto _gaba ;case 46:goto _ddfef ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _dddab ;case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 58:switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _dddab ;
};case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _ddfef ;};default:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _ddfef ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;
};default:goto _dddab ;};default:goto _dddab ;};goto _ceffd ;case 57:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 46:goto _ecac ;case 92:goto _feff ;case 95:goto _ecac ;case 109:goto _defcg ;case 123:goto _dddab ;case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 58:switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _dddab ;
};case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _ecac ;};default:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _ecac ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;
};default:goto _dddab ;};default:goto _dddab ;};goto _ceffd ;case 58:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 46:goto _ccgdf ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _dddab ;case 125:goto _dddab ;};switch {case _cbcga [_bcgfb ]< 58:switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _dddab ;
};case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _ecac ;};default:goto _dddab ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _ecac ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;
};default:goto _dddab ;};default:goto _dddab ;};goto _ceffd ;case 59:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 46:goto _ecac ;case 92:goto _feff ;case 95:goto _aagac ;case 123:goto _bcadg ;case 125:goto _bcadg ;};switch {case _cbcga [_bcgfb ]< 58:switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _bcadg ;
};case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _ecac ;};default:goto _bcadg ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _aagac ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;
};default:goto _bcadg ;};default:goto _bcadg ;};goto _ceffd ;case 29:switch _cbcga [_bcgfb ]{case 33:goto _baecb ;case 46:goto _ecac ;case 92:goto _feff ;case 95:goto _ecac ;case 123:goto _bafb ;case 125:goto _bafb ;};switch {case _cbcga [_bcgfb ]< 58:switch {case _cbcga [_bcgfb ]< 37:if 34<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=35{goto _bafb ;
};case _cbcga [_bcgfb ]> 47:if 48<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=57{goto _ecac ;};default:goto _bafb ;};case _cbcga [_bcgfb ]> 63:switch {case _cbcga [_bcgfb ]< 91:if 65<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=90{goto _ecac ;};case _cbcga [_bcgfb ]> 94:if 97<=_cbcga [_bcgfb ]&&_cbcga [_bcgfb ]<=122{goto _ecac ;
};default:goto _bafb ;};default:goto _bafb ;};goto _ceffd ;};_bafb :_bccc =0;goto _cgeba ;_ceffd :_bccc =1;goto _cgeba ;_gbaae :_bccc =2;goto _cgeba ;_gcffa :_bccc =3;goto _cgeba ;_ffcgf :_bccc =4;goto _cgeba ;_adacb :_bccc =5;goto _cgeba ;_bcfeg :_bccc =6;
goto _cgeba ;_ecfga :_bccc =7;goto _cgeba ;_geacg :_bccc =8;goto _cgeba ;_afbgf :_bccc =9;goto _cgeba ;_cbee :_bccc =10;goto _cgeba ;_gfga :_bccc =11;goto _cgeba ;_ebbc :_bccc =12;goto _cgeba ;_bddca :_bccc =13;goto _cgeba ;_eecg :_bccc =14;goto _cgeba ;
_dcec :_bccc =15;goto _cgeba ;_cddfd :_bccc =16;goto _cgeba ;_aabb :_bccc =17;goto _cgeba ;_gggf :_bccc =18;goto _cgeba ;_dcce :_bccc =19;goto _cgeba ;_fbffa :_bccc =20;goto _cgeba ;_gacb :_bccc =21;goto _cgeba ;_aaeeg :_bccc =22;goto _cgeba ;_bddag :_bccc =23;
goto _cgeba ;_gbgdg :_bccc =24;goto _cgeba ;_ebfbed :_bccc =25;goto _cgeba ;_baab :_bccc =26;goto _cgeba ;_dcac :_bccc =27;goto _cgeba ;_cffg :_bccc =28;goto _cgeba ;_fede :_bccc =29;goto _cgeba ;_bcadg :_bccc =30;goto _cdbf ;_baecb :_bccc =30;goto _bbba ;
_bcggfb :_bccc =30;goto _abccc ;_fdafb :_bccc =30;goto _gfef ;_bfba :_bccc =30;goto _fegd ;_bcebg :_bccc =30;goto _gdbg ;_faggg :_bccc =30;goto _deede ;_aafd :_bccc =30;goto _cdff ;_gbdf :_bccc =30;goto _befe ;_aeffc :_bccc =30;goto _afbga ;_gdeff :_bccc =30;
goto _ggfda ;_dagfd :_bccc =30;goto _aeceg ;_acgdd :_bccc =30;goto _aecdec ;_dffae :_bccc =30;goto _edfaf ;_acdd :_bccc =30;goto _gcccg ;_fcbgb :_bccc =30;goto _afgf ;_ebeg :_bccc =30;goto _gfbf ;_ffegd :_bccc =30;goto _eecbe ;_bcgga :_bccc =30;goto _edbbf ;
_cfaedb :_bccc =30;goto _acce ;_gdeb :_bccc =30;goto _egada ;_bcggc :_bccc =30;goto _dddf ;_fada :_bccc =30;goto _bfda ;_gdfed :_bccc =30;goto _ecggb ;_aagea :_bccc =30;goto _aaebf ;_bcffc :_bccc =30;goto _cdee ;_efdge :_bccc =30;goto _eeaba ;_aeccg :_bccc =30;
goto _gccdd ;_agcbc :_bccc =30;goto _adgg ;_gdbd :_bccc =30;goto _dcfg ;_cafd :_bccc =30;goto _beacb ;_dddab :_bccc =30;goto _cacc ;_gaba :_bccc =30;goto _agcfc ;_cfdf :_bccc =31;goto _aaggb ;_gdcdf :_bccc =32;goto _cgeba ;_fbaa :_bccc =33;goto _egfba ;
_bbade :_bccc =34;goto _cgeba ;_aadf :_bccc =35;goto _bgafa ;_aaafb :_bccc =36;goto _bgafa ;_gegf :_bccc =37;goto _bgafa ;_ececf :_bccc =38;goto _cgeba ;_badfa :_bccc =39;goto _cgeba ;_bedadd :_bccc =40;goto _adbeg ;_feff :_bccc =41;goto _cgeba ;_ecac :_bccc =42;
goto _adbeg ;_gbbae :_bccc =43;goto _egfba ;_acged :_bccc =44;goto _adbeg ;_cdgg :_bccc =44;goto _bfgge ;_daaca :_bccc =44;goto _gdca ;_egfac :_bccc =45;goto _adbeg ;_gbfda :_bccc =46;goto _adbeg ;_ggeb :_bccc =47;goto _adbeg ;_cdafg :_bccc =48;goto _adbeg ;
_eabdg :_bccc =49;goto _adbeg ;_eeccc :_bccc =50;goto _adbeg ;_efbg :_bccc =51;goto _adbeg ;_ffbd :_bccc =52;goto _adbeg ;_ggfce :_bccc =53;goto _adbeg ;_cfccd :_bccc =54;goto _adbeg ;_afad :_bccc =55;goto _adbeg ;_ddfef :_bccc =56;goto _adbeg ;_eagg :_bccc =57;
goto _adbeg ;_defcg :_bccc =58;goto _adbeg ;_ccgdf :_bccc =59;goto _adbeg ;_aagac :_bccc =59;goto _ggbac ;_abccc :_aaccg =3;goto _gcga ;_gfef :_aaccg =5;goto _gcga ;_bbba :_aaccg =7;goto _gcga ;_fegd :_aaccg =9;goto _gcga ;_deede :_aaccg =11;goto _gcga ;
_agcfc :_aaccg =13;goto _gcga ;_cdff :_aaccg =15;goto _gcga ;_acce :_aaccg =17;goto _gcga ;_egada :_aaccg =19;goto _gcga ;_befe :_aaccg =21;goto _gcga ;_afbga :_aaccg =23;goto _gcga ;_aeceg :_aaccg =25;goto _gcga ;_edfaf :_aaccg =27;goto _gcga ;_ggfda :_aaccg =29;
goto _gcga ;_gcccg :_aaccg =31;goto _gcga ;_edbbf :_aaccg =33;goto _gcga ;_eecbe :_aaccg =35;goto _gcga ;_gccdd :_aaccg =37;goto _gcga ;_beacb :_aaccg =39;goto _gcga ;_adgg :_aaccg =41;goto _gcga ;_afgf :_aaccg =43;goto _gcga ;_gfbf :_aaccg =45;goto _gcga ;
_aecdec :_aaccg =47;goto _gcga ;_cdee :_aaccg =49;goto _gcga ;_ecggb :_aaccg =51;goto _gcga ;_bfda :_aaccg =53;goto _gcga ;_aaebf :_aaccg =55;goto _gcga ;_cacc :_aaccg =57;goto _gcga ;_dddf :_aaccg =59;goto _gcga ;_eeaba :_aaccg =61;goto _gcga ;_dcfg :_aaccg =63;
goto _gcga ;_gdbg :_aaccg =65;goto _gcga ;_cdbf :_aaccg =67;goto _gcga ;_bfgge :_aaccg =72;goto _gcga ;_bgafa :_aaccg =75;goto _gcga ;_egfba :_aaccg =78;goto _gcga ;_gdca :_aaccg =81;goto _gcga ;_ggbac :_aaccg =84;goto _gcga ;_adbeg :_aaccg =87;goto _gcga ;
_aaggb :_aaccg =90;goto _gcga ;_gcga :_gddd =uint (_gecf [_aaccg ]);_aaccg ++;for ;_gddd > 0;_gddd --{_aaccg ++;switch _gecf [_aaccg -1]{case 3:_cbead =_bcgfb +1;case 4:_cafa =1;case 5:_cafa =2;case 6:_cafa =3;case 7:_cafa =4;case 8:_cafa =11;case 9:_cafa =14;
case 10:_cafa =15;case 11:_cbead =_bcgfb +1;{_eceed .emit (_dadd ,_cbcga [_fecdc :_cbead ]);};case 12:_cbead =_bcgfb +1;{_eceed .emit (_edcc ,_cbcga [_fecdc :_cbead ]);};case 13:_cbead =_bcgfb +1;{_eceed .emit (_fdaf ,_cbcga [_fecdc :_cbead -1]);};case 14:_cbead =_bcgfb +1;
{_eceed .emit (_fdaf ,_cbcga [_fecdc +1:_cbead -2]);};case 15:_cbead =_bcgfb +1;{_eceed .emit (_dfega ,_cbcga [_fecdc :_cbead -1]);};case 16:_cbead =_bcgfb +1;{_eceed .emit (_dfega ,_cbcga [_fecdc :_cbead -1]);};case 17:_cbead =_bcgfb +1;{_eceed .emit (_fcacd ,_cbcga [_fecdc :_cbead ]);
};case 18:_cbead =_bcgfb +1;{_eceed .emit (_egfbg ,_cbcga [_fecdc :_cbead ]);};case 19:_cbead =_bcgfb +1;{_eceed .emit (_decba ,_cbcga [_fecdc :_cbead ]);};case 20:_cbead =_bcgfb +1;{_eceed .emit (_fbfe ,_cbcga [_fecdc :_cbead ]);};case 21:_cbead =_bcgfb +1;
{_eceed .emit (_badcd ,_cbcga [_fecdc :_cbead ]);};case 22:_cbead =_bcgfb +1;{_eceed .emit (_adbd ,_cbcga [_fecdc :_cbead ]);};case 23:_cbead =_bcgfb +1;{_eceed .emit (_ccadf ,_cbcga [_fecdc :_cbead ]);};case 24:_cbead =_bcgfb +1;{_eceed .emit (_eacaa ,_cbcga [_fecdc :_cbead ]);
};case 25:_cbead =_bcgfb +1;{_eceed .emit (_eebaf ,_cbcga [_fecdc :_cbead ]);};case 26:_cbead =_bcgfb +1;{_eceed .emit (_acdfa ,_cbcga [_fecdc :_cbead ]);};case 27:_cbead =_bcgfb +1;{_eceed .emit (_gdcd ,_cbcga [_fecdc :_cbead ]);};case 28:_cbead =_bcgfb +1;
{_eceed .emit (_gdabfg ,_cbcga [_fecdc :_cbead ]);};case 29:_cbead =_bcgfb +1;{_eceed .emit (_cfaee ,_cbcga [_fecdc :_cbead ]);};case 30:_cbead =_bcgfb +1;{_eceed .emit (_bbeb ,_cbcga [_fecdc :_cbead ]);};case 31:_cbead =_bcgfb +1;{_eceed .emit (_addac ,_cbcga [_fecdc :_cbead ]);
};case 32:_cbead =_bcgfb +1;{_eceed .emit (_bggd ,_cbcga [_fecdc :_cbead ]);};case 33:_cbead =_bcgfb +1;{_eceed .emit (_efcdf ,_cbcga [_fecdc :_cbead ]);};case 34:_cbead =_bcgfb ;_bcgfb --;{_eceed .emit (_fdcdg ,_cbcga [_fecdc :_cbead ]);};case 35:_cbead =_bcgfb ;
_bcgfb --;{_eceed .emit (_ddbcd ,_cbcga [_fecdc :_cbead ]);};case 36:_cbead =_bcgfb ;_bcgfb --;{_eceed .emit (_addfg ,_cbcga [_fecdc :_cbead ]);};case 37:_cbead =_bcgfb ;_bcgfb --;{_eceed .emit (_gccg ,_cbcga [_fecdc :_cbead ]);};case 38:_cbead =_bcgfb ;
_bcgfb --;{_eceed .emit (_fbcf ,_cbcga [_fecdc :_cbead ]);};case 39:_cbead =_bcgfb ;_bcgfb --;{_eceed .emit (_bfdb ,_cbcga [_fecdc +1:_cbead -1]);};case 40:_cbead =_bcgfb ;_bcgfb --;{_eceed .emit (_eedff ,_cbcga [_fecdc :_cbead ]);};case 41:_cbead =_bcgfb ;
_bcgfb --;{_eceed .emit (_dgga ,_cbcga [_fecdc :_cbead ]);};case 42:_bcgfb =(_cbead )-1;{_eceed .emit (_fdcdg ,_cbcga [_fecdc :_cbead ]);};case 43:switch _cafa {case 0:{_bccc =0;goto _cgeba ;};case 1:{_bcgfb =(_cbead )-1;_eceed .emit (_afbd ,_cbcga [_fecdc :_cbead ]);
};case 2:{_bcgfb =(_cbead )-1;_eceed .emit (_fdcdg ,_cbcga [_fecdc :_cbead ]);};case 3:{_bcgfb =(_cbead )-1;_eceed .emit (_ddbcd ,_cbcga [_fecdc :_cbead ]);};case 4:{_bcgfb =(_cbead )-1;_eceed .emit (_bbde ,_cbcga [_fecdc :_cbead ]);};case 11:{_bcgfb =(_cbead )-1;
_eceed .emit (_bcca ,_cbcga [_fecdc :_cbead ]);};case 14:{_bcgfb =(_cbead )-1;_eceed .emit (_fbcf ,_cbcga [_fecdc :_cbead ]);};case 15:{_bcgfb =(_cbead )-1;_eceed .emit (_bfdb ,_cbcga [_fecdc +1:_cbead -1]);};};};};goto _cgeba ;_cgeba :_aaccg =int (_gaecc [_bccc ]);
_gddd =uint (_gecf [_aaccg ]);_aaccg ++;for ;_gddd > 0;_gddd --{_aaccg ++;switch _gecf [_aaccg -1]{case 0:_fecdc =0;case 1:_cafa =0;};};if _bccc ==0{goto _abbab ;};if _bcgfb ++;_bcgfb !=_ebadb {goto _dfadd ;};_eddae :{};if _bcgfb ==_bfcd {switch _bccc {case 1:goto _bcadg ;
case 2:goto _bcadg ;case 31:goto _bcggc ;case 14:goto _bcadg ;case 15:goto _bcadg ;case 32:goto _fada ;case 17:goto _bcadg ;case 33:goto _gdfed ;case 18:goto _bcadg ;case 19:goto _bcadg ;case 34:goto _aagea ;case 35:goto _bcffc ;case 36:goto _bcffc ;case 23:goto _bcebg ;
case 37:goto _bcffc ;case 38:goto _efdge ;case 39:goto _gdbd ;case 40:goto _dddab ;case 41:goto _dddab ;case 42:goto _dddab ;case 43:goto _gdfed ;case 44:goto _bcadg ;case 45:goto _dddab ;case 46:goto _dddab ;case 47:goto _dddab ;case 48:goto _dddab ;case 49:goto _dddab ;
case 50:goto _dddab ;case 51:goto _dddab ;case 52:goto _dddab ;case 53:goto _dddab ;case 54:goto _dddab ;case 55:goto _dddab ;case 56:goto _dddab ;case 57:goto _dddab ;case 58:goto _dddab ;case 59:goto _bcadg ;};};_abbab :{};};if _fecdc > 0{copy (_cbcga [0:],_cbcga [_fecdc :]);
};};_ =_bfcd ;if _bccc ==_agbad {_eceed .emit (_fdac ,nil );};close (_eceed ._fdada );};const _gdabfg =57372;

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_cd .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_dbfd ,_gcdb :=_gae (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _gcdb .Type ==ResultTypeError {return _gcdb ;};_adbge :=_dbfd ._ebce ;_fceec :=_dbfd ._gaga ;_dcf :=_dbfd ._dgca ;_ggba :=_dbfd ._bagd ;_fbbb :=_dbfd ._defb ;
_dge :=_dbfd ._fgeee ;_aage :=_beca (_adbge ,_fceec ,_dcf ,0,_dge );_cfgf :=0.0;if _ggba ==1{if _dge ==0{_cfgf =-_dcf ;_ggba ++;};};for _cadf :=_ggba ;_cadf <=_fbbb ;_cadf ++{if _dge ==1{_cfgf +=_dbgb (_adbge ,_cadf -2,_aage ,_dcf ,1)-_aage ;}else {_cfgf +=_dbgb (_adbge ,_cadf -1,_aage ,_dcf ,0);
};};_cfgf *=_adbge ;return MakeNumberResult (_cfgf );};const _bdfg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";


// Update returns the same object as updating sheet references does not affect Number.
func (_ffafb Number )Update (q *_be .UpdateQuery )Expression {return _ffafb };

// Eval evaluates and returns the result of a constant array expression.
func (_ee ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_aba :=[][]Result {};for _ ,_eg :=range _ee ._agfc {_cdda :=[]Result {};for _ ,_gd :=range _eg {_cdda =append (_cdda ,_gd .Eval (ctx ,ev ));};_aba =append (_aba ,_cdda );};return MakeArrayResult (_aba );
};func (_gdfdb *noCache )SetCache (key string ,value Result ){};func _cfcca (_abab ,_cegbgf float64 )bool {return _cd .Abs (_abab -_cegbgf )< 1.0e-6};func _bdfge (_fgce _bd .Time )_bd .Time {_fgce =_fgce .UTC ();return _bd .Date (_fgce .Year (),_fgce .Month (),_fgce .Day (),_fgce .Hour (),_fgce .Minute (),_fgce .Second (),_fgce .Nanosecond (),_bd .Local );
};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_ggcc :=_eegg (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _ggcc .Type !=ResultTypeEmpty {return _ggcc ;};_becg :=_eedca (args [1:]);_fbcd :=_cd .MaxFloat64 ;_gbcb :=_gfcf (args [0]);for _ ,_fgge :=range _becg {_dcegf :=_gbcb [_fgge ._cbfc ][_fgge ._bcfgb ].ValueNumber ;
if _fbcd > _dcegf {_fbcd =_dcegf ;};};if _fbcd ==_cd .MaxFloat64 {_fbcd =0;};return MakeNumberResult (float64 (_fbcd ));};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _cegda (args ,true )};var _dbde =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _e .Reader )Expression {_cfcb :=&plex {_bagbf :LexReader (r )};_dggad (_cfcb );if _cfcb ._cafb !=""{return nil ;};return _cfcb ._bbgb ;};var _gedc *_a .Rand ;

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _egdfb (args ,true )};const (_agfa countMode =iota ;_faaaa ;_bggc ;);type defEval struct{evCache ;_caaa bool ;};const _edcc =57356;

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fcae :=_aacg (args );_dd .Float64s (_fcae );var _fgcee float64 ;if len (_fcae )%2==0{_fgcee =(_fcae [len (_fcae )/2-1]+_fcae [len (_fcae )/2])/2;}else {_fgcee =_fcae [len (_fcae )/2];};return MakeNumberResult (_fgcee );};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_ebgge Result )ListValues ()[]Result {if _ebgge .Type ==ResultTypeArray {_gfecb :=[]Result {};for _ ,_bbfb :=range _ebgge .ValueArray {for _ ,_aagd :=range _bbfb {_gfecb =append (_gfecb ,_aagd );};};return _gfecb ;};if _ebgge .Type ==ResultTypeList {return _ebgge .ValueList ;
};return nil ;};const _dgga =57371;

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gbdag :=args [0].ValueNumber ;if _gbdag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_egdfa :=args [1].ValueNumber ;if _egdfa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bgeg :=args [2].ValueNumber ;if _bgeg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");
};return MakeNumberResult (_cd .Pow (_bgeg /_egdfa ,1/_gbdag )-1);};const _bbeb =57374;

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_bdge :=len (args );if _bdge !=6&&_bdge !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_edag ,_egeb ,_bcbf :=_bbd (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _bcbf .Type ==ResultTypeError {return _bcbf ;};_dbgbc :=args [2];if _dbgbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dbfa :=_dbgbc .ValueNumber ;if _dbfa < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_ccfca :=args [3];if _ccfca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ceff :=_ccfca .ValueNumber ;if _ceff <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_acab :=args [4];if _acab .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_cbda :=_acab .ValueNumber ;if _cbda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_ggd :=args [5];
if _ggd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gfcg :=float64 (int (_ggd .ValueNumber ));if !_cbae (_gfcg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ceae :=0;if _bdge ==7&&args [6].Type !=ResultTypeEmpty {_deef :=args [6];
if _deef .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ceae =int (_deef .ValueNumber );
if !_fgcgb (_ceae ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_gee :=0.0;
_abbc :=0.0;_aead :=1.0;_fbfc ,_bcbf :=_gadb (_edag ,_egeb ,_dbfa ,_abbc ,_cbda ,_gfcg ,_ceae );if _bcbf .Type ==ResultTypeError {return _bcbf ;};_dbdb ,_bcbf :=_gadb (_edag ,_egeb ,_dbfa ,_aead ,_cbda ,_gfcg ,_ceae );if _bcbf .Type ==ResultTypeError {return _bcbf ;
};_eca :=(_aead -_abbc )*0.5;for _ebgg :=0;_ebgg < 100&&_gee !=_ceff ;_ebgg ++{_gee ,_bcbf =_gadb (_edag ,_egeb ,_dbfa ,_eca ,_cbda ,_gfcg ,_ceae );if _bcbf .Type ==ResultTypeError {return _bcbf ;};if _ceff ==_fbfc {return MakeNumberResult (_abbc );}else if _ceff ==_dbdb {return MakeNumberResult (_aead );
}else if _ceff ==_gee {return MakeNumberResult (_eca );}else if _ceff < _dbdb {_aead *=2.0;_dbdb ,_bcbf =_gadb (_edag ,_egeb ,_dbfa ,_aead ,_cbda ,_gfcg ,_ceae );if _bcbf .Type ==ResultTypeError {return _bcbf ;};_eca =(_aead -_abbc )*0.5;}else {if _ceff < _gee {_abbc =_eca ;
_fbfc =_gee ;}else {_aead =_eca ;_dbdb =_gee ;};_eca =_aead -(_aead -_abbc )*((_ceff -_dbdb )/(_fbfc -_dbdb ));};};return MakeNumberResult (_eca );};func (_fdcdb PrefixVerticalRange )verticalRangeReference (_acbf string )string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_acbf ,_fdcdb ._eafdf ,_fdcdb ._bcdae );
};

// Reference returns an invalid reference for Error.
func (_cab Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Reference returns a string reference value to a vertical range with prefix.
func (_gefc PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_dbdd :=_gefc ._cacbb .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_gefc .verticalRangeReference (_dbdd .Value )};};

// Eval evaluates and returns a boolean.
func (_beg Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_beg ._cgab )};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};_faaga :=args [0].ValueNumber ;if _faaga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");
};_gcdbf :=float64 (int (args [1].ValueNumber ));if _gcdbf < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult (_cd .Pow ((1+_faaga /_gcdbf ),_gcdbf )-1);};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_ddef (args ,_agfa ))};func _ddef (_cccee []Result ,_dfbge countMode )float64 {_bfgg :=0.0;for _ ,_gafe :=range _cccee {switch _gafe .Type {case ResultTypeNumber :if _dfbge ==_faaaa ||(_dfbge ==_agfa &&!_gafe .IsBoolean ){_bfgg ++;
};case ResultTypeList ,ResultTypeArray :_bfgg +=_ddef (_gafe .ListValues (),_dfbge );case ResultTypeString :if _dfbge ==_faaaa {_bfgg ++;};case ResultTypeEmpty :if _dfbge ==_bggc {_bfgg ++;};};};return _bfgg ;};var _fcefb =[...]struct{_agaeg int ;_eegb int ;
_bebd string ;}{};func _cag ()evCache {_dea :=evCache {};_dea ._abc =make (map[string ]Result );_dea ._cad =&_cb .Mutex {};return _dea ;};func init (){_fbac ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );
RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );
RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );
RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );
RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};var _cfbe =[...]int {-1,1,1,-1,-2,0};

// Reference returns a string reference value to a named range.
func (_eaddc NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_eaddc ._eaee };};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_gcdff :=MakeNumberResult (0);for _ ,_effe :=range args {_effe =_effe .AsNumber ();switch _effe .Type {case ResultTypeNumber :_gcdff .ValueNumber +=_effe .ValueNumber ;case ResultTypeList ,ResultTypeArray :_dfgb :=Sum (_effe .ListValues ());
if _dfgb .Type !=ResultTypeNumber {return _dfgb ;};_gcdff .ValueNumber +=_dfgb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _effe ;case ResultTypeEmpty :default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_effe .Type ));
};};return _gcdff ;};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_cacbb Expression ;_eafdf ,_bcdae string ;};func _dbgb (_gfaa ,_gbgda ,_bfga ,_cgcf float64 ,_egg int )float64 {var _agag float64 ;if _gfaa ==0{_agag =_cgcf +_bfga *_gbgda ;}else {_dcaa :=_cd .Pow (1+_gfaa ,_gbgda );if _egg ==1{_agag =_cgcf *_dcaa +_bfga *(1+_gfaa )*(_dcaa -1)/_gfaa ;
}else {_agag =_cgcf *_dcaa +_bfga *(_dcaa -1)/_gfaa ;};};return -_agag ;};

// Reference returns a string reference value to a vertical range.
func (_debff VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_debff .verticalRangeReference ()};};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bgfc :=false ;for _ ,_cdaa :=range args {switch _cdaa .Type {case ResultTypeList ,ResultTypeArray :_bcaeg :=Or (_cdaa .ListValues ());if _bcaeg .Type ==ResultTypeError {return _bcaeg ;};if _bcaeg .ValueNumber !=0{_bgfc =true ;};case ResultTypeNumber :if _cdaa .ValueNumber !=0{_bgfc =true ;
};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _cdaa ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");
};};return MakeBoolResult (_bgfc );};func _beca (_bga ,_deg ,_faba ,_gbec float64 ,_fcg int )float64 {var _edfb float64 ;if _bga ==0{_edfb =(_faba +_gbec )/_deg ;}else {_cdce :=_cd .Pow (1+_bga ,_deg );if _fcg ==1{_edfb =(_gbec *_bga /(_cdce -1)+_faba *_bga /(1-1/_cdce ))/(1+_bga );
}else {_edfb =_gbec *_bga /(_cdce -1)+_faba *_bga /(1-1/_cdce );};};return -_edfb ;};func _eddgd ()yyParser {return &yyParserImpl {}};func _dccf (_agefe Result )bool {_eceaa :=_agefe .Type ;return _eceaa !=ResultTypeArray &&_eceaa !=ResultTypeList ;};var _gec =[]*_fe .Regexp {};


// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_ffdb ,_aageg ,_egbf :=_cbfe (from ,to );if _egbf !=nil {_cgg .Log .Debug (_egbf .Error ());return NewError (_egbf .Error ());};return Range {_edegf :_ffdb ,_acfgb :_aageg };};

// Match implements the MATCH function.
func Match (args []Result )Result {_cccf :=len (args );if _cccf !=2&&_cccf !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_daeg :=1;if _cccf ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_gef :=args [2].ValueNumber ;if _gef ==-1||_gef ==0{_daeg =int (_gef );};};_bbdg :=args [1];var _cbab []Result ;switch _bbdg .Type {case ResultTypeList :_cbab =_bbdg .ValueList ;case ResultTypeArray :_acadb :=_bbdg .ValueArray ;for _ ,_agdf :=range _acadb {if len (_agdf )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_cbab =append (_cbab ,_agdf [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_fafd :=_ddgge (args [0]);switch _daeg {case 0:for _abge ,_cbbd :=range _cbab {if _adba (_cbbd ,_fafd ){return MakeNumberResult (float64 (_abge +1));};};case -1:for _ceab :=0;_ceab < len (_cbab );_ceab ++{if _adba (_cbab [_ceab ],_fafd ){return MakeNumberResult (float64 (_ceab +1));
};if _fafd ._eeaad &&(_cbab [_ceab ].ValueNumber < _fafd ._cbdbd ){if _ceab ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_ceab ));};};case 1:for _fbdd :=0;_fbdd < len (_cbab );_fbdd ++{if _adba (_cbab [_fbdd ],_fafd ){return MakeNumberResult (float64 (_fbdd +1));
};if _fafd ._eeaad &&(_cbab [_fbdd ].ValueNumber > _fafd ._cbdbd ){if _fbdd ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_fbdd ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_agcb :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_agcb =int (args [1].ValueNumber );if _agcb < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");
};if _agcb ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_cedad :=args [0].Value ();
_bfdd :=len (_cedad );if _agcb > _bfdd {return MakeStringResult (_cedad );};return MakeStringResult (_cedad [_bfdd -_agcb :_bfdd ]);};

// Error is called in the case of parsing error and saves an error to a plex.
func (_gccff *plex )Error (s string ){_cgg .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_gccff ._cafb =s ;};

// String returns a string representation of a vertical range.
func (_bfcb VerticalRange )String ()string {return _bfcb .verticalRangeReference ()};func _bdbg (_dfdda float64 )float64 {_ceceb :=float64 (1);for _ccde :=float64 (2);_ccde <=_dfdda ;_ccde ++{_ceceb *=_ccde ;};return _ceceb ;};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_eaee string };

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_cfab ,_cgdg ,_gggbdd :=_bbd (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _gggbdd .Type ==ResultTypeError {return _gggbdd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gbece :=_cgdg -_cfab ;if _gbece > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_badg :=args [2].ValueNumber ;if _badg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (100*(1-_badg *_gbece /360));};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cea :=args [1].ValueNumber ;
_dbd :=args [0];var _edg float64 ;switch _dbd .Type {case ResultTypeEmpty :_edg =0;case ResultTypeNumber :_edg =_dbd .ValueNumber ;case ResultTypeString :_aab :=DateValue ([]Result {args [0]});if _aab .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};_edg =_aab .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_abe :=_dcbd (_edg );
_fgcg :=_abe .AddDate (0,int (_cea +1),0);_bfe ,_gba ,_ :=_fgcg .Date ();_babg :=_caca (_bfe ,int (_gba ),0);if _babg < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};if _bfe ==1900&&_gba ==3{_babg --;};return MakeNumberResult (_babg );};func _aacg (_ffbc []Result )[]float64 {_abba :=make ([]float64 ,0);for _ ,_bdfcg :=range _ffbc {if _bdfcg .Type ==ResultTypeEmpty {continue ;};_bdfcg =_bdfcg .AsNumber ();switch _bdfcg .Type {case ResultTypeNumber :if !_bdfcg .IsBoolean {_abba =append (_abba ,_bdfcg .ValueNumber );
};case ResultTypeList ,ResultTypeArray :_abba =append (_abba ,_aacg (_bdfcg .ListValues ())...);case ResultTypeString :default:_cgg .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bdfcg .Type );
};};return _abba ;};

// HasFormula returns FALSE for the invalid reference context.
func (_gfec *ivr )HasFormula (cellRef string )bool {return false };func _adea (_ffdg string ,_ggbeb func (_bbaa float64 )float64 )Function {return func (_gabe []Result )Result {if len (_gabe )!=1{return MakeErrorResult (_ffdg +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_cdfd :=_gabe [0].AsNumber ();switch _cdfd .Type {case ResultTypeNumber :_feddd :=_ggbeb (_cdfd .ValueNumber );if _cd .IsNaN (_feddd ){return MakeErrorResult (_ffdg +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};
if _cd .IsInf (_feddd ,0){return MakeErrorResult (_ffdg +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_feddd );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_ffdg +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _cdfd ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ffdg ,_cdfd .Type ));
};};};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};func _dacdfc (_decc Result )Result {if _decc .Type ==ResultTypeEmpty {return _decc ;};_fgdg :=_decc .AsString ();if _fgdg .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _decc .IsBoolean {if _fgdg .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _fgdg .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};}else {return MakeStringResult (_cg .ToLower (_fgdg .ValueString ));};};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_cgcc ,_faggc :=_adgcd (args ,true );if _faggc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_cgcc /_faggc );};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_eaeb :=len (args );if _eaeb !=2&&_eaeb !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gcde ,_ebad :=_bbee (args [0],args [1],"\u0058\u0049\u0052\u0052");if _ebad .Type ==ResultTypeError {return _ebad ;};_dbgf :=_gcde ._gfb ;_gdfg :=_gcde ._facf ;_ecgg :=0.1;if _eaeb ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecgg =args [2].ValueNumber ;if _ecgg <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");
};};return _efbac (_dbgf ,_gdfg ,_ecgg );};func (_cgabf *Lexer )nextRaw ()*node {for len (_cgabf ._bddaf )!=0{_abbd :=<-_cgabf ._bddaf [len (_cgabf ._bddaf )-1];if _abbd !=nil {return _abbd ;};_cgabf ._bddaf =_cgabf ._bddaf [0:len (_cgabf ._bddaf )-1];
};return <-_cgabf ._fdada ;};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aaggg :=args [0].AsString ();if _aaggg .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeStringResult (_cg .ToUpper (_aaggg .ValueString ));};var _bac =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};


// Update returns the same object as updating sheet references does not affect Error.
func (_eda Error )Update (q *_be .UpdateQuery )Expression {return _eda };

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];
};return args [0];};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_adgb ,_fdefe :=_adgcd (args ,false );if _fdefe ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_adgb /_fdefe );};func (_de BinOpType )String ()string {if _de >=BinOpType (len (_db )-1){return _c .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_de );};return _cc [_db [_de ]:_db [_de +1]];
};func _eebag (_eedee Result ,_fdec ,_efcc int )[][]Result {_deab :=[][]Result {};switch _eedee .Type {case ResultTypeArray :for _dfcef ,_adbaf :=range _eedee .ValueArray {if _dfcef < _fdec {_deab =append (_deab ,_adad (MakeListResult (_adbaf ),_efcc ));
}else {_deab =append (_deab ,_adad (MakeErrorResultType (ErrorTypeNA ,""),_efcc ));};};case ResultTypeList :_fgdca :=_adad (_eedee ,_efcc );for _ceeg :=0;_ceeg < _fdec ;_ceeg ++{_deab =append (_deab ,_fgdca );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _dbadf :=0;
_dbadf < _fdec ;_dbadf ++{_ecc :=_adad (_eedee ,_efcc );_deab =append (_deab ,_ecc );};};return _deab ;};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );
RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );
RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );
RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );
RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );
RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );
RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};var _cedbf =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};


// Reference returns an invalid reference for Bool.
func (_cf Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };const _bbde =57349;

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_cadeg .Lock ();defer _cadeg .Unlock ();if _ ,_fbeec :=_fdacf [name ];_fbeec {_cgg .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_fdacf [name ]=fn ;};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_bdee :=len (args );if _bdee !=5&&_bdee !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dcgc ,_dcdf ,_bcbfd :=_bbd (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _bcbfd .Type ==ResultTypeError {return _bcbfd ;};_ddea ,_bcbfd :=_ffeg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");
if _bcbfd .Type ==ResultTypeError {return _bcbfd ;};if _ddea >=_dcgc {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bbed :=args [3].ValueNumber ;if _bbed < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_fdebf :=args [4].ValueNumber ;if _fdebf <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};_dgdbd :=0;if _bdee ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dgdbd =int (args [5].ValueNumber );if !_fgcgb (_dgdbd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");
};};_fbbd ,_bcbfd :=_egdg (_ddea ,_dcdf ,_dgdbd );if _bcbfd .Type ==ResultTypeError {return _bcbfd ;};_deaa ,_bcbfd :=_egdg (_ddea ,_dcgc ,_dgdbd );if _bcbfd .Type ==ResultTypeError {return _bcbfd ;};_bcdfd ,_bcbfd :=_egdg (_dcgc ,_dcdf ,_dgdbd );if _bcbfd .Type ==ResultTypeError {return _bcbfd ;
};_bfcc :=1+_fbbd *_bbed ;_bfcc /=_fdebf /100+_deaa *_bbed ;_bfcc --;_bfcc /=_bcdfd ;return MakeNumberResult (_bfcc );};func _fgcgb (_ebca int )bool {return _ebca >=0&&_ebca <=4};var _gecf []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};
const _eggea ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";


// Update returns the same object as updating sheet references does not affect String.
func (_bcdb String )Update (q *_be .UpdateQuery )Expression {return _bcdb };

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _gce ,_cdg float64 ;switch args [0].Type {case ResultTypeNumber :_cdg =args [0].ValueNumber ;
case ResultTypeString :_cgbd :=DateValue ([]Result {args [0]});if _cgbd .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");
};_cdg =_cgbd .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_gce =args [1].ValueNumber ;
if _gce < 62&&_cdg >=62{_gce --;};case ResultTypeString :_gcg :=DateValue ([]Result {args [1]});if _gcg .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");
};_gce =_gcg .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_bce :=float64 (int (_cdg -_gce ));return MakeNumberResult (_bce );
};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_cecfe :=_cg .Split (v ,"\u003a");if len (_cecfe )!=2{return nil ;};_agdc ,_ :=_ac .Atoi (_cecfe [0]);_aeaf ,_ :=_ac .Atoi (_cecfe [1]);if _agdc > _aeaf {_agdc ,_aeaf =_aeaf ,_agdc ;};return HorizontalRange {_efda :_agdc ,_bgae :_aeaf };
};

// GetFilename returns an empty string for the invalid reference context.
func (_gdgb *ivr )GetFilename ()string {return ""};func _edgg (_feg ,_fgbf float64 ,_egfg ,_cfeg int )(float64 ,Result ){_gfd ,_feee :=_dcbd (_feg ),_dcbd (_fgbf );if _feee .After (_gfd ){_agde :=_cbde (_gfd ,_feee ,_egfg ,_cfeg );_cfcc :=(_feee .Year ()-_agde .Year ())*12+int (_feee .Month ())-int (_agde .Month ());
return float64 (_cfcc *_egfg )/12.0,_aaa ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");
};

// Function is a standard function whose result only depends on its arguments.
type Function func (_dabg []Result )Result ;

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_eccfb PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_dafga :=_eccfb ._geebd .Reference (ctx ,ev );switch _dafga .Type {case ReferenceTypeSheet :if _bcaaa (_dafga ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dafga .Value ));
};_dcde :=_eccfb .horizontalRangeReference (_dafga .Value );if _bacgd ,_daefe :=ev .GetFromCache (_dcde );_daefe {return _bacgd ;};_ddfgb :=ctx .Sheet (_dafga .Value );_fbddd ,_afaee :=_dgceg (_ddfgb ,_eccfb ._agefc ,_eccfb ._ffde );_aeede :=_afeeb (_ddfgb ,ev ,_fbddd ,_afaee );
ev .SetCache (_dcde ,_aeede );return _aeede ;default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dafga .Type ));
};};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_ec Context ,formula string )Result ;SetCache (_eag string ,_ede Result );GetFromCache (_bef string )(Result ,bool );LastEvalIsRef ()bool ;};func _cbae (_aeca float64 )bool {return _aeca ==1||_aeca ==2||_aeca ==4};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_accf :=args [0];if _accf .Type ==ResultTypeNumber {return _accf ;};if _accf .Type ==ResultTypeString {_gceee ,_daaf :=_ac .ParseFloat (_accf .Value (),64);if _daaf ==nil {return MakeNumberResult (_gceee );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");
};

// Update updates references in the VerticalRange after removing a row/column.
func (_gabfd VerticalRange )Update (q *_be .UpdateQuery )Expression {if q .UpdateType ==_be .UpdateActionRemoveColumn {_fgcaa :=_gabfd ;if q .UpdateCurrentSheet {_cdeac :=q .ColumnIdx ;_fgcaa ._ffge =_ff (_gabfd ._ffge ,_cdeac );_fgcaa ._eggdd =_ff (_gabfd ._eggdd ,_cdeac );
};return _fgcaa ;};return _gabfd ;};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_eagde :=args [0].AsNumber ();if _eagde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_abae :=float64 (1);if _eagde .ValueNumber < 0{_abae =-1;};if len (args )> 1{_cbbb :=args [1].AsNumber ();if _cbbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_abae =_cbbb .ValueNumber ;};if _abae < 0&&_eagde .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};if len (args )==1{return MakeNumberResult (_cd .Ceil (_eagde .ValueNumber ));};_eeed :=_eagde .ValueNumber ;_eeed ,_dcad :=_cd .Modf (_eeed /_abae );if _dcad > 0{_eeed ++;};return MakeNumberResult (_eeed *_abae );};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfgbd :=args [0];if _cfgbd .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_beaaf :=len (_cfgbd .ValueArray );for _ ,_ddbe :=range _cfgbd .ValueArray {if len (_ddbe )!=_beaaf {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");
};};return MakeNumberResult (_ffegg (_cfgbd .ValueArray ));};

// String returns a string representation of a range with prefix.
func (_facc PrefixRangeExpr )String ()string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_facc ._aafc .String (),_facc ._dedc .String (),_facc ._bdcec .String ());};var InvalidReferenceContext =&ivr {};const (ResultTypeUnknown ResultType =iota ;
ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);const _ccadf =57365;

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_debb :=args [0].AsString ();if _debb .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_aaccf :=_fg .Buffer {};_cfgd :=false ;for _ ,_bcgf :=range _debb .ValueString {if !_cfgd &&_b .IsLetter (_bcgf ){_aaccf .WriteRune (_b .ToUpper (_bcgf ));}else {_aaccf .WriteRune (_b .ToLower (_bcgf ));};_cfgd =_b .IsLetter (_bcgf );};return MakeStringResult (_aaccf .String ());
};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cfgb :=args [0].AsNumber ();if _cfgb .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_geaeg ,_cdgf :=_cd .Modf (_cfgb .ValueNumber );if _cdgf < 0{_geaeg --;};return MakeNumberResult (_geaeg );};func _dbfdc (_cdceb string )string {_cdceb =_cg .Replace (_cdceb ,"\u000a","\u005c\u006e",-1);_cdceb =_cg .Replace (_cdceb ,"\u000d","\u005c\u0072",-1);
_cdceb =_cg .Replace (_cdceb ,"\u0009","\u005c\u0074",-1);return _cdceb ;};var _befg int64 =_gggg (1900,_bd .January ,1);

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_adcdb :=len (args );if _adcdb !=4&&_adcdb !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_aefb ,_cadb :=_ffeg (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _cadb .Type ==ResultTypeError {return _cadb ;};_bffbd ,_cadb :=_ffeg (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");
if _cadb .Type ==ResultTypeError {return _cadb ;};if _aefb >=_bffbd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_bcfed :=args [2].ValueNumber ;if _bcfed <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_feeec :=args [3].ValueNumber ;if _feeec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbbe :=0;if _adcdb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbbe =int (args [4].ValueNumber );if !_fgcgb (_bbbe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");
};};_fff ,_cadb :=_egdg (_aefb ,_bffbd ,_bbbe );if _cadb .Type ==ResultTypeError {return _cadb ;};return MakeNumberResult (_feeec *_bcfed *_fff );};func (_ffba ResultType )String ()string {if _ffba >=ResultType (len (_bagaf )-1){return _c .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_ffba );
};return _aebee [_bagaf [_ffba ]:_bagaf [_ffba +1]];};

// Eval evaluates the binary expression using the context given.
func (_dc BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_cgf :=_dc ._cge .Eval (ctx ,ev );if _cgf .Type ==ResultTypeError {return _cgf ;};_fgb :=_dc ._fed .Eval (ctx ,ev );if _fgb .Type ==ResultTypeError {return _fgb ;};if _cgf .Type ==_fgb .Type {if _cgf .Type ==ResultTypeArray {if !_cba (_cgf .ValueArray ,_fgb .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _gg (_dc ._fa ,_cgf .ValueArray ,_fgb .ValueArray );}else if _cgf .Type ==ResultTypeList {if len (_cgf .ValueList )!=len (_fgb .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _cgc (_dc ._fa ,_cgf .ValueList ,_fgb .ValueList );};}else if _cgf .Type ==ResultTypeArray &&(_fgb .Type ==ResultTypeNumber ||_fgb .Type ==ResultTypeString ){return _fd (_dc ._fa ,_cgf .ValueArray ,_fgb );}else if _cgf .Type ==ResultTypeList &&(_fgb .Type ==ResultTypeNumber ||_fgb .Type ==ResultTypeString ){return _af (_dc ._fa ,_cgf .ValueList ,_fgb );
};switch _dc ._fa {case BinOpTypePlus :if _cgf .Type ==_fgb .Type {if _cgf .Type ==ResultTypeNumber {return MakeNumberResult (_cgf .ValueNumber +_fgb .ValueNumber );};};case BinOpTypeMinus :if _cgf .Type ==_fgb .Type {if _cgf .Type ==ResultTypeNumber {return MakeNumberResult (_cgf .ValueNumber -_fgb .ValueNumber );
};};case BinOpTypeMult :if _cgf .Type ==_fgb .Type {if _cgf .Type ==ResultTypeNumber {return MakeNumberResult (_cgf .ValueNumber *_fgb .ValueNumber );};};case BinOpTypeDiv :if _cgf .Type ==_fgb .Type {if _cgf .Type ==ResultTypeNumber {if _fgb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");
};return MakeNumberResult (_cgf .ValueNumber /_fgb .ValueNumber );};};case BinOpTypeExp :if _cgf .Type ==_fgb .Type {if _cgf .Type ==ResultTypeNumber {return MakeNumberResult (_cd .Pow (_cgf .ValueNumber ,_fgb .ValueNumber ));};};case BinOpTypeLT :if _cgf .Type ==_fgb .Type {if _cgf .Type ==ResultTypeNumber {return MakeBoolResult (_cgf .ValueNumber < _fgb .ValueNumber );
};if _cgf .Type ==ResultTypeString {return MakeBoolResult (_cgf .ValueString < _fgb .ValueString );};if _cgf .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _cgf .Type ==ResultTypeString &&_fgb .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _cgf .Type ==ResultTypeNumber &&_fgb .Type ==ResultTypeString {return MakeBoolResult (true );}else if _cgf .Type ==ResultTypeEmpty &&(_fgb .Type ==ResultTypeNumber ||_fgb .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_cgf .Type ==ResultTypeNumber ||_cgf .Type ==ResultTypeString )&&_fgb .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};case BinOpTypeGT :if _cgf .Type ==_fgb .Type {if _cgf .Type ==ResultTypeNumber {return MakeBoolResult (_cgf .ValueNumber > _fgb .ValueNumber );};if _cgf .Type ==ResultTypeString {return MakeBoolResult (_cgf .ValueString > _fgb .ValueString );};if _cgf .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if _cgf .Type ==ResultTypeString &&_fgb .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _cgf .Type ==ResultTypeNumber &&_fgb .Type ==ResultTypeString {return MakeBoolResult (false );}else if _cgf .Type ==ResultTypeEmpty &&(_fgb .Type ==ResultTypeNumber ||_fgb .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if (_cgf .Type ==ResultTypeNumber ||_cgf .Type ==ResultTypeString )&&_fgb .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _cgf .Type ==_fgb .Type {if _cgf .Type ==ResultTypeNumber {return MakeBoolResult (_cgf .ValueNumber ==_fgb .ValueNumber );
};if _cgf .Type ==ResultTypeString {return MakeBoolResult (_cgf .ValueString ==_fgb .ValueString );};if _cgf .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_cgf .Type ==ResultTypeString &&_fgb .Type ==ResultTypeNumber )||(_cgf .Type ==ResultTypeNumber &&_fgb .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if _cgf .Type ==ResultTypeEmpty &&(_fgb .Type ==ResultTypeNumber ||_fgb .Type ==ResultTypeString ){return MakeBoolResult (_bec (_fgb ));}else if (_cgf .Type ==ResultTypeNumber ||_cgf .Type ==ResultTypeString )&&_fgb .Type ==ResultTypeEmpty {return MakeBoolResult (_bec (_cgf ));
};case BinOpTypeNE :if _cgf .Type ==_fgb .Type {if _cgf .Type ==ResultTypeNumber {return MakeBoolResult (_cgf .ValueNumber !=_fgb .ValueNumber );};if _cgf .Type ==ResultTypeString {return MakeBoolResult (_cgf .ValueString !=_fgb .ValueString );};if _cgf .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if (_cgf .Type ==ResultTypeString &&_fgb .Type ==ResultTypeNumber )||(_cgf .Type ==ResultTypeNumber &&_fgb .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _cgf .Type ==ResultTypeEmpty &&(_fgb .Type ==ResultTypeNumber ||_fgb .Type ==ResultTypeString ){return MakeBoolResult (!_bec (_fgb ));
}else if (_cgf .Type ==ResultTypeNumber ||_cgf .Type ==ResultTypeString )&&_fgb .Type ==ResultTypeEmpty {return MakeBoolResult (!_bec (_cgf ));};case BinOpTypeLEQ :if _cgf .Type ==_fgb .Type {if _cgf .Type ==ResultTypeNumber {return MakeBoolResult (_cgf .ValueNumber <=_fgb .ValueNumber );
};if _cgf .Type ==ResultTypeString {return MakeBoolResult (_cgf .ValueString <=_fgb .ValueString );};if _cgf .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _cgf .Type ==ResultTypeString &&_fgb .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _cgf .Type ==ResultTypeNumber &&_fgb .Type ==ResultTypeString {return MakeBoolResult (true );}else if _cgf .Type ==ResultTypeEmpty &&(_fgb .Type ==ResultTypeNumber ||_fgb .Type ==ResultTypeString ){return MakeBoolResult (_bec (_fgb ));}else if (_cgf .Type ==ResultTypeNumber ||_cgf .Type ==ResultTypeString )&&_fgb .Type ==ResultTypeEmpty {return MakeBoolResult (_bec (_cgf ));
};case BinOpTypeGEQ :if _cgf .Type ==_fgb .Type {if _cgf .Type ==ResultTypeNumber {return MakeBoolResult (_cgf .ValueNumber >=_fgb .ValueNumber );};if _cgf .Type ==ResultTypeString {return MakeBoolResult (_cgf .ValueString >=_fgb .ValueString );};if _cgf .Type ==ResultTypeEmpty {return MakeBoolResult (true );
};}else if _cgf .Type ==ResultTypeString &&_fgb .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _cgf .Type ==ResultTypeNumber &&_fgb .Type ==ResultTypeString {return MakeBoolResult (false );}else if _cgf .Type ==ResultTypeEmpty &&(_fgb .Type ==ResultTypeNumber ||_fgb .Type ==ResultTypeString ){return MakeBoolResult (_bec (_fgb ));
}else if (_cgf .Type ==ResultTypeNumber ||_cgf .Type ==ResultTypeString )&&_fgb .Type ==ResultTypeEmpty {return MakeBoolResult (_bec (_cgf ));};case BinOpTypeConcat :return MakeStringResult (_cgf .Value ()+_fgb .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");
};const _aga ="\u005e\u0028\u0028"+_aca +"\u007c"+_cec +"\u007c"+_bdfg +"\u007c"+_ece +"\u0029\u0020\u0029\u003f";

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_bcfeb :=args [0];
if _bcfeb .Type !=ResultTypeArray &&_bcfeb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_edce :=_bcfeb .ValueArray ;if len (_edce )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");
};return MakeNumberResult (float64 (len (_edce [0])));};func (_badf *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};func _fedga (_cedaa []string ,_bdfb int )string {return _ac .Itoa (len (_cedaa [len (_cedaa )-1-_bdfb ]))};


// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_ddef (args ,_bggc ));};func _cba (_ab ,_dg [][]Result )bool {if len (_ab )!=len (_dg ){return false ;};for _ed :=range _ab {if len (_ab [_ed ])!=len (_dg [_ed ]){return false ;};};return true ;};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgag :=0;_efgd :=false ;for _ ,_ddgd :=range args {switch _ddgd .Type {case ResultTypeList ,ResultTypeArray :_afaac :=Xor (_ddgd .ListValues ());if _afaac .Type ==ResultTypeError {return _afaac ;};if _afaac .ValueNumber !=0{_fgag ++;};_efgd =true ;case ResultTypeNumber :if _ddgd .ValueNumber !=0{_fgag ++;
};_efgd =true ;case ResultTypeString :case ResultTypeError :return _ddgd ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");
};};if !_efgd {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_fgag %2!=0);};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_eegcb ,_fcceaa :=_eega ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _fcceaa .Type !=ResultTypeEmpty {return _fcceaa ;};_cbbee :=_eegcb ._dgccd ;_facae :=_eegcb ._dfgbg ;_dgffc :=_eegcb ._bdgc ;_eacd :=_eegcb ._fbeeb ;
_aeec :=len (_cbbee );if _facae > _aeec {_facae =_aeec ;};_cffc :=_facae +_dgffc ;if _cffc > _aeec {_cffc =_aeec ;};_acbe :=_cbbee [0:_facae ]+_eacd +_cbbee [_cffc :];return MakeStringResult (_acbe );};

// String returns an empty string for Error.
func (_dee Error )String ()string {return ""};func _agbb (_bge []Result ,_abef string )(float64 ,float64 ,Result ){if len (_bge )!=2{return 0,0,MakeErrorResult (_abef +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _bge [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_abef +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cfefeb :=_bge [0].ValueNumber ;if _bge [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_abef +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dbfb :=float64 (int (_bge [1].ValueNumber ));if _dbfb < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_abef +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");
};return _cfefeb ,_dbfb ,_aaa ;};

// Reference returns a string reference value to a range.
func (_fbga Range )Reference (ctx Context ,ev Evaluator )Reference {_bbcb :=_fbga ._edegf .Reference (ctx ,ev );_cgdaa :=_fbga ._acfgb .Reference (ctx ,ev );if _bbcb .Type ==ReferenceTypeCell &&_cgdaa .Type ==ReferenceTypeCell {return MakeRangeReference (_abgc (_bbcb ,_cgdaa ));
};return ReferenceInvalid ;};const _fbcdd =_bd .Millisecond *1000;

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];
case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));
default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// String returns a string representation of FunctionCall expression.
func (_dagd FunctionCall )String ()string {_bgcc :=_fg .Buffer {};_bgcc .WriteString (_dagd ._fbab );_bgcc .WriteString ("\u0028");_egabd :=len (_dagd ._bfaa )-1;for _gffed ,_ddeaa :=range _dagd ._bfaa {_bgcc .WriteString (_ddeaa .String ());if _gffed !=_egabd {_bgcc .WriteString ("\u002c");
};};_bgcc .WriteString ("\u0029");return _bgcc .String ();};type Expression interface{Eval (_bfa Context ,_cce Evaluator )Result ;Reference (_bgb Context ,_fedb Evaluator )Reference ;String ()string ;Update (_geb *_be .UpdateQuery )Expression ;};func (_add *defEval )checkLastEvalIsRef (_aa Context ,_fccc Expression ){switch _fccc .(type ){case FunctionCall :switch _fccc .(FunctionCall )._fbab {case "\u0049\u0053\u0052E\u0046":for _ ,_bad :=range _fccc .(FunctionCall )._bfaa {switch _bad .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_bcc :=_bad .Eval (_aa ,_add );
_add ._caaa =!(_bcc .Type ==ResultTypeError &&_bcc .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_add ._caaa =false ;};};};};};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _egdfb (args ,false )};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_cbcc :=len (args );if _cbcc < 3||_cbcc > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gdeg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_bcag :=args [1].ValueNumber ;if _bcag !=float64 (int (_bcag )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bebe :=args [2].ValueNumber ;_cfga :=0.0;if _cbcc >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfga =args [3].ValueNumber ;};_aabca :=0;if _cbcc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aabca =int (args [4].ValueNumber );if _aabca !=0{_aabca =1;};};return MakeNumberResult (_dbgb (_gdeg ,_bcag ,_bebe ,_cfga ,_aabca ));};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_adcgd :=args [0];if _adcgd .Type ==ResultTypeError {return _adcgd ;
};if _adcgd .Type !=ResultTypeString &&_adcgd .Type !=ResultTypeNumber &&_adcgd .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_cfbg :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_acgc :=int (args [1].ValueNumber );if _acgc < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_fcdgc :=int (args [2].ValueNumber );if _fcdgc < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_eedd :=len (_cfbg );if _acgc > _eedd {return MakeStringResult ("");};_acgc --;_dccfd :=_acgc +_fcdgc ;if _dccfd > _eedd {return MakeStringResult (_cfbg [_acgc :]);}else {return MakeStringResult (_cfbg [_acgc :_dccfd ]);};};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aeff :=args [0];switch _aeff .Type {case ResultTypeError :return _aeff ;case ResultTypeNumber ,ResultTypeString :return _dacdfc (args [0]);case ResultTypeList :_aegf :=_aeff .ValueList ;_ccba :=[]Result {};for _ ,_dbgea :=range _aegf {_aebed :=_dacdfc (_dbgea );
if _aebed .Type ==ResultTypeError {return _aebed ;};_ccba =append (_ccba ,_aebed );};return MakeListResult (_ccba );case ResultTypeArray :_cgfg :=_aeff .ValueArray ;_dagf :=[][]Result {};for _ ,_ebfcb :=range _cgfg {_bcgc :=[]Result {};for _ ,_gdgd :=range _ebfcb {_gafd :=_dacdfc (_gdgd );
if _gafd .Type ==ResultTypeError {return _gafd ;};_bcgc =append (_bcgc ,_gafd );};_dagf =append (_dagf ,_bcgc );};return MakeArrayResult (_dagf );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};};func _cbfe (_abafd ,_bgdg Expression )(Expression ,Expression ,error ){_ggac ,_ffef :=_abafd .(CellRef );if !_ffef {return nil ,nil ,_d .New (_c .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_abafd .String ()));
};_fdge ,_ffef :=_bgdg .(CellRef );if !_ffef {return nil ,nil ,_d .New (_c .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_bgdg .String ()));};_cbce ,_dbecb :=_ba .ParseCellReference (_ggac ._dfe );
if _dbecb !=nil {return nil ,nil ,_dbecb ;};_bfag ,_gbefd :=_ba .ParseCellReference (_fdge ._dfe );if _gbefd !=nil {return nil ,nil ,_gbefd ;};_egfd :=false ;if _cbce .RowIdx > _bfag .RowIdx {_egfd =true ;_cbce .RowIdx ,_bfag .RowIdx =_bfag .RowIdx ,_cbce .RowIdx ;
};if _cbce .ColumnIdx > _bfag .ColumnIdx {_egfd =true ;_cbce .ColumnIdx ,_bfag .ColumnIdx =_bfag .ColumnIdx ,_cbce .ColumnIdx ;_cbce .Column ,_bfag .Column =_bfag .Column ,_cbce .Column ;};if _egfd {return NewCellRef (_cbce .String ()),NewCellRef (_bfag .String ()),nil ;
};return _abafd ,_bgdg ,nil ;};

// String returns a string representation of SheetPrefixExpr.
func (_eabfb SheetPrefixExpr )String ()string {return _eabfb ._bbgge };type cmpResult int8 ;

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_egebd :=args [0];_dbdg :=args [1];if _dbdg .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_bgagd :=args [2].AsNumber ();if _bgagd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cgcec :=false ;if len (args )==4{_caeg :=args [3].AsNumber ();if _caeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _caeg .ValueNumber ==0{_cgcec =true ;};};_bagab :=-1;_fegea :=false ;if len (_dbdg .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");
};_efffb :=_dbdg .ValueArray [0];_ffb :for _cdge ,_efaeb :=range _efffb {switch _bcage (_efaeb ,_egebd ,false ,_cgcec ){case _cadca :_bagab =_cdge ;case _aefd :_bagab =_cdge ;_fegea =true ;break _ffb ;};};if _bagab ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_gbgdd :=int (_bgagd .ValueNumber )-1;if _gbgdd < 0||_gbgdd > len (_dbdg .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_efffb =_dbdg .ValueArray [_gbgdd ];
if _bagab < 0||_bagab >=len (_efffb ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _fegea ||!_cgcec {return _efffb [_bagab ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Eval evaluates and returns the result of a formula.
func (_bdeda *defEval )Eval (ctx Context ,formula string )Result {_dgd :=ParseString (formula );_fcc :=make (chan Result );go func (){if _dgd ==nil {_fcc <-MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));
}else {_bdeda .checkLastEvalIsRef (ctx ,_dgd );_fcc <-_dgd .Eval (ctx ,_bdeda );};}();select{case _ge :=<-_fcc :return _ge ;case <-_bd .After (_cdb ):_cgg .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");
return MakeNumberResult (0);};};func _dggad (_dbea yyLexer )int {return _eddgd ().Parse (_dbea )};func _gcfe (_debd []Result )(float64 ,float64 ,Result ){_ecgd :=0.0;_cdcb :=1.0;for _ ,_eddgf :=range _debd {switch _eddgf .Type {case ResultTypeNumber :_ecgd +=_eddgf .ValueNumber ;
_cdcb *=_bdbg (_eddgf .ValueNumber );case ResultTypeList ,ResultTypeArray :_dbdbg ,_dfdag ,_eggfc :=_gcfe (_eddgf .ListValues ());_ecgd +=_dbdbg ;_cdcb *=_bdbg (_dfdag );if _eggfc .Type ==ResultTypeError {return 0,0,_eggfc ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
case ResultTypeError :return 0,0,_eddgf ;};};return _ecgd ,_cdcb ,_aaa ;};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_accab Result )AsNumber ()Result {if _accab .Type ==ResultTypeString {_cacaa ,_ebab :=_ac .ParseFloat (_accab .ValueString ,64);if _ebab ==nil {return MakeNumberResult (_cacaa );};};if _accab .Type ==ResultTypeEmpty {return MakeNumberResult (0);};
return _accab ;};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cfac :=args [0].AsString ();if _cfac .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};if len (_cfac .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_cfac .ValueString [0]));};func _aabf (_gebe float64 )float64 {return float64 (int (_gebe +0.5))};func _gde (_fab ,_acbb ,_fcbg ,_aega ,_bdea float64 ,_eadde int )Result {_fceg ,_bdfc :=_egdg (_fab ,_acbb ,_eadde );
if _bdfc .Type ==ResultTypeError {return _bdfc ;};_egfgc ,_cgaa :=_edgg (_fab ,_acbb ,int (_bdea ),_eadde );if _cgaa .Type ==ResultTypeError {return _cgaa ;};_cfef :=0.0;_gaddb :=0.0;_fcbg *=100/_bdea ;_aega /=_bdea ;_aega ++;_gabg :=_fceg *_bdea -_egfgc ;
for _fgbfb :=1.0;_fgbfb < _egfgc ;_fgbfb ++{_gcgd :=_fgbfb +_gabg ;_fac :=_fcbg /_cd .Pow (_aega ,_gcgd );_gaddb +=_fac ;_cfef +=_gcgd *_fac ;};_feaa :=(_fcbg +100)/_cd .Pow (_aega ,_egfgc +_gabg );_gaddb +=_feaa ;_cfef +=(_egfgc +_gabg )*_feaa ;_cfef /=_gaddb ;
_cfef /=_bdea ;return MakeNumberResult (_cfef );};type evCache struct{_abc map[string ]Result ;_cad *_cb .Mutex ;};type yyLexer interface{Lex (_dccad *yySymType )int ;Error (_agbg string );};const _gbccg =187;

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_cfc ,_fceeg :=_gbgg (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _fceeg .Type ==ResultTypeError {return _fceeg ;};return MakeNumberResult (_ecfd (_cfc ._gab ,_cfc ._cbge ,_cfc ._fddd ,_cfc ._aebe ));
};

// GetFormat returns an empty string for the invalid reference context.
func (_dfgag *ivr )GetFormat (cellRef string )string {return ""};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bfeg :=_bd .Now ();_ ,_bdga :=_bfeg .Zone ();_abaad :=_aggd (_befg ,_bfeg .Unix ()+int64 (_bdga ))+1;return MakeNumberResult (_abaad );};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_edba :=args [0].Ref ;if _edba .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .HasFormula (_edba .Value ));};func _bfbf (_edbbd []Result )Result {_eeaab :=_edbbd [0].ValueList ;_ebag :=len (_eeaab );switch len (_edbbd ){case 1:_gadg :=[]Result {};for _ ,_aada :=range _eeaab {_gadg =append (_gadg ,MakeBoolResult (_aada .ValueNumber !=0));
};return MakeListResult (_gadg );case 2:_bdabb :=_edbbd [1];switch _bdabb .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_bgdcb :=[]Result {};for _ ,_aadbg :=range _eeaab {var _dccab Result ;if _aadbg .ValueNumber ==0{_dccab =MakeBoolResult (false );
}else {_dccab =_bdabb ;};_bgdcb =append (_bgdcb ,_dccab );};return MakeListResult (_bgdcb );case ResultTypeList :_adec :=_adad (_bdabb ,_ebag );_edff :=[]Result {};for _cdgag ,_fedba :=range _eeaab {var _ebff Result ;if _fedba .ValueNumber ==0{_ebff =MakeBoolResult (false );
}else {_ebff =_adec [_cdgag ];};_edff =append (_edff ,_ebff );};return MakeListResult (_edff );case ResultTypeArray :_bcac :=_eebag (_bdabb ,len (_bdabb .ValueArray ),_ebag );_adae :=[][]Result {};for _ ,_bgfgb :=range _bcac {_fdef :=[]Result {};for _dgcd ,_ebgf :=range _eeaab {var _dfeb Result ;
if _ebgf .ValueNumber ==0{_dfeb =MakeBoolResult (false );}else {_dfeb =_bgfgb [_dgcd ];};_fdef =append (_fdef ,_dfeb );};_adae =append (_adae ,_fdef );};return MakeArrayResult (_adae );};case 3:_bdadcc :=_edbbd [1];_gac :=_edbbd [2];_aeeae :=_dccf (_bdadcc );
_aded :=_dccf (_gac );if _aeeae &&_aded {_dadg :=[]Result {};for _ ,_acaa :=range _eeaab {var _adcg Result ;if _acaa .ValueNumber ==0{_adcg =_gac ;}else {_adcg =_bdadcc ;};_dadg =append (_dadg ,_adcg );};return MakeListResult (_dadg );};if _bdadcc .Type !=ResultTypeArray &&_gac .Type !=ResultTypeArray {_cedaab :=_adad (_bdadcc ,_ebag );
_dbcd :=_adad (_gac ,_ebag );_dddddg :=[]Result {};for _fbbdg ,_fedbb :=range _eeaab {var _eadb Result ;if _fedbb .ValueNumber ==0{_eadb =_dbcd [_fbbdg ];}else {_eadb =_cedaab [_fbbdg ];};_dddddg =append (_dddddg ,_eadb );};return MakeListResult (_dddddg );
};_geaec ,_acfcf :=len (_bdadcc .ValueArray ),len (_gac .ValueArray );_deae ,_dffdc :=_geaec ,_acfcf ;if _acfcf > _deae {_deae ,_dffdc =_dffdc ,_deae ;};_ccce :=_eebag (_bdadcc ,_deae ,_ebag );_cddf :=_eebag (_gac ,_deae ,_ebag );_eggc :=[][]Result {};
for _fefd :=0;_fefd < _deae ;_fefd ++{_gbabd :=[]Result {};for _aecdc ,_afca :=range _eeaab {var _acaff Result ;if _afca .ValueNumber ==0{if _fefd < _acfcf {_acaff =_cddf [_fefd ][_aecdc ];}else {_acaff =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _fefd < _geaec {_acaff =_ccce [_fefd ][_aecdc ];
}else {_acaff =MakeErrorResultType (ErrorTypeNA ,"");};};_gbabd =append (_gbabd ,_acaff );};_eggc =append (_eggc ,_gbabd );};return MakeArrayResult (_eggc );};return MakeErrorResult ("");};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_daedd ,_dfga :=_cfde ("\u0046\u0049\u004e\u0044",args );if _dfga .Type !=ResultTypeEmpty {return _dfga ;};_ceged :=_cg .ToLower (_daedd ._fefe );
_cdfde :=_cg .ToLower (_daedd ._afdg );if _ceged ==""{return MakeNumberResult (1.0);};_ccffa :=_daedd ._bdgb -1;_baeace :=1;_cfgff :=0;for _adcc :=range _cdfde {if _adcc !=0{_adac :=1;if _adcc -_cfgff > 1{_adac =2;};_baeace +=_adac ;};if _baeace > _ccffa {_ccfbb :=_bde .Index (_ceged ,_cdfde [_adcc :]);
if _ccfbb ==0{return MakeNumberResult (float64 (_baeace ));};};_cfgff =_adcc ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Reference returns a string reference value to a range with prefix.
func (_ebgc PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_ggcg :=_ebgc ._aafc .Reference (ctx ,ev );_aacag :=_ebgc ._dedc .Reference (ctx ,ev );_acgec :=_ebgc ._bdcec .Reference (ctx ,ev );if _ggcg .Type ==ReferenceTypeSheet &&_aacag .Type ==ReferenceTypeCell &&_acgec .Type ==ReferenceTypeCell {return MakeRangeReference (_cgdd (_ggcg ,_aacag ,_acgec ));
};return ReferenceInvalid ;};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_efbab :=args [0].AsNumber ();_bgcd :=args [1].AsNumber ();if _efbab .Type !=ResultTypeNumber ||_bgcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _bgcd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_cd .Trunc (_efbab .ValueNumber /_bgcd .ValueNumber ));
};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_ceda ,_feda :=_cfge (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _feda .Type ==ResultTypeError {return _feda ;};_dbb :=_ceda ._cff ;_efab :=_ceda ._acge ;_cddc :=_ceda ._edc ;_agae :=_ceda ._bgfgd ;
_dffa :=_ceda ._fcdd ;_ccab :=_ceda ._agac ;return _gde (_dbb ,_efab ,_cddc ,_agae ,_dffa ,_ccab );};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_dbfbe :e }};

// String returns a string representation of ConstArrayExpr.
func (_dgg ConstArrayExpr )String ()string {return ""};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_bfbgf PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_agedg :=_bfbgf ._aafc .Reference (ctx ,ev );_bbfc :=_bfbgf ._dedc .Reference (ctx ,ev );_afffd :=_bfbgf ._bdcec .Reference (ctx ,ev );switch _agedg .Type {case ReferenceTypeSheet :if _bcaaa (_agedg ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_agedg .Value ));
};_dddgg :=_cgdd (_agedg ,_bbfc ,_afffd );if _bbfc .Type ==ReferenceTypeCell &&_afffd .Type ==ReferenceTypeCell {if _cdcbb ,_bffdg :=ev .GetFromCache (_dddgg );_bffdg {return _cdcbb ;}else {_baaag :=_afeeb (ctx .Sheet (_agedg .Value ),ev ,_bbfc .Value ,_afffd .Value );
ev .SetCache (_dddgg ,_baaag );return _baaag ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_dddgg );default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_agedg .Type ));
};};

// Eval evaluates and returns a number.
func (_dfaa Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_dfaa ._gbfba )};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};const _bfdb =57354;

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_ggde :=[]string {};for _gdcaf :=range _cfebb {_ggde =append (_ggde ,_gdcaf );};for _daba :=range _fdacf {_ggde =append (_ggde ,_daba );};_dd .Strings (_ggde );return _ggde ;};

// Update updates references in the BinaryExpr after removing a row/column.
func (_bag BinaryExpr )Update (q *_be .UpdateQuery )Expression {_aef :=_bag ;_aef ._cge =_bag ._cge .Update (q );_aef ._fed =_bag ._fed .Update (q );return _aef ;};func _gbgd (_ebb string )bool {for _ ,_efg :=range _gec {_cdbc :=_efg .FindStringSubmatch (_ebb );
if len (_cdbc )> 1{return true ;};};return false ;};func _gdfc (_fde ,_cfeb float64 ,_fcbf ,_cfa int )float64 {_gccf :=_dcbd (_fde );_fbbe :=_dcbd (_cfeb );_ebg :=_cbde (_gccf ,_fbbe ,_fcbf ,_cfa );return _fcd (_ebg ,_gccf ,_cfa );};func _cfde (_eafbf string ,_gged []Result )(*parsedSearchObject ,Result ){_dfaffc :=len (_gged );
if _dfaffc !=2&&_dfaffc !=3{return nil ,MakeErrorResult (_eafbf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_bgddd :=_gged [0];if _bgddd .Type ==ResultTypeError {return nil ,_bgddd ;};if _bgddd .Type !=ResultTypeString &&_bgddd .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_cgea :=_gged [1];if _cgea .Type ==ResultTypeError {return nil ,_cgea ;};if _cgea .Type !=ResultTypeString &&_cgea .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");
};_dgfc :=_cgea .Value ();_efgg :=_bgddd .Value ();_bfbbb :=1;if _dfaffc ==3&&_gged [2].Type !=ResultTypeEmpty {_fbdf :=_gged [2];if _fbdf .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");
};_bfbbb =int (_fbdf .ValueNumber );if _bfbbb < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};if _bfbbb > len (_dgfc ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};};return &parsedSearchObject {_efgg ,_dgfc ,_bfbbb },_aaa ;};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bbgc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bgc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ffda :=args [2].ValueNumber ;if _ffda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fef :=args [3].ValueNumber ;if _fef <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _fef > _ffda {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");
};_gfdef :=(_bbgc -_bgc )*(_ffda -_fef +1)*2;_fgea :=_ffda *(_ffda +1);return MakeNumberResult (_gfdef /_fgea );};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_geebd Expression ;_agefc ,_ffde int ;};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gacd :=args [0].AsNumber ();_aabe :=args [1].AsNumber ();if _gacd .Type !=ResultTypeNumber ||_aabe .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_bcec :=_cd .Trunc (_gacd .ValueNumber );_cade :=_cd .Trunc (_aabe .ValueNumber );if _cade > _bcec {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");
};if _cade ==_bcec ||_cade ==0{return MakeNumberResult (1);};_cgcfg :=float64 (1);for _ffbg :=float64 (1);_ffbg <=_cade ;_ffbg ++{_cgcfg *=(_bcec +1-_ffbg )/_ffbg ;};return MakeNumberResult (_cgcfg );};const _ddag int =30;

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_bcad :=args [0].AsNumber ();if _bcad .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_eddc :=int (_bcad .ValueNumber );_fbgc :=make ([][]Result ,0,_eddc );for _fcga :=0;_fcga < _eddc ;_fcga ++{_dggbc :=make ([]Result ,_eddc );for _aebd :=0;_aebd < _eddc ;_aebd ++{if _fcga ==_aebd {_dggbc [_aebd ]=MakeNumberResult (1.0);}else {_dggbc [_aebd ]=MakeNumberResult (0.0);
};};_fbgc =append (_fbgc ,_dggbc );};return MakeArrayResult (_fbgc );};

// String returns a string representation of a horizontal range.
func (_dcbge HorizontalRange )String ()string {return _dcbge .horizontalRangeReference ()};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_aed :=len (args );if (_aed !=2&&_aed !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_geac :=0;if _aed ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_geac =int (args [2].ValueNumber );if !_fgcgb (_geac ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");
};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_acbg :=args [1].ValueNumber ;_gbaa ,_dcd :=_egdg (_cgd ,_acbg ,_geac );if _dcd .Type ==ResultTypeError {return _dcd ;};return MakeNumberResult (_gbaa );};var _fbde =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};


// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_cg .NewReader (s ));};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_bbgge string };var _cgbed =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _gfaeb (args ,false )};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_ffdgg *ivr )GetLabelPrefix (cellRef string )string {return ""};const _cdgeb =16;

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};func (_fegg VerticalRange )verticalRangeReference ()string {return _c .Sprintf ("\u0025\u0073\u003a%\u0073",_fegg ._ffge ,_fegg ._eggdd );
};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);const _bcdf ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";
type node struct{_abga tokenType ;_adeg string ;};

// Eval evaluates a range returning a list of results or an error.
func (_fdaba Range )Eval (ctx Context ,ev Evaluator )Result {_ffdca :=_fdaba ._edegf .Reference (ctx ,ev );_bafd :=_fdaba ._acfgb .Reference (ctx ,ev );_faed :=_abgc (_ffdca ,_bafd );if _ffdca .Type ==ReferenceTypeCell &&_bafd .Type ==ReferenceTypeCell {if _dcabg ,_cggdc :=ev .GetFromCache (_faed );
_cggdc {return _dcabg ;}else {_aagaa :=_afeeb (ctx ,ev ,_ffdca .Value ,_bafd .Value );ev .SetCache (_faed ,_aagaa );return _aagaa ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_faed );};const _dgcb =86400000000000;
func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dgcf :=args [0].AsNumber ();if _dgcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bgce :=float64 (0);if len (args )> 1{_dacc :=args [1].AsNumber ();if _dacc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bgce =_dacc .ValueNumber ;};_adbac :=_dgcf .ValueNumber ;_bebac :=1.0;if _bgce >=0{_bebac =_cd .Pow (1/10.0,_bgce );}else {return MakeNumberResult (0);};_adbac ,_cgbef :=_cd .Modf (_adbac /_bebac );_bgddg :=0.99999;if _cgbef > _bgddg {_adbac ++;}else if _cgbef < -_bgddg {_adbac --;
};_ =_cgbef ;return MakeNumberResult (_adbac *_bebac );};var _accg =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};
func _ffegg (_edcfc [][]Result )float64 {if len (_edcfc )==2{_acfg :=_edcfc [0][0].AsNumber ();_gfca :=_edcfc [0][1].AsNumber ();_gbaga :=_edcfc [1][0].AsNumber ();_daabg :=_edcfc [1][1].AsNumber ();if _acfg .Type !=ResultTypeNumber ||_gfca .Type !=ResultTypeNumber ||_gbaga .Type !=ResultTypeNumber ||_daabg .Type !=ResultTypeNumber {return _cd .NaN ();
};return _acfg .ValueNumber *_daabg .ValueNumber -_gbaga .ValueNumber *_gfca .ValueNumber ;};_ggge :=float64 (0);_aadd :=float64 (1);for _fcbe :=range _edcfc {_ggge +=_aadd *_edcfc [0][_fcbe ].ValueNumber *_ffegg (_gddg (_edcfc ,_fcbe ));_aadd *=-1;};return _ggge ;
};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_gedc .Float64 ());
};func _eedca (_eead []Result )[]rangeIndex {_gadf :=[]rangeIndex {};_dgcdg :=len (_eead );for _fdcc :=0;_fdcc < _dgcdg -1;_fdcc +=2{_geea :=[]rangeIndex {};_acdb :=_gfcf (_eead [_fdcc ]);_gcaec :=_ddgge (_eead [_fdcc +1]);if _fdcc ==0{for _dfac ,_faab :=range _acdb {for _fgfa ,_dddg :=range _faab {if _aaedf (_dddg ,_gcaec ){_geea =append (_geea ,rangeIndex {_dfac ,_fgfa });
};};};}else {for _ ,_adbaa :=range _gadf {_bacd :=_acdb [_adbaa ._cbfc ][_adbaa ._bcfgb ];if _aaedf (_bacd ,_gcaec ){_geea =append (_geea ,_adbaa );};};};if len (_geea )==0{return []rangeIndex {};};_gadf =_geea [:];};return _gadf ;};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_bdbb :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");
};_eafbd :=args [1].ValueNumber !=0;_baebb :=_afdce (args [2:],[]string {},_eafbd );return MakeStringResult (_cg .Join (_baebb ,_bdbb ));};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};const _bggd =57378;func _eega (_dbecf string ,_babac []Result )(*parsedReplaceObject ,Result ){if len (_babac )!=4{return nil ,MakeErrorResult (_dbecf +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _babac [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_dbecf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_cdbb :=_babac [0].ValueString ;if _babac [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbecf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");
};_eaca :=int (_babac [1].ValueNumber )-1;if _babac [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbecf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_adfd :=int (_babac [2].ValueNumber );if _babac [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_dbecf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");
};_gcgf :=_babac [3].ValueString ;return &parsedReplaceObject {_cdbb ,_eaca ,_adfd ,_gcgf },_aaa ;};func _cagb (_gaaf ,_bcfg ,_deb ,_bdec int )int {if _bcfg > _deb {return 0;};if _aee (_bdec ){return (_deb -_bcfg +1)*30;};_dfbg :=0;for _cadc :=_bcfg ;_cadc <=_deb ;
_cadc ++{_dfbg +=_ffe (_gaaf ,_cadc );};return _dfbg ;};func _gbba (_fcaf ,_cbe []float64 ,_ddddd float64 )float64 {_agaf :=_ddddd +1;_eae :=0.0;_eee :=len (_fcaf );_dfeg :=_cbe [0];for _efdf :=1;_efdf < _eee ;_efdf ++{_fecf :=(_cbe [_efdf ]-_dfeg )/365;
_eae -=_fecf *_fcaf [_efdf ]/_cd .Pow (_agaf ,_fecf +1);};return _eae ;};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_decfce :=args [0];if _decfce .Type !=ResultTypeNumber &&_decfce .Type !=ResultTypeString &&_decfce .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");
};_bbab :=args [1].ValueString ;switch _decfce .Type {case ResultTypeNumber :return MakeStringResult (_fga .Number (_decfce .ValueNumber ,_bbab ));case ResultTypeString :return MakeStringResult (_fga .String (_decfce .ValueString ,_bbab ));case ResultTypeEmpty :return MakeStringResult (_fga .Number (0,_bbab ));
case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");
};};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_bgbb :=len (args );if _bgbb < 4||_bgbb > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_aggfd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecegb :=args [1].ValueNumber ;if _ecegb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecedf :=args [2].ValueNumber ;if _ecedf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_egfb :=args [3].ValueNumber ;_gabb :=0.0;if _bgbb > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gabb =args [4].ValueNumber ;};_cgge :=0;if _bgbb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cgge =int (args [5].ValueNumber );if _cgge !=0{_cgge =1;};};return MakeNumberResult (_ccga (_aggfd ,_ecegb ,_ecedf ,_egfb ,_gabb ,_cgge ));};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_eedg :=args [0].ValueNumber ;_faa :=args [1].ValueNumber ;if _faa < _eedg {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");
};if _faa ==_eedg {return MakeNumberResult (0);};_dede :=_cg .ToLower (args [2].ValueString );if _dede =="\u0064"{return MakeNumberResult (_faa -_eedg );};_cged :=_dcbd (_eedg );_ega :=_dcbd (_faa );_dfb ,_fgbd ,_cfd :=_cged .Date ();_bccg ,_ggf ,_bcf :=_ega .Date ();
_cbc :=int (_fgbd );_gadd :=int (_ggf );var _gbe float64 ;switch _dede {case "\u0079":_gbe =float64 (_bccg -_dfb );if _gadd < _cbc ||(_gadd ==_cbc &&_bcf < _cfd ){_gbe --;};case "\u006d":_gagc :=_bccg -_dfb ;_fca :=_gadd -_cbc ;if _bcf < _cfd {_fca --;
};if _fca < 0{_gagc --;_fca +=12;};_gbe =float64 (_gagc *12+_fca );case "\u006d\u0064":_ccg :=_gadd ;if _bcf < _cfd {_ccg --;};_gbe =float64 (int (_faa -_caca (_bccg ,_ccg ,_cfd )));case "\u0079\u006d":_gbe =float64 (_gadd -_cbc );if _bcf < _cfd {_gbe --;
};if _gbe < 0{_gbe +=12;};case "\u0079\u0064":_deec :=_bccg ;if _gadd < _cbc ||(_gadd ==_cbc &&_bcf < _cfd ){_deec --;};_gbe =float64 (int (_faa -_caca (_deec ,_cbc ,_cfd )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");
};return MakeNumberResult (_gbe );};func _bcage (_bcab ,_eggd Result ,_fcbgg ,_aefa bool )cmpResult {_bcab =_bcab .AsNumber ();_eggd =_eggd .AsNumber ();if _bcab .Type !=_eggd .Type {return _addb ;};if _bcab .Type ==ResultTypeNumber {if _bcab .ValueNumber ==_eggd .ValueNumber {return _aefd ;
};if _bcab .ValueNumber < _eggd .ValueNumber {return _cadca ;};return _afbf ;};if _bcab .Type ==ResultTypeString {_cecgf :=_bcab .ValueString ;_aaec :=_eggd .ValueString ;if !_fcbgg {_cecgf =_cg .ToLower (_cecgf );_aaec =_cg .ToLower (_aaec );};if _aefa {_bcbe :=_bde .Match (_aaec ,_cecgf );
if _bcbe {return _aefd ;}else {return _afbf ;};};return cmpResult (_cg .Compare (_cecgf ,_aaec ));};if _bcab .Type ==ResultTypeEmpty {return _aefd ;};if _bcab .Type ==ResultTypeList {if len (_bcab .ValueList )< len (_eggd .ValueList ){return _cadca ;};
if len (_bcab .ValueList )> len (_eggd .ValueList ){return _afbf ;};for _bgcb :=range _bcab .ValueList {_adfbb :=_bcage (_bcab .ValueList [_bgcb ],_eggd .ValueList [_bgcb ],_fcbgg ,_aefa );if _adfbb !=_aefd {return _adfbb ;};};return _aefd ;};if _bcab .Type ==ResultTypeList {if len (_bcab .ValueArray )< len (_eggd .ValueArray ){return _cadca ;
};if len (_bcab .ValueArray )> len (_eggd .ValueArray ){return _afbf ;};for _egad :=range _bcab .ValueArray {_bafc :=_bcab .ValueArray [_egad ];_gbab :=_bcab .ValueArray [_egad ];if len (_bafc )< len (_gbab ){return _cadca ;};if len (_bafc )> len (_gbab ){return _afbf ;
};for _gcgde :=range _bafc {_daee :=_bcage (_bafc [_gcgde ],_gbab [_gcgde ],_fcbgg ,_aefa );if _daee !=_aefd {return _daee ;};};};return _aefd ;};return _addb ;};var _dggba =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};


// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_deee :=len (args );if _deee !=4&&_deee !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dcbda ,_decfg ,_affaa :=_bbd (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _affaa .Type ==ResultTypeError {return _affaa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbba :=args [2].ValueNumber ;if _cbba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_faeeg :=args [3].ValueNumber ;if _faeeg <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_aabcf :=0;if _deee ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aabcf =int (args [4].ValueNumber );if !_fgcgb (_aabcf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");
};};_fgabg ,_affaa :=_egdg (_dcbda ,_decfg ,_aabcf );if _affaa .Type ==ResultTypeError {return _affaa ;};return MakeNumberResult ((_faeeg /_cbba -1)/_fgabg );};var _db =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};func _adgcd (_caaf []Result ,_cbbe bool )(float64 ,float64 ){_bbcc :=0.0;
_fagdc :=0.0;for _ ,_facfa :=range _caaf {switch _facfa .Type {case ResultTypeNumber :if _cbbe ||!_facfa .IsBoolean {_fagdc +=_facfa .ValueNumber ;_bbcc ++;};case ResultTypeList ,ResultTypeArray :_gbffb ,_fdeee :=_adgcd (_facfa .ListValues (),_cbbe );_fagdc +=_gbffb ;
_bbcc +=_fdeee ;case ResultTypeString :if _cbbe {_bbcc ++;};case ResultTypeEmpty :};};return _fagdc ,_bbcc ;};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_bffag :=1.0;for _ ,_bdae :=range args {_bdae =_bdae .AsNumber ();switch _bdae .Type {case ResultTypeNumber :_bffag *=_bdae .ValueNumber ;case ResultTypeList ,ResultTypeArray :_bedad :=Product (_bdae .ListValues ());
if _bedad .Type !=ResultTypeNumber {return _bedad ;};_bffag *=_bedad .ValueNumber ;case ResultTypeString :case ResultTypeError :return _bdae ;case ResultTypeEmpty :default:return MakeErrorResult (_c .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_bdae .Type ));
};};return MakeNumberResult (_bffag );};func (_ggcdc node )String ()string {return _c .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_ggcdc ._abga ,_dbfdc (string (_ggcdc ._adeg )));};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbadc :=args [0].AsNumber ();if _dbadc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _dbadc .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_gbdad :=float64 (1);_eceaf :=_cd .Trunc (_dbadc .ValueNumber );for _gfgd :=_eceaf ;_gfgd > 1;_gfgd -=2{_gbdad *=_gfgd ;};return MakeNumberResult (_gbdad );};const _efcdf =57376;const _cdb =_bd .Second *1;

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ebcd :=args [0];switch _ebcd .Type {case ResultTypeError :return _ebcd ;
case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_ebcd .ValueNumber !=0);};if _ebcd .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _bfbf (args );case ResultTypeArray :return _dbfff (args );
default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};
};func _ccga (_deed ,_eebg ,_baga ,_bffd ,_dfa float64 ,_accc int )float64 {_edcf :=_beca (_deed ,_baga ,_bffd ,_dfa ,_accc );var _aecd float64 ;if _eebg ==1{if _accc ==1{_aecd =0;}else {_aecd =-_bffd ;};}else {if _accc ==1{_aecd =_dbgb (_deed ,_eebg -2,_edcf ,_bffd ,1)-_edcf ;
}else {_aecd =_dbgb (_deed ,_eebg -1,_edcf ,_bffd ,0);};};return _aecd *_deed ;};

// Eval evaluates and returns the result of a function call.
func (_aadbgg FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_dcba :=LookupFunction (_aadbgg ._fbab );if _dcba !=nil {_bfae :=make ([]Result ,len (_aadbgg ._bfaa ));for _fcafg ,_fcdf :=range _aadbgg ._bfaa {_bfae [_fcafg ]=_fcdf .Eval (ctx ,ev );
_bfae [_fcafg ].Ref =_fcdf .Reference (ctx ,ev );};if _ ,_cgfb :=_ggdc [_aadbgg ._fbab ];!_cgfb {if _dbdgb ,_ddbcc :=_bfaae (_bfae );_dbdgb {return _ddbcc ;};};return _dcba (_bfae );};_adgbb :=LookupFunctionComplex (_aadbgg ._fbab );if _adgbb !=nil {_cfdb :=make ([]Result ,len (_aadbgg ._bfaa ));
for _cgebd ,_dagg :=range _aadbgg ._bfaa {_cfdb [_cgebd ]=_dagg .Eval (ctx ,ev );_cfdb [_cgebd ].Ref =_dagg .Reference (ctx ,ev );};if _ ,_cdbba :=_ggdc [_aadbgg ._fbab ];!_cdbba {if _gebc ,_bdcd :=_bfaae (_cfdb );_gebc {return _bdcd ;};};return _adgbb (ctx ,ev ,_cfdb );
};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_aadbgg ._fbab );};const _dcbgc =2;

// Db implements the Excel DB function.
func Db (args []Result )Result {_addde :=len (args );if _addde !=4&&_addde !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cfag :=args [0].ValueNumber ;if _cfag < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbe :=args [1].ValueNumber ;if _dbe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dged :=args [2].ValueNumber ;if _dged <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ggbg :=args [3].ValueNumber ;if _ggbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};if _ggbg -_dged > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_dcfe :=12.0;if _addde ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dcfe =args [4].ValueNumber ;if _dcfe < 1||_dcfe > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");
};};if _dcfe ==12&&_ggbg > _dged {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _dbe >=_cfag {return MakeNumberResult (0);
};_baaa :=1-_cd .Pow (_dbe /_cfag ,1/_dged );_baaa =float64 (int (_baaa *1000+0.5))/1000;_dcg :=_cfag *_baaa *_dcfe /12;if _ggbg ==1{return MakeNumberResult (_dcg );};_bdeaa :=_dcg ;_geda :=0.0;_aggf :=_dged ;if _aggf > _ggbg {_aggf =_ggbg ;};for _gedb :=2.0;
_gedb <=_aggf ;_gedb ++{_geda =(_cfag -_bdeaa )*_baaa ;_bdeaa +=_geda ;};if _ggbg > _dged {return MakeNumberResult ((_cfag -_bdeaa )*_baaa *(12-_dcfe )/12);};return MakeNumberResult (_geda );};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_gcdbg :=args [0].ValueNumber ;if _gcdbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebga :=float64 (int (args [1].ValueNumber ));if _ebga < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult ((_cd .Pow (_gcdbg +1,1/_ebga )-1)*_ebga );};

// Eval evaluates and returns the result of a sheet expression.
func (_ebebc SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");
};var _aaa Result =MakeEmptyResult ();

// SetLocked does nothing for the invalid reference context.
func (_fgaeb *ivr )SetLocked (cellRef string ,locked bool ){};func _bedb (_cabd ,_cdbg float64 )float64 {_cabd =_cd .Trunc (_cabd );_cdbg =_cd .Trunc (_cdbg );if _cabd ==0{return _cdbg ;};if _cdbg ==0{return _cabd ;};for _cabd !=_cdbg {if _cabd > _cdbg {_cabd =_cabd -_cdbg ;
}else {_cdbg =_cdbg -_cabd ;};};return _cabd ;};var _cadeg _cb .Mutex ;func (_gafeg *ivr )SetOffset (col ,row uint32 ){};func (_cegedc *ivr )Sheet (name string )Context {return _cegedc };

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_befeb ,_afaab :=_ac .ParseFloat (v ,64);if _afaab !=nil {_cgg .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_afaab );
};return Number {_gbfba :_befeb };};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gdcfc :=args [0].AsString ();if _gdcfc .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");
};_aaag :=args [1].AsNumber ();if _aaag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_degg :=_gdcfc .ValueString ;if len (_degg )> 2&&(_cg .HasPrefix (_degg ,"\u0030\u0078")||_cg .HasPrefix (_degg ,"\u0030\u0058")){_degg =_degg [2:];};_fedag ,_egcb :=_ac .ParseInt (_degg ,int (_aaag .ValueNumber ),64);if _egcb !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");
};return MakeNumberResult (float64 (_fedag ));};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// String returns a string representation of Number.
func (_ggfa Number )String ()string {return _ac .FormatFloat (_ggfa ._gbfba ,'f',-1,64)};func _deeg (_ffagb Context ,_cfadf ,_bdbcc string )(string ,string ){_gaggb :=_cfadf +"\u0031";_ebfg :=_ffagb .LastRow (_cfadf );_fgbbc :=_bdbcc +_ac .Itoa (_ebfg );
return _gaggb ,_fgbbc ;};const _acdfa =57368;

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_edfa :=args [0];if _edfa .Type ==ResultTypeList {_gbff :=[][]Result {};for _ ,_gcba :=range _edfa .ValueList {_gbff =append (_gbff ,[]Result {_gcba });};return MakeArrayResult (_gbff );};_fagfg :=make ([][]Result ,len (_edfa .ValueArray [0]));for _ ,_eeef :=range _edfa .ValueArray {for _dffd ,_bgbga :=range _eeef {_fagfg [_dffd ]=append (_fagfg [_dffd ],_bgbga );
};};return MakeArrayResult (_fagfg );};type noCache struct{};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_bbagf :=len (args );if _bbagf < 2||_bbagf > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_aceg :=args [0];if _aceg .Type !=ResultTypeArray &&_aceg .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_fbee :=args [1].AsNumber ();if _fbee .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_bbeg :=int (_fbee .ValueNumber )-1;_gffa :=-1;if _bbagf ==3&&args [2].Type !=ResultTypeEmpty {_gfdb :=args [2].AsNumber ();if _gfdb .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_gffa =int (_gfdb .ValueNumber )-1;};if _bbeg ==-1&&_gffa ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};var _egdb []Result ;if _aceg .Type ==ResultTypeArray {_babgb :=_aceg .ValueArray ;if _bbeg < -1||_bbeg >=len (_babgb ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _bbeg ==-1{if _gffa >=len (_babgb [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_dccc :=[][]Result {};for _ ,_dfabc :=range _babgb {_ccgd :=_dfabc [_gffa ];
if _ccgd .Type ==ResultTypeEmpty {_ccgd =MakeNumberResult (0);};_dccc =append (_dccc ,[]Result {_ccgd });};return MakeArrayResult (_dccc );};_egdb =_babgb [_bbeg ];}else {_dcca :=_aceg .ValueList ;if _bbeg < -1||_bbeg >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _bbeg ==-1{if _gffa >=len (_dcca ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_cfade :=_dcca [_gffa ];if _cfade .Type ==ResultTypeEmpty {_cfade =MakeNumberResult (0);
};return _cfade ;};_egdb =_dcca ;};if _gffa < -1||_gffa > len (_egdb ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _gffa ==-1{_fdga :=[]Result {};
for _ ,_fgfb :=range _egdb {if _fgfb .Type ==ResultTypeEmpty {_fdga =append (_fdga ,MakeNumberResult (0));}else {_fdga =append (_fdga ,_fgfb );};};return MakeArrayResult ([][]Result {_fdga });};_beba :=_egdb [_gffa ];if _beba .Type ==ResultTypeEmpty {return MakeNumberResult (0);
};return _beba ;};func _bcae (_fcee string )bool {for _ ,_bbg :=range _bcd {_gcae :=_bbg .FindStringSubmatch (_fcee );if len (_gcae )> 1{return true ;};};return false ;};const _def ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";
func _bded (_cgb string ,_caa *_be .UpdateQuery )string {_dfd ,_cdd :=_ba .ParseCellReference (_cgb );if _cdd !=nil {return "\u0023\u0052\u0045F\u0021";};if _caa .UpdateType ==_be .UpdateActionRemoveColumn {_cfe :=_caa .ColumnIdx ;_bf :=_dfd .ColumnIdx ;
if _bf < _cfe {return _cgb ;}else if _bf ==_cfe {return "\u0023\u0052\u0045F\u0021";}else {return _dfd .Update (_be .UpdateActionRemoveColumn ).String ();};};return _cgb ;};const _gbd ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _cegda (args ,false )};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_bede ,_defcb :=_cfde ("\u0046\u0049\u004e\u0044",args );if _defcb .Type !=ResultTypeEmpty {return _defcb ;};_cebd :=_bede ._fefe ;if _cebd ==""{return MakeNumberResult (1.0);
};_aabg :=_bede ._afdg ;_deff :=_bede ._bdgb -1;_daac :=1;_fgfd :=0;for _fdgb :=range _aabg {if _fdgb !=0{_afee :=1;if _fdgb -_fgfd > 1{_afee =2;};_daac +=_afee ;};if _daac > _deff {_fbdc :=_cg .Index (_aabg [_fdgb :],_cebd );if _fbdc ==0{return MakeNumberResult (float64 (_daac ));
};};_fgfd =_fdgb ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_dcgb HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_decd :=_dcgb .horizontalRangeReference ();if _gfeb ,_eceae :=ev .GetFromCache (_decd );_eceae {return _gfeb ;};_feacf ,_gcad :=_dgceg (ctx ,_dcgb ._efda ,_dcgb ._bgae );_cgdfe :=_afeeb (ctx ,ev ,_feacf ,_gcad );
ev .SetCache (_decd ,_cgdfe );return _cgdfe ;};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_addc :=_cg .ToLower (args [0].ValueString );if !_bcae (_addc ){_ ,_ ,_ ,_dddc ,_efbd :=_eba (_addc );if _efbd .Type ==ResultTypeError {_efbd .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";
return _efbd ;};if _dddc {return MakeNumberResult (0);};};_bfff ,_aagf ,_adg ,_aged ,_ ,_gbb :=_ecd (_addc );if _gbb .Type ==ResultTypeError {return _gbb ;};_gcea :=_acd (float64 (_bfff ),float64 (_aagf ),_adg );if _aged {_gcea +=0.5;}else if _gcea >=1{_gcea -=float64 (int (_gcea ));
};return MakeNumberResult (_gcea );};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ddca ,_bebb ,_fggc :=_bbd (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _fggc .Type ==ResultTypeError {return _fggc ;};_dcfa ,_fggc :=_ffeg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _fggc .Type ==ResultTypeError {return _fggc ;};if _dcfa >=_ddca {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cgbb :=args [3].ValueNumber ;if _cgbb < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eggg :=args [4].ValueNumber ;if _eggg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_dfab :=args [5].ValueNumber ;if _dfab < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bdbc :=float64 (int (args [6].ValueNumber ));if !_cbae (_bdbc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gfdf :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gfdf =int (args [7].ValueNumber );if !_fgcgb (_gfdf ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");
};};_efcd ,_fggc :=_egdg (_dcfa ,_bebb ,_gfdf );if _fggc .Type ==ResultTypeError {return _fggc ;};_efcd *=_bdbc ;_cegf ,_fggc :=_egdg (_ddca ,_bebb ,_gfdf );if _fggc .Type ==ResultTypeError {return _fggc ;};_cegf *=_bdbc ;_acec ,_fggc :=_egdg (_dcfa ,_ddca ,_gfdf );
if _fggc .Type ==ResultTypeError {return _fggc ;};_acec *=_bdbc ;_bceg :=_dfab +_efcd *100*_cgbb /_bdbc ;_bceg /=_eggg +_acec *100*_cgbb /_bdbc ;_bceg --;_bceg *=_bdbc /_cegf ;return MakeNumberResult (_bceg );};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dgbf :=args [0].ValueNumber ;if _dgbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};_fgfg ,_cfbc :=_bbee (args [1],args [2],"\u0058\u004e\u0050\u0056");if _cfbc .Type ==ResultTypeError {return _cfbc ;};_fege :=_fgfg ._gfb ;_fagg :=_fgfg ._facf ;_bbagb :=0.0;_gaad :=_fagg [0];for _fgbda ,_aebf :=range _fege {_bbagb +=_aebf /_cd .Pow (1+_dgbf ,(_fagg [_fgbda ]-_gaad )/365);
};return MakeNumberResult (_bbagb );};func _bcagd (_dfdd ,_gaec []float64 ,_acaef float64 )float64 {_dbfcb :=_acaef +1;_aad :=_dfdd [0];_bgfda :=len (_dfdd );_faga :=_gaec [0];for _gfc :=1;_gfc < _bgfda ;_gfc ++{_aad +=_dfdd [_gfc ]/_cd .Pow (_dbfcb ,(_gaec [_gfc ]-_faga )/365);
};return _aad ;};func _afeeb (_eabdc Context ,_ddbed Evaluator ,_cgdc ,_ecde string )Result {_eebafe ,_bagfa :=_ba .ParseCellReference (_cgdc );if _bagfa !=nil {return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_cgdc ,_bagfa .Error ()));
};_bdaaf ,_cfcaa :=_eebafe .ColumnIdx ,_eebafe .RowIdx ;_becd ,_bbac :=_ba .ParseCellReference (_ecde );if _bbac !=nil {return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_ecde ,_bbac .Error ()));
};_egcgf ,_agfed :=_becd .ColumnIdx ,_becd .RowIdx ;_gccea :=[][]Result {};for _bdeef :=_cfcaa ;_bdeef <=_agfed ;_bdeef ++{_eefg :=[]Result {};for _dbade :=_bdaaf ;_dbade <=_egcgf ;_dbade ++{_fgcgc :=_eabdc .Cell (_c .Sprintf ("\u0025\u0073\u0025\u0064",_ba .IndexToColumn (_dbade ),_bdeef ),_ddbed );
_eefg =append (_eefg ,_fgcgc );};_gccea =append (_gccea ,_eefg );};if len (_gccea )==1{if len (_gccea [0])==1{return _gccea [0][0];};return MakeListResult (_gccea [0]);};return MakeArrayResult (_gccea );};var (_aagfd =0;_aceb =false ;);

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fefa :=args [0].AsString ();_cgaae :=args [1].AsString ();if _fefa .Type !=ResultTypeString ||_cgaae .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};return MakeBoolResult (_fefa .ValueString ==_cgaae .ValueString );};func _gfaeb (_cccb []Result ,_aaba bool )Result {_fcfd :="\u004d\u0049\u004e";if _aaba {_fcfd ="\u004d\u0049\u004e\u0041";};if len (_cccb )==0{return MakeErrorResult (_fcfd +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccdbc :=_cd .MaxFloat64 ;for _ ,_babga :=range _cccb {switch _babga .Type {case ResultTypeNumber :if (_aaba ||!_babga .IsBoolean )&&_babga .ValueNumber < _ccdbc {_ccdbc =_babga .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_eeefd :=_gfaeb (_babga .ListValues (),_aaba );
if _eeefd .ValueNumber < _ccdbc {_ccdbc =_eeefd .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_bfbe :=0.0;if _aaba {_bfbe =_babga .AsNumber ().ValueNumber ;};if _bfbe < _ccdbc {_ccdbc =_bfbe ;};default:_cgg .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_fcfd +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_babga .Type );
};};if _ccdbc ==_cd .MaxFloat64 {_ccdbc =0;};return MakeNumberResult (_ccdbc );};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_dggd :v }};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (ev .LastEvalIsRef ());};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};func _ffeg (_dgdb Result ,_fbad ,_cae string )(float64 ,Result ){var _eced float64 ;switch _dgdb .Type {case ResultTypeNumber :_eced =float64 (int (_dgdb .ValueNumber ));case ResultTypeString :_ccgc :=DateValue ([]Result {_dgdb });
if _ccgc .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_fbad +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_cae );};_eced =_ccgc .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_cae );
};if _eced < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_fbad +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _eced ,_aaa ;};var _cfebb =map[string ]Function {};
var _fdacf =map[string ]FunctionComplex {};func _efbac (_afdc ,_gagad []float64 ,_eebc float64 )Result {_faaa :=false ;_agfg :=false ;for _geade :=0;_geade < len (_afdc );_geade ++{if _afdc [_geade ]> 0{_faaa =true ;};if _afdc [_geade ]< 0{_agfg =true ;
};};if !_faaa ||!_agfg {return MakeErrorResultType (ErrorTypeNum ,"");};_deeag :=_eebc ;_bfgd :=1e-10;_cbfdb :=0;_egdf :=50;_fccea :=false ;for {_gedbb :=_bcagd (_afdc ,_gagad ,_deeag );_bfde :=_deeag -_gedbb /_gbba (_afdc ,_gagad ,_deeag );_acfc :=_cd .Abs (_bfde -_deeag );
_deeag =_bfde ;_cbfdb ++;if _acfc <=_bfgd ||_cd .Abs (_gedbb )<=_bfgd {break ;};if _cbfdb > _egdf {_fccea =true ;break ;};};if _fccea ||_cd .IsNaN (_deeag )||_cd .IsInf (_deeag ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_deeag );
};func _cgdd (_cgag ,_bbagfb ,_ecfdgg Reference )string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_cgag .Value ,_bbagfb .Value ,_ecfdgg .Value );};const _agg ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";


// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_bccea :=len (args );if _bccea !=4&&_bccea !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_efef :=args [0].ValueNumber ;if _efef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dgde :=args [1].ValueNumber ;if _dgde < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dgbbc :=args [2].ValueNumber ;if _dgbbc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_faee :=args [3].ValueNumber ;if _faee < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");
};if _faee > _dgbbc {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_acf :=2.0;if _bccea ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acf =args [4].ValueNumber ;if _acf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};return MakeNumberResult (_cbcd (_efef ,_dgde ,_dgbbc ,_faee ,_acf ));};

// Reference returns an invalid reference for Negate.
func (_cecff Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };type rangeIndex struct{_cbfc int ;_bcfgb int ;};var _adbeb =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};


// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_aaed :=_eegg (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _aaed .Type !=ResultTypeEmpty {return _aaed ;};_abdc :=_eedca (args );return MakeNumberResult (float64 (len (_abdc )));};func _eegg (_agec []Result ,_gafc bool ,_dbec string )Result {var _edaa ,_eaebf string ;
if _gafc {_edaa ="\u0074\u0068\u0072e\u0065";_eaebf ="\u006f\u0064\u0064";}else {_edaa ="\u0074\u0077\u006f";_eaebf ="\u0065\u0076\u0065\u006e";};_dffb :=len (_agec );if (_gafc &&_dffb < 3)||(!_gafc &&_dffb < 2){return MakeErrorResult (_dbec +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_edaa +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};if (_dffb /2*2==_dffb )==_gafc {return MakeErrorResult (_dbec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_eaebf +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_fccg :=-1;_ddae :=-1;
for _eagcg :=0;_eagcg < _dffb ;_eagcg +=2{_baeac :=_agec [_eagcg ];if _baeac .Type !=ResultTypeArray &&_baeac .Type !=ResultTypeList {return MakeErrorResult (_dbec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");
};_efeff :=_gfcf (_baeac );if _ddae ==-1{_ddae =len (_efeff );_fccg =len (_efeff [0]);}else if len (_efeff )!=_ddae ||len (_efeff [0])!=_fccg {return MakeErrorResult (_dbec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");
};if _gafc &&_eagcg ==0{_eagcg --;};};return _aaa ;};type countMode byte ;

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_eede :=_bd .Now ();
_ ,_ace :=_eede .Zone ();_bgf :=_eab +float64 (_eede .Unix ()+int64 (_ace ))/86400;return MakeNumberResult (_bgf );};func _caca (_fdce ,_bfc ,_ccb int )float64 {return float64 (_gggg (_fdce ,_bd .Month (_bfc ),_ccb )/86400)+_eab ;};const _adgf =-1000;func (_bgff *yyParserImpl )Parse (yylex yyLexer )int {_ecede :=_bd .Now ();
var _gefe int ;var _dead yySymType ;var _agddb []yySymType ;_ =_agddb ;_afbag :=_bgff ._gfgf [:];Nerrs :=0;Errflag :=0;_gcfd :=0;_bgff ._bdfec =-1;_bbbc :=-1;defer func (){_gcfd =-1;_bgff ._bdfec =-1;_bbbc =-1}();_ffcg :=-1;goto _cdbgb ;_afgg :return 0;
_cfccaa :return 1;_cdbgb :if _fcag (_ecede ){_cgg .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _cfccaa ;};if _aagfd >=4{_c .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_bcggf (_bbbc ),_fgdb (_gcfd ));
};_ffcg ++;if _ffcg >=len (_afbag ){_aace :=make ([]yySymType ,len (_afbag )*2);copy (_aace ,_afbag );_afbag =_aace ;};_afbag [_ffcg ]=_dead ;_afbag [_ffcg ]._caafa =_gcfd ;_efecb :if _fcag (_ecede ){_cgg .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");
goto _cfccaa ;};_gefe =_bgec [_gcfd ];if _gefe <=_adgf {goto _bfgf ;};if _bgff ._bdfec < 0{_bgff ._bdfec ,_bbbc =_agbd (yylex ,&_bgff ._ccdg );};_gefe +=_bbbc ;if _gefe < 0||_gefe >=_gbccg {goto _bfgf ;};_gefe =_bbceg [_gefe ];if _accg [_gefe ]==_bbbc {_bgff ._bdfec =-1;
_bbbc =-1;_dead =_bgff ._ccdg ;_gcfd =_gefe ;if Errflag > 0{Errflag --;};goto _cdbgb ;};_bfgf :if _fcag (_ecede ){_cgg .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _cfccaa ;};_gefe =_fbde [_gcfd ];
if _gefe ==-2{if _bgff ._bdfec < 0{_bgff ._bdfec ,_bbbc =_agbd (yylex ,&_bgff ._ccdg );};_ccef :=0;for {if _cfbe [_ccef +0]==-1&&_cfbe [_ccef +1]==_gcfd {break ;};_ccef +=2;};for _ccef +=2;;_ccef +=2{_gefe =_cfbe [_ccef +0];if _gefe < 0||_gefe ==_bbbc {break ;
};};_gefe =_cfbe [_ccef +1];if _gefe < 0{goto _afgg ;};};if _gefe ==0{switch Errflag {case 0:yylex .Error (_fcda (_gcfd ,_bbbc ));Nerrs ++;if _aagfd >=1{_c .Printf ("\u0025\u0073",_fgdb (_gcfd ));_c .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_bcggf (_bbbc ));
};fallthrough;case 1,2:Errflag =3;for _ffcg >=0{_gefe =_bgec [_afbag [_ffcg ]._caafa ]+_dcbgc ;if _gefe >=0&&_gefe < _gbccg {_gcfd =_bbceg [_gefe ];if _accg [_gcfd ]==_dcbgc {goto _cdbgb ;};};if _aagfd >=2{_c .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_afbag [_ffcg ]._caafa );
};_ffcg --;};goto _cfccaa ;case 3:if _aagfd >=2{_c .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_bcggf (_bbbc ));};if _bbbc ==_dfae {goto _cfccaa ;};
_bgff ._bdfec =-1;_bbbc =-1;goto _efecb ;};};if _aagfd >=2{_c .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_gefe ,_fgdb (_gcfd ));};_deac :=_gefe ;_dddcg :=_ffcg ;_ =_dddcg ;_ffcg -=_dggba [_gefe ];
if _ffcg +1>=len (_afbag ){_egag :=make ([]yySymType ,len (_afbag )*2);copy (_egag ,_afbag );_afbag =_egag ;};_dead =_afbag [_ffcg +1];_gefe =_cedbf [_gefe ];_eddd :=_debbe [_gefe ];_ecbd :=_eddd +_afbag [_ffcg ]._caafa +1;if _ecbd >=_gbccg {_gcfd =_bbceg [_eddd ];
}else {_gcfd =_bbceg [_ecbd ];if _accg [_gcfd ]!=-_gefe {_gcfd =_bbceg [_eddd ];};};switch _deac {case 1:_agddb =_afbag [_dddcg -1:_dddcg +1];{yylex .(*plex )._bbgb =_dead ._gcef ;};case 3:_agddb =_afbag [_dddcg -2:_dddcg +1];{_dead ._gcef =_agddb [2]._gcef ;
};case 4:_agddb =_afbag [_dddcg -4:_dddcg +1];{};case 5:_agddb =_afbag [_dddcg -1:_dddcg +1];{_dead ._gcef =NewBool (_agddb [1]._gbcef ._adeg );};case 6:_agddb =_afbag [_dddcg -1:_dddcg +1];{_dead ._gcef =NewNumber (_agddb [1]._gbcef ._adeg );};case 7:_agddb =_afbag [_dddcg -1:_dddcg +1];
{_dead ._gcef =NewString (_agddb [1]._gbcef ._adeg );};case 8:_agddb =_afbag [_dddcg -1:_dddcg +1];{_dead ._gcef =NewError (_agddb [1]._gbcef ._adeg );};case 9:_agddb =_afbag [_dddcg -2:_dddcg +1];{_dead ._gcef =_agddb [2]._gcef ;};case 10:_agddb =_afbag [_dddcg -2:_dddcg +1];
{_dead ._gcef =NewNegate (_agddb [2]._gcef );};case 15:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =_agddb [2]._gcef ;};case 17:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =NewConstArrayExpr (_agddb [2]._begf );};case 18:_agddb =_afbag [_dddcg -1:_dddcg +1];
{_dead ._begf =append (_dead ._begf ,_agddb [1]._fccgd );};case 19:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._begf =append (_agddb [1]._begf ,_agddb [3]._fccgd );};case 20:_agddb =_afbag [_dddcg -1:_dddcg +1];{_dead ._fccgd =append (_dead ._fccgd ,_agddb [1]._gcef );
};case 21:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._fccgd =append (_agddb [1]._fccgd ,_agddb [3]._gcef );};case 23:_agddb =_afbag [_dddcg -2:_dddcg +1];{_dead ._gcef =NewPrefixExpr (_agddb [1]._gcef ,_agddb [2]._gcef );};case 25:_agddb =_afbag [_dddcg -1:_dddcg +1];
{_dead ._gcef =NewSheetPrefixExpr (_agddb [1]._gbcef ._adeg );};case 26:_agddb =_afbag [_dddcg -1:_dddcg +1];{_dead ._gcef =NewCellRef (_agddb [1]._gbcef ._adeg );};case 27:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =NewRange (_agddb [1]._gcef ,_agddb [3]._gcef );
};case 28:_agddb =_afbag [_dddcg -4:_dddcg +1];{_dead ._gcef =NewPrefixRangeExpr (_agddb [1]._gcef ,_agddb [2]._gcef ,_agddb [4]._gcef );};case 29:_agddb =_afbag [_dddcg -1:_dddcg +1];{_dead ._gcef =NewNamedRangeRef (_agddb [1]._gbcef ._adeg );};case 30:_agddb =_afbag [_dddcg -1:_dddcg +1];
{_dead ._gcef =NewHorizontalRange (_agddb [1]._gbcef ._adeg );};case 31:_agddb =_afbag [_dddcg -1:_dddcg +1];{_dead ._gcef =NewVerticalRange (_agddb [1]._gbcef ._adeg );};case 32:_agddb =_afbag [_dddcg -2:_dddcg +1];{_dead ._gcef =NewPrefixHorizontalRange (_agddb [1]._gcef ,_agddb [2]._gbcef ._adeg );
};case 33:_agddb =_afbag [_dddcg -2:_dddcg +1];{_dead ._gcef =NewPrefixVerticalRange (_agddb [1]._gcef ,_agddb [2]._gbcef ._adeg );};case 34:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =NewBinaryExpr (_agddb [1]._gcef ,BinOpTypePlus ,_agddb [3]._gcef );
};case 35:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =NewBinaryExpr (_agddb [1]._gcef ,BinOpTypeMinus ,_agddb [3]._gcef );};case 36:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =NewBinaryExpr (_agddb [1]._gcef ,BinOpTypeMult ,_agddb [3]._gcef );
};case 37:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =NewBinaryExpr (_agddb [1]._gcef ,BinOpTypeDiv ,_agddb [3]._gcef );};case 38:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =NewBinaryExpr (_agddb [1]._gcef ,BinOpTypeExp ,_agddb [3]._gcef );
};case 39:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =NewBinaryExpr (_agddb [1]._gcef ,BinOpTypeLT ,_agddb [3]._gcef );};case 40:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =NewBinaryExpr (_agddb [1]._gcef ,BinOpTypeGT ,_agddb [3]._gcef );
};case 41:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =NewBinaryExpr (_agddb [1]._gcef ,BinOpTypeLEQ ,_agddb [3]._gcef );};case 42:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =NewBinaryExpr (_agddb [1]._gcef ,BinOpTypeGEQ ,_agddb [3]._gcef );
};case 43:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =NewBinaryExpr (_agddb [1]._gcef ,BinOpTypeEQ ,_agddb [3]._gcef );};case 44:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =NewBinaryExpr (_agddb [1]._gcef ,BinOpTypeNE ,_agddb [3]._gcef );
};case 45:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._gcef =NewBinaryExpr (_agddb [1]._gcef ,BinOpTypeConcat ,_agddb [3]._gcef );};case 47:_agddb =_afbag [_dddcg -2:_dddcg +1];{_dead ._gcef =NewFunction (_agddb [1]._gbcef ._adeg ,nil );};case 48:_agddb =_afbag [_dddcg -3:_dddcg +1];
{_dead ._gcef =NewFunction (_agddb [1]._gbcef ._adeg ,_agddb [2]._fccgd );};case 49:_agddb =_afbag [_dddcg -1:_dddcg +1];{_dead ._fccgd =append (_dead ._fccgd ,_agddb [1]._gcef );};case 50:_agddb =_afbag [_dddcg -3:_dddcg +1];{_dead ._fccgd =append (_agddb [1]._fccgd ,_agddb [3]._gcef );
};case 53:_agddb =_afbag [_dddcg -0:_dddcg +1];{_dead ._gcef =NewEmptyExpr ();};};goto _cdbgb ;};func _bbee (_dcda ,_caaea Result ,_fgca string )(*xargs ,Result ){if _dcda .Type !=ResultTypeList &&_dcda .Type !=ResultTypeArray {return nil ,MakeErrorResult (_fgca +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_eafa :=_gfcf (_dcda );_dcbf :=[]float64 {};for _ ,_adfb :=range _eafa {for _ ,_fafc :=range _adfb {if _fafc .Type ==ResultTypeNumber &&!_fafc .IsBoolean {_dcbf =append (_dcbf ,_fafc .ValueNumber );}else {return nil ,MakeErrorResult (_fgca +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");
};};};_cfad :=len (_dcbf );if len (_dcbf )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _caaea .Type !=ResultTypeList &&_caaea .Type !=ResultTypeArray {return nil ,MakeErrorResult (_fgca +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_cdga :=_gfcf (_caaea );_gcgdd :=[]float64 {};_ecgb :=0.0;for _ ,_ccdb :=range _cdga {for _ ,_ddcfb :=range _ccdb {if _ddcfb .Type ==ResultTypeNumber &&!_ddcfb .IsBoolean {_bbbee :=float64 (int (_ddcfb .ValueNumber ));if _bbbee < _ecgb {return nil ,MakeErrorResultType (ErrorTypeNum ,_fgca +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");
};_gcgdd =append (_gcgdd ,_bbbee );_ecgb =_bbbee ;}else {return nil ,MakeErrorResult (_fgca +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_gcgdd )!=_cfad {return nil ,MakeErrorResultType (ErrorTypeNum ,"");
};return &xargs {_dcbf ,_gcgdd },MakeEmptyResult ();};const _fdac =57350;func _cegd (_beaf ,_efgc ,_aedf ,_ebf ,_gdcf ,_dbff float64 )float64 {var _fafa ,_ebeb float64 ;_aggff :=0.0;_cacg :=_cd .Ceil (_gdcf );_bdcee :=_beaf -_efgc ;_aeab :=false ;_aedd :=0.0;
for _egfa :=1.0;_egfa <=_cacg ;_egfa ++{if !_aeab {_fafa =_cbcd (_beaf ,_efgc ,_aedf ,_egfa ,_dbff );_aedd =_bdcee /(_aedf -_egfa +1);if _aedd > _fafa {_ebeb =_aedd ;_aeab =true ;}else {_ebeb =_fafa ;_bdcee -=_fafa ;};}else {_ebeb =_aedd ;};if _egfa ==_cacg {_ebeb *=_gdcf +1-_cacg ;
};_aggff +=_ebeb ;};return _aggff ;};

// Value returns a string version of the result.
func (_dafe Result )Value ()string {switch _dafe .Type {case ResultTypeNumber :_febca :=_ac .FormatFloat (_dafe .ValueNumber ,'f',-1,64);if len (_febca )> 12{_cfafc :=12;for _edab :=_cfafc ;_edab > 0&&_febca [_edab ]=='0';_edab --{_cfafc --;};_febca =_febca [0:_cfafc +1];
};return _febca ;case ResultTypeError :return _dafe .ValueString ;case ResultTypeString :return _dafe .ValueString ;case ResultTypeList :if len (_dafe .ValueList )==0{return "";};return _dafe .ValueList [0].Value ();case ResultTypeArray :if len (_dafe .ValueArray )==0||len (_dafe .ValueArray [0])==0{return "";
};return _dafe .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};func (_efdgb tokenType )String ()string {return _bcggf (int (_efdgb ))};


// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_bdeeg :=args [0].AsNumber ();if _bdeeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gffe :=float64 (1);if _bdeeg .ValueNumber < 0{_gffe =-1;};if len (args )> 1{_gdbb :=args [1].AsNumber ();if _gdbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");
};_gffe =_cd .Abs (_gdbb .ValueNumber );};if len (args )==1{return MakeNumberResult (_cd .Floor (_bdeeg .ValueNumber ));};_abcaa :=_bdeeg .ValueNumber ;_abcaa ,_bgca :=_cd .Modf (_abcaa /_gffe );if _bgca !=0{if _bdeeg .ValueNumber < 0{_abcaa --;};};return MakeNumberResult (_abcaa *_gffe );
};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_gdabf :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");
};_gdabf =int (args [1].ValueNumber );if _gdabf < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");
};if _gdabf ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_dcdc :=args [0].Value ();
if _gdabf > len (_dcdc ){return MakeStringResult (_dcdc );};return MakeStringResult (_dcdc [0:_gdabf ]);};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_cge ,_fed Expression ;_fa BinOpType ;};func _fbac (){_fagab =_fe .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_gdac =_fe .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_dfff =_fe .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");
_dbfdg =_fe .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_cgda =_fe .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_bbbd =_fe .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};func NewLexer ()*Lexer {return &Lexer {_fdada :make (chan *node )}};


// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_ebfed :=args [0].AsNumber ();
_feaae :=args [1].AsNumber ();if _ebfed .Type ==ResultTypeNumber &&_feaae .Type ==ResultTypeNumber {_cbcfd :=_cd .Atan2 (_feaae .ValueNumber ,_ebfed .ValueNumber );if _cbcfd !=_cbcfd {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");
};return MakeNumberResult (_cbcfd );};for _ ,_gddb :=range []ResultType {_ebfed .Type ,_feaae .Type }{switch _gddb {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
case ResultTypeError :return _ebfed ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gddb ));
};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};func (_edeff PrefixHorizontalRange )horizontalRangeReference (_agcgc string )string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_agcgc ,_edeff ._agefc ,_edeff ._ffde );
};

// String returns a string representation of a vertical range with prefix.
func (_adbaca PrefixVerticalRange )String ()string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_adbaca ._cacbb .String (),_adbaca ._eafdf ,_adbaca ._bcdae );};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_ebec ,_ddcff :=_gae (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _ddcff .Type ==ResultTypeError {return _ddcff ;};_dgge :=_ebec ._ebce ;_agca :=_ebec ._gaga ;_ffae :=_ebec ._dgca ;_gdef :=_ebec ._bagd ;
_efga :=_ebec ._defb ;_eagfd :=_ebec ._fgeee ;_dbfc :=_beca (_dgge ,_agca ,_ffae ,0,_eagfd );_cfaed :=0.0;if _gdef ==1{if _eagfd ==0{_cfaed =_dbfc +_ffae *_dgge ;}else {_cfaed =_dbfc ;};_gdef ++;};for _eedf :=_gdef ;_eedf <=_efga ;_eedf ++{if _eagfd ==1{_cfaed +=_dbfc -(_dbgb (_dgge ,_eedf -2,_dbfc ,_ffae ,1)-_dbfc )*_dgge ;
}else {_cfaed +=_dbfc -_dbgb (_dgge ,_eedf -1,_dbfc ,_ffae ,0)*_dgge ;};};return MakeNumberResult (_cfaed );};

// Number is a nubmer expression.
type Number struct{_gbfba float64 };

// String returns a string representation of PrefixExpr.
func (_ffafbd PrefixExpr )String ()string {return _c .Sprintf ("\u0025\u0073\u0021%\u0073",_ffafbd ._cbbdb .String (),_ffafbd ._dcee .String ());};func _fcd (_efd ,_ccf _bd .Time ,_adda int )float64 {if _efd .After (_ccf ){_efd ,_ccf =_ccf ,_efd ;};_aaga :=0;
_gdc ,_eddg ,_adcd :=_efd .Date ();_dfcb ,_cced ,_ecef :=_ccf .Date ();_afcg ,_eaa :=int (_eddg ),int (_cced );_cece ,_bceb :=_egbe (_gdc ,_afcg ,_adcd ,_adda ),_egbe (_dfcb ,_eaa ,_ecef ,_adda );if !_aee (_adda ){return _caca (_dfcb ,_eaa ,_bceb )-_caca (_gdc ,_afcg ,_cece );
};if _adda ==0{if (_afcg ==2||_cece < 30)&&_ecef ==31{_bceb =31;}else if _eaa ==2&&_bceb ==_ffe (_dfcb ,_eaa ){_bceb =_ffe (_dfcb ,2);};}else {if _afcg ==2&&_cece ==30{_cece =_ffe (_gdc ,2);};if _eaa ==2&&_bceb ==30{_bceb =_ffe (_dfcb ,2);};};if _gdc < _dfcb ||(_gdc ==_dfcb &&_afcg < _eaa ){_aaga =30-_cece +1;
_adcd =1;_cece =1;_cbfa :=_bd .Date (_gdc ,_bd .Month (_afcg ),_adcd ,0,0,0,0,_bd .UTC ).AddDate (0,1,0);if _cbfa .Year ()< _dfcb {_aaga +=_cagb (_cbfa .Year (),int (_cbfa .Month ()),12,_adda );_cbfa =_cbfa .AddDate (0,13-int (_cbfa .Month ()),0);_aaga +=_dbcf (_cbfa .Year (),_dfcb -1,_adda );
};_aaga +=_cagb (_dfcb ,int (_cbfa .Month ()),_eaa -1,_adda );_cbfa =_cbfa .AddDate (0,_eaa -int (_cbfa .Month ()),0);_afcg =_cbfa .Day ();};_aaga +=_bceb -_cece ;if _aaga > 0{return float64 (_aaga );}else {return 0;};};type durationArgs struct{_cff float64 ;
_acge float64 ;_edc float64 ;_bgfgd float64 ;_fcdd float64 ;_agac int ;};

// Bool is a boolean expression.
type Bool struct{_cgab bool };

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// FunctionCall is a function call expression.
type FunctionCall struct{_fbab string ;_bfaa []Expression ;};const _ece ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_agg +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _cbde (_ageb ,_cde _bd .Time ,_gbfd ,_gdfb int )_bd .Time {_aec :=_cde ;
_fdeb :=_ageb .Year ()-_cde .Year ();_aec =_aec .AddDate (_fdeb ,0,0);if _ageb .After (_aec ){_aec =_aec .AddDate (1,0,0);};_edf :=-12/_gbfd ;for _aec .After (_ageb ){_aec =_aec .AddDate (0,_edf ,0);};return _aec ;};type criteriaParsed struct{_eeaad bool ;
_cbdbd float64 ;_feba string ;_bdegd *criteriaRegex ;};

// Reference returns a string reference value to an expression with prefix.
func (_cdag PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_egbcf :=_cdag ._cbbdb .Reference (ctx ,ev );_bdadb :=_cdag ._dcee .Reference (ctx ,ev );if _egbcf .Type ==ReferenceTypeSheet &&_bdadb .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_egbcf .Value +"\u0021"+_bdadb .Value };
};return ReferenceInvalid ;};const _fdaf =57357;

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_efbc :=args [0].Type ;for _ ,_geee :=range args {if _geee .Type !=_efbc {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");
};};switch _efbc {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_gbcc :=len (args [0].ListValues ());_ggbb :=make ([]float64 ,_gbcc );for _afbg :=range _ggbb {_ggbb [_afbg ]=1.0;};for _ ,_dfde :=range args {if len (_dfde .ListValues ())!=_gbcc {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");
};for _bagfe ,_daeed :=range _dfde .ListValues (){_daeed =_daeed .AsNumber ();if _daeed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");
};_ggbb [_bagfe ]=_ggbb [_bagfe ]*_daeed .ValueNumber ;};};_gabc :=0.0;for _ ,_dacdf :=range _ggbb {_gabc +=_dacdf ;};return MakeNumberResult (_gabc );};return MakeNumberResult (1.0);};const _gbbfc int =30;const _cec =_agg +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";


// Eval evaluates a vertical range returning a list of results or an error.
func (_adbfd VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_ffce :=_adbfd .verticalRangeReference ();if _edfc ,_cfadc :=ev .GetFromCache (_ffce );_cfadc {return _edfc ;};_cagd ,_fgbdf :=_deeg (ctx ,_adbfd ._ffge ,_adbfd ._eggdd );_cgefc :=_afeeb (ctx ,ev ,_cagd ,_fgbdf );
ev .SetCache (_ffce ,_cgefc );return _cgefc ;};

// Eval evaluates the binary expression using the context given.
func (_acc BinaryExpr )String ()string {_gcb :="";switch _acc ._fa {case BinOpTypePlus :_gcb ="\u002b";case BinOpTypeMinus :_gcb ="\u002d";case BinOpTypeMult :_gcb ="\u002a";case BinOpTypeDiv :_gcb ="\u002f";case BinOpTypeExp :_gcb ="\u005e";case BinOpTypeLT :_gcb ="\u003c";
case BinOpTypeGT :_gcb ="\u003e";case BinOpTypeEQ :_gcb ="\u003d";case BinOpTypeLEQ :_gcb ="\u003c\u003d";case BinOpTypeGEQ :_gcb ="\u003e\u003d";case BinOpTypeNE :_gcb ="\u003c\u003e";case BinOpTypeConcat :_gcb ="\u0026";};return _acc ._cge .String ()+_gcb +_acc ._fed .String ();
};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_ecb ,_gbae :=_gbgg (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _gbae .Type ==ResultTypeError {return _gbae ;};_eabc :=_dcbd (_ecb ._gab );_ggcf :=_dcbd (_ecb ._cbge );_cbdb :=_ecb ._fddd ;_bba :=_ecb ._aebe ;
_gbag :=_cbde (_eabc ,_ggcf ,_cbdb ,_bba );_geag ,_bbc ,_cabe :=_gbag .Date ();return MakeNumberResult (_caca (_geag ,int (_bbc ),_cabe ));};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_ddef (args ,_faaaa ))};

// String returns an empty string for EmptyExpr.
func (_bg EmptyExpr )String ()string {return ""};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_efde ,_dgbb :=_gbgg (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _dgbb .Type ==ResultTypeError {return _dgbb ;};_feeb :=_efde ._fddd ;_ccc :=_efde ._aebe ;_aeaef ,_dgbb :=_edgg (_efde ._gab ,_efde ._cbge ,_feeb ,_ccc );
if _dgbb .Type ==ResultTypeError {return _dgbb ;};return MakeNumberResult (_aeaef );};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_cgbdg :=len (args );if _cgbdg < 3||_cgbdg > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cedg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eded :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_egfc :=args [2].ValueNumber ;_ffegc :=0.0;if _cgbdg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ffegc =args [3].ValueNumber ;};_gbfg :=0.0;if _cgbdg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gbfg =args [4].ValueNumber ;if _gbfg !=0{_gbfg =1;};};_eeae :=_eded *(1+_cedg *_gbfg )-_ffegc *_cedg ;_ffcd :=(_egfc *_cedg +_eded *(1+_cedg *_gbfg ));return MakeNumberResult (_cd .Log (_eeae /_ffcd )/_cd .Log (1+_cedg ));};func _cbcd (_cgdfc ,_dbdc ,_caaad ,_aeaa ,_fgdc float64 )float64 {var _fdcf float64 ;
_aebcd :=_fgdc /_caaad ;if _aebcd >=1{_aebcd =1;if _aeaa ==1{_fdcf =_cgdfc ;}else {_fdcf =0;};}else {_fdcf =_cgdfc *_cd .Pow (1-_aebcd ,_aeaa -1);};_abee :=_cgdfc *_cd .Pow (1-_aebcd ,_aeaa );var _fgec float64 ;if _abee < _dbdc {_fgec =_fdcf -_dbdc ;}else {_fgec =_fdcf -_abee ;
};if _fgec < 0{_fgec =0;};return _fgec ;};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_cbbdb Expression ;_dcee Expression ;};func _ecfd (_caee ,_adb float64 ,_bgbe ,_bcdef int )float64 {_baa :=_dcbd (_caee );_adbg :=_dcbd (_adb );if _bcdef ==1{_ccd :=_cbde (_baa ,_adbg ,_bgbe ,1);_eea :=_ccd .AddDate (0,12/_bgbe ,0);
return _fcd (_ccd ,_eea ,_bcdef );};return float64 (_eeg (0,_bcdef ))/float64 (_bgbe );};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dade :=args [0].AsNumber ();if _dade .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_febf :=args [1].AsNumber ();if _febf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};return MakeNumberResult (_cd .Pow (_dade .ValueNumber ,_febf .ValueNumber ));};func _aaedf (_efdc Result ,_bcebc *criteriaParsed )bool {if _efdc .IsBoolean {return false ;};_dbdca :=_efdc .Type ;if _bcebc ._eeaad {return _dbdca ==ResultTypeNumber &&_efdc .ValueNumber ==_bcebc ._cbdbd ;
}else if _dbdca ==ResultTypeNumber {return _gfed (_efdc .ValueNumber ,_bcebc ._bdegd );};return _aeed (_efdc ,_bcebc );};func _aeed (_dgbbe Result ,_badgd *criteriaParsed )bool {_cggc :=_cg .ToLower (_dgbbe .ValueString );_bbgg :=_badgd ._bdegd ._decfd ;
_ecgbg :=_badgd ._bdegd ._ffaa ;if _bbgg ==_bfea {return _cggc ==_ecgbg ||_bde .Match (_ecgbg ,_cggc );};if _dgbbe .Type !=ResultTypeEmpty {if _cggc ==_badgd ._feba ||_bde .Match (_badgd ._feba ,_cggc ){return true ;};if _ ,_dgaga :=_ac .ParseFloat (_ecgbg ,64);
_dgaga ==nil {return false ;};switch _bbgg {case _dcfaf :return _cggc <=_ecgbg ;case _dccg :return _cggc >=_ecgbg ;case _affc :return _cggc < _ecgbg ;case _gade :return _cggc > _ecgbg ;};};return false ;};func _abeg (_befb Result )[]Result {_feac :=_befb .ValueList ;
if _befb .Type ==ResultTypeArray {_feac =nil ;for _ ,_ebfb :=range _befb .ValueArray {if len (_ebfb )> 0{_feac =append (_feac ,_ebfb [0]);}else {_feac =append (_feac ,_aaa );};};};return _feac ;};

// Reference returns an invalid reference for Number.
func (_geeb Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_eeb EmptyExpr )Update (q *_be .UpdateQuery )Expression {return _eeb };func _bda (_dac ,_egd ,_gecb int )bool {if _egd < 1||_egd > 12{return false ;};if _gecb < 1{return false ;};return _gecb <=_ffe (_dac ,_egd );};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};func (_gbg *evCache )SetCache (key string ,value Result ){_gbg ._cad .Lock ();
_gbg ._abc [key ]=value ;_gbg ._cad .Unlock ();};const _ddbcd =57358;func _fgdb (_fbcb int )string {if _fbcb >=0&&_fbcb < len (_efac ){if _efac [_fbcb ]!=""{return _efac [_fbcb ];};};return _c .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_fbcb );
};func _fcda (_adcfa ,_ggbec int )string {const TOKSTART =4;if !_aceb {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_gadag :=range _fcefb {if _gadag ._agaeg ==_adcfa &&_gadag ._eegb ==_ggbec {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_gadag ._bebd ;
};};_fedgdg :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_bcggf (_ggbec );_eacab :=make ([]int ,0,4);_gaebd :=_bgec [_adcfa ];for _acaec :=TOKSTART ;_acaec -1< len (_adbeb );
_acaec ++{if _cadfd :=_gaebd +_acaec ;_cadfd >=0&&_cadfd < _gbccg &&_accg [_bbceg [_cadfd ]]==_acaec {if len (_eacab )==cap (_eacab ){return _fedgdg ;};_eacab =append (_eacab ,_acaec );};};if _fbde [_adcfa ]==-2{_cfgc :=0;for _cfbe [_cfgc ]!=-1||_cfbe [_cfgc +1]!=_adcfa {_cfgc +=2;
};for _cfgc +=2;_cfbe [_cfgc ]>=0;_cfgc +=2{_fbabg :=_cfbe [_cfgc ];if _fbabg < TOKSTART ||_cfbe [_cfgc +1]==0{continue ;};if len (_eacab )==cap (_eacab ){return _fedgdg ;};_eacab =append (_eacab ,_fbabg );};if _cfbe [_cfgc +1]!=0{return _fedgdg ;};};for _babd ,_dbgcg :=range _eacab {if _babd ==0{_fedgdg +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";
}else {_fedgdg +="\u0020\u006f\u0072\u0020";};_fedgdg +=_bcggf (_dbgcg );};return _fedgdg ;};

// Reference returns a string reference value to a horizontal range with prefix.
func (_ebgfe PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_dgagc :=_ebgfe ._geebd .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_ebgfe .horizontalRangeReference (_dgagc .Value )};};func _babc (_efbf int )int {if _efbf < 1900{if _efbf < 30{_efbf +=2000;
}else {_efbf +=1900;};};return _efbf ;};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eggf :=args [0].AsNumber ();if _eggf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (180.0/_cd .Pi *_eggf .ValueNumber );};func _bgg (_bddd ,_defa _bd .Time ,_afaa int )_bd .Time {_fcce :=_bd .Date (_bddd .Year (),_defa .Month (),_defa .Day (),0,0,0,0,_bd .UTC );if _fcce .After (_bddd ){_fcce =_fcce .AddDate (-1,0,0);
};for !_fcce .After (_bddd ){_fcce =_fcce .AddDate (0,12/_afaa ,0);};return _fcce ;};var _bagaf =[...]uint8 {0,17,33,49,63,78,93,108};

// Reference returns a string reference value to a sheet.
func (_eeda SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_eeda ._bbgge };};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_cbfd ,_aaggc :=_gbgg (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _aaggc .Type ==ResultTypeError {return _aaggc ;};return MakeNumberResult (_febb (_cbfd ._gab ,_cbfd ._cbge ,_cbfd ._fddd ,_cbfd ._aebe ));
};func _dgceg (_fecac Context ,_eccf ,_affd int )(string ,string ){_ccdd :="\u0041"+_ac .Itoa (_eccf );_dcbfb :=_fecac .LastColumn (_eccf ,_affd );_cfddf :=_dcbfb +_ac .Itoa (_affd );return _ccdd ,_cfddf ;};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_cadeg .Lock ();defer _cadeg .Unlock ();if _gbaeg ,_ddcb :=_fdacf [name ];_ddcb {return _gbaeg ;};return nil ;};func _cgc (_ef BinOpType ,_cga ,_dde []Result )Result {_efb :=[]Result {};for _feb :=range _cga {_fae :=_cga [_feb ].AsNumber ();
_cdc :=_dde [_feb ].AsNumber ();if _fae .Type !=ResultTypeNumber ||_cdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _ef {case BinOpTypePlus :_efb =append (_efb ,MakeNumberResult (_fae .ValueNumber +_cdc .ValueNumber ));case BinOpTypeMinus :_efb =append (_efb ,MakeNumberResult (_fae .ValueNumber -_cdc .ValueNumber ));case BinOpTypeMult :_efb =append (_efb ,MakeNumberResult (_fae .ValueNumber *_cdc .ValueNumber ));
case BinOpTypeDiv :if _cdc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_efb =append (_efb ,MakeNumberResult (_fae .ValueNumber /_cdc .ValueNumber ));case BinOpTypeExp :_efb =append (_efb ,MakeNumberResult (_cd .Pow (_fae .ValueNumber ,_cdc .ValueNumber )));
case BinOpTypeLT :_efb =append (_efb ,MakeBoolResult (_fae .ValueNumber < _cdc .ValueNumber ));case BinOpTypeGT :_efb =append (_efb ,MakeBoolResult (_fae .ValueNumber > _cdc .ValueNumber ));case BinOpTypeEQ :_efb =append (_efb ,MakeBoolResult (_fae .ValueNumber ==_cdc .ValueNumber ));
case BinOpTypeLEQ :_efb =append (_efb ,MakeBoolResult (_fae .ValueNumber <=_cdc .ValueNumber ));case BinOpTypeGEQ :_efb =append (_efb ,MakeBoolResult (_fae .ValueNumber >=_cdc .ValueNumber ));case BinOpTypeNE :_efb =append (_efb ,MakeBoolResult (_fae .ValueNumber !=_cdc .ValueNumber ));
default:return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ef ));};};return MakeListResult (_efb );};var _fagab ,_gdac ,_dbfdg ,_dfff ,_bbbd ,_cgda *_fe .Regexp ;


// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_ffge ,_eggdd string };

// Update returns the same object as updating sheet references does not affect named ranges.
func (_beab NamedRangeRef )Update (q *_be .UpdateQuery )Expression {return _beab };func _eeg (_gga ,_abg int )int {switch _abg {case 1:if _badc (_gga ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbgda :=args [0].AsNumber ();_gcdc :=args [1].AsNumber ();if _cbgda .Type !=ResultTypeNumber ||_gcdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_aeaba :=_cd .Trunc (_cbgda .ValueNumber );_dgbgd :=_cd .Trunc (_gcdc .ValueNumber );if _aeaba < _dgbgd {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");
};if _aeaba ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_aeaba +_dgbgd -1);args [1]=MakeNumberResult (_aeaba -1);return Combin (args );};var _gdggb =[...]int {1};

// String returns a string representation of String.
func (_dgea String )String ()string {return "\u0022"+_dgea ._ceadf +"\u0022"};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_cd .Pi );};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_edegf ,_acfgb Expression };

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_adeec SheetPrefixExpr )Update (q *_be .UpdateQuery )Expression {return _adeec };

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gbeb :=[]float64 {};
for _ ,_cebb :=range args {switch _cebb .Type {case ResultTypeString :_abaf :=_cebb .AsNumber ();if _abaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gbeb =append (_gbeb ,_abaf .ValueNumber );case ResultTypeList ,ResultTypeArray :_feca :=GCD (_cebb .ListValues ());if _feca .Type !=ResultTypeNumber {return _feca ;};_gbeb =append (_gbeb ,_feca .ValueNumber );case ResultTypeNumber :_gbeb =append (_gbeb ,_cebb .ValueNumber );
case ResultTypeError :return _cebb ;default:return MakeErrorResult (_c .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cebb .Type ));
};};if _gbeb [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_gbeb )==1{return MakeNumberResult (_gbeb [0]);
};_gcgb :=_gbeb [0];for _bcaa :=1;_bcaa < len (_gbeb );_bcaa ++{if _gbeb [_bcaa ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_gcgb =_bedb (_gcgb ,_gbeb [_bcaa ]);};return MakeNumberResult (_gcgb );};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_dfe :v }};type xargs struct{_gfb []float64 ;_facf []float64 ;};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fdcg :=args [0].AsNumber ();if _fdcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ccea :=int (_fdcg .ValueNumber );if _ccea < 0||_ccea > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");
};return MakeStringResult (_c .Sprintf ("\u0025\u0063",_ccea ));};func _cfge (_efa []Result ,_affa string )(*durationArgs ,Result ){_aggdb :=len (_efa );if _aggdb !=5&&_aggdb !=6{return nil ,MakeErrorResult (_affa +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fge ,_aabc ,_abgb :=_bbd (_efa [0],_efa [1],_affa );if _abgb .Type ==ResultTypeError {return nil ,_abgb ;};_fdab :=_efa [2];if _fdab .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_affa +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_accd :=_fdab .ValueNumber ;if _accd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_eagd :=_efa [3];if _eagd .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_affa +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_cecc :=_eagd .ValueNumber ;if _cecc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_fddg :=_efa [4];if _fddg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_affa +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_aegd :=float64 (int (_fddg .ValueNumber ));if !_cbae (_aegd ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dcag :=0;if _aggdb ==6&&_efa [5].Type !=ResultTypeEmpty {_ddbc :=_efa [5];
if _ddbc .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_affa +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dcag =int (_ddbc .ValueNumber );
if !_fgcgb (_dcag ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_affa );};};return &durationArgs {_fge ,_aabc ,_accd ,_cecc ,_aegd ,_dcag },_aaa ;
};

// Update updates the FunctionCall references after removing a row/column.
func (_cbdd FunctionCall )Update (q *_be .UpdateQuery )Expression {_cdaf :=[]Expression {};for _ ,_eddcg :=range _cbdd ._bfaa {_eeca :=_eddcg .Update (q );_cdaf =append (_cdaf ,_eeca );};return FunctionCall {_fbab :_cbdd ._fbab ,_bfaa :_cdaf };};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_fddf :=args [0];
if _fddf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fegf :=int (_fddf .ValueNumber );if _fegf < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");
};if len (args )<=_fegf {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");
};return args [_fegf ];};var _efac =[...]string {};

// Error is an error expression.
type Error struct{_dggd string };func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bage :=args [0].AsString ();if _bage .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (_bage .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (_bage .ValueString [0]));};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_eceag ,_aggdba :=_cfge (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _aggdba .Type ==ResultTypeError {return _aggdba ;};_gdff :=_eceag ._cff ;_gfee :=_eceag ._acge ;_faca :=_eceag ._edc ;_gaddba :=_eceag ._bgfgd ;
_adfc :=_eceag ._fcdd ;_adag :=_eceag ._agac ;_fgg :=_gde (_gdff ,_gfee ,_faca ,_gaddba ,_adfc ,_adag );if _fgg .Type ==ResultTypeError {return _fgg ;};_bcaf :=_fgg .ValueNumber /(1.0+_gaddba /_adfc );return MakeNumberResult (_bcaf );};const _geae ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";


// Eval evaluates and returns a string.
func (_daccb String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_daccb ._ceadf )};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_bacc ,_eac ,_fdg :=_agbb (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _fdg .Type ==ResultTypeError {return _fdg ;};if _eac < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");
};if _bacc ==0{return MakeNumberResult (0);};_egab :=_bacc < 0;if _egab {_bacc =-_bacc ;};_ege :=args [0].Value ();_eecb :=_cg .Split (_ege ,"\u002e");_ffag :=float64 (int (_bacc ));_bdadc :=_eecb [1];_dfgcg :=len (_bdadc );_ade :=int (_cd .Log10 (_eac ))+1;
_decf :=float64 (_ade -_dfgcg );_afb ,_ccfg :=_ac .ParseFloat (_bdadc ,64);if _ccfg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");
};_afb *=_cd .Pow (10,_decf );_ecdc :=_ffag +_afb /_eac ;if _egab {_ecdc =-_ecdc ;};return MakeNumberResult (_ecdc );};func _aee (_dacd int )bool {return _dacd ==0||_dacd ==4};