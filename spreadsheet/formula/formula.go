//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_b "bytes";_ae "errors";_a "fmt";_ff "github.com/unidoc/unioffice/v2/common/logger";_fa "github.com/unidoc/unioffice/v2/internal/sort";_ade "github.com/unidoc/unioffice/v2/internal/wildcard";_g "github.com/unidoc/unioffice/v2/spreadsheet/format";
_dc "github.com/unidoc/unioffice/v2/spreadsheet/reference";_db "github.com/unidoc/unioffice/v2/spreadsheet/update";_f "io";_fg "math";_ad "math/big";_da "math/rand";_bc "regexp";_c "sort";_ec "strconv";_ba "strings";_af "sync";_fd "time";_e "unicode";);
var _gba =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_gdagc :=args [0].AsNumber ();if _gdagc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};var _ffda float64 ;_fecec :=args [1].AsNumber ();if _fecec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ffda =_fecec .ValueNumber ;if _ffda < 0&&_gdagc .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");
};_gaecc :=_gdagc .ValueNumber ;_gaecc ,_agbf :=_fg .Modf (_gaecc /_ffda );if _agbf !=0{if _gdagc .ValueNumber < 0&&_agbf < 0{_gaecc --;};};return MakeNumberResult (_gaecc *_ffda );};func _gabf (_ddbf []Result ,_fddb bool )(float64 ,float64 ){_feaf :=0.0;
_eacdc :=0.0;for _ ,_ggbcf :=range _ddbf {switch _ggbcf .Type {case ResultTypeNumber :if _fddb ||!_ggbcf .IsBoolean {_eacdc +=_ggbcf .ValueNumber ;_feaf ++;};case ResultTypeList ,ResultTypeArray :_adag ,_fadfb :=_gabf (_ggbcf .ListValues (),_fddb );_eacdc +=_adag ;
_feaf +=_fadfb ;case ResultTypeString :if _fddb {_feaf ++;};case ResultTypeEmpty :};};return _eacdc ,_feaf ;};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_gbdd :=args [1].ValueNumber ;
_dad :=args [0];var _bgaf float64 ;switch _dad .Type {case ResultTypeEmpty :_bgaf =0;case ResultTypeNumber :_bgaf =_dad .ValueNumber ;case ResultTypeString :_afg :=DateValue ([]Result {args [0]});if _afg .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};_bgaf =_afg .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_eaac :=_gaa (_bgaf );
_abab :=_eaac .AddDate (0,int (_gbdd +1),0);_eec ,_ddfe ,_ :=_abab .Date ();_bbac :=_bag (_eec ,int (_ddfe ),0);if _bbac < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};if _eec ==1900&&_ddfe ==3{_bbac --;};return MakeNumberResult (_bbac );};var _aaacf =[...]uint8 {0,17,33,49,63,78,93,108};const _gcccd =57354;

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_edacb :=_b .Buffer {};for _ ,_cdefa :=range args {switch _cdefa .Type {case ResultTypeString :_edacb .WriteString (_cdefa .ValueString );case ResultTypeNumber :var _fggfe string ;if _cdefa .IsBoolean {if _cdefa .ValueNumber ==0{_fggfe ="\u0046\u0041\u004cS\u0045";
}else {_fggfe ="\u0054\u0052\u0055\u0045";};}else {_fggfe =_cdefa .AsString ().ValueString ;};_edacb .WriteString (_fggfe );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
};};return MakeStringResult (_edacb .String ());};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_gggg ,_fefg :=_fdca (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _fefg .Type ==ResultTypeError {return _fefg ;};_feba :=_gaa (_gggg ._cbec );_edfc :=_gaa (_gggg ._bab );_fbg :=_gggg ._edg ;_ddcg :=_gggg ._edff ;
_dcgc :=_ebe (_feba ,_edfc ,_fbg ,_ddcg );_fafg ,_gdce ,_dabe :=_dcgc .Date ();return MakeNumberResult (_bag (_fafg ,int (_gdce ),_dabe ));};

// Eval evaluates and returns the result of a function call.
func (_efbc FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_gcfe :=LookupFunction (_efbc ._eeea );if _gcfe !=nil {_gcac :=make ([]Result ,len (_efbc ._ffagd ));for _dbcf ,_aafb :=range _efbc ._ffagd {_gcac [_dbcf ]=_aafb .Eval (ctx ,ev );_gcac [_dbcf ].Ref =_aafb .Reference (ctx ,ev );
};if _ ,_geed :=_dcge [_efbc ._eeea ];!_geed {if _ggeee ,_cgced :=_acacf (_gcac );_ggeee {return _cgced ;};};return _gcfe (_gcac );};_gcggb :=LookupFunctionComplex (_efbc ._eeea );if _gcggb !=nil {_cfebd :=make ([]Result ,len (_efbc ._ffagd ));for _gecbf ,_ecef :=range _efbc ._ffagd {_cfebd [_gecbf ]=_ecef .Eval (ctx ,ev );
_cfebd [_gecbf ].Ref =_ecef .Reference (ctx ,ev );};if _ ,_bcda :=_dcge [_efbc ._eeea ];!_bcda {if _babb ,_ebgg :=_acacf (_cfebd );_babb {return _ebgg ;};};return _gcggb (ctx ,ev ,_cfebd );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_efbc ._eeea );
};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_dea ConstArrayExpr )Update (q *_db .UpdateQuery )Expression {return _dea };func _ccda (_ffagc ,_febb ,_affg ,_efaa ,_aeec float64 ,_dadb int )Result {_bff ,_afe :=_bca (_ffagc ,_febb ,_dadb );if _afe .Type ==ResultTypeError {return _afe ;};_eaec ,_addfa :=_edeg (_ffagc ,_febb ,int (_aeec ),_dadb );
if _addfa .Type ==ResultTypeError {return _addfa ;};_fcfa :=0.0;_fdaa :=0.0;_affg *=100/_aeec ;_efaa /=_aeec ;_efaa ++;_gcec :=_bff *_aeec -_eaec ;for _dae :=1.0;_dae < _eaec ;_dae ++{_cdde :=_dae +_gcec ;_dfac :=_affg /_fg .Pow (_efaa ,_cdde );_fdaa +=_dfac ;
_fcfa +=_cdde *_dfac ;};_decc :=(_affg +100)/_fg .Pow (_efaa ,_eaec +_gcec );_fdaa +=_decc ;_fcfa +=(_eaec +_gcec )*_decc ;_fcfa /=_fdaa ;_fcfa /=_aeec ;return MakeNumberResult (_fcfa );};

// String returns a string representation of String.
func (_fdcab String )String ()string {return "\u0022"+_fdcab ._fbddbe +"\u0022"};var _fgb float64 =25569.0;const _efa ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";
func _gaa (_cgf float64 )_fd .Time {_ecdg :=int64 ((_cgf -_fgb )*_fdd );return _fd .Unix (0,_ecdg ).UTC ();};const _aeg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";
func _gbcbb (_efge ,_gbfe Result ,_gdf string )(*xargs ,Result ){if _efge .Type !=ResultTypeList &&_efge .Type !=ResultTypeArray {return nil ,MakeErrorResult (_gdf +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_efeeb :=_ebadf (_efge );_afca :=[]float64 {};for _ ,_gdde :=range _efeeb {for _ ,_fadc :=range _gdde {if _fadc .Type ==ResultTypeNumber &&!_fadc .IsBoolean {_afca =append (_afca ,_fadc .ValueNumber );}else {return nil ,MakeErrorResult (_gdf +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");
};};};_edbf :=len (_afca );if len (_afca )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _gbfe .Type !=ResultTypeList &&_gbfe .Type !=ResultTypeArray {return nil ,MakeErrorResult (_gdf +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_gdbb :=_ebadf (_gbfe );_aabd :=[]float64 {};_egcc :=0.0;for _ ,_fffd :=range _gdbb {for _ ,_cddb :=range _fffd {if _cddb .Type ==ResultTypeNumber &&!_cddb .IsBoolean {_fadd :=float64 (int (_cddb .ValueNumber ));if _fadd < _egcc {return nil ,MakeErrorResultType (ErrorTypeNum ,_gdf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");
};_aabd =append (_aabd ,_fadd );_egcc =_fadd ;}else {return nil ,MakeErrorResult (_gdf +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_aabd )!=_edbf {return nil ,MakeErrorResultType (ErrorTypeNum ,"");
};return &xargs {_afca ,_aabd },MakeEmptyResult ();};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};func _acbgb (_cecf Reference ,_eefbe Context )bool {return _eefbe .Sheet (_cecf .Value )==InvalidReferenceContext ;};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];
};return args [0];};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_beea :=args [0].AsNumber ();if _beea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dfff :=float64 (0);if len (args )> 1{_ddbd :=args [1].AsNumber ();if _ddbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dfff =_ddbd .ValueNumber ;};_cgaa :=_beea .ValueNumber ;_dbba :=1.0;if _dfff >=0{_dbba =_fg .Pow (1/10.0,_dfff );}else {return MakeNumberResult (0);};_cgaa ,_caee :=_fg .Modf (_cgaa /_dbba );_ffcea :=0.99999;if _caee > _ffcea {_cgaa ++;}else if _caee < -_ffcea {_cgaa --;
};_ =_caee ;return MakeNumberResult (_cgaa *_dbba );};func (_afbcg *Lexer )emit (_geab tokenType ,_defg []byte ){if _beed {_a .Println ("\u0065\u006d\u0069\u0074",_geab ,_gggd (string (_defg )));};_afbcg ._bfaag <-&node {_geab ,string (_defg )};};func _faga (_ggcf ,_cbgg float64 ,_edc ,_dffg int )float64 {_eedc :=_gaa (_ggcf );
_dafa :=_gaa (_cbgg );_fgd :=_ebe (_eedc ,_dafa ,_edc ,_dffg );return _gffd (_fgd ,_eedc ,_dffg );};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_dedb HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_gffdd :=_dedb .horizontalRangeReference ();if _ffeb ,_daab :=ev .GetFromCache (_gffdd );_daab {return _ffeb ;};_cfgdd ,_ddga :=_dgce (ctx ,_dedb ._egee ,_dedb ._geacd );_ddeee :=_aaaab (ctx ,ev ,_cfgdd ,_ddga );
ev .SetCache (_gffdd ,_ddeee );return _ddeee ;};func (_efgfgc *noCache )SetCache (key string ,value Result ){};func _dece (_dcegd ,_cagba float64 )float64 {_dcegd =_fg .Trunc (_dcegd );_cagba =_fg .Trunc (_cagba );if _dcegd ==0&&_cagba ==0{return 0;};return _dcegd *_cagba /_fecfc (_dcegd ,_cagba );
};

// Match implements the MATCH function.
func Match (args []Result )Result {_gefe :=len (args );if _gefe !=2&&_gefe !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_aadcg :=1;if _gefe ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_bcac :=args [2].ValueNumber ;if _bcac ==-1||_bcac ==0{_aadcg =int (_bcac );};};_efgb :=args [1];var _eedb []Result ;switch _efgb .Type {case ResultTypeList :_eedb =_efgb .ValueList ;case ResultTypeArray :_cgdg :=_efgb .ValueArray ;for _ ,_feee :=range _cgdg {if len (_feee )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_eedb =append (_eedb ,_feee [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_becg :=_ceab (args [0]);switch _aadcg {case 0:for _aegc ,_aaca :=range _eedb {if _aaag (_aaca ,_becg ){return MakeNumberResult (float64 (_aegc +1));};};case -1:for _eecge :=0;_eecge < len (_eedb );_eecge ++{if _aaag (_eedb [_eecge ],_becg ){return MakeNumberResult (float64 (_eecge +1));
};if _becg ._cfdff &&(_eedb [_eecge ].ValueNumber < _becg ._dgeafa ){if _eecge ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_eecge ));};};case 1:for _cagb :=0;_cagb < len (_eedb );_cagb ++{if _aaag (_eedb [_cagb ],_becg ){return MakeNumberResult (float64 (_cagb +1));
};if _becg ._cfdff &&(_eedb [_cagb ].ValueNumber > _becg ._dgeafa ){if _cagb ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_cagb ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_dbcbb Context ,_cdeag Evaluator ,_ddebg []Result )Result ;func (_bdgf *ivr )SetOffset (col ,row uint32 ){};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aedc :=args [0].Ref ;if _aedc .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .HasFormula (_aedc .Value ));};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_gbab :=args [0];switch _gbab .Type {case ResultTypeEmpty :return MakeNumberResult (1);
case ResultTypeNumber :_cbg :=_gaa (_gbab .ValueNumber );return MakeNumberResult (float64 (_cbg .Month ()));case ResultTypeString :_bbbg :=_ba .ToLower (_gbab .ValueString );if !_dgf (_bbbg ){_ ,_ ,_ ,_ ,_afgb ,_gcc :=_ffd (_bbbg );if _gcc .Type ==ResultTypeError {_gcc .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";
return _gcc ;};if _afgb {return MakeNumberResult (1);};};_ ,_dfe ,_ ,_ ,_ded :=_cgd (_bbbg );if _ded .Type ==ResultTypeError {return _ded ;};return MakeNumberResult (float64 (_dfe ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");
};};const _bdfd =57357;

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_eaede :=[]float64 {};
for _ ,_eagb :=range args {switch _eagb .Type {case ResultTypeString :_faaee :=_eagb .AsNumber ();if _faaee .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_eaede =append (_eaede ,_faaee .ValueNumber );case ResultTypeList :_cgcc :=LCM (_eagb .ValueList );if _cgcc .Type !=ResultTypeNumber {return _cgcc ;};_eaede =append (_eaede ,_cgcc .ValueNumber );case ResultTypeNumber :_eaede =append (_eaede ,_eagb .ValueNumber );
case ResultTypeEmpty :case ResultTypeError :return _eagb ;};};if len (_eaede )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if _eaede [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_eaede )==1{return MakeNumberResult (_eaede [0]);
};_aggg :=_eaede [0];for _ffba :=1;_ffba < len (_eaede );_ffba ++{if _eaede [_ffba ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_aggg =_dece (_aggg ,_eaede [_ffba ]);};return MakeNumberResult (_aggg );};type yySymType struct{_eecgb int ;_fbegbe *node ;_gagad Expression ;_caae []Expression ;_edfeg [][]Expression ;};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aece :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eefd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eedf :=args [2].ValueNumber ;if _eedf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cdab :=args [3].ValueNumber ;if _cdab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _cdab > _eedf {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");
};_abafb :=(_aece -_eefd )*(_eedf -_cdab +1)*2;_fefaaa :=_eedf *(_eedf +1);return MakeNumberResult (_abafb /_fefaaa );};func _dbdg (_ggfb ,_fdbb ,_ggfg ,_bgga ,_afaa ,_eeeg float64 ,_cbfdg int )(float64 ,Result ){_bdbfb :=int (_eeeg );_bgedf :=_ebcad (_ggfb ,_fdbb ,_bdbfb ,_cbfdg );
_acea :=_agdf (_ggfb ,_fdbb ,_bdbfb ,_cbfdg )/_bgedf ;_cdbdf ,_dddgfd :=_edeg (_ggfb ,_fdbb ,_bdbfb ,_cbfdg );if _dddgfd .Type ==ResultTypeError {return 0,_dddgfd ;};_baabc :=_faga (_ggfb ,_fdbb ,_bdbfb ,_cbfdg );_abdd :=_afaa /_fg .Pow (1+_bgga /_eeeg ,_cdbdf -1+_acea );
_abdd -=100*_ggfg /_eeeg *_baabc /_bgedf ;_aafg :=100*_ggfg /_eeeg ;_dfda :=1+_bgga /_eeeg ;for _bggb :=0.0;_bggb < _cdbdf ;_bggb ++{_abdd +=_aafg /_fg .Pow (_dfda ,_bggb +_acea );};return _abdd ,MakeEmptyResult ();};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eafge :=args [0].AsNumber ();if _eafge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_ccdga :=float64 (1);if _eafge .ValueNumber < 0{_ccdga =-1;};if len (args )> 1{_dgba :=args [1].AsNumber ();if _dgba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ccdga =_dgba .ValueNumber ;};_bbdac :=float64 (1);if len (args )> 2{_cgca :=args [2].AsNumber ();if _cgca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_bbdac =_cgca .ValueNumber ;};if len (args )==1{return MakeNumberResult (_fg .Ceil (_eafge .ValueNumber ));};_ccad :=_eafge .ValueNumber ;_ccad ,_dacb :=_fg .Modf (_ccad /_ccdga );if _dacb !=0{if _eafge .ValueNumber > 0{_ccad ++;}else if _bbdac < 0{_ccad --;
};};return MakeNumberResult (_ccad *_ccdga );};func _gedf (_fgfcc []Result ,_debgb countMode )float64 {_cagd :=0.0;for _ ,_affgg :=range _fgfcc {switch _affgg .Type {case ResultTypeNumber :if _debgb ==_edcd ||(_debgb ==_efcg &&!_affgg .IsBoolean ){_cagd ++;
};case ResultTypeList ,ResultTypeArray :_cagd +=_gedf (_affgg .ListValues (),_debgb );case ResultTypeString :if _debgb ==_edcd {_cagd ++;};case ResultTypeEmpty :if _debgb ==_fcfcd {_cagd ++;};};};return _cagd ;};var _dcge =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };


// Reference returns a string reference value to a range with prefix.
func (_dbec PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_edddg :=_dbec ._agbb .Reference (ctx ,ev );_efbda :=_dbec ._acfe .Reference (ctx ,ev );_cdfa :=_dbec ._cbeb .Reference (ctx ,ev );if _edddg .Type ==ReferenceTypeSheet &&_efbda .Type ==ReferenceTypeCell &&_cdfa .Type ==ReferenceTypeCell {return MakeRangeReference (_efadc (_edddg ,_efbda ,_cdfa ));
};return ReferenceInvalid ;};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);func _fdcf (_dcbb string ,_gbgga []Result )(*parsedSearchObject ,Result ){_acaeb :=len (_gbgga );
if _acaeb !=2&&_acaeb !=3{return nil ,MakeErrorResult (_dcbb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dacbf :=_gbgga [0];
if _dacbf .Type ==ResultTypeError {return nil ,_dacbf ;};if _dacbf .Type !=ResultTypeString &&_dacbf .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_dfbdb :=_gbgga [1];if _dfbdb .Type ==ResultTypeError {return nil ,_dfbdb ;};if _dfbdb .Type !=ResultTypeString &&_dfbdb .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");
};_afdf :=_dfbdb .Value ();_dgfb :=_dacbf .Value ();_bcafg :=1;if _acaeb ==3&&_gbgga [2].Type !=ResultTypeEmpty {_adecc :=_gbgga [2];if _adecc .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");
};_bcafg =int (_adecc .ValueNumber );if _bcafg < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};if _bcafg > len (_afdf ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};};return &parsedSearchObject {_dgfb ,_afdf ,_bcafg },_cea ;};const (_efcg countMode =iota ;_edcd ;_fcfcd ;);

// Error is an error expression.
type Error struct{_cbc string };

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bgdd :=args [0].AsNumber ();if _bgdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gfad :=int (_bgdd .ValueNumber );if _gfad < 0||_gfad > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");
};return MakeStringResult (_a .Sprintf ("\u0025\u0063",_gfad ));};func _abggc (_daacb []Result )[]float64 {_gfgc :=make ([]float64 ,0);for _ ,_gadc :=range _daacb {if _gadc .Type ==ResultTypeEmpty {continue ;};_gadc =_gadc .AsNumber ();switch _gadc .Type {case ResultTypeNumber :if !_gadc .IsBoolean {_gfgc =append (_gfgc ,_gadc .ValueNumber );
};case ResultTypeList ,ResultTypeArray :_gfgc =append (_gfgc ,_abggc (_gadc .ListValues ())...);case ResultTypeString :default:_ff .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gadc .Type );
};};return _gfgc ;};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type !=ResultTypeString );};func _gdbca (_bfbcb Result ,_fdfeef *criteriaParsed )bool {if _bfbcb .IsBoolean {return false ;};_eafe :=_bfbcb .Type ;if _fdfeef ._cfdff {return _eafe ==ResultTypeNumber &&_bfbcb .ValueNumber ==_fdfeef ._dgeafa ;
}else if _eafe ==ResultTypeNumber {return _adgc (_bfbcb .ValueNumber ,_fdfeef ._gbaa );};return _eceg (_bfbcb ,_fdfeef );};

// String returns an empty string for EmptyExpr.
func (_gfe EmptyExpr )String ()string {return ""};func _ebadf (_eccd Result )[][]Result {switch _eccd .Type {case ResultTypeArray :return _eccd .ValueArray ;case ResultTypeList :return [][]Result {_eccd .ValueList };default:return [][]Result {};};};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_efed :=args [0];switch _efed .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_bfdb :=_gaa (_efed .ValueNumber );return MakeNumberResult (float64 (_bfdb .Minute ()));case ResultTypeString :_caaf :=_ba .ToLower (_efed .ValueString );if !_fceb (_caaf ){_ ,_ ,_ ,_ecdd ,_ggg :=_cgd (_caaf );if _ggg .Type ==ResultTypeError {_ggg .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";
return _ggg ;};if _ecdd {return MakeNumberResult (0);};};_ ,_bccg ,_ ,_ ,_ ,_dbfc :=_ffd (_caaf );if _dbfc .Type ==ResultTypeError {return _dbfc ;};return MakeNumberResult (float64 (_bccg ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");
};};var _addda =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Pv implements the Excel PV function.
func Pv (args []Result )Result {_eced :=len (args );if _eced < 3||_eced > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gdca :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_babe :=args [1].ValueNumber ;if _babe !=float64 (int (_babe )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dcc :=args [2].ValueNumber ;_aeac :=0.0;if _eced >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aeac =args [3].ValueNumber ;};_cgab :=0.0;if _eced ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cgab =args [4].ValueNumber ;if _cgab !=0{_cgab =1;};};if _gdca ==0{return MakeNumberResult (-_dcc *_babe -_aeac );}else {return MakeNumberResult ((((1-_fg .Pow (1+_gdca ,_babe ))/_gdca )*_dcc *(1+_gdca *_cgab )-_aeac )/_fg .Pow (1+_gdca ,_babe ));};
};func _acd (_bede int )int {if _bede < 1900{if _bede < 30{_bede +=2000;}else {_bede +=1900;};};return _bede ;};func _abbaa (_dfeed int )string {if _dfeed >=1&&_dfeed -1< len (_bcafd ){if _bcafd [_dfeed -1]!=""{return _bcafd [_dfeed -1];};};return _a .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_dfeed );
};func _ccgb (_abccc yyLexer )int {return _adad ().Parse (_abccc )};func _abc (_bea float64 )float64 {return float64 (int (_bea +0.5))};const _eadd =57375;func _aecb (_fdbab Result ,_bgcc int )[]Result {_gbce :=[]Result {};switch _fdbab .Type {case ResultTypeList :_dgdd :=_fdbab .ValueList ;
_bdcd :=len (_dgdd );for _dbgc :=0;_dbgc < _bgcc ;_dbgc ++{if _dbgc < _bdcd {_gbce =append (_gbce ,_dgdd [_dbgc ]);}else {_gbce =append (_gbce ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _ebcf :=0;
_ebcf < _bgcc ;_ebcf ++{_gbce =append (_gbce ,_fdbab );};};return _gbce ;};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_edfe ,_bgec ,_fdad :=_daa (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _fdad .Type ==ResultTypeError {return _fdad ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcbec :=_bgec -_edfe ;if _gcbec > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");
};_eaff :=args [2].ValueNumber ;if _eaff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult ((365*_eaff )/(360-_eaff *_gcbec ));};func init (){_cfe ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );
RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );
RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );
RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_facf :=len (args );if _facf < 5||_facf > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_agf :=args [0].ValueNumber ;if _agf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};
if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgff :=args [1].ValueNumber ;if _cgff < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dbe :=args [2].ValueNumber ;if _dbe ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _dbe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdgbd :=args [3].ValueNumber ;if _fdgbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebda :=args [4].ValueNumber ;if _fdgbd > _ebda {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");
};if _ebda > _dbe {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_cgggf :=2.0;if _facf > 5{if args [5].Type ==ResultTypeEmpty {_cgggf =0.0;
}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgggf =args [5].ValueNumber ;if _cgggf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};};_bbgae :=false ;if _facf > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_bbgae =args [6].ValueNumber !=0;};_abbd :=0.0;_degb :=_fg .Floor (_fdgbd );_agdfd :=_fg .Ceil (_ebda );if _bbgae {for _fbge :=_degb +1;_fbge <=_agdfd ;_fbge ++{_fed :=_cgba (_agf ,_cgff ,_dbe ,_fbge ,_cgggf );if _fbge ==_degb +1{_fed *=_fg .Min (_ebda ,_degb +1)-_fdgbd ;
}else if _fbge ==_agdfd {_fed *=_ebda +1-_agdfd ;};_abbd +=_fed ;};}else {_fdge :=_dbe ;var _bfdbg float64 ;if !_dcdc (_fdgbd ,_fg .Floor (_fdgbd )){if _cgggf ==1{_fbeg :=_dbe /2;if _fdgbd > _fbeg ||_dcdc (_fdgbd ,_fbeg ){_bfdbg =_fdgbd -_fbeg ;_fdgbd =_fbeg ;
_ebda -=_bfdbg ;_fdge ++;};};};if _cgggf !=0{_agf -=_cdaa (_agf ,_cgff ,_dbe ,_fdge ,_fdgbd ,_cgggf );};_abbd =_cdaa (_agf ,_cgff ,_dbe ,_dbe -_fdgbd ,_ebda -_fdgbd ,_cgggf );};return MakeNumberResult (_abbd );};func _eggfg (_afggb [][]Result )float64 {if len (_afggb )==2{_fbee :=_afggb [0][0].AsNumber ();
_dbaf :=_afggb [0][1].AsNumber ();_ffgfd :=_afggb [1][0].AsNumber ();_dfcd :=_afggb [1][1].AsNumber ();if _fbee .Type !=ResultTypeNumber ||_dbaf .Type !=ResultTypeNumber ||_ffgfd .Type !=ResultTypeNumber ||_dfcd .Type !=ResultTypeNumber {return _fg .NaN ();
};return _fbee .ValueNumber *_dfcd .ValueNumber -_ffgfd .ValueNumber *_dbaf .ValueNumber ;};_eeffe :=float64 (0);_gfge :=float64 (1);for _bfea :=range _afggb {_eeffe +=_gfge *_afggb [0][_bfea ].ValueNumber *_eggfg (_abgeg (_afggb ,_bfea ));_gfge *=-1;};
return _eeffe ;};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _ceee (args ,false )};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_gdcb :=len (args );if (_gdcb !=2&&_gdcb !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fcba :=0;if _gdcb ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fcba =int (args [2].ValueNumber );if !_eba (_fcba ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");
};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cda :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cbe :=args [1].ValueNumber ;_ddb ,_feb :=_bca (_cda ,_cbe ,_fcba );if _feb .Type ==ResultTypeError {return _feb ;};return MakeNumberResult (_ddb );};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_cbge PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_feca :=_cbge ._agbb .Reference (ctx ,ev );_bdded :=_cbge ._acfe .Reference (ctx ,ev );_eadcb :=_cbge ._cbeb .Reference (ctx ,ev );switch _feca .Type {case ReferenceTypeSheet :if _acbgb (_feca ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_feca .Value ));
};_fbea :=_efadc (_feca ,_bdded ,_eadcb );if _bdded .Type ==ReferenceTypeCell &&_eadcb .Type ==ReferenceTypeCell {if _deee ,_fbafg :=ev .GetFromCache (_fbea );_fbafg {return _deee ;}else {_faab :=_aaaab (ctx .Sheet (_feca .Value ),ev ,_bdded .Value ,_eadcb .Value );
ev .SetCache (_fbea ,_faab );return _faab ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_fbea );default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_feca .Type ));
};};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};const _aafec int =30;
func _faea (_egda string ,_abea func (_abfdg float64 )float64 )Function {return func (_gdbd []Result )Result {if len (_gdbd )!=1{return MakeErrorResult (_egda +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_bfabg :=_gdbd [0].AsNumber ();switch _bfabg .Type {case ResultTypeNumber :_fdag :=_abea (_bfabg .ValueNumber );if _fg .IsNaN (_fdag ){return MakeErrorResult (_egda +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};
if _fg .IsInf (_fdag ,0){return MakeErrorResult (_egda +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_fdag );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_egda +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _bfabg ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_egda ,_bfabg .Type ));
};};};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_gaec :=args [0].Ref ;for _gaec .Type ==ReferenceTypeNamedRange {_gaec =ctx .NamedRange (_gaec .Value );};_eaaba :="";switch _gaec .Type {case ReferenceTypeCell :_eaaba =_gaec .Value ;case ReferenceTypeRange :_afff :=_ba .Split (_gaec .Value ,"\u003a");
if len (_afff )==2{_eaaba =_afff [0];};default:return MakeErrorResult (_a .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_gaec .Type ));
};_gdeg ,_cgcd :=_dc .ParseCellReference (_eaaba );if _cgcd !=nil {return MakeErrorResult (_a .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_cgcd .Error ()));
};_gcgcg ,_cfed ,_ecbfg :=_gdeg .Column ,_gdeg .RowIdx ,_gdeg .SheetName ;_beaf :=args [1].AsNumber ();if _beaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};_acfdg :=args [2].AsNumber ();if _acfdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};var _afacf ,_ffdf Result ;if len (args )==3{_afacf =MakeNumberResult (1);_ffdf =MakeNumberResult (1);}else {_afacf =args [3].AsNumber ();if _afacf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");
};if _afacf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_ffdf =args [4].AsNumber ();if _ffdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");
};if _ffdf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_acgb :=_dc .ColumnToIndex (_gcgcg );_bdeb :=_cfed +uint32 (_beaf .ValueNumber );_bdeg :=_acgb +uint32 (_acfdg .ValueNumber );_efdca :=_bdeb +uint32 (_afacf .ValueNumber );_abee :=_bdeg +uint32 (_ffdf .ValueNumber );
if _afacf .ValueNumber > 0{_efdca --;}else {_efdca ++;_bdeb ,_efdca =_efdca ,_bdeb ;};if _ffdf .ValueNumber > 0{_abee --;}else {_abee ++;_bdeg ,_abee =_abee ,_bdeg ;};_fgfe :=_a .Sprintf ("\u0025\u0073\u0025\u0064",_dc .IndexToColumn (_bdeg ),_bdeb );_gecb :=_a .Sprintf ("\u0025\u0073\u0025\u0064",_dc .IndexToColumn (_abee ),_efdca );
if _ecbfg ==""{return _aaaab (ctx ,ev ,_fgfe ,_gecb );}else {return _aaaab (ctx .Sheet (_ecbfg ),ev ,_fgfe ,_gecb );};};type xargs struct{_eac []float64 ;_bbab []float64 ;};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_ffff :=len (args );if _ffff !=4&&_ffff !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_feef ,_efab :=_dfcc (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _efab .Type ==ResultTypeError {return _efab ;};_cgb ,_efab :=_dfcc (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");
if _efab .Type ==ResultTypeError {return _efab ;};if _feef >=_cgb {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_faba :=args [2].ValueNumber ;if _faba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ffe :=args [3].ValueNumber ;if _ffe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gebd :=0;if _ffff ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gebd =int (args [4].ValueNumber );if !_eba (_gebd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");
};};_eaecd ,_efab :=_bca (_feef ,_cgb ,_gebd );if _efab .Type ==ResultTypeError {return _efab ;};return MakeNumberResult (_ffe *_faba *_eaecd );};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _bbaa ,_baa float64 ;switch args [0].Type {case ResultTypeNumber :_baa =args [0].ValueNumber ;
case ResultTypeString :_cgc :=DateValue ([]Result {args [0]});if _cgc .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");
};_baa =_cgc .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_bbaa =args [1].ValueNumber ;
if _bbaa < 62&&_baa >=62{_bbaa --;};case ResultTypeString :_adea :=DateValue ([]Result {args [1]});if _adea .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");
};_bbaa =_adea .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_aab :=float64 (int (_baa -_bbaa ));return MakeNumberResult (_aab );
};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_beded :=len (args );if _beded !=3&&_beded !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bfbef ,_eaeg :=_cdafg (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _eaeg .Type ==ResultTypeError {return _eaeg ;};_afcg ,_eaeg :=_cdafg (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");
if _eaeg .Type ==ResultTypeError {return _eaeg ;};_cagefc ,_eaeg :=_cdafg (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _eaeg .Type ==ResultTypeError {return _eaeg ;};_bcge :=0;
if _beded ==3{return MakeStringResult (_ba .Replace (_bfbef ,_afcg ,_cagefc ,-1));}else {_efgg ,_ecec :=_febbgc (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");
if _ecec .Type ==ResultTypeError {return _ecec ;};_bcge =int (_efgg );if _bcge < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");
};_adfca :=_bfbef ;_eeeda :=_bcge ;_efffg :=-1;_dagd :=len (_afcg );_abfa :=0;for {_eeeda --;_dabdd :=_ba .Index (_adfca ,_afcg );if _dabdd ==-1{_efffg =-1;break ;}else {_efffg =_dabdd +_abfa ;if _eeeda ==0{break ;};_gadgb :=_dagd +_dabdd ;_abfa +=_gadgb ;
_adfca =_adfca [_gadgb :];};};if _efffg ==-1{return MakeStringResult (_bfbef );}else {_bdbg :=_bfbef [:_efffg ];_cgfgg :=_bfbef [_efffg +_dagd :];return MakeStringResult (_bdbg +_cagefc +_cgfgg );};};};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_abcd :=_cace (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _abcd .Type !=ResultTypeEmpty {return _abcd ;};_deef :=_ggbd (args [1:]);_baaff :=0.0;_bffc :=_ebadf (args [0]);for _ ,_gdfb :=range _deef {_baaff +=_bffc [_gdfb ._dfcbb ][_gdfb ._bdfc ].ValueNumber ;
};return MakeNumberResult (float64 (_baaff ));};const _fdd =86400000000000;

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_cdgc :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");
};_acbeb :=args [1].ValueNumber !=0;_ceef :=_adfd (args [2:],[]string {},_acbeb );return MakeStringResult (_ba .Join (_ceef ,_cdgc ));};func _gcce (_caff ,_fea _fd .Time )bool {_ggbe :=_caff .Unix ();_fdfa :=_fea .Unix ();_dfaa :=_caff .Year ();_cfcd :=_ddd (_dfaa ,_fd .March ,1);
if _age (_dfaa )&&_ggbe < _cfcd &&_fdfa >=_cfcd {return true ;};var _egf =_fea .Year ();var _ced =_ddd (_egf ,_fd .March ,1);return (_age (_egf )&&_fdfa >=_ced &&_ggbe < _ced );};func LexReader (r _f .Reader )chan *node {_agda :=NewLexer ();go _agda .lex (r );
return _agda ._bfaag };

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_cdffg :=args [1].ValueNumber ;_adgg :=args [0];var _bad float64 ;switch _adgg .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
case ResultTypeNumber :_bad =_adgg .ValueNumber ;case ResultTypeString :_cag :=DateValue ([]Result {args [0]});if _cag .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_bad =_cag .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_cabe :=_gaa (_bad );_dfdb :=_cabe .AddDate (0,int (_cdffg ),0);
_caea ,_cfcc ,_fba :=_dfdb .Date ();_cdc :=_bag (_caea ,int (_cfcc ),_fba );if _cdc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};return MakeNumberResult (_cdc );};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_bfaag chan *node ;_bafb _af .Mutex ;_efbf []chan *node ;_eceb []*node ;};const _edad ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";
func _bcde (_eefb string ,_ddce func (_adeac float64 )float64 )Function {return func (_gcbgb []Result )Result {if len (_gcbgb )!=1{return MakeErrorResult (_eefb +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_fbcdc :=_gcbgb [0].AsNumber ();switch _fbcdc .Type {case ResultTypeNumber :_fadb :=_ddce (_fbcdc .ValueNumber );if _fg .IsNaN (_fadb ){return MakeErrorResult (_eefb +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};
if _fg .IsInf (_fadb ,0){return MakeErrorResult (_eefb +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _fadb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_eefb +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult (1/_fadb );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_eefb +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _fbcdc ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eefb ,_fbcdc .Type ));
};};};const (_bbad cmpResult =0;_efffa cmpResult =-1;_fdegf cmpResult =1;_dfcf cmpResult =2;);

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dfcca :=args [0].AsNumber ();if _dfcca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bdeca :=args [1].AsNumber ();if _bdeca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};return MakeNumberResult (_fg .Pow (_dfcca .ValueNumber ,_bdeca .ValueNumber ));};func _fdbf (_ffce ,_deaa ,_dddf ,_caac float64 ,_cdgg int )float64 {var _efae float64 ;if _ffce ==0{_efae =_caac +_dddf *_deaa ;}else {_ebff :=_fg .Pow (1+_ffce ,_deaa );
if _cdgg ==1{_efae =_caac *_ebff +_dddf *(1+_ffce )*(_ebff -1)/_ffce ;}else {_efae =_caac *_ebff +_dddf *(_ebff -1)/_ffce ;};};return -_efae ;};func _eccg (_faae ,_ecgg _fd .Time ,_gcgc int )_fd .Time {_ccge :=_fd .Date (_faae .Year (),_ecgg .Month (),_ecgg .Day (),0,0,0,0,_fd .UTC );
if _ccge .After (_faae ){_ccge =_ccge .AddDate (-1,0,0);};for !_ccge .After (_faae ){_ccge =_ccge .AddDate (0,12/_gcgc ,0);};return _ccge ;};func _ggcfb (_fege Result ,_abbf ,_eaed int )[][]Result {_dfdc :=[][]Result {};switch _fege .Type {case ResultTypeArray :for _fbebg ,_cfeg :=range _fege .ValueArray {if _fbebg < _abbf {_dfdc =append (_dfdc ,_aecb (MakeListResult (_cfeg ),_eaed ));
}else {_dfdc =append (_dfdc ,_aecb (MakeErrorResultType (ErrorTypeNA ,""),_eaed ));};};case ResultTypeList :_aaeba :=_aecb (_fege ,_eaed );for _bcdd :=0;_bcdd < _abbf ;_bcdd ++{_dfdc =append (_dfdc ,_aaeba );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _ggac :=0;
_ggac < _abbf ;_ggac ++{_ebed :=_aecb (_fege ,_eaed );_dfdc =append (_dfdc ,_ebed );};};return _dfdc ;};func _ddd (_dddg int ,_bce _fd .Month ,_cfb int )int64 {if _dddg ==1900&&int (_bce )<=2{_cfb --;};_fcbb :=_fd .Date (_dddg ,_bce ,_cfb ,0,0,0,0,_fd .UTC );
return _fcbb .Unix ();};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbgg :=args [0].AsNumber ();if _bbgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _bbgg .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_ggbeg :=float64 (1);_afgg :=_fg .Trunc (_bbgg .ValueNumber );for _feda :=_afgg ;_feda > 1;_feda -=2{_ggbeg *=_feda ;};return MakeNumberResult (_ggbeg );};

// Reference returns an invalid reference for Negate.
func (_ecca Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Update updates references in the Negate after removing a row/column.
func (_ecgb Negate )Update (q *_db .UpdateQuery )Expression {return Negate {_adcb :_ecgb ._adcb .Update (q )};};const _gcgce =57372;

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_cfcg :=len (args );if _cfcg < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _cfcg > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fbeb :=args [0];_gddf :=args [1];if _gddf .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_abge :=args [2].AsNumber ();if _abge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aeba :=false ;if _cfcg ==4&&args [3].Type !=ResultTypeEmpty {_fcbf :=args [3].AsNumber ();if _fcbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _fcbf .ValueNumber ==0{_aeba =true ;};};_gddgb :=int (_abge .ValueNumber )-1;_ebfc :=-1;_cfag :=false ;_dccc :for _cfad ,_fcgc :=range _gddf .ValueArray {if len (_fcgc )==0{continue ;};_bdaed :=_fcgc [0];switch _cbgf (_bdaed ,_fbeb ,false ,_aeba ){case _efffa :_ebfc =_cfad ;
case _bbad :_ebfc =_cfad ;_cfag =true ;break _dccc ;};};if _ebfc ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_eefa :=_gddf .ValueArray [_ebfc ];
if _gddgb < 0||_gddgb >=len (_eefa ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _cfag ||!_aeba {return _eefa [_gddgb ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Eval evaluates and returns the result of an error expression.
func (_bcfc Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_bcfc ._cbc )};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_ceeb :=args [0];if _ceeb .Type !=ResultTypeNumber &&_ceeb .Type !=ResultTypeString &&_ceeb .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");
};_bbfg :=args [1].ValueString ;switch _ceeb .Type {case ResultTypeNumber :return MakeStringResult (_g .Number (_ceeb .ValueNumber ,_bbfg ));case ResultTypeString :return MakeStringResult (_g .String (_ceeb .ValueString ,_bbfg ));case ResultTypeEmpty :return MakeStringResult (_g .Number (0,_bbfg ));
case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");
};};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_cde *defEval )LastEvalIsRef ()bool {return _cde ._ace };func (_dccf *yyParserImpl )Lookahead ()int {return _dccf ._deec };

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_efdf ,_ddegg ,_dcef :=_daa (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _dcef .Type ==ResultTypeError {return _dcef ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dagg :=_ddegg -_efdf ;if _dagg > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_becda :=args [2].ValueNumber ;if _becda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (100*(1-_becda *_dagg /360));};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_cbc :v }};var _deefb =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};
func _cbgf (_fgcd ,_cfdb Result ,_cagef ,_ggcb bool )cmpResult {_fgcd =_fgcd .AsNumber ();_cfdb =_cfdb .AsNumber ();if _fgcd .Type !=_cfdb .Type {return _dfcf ;};if _fgcd .Type ==ResultTypeNumber {if _fgcd .ValueNumber ==_cfdb .ValueNumber {return _bbad ;
};if _fgcd .ValueNumber < _cfdb .ValueNumber {return _efffa ;};return _fdegf ;};if _fgcd .Type ==ResultTypeString {_daae :=_fgcd .ValueString ;_afdcg :=_cfdb .ValueString ;if !_cagef {_daae =_ba .ToLower (_daae );_afdcg =_ba .ToLower (_afdcg );};if _ggcb {_dege :=_ade .Match (_afdcg ,_daae );
if _dege {return _bbad ;}else {return _fdegf ;};};return cmpResult (_ba .Compare (_daae ,_afdcg ));};if _fgcd .Type ==ResultTypeEmpty {return _bbad ;};if _fgcd .Type ==ResultTypeList {if len (_fgcd .ValueList )< len (_cfdb .ValueList ){return _efffa ;};
if len (_fgcd .ValueList )> len (_cfdb .ValueList ){return _fdegf ;};for _efaeg :=range _fgcd .ValueList {_bafgg :=_cbgf (_fgcd .ValueList [_efaeg ],_cfdb .ValueList [_efaeg ],_cagef ,_ggcb );if _bafgg !=_bbad {return _bafgg ;};};return _bbad ;};if _fgcd .Type ==ResultTypeList {if len (_fgcd .ValueArray )< len (_cfdb .ValueArray ){return _efffa ;
};if len (_fgcd .ValueArray )> len (_cfdb .ValueArray ){return _fdegf ;};for _acae :=range _fgcd .ValueArray {_bdfbc :=_fgcd .ValueArray [_acae ];_egcag :=_fgcd .ValueArray [_acae ];if len (_bdfbc )< len (_egcag ){return _efffa ;};if len (_bdfbc )> len (_egcag ){return _fdegf ;
};for _begaa :=range _bdfbc {_gfg :=_cbgf (_bdfbc [_begaa ],_egcag [_begaa ],_cagef ,_ggcb );if _gfg !=_bbad {return _gfg ;};};};return _bbad ;};return _dfcf ;};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bedeg :=[]float64 {};
for _ ,_ebfe :=range args {switch _ebfe .Type {case ResultTypeString :_dabg :=_ebfe .AsNumber ();if _dabg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_bedeg =append (_bedeg ,_dabg .ValueNumber );case ResultTypeList ,ResultTypeArray :_geeeg :=GCD (_ebfe .ListValues ());if _geeeg .Type !=ResultTypeNumber {return _geeeg ;};_bedeg =append (_bedeg ,_geeeg .ValueNumber );case ResultTypeNumber :_bedeg =append (_bedeg ,_ebfe .ValueNumber );
case ResultTypeError :return _ebfe ;default:return MakeErrorResult (_a .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ebfe .Type ));
};};if _bedeg [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_bedeg )==1{return MakeNumberResult (_bedeg [0]);
};_gadg :=_bedeg [0];for _dcac :=1;_dcac < len (_bedeg );_dcac ++{if _bedeg [_dcac ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_gadg =_fecfc (_gadg ,_bedeg [_dcac ]);};return MakeNumberResult (_gadg );};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccegd :=args [0];if _ccegd .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ceea :=len (_ccegd .ValueArray );for _ ,_fgdd :=range _ccegd .ValueArray {if len (_fgdd )!=_ceea {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");
};};return MakeNumberResult (_eggfg (_ccegd .ValueArray ));};var _cdegg *_da .Rand ;func _abefd (_eadbc Result )bool {_eggf :=_eadbc .Type ;return _eggf !=ResultTypeArray &&_eggf !=ResultTypeList ;};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_aeeb :=_ba .Split (v ,"\u003a");if len (_aeeb )!=2{return nil ;};if _aeeb [0]> _aeeb [1]{_aeeb [0],_aeeb [1]=_aeeb [1],_aeeb [0];};return PrefixVerticalRange {_bfdfd :pfx ,_cafg :_aeeb [0],_egeec :_aeeb [1]};
};func (_cfab ResultType )String ()string {if _cfab >=ResultType (len (_aaacf )-1){return _a .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_cfab );};return _edad [_aaacf [_cfab ]:_aaacf [_cfab +1]];};func _gggd (_efgfg string )string {_efgfg =_ba .Replace (_efgfg ,"\u000a","\u005c\u006e",-1);
_efgfg =_ba .Replace (_efgfg ,"\u000d","\u005c\u0072",-1);_efgfg =_ba .Replace (_efgfg ,"\u0009","\u005c\u0074",-1);return _efgfg ;};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_adaa :v }};const _aggb =57369;func _cdafg (_afeb Result ,_ebdb ,_gcgd string )(string ,Result ){switch _afeb .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _afeb .Value (),_cea ;
default:return "",MakeErrorResult (_ebdb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gcgd +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_aged :=args [0].AsNumber ();if _aged .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gcdc :=float64 (1);_bddb :=args [1].AsNumber ();if _bddb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_gcdc =_bddb .ValueNumber ;if _gcdc < 0&&_aged .ValueNumber > 0||_gcdc > 0&&_aged .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");
};_agge :=_aged .ValueNumber ;_agge ,_dbace :=_fg .Modf (_agge /_gcdc );if _fg .Trunc (_dbace +0.5)> 0{_agge ++;};return MakeNumberResult (_agge *_gcdc );};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ada ,_df Expression ;_gb BinOpType ;};func (_gfgea *ivr )Sheet (name string )Context {return _gfgea };type yyLexer interface{Lex (_ggcab *yySymType )int ;Error (_aefeb string );};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_gdfea ,_fabec :=_ec .ParseFloat (v ,64);if _fabec !=nil {_ff .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_fabec );
};return Number {_bdbgc :_gdfea };};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bgg :=_fd .Now ();_ ,_aadg :=_bgg .Zone ();_gfce :=_dgff (_agaf ,_bgg .Unix ()+int64 (_aadg ))+1;return MakeNumberResult (_gfce );};func _ffd (_acgg string )(int ,int ,float64 ,bool ,bool ,Result ){_gafa :="";_ecb :=[]string {};for _eecg ,_geb :=range _egc {_ecb =_geb .FindStringSubmatch (_acgg );
if len (_ecb )> 1{_gafa =_eecg ;break ;};};if _gafa ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdb );};_beece :=_ecb [1]=="";_ecb =_ecb [49:];_cagg :=len (_ecb );_aabg :=_ecb [_cagg -1];_egae :=_aabg =="\u0061\u006d";_efee :=_aabg =="\u0070\u006d";
var _bbc ,_bbce int ;var _ggc float64 ;var _gbcb error ;switch _gafa {case "\u0068\u0068":_bbc ,_gbcb =_ec .Atoi (_ecb [0]);if _gbcb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdb );};_bbce =0;_ggc =0;case "\u0068\u0068\u003am\u006d":_bbc ,_gbcb =_ec .Atoi (_ecb [0]);
if _gbcb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdb );};_bbce ,_gbcb =_ec .Atoi (_ecb [2]);if _gbcb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdb );};_ggc =0;case "\u006d\u006d\u003as\u0073":_bbc =0;
_bbce ,_gbcb =_ec .Atoi (_ecb [0]);if _gbcb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdb );};_ggc ,_gbcb =_ec .ParseFloat (_ecb [2],64);if _gbcb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdb );
};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_bbc ,_gbcb =_ec .Atoi (_ecb [0]);if _gbcb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdb );};_bbce ,_gbcb =_ec .Atoi (_ecb [2]);if _gbcb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdb );
};_ggc ,_gbcb =_ec .ParseFloat (_ecb [4],64);if _gbcb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdb );};};if _bbce >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdb );};if _egae ||_efee {if _bbc > 12||_ggc >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdb );
}else if _bbc ==12{_bbc =0;};}else if _bbc >=24||_ggc >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdb );};return _bbc ,_bbce ,_ggc ,_efee ,_beece ,_cea ;};var _gegd =map[string ]FunctionComplex {};func (_faggf *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");
};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );
RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );
RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );
RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );
RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );
RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );
RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );
RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );
RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );
RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );
RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );
RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );
RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_abfg :=args [0].AsNumber ();if _abfg .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_efeb :=float64 (1);if _abfg .ValueNumber < 0{_efeb =-1;};if len (args )> 1{_ffec :=args [1].AsNumber ();if _ffec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_efeb =_ffec .ValueNumber ;};_bdec :=float64 (1);if len (args )> 2{_gaaf :=args [2].AsNumber ();if _gaaf .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bdec =_gaaf .ValueNumber ;};if len (args )==1{return MakeNumberResult (_fg .Floor (_abfg .ValueNumber ));};_ebcg :=_abfg .ValueNumber ;_ebcg ,_gecc :=_fg .Modf (_ebcg /_efeb );if _gecc !=0&&_abfg .ValueNumber < 0&&_bdec > 0{_ebcg ++;};return MakeNumberResult (_ebcg *_efeb );
};func _eba (_bbef int )bool {return _bbef >=0&&_bbef <=4};

// Update updates references in the VerticalRange after removing a row/column.
func (_ffbf VerticalRange )Update (q *_db .UpdateQuery )Expression {if q .UpdateType ==_db .UpdateActionRemoveColumn {_fbdbb :=_ffbf ;if q .UpdateCurrentSheet {_cgfcb :=q .ColumnIdx ;_fbdbb ._ccdb =_bda (_ffbf ._ccdb ,_cgfcb );_fbdbb ._ecddc =_bda (_ffbf ._ecddc ,_cgfcb );
};return _fbdbb ;};return _ffbf ;};const _eabce ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";


// Update returns the same object as updating sheet references does not affect Error.
func (_fgg Error )Update (q *_db .UpdateQuery )Expression {return _fgg };const (_daacf rmode =iota ;_gca ;_fbed ;);func (_bbaae *plex )Lex (lval *yySymType )int {_cfgaa =true ;_gbegg :=<-_bbaae ._ggfcf ;if _gbegg !=nil {lval ._fbegbe =_gbegg ;return int (lval ._fbegbe ._bedbb );
};return 0;};

// Reference returns a string reference value to a named range.
func (_efbef NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_efbef ._degdg };};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_deca :=MakeNumberResult (0);for _ ,_gaaab :=range args {_gaaab =_gaaab .AsNumber ();switch _gaaab .Type {case ResultTypeNumber :_deca .ValueNumber +=_gaaab .ValueNumber *_gaaab .ValueNumber ;case ResultTypeList ,ResultTypeArray :_defe :=SumSquares (_gaaab .ListValues ());
if _defe .Type !=ResultTypeNumber {return _defe ;};_deca .ValueNumber +=_defe .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gaaab ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_gaaab .Type ));
};};return _deca ;};const _ead ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_ccdb ,_ecddc string };

// String returns a string representation of PrefixExpr.
func (_gbbc PrefixExpr )String ()string {return _a .Sprintf ("\u0025\u0073\u0021%\u0073",_gbbc ._dbab .String (),_gbbc ._gefeg .String ());};var _faa =[]*_bc .Regexp {};func _fdca (_defb []Result ,_eccc string )(*couponArgs ,Result ){_cfgc :=len (_defb );
if _cfgc !=3&&_cfgc !=4{return nil ,MakeErrorResult (_eccc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ccbg ,_gae ,_abf :=_daa (_defb [0],_defb [1],_eccc );
if _abf .Type ==ResultTypeError {return nil ,_abf ;};if _defb [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_eccc +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gce :=_defb [2].ValueNumber ;if !_gfb (_gce ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_eccc );};_feac :=0;if _cfgc ==4&&_defb [3].Type !=ResultTypeEmpty {if _defb [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_eccc +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_feac =int (_defb [3].ValueNumber );if !_eba (_feac ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_eccc );
};};return &couponArgs {_ccbg ,_gae ,int (_gce ),_feac },_cea ;};func _afcb (_agg ,_eaa ,_gaf int )bool {if _eaa < 1||_eaa > 12{return false ;};if _gaf < 1{return false ;};return _gaf <=_fef (_agg ,_eaa );};func _cgba (_efaaa ,_fbcb ,_facdd ,_cbfg ,_bagec float64 )float64 {var _dbdbe float64 ;
_daad :=_bagec /_facdd ;if _daad >=1{_daad =1;if _cbfg ==1{_dbdbe =_efaaa ;}else {_dbdbe =0;};}else {_dbdbe =_efaaa *_fg .Pow (1-_daad ,_cbfg -1);};_gbda :=_efaaa *_fg .Pow (1-_daad ,_cbfg );var _fgeg float64 ;if _gbda < _fbcb {_fgeg =_dbdbe -_fbcb ;}else {_fgeg =_dbdbe -_gbda ;
};if _fgeg < 0{_fgeg =0;};return _fgeg ;};func _gbc (_acf ,_eg [][]Result )bool {if len (_acf )!=len (_eg ){return false ;};for _fb :=range _acf {if len (_acf [_fb ])!=len (_eg [_fb ]){return false ;};};return true ;};

// Eval evaluates and returns the result of a formula.
func (_ee *defEval )Eval (ctx Context ,formula string )Result {_aee :=ParseString (formula );_add :=make (chan Result );go func (){if _aee ==nil {_add <-MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));
}else {_ee .checkLastEvalIsRef (ctx ,_aee );_add <-_aee .Eval (ctx ,_ee );};}();select{case _abb :=<-_add :return _abb ;case <-_fd .After (_cbba ):_ff .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");
return MakeNumberResult (0);};};func _cgea (_beff float64 )float64 {_gffdc :=float64 (1);for _bfbge :=float64 (2);_bfbge <=_beff ;_bfbge ++{_gffdc *=_bfbge ;};return _gffdc ;};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fcgg :=args [0];switch _fcgg .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_dgeb :=_gaa (_fcgg .ValueNumber );return MakeNumberResult (float64 (_dgeb .Day ()));case ResultTypeString :_bfa :=_ba .ToLower (_fcgg .ValueString );if !_dgf (_bfa ){_ ,_ ,_ ,_ ,_efbd ,_afd :=_ffd (_bfa );if _afd .Type ==ResultTypeError {_afd .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";
return _afd ;};if _efbd {return MakeNumberResult (0);};};_ ,_ ,_ecc ,_ ,_bdg :=_cgd (_bfa );if _bdg .Type ==ResultTypeError {return _bdg ;};return MakeNumberResult (float64 (_ecc ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");
};};var _faddb =map[string ]Function {};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_fad :=len (args );if _fad < 4||_fad > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_abaf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adga :=args [1].ValueNumber ;if _adga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdbe :=args [2].ValueNumber ;if _fdbe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cgddc :=args [3].ValueNumber ;_ccdg :=0.0;if _fad > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ccdg =args [4].ValueNumber ;};_dgdb :=0;if _fad ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dgdb =int (args [5].ValueNumber );if _dgdb !=0{_dgdb =1;};};return MakeNumberResult (_beecc (_abaf ,_adga ,_fdbe ,_cgddc ,_ccdg ,_dgdb ));};func _dgff (_aabe ,_eddb int64 )float64 {return float64 (int (0.5+float64 ((_eddb -_aabe )/86400)))};const (ErrorTypeValue ErrorType =iota ;
ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);const (_ byte =iota ;_bbbgac ;_ffee ;_cbgd ;_eggff ;_gdagb ;);var _ebdag =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};
type plex struct{_ggfcf chan *node ;_acfa Expression ;_ddafd string ;};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_agbb ,_acfe ,_cbeb Expression };func _daac (_afdc []Result ,_bdc string )(*amorArgs ,Result ){_ffbb :=len (_afdc );if _ffbb !=6&&_ffbb !=7{return nil ,MakeErrorResult (_bdc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _afdc [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bdc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fgfc :=_afdc [0].ValueNumber ;
if _fgfc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bdc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_dgdf ,_eaaa :=_dfcc (_afdc [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_bdc );if _eaaa .Type ==ResultTypeError {return nil ,_eaaa ;};_aega ,_eaaa :=_dfcc (_afdc [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_bdc );
if _eaaa .Type ==ResultTypeError {return nil ,_eaaa ;};if _aega < _dgdf {return nil ,MakeErrorResultType (ErrorTypeNum ,_bdc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");
};if _afdc [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bdc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bdff :=_afdc [3].ValueNumber ;if _bdff < 0||_bdff > _fgfc {return nil ,MakeErrorResultType (ErrorTypeNum ,_bdc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");
};if _afdc [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bdc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ecac :=int (_afdc [4].ValueNumber );if _ecac < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bdc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if _afdc [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bdc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_ccga :=_afdc [5].ValueNumber ;if _ccga < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bdc +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");
};_eafc :=0;if _ffbb ==7&&_afdc [6].Type !=ResultTypeEmpty {if _afdc [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bdc +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eafc =int (_afdc [6].ValueNumber );if !_eba (_eafc )||_eafc ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_bdc );
};};return &amorArgs {_fgfc ,_dgdf ,_aega ,_bdff ,_ecac ,_ccga ,_eafc },_cea ;};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_gedf (args ,_edcd ))};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _geea (args ,false )};func (_cg *evCache )GetFromCache (key string )(Result ,bool ){_cg ._bbed .Lock ();_adf ,_cec :=_cg ._ege [key ];_cg ._bbed .Unlock ();return _adf ,_cec ;};var _bdbe ,_egcac ,_aeag ,_bbcc ,_dafbe ,_afagd *_bc .Regexp ;


// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adc :=args [0].ValueNumber ;if _adc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gdcec :=args [1].ValueNumber ;if _gdcec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eade :=args [2].ValueNumber ;if _eade < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");
};return MakeNumberResult (_fg .Pow (_eade /_gdcec ,1/_adc )-1);};var _adfa =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};


// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_dee :=len (args );if _dee !=4&&_dee !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dgb :=args [0].ValueNumber ;if _dgb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};
if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bgee :=args [1].ValueNumber ;if _bgee < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dag :=args [2].ValueNumber ;if _dag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdcc :=args [3].ValueNumber ;if _fdcc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");
};if _fdcc > _dag {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_dfad :=2.0;if _dee ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfad =args [4].ValueNumber ;if _dfad < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};return MakeNumberResult (_cgba (_dgb ,_bgee ,_dag ,_fdcc ,_dfad ));};

// IsBool returns false for the invalid reference context.
func (_aadf *ivr )IsBool (cellRef string )bool {return false };

// LastColumn returns empty string for the invalid reference context.
func (_caacg *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};func _ceg (_ddc string ,_gc *_db .UpdateQuery )string {_fee ,_ddf :=_dc .ParseCellReference (_ddc );if _ddf !=nil {return "\u0023\u0052\u0045F\u0021";};if _gc .UpdateType ==_db .UpdateActionRemoveColumn {_ged :=_gc .ColumnIdx ;
_ed :=_fee .ColumnIdx ;if _ed < _ged {return _ddc ;}else if _ed ==_ged {return "\u0023\u0052\u0045F\u0021";}else {return _fee .Update (_db .UpdateActionRemoveColumn ).String ();};};return _ddc ;};

// String returns a string representation of a horizontal range with prefix.
func (_ggdd PrefixHorizontalRange )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_ggdd ._ceddcc .String (),_ggdd ._aaba ,_ggdd ._fbcda );};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_afab ,_agea ,_aegaa :=_gecg (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _aegaa .Type ==ResultTypeError {return _aegaa ;};if _agea < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");
};if _afab ==0{return MakeNumberResult (0);};_bdde :=_afab < 0;if _bdde {_afab =-_afab ;};_efda :=args [0].Value ();_dbgd :=_ba .Split (_efda ,"\u002e");_fgef :=float64 (int (_afab ));_bcgb :=_dbgd [1];_ddea :=len (_bcgb );_ebd :=int (_fg .Log10 (_agea ))+1;
_gddb :=float64 (_ebd -_ddea );_bdbf ,_fbac :=_ec .ParseFloat (_bcgb ,64);if _fbac !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");
};_bdbf *=_fg .Pow (10,_gddb );_ebg :=_fgef +_bdbf /_agea ;if _bdde {_ebg =-_ebg ;};return MakeNumberResult (_ebg );};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};_befg :=args [0];if _befg .Type !=ResultTypeArray &&_befg .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_ggfce :=_ceab (args [1]);_beaa :=0;for _ ,_gegb :=range _ebadf (_befg ){for _ ,_adef :=range _gegb {if _gdbca (_adef ,_ggfce ){_beaa ++;};};};return MakeNumberResult (float64 (_beaa ));};const _cad =57371;

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_cgcb :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");
};_cgcb =int (args [1].ValueNumber );if _cgcb < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");
};if _cgcb ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_cfgcc :=args [0].Value ();
if _cgcb > len (_cfgcc ){return MakeStringResult (_cfgcc );};return MakeStringResult (_cfgcc [0:_cgcb ]);};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_bfdfd Expression ;_cafg ,_egeec string ;};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_ada :lhs ,_df :rhs ,_gb :op };};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eaeb ,_eaab ,_cggg :=_daa (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _cggg .Type ==ResultTypeError {return _cggg ;};_fcdb ,_cggg :=_dfcc (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _cggg .Type ==ResultTypeError {return _cggg ;};if _fcdb >=_eaeb {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};_afag :=args [3];if _afag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gdgcc :=_afag .ValueNumber ;if _gdgcc < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_acc :=args [4];if _acc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_efef :=_acc .ValueNumber ;if _efef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gfcf :=args [5];
if _gfcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_bdfe :=_gfcf .ValueNumber ;if _bdfe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_eee :=args [6];
if _eee .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dfccc :=float64 (int (_eee .ValueNumber ));if !_gfb (_dfccc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gade :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_gccfb :=args [7];
if _gccfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gade =int (_gccfb .ValueNumber );if !_eba (_gade ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");
};};_abcg ,_cggg :=_bca (_fcdb ,_eaab ,_gade );if _cggg .Type ==ResultTypeError {return _cggg ;};_abcg *=_dfccc ;_bcaf ,_cggg :=_bca (_eaeb ,_eaab ,_gade );if _cggg .Type ==ResultTypeError {return _cggg ;};_bcaf *=_dfccc ;_baae ,_cggg :=_bca (_fcdb ,_eaeb ,_gade );
if _cggg .Type ==ResultTypeError {return _cggg ;};_baae *=_dfccc ;_affb :=_bdfe +_abcg *100*_gdgcc /_dfccc ;_affb /=_bcaf *_efef /_dfccc +1;_affb -=_baae *100*_gdgcc /_dfccc ;return MakeNumberResult (_affb );};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_gee :=args [0];
if _gee .Type !=ResultTypeArray &&_gee .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_dgae :=_gee .ValueArray ;if len (_dgae )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");
};return MakeNumberResult (float64 (len (_dgae [0])));};

// Update updates the FunctionCall references after removing a row/column.
func (_adbdc FunctionCall )Update (q *_db .UpdateQuery )Expression {_eggg :=[]Expression {};for _ ,_faff :=range _adbdc ._ffagd {_ecbc :=_faff .Update (q );_eggg =append (_eggg ,_ecbc );};return FunctionCall {_eeea :_adbdc ._eeea ,_ffagd :_eggg };};func _dfcc (_ecddf Result ,_gffe ,_eeg string )(float64 ,Result ){var _bcgd float64 ;
switch _ecddf .Type {case ResultTypeNumber :_bcgd =float64 (int (_ecddf .ValueNumber ));case ResultTypeString :_adba :=DateValue ([]Result {_ecddf });if _adba .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_gffe +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_eeg );
};_bcgd =_adba .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_eeg );};if _bcgd < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_gffe +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};return _bcgd ,_cea ;};func _bbcee (_cdcg string )*criteriaRegex {_dgeff :=&criteriaRegex {};if _cdcg ==""{return _dgeff ;};if _ddcgg :=_bdbe .FindStringSubmatch (_cdcg );len (_ddcgg )> 1{_dgeff ._gffbb =_bbbgac ;_dgeff ._fceff =_ddcgg [1];}else if _gdbc :=_egcac .FindStringSubmatch (_cdcg );
len (_gdbc )> 1{_dgeff ._gffbb =_bbbgac ;_dgeff ._fceff =_gdbc [1];}else if _gbeg :=_afagd .FindStringSubmatch (_cdcg );len (_gbeg )> 1{_dgeff ._gffbb =_ffee ;_dgeff ._fceff =_gbeg [1];}else if _bcfcd :=_dafbe .FindStringSubmatch (_cdcg );len (_bcfcd )> 1{_dgeff ._gffbb =_cbgd ;
_dgeff ._fceff =_bcfcd [1];}else if _dgde :=_bbcc .FindStringSubmatch (_cdcg );len (_dgde )> 1{_dgeff ._gffbb =_eggff ;_dgeff ._fceff =_dgde [1];}else if _egbb :=_aeag .FindStringSubmatch (_cdcg );len (_egbb )> 1{_dgeff ._gffbb =_gdagb ;_dgeff ._fceff =_egbb [1];
};return _dgeff ;};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dcfc :=args [0].AsString ();if _dcfc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fadg :=_b .Buffer {};for _ ,_bcffb :=range _dcfc .ValueString {if _e .IsPrint (_bcffb ){_fadg .WriteRune (_bcffb );};};return MakeStringResult (_fadg .String ());};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_dbad :=len (args );if _dbad < 3||_dbad > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dafe :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fcbe :=args [1].ValueNumber ;if _fcbe ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_adbf :=args [2].ValueNumber ;_bbda :=0.0;if _dbad >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbda =args [3].ValueNumber ;};_ebgd :=0.0;if _dbad ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ebgd =args [4].ValueNumber ;if _ebgd !=0{_ebgd =1;};};var _adbd float64 ;if _dafe ==0{_adbd =(_adbf +_bbda )/_fcbe ;}else {_cge :=_fg .Pow (1+_dafe ,_fcbe );if _ebgd ==1{_adbd =(_bbda *_dafe /(_cge -1)+_adbf *_dafe /(1-1/_cge ))/(1+_dafe );}else {_adbd =_bbda *_dafe /(_cge -1)+_adbf *_dafe /(1-1/_cge );
};};return MakeNumberResult (-_adbd );};const _edddc =2;func _ffgfe (_adcf []Result )Result {_bgeb :=_adcf [0].ValueArray ;if len (_adcf )==1{_fgcg :=[][]Result {};for _ ,_dfed :=range _bgeb {_fgcg =append (_fgcg ,_gbdc ([]Result {MakeListResult (_dfed )}).ValueList );
};return MakeArrayResult (_fgcg );}else if len (_adcf )==2{_cgfb :=len (_bgeb );_fgbbg :=len (_bgeb [0]);_cbef :=_ggcfb (_adcf [1],_cgfb ,_fgbbg );_dgef :=len (_cbef );_fcea :=[][]Result {};var _dccg []Result ;for _acaf ,_adec :=range _bgeb {if _acaf < _dgef {_dccg =_cbef [_acaf ];
}else {_dccg =_aecb (MakeErrorResultType (ErrorTypeNA ,""),_fgbbg );};_fcea =append (_fcea ,_gbdc ([]Result {MakeListResult (_adec ),MakeListResult (_dccg )}).ValueList );};return MakeArrayResult (_fcea );}else if len (_adcf )==3{_egaec :=len (_bgeb );
_aada :=len (_bgeb [0]);_egcb :=_ggcfb (_adcf [1],_egaec ,_aada );_cceg :=_ggcfb (_adcf [2],_egaec ,_aada );_bfbfb :=len (_egcb );_facfa :=len (_cceg );_bdad :=[][]Result {};var _gagg ,_gcef []Result ;for _dfaab ,_bdgbg :=range _bgeb {if _dfaab < _bfbfb {_gagg =_egcb [_dfaab ];
}else {_gagg =_aecb (MakeErrorResultType (ErrorTypeNA ,""),_aada );};if _dfaab < _facfa {_gcef =_cceg [_dfaab ];}else {_gcef =_aecb (MakeErrorResultType (ErrorTypeNA ,""),_aada );};_bdad =append (_bdad ,_gbdc ([]Result {MakeListResult (_bdgbg ),MakeListResult (_gagg ),MakeListResult (_gcef )}).ValueList );
};return MakeArrayResult (_bdad );};return MakeErrorResultType (ErrorTypeValue ,"");};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_degdg :v }};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_fcdcf :s }};func _abe (_feace []Result ,_bdge string )(*cumulArgs ,Result ){if len (_feace )!=6{return nil ,MakeErrorResult (_bdge +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _feace [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bdge +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_baedb :=_feace [0].ValueNumber ;
if _baedb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bdge +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _feace [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bdge +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_bdfg :=_feace [1].ValueNumber ;if _bdfg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bdge +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if _feace [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bdge +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfca :=_feace [2].ValueNumber ;if _gfca <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bdge +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _feace [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bdge +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_ddca :=_feace [3].ValueNumber ;if _ddca <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bdge +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _feace [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bdge +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fggg :=_feace [4].ValueNumber ;if _fggg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bdge +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if _fggg < _ddca {return nil ,MakeErrorResultType (ErrorTypeNum ,_bdge +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");
};if _fggg > _bdfg {return nil ,MakeErrorResultType (ErrorTypeNum ,_bdge +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");
};_afac :=int (_feace [5].ValueNumber );if _afac !=0&&_afac !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_bdge +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");
};return &cumulArgs {_baedb ,_bdfg ,_gfca ,_ddca ,_fggg ,_afac },_cea ;};

// GetFilename returns an empty string for the invalid reference context.
func (_caadc *ivr )GetFilename ()string {return ""};

// Eval evaluates and returns an expression with prefix.
func (_fggfc PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_ddaba :=_fggfc ._dbab .Reference (ctx ,ev );switch _ddaba .Type {case ReferenceTypeSheet :if _acbgb (_ddaba ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ddaba .Value ));
};_fdgc :=ctx .Sheet (_ddaba .Value );return _fggfc ._gefeg .Eval (_fdgc ,ev );default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ddaba .Type ));
};};type noCache struct{};func _bgge (_geff ,_dfeb ,_eef ,_fcfe int )int {if !_gbfb (_fcfe ){return _eef ;};_eca :=_eef ;_feea :=_fef (_geff ,_dfeb );if _eca > 30||_eef >=_feea ||_eca >=_feea {_eca =30;};return _eca ;};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_efaab :=1.0;for _ ,_aceab :=range args {_aceab =_aceab .AsNumber ();switch _aceab .Type {case ResultTypeNumber :_efaab *=_aceab .ValueNumber ;case ResultTypeList ,ResultTypeArray :_cabed :=Product (_aceab .ListValues ());
if _cabed .Type !=ResultTypeNumber {return _cabed ;};_efaab *=_cabed .ValueNumber ;case ResultTypeString :case ResultTypeError :return _aceab ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_aceab .Type ));
};};return MakeNumberResult (_efaab );};

// Eval evaluates and returns the result of a sheet expression.
func (_adbc SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");
};func _bgag (_cca ,_bace ,_ccbf float64 )float64 {return (_cca *3600+_bace *60+_ccbf )/86400};

// Bool is a boolean expression.
type Bool struct{_bae bool };

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_gcga :=args [0].AsNumber ();if _gcga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_fgae :=float64 (1);if _gcga .ValueNumber < 0{_fgae =-1;};if len (args )> 1{_bcad :=args [1].AsNumber ();if _bcad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fgae =_bcad .ValueNumber ;};if _fgae < 0&&_gcga .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};if len (args )==1{return MakeNumberResult (_fg .Ceil (_gcga .ValueNumber ));};_geee :=_gcga .ValueNumber ;_geee ,_fegc :=_fg .Modf (_geee /_fgae );if _fegc > 0{_geee ++;};return MakeNumberResult (_geee *_fgae );};func _dcdc (_defa ,_cccf float64 )bool {return _fg .Abs (_defa -_cccf )< 1.0e-6};


// Db implements the Excel DB function.
func Db (args []Result )Result {_dcf :=len (args );if _dcf !=4&&_dcf !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cafa :=args [0].ValueNumber ;if _cafa < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adaf :=args [1].ValueNumber ;if _adaf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dbg :=args [2].ValueNumber ;if _dbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fdaf :=args [3].ValueNumber ;if _fdaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};if _fdaf -_dbg > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_fgga :=12.0;if _dcf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fgga =args [4].ValueNumber ;if _fgga < 1||_fgga > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");
};};if _fgga ==12&&_fdaf > _dbg {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _adaf >=_cafa {return MakeNumberResult (0);
};_cbcd :=1-_fg .Pow (_adaf /_cafa ,1/_dbg );_cbcd =float64 (int (_cbcd *1000+0.5))/1000;_gffb :=_cafa *_cbcd *_fgga /12;if _fdaf ==1{return MakeNumberResult (_gffb );};_dceb :=_gffb ;_eefc :=0.0;_ebfbc :=_dbg ;if _ebfbc > _fdaf {_ebfbc =_fdaf ;};for _cdag :=2.0;
_cdag <=_ebfbc ;_cdag ++{_eefc =(_cafa -_dceb )*_cbcd ;_dceb +=_eefc ;};if _fdaf > _dbg {return MakeNumberResult ((_cafa -_dceb )*_cbcd *(12-_fgga )/12);};return MakeNumberResult (_eefc );};const _dde ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";


// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_fegg ,_bffe :=_abe (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _bffe .Type ==ResultTypeError {return _bffe ;};_fecd :=_fegg ._fbb ;_dedd :=_fegg ._bgab ;_beac :=_fegg ._fcde ;_bafe :=_fegg ._cef ;_abd :=_fegg ._gddg ;
_dfde :=_fegg ._bdd ;_fdgfb :=_effe (_fecd ,_dedd ,_beac ,0,_dfde );_ddac :=0.0;if _bafe ==1{if _dfde ==0{_ddac =-_beac ;_bafe ++;};};for _bbf :=_bafe ;_bbf <=_abd ;_bbf ++{if _dfde ==1{_ddac +=_fdbf (_fecd ,_bbf -2,_fdgfb ,_beac ,1)-_fdgfb ;}else {_ddac +=_fdbf (_fecd ,_bbf -1,_fdgfb ,_beac ,0);
};};_ddac *=_fecd ;return MakeNumberResult (_ddac );};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_afbc :=ctx .GetEpoch ();_bbcab ,_gaga :=_cbaga (args [0].Value (),_afbc );if _gaga !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_cdagc :=_bbcab .Year ();return MakeBoolResult (_age (_cdagc ));};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_abcc :=args [0].AsString ();if _abcc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");
};_bcff :="\u0041\u0031";if len (args )==2{_eeddb :=args [1].Ref ;if _eeddb .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};_bcff =_eeddb .Value ;};switch _abcc .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_ecfc ,_ggee :=_dc .ParseCellReference (_bcff );if _ggee !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bcff );
};_dbed :="\u0024"+_ecfc .Column +"\u0024"+_ec .Itoa (int (_ecfc .RowIdx ));if _ecfc .SheetName !=""{_dbed =_ecfc .SheetName +"\u0021"+_dbed ;};return MakeStringResult (_dbed );case "\u0063\u006f\u006c":_cbga ,_aeaf :=_dc .ParseCellReference (_bcff );if _aeaf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bcff );
};return MakeNumberResult (float64 (_cbga .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_dgbf :=_ba .Contains (ctx .GetFormat (_bcff ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_dgbf );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];
case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_dcfe :="\u0047";_bbdb :=ctx .GetFormat (_bcff );if _bbdb =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_bfddb .MatchString (_bbdb ){_dcfe ="\u0046\u0030";
}else if _bbdb =="\u0030\u0025"{_dcfe ="\u0050\u0030";}else if _bbdb =="\u004d\u004d\u004d\u0020\u0044\u0044"{_dcfe ="\u0044\u0032";}else if _bbdb =="\u004d\u004d\u002fY\u0059"{_dcfe ="\u0044\u0033";}else if _bbdb =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_bbdb =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_dcfe ="\u0044\u0034";
}else if _bbdb =="\u004d\u004d\u005c\u002d\u0044\u0044"{_dcfe ="\u0044\u0035";}else if _bbdb =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_dcfe ="\u0044\u0036";}else if _bbdb =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_dcfe ="\u0044\u0037";
}else if _bbdb =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_dcfe ="\u0044\u0038";}else if _bbdb =="\u0048\u0048\u003aM\u004d"{_dcfe ="\u0044\u0039";}else if _egdc .MatchString (_bbdb ){_dcfe ="\u002e\u0030";}else if _dcce .MatchString (_bbdb ){_dcfe ="\u002e\u0030\u0028\u0029";
}else if _edbg .MatchString (_bbdb ){_dcfe ="\u0043\u0030";}else if _adbfa .MatchString (_bbdb )||_dffga .MatchString (_bbdb ){_dcfe ="\u0044\u0031";}else if _cffa :=_caca .FindStringSubmatch (_bbdb );len (_cffa )> 1{_dcfe ="\u0046"+_ec .Itoa (len (_cffa [1]));
}else if _fabe :=_caffb .FindStringSubmatch (_bbdb );len (_fabe )> 1{_dcfe ="\u002e"+_ec .Itoa (len (_fabe [2]));}else if _caed :=_cbbae .FindStringSubmatch (_bbdb );len (_caed )> 1{_dcfe ="\u0050"+_ec .Itoa (len (_caed [2]));}else if _aggaf :=_afcac .FindStringSubmatch (_bbdb );
len (_aggaf )> 1{_dcfe ="\u0043"+_fcdbg (_aggaf ,1);}else if _gfde :=_affa .FindStringSubmatch (_bbdb );len (_gfde )> 1{_dcfe ="\u0043"+_fcdbg (_gfde ,1);}else if _dfef :=_eedd .FindStringSubmatch (_bbdb );len (_dfef )> 1{_dcfe ="\u002e"+_fcdbg (_dfef ,1)+"\u0028\u0029";
}else if _fcfd :=_ffge .FindStringSubmatch (_bbdb );len (_fcfd )> 1{_dcfe ="\u002e"+_fcdbg (_fcfd ,1);}else if _gcceb :=_bgd .FindStringSubmatch (_bbdb );len (_gcceb )> 1{_dcfe ="\u0053"+_fcdbg (_gcceb ,3);};if _dcfe !="\u0047"&&_ba .Contains (_bbdb ,"\u005b\u0052\u0045D\u005d"){_dcfe +="\u002d";
};return MakeStringResult (_dcfe );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_gcbb :=ctx .GetFormat (_bcff );if _egadg .MatchString (_gcbb ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_bcff ));
case "\u0070r\u006f\u0074\u0065\u0063\u0074":_dfba :=0.0;if ctx .GetLocked (_bcff ){_dfba =1.0;};return MakeNumberResult (_dfba );case "\u0072\u006f\u0077":_afbb ,_ccdf :=_dc .ParseCellReference (_bcff );if _ccdf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bcff );
};return MakeNumberResult (float64 (_afbb .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");
};case "\u0077\u0069\u0064t\u0068":_effd ,_bfbf :=_dc .ParseCellReference (_bcff );if _bfbf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bcff );};if _effd .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_effd .ColumnIdx )));
}else {return MakeNumberResult (ctx .Sheet (_effd .SheetName ).GetWidth (int (_effd .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_abcc .ValueString );
};var _cadb =[...]int {1};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_eefaf :=args [0].AsString ();if _eefaf .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_fabfg :=args [1].AsNumber ();if _fabfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _fabfg .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");
};if _fabfg .ValueNumber ==0{return MakeStringResult ("");};_bfdbc :=_b .Buffer {};for _bcga :=0;_bcga < int (_fabfg .ValueNumber );_bcga ++{_bfdbc .WriteString (_eefaf .ValueString );};return MakeStringResult (_bfdbc .String ());};func _efadc (_ecdab ,_bebef ,_ecde Reference )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_ecdab .Value ,_bebef .Value ,_ecde .Value );
};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};type rangeIndex struct{_dfcbb int ;_bdfc int ;};

// Eval evaluates and returns the result of a Negate expression.
func (_bdgbge Negate )Eval (ctx Context ,ev Evaluator )Result {_dgedg :=_bdgbge ._adcb .Eval (ctx ,ev );if _dgedg .Type ==ResultTypeNumber {return MakeNumberResult (-_dgedg .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_feec ,_gedb :=_eeaa ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _gedb .Type !=ResultTypeEmpty {return _gedb ;};_eddd :=_feec ._fbacf ;_cbaa :=_feec ._agaa ;_edfba :=_feec ._cdee ;_faed :=_feec ._eegeb ;_ecbgd :=len (_eddd );
if _cbaa > _ecbgd {_cbaa =_ecbgd ;};_afafa :=_cbaa +_edfba ;if _afafa > _ecbgd {_afafa =_ecbgd ;};_gfga :=_eddd [0:_cbaa ]+_faed +_eddd [_afafa :];return MakeStringResult (_gfga );};

// Reference returns a string reference value to a range.
func (_afec Range )Reference (ctx Context ,ev Evaluator )Reference {_fbgb :=_afec ._aedga .Reference (ctx ,ev );_gffac :=_afec ._dcdaa .Reference (ctx ,ev );if _fbgb .Type ==ReferenceTypeCell &&_gffac .Type ==ReferenceTypeCell {return MakeRangeReference (_bfbce (_fbgb ,_gffac ));
};return ReferenceInvalid ;};const _fdf ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_ffceab :=_cace (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _ffceab .Type !=ResultTypeEmpty {return _ffceab ;};_gcgb :=_ggbd (args [1:]);_dcba :=_fg .MaxFloat64 ;_faaa :=_ebadf (args [0]);for _ ,_cgffc :=range _gcgb {_aacb :=_faaa [_cgffc ._dfcbb ][_cgffc ._bdfc ].ValueNumber ;
if _dcba > _aacb {_dcba =_aacb ;};};if _dcba ==_fg .MaxFloat64 {_dcba =0;};return MakeNumberResult (float64 (_dcba ));};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );
RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );
RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );
RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};


// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_dddfe :=_cace (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _dddfe .Type !=ResultTypeEmpty {return _dddfe ;};_feeed :=_ggbd (args );return MakeNumberResult (float64 (len (_feeed )));};func (_cfge VerticalRange )verticalRangeReference ()string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_cfge ._ccdb ,_cfge ._ecddc );
};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bade :=args [0].Ref ;if _bade .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");
};_cbfged ,_acad :=_dc .ParseCellReference (_bade .Value );if _acad !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bade .Value );};return MakeNumberResult (float64 (_cbfged .RowIdx ));
};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// HasFormula returns FALSE for the invalid reference context.
func (_egaee *ivr )HasFormula (cellRef string )bool {return false };const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};_febbg :=args [0].ValueNumber ;if _febbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");
};_fbcc :=float64 (int (args [1].ValueNumber ));if _fbcc < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult (_fg .Pow ((1+_febbg /_fbcc ),_fbcc )-1);};func _abgeg (_badf [][]Result ,_dade int )[][]Result {_fbced :=[][]Result {};for _gagag :=range _badf {if _gagag ==0{continue ;};_aaaa :=[]Result {};for _afgd :=range _badf {if _afgd ==_dade {continue ;
};_aaaa =append (_aaaa ,_badf [_gagag ][_afgd ]);};_fbced =append (_fbced ,_aaaa );};return _fbced ;};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_gedf (args ,_fcfcd ));};var _cbacg []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_cdcd :=args [0];if _cdcd .Type ==ResultTypeError ||_cdcd .Type ==ResultTypeString {return _cdcd ;};return _cea ;};

// SetLocked does nothing for the invalid reference context.
func (_gacba *ivr )SetLocked (cellRef string ,locked bool ){};func _age (_dfa int )bool {if _dfa ==_dfa /400*400{return true ;};if _dfa ==_dfa /100*100{return false ;};return _dfa ==_dfa /4*4;};var _aacee []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};
const _baad =57352;var _egc =map[string ]*_bc .Regexp {};const _daaea =1;

// GetLocked returns FALSE for the invalid reference context.
func (_gddgbd *ivr )GetLocked (cellRef string )bool {return false };func _cbaga (_gbfad string ,_fdae _fd .Time )(_fd .Time ,error ){_bagf ,_ ,_bgbb :=_ad .ParseFloat (_gbfad ,10,128,_ad .ToNearestEven );if _bgbb !=nil {return _fd .Time {},_bgbb ;};_fcdcg :=new (_ad .Float );
_fcdcg .SetUint64 (uint64 (24*_fd .Hour ));_bagf .Mul (_bagf ,_fcdcg );_fabf ,_ :=_bagf .Uint64 ();_fdee :=_fdae .Add (_fd .Duration (_fabf ));return _gbae (_fdee ),nil ;};func _daf (_fcg BinOpType ,_bec []Result ,_fcb Result )Result {_gfc :=[]Result {};
switch _fcb .Type {case ResultTypeNumber :_fdg :=_fcb .ValueNumber ;for _fbd :=range _bec {_ef :=_bec [_fbd ].AsNumber ();if _ef .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _fcg {case BinOpTypePlus :_gfc =append (_gfc ,MakeNumberResult (_ef .ValueNumber +_fdg ));case BinOpTypeMinus :_gfc =append (_gfc ,MakeNumberResult (_ef .ValueNumber -_fdg ));case BinOpTypeMult :_gfc =append (_gfc ,MakeNumberResult (_ef .ValueNumber *_fdg ));
case BinOpTypeDiv :if _fdg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gfc =append (_gfc ,MakeNumberResult (_ef .ValueNumber /_fdg ));case BinOpTypeExp :_gfc =append (_gfc ,MakeNumberResult (_fg .Pow (_ef .ValueNumber ,_fdg )));case BinOpTypeLT :_gfc =append (_gfc ,MakeBoolResult (_ef .ValueNumber < _fdg ));
case BinOpTypeGT :_gfc =append (_gfc ,MakeBoolResult (_ef .ValueNumber > _fdg ));case BinOpTypeEQ :_gfc =append (_gfc ,MakeBoolResult (_ef .ValueNumber ==_fdg ));case BinOpTypeLEQ :_gfc =append (_gfc ,MakeBoolResult (_ef .ValueNumber <=_fdg ));case BinOpTypeGEQ :_gfc =append (_gfc ,MakeBoolResult (_ef .ValueNumber >=_fdg ));
case BinOpTypeNE :_gfc =append (_gfc ,MakeBoolResult (_ef .ValueNumber !=_fdg ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_fcg ));
};};case ResultTypeString :_aae :=_fcb .ValueString ;for _bac :=range _bec {_fge :=_bec [_bac ].AsString ();if _fge .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _fcg {case BinOpTypeLT :_gfc =append (_gfc ,MakeBoolResult (_fge .ValueString < _aae ));case BinOpTypeGT :_gfc =append (_gfc ,MakeBoolResult (_fge .ValueString > _aae ));case BinOpTypeEQ :_gfc =append (_gfc ,MakeBoolResult (_fge .ValueString ==_aae ));
case BinOpTypeLEQ :_gfc =append (_gfc ,MakeBoolResult (_fge .ValueString <=_aae ));case BinOpTypeGEQ :_gfc =append (_gfc ,MakeBoolResult (_fge .ValueString >=_aae ));case BinOpTypeNE :_gfc =append (_gfc ,MakeBoolResult (_fge .ValueString !=_aae ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_fcg ));
};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");
};return MakeListResult (_gfc );};const _geffg =57364;func init (){_fcdc ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );
RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );
RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );
RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_ceddcc Expression ;_aaba ,_fbcda int ;};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_afcf ,_fdbc :=_fdca (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _fdbc .Type ==ResultTypeError {return _fdbc ;};return MakeNumberResult (_faga (_afcf ._cbec ,_afcf ._bab ,_afcf ._edg ,_afcf ._edff ));
};

// Error is called in the case of parsing error and saves an error to a plex.
func (_accfd *plex )Error (s string ){_ff .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_accfd ._ddafd =s ;};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_fg .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_dfbad :=MakeNumberResult (0);for _ ,_dcbg :=range args {_dcbg =_dcbg .AsNumber ();switch _dcbg .Type {case ResultTypeNumber :_dfbad .ValueNumber +=_dcbg .ValueNumber ;case ResultTypeList ,ResultTypeArray :_efba :=Sum (_dcbg .ListValues ());
if _efba .Type !=ResultTypeNumber {return _efba ;};_dfbad .ValueNumber +=_efba .ValueNumber ;case ResultTypeString :case ResultTypeError :return _dcbg ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dcbg .Type ));
};};return _dfbad ;};func (_ffebg HorizontalRange )horizontalRangeReference ()string {return _a .Sprintf ("\u0025\u0064\u003a%\u0064",_ffebg ._egee ,_ffebg ._geacd );};func _bfdbgb (_affac ,_aceae []string )[]string {for _ ,_dcaf :=range _aceae {_affac =append (_affac ,_dcaf );
};return _affac ;};func _gbd (_ea BinOpType ,_bcd [][]Result ,_dd Result )Result {_cbf :=[][]Result {};for _gbcg :=range _bcd {_ag :=_daf (_ea ,_bcd [_gbcg ],_dd );if _ag .Type ==ResultTypeError {return _ag ;};_cbf =append (_cbf ,_ag .ValueList );};return MakeArrayResult (_cbf );
};func _aaaab (_gbfcbb Context ,_aeagg Evaluator ,_agbd ,_cggf string )Result {_deadd ,_abcb :=_dc .ParseCellReference (_agbd );if _abcb !=nil {return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_agbd ,_abcb .Error ()));
};_bbdaa ,_ebabg :=_deadd .ColumnIdx ,_deadd .RowIdx ;_egcae ,_gbdg :=_dc .ParseCellReference (_cggf );if _gbdg !=nil {return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_cggf ,_gbdg .Error ()));
};_fdfgf ,_fabdf :=_egcae .ColumnIdx ,_egcae .RowIdx ;_bgcg :=[][]Result {};for _bgage :=_ebabg ;_bgage <=_fabdf ;_bgage ++{_dfgfc :=[]Result {};for _dgbbd :=_bbdaa ;_dgbbd <=_fdfgf ;_dgbbd ++{_cbaf :=_gbfcbb .Cell (_a .Sprintf ("\u0025\u0073\u0025\u0064",_dc .IndexToColumn (_dgbbd ),_bgage ),_aeagg );
_dfgfc =append (_dfgfc ,_cbaf );};_bgcg =append (_bgcg ,_dfgfc );};if len (_bgcg )==1{if len (_bgcg [0])==1{return _bgcg [0][0];};return MakeListResult (_bgcg [0]);};return MakeArrayResult (_bgcg );};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_dgeaf :=_ba .ToLower (args [0].ValueString );if !_fceb (_dgeaf ){_ ,_ ,_ ,_aefb ,_ccaa :=_cgd (_dgeaf );if _ccaa .Type ==ResultTypeError {_ccaa .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";
return _ccaa ;};if _aefb {return MakeNumberResult (0);};};_fefa ,_gcba ,_aaf ,_cgdc ,_ ,_acb :=_ffd (_dgeaf );if _acb .Type ==ResultTypeError {return _acb ;};_cdge :=_bgag (float64 (_fefa ),float64 (_gcba ),_aaf );if _cgdc {_cdge +=0.5;}else if _cdge >=1{_cdge -=float64 (int (_cdge ));
};return MakeNumberResult (_cdge );};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_bbbe :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbbe =int (args [1].ValueNumber );if _bbbe < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");
};if _bbbe ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_cegg :=args [0].Value ();
_bbgb :=len (_cegg );if _bbbe > _bbgb {return MakeStringResult (_cegg );};return MakeStringResult (_cegg [_bbgb -_bbbe :_bbgb ]);};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};type couponArgs struct{_cbec float64 ;_bab float64 ;_edg int ;_edff int ;};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_dagge ,_fgffdf ,_cgda :=_daa (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _cgda .Type ==ResultTypeError {return _cgda ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebad :=_fgffdf -_dagge ;if _ebad > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_ccc :=args [2].ValueNumber ;if _ccc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afdb :=(100-_ccc )/_ccc ;_bcdfg :=360/_ebad ;return MakeNumberResult (_afdb *_bcdfg );};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dcda :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbfdb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gefc :=args [2].ValueNumber ;if _gefc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gbdb :=args [3].ValueNumber ;return MakeNumberResult (_gbdb *_dcda *(_dbfdb /_gefc -1));};type tokenType int ;

// BinOpType is the binary operation operator type
//
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_bgabc :=args [0];
if _bgabc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bega :=int (_bgabc .ValueNumber );if _bega < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");
};if len (args )<=_bega {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");
};return args [_bega ];};var _edfb string =string ([]byte {92});func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gead :=args [0].AsString ();if _gead .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (_gead .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (_gead .ValueString [0]));};const _bbdea =57368;func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );
RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};const _bdf ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_efa +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";
const _begab =57347;

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cfd :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_bdged :=args [2].ValueNumber +1;if _bdged ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ggef :=_ebadf (args [0]);_bdba :=float64 (len (_ggef ));_gaaa ,_agec :=0.0,0.0;_cdeg ,_ecgf :=1.0,1.0;_ebef ,_cbbaf :=false ,false ;for _ ,_bcdga :=range _ggef {for _ ,_cbcg :=range _bcdga {if _cbcg .Type ==ResultTypeNumber &&!_cbcg .IsBoolean {_aebf :=_cbcg .ValueNumber ;
if _aebf ==0{continue ;}else {if _aebf > 0{_ebef =true ;_agec +=_cbcg .ValueNumber *_ecgf ;}else {_cbbaf =true ;_gaaa +=_cbcg .ValueNumber *_cdeg ;};_cdeg /=_cfd ;_ecgf /=_bdged ;};};};};if !_ebef ||!_cbbaf {return MakeErrorResultType (ErrorTypeDivideByZero ,"");
};_bcgg :=-_agec /_gaaa ;_bcgg *=_fg .Pow (_bdged ,_bdba -1);_bcgg =_fg .Pow (_bcgg ,1/(_bdba -1));return MakeNumberResult (_bcgg -1);};const _fec ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";


// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcdg :=args [0].AsNumber ();if _gcdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_fg .Pi /180.0*_gcdg .ValueNumber );};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_gdaf NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_abbbcb :=ctx .NamedRange (_gdaf ._degdg );_dabeb :=_abbbcb .Value ;if _ddcef ,_cbdge :=ev .GetFromCache (_dabeb );_cbdge {return _ddcef ;};_bacf :=_ba .Split (_dabeb ,"\u0021");if len (_bacf )!=2{return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_dabeb ));
};_adgdd :=ctx .Sheet (_bacf [0]);_ebfcab :=_ba .Split (_bacf [1],"\u003a");switch len (_ebfcab ){case 1:_dgfgg :=ev .Eval (_adgdd ,_ebfcab [0]);ev .SetCache (_dabeb ,_dgfgg );return _dgfgg ;case 2:_ebccf :=_aaaab (_adgdd ,ev ,_ebfcab [0],_ebfcab [1]);
ev .SetCache (_dabeb ,_ebccf );return _ebccf ;};return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_abbbcb .Type ));
};type amorArgs struct{_daff float64 ;_efad float64 ;_eeb float64 ;_egca float64 ;_dddc int ;_cdefd float64 ;_cfgcf int ;};type parsedSearchObject struct{_gbcea string ;_bedcc string ;_dbcad int ;};const _deaf =57356;const _ddfc =57370;type node struct{_bedbb tokenType ;
_aggedb string ;};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_ede :=&defEval {};_ede .evCache =_bee ();return _ede };

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };
case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };
case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };
default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};var _gdef =[...]uint8 {0,20,37,60,78,96};type criteriaRegex struct{_gffbb byte ;_fceff string ;};

// String returns a string representation of Number.
func (_gebdg Number )String ()string {return _ec .FormatFloat (_gebdg ._bdbgc ,'f',-1,64)};func init (){_cdegg =_da .New (_da .NewSource (_fd .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_faea ("\u0041\u0053\u0049\u004e",_fg .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_faea ("\u0041\u0053\u0049\u004e",_fg .Acos ));
RegisterFunction ("\u0041\u0043\u004fS\u0048",_faea ("\u0041\u0053\u0049\u004e",_fg .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_faea ("\u0041\u0043\u004f\u0054",func (_feebd float64 )float64 {return _fg .Pi /2-_fg .Atan (_feebd )}));
RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_faea ("\u0041\u0043\u004fT\u0048",func (_fgfa float64 )float64 {return _fg .Atanh (1/_fgfa )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );
RegisterFunction ("\u0041\u0053\u0049\u004e",_faea ("\u0041\u0053\u0049\u004e",_fg .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_faea ("\u0041\u0053\u0049N\u0048",_fg .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_faea ("\u0041\u0054\u0041\u004e",_fg .Atan ));
RegisterFunction ("\u0041\u0054\u0041N\u0048",_faea ("\u0041\u0054\u0041N\u0048",_fg .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );
RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );
RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_faea ("\u0043\u004f\u0053",_fg .Cos ));
RegisterFunction ("\u0043\u004f\u0053\u0048",_faea ("\u0043\u004f\u0053\u0048",_fg .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_bcde ("\u0043\u004f\u0054",_fg .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_bcde ("\u0043\u004f\u0054\u0048",_fg .Tanh ));
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_bcde ("\u0043\u0053\u0043",_fg .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_bcde ("\u0043\u0053\u0043",_fg .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );
RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_faea ("\u0045\u0058\u0050",_fg .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );
RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );
RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_faea ("\u004c\u004e",_fg .Log ));
RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_faea ("\u004c\u004f\u00471\u0030",_fg .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );
RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );
RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );
RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );
RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_bcde ("\u0053\u0045\u0043",_fg .Cos ));
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_bcde ("\u0053\u0045\u0043\u0048",_fg .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );
RegisterFunction ("\u0053\u0049\u004e",_faea ("\u0053\u0049\u004e",_fg .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_faea ("\u0053\u0049\u004e\u0048",_fg .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_faea ("\u0053\u0051\u0052\u0054",_fg .Sqrt ));
RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_faea ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_egfa float64 )float64 {return _fg .Sqrt (_egfa *_fg .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );
RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_faea ("\u0054\u0041\u004e",_fg .Tan ));
RegisterFunction ("\u0054\u0041\u004e\u0048",_faea ("\u0054\u0041\u004e\u0048",_fg .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// Reference returns an invalid reference for BinaryExpr.
func (_cf BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gfgcg :=args [0].AsString ();if _gfgcg .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (len (_gfgcg .ValueString )));};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_fgcbb .Lock ();defer _fgcbb .Unlock ();if _ecbac ,_cgfcc :=_faddb [name ];_cgfcc {return _ecbac ;};return nil ;};

// Reference returns a string reference value to a vertical range with prefix.
func (_fbddb PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_addac :=_fbddb ._bfdfd .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_fbddb .verticalRangeReference (_addac .Value )};};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdde :=true ;for _ ,_gbcgb :=range args {_gbcgb =_gbcgb .AsNumber ();switch _gbcgb .Type {case ResultTypeList ,ResultTypeArray :_bbacg :=And (_gbcgb .ListValues ());if _bbacg .Type ==ResultTypeError {return _bbacg ;};if _bbacg .ValueNumber ==0{_fdde =false ;
};case ResultTypeNumber :if _gbcgb .ValueNumber ==0{_fdde =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
case ResultTypeError :return _gbcgb ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");
};};return MakeBoolResult (_fdde );};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_gcaf ,_aecbf :=_fdcf ("\u0046\u0049\u004e\u0044",args );if _aecbf .Type !=ResultTypeEmpty {return _aecbf ;};_faaef :=_ba .ToLower (_gcaf ._gbcea );if _faaef ==""{return MakeNumberResult (1.0);};_fgade :=_ba .ToLower (_gcaf ._bedcc );
_edacc :=_gcaf ._dbcad ;_bcaeg :=1;for _gfgfe :=range _fgade {if _bcaeg < _edacc {_bcaeg ++;continue ;};_abbfa :=_ade .Index (_faaef ,_fgade [_gfgfe :]);if _abbfa ==0{return MakeNumberResult (float64 (_bcaeg ));};_bcaeg ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_gdg Context ,formula string )Result ;SetCache (_agd string ,_agba Result );GetFromCache (_gdc string )(Result ,bool );LastEvalIsRef ()bool ;};

// Update updates references in the BinaryExpr after removing a row/column.
func (_aef BinaryExpr )Update (q *_db .UpdateQuery )Expression {_dec :=_aef ;_dec ._ada =_aef ._ada .Update (q );_dec ._df =_aef ._df .Update (q );return _dec ;};const _edca =57348;

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_cgbf :=len (args );if _cgbf < 3||_cgbf > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_egec :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_aeb :=args [1].ValueNumber ;if _aeb !=float64 (int (_aeb )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bddf :=args [2].ValueNumber ;_cced :=0.0;if _cgbf >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cced =args [3].ValueNumber ;};_ffdc :=0;if _cgbf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ffdc =int (args [4].ValueNumber );if _ffdc !=0{_ffdc =1;};};return MakeNumberResult (_fdbf (_egec ,_aeb ,_bddf ,_cced ,_ffdc ));};

// Eval evaluates and returns a number.
func (_aegf Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_aegf ._bdbgc )};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_eagg :=args [0].AsNumber ();if _eagg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_aafe :=10.0;if len (args )> 1{_acbd :=args [1].AsNumber ();if _acbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");
};_aafe =args [1].ValueNumber ;};if _eagg .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");
};if _aafe ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");
};return MakeNumberResult (_fg .Log (_eagg .ValueNumber )/_fg .Log (_aafe ));};func (_bbd BinOpType )String ()string {if _bbd >=BinOpType (len (_gba )-1){return _a .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_bbd );
};return _ffag [_gba [_bbd ]:_gba [_bbd +1]];};

// Eval evaluates and returns the result of an empty expression.
func (_bfdf EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fedb :=args [0].AsNumber ();_gbag :=args [1].AsNumber ();if _fedb .Type !=ResultTypeNumber ||_gbag .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_becgb :=_fg .Trunc (_fedb .ValueNumber );_ebgf :=_fg .Trunc (_gbag .ValueNumber );if _ebgf > _becgb {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");
};if _ebgf ==_becgb ||_ebgf ==0{return MakeNumberResult (1);};_ddee :=float64 (1);for _cegfe :=float64 (1);_cegfe <=_ebgf ;_cegfe ++{_ddee *=(_becgb +1-_cegfe )/_cegfe ;};return MakeNumberResult (_ddee );};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _dccca (args ,false )};func (_gefa node )String ()string {return _a .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_gefa ._bedbb ,_gggd (string (_gefa ._aggedb )));};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfbc :=args [0].Ref ;if _dfbc .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .Cell (_dfbc .Value ,ev ).IsBoolean );};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_gbcf :=args [0].AsNumber ();if _gbcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_ddeab :=int (_gbcf .ValueNumber );_bdfbd :=make ([][]Result ,0,_ddeab );for _bfabc :=0;_bfabc < _ddeab ;_bfabc ++{_adfge :=make ([]Result ,_ddeab );for _dfcb :=0;_dfcb < _ddeab ;_dfcb ++{if _bfabc ==_dfcb {_adfge [_dfcb ]=MakeNumberResult (1.0);}else {_adfge [_dfcb ]=MakeNumberResult (0.0);
};};_bdfbd =append (_bdfbd ,_adfge );};return MakeArrayResult (_bdfbd );};func _bcag (_gcca ,_efeg ,_cbdbg ,_dcga int )int {if _efeg > _cbdbg {return 0;};if _gbfb (_dcga ){return (_cbdbg -_efeg +1)*30;};_bef :=0;for _ceb :=_efeg ;_ceb <=_cbdbg ;_ceb ++{_bef +=_fef (_gcca ,_ceb );
};return _bef ;};func (_gaeca Result )String ()string {return _gaeca .Value ()};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_ebeg PrefixRangeExpr )Update (q *_db .UpdateQuery )Expression {_cdbba :=_ebeg ;_daca :=_ebeg ._agbb .String ();if _daca ==q .SheetToUpdate {_acge :=*q ;_acge .UpdateCurrentSheet =true ;_cdbba ._acfe =_ebeg ._acfe .Update (&_acge );_cdbba ._cbeb =_ebeg ._cbeb .Update (&_acge );
};return _cdbba ;};

// Eval evaluates the binary expression using the context given.
func (_eb BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_fc :=_eb ._ada .Eval (ctx ,ev );if _fc .Type ==ResultTypeError {return _fc ;};_ac :=_eb ._df .Eval (ctx ,ev );if _ac .Type ==ResultTypeError {return _ac ;};if _fc .Type ==_ac .Type {if _fc .Type ==ResultTypeArray {if !_gbc (_fc .ValueArray ,_ac .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _be (_eb ._gb ,_fc .ValueArray ,_ac .ValueArray );}else if _fc .Type ==ResultTypeList {if len (_fc .ValueList )!=len (_ac .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _cfc (_eb ._gb ,_fc .ValueList ,_ac .ValueList );};}else if _fc .Type ==ResultTypeArray &&(_ac .Type ==ResultTypeNumber ||_ac .Type ==ResultTypeString ){return _gbd (_eb ._gb ,_fc .ValueArray ,_ac );}else if _fc .Type ==ResultTypeList &&(_ac .Type ==ResultTypeNumber ||_ac .Type ==ResultTypeString ){return _daf (_eb ._gb ,_fc .ValueList ,_ac );
};switch _eb ._gb {case BinOpTypePlus :if _fc .Type ==_ac .Type {if _fc .Type ==ResultTypeNumber {return MakeNumberResult (_fc .ValueNumber +_ac .ValueNumber );};};case BinOpTypeMinus :if _fc .Type ==_ac .Type {if _fc .Type ==ResultTypeNumber {return MakeNumberResult (_fc .ValueNumber -_ac .ValueNumber );
};};case BinOpTypeMult :if _fc .Type ==_ac .Type {if _fc .Type ==ResultTypeNumber {return MakeNumberResult (_fc .ValueNumber *_ac .ValueNumber );};};case BinOpTypeDiv :if _fc .Type ==_ac .Type {if _fc .Type ==ResultTypeNumber {if _ac .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");
};return MakeNumberResult (_fc .ValueNumber /_ac .ValueNumber );};};case BinOpTypeExp :if _fc .Type ==_ac .Type {if _fc .Type ==ResultTypeNumber {return MakeNumberResult (_fg .Pow (_fc .ValueNumber ,_ac .ValueNumber ));};};case BinOpTypeLT :if _fc .Type ==_ac .Type {if _fc .Type ==ResultTypeNumber {return MakeBoolResult (_fc .ValueNumber < _ac .ValueNumber );
};if _fc .Type ==ResultTypeString {return MakeBoolResult (_fc .ValueString < _ac .ValueString );};if _fc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _fc .Type ==ResultTypeString &&_ac .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _fc .Type ==ResultTypeNumber &&_ac .Type ==ResultTypeString {return MakeBoolResult (true );}else if _fc .Type ==ResultTypeEmpty &&(_ac .Type ==ResultTypeNumber ||_ac .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_fc .Type ==ResultTypeNumber ||_fc .Type ==ResultTypeString )&&_ac .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};case BinOpTypeGT :if _fc .Type ==_ac .Type {if _fc .Type ==ResultTypeNumber {return MakeBoolResult (_fc .ValueNumber > _ac .ValueNumber );};if _fc .Type ==ResultTypeString {return MakeBoolResult (_fc .ValueString > _ac .ValueString );};if _fc .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if _fc .Type ==ResultTypeString &&_ac .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _fc .Type ==ResultTypeNumber &&_ac .Type ==ResultTypeString {return MakeBoolResult (false );}else if _fc .Type ==ResultTypeEmpty &&(_ac .Type ==ResultTypeNumber ||_ac .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if (_fc .Type ==ResultTypeNumber ||_fc .Type ==ResultTypeString )&&_ac .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _fc .Type ==_ac .Type {if _fc .Type ==ResultTypeNumber {return MakeBoolResult (_fc .ValueNumber ==_ac .ValueNumber );
};if _fc .Type ==ResultTypeString {return MakeBoolResult (_fc .ValueString ==_ac .ValueString );};if _fc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_fc .Type ==ResultTypeString &&_ac .Type ==ResultTypeNumber )||(_fc .Type ==ResultTypeNumber &&_ac .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if _fc .Type ==ResultTypeEmpty &&(_ac .Type ==ResultTypeNumber ||_ac .Type ==ResultTypeString ){return MakeBoolResult (_de (_ac ));}else if (_fc .Type ==ResultTypeNumber ||_fc .Type ==ResultTypeString )&&_ac .Type ==ResultTypeEmpty {return MakeBoolResult (_de (_fc ));
};case BinOpTypeNE :if _fc .Type ==_ac .Type {if _fc .Type ==ResultTypeNumber {return MakeBoolResult (_fc .ValueNumber !=_ac .ValueNumber );};if _fc .Type ==ResultTypeString {return MakeBoolResult (_fc .ValueString !=_ac .ValueString );};if _fc .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if (_fc .Type ==ResultTypeString &&_ac .Type ==ResultTypeNumber )||(_fc .Type ==ResultTypeNumber &&_ac .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _fc .Type ==ResultTypeEmpty &&(_ac .Type ==ResultTypeNumber ||_ac .Type ==ResultTypeString ){return MakeBoolResult (!_de (_ac ));
}else if (_fc .Type ==ResultTypeNumber ||_fc .Type ==ResultTypeString )&&_ac .Type ==ResultTypeEmpty {return MakeBoolResult (!_de (_fc ));};case BinOpTypeLEQ :if _fc .Type ==_ac .Type {if _fc .Type ==ResultTypeNumber {return MakeBoolResult (_fc .ValueNumber <=_ac .ValueNumber );
};if _fc .Type ==ResultTypeString {return MakeBoolResult (_fc .ValueString <=_ac .ValueString );};if _fc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _fc .Type ==ResultTypeString &&_ac .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _fc .Type ==ResultTypeNumber &&_ac .Type ==ResultTypeString {return MakeBoolResult (true );}else if _fc .Type ==ResultTypeEmpty &&(_ac .Type ==ResultTypeNumber ||_ac .Type ==ResultTypeString ){return MakeBoolResult (_de (_ac ));}else if (_fc .Type ==ResultTypeNumber ||_fc .Type ==ResultTypeString )&&_ac .Type ==ResultTypeEmpty {return MakeBoolResult (_de (_fc ));
};case BinOpTypeGEQ :if _fc .Type ==_ac .Type {if _fc .Type ==ResultTypeNumber {return MakeBoolResult (_fc .ValueNumber >=_ac .ValueNumber );};if _fc .Type ==ResultTypeString {return MakeBoolResult (_fc .ValueString >=_ac .ValueString );};if _fc .Type ==ResultTypeEmpty {return MakeBoolResult (true );
};}else if _fc .Type ==ResultTypeString &&_ac .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _fc .Type ==ResultTypeNumber &&_ac .Type ==ResultTypeString {return MakeBoolResult (false );}else if _fc .Type ==ResultTypeEmpty &&(_ac .Type ==ResultTypeNumber ||_ac .Type ==ResultTypeString ){return MakeBoolResult (_de (_ac ));
}else if (_fc .Type ==ResultTypeNumber ||_fc .Type ==ResultTypeString )&&_ac .Type ==ResultTypeEmpty {return MakeBoolResult (_de (_fc ));};case BinOpTypeConcat :return MakeStringResult (_fc .Value ()+_ac .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");
};var _facfaa =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_abcdb ,_bdce :=_fdcf ("\u0046\u0049\u004e\u0044",args );if _bdce .Type !=ResultTypeEmpty {return _bdce ;};_eeed :=_abcdb ._gbcea ;if _eeed ==""{return MakeNumberResult (1.0);};_bedcb :=_abcdb ._bedcc ;_gcad :=_abcdb ._dbcad ;
_ecad :=1;for _bdga :=range _bedcb {if _ecad < _gcad {_ecad ++;continue ;};_abacc :=_ba .Index (_bedcb [_bdga :],_eeed );if _abacc ==0{return MakeNumberResult (float64 (_ecad ));};_ecad ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};

// Eval evaluates a vertical range returning a list of results or an error.
func (_agfg VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_adab :=_agfg .verticalRangeReference ();if _aaaf ,_fgda :=ev .GetFromCache (_adab );_fgda {return _aaaf ;};_fcfb ,_dfebd :=_dfded (ctx ,_agfg ._ccdb ,_agfg ._ecddc );_fcbc :=_aaaab (ctx ,ev ,_fcfb ,_dfebd );
ev .SetCache (_adab ,_fcbc );return _fcbc ;};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_fcdcf string };

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_cbb string ,_cff Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_efb string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_fd .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_efe int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_bdag string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_caa string )string ;

// GetFormat returns if cell is protected.
GetLocked (_fgf string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_dfg string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_ccbc string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_dge ,_fda int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_ecda string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_edd string ,_cbd bool );

// NamedRange returns a named range.
NamedRange (_bcg string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_aad ,_ffac uint32 );};func _cgd (_ebf string )(int ,int ,int ,bool ,Result ){_cdg :="";_ecg :=[]string {};for _gbfa ,_gcb :=range _gg {_ecg =_gcb .FindStringSubmatch (_ebf );if len (_ecg )> 1{_cdg =_gbfa ;break ;};};if _cdg ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );
};_gbfc :=false ;var _gdd ,_cbdb ,_cbcf int ;var _geda error ;switch _cdg {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_cbdb ,_geda =_ec .Atoi (_ecg [1]);if _geda !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );};_cbcf ,_geda =_ec .Atoi (_ecg [3]);
if _geda !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );};_gdd ,_geda =_ec .Atoi (_ecg [5]);if _geda !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );};if _gdd < 0||_gdd > 9999||(_gdd > 99&&_gdd < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );
};_gdd =_acd (_gdd );_gbfc =_ecg [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_cbdb =_gabc [_ecg [1]];_cbcf ,_geda =_ec .Atoi (_ecg [14]);if _geda !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );};_gdd ,_geda =_ec .Atoi (_ecg [16]);
if _geda !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );};if _gdd < 0||_gdd > 9999||(_gdd > 99&&_gdd < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );};_gdd =_acd (_gdd );_gbfc =_ecg [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_acfd ,_bdaa :=_ec .Atoi (_ecg [1]);
if _bdaa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );};_baf ,_bdaa :=_ec .Atoi (_ecg [3]);if _bdaa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );};_fbcd ,_bdaa :=_ec .Atoi (_ecg [5]);if _bdaa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );
};if _acfd >=1900&&_acfd < 10000{_gdd =_acfd ;_cbdb =_baf ;_cbcf =_fbcd ;}else if _acfd > 0&&_acfd < 13{_cbdb =_acfd ;_cbcf =_baf ;_gdd =_fbcd ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );};_gbfc =_ecg [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_gdd ,_geda =_ec .Atoi (_ecg [16]);
if _geda !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );};_cbdb =_gabc [_ecg [3]];_cbcf ,_geda =_ec .Atoi (_ecg [1]);if _geda !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );};_gbfc =_ecg [19]=="";};if !_afcb (_gdd ,_cbdb ,_cbcf ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fec );
};return _gdd ,_cbdb ,_cbcf ,_gbfc ,_cea ;};

// Reference returns an invalid reference for FunctionCall.
func (_ffcf FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _fcbdb (){_bdbe =_bc .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_egcac =_bc .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");
_bbcc =_bc .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_aeag =_bc .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_afagd =_bc .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_dafbe =_bc .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");
};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_gdebg NamedRangeRef )Update (q *_db .UpdateQuery )Expression {return _gdebg };

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};const _bfdfe =16;func _gbdc (_aebd []Result )Result {_gbgd :=_aebd [0].ValueList ;
_cccfe :=len (_gbgd );switch len (_aebd ){case 1:_gaab :=[]Result {};for _ ,_acdb :=range _gbgd {_gaab =append (_gaab ,MakeBoolResult (_acdb .ValueNumber !=0));};return MakeListResult (_gaab );case 2:_egcg :=_aebd [1];switch _egcg .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_baff :=[]Result {};
for _ ,_fbba :=range _gbgd {var _edefc Result ;if _fbba .ValueNumber ==0{_edefc =MakeBoolResult (false );}else {_edefc =_egcg ;};_baff =append (_baff ,_edefc );};return MakeListResult (_baff );case ResultTypeList :_eeef :=_aecb (_egcg ,_cccfe );_aaffc :=[]Result {};
for _eadc ,_cfff :=range _gbgd {var _fagg Result ;if _cfff .ValueNumber ==0{_fagg =MakeBoolResult (false );}else {_fagg =_eeef [_eadc ];};_aaffc =append (_aaffc ,_fagg );};return MakeListResult (_aaffc );case ResultTypeArray :_dbff :=_ggcfb (_egcg ,len (_egcg .ValueArray ),_cccfe );
_abbda :=[][]Result {};for _ ,_gcfd :=range _dbff {_afae :=[]Result {};for _cfgd ,_aaae :=range _gbgd {var _acfb Result ;if _aaae .ValueNumber ==0{_acfb =MakeBoolResult (false );}else {_acfb =_gcfd [_cfgd ];};_afae =append (_afae ,_acfb );};_abbda =append (_abbda ,_afae );
};return MakeArrayResult (_abbda );};case 3:_caec :=_aebd [1];_dffa :=_aebd [2];_gaece :=_abefd (_caec );_edde :=_abefd (_dffa );if _gaece &&_edde {_fegeg :=[]Result {};for _ ,_ffade :=range _gbgd {var _fgca Result ;if _ffade .ValueNumber ==0{_fgca =_dffa ;
}else {_fgca =_caec ;};_fegeg =append (_fegeg ,_fgca );};return MakeListResult (_fegeg );};if _caec .Type !=ResultTypeArray &&_dffa .Type !=ResultTypeArray {_dacge :=_aecb (_caec ,_cccfe );_cgddd :=_aecb (_dffa ,_cccfe );_adae :=[]Result {};for _ccedcb ,_eadb :=range _gbgd {var _gfgf Result ;
if _eadb .ValueNumber ==0{_gfgf =_cgddd [_ccedcb ];}else {_gfgf =_dacge [_ccedcb ];};_adae =append (_adae ,_gfgf );};return MakeListResult (_adae );};_ggdc ,_bcdge :=len (_caec .ValueArray ),len (_dffa .ValueArray );_afacd ,_cafbf :=_ggdc ,_bcdge ;if _bcdge > _afacd {_afacd ,_cafbf =_cafbf ,_afacd ;
};_eafcc :=_ggcfb (_caec ,_afacd ,_cccfe );_eggdc :=_ggcfb (_dffa ,_afacd ,_cccfe );_cefa :=[][]Result {};for _gcbg :=0;_gcbg < _afacd ;_gcbg ++{_cccfb :=[]Result {};for _gfcfd ,_caeb :=range _gbgd {var _gbgg Result ;if _caeb .ValueNumber ==0{if _gcbg < _bcdge {_gbgg =_eggdc [_gcbg ][_gfcfd ];
}else {_gbgg =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _gcbg < _ggdc {_gbgg =_eafcc [_gcbg ][_gfcfd ];}else {_gbgg =MakeErrorResultType (ErrorTypeNA ,"");};};_cccfb =append (_cccfb ,_gbgg );};_cefa =append (_cefa ,_cccfb );};return MakeArrayResult (_cefa );
};return MakeErrorResult ("");};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_fafe :=args [0].ValueNumber ;_cee :=args [1].ValueNumber ;_fca :=args [2].ValueNumber ;_cegf :=_bgag (_fafe ,_cee ,_fca );if _cegf >=0{return MakeNumberResult (_cegf );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_dbab Expression ;_gefeg Expression ;};const _caf ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// Update returns the same object as updating sheet references does not affect Number.
func (_baaee Number )Update (q *_db .UpdateQuery )Expression {return _baaee };func (_caaef *Lexer )nextRaw ()*node {for len (_caaef ._efbf )!=0{_egccc :=<-_caaef ._efbf [len (_caaef ._efbf )-1];if _egccc !=nil {return _egccc ;};_caaef ._efbf =_caaef ._efbf [0:len (_caaef ._efbf )-1];
};return <-_caaef ._bfaag ;};func _ceab (_gfgfg Result )*criteriaParsed {_edec :=_gfgfg .Type ==ResultTypeNumber ;_ccac :=_gfgfg .ValueNumber ;_gbac :=_ba .ToLower (_gfgfg .ValueString );_ebfca :=_bbcee (_gbac );return &criteriaParsed {_edec ,_ccac ,_gbac ,_ebfca };
};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_ddecd ,_eaggb ,_bcdba :=_fagcg (from ,to );if _bcdba !=nil {_ff .Log .Debug (_bcdba .Error ());return NewError (_bcdba .Error ());};return PrefixRangeExpr {_agbb :pfx ,_acfe :_ddecd ,_cbeb :_eaggb };
};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _cdda (args ,_daacf )};type rmode byte ;const _bbceb =57355;

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");
};_gegg ,_gdfd ,_gacf :=_fcfc (args );if _gacf .Type ==ResultTypeError {return _gacf ;};return MakeNumberResult (_cgea (_gegg )/_gdfd );};func _fagcg (_fggd ,_affacb Expression )(Expression ,Expression ,error ){_gedgc ,_ccgbc :=_fggd .(CellRef );if !_ccgbc {return nil ,nil ,_ae .New (_a .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fggd .String ()));
};_ddcf ,_ccgbc :=_affacb .(CellRef );if !_ccgbc {return nil ,nil ,_ae .New (_a .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_affacb .String ()));};_bdbge ,_gfeedg :=_dc .ParseCellReference (_gedgc ._adaa );
if _gfeedg !=nil {return nil ,nil ,_gfeedg ;};_fbde ,_fdgg :=_dc .ParseCellReference (_ddcf ._adaa );if _fdgg !=nil {return nil ,nil ,_fdgg ;};_gbgde :=false ;if _bdbge .RowIdx > _fbde .RowIdx {_gbgde =true ;_bdbge .RowIdx ,_fbde .RowIdx =_fbde .RowIdx ,_bdbge .RowIdx ;
};if _bdbge .ColumnIdx > _fbde .ColumnIdx {_gbgde =true ;_bdbge .ColumnIdx ,_fbde .ColumnIdx =_fbde .ColumnIdx ,_bdbge .ColumnIdx ;_bdbge .Column ,_fbde .Column =_fbde .Column ,_bdbge .Column ;};if _gbgde {return NewCellRef (_bdbge .String ()),NewCellRef (_fbde .String ()),nil ;
};return _fggd ,_affacb ,nil ;};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_cgcef :=_ba .Split (v ,"\u003a");if len (_cgcef )!=2{return nil ;};_fdfc ,_ :=_ec .Atoi (_cgcef [0]);_efdea ,_ :=_ec .Atoi (_cgcef [1]);if _fdfc > _efdea {_fdfc ,_efdea =_efdea ,_fdfc ;};return HorizontalRange {_egee :_fdfc ,_geacd :_efdea };
};func _cdda (_baba []Result ,_agef rmode )Result {if len (_baba )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_eegff :=_baba [0].AsNumber ();if _eegff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_abgd :=_baba [1].AsNumber ();if _abgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_afce :=_abgd .ValueNumber ;_fcfdc :=_eegff .ValueNumber ;_febbd :=1.0;if _afce > 0{_febbd =_fg .Pow (1/10.0,_afce );}else {_febbd =_fg .Pow (10.0,-_afce );};_fcfdc ,_gcdca :=_fg .Modf (_fcfdc /_febbd );switch _agef {case _daacf :const _dbbd =0.499999999;
if _gcdca >=_dbbd {_fcfdc ++;}else if _gcdca <=-_dbbd {_fcfdc --;};case _gca :case _fbed :if _gcdca > 0{_fcfdc ++;}else if _gcdca < 0{_fcfdc --;};};return MakeNumberResult (_fcfdc *_febbd );};func (_afbg *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };
var _bfddb ,_caca ,_egdc ,_dcce ,_ffge ,_caffb ,_eedd ,_egadg ,_cbbae ,_edbg ,_afcac ,_affa ,_adbfa ,_dffga ,_bgd *_bc .Regexp ;const _fada int =0;

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdfg :=args [0];if _fdfg .Type ==ResultTypeNumber {return _fdfg ;};if _fdfg .Type ==ResultTypeString {_aadcgf ,_cgcbb :=_ec .ParseFloat (_fdfg .Value (),64);if _cgcbb ==nil {return MakeNumberResult (_aadcgf );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");
};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };type cumulArgs struct{_fbb float64 ;_bgab float64 ;_fcde float64 ;_cef float64 ;_gddg float64 ;_bdd int ;};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_eeea :name ,_ffagd :args };};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_eede :=args [0].AsString ();if _eede .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};return ctx .Cell (_eede .ValueString ,ev );};const _cae ="\u005e\u0028\u0028"+_aeg +"\u007c"+_fdgf +"\u007c"+_ead +"\u007c"+_bdf +"\u0029\u0020\u0029\u003f";func _beecc (_aaeb ,_afdg ,_febdg ,_dddd ,_caab float64 ,_egaa int )float64 {_caagg :=_effe (_aaeb ,_febdg ,_dddd ,_caab ,_egaa );
var _cfeb float64 ;if _afdg ==1{if _egaa ==1{_cfeb =0;}else {_cfeb =-_dddd ;};}else {if _egaa ==1{_cfeb =_fdbf (_aaeb ,_afdg -2,_caagg ,_dddd ,1)-_caagg ;}else {_cfeb =_fdbf (_aaeb ,_afdg -1,_caagg ,_dddd ,0);};};return _cfeb *_aaeb ;};const _bfef =-1000;
type evCache struct{_ege map[string ]Result ;_bbed *_af .Mutex ;};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cbed :=args [0].AsString ();if _cbed .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};if len (_cbed .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_cbed .ValueString [0]));};func init (){_fcbdb ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );
RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );
RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );
RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );
RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eab :=args [0].AsString ();if _eab .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cfegb :=args [1].AsNumber ();if _cfegb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgadg :=_eab .ValueString ;if len (_fgadg )> 2&&(_ba .HasPrefix (_fgadg ,"\u0030\u0078")||_ba .HasPrefix (_fgadg ,"\u0030\u0058")){_fgadg =_fgadg [2:];};_cfga ,_bafgga :=_ec .ParseInt (_fgadg ,int (_cfegb .ValueNumber ),64);if _bafgga !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");
};return MakeNumberResult (float64 (_cfga ));};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_dccge ,_egea :=_fdcf ("\u0046\u0049\u004e\u0044",args );if _egea .Type !=ResultTypeEmpty {return _egea ;};_acda :=_dccge ._gbcea ;if _acda ==""{return MakeNumberResult (1.0);
};_aaecf :=_dccge ._bedcc ;_gbaf :=_dccge ._dbcad -1;_adgef :=1;_cfef :=0;for _acab :=range _aaecf {if _acab !=0{_efgeb :=1;if _acab -_cfef > 1{_efgeb =2;};_adgef +=_efgeb ;};if _adgef > _gbaf {_ebgdc :=_ba .Index (_aaecf [_acab :],_acda );if _ebgdc ==0{return MakeNumberResult (float64 (_adgef ));
};};_cfef =_acab ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func (_dfgca PrefixHorizontalRange )horizontalRangeReference (_aegade string )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_aegade ,_dfgca ._aaba ,_dfgca ._fbcda );
};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_edaf :=len (args );if _edaf < 4||_edaf > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_decd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ddaa :=args [1].ValueNumber ;if _ddaa <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cffg :=args [2].ValueNumber ;if _cffg < _ddaa {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_dfdec :=args [3].ValueNumber ;_cafd :=0.0;if _edaf >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cafd =args [4].ValueNumber ;};_dbcb :=0;if _edaf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dbcb =int (args [5].ValueNumber );if _dbcb !=0{_dbcb =1;};};return MakeNumberResult (_effe (_decd ,_cffg ,_dfdec ,_cafd ,_dbcb )-_beecc (_decd ,_ddaa ,_cffg ,_dfdec ,_cafd ,_dbcb ));};type criteriaParsed struct{_cfdff bool ;_dgeafa float64 ;_bgbc string ;
_gbaa *criteriaRegex ;};func (_fde *evCache )SetCache (key string ,value Result ){_fde ._bbed .Lock ();_fde ._ege [key ]=value ;_fde ._bbed .Unlock ();};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_bgfce *ivr )GetLabelPrefix (cellRef string )string {return ""};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_fbdb ,_bggf :=_fdca (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _bggf .Type ==ResultTypeError {return _bggf ;};return MakeNumberResult (_ebcad (_fbdb ._cbec ,_fbdb ._bab ,_fbdb ._edg ,_fbdb ._edff ));
};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dddcb :=args [0];switch _dddcb .Type {case ResultTypeError :return _dddcb ;case ResultTypeNumber ,ResultTypeString :return _geaab (args [0]);case ResultTypeList :_eafb :=_dddcb .ValueList ;_gffde :=[]Result {};for _ ,_bfce :=range _eafb {_gcdf :=_geaab (_bfce );
if _gcdf .Type ==ResultTypeError {return _gcdf ;};_gffde =append (_gffde ,_gcdf );};return MakeListResult (_gffde );case ResultTypeArray :_fefgd :=_dddcb .ValueArray ;_bfac :=[][]Result {};for _ ,_aace :=range _fefgd {_gaed :=[]Result {};for _ ,_aadb :=range _aace {_ebffb :=_geaab (_aadb );
if _ebffb .Type ==ResultTypeError {return _ebffb ;};_gaed =append (_gaed ,_ebffb );};_bfac =append (_bfac ,_gaed );};return MakeArrayResult (_bfac );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};var _gabc =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};


// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_adeg :=args [0].AsString ();if _adeg .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gfdb :=_b .Buffer {};_ffef :=false ;for _ ,_dbbg :=range _adeg .ValueString {if !_ffef &&_e .IsLetter (_dbbg ){_gfdb .WriteRune (_e .ToUpper (_dbbg ));}else {_gfdb .WriteRune (_e .ToLower (_dbbg ));};_ffef =_e .IsLetter (_dbbg );};return MakeStringResult (_gfdb .String ());
};

// GetWidth returns 0 for the invalid reference context.
func (_cbggfa *ivr )GetWidth (colIdx int )float64 {return float64 (0)};type durationArgs struct{_fdeb float64 ;_cgdd float64 ;_dcbc float64 ;_ffad float64 ;_bdgd float64 ;_cfbb int ;};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_degdg string };

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_dedf :=_ba .Split (v ,"\u003a");if len (_dedf )!=2{return nil ;};_gddad ,_ :=_ec .Atoi (_dedf [0]);_dbfa ,_ :=_ec .Atoi (_dedf [1]);if _gddad > _dbfa {_gddad ,_dbfa =_dbfa ,_gddad ;};
return PrefixHorizontalRange {_ceddcc :pfx ,_aaba :_gddad ,_fbcda :_dbfa };};func (_bddee *noCache )GetFromCache (key string )(Result ,bool ){return _cea ,false };

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_edfbf :=args [0].AsNumber ();if _edfbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adgd :=_fg .Signbit (_edfbf .ValueNumber );_dcbe ,_fggf :=_fg .Modf ((_edfbf .ValueNumber -1)/2);_cdfff :=_dcbe *2+1;if _fggf !=0{if !_adgd {_cdfff +=2;}else {_cdfff -=2;};};return MakeNumberResult (_cdfff );};var _cacc []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
func _fbff (_fbdbf ,_afee []float64 ,_bfaa float64 )Result {_bdgb :=false ;_abafg :=false ;for _ecggb :=0;_ecggb < len (_fbdbf );_ecggb ++{if _fbdbf [_ecggb ]> 0{_bdgb =true ;};if _fbdbf [_ecggb ]< 0{_abafg =true ;};};if !_bdgb ||!_abafg {return MakeErrorResultType (ErrorTypeNum ,"");
};_ggfcg :=_bfaa ;_beca :=1e-10;_efdd :=0;_gbe :=50;_fcgab :=false ;for {_dfgc :=_dbce (_fbdbf ,_afee ,_ggfcg );_affe :=_ggfcg -_dfgc /_fdaac (_fbdbf ,_afee ,_ggfcg );_cfaf :=_fg .Abs (_affe -_ggfcg );_ggfcg =_affe ;_efdd ++;if _cfaf <=_beca ||_fg .Abs (_dfgc )<=_beca {break ;
};if _efdd > _gbe {_fcgab =true ;break ;};};if _fcgab ||_fg .IsNaN (_ggfcg )||_fg .IsInf (_ggfcg ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_ggfcg );};func _dccca (_bgea []Result ,_aebe bool )Result {var _deadf string ;
if _aebe {_deadf ="\u004c\u0041\u0052G\u0045";}else {_deadf ="\u0053\u004d\u0041L\u004c";};if len (_bgea )!=2{return MakeErrorResult (_deadf +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_acef :=_bgea [0];var _aag [][]Result ;switch _acef .Type {case ResultTypeArray :_aag =_acef .ValueArray ;case ResultTypeList :_aag =[][]Result {_acef .ValueList };default:return MakeErrorResult (_deadf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");
};if len (_aag )==0{return MakeErrorResult (_deadf +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};if _bgea [1].Type !=ResultTypeNumber {return MakeErrorResult (_deadf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_cgeb :=_bgea [1].ValueNumber ;if _cgeb < 1{return MakeErrorResultType (ErrorTypeNum ,_deadf +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_abce :=int (_cgeb );if float64 (_abce )!=_cgeb {return MakeErrorResultType (ErrorTypeNum ,_deadf +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_egce :=[]float64 {};for _ ,_dgbg :=range _aag {for _ ,_gcf :=range _dgbg {if _gcf .Type ==ResultTypeNumber {_egce =append (_egce ,_gcf .ValueNumber );};};};if _abce > len (_egce ){return MakeErrorResultType (ErrorTypeNum ,_deadf +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_fgabg :=_fa .MergeSort (_egce );if _aebe {return MakeNumberResult (_fgabg [len (_fgabg )-_abce ]);}else {return MakeNumberResult (_fgabg [_abce -1]);};};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_edf [][]Expression };

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bcfce :=args [0].AsNumber ();
if _bcfce .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edac :=_fg .Signbit (_bcfce .ValueNumber );
_fceg ,_gfea :=_fg .Modf (_bcfce .ValueNumber /2);_efdfa :=_fceg *2;if _gfea !=0{if !_edac {_efdfa +=2;}else {_efdfa -=2;};};return MakeNumberResult (_efdfa );};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _f .Reader )Expression {_accdg :=&plex {_ggfcf :LexReader (r )};_ccgb (_accdg );if _accdg ._ddafd !=""{return nil ;};return _accdg ._acfa ;};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_efdae :=args [0];if _efdae .Type !=ResultTypeArray &&_efdae .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_cdfdf :=_ebadf (_efdae );_dffc :=args [2];if _dffc .Type !=ResultTypeArray &&_dffc .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_gfbea :=_ebadf (_dffc );_aefd :=_ceab (args [1]);_daada :=0.0;for _fcfeg ,_cggd :=range _cdfdf {for _fagb ,_egcec :=range _cggd {if _gdbca (_egcec ,_aefd ){_daada +=_gfbea [_fcfeg ][_fagb ].ValueNumber ;};};};return MakeNumberResult (_daada );};func _dfded (_aefa Context ,_addaf ,_gdgcd string )(string ,string ){_dbeea :=_addaf +"\u0031";
_dbecb :=_aefa .LastRow (_addaf );_gcgbe :=_gdgcd +_ec .Itoa (_dbecb );return _dbeea ,_gcgbe ;};

// Eval evaluates a range returning a list of results or an error.
func (_bgfgg Range )Eval (ctx Context ,ev Evaluator )Result {_ebcae :=_bgfgg ._aedga .Reference (ctx ,ev );_ddefg :=_bgfgg ._dcdaa .Reference (ctx ,ev );_dbbc :=_bfbce (_ebcae ,_ddefg );if _ebcae .Type ==ReferenceTypeCell &&_ddefg .Type ==ReferenceTypeCell {if _cgcefe ,_bdbef :=ev .GetFromCache (_dbbc );
_bdbef {return _cgcefe ;}else {_acaea :=_aaaab (ctx ,ev ,_ebcae .Value ,_ddefg .Value );ev .SetCache (_dbbc ,_acaea );return _acaea ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_dbbc );};


// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_aafea Result )ListValues ()[]Result {if _aafea .Type ==ResultTypeArray {_cadd :=[]Result {};for _ ,_ggda :=range _aafea .ValueArray {for _ ,_gddee :=range _ggda {_cadd =append (_cadd ,_gddee );};};return _cadd ;};if _aafea .Type ==ResultTypeList {return _aafea .ValueList ;
};return nil ;};var _beed =false ;var _aaea =[]*_bc .Regexp {};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_adcb :e }};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_fbcg :=len (args );if _fbcg < 3||_fbcg > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgbe :=args [0].ValueNumber ;if _fgbe !=float64 (int (_fgbe )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_baee :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_fgaf :=args [2].ValueNumber ;_fgffd :=0.0;if _fbcg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_fgffd =args [3].ValueNumber ;};_accf :=0.0;if _fbcg >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_accf =args [4].ValueNumber ;if _accf !=0{_accf =1;};};_bcbba :=0.1;if _fbcg >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bcbba =args [5].ValueNumber ;};_fafcf :=100;_ebbe :=0;_gdebc :=false ;_efbdd :=1e-6;_dadfg :=_bcbba ;for _ebbe < _fafcf &&!_gdebc {_bebf :=_fg .Pow (_dadfg +1,_fgbe );_fddd :=_fg .Pow (_dadfg +1,_fgbe -1);_adbg :=_dadfg *_accf +1;_dgcf :=_baee *(_bebf -1);
_ebaa :=_fgffd +_bebf *_fgaf +_dgcf *_adbg /_dadfg ;_abba :=_fgbe *_fddd *_fgaf -_dgcf *_adbg /_fg .Pow (_dadfg ,2);_cfbg :=(_fgbe *_baee *_fddd *_adbg +_dgcf *_accf )/_dadfg ;_gegf :=_ebaa /(_abba +_cfbg );if _fg .Abs (_gegf )< _efbdd {_gdebc =true ;};
_ebbe ++;_dadfg -=_gegf ;};return MakeNumberResult (_dadfg );};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_aeed ,_cbcb :=_fdca (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _cbcb .Type ==ResultTypeError {return _cbcb ;};_edgf :=_aeed ._edg ;_def :=_aeed ._edff ;_eda ,_cbcb :=_edeg (_aeed ._cbec ,_aeed ._bab ,_edgf ,_def );
if _cbcb .Type ==ResultTypeError {return _cbcb ;};return MakeNumberResult (_eda );};const _gaedb =57378;func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );
RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );
RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );
RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );
RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );
RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );
RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};func _be (_gd BinOpType ,_ab ,_gf [][]Result )Result {_deg :=[][]Result {};
for _ge :=range _ab {_cb :=_cfc (_gd ,_ab [_ge ],_gf [_ge ]);if _cb .Type ==ResultTypeError {return _cb ;};_deg =append (_deg ,_cb .ValueList );};return MakeArrayResult (_deg );};func _cabdb (_feafd yyLexer ,_eebb *yySymType )(_aaacc ,_cbgc int ){_cbgc =0;
_aaacc =_feafd .Lex (_eebb );if _aaacc <=0{_cbgc =_cadb [0];goto _gcde ;};if _aaacc < len (_cadb ){_cbgc =_cadb [_aaacc ];goto _gcde ;};if _aaacc >=_acaee {if _aaacc < _acaee +len (_bggee ){_cbgc =_bggee [_aaacc -_acaee ];goto _gcde ;};};for _cbdeg :=0;
_cbdeg < len (_cfde );_cbdeg +=2{_cbgc =_cfde [_cbdeg +0];if _cbgc ==_aaacc {_cbgc =_cfde [_cbdeg +1];goto _gcde ;};};_gcde :if _cbgc ==0{_cbgc =_bggee [1];};if _bedg >=3{_a .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_abbaa (_cbgc ),uint (_aaacc ));
};return _aaacc ,_cbgc ;};func _cdaa (_bbfc ,_cbcfd ,_deda ,_dfbd ,_faee ,_bdca float64 )float64 {var _abac ,_cgce float64 ;_cdce :=0.0;_cdcec :=_fg .Ceil (_faee );_baeg :=_bbfc -_cbcfd ;_fcbd :=false ;_fcbbe :=0.0;for _dbde :=1.0;_dbde <=_cdcec ;_dbde ++{if !_fcbd {_abac =_cgba (_bbfc ,_cbcfd ,_deda ,_dbde ,_bdca );
_fcbbe =_baeg /(_deda -_dbde +1);if _fcbbe > _abac {_cgce =_fcbbe ;_fcbd =true ;}else {_cgce =_abac ;_baeg -=_abac ;};}else {_cgce =_fcbbe ;};if _dbde ==_cdcec {_cgce *=_faee +1-_cdcec ;};_cdce +=_cgce ;};return _cdce ;};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_ffcgc ,_ecbd :=_fdcf ("\u0046\u0049\u004e\u0044",args );if _ecbd .Type !=ResultTypeEmpty {return _ecbd ;};_eedbg :=_ba .ToLower (_ffcgc ._gbcea );
_dgddf :=_ba .ToLower (_ffcgc ._bedcc );if _eedbg ==""{return MakeNumberResult (1.0);};_dbdgef :=_ffcgc ._dbcad -1;_gada :=1;_cbbgf :=0;for _gdba :=range _dgddf {if _gdba !=0{_aceg :=1;if _gdba -_cbbgf > 1{_aceg =2;};_gada +=_aceg ;};if _gada > _dbdgef {_ccca :=_ade .Index (_eedbg ,_dgddf [_gdba :]);
if _ccca ==0{return MakeNumberResult (float64 (_gada ));};};_cbbgf =_gdba ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};var (_bedg =0;_cfgaa =false ;);

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bbacf :=args [0];_abgg :=args [1];if _abgg .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_bgef :=args [2].AsNumber ();if _bgef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gdged :=false ;if len (args )==4{_acgc :=args [3].AsNumber ();if _acgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _acgc .ValueNumber ==0{_gdged =true ;};};_edbae :=-1;_edfa :=false ;if len (_abgg .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");
};_abfd :=_abgg .ValueArray [0];_gdbg :for _gege ,_gccb :=range _abfd {switch _cbgf (_gccb ,_bbacf ,false ,_gdged ){case _efffa :_edbae =_gege ;case _bbad :_edbae =_gege ;_edfa =true ;break _gdbg ;};};if _edbae ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_cbag :=int (_bgef .ValueNumber )-1;if _cbag < 0||_cbag > len (_abgg .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_abfd =_abgg .ValueArray [_cbag ];
if _edbae < 0||_edbae >=len (_abfd ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _edfa ||!_gdged {return _abfd [_edbae ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};func _fdaac (_geg ,_baedba []float64 ,_abbb float64 )float64 {_gfcc :=_abbb +1;
_dcab :=0.0;_cagc :=len (_geg );_gfdc :=_baedba [0];for _dcbf :=1;_dcbf < _cagc ;_dcbf ++{_adff :=(_baedba [_dcbf ]-_gfdc )/365;_dcab -=_adff *_geg [_dcbf ]/_fg .Pow (_gfcc ,_adff +1);};return _dcab ;};

// ReferenceType is a type of reference
//
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dfb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_deedc :=args [2].ValueNumber ;if _deedc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult ((_dfb -_egg )/_deedc );};const _fcfed =57377;

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bgb :=ctx .GetEpoch ();_adfe ,_cecb :=_cbaga (args [0].Value (),_bgb );if _cecb !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (float64 (_adfe .Year ()));};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];
case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));
default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};const _acdg =57374;const _bbeg =57346;

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_bedb :=len (args );if _bedb < 3||_bedb > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cbggf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bfee :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cdbd :=args [2].ValueNumber ;_cba :=0.0;if _bedb >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cba =args [3].ValueNumber ;};_dafb :=0.0;if _bedb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dafb =args [4].ValueNumber ;if _dafb !=0{_dafb =1;};};_eeae :=_bfee *(1+_cbggf *_dafb )-_cba *_cbggf ;_ggbc :=(_cdbd *_cbggf +_bfee *(1+_cbggf *_dafb ));return MakeNumberResult (_fg .Log (_eeae /_ggbc )/_fg .Log (1+_cbggf ));};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cdfg :=args [0].AsNumber ();_dedgg :=args [1].AsNumber ();_cffge :=args [2].AsNumber ();_gfeed :=args [3].ListValues ();if _cdfg .Type !=ResultTypeNumber ||_dedgg .Type !=ResultTypeNumber ||_cffge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_fggb :=float64 (0);for _cbac ,_gabeg :=range _gfeed {_fggb +=_gabeg .ValueNumber *_fg .Pow (_cdfg .ValueNumber ,_dedgg .ValueNumber +float64 (_cbac )*_cffge .ValueNumber );};return MakeNumberResult (_fggb );};var _gfagb =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};


// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_fdb :=int (args [0].ValueNumber );if _fdb < 0||_fdb >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _fdb <=1899{_fdb +=1900;};_eed :=_fd .Month (args [1].ValueNumber );
_bdbd :=int (args [2].ValueNumber );_gcd :=_ddd (_fdb ,_eed ,_bdbd );_ebc :=_dgff (_agaf ,_gcd )+1;if _ebc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_ebc );
};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_afed :=len (args );if _afed !=5&&_afed !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_efga ,_bfgdg ,_fbe :=_daa (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _fbe .Type ==ResultTypeError {return _fbe ;};_ffgf ,_fbe :=_dfcc (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");
if _fbe .Type ==ResultTypeError {return _fbe ;};if _ffgf >=_efga {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_aeeca :=args [3].ValueNumber ;if _aeeca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_aebb :=args [4].ValueNumber ;if _aebb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_gdeb :=0;if _afed ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdeb =int (args [5].ValueNumber );if !_eba (_gdeb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");
};};_dcega ,_fbe :=_bca (_efga ,_bfgdg ,_gdeb );if _fbe .Type ==ResultTypeError {return _fbe ;};_gbdf ,_fbe :=_bca (_ffgf ,_bfgdg ,_gdeb );if _fbe .Type ==ResultTypeError {return _fbe ;};_ebgda ,_fbe :=_bca (_ffgf ,_efga ,_gdeb );if _fbe .Type ==ResultTypeError {return _fbe ;
};_ggaa :=1+_gbdf *_aeeca ;_bece :=1+_dcega *_aebb ;return MakeNumberResult ((_ggaa /_bece -_ebgda *_aeeca )*100);};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_ecbf :=len (args );if _ecbf !=4&&_ecbf !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_dgfe ,_gede ,_bdgdb :=_daa (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _bdgdb .Type ==ResultTypeError {return _bdgdb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfbe :=args [2].ValueNumber ;if _gfbe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_afedd :=args [3].ValueNumber ;if _afedd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_affed :=0;if _ecbf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_affed =int (args [4].ValueNumber );if !_eba (_affed ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");
};};_cac ,_bdgdb :=_bca (_dgfe ,_gede ,_affed );if _bdgdb .Type ==ResultTypeError {return _bdgdb ;};return MakeNumberResult (_gfbe /(1-_afedd *_cac ));};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bdadg :=_abggc (args );_c .Float64s (_bdadg );var _egfe float64 ;if len (_bdadg )%2==0{_egfe =(_bdadg [len (_bdadg )/2-1]+_bdadg [len (_bdadg )/2])/2;}else {_egfe =_bdadg [len (_bdadg )/2];};return MakeNumberResult (_egfe );};type yyParser interface{Parse (yyLexer )int ;
Lookahead ()int ;};const _bdecd =187;

// Reference returns an invalid reference for String.
func (_cfffa String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_aaeaa :=len (args );if _aaeaa !=2&&_aaeaa !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_geac ,_cdddf :=_gbcbb (args [0],args [1],"\u0058\u0049\u0052\u0052");if _cdddf .Type ==ResultTypeError {return _cdddf ;};_aeab :=_geac ._eac ;_cedb :=_geac ._bbab ;_gfeg :=0.1;if _aaeaa ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfeg =args [2].ValueNumber ;if _gfeg <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");
};};return _fbff (_aeab ,_cedb ,_gfeg );};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_dfeeg ,_bbegg ,_bcgdd :=_fagcg (from ,to );if _bcgdd !=nil {_ff .Log .Debug (_bcgdd .Error ());return NewError (_bcgdd .Error ());};return Range {_aedga :_dfeeg ,_dcdaa :_bbegg };};var _dged =[...]struct{_bggd int ;
_feae int ;_ddcea string ;}{};

// Update updates the horizontal range references after removing a row/column.
func (_eegebd HorizontalRange )Update (q *_db .UpdateQuery )Expression {return _eegebd };

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ebeff :=args [0].AsString ();_effb :=args [1].AsString ();if _ebeff .Type !=ResultTypeString ||_effb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};return MakeBoolResult (_ebeff .ValueString ==_effb .ValueString );};func _ebcad (_afaf ,_ggf float64 ,_dbca ,_cbdc int )float64 {_cbfd :=_gaa (_afaf );_fdgff :=_gaa (_ggf );if _cbdc ==1{_bfc :=_ebe (_cbfd ,_fdgff ,_dbca ,1);_eae :=_bfc .AddDate (0,12/_dbca ,0);
return _gffd (_bfc ,_eae ,_cbdc );};return float64 (_gfee (0,_cbdc ))/float64 (_dbca );};type yyParserImpl struct{_ggab yySymType ;_ddgc [_bfdfe ]yySymType ;_deec int ;};var _ffdff =[...]string {};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_dbbe :=args [0];if _dbbe .Type ==ResultTypeError {return _dbbe ;
};if _dbbe .Type !=ResultTypeString &&_dbbe .Type !=ResultTypeNumber &&_dbbe .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_efdfab :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_eccgg :=int (args [1].ValueNumber );if _eccgg < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_aedg :=int (args [2].ValueNumber );if _aedg < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_eedfa :=len (_efdfab );if _eccgg > _eedfa {return MakeStringResult ("");};_eccgg --;_geeaf :=_eccgg +_aedg ;if _geeaf > _eedfa {return MakeStringResult (_efdfab [_eccgg :]);}else {return MakeStringResult (_efdfab [_eccgg :_geeaf ]);};};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aaebb :=args [0].AsString ();if _aaebb .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeStringResult (_ba .ToUpper (_aaebb .ValueString ));};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_decdg PrefixHorizontalRange )Update (q *_db .UpdateQuery )Expression {return _decdg };func _gfb (_baab float64 )bool {return _baab ==1||_baab ==2||_baab ==4};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_abde :=args [0].ValueNumber ;if _abde <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfac :=args [1].ValueNumber ;if _gfac <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dddgf :=args [2].ValueNumber ;if _dddgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");
};return MakeNumberResult ((_fg .Log10 (_dddgf )-_fg .Log10 (_gfac ))/_fg .Log10 (1+_abde ));};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dcgb :=args [0];switch _dcgb .Type {case ResultTypeError :return _dcgb ;
case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_dcgb .ValueNumber !=0);};if _dcgb .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _gbdc (args );case ResultTypeArray :return _ffgfe (args );
default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};
};

// Eval evaluates and returns the result of the cell reference.
func (_fe CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_fe ._adaa ,ev )};

// IsDBCS returns false for the invalid reference context.
func (_fagd *ivr )IsDBCS ()bool {return false };func _aacd (_fecf ,_cbeg ,_febd int )int {if _fecf > _cbeg {return 0;};if _gbfb (_febd ){return (_cbeg -_fecf +1)*360;};_ffab :=0;for _fgc :=_fecf ;_fgc <=_cbeg ;_fgc ++{_ffaba :=365;if _age (_fgc ){_ffaba =366;
};_ffab +=_ffaba ;};return _ffab ;};func NewLexer ()*Lexer {return &Lexer {_bfaag :make (chan *node )}};func _gecg (_ddae []Result ,_gedc string )(float64 ,float64 ,Result ){if len (_ddae )!=2{return 0,0,MakeErrorResult (_gedc +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _ddae [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_gedc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_gedd :=_ddae [0].ValueNumber ;if _ddae [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_gedc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fac :=float64 (int (_ddae [1].ValueNumber ));if _fac < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_gedc +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");
};return _gedd ,_fac ,_cea ;};var _bggee =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};var _agaf int64 =_ddd (1900,_fd .January ,1);

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _ceee (args ,true )};const _cfcf int =30;

// Eval evaluates and returns the result of a constant array expression.
func (_fcd ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_dg :=[][]Result {};for _ ,_bbe :=range _fcd ._edf {_degg :=[]Result {};for _ ,_ccf :=range _bbe {_degg =append (_degg ,_ccf .Eval (ctx ,ev ));};_dg =append (_dg ,_degg );};return MakeArrayResult (_dg );
};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_edbcf :=len (args );if _edbcf !=6&&_edbcf !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_baag ,_fabc ,_ebcc :=_daa (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _ebcc .Type ==ResultTypeError {return _ebcc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bgc :=args [2].ValueNumber ;if _bgc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_bbgf :=args [3].ValueNumber ;if _bbgf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_facd :=args [4].ValueNumber ;if _facd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eebd :=args [5];if _eebd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_fgabc :=_eebd .ValueNumber ;if !_gfb (_fgabc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_fgce :=0;if _edbcf ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgce =int (args [6].ValueNumber );if !_eba (_fgce ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");
};};_addd ,_ebcc :=_dbdg (_baag ,_fabc ,_bgc ,_bbgf ,_facd ,_fgabc ,_fgce );if _ebcc .Type ==ResultTypeError {return _ebcc ;};return MakeNumberResult (_addd );};

// String returns a string representation of a named range.
func (_debe NamedRangeRef )String ()string {return _debe ._degdg };

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};func _fecfc (_bdegf ,_egfd float64 )float64 {_bdegf =_fg .Trunc (_bdegf );_egfd =_fg .Trunc (_egfd );if _bdegf ==0{return _egfd ;};if _egfd ==0{return _bdegf ;
};for _bdegf !=_egfd {if _bdegf > _egfd {_bdegf =_bdegf -_egfd ;}else {_egfd =_egfd -_bdegf ;};};return _bdegf ;};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_dgbc :=len (args );if _dgbc ==0||_dgbc > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");
};_gabe :=_ebadf (args [0]);_feaa :=[]float64 {};for _ ,_cecbd :=range _gabe {for _ ,_bage :=range _cecbd {if _bage .Type ==ResultTypeNumber &&!_bage .IsBoolean {_feaa =append (_feaa ,_bage .ValueNumber );};};};_gdge :=len (_feaa );if len (_feaa )< 2{return MakeErrorResultType (ErrorTypeNum ,"");
};_gdgc :=0.1;if _dgbc ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gdgc =args [1].ValueNumber ;if _gdgc <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");
};};_gcbe :=[]float64 {};for _aaac :=0;_aaac < _gdge ;_aaac ++{if _aaac ==0{_gcbe =append (_gcbe ,0);}else {_gcbe =append (_gcbe ,_gcbe [_aaac -1]+365);};};return _fbff (_feaa ,_gcbe ,_gdgc );};const _gecdg =57366;type ri struct{_affeg float64 ;_agada string ;
};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cbggb :=args [0].AsNumber ();if _cbggb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_efec :=0;if len (args )> 1{_eabb :=args [1];if _eabb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_efec =int (_eabb .ValueNumber );if _efec < 0{_efec =0;}else if _efec > 4{_efec =4;};};_bfbb :=_facfaa ;switch _efec {case 1:_bfbb =_addda ;case 2:_bfbb =_cddec ;case 3:_bfbb =_bbag ;case 4:_bfbb =_bdcf ;};_fegf :=_fg .Trunc (_cbggb .ValueNumber );_dbdge :=_b .Buffer {};
for _ ,_ddeggg :=range _bfbb {for _fegf >=_ddeggg ._affeg {_dbdge .WriteString (_ddeggg ._agada );_fegf -=_ddeggg ._affeg ;};};return MakeStringResult (_dbdge .String ());};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_feed :=args [0].AsNumber ();if _feed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (180.0/_fg .Pi *_feed .ValueNumber );};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};for _fage :=0;_fage < len (args )-1;_fage +=2{if args [_fage ].ValueNumber ==1{return args [_fage +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_eddg :=_ba .Split (v ,"\u003a");if len (_eddg )!=2{return nil ;};if _eddg [0]> _eddg [1]{_eddg [0],_eddg [1]=_eddg [1],_eddg [0];};return VerticalRange {_ccdb :_eddg [0],_ecddc :_eddg [1]};};

// String returns a string representation for Bool.
func (_bd Bool )String ()string {if _bd ._bae {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};func _fceb (_bbga string )bool {for _ ,_fgad :=range _aaea {_bfe :=_fgad .FindStringSubmatch (_bbga );if len (_bfe )> 1{return true ;
};};return false ;};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_agde ,_eedg :=_daac (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _eedg .Type ==ResultTypeError {return _eedg ;};_aegd :=_agde ._daff ;_fcfgd :=_agde ._efad ;_cafb :=_agde ._eeb ;_eag :=_agde ._egca ;
_fafc :=_agde ._dddc ;_agc :=_agde ._cdefd ;if _agc >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");
};_gga :=_agde ._cfgcf ;_efeda :=1.0/_agc ;_baed :=2.5;if _efeda < 3{_baed =1;}else if _efeda < 5{_baed =1.5;}else if _efeda <=6{_baed =2;};_agc *=_baed ;_agag ,_abg :=_bca (_fcfgd ,_cafb ,_gga );if _abg .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");
};_dac :=_abc (_agag *_agc *_aegd );_aegd -=_dac ;_bbcd :=_aegd -_eag ;for _efdc :=0;_efdc < _fafc ;_efdc ++{_dac =_abc (_agc *_aegd );_bbcd -=_dac ;if _bbcd < 0{switch _fafc -_efdc {case 0:case 1:return MakeNumberResult (_abc (_aegd *0.5));default:return MakeNumberResult (0);
};};_aegd -=_dac ;};return MakeNumberResult (_dac );};const _eefcd =57350;

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_bcab :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_bcab *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_egdd :=_ebadf (args [1]);for _ ,_feeb :=range _egdd {for _ ,_bffb :=range _feeb {if _bffb .Type !=ResultTypeNumber ||_bffb .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");
};_bcab *=1.0+_bffb .ValueNumber ;};};return MakeNumberResult (_bcab );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");
};};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_fgcbb .Lock ();defer _fgcbb .Unlock ();if _eddde ,_dbeef :=_gegd [name ];_dbeef {return _eddde ;};return nil ;};func _dgf (_fdgb string )bool {for _ ,_aea :=range _faa {_fbc :=_aea .FindStringSubmatch (_fdgb );
if len (_fbc )> 1{return true ;};};return false ;};func _bfbce (_bafbc ,_acdgc Reference )string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_bafbc .Value ,_acdgc .Value );};func (_fcgcc *Lexer )Next ()*node {_fcgcc ._bafb .Lock ();defer _fcgcc ._bafb .Unlock ();
if len (_fcgcc ._eceb )> 0{_bada :=_fcgcc ._eceb [0];_fcgcc ._eceb =_fcgcc ._eceb [1:];return _bada ;};return _fcgcc .nextRaw ();};func _cccaa (_dbgac _fd .Time )bool {return _fd .Now ().Sub (_dbgac )>=_gbdfc };type ivr struct{};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eecb :=0;_abbbc :=false ;for _ ,_bfdbb :=range args {switch _bfdbb .Type {case ResultTypeList ,ResultTypeArray :_gdag :=Xor (_bfdbb .ListValues ());if _gdag .Type ==ResultTypeError {return _gdag ;};if _gdag .ValueNumber !=0{_eecb ++;};_abbbc =true ;
case ResultTypeNumber :if _bfdbb .ValueNumber !=0{_eecb ++;};_abbbc =true ;case ResultTypeString :case ResultTypeError :return _bfdbb ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");
};};if !_abbbc {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_eecb %2!=0);};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ceeca :=int (args [0].ValueNumber );
return MakeBoolResult (_ceeca !=_ceeca /2*2);};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};const _bdegg =57367;
var _bbag =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
var _gg =map[string ]*_bc .Regexp {};

// Reference returns a string reference value to a horizontal range.
func (_addg HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_addg .horizontalRangeReference ()};};

// String returns a string representation for Negate.
func (_fgfac Negate )String ()string {return "\u002d"+_fgfac ._adcb .String ()};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ceec :=args [0].Ref ;
if _ceec .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");
};_gcee ,_efgf :=_dc .ParseCellReference (_ceec .Value );if _efgf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ceec .Value );};return MakeNumberResult (float64 (_gcee .ColumnIdx +1));
};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_dead :=_fd .Now ();
_ ,_aadc :=_dead .Zone ();_cfac :=_fgb +float64 (_dead .Unix ()+int64 (_aadc ))/86400;return MakeNumberResult (_cfac );};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_cdbag :=len (args );if _cdbag !=5&&_cdbag !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dgfg ,_daffd ,_bbgde :=_daa (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _bbgde .Type ==ResultTypeError {return _bbgde ;};_cbfge ,_bbgde :=_dfcc (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");
if _bbgde .Type ==ResultTypeError {return _bbgde ;};if _cbfge >=_dgfg {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_eefe :=args [3].ValueNumber ;if _eefe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dedg :=args [4].ValueNumber ;if _dedg <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};_gffea :=0;if _cdbag ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gffea =int (args [5].ValueNumber );if !_eba (_gffea ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");
};};_gfag ,_bbgde :=_bca (_cbfge ,_daffd ,_gffea );if _bbgde .Type ==ResultTypeError {return _bbgde ;};_ecfg ,_bbgde :=_bca (_cbfge ,_dgfg ,_gffea );if _bbgde .Type ==ResultTypeError {return _bbgde ;};_ccgf ,_bbgde :=_bca (_dgfg ,_daffd ,_gffea );if _bbgde .Type ==ResultTypeError {return _bbgde ;
};_afgbc :=1+_gfag *_eefe ;_afgbc /=_dedg /100+_ecfg *_eefe ;_afgbc --;_afgbc /=_ccgf ;return MakeNumberResult (_afgbc );};

// LastRow returns 0 for the invalid reference context.
func (_ceefc *ivr )LastRow (colFrom string )int {return 0};func _fcdbg (_egfba []string ,_dced int )string {return _ec .Itoa (len (_egfba [len (_egfba )-1-_dced ]))};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_daaa :=args [0];switch _daaa .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
case ResultTypeString :_ecbfb :=0.0;_gcbac :=0.0;for _ ,_agfe :=range _daaa .ValueString {_eaebe :=0.0;switch _agfe {case 'I':_eaebe =1;case 'V':_eaebe =5;case 'X':_eaebe =10;case 'L':_eaebe =50;case 'C':_eaebe =100;case 'D':_eaebe =500;case 'M':_eaebe =1000;
};_ecbfb +=_eaebe ;switch {case _gcbac ==_eaebe &&(_gcbac ==5||_gcbac ==50||_gcbac ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_gcbac ==_eaebe :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");
};if _gcbac < _eaebe {_ecbfb -=2*_gcbac ;};_gcbac =_eaebe ;};return MakeNumberResult (_ecbfb );case ResultTypeError :return _daaa ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_daaa .Type ));
};};func _adad ()yyParser {return &yyParserImpl {}};func (_egggd *Lexer )lex (_efgebd _f .Reader ){_bcffg ,_cgag ,_fadcc :=0,0,0;_fdbg :=-1;_baga ,_gffda ,_gedda :=0,0,0;_ =_gedda ;_fedf :=1;_ =_fedf ;_gecf :=make ([]byte ,4096);_faag :=false ;for !_faag {_cdeed :=0;
if _baga > 0{_cdeed =_cgag -_baga ;};_cgag =0;_dagce ,_ccce :=_efgebd .Read (_gecf [_cdeed :]);if _dagce ==0||_ccce !=nil {_faag =true ;};_fadcc =_dagce +_cdeed ;if _fadcc < len (_gecf ){_fdbg =_fadcc ;};{_bcffg =_aafec ;_baga =0;_gffda =0;_gedda =0;};
{var _aabef int ;var _affeb uint ;if _cgag ==_fadcc {goto _ggfe ;};if _bcffg ==0{goto _gddbc ;};_gbfg :_aabef =int (_cbacg [_bcffg ]);_affeb =uint (_aacee [_aabef ]);_aabef ++;for ;_affeb > 0;_affeb --{_aabef ++;switch _aacee [_aabef -1]{case 2:_baga =_cgag ;
};};switch _bcffg {case 30:switch _gecf [_cgag ]{case 34:goto _adbdcd ;case 35:goto _cbdg ;case 36:goto _eegee ;case 38:goto _accc ;case 39:goto _cgbfg ;case 40:goto _cdae ;case 41:goto _cdeeg ;case 42:goto _edce ;case 43:goto _agdef ;case 44:goto _aegad ;
case 45:goto _ccaae ;case 47:goto _bfde ;case 58:goto _gdgb ;case 59:goto _gcfg ;case 60:goto _daec ;case 61:goto _fbdg ;case 62:goto _fbbc ;case 63:goto _fbdbdf ;case 70:goto _ceddc ;case 84:goto _fgaba ;case 92:goto _geef ;case 94:goto _afcga ;case 95:goto _ddaf ;
case 123:goto _ggcag ;case 125:goto _bbceed ;};switch {case _gecf [_cgag ]< 65:switch {case _gecf [_cgag ]> 37:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _efaec ;};case _gecf [_cgag ]>=33:goto _fbdbdf ;};case _gecf [_cgag ]> 90:switch {case _gecf [_cgag ]> 93:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _eadg ;
};case _gecf [_cgag ]>=91:goto _fbdbdf ;};default:goto _ddaee ;};goto _bcfgf ;case 1:switch _gecf [_cgag ]{case 33:goto _caedg ;case 47:goto _fbbd ;case 123:goto _fbbd ;case 125:goto _fbbd ;};switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _fbbd ;
};case _gecf [_cgag ]> 45:switch {case _gecf [_cgag ]> 63:if 91<=_gecf [_cgag ]&&_gecf [_cgag ]<=94{goto _fbbd ;};case _gecf [_cgag ]>=58:goto _fbbd ;};default:goto _fbbd ;};goto _bcfgf ;case 0:goto _gddbc ;case 2:if _gecf [_cgag ]==34{goto _abbff ;};goto _adbdcd ;
case 31:if _gecf [_cgag ]==34{goto _adbdcd ;};goto _dgbaf ;case 3:switch _gecf [_cgag ]{case 78:goto _fdgfa ;case 82:goto _dgbcd ;};goto _fbdbdf ;case 4:switch _gecf [_cgag ]{case 47:goto _bafgf ;case 85:goto _daaaf ;};goto _fbdbdf ;case 5:if _gecf [_cgag ]==65{goto _afbec ;
};goto _fbdbdf ;case 6:switch _gecf [_cgag ]{case 76:goto _ecbff ;case 77:goto _fgdf ;};goto _fbdbdf ;case 7:if _gecf [_cgag ]==76{goto _fgdf ;};goto _fbdbdf ;case 8:if _gecf [_cgag ]==33{goto _afbec ;};goto _fbdbdf ;case 9:if _gecf [_cgag ]==69{goto _efada ;
};goto _fbdbdf ;case 10:if _gecf [_cgag ]==70{goto _debc ;};goto _fbdbdf ;case 11:if _gecf [_cgag ]==33{goto _eebc ;};goto _fbdbdf ;case 12:switch _gecf [_cgag ]{case 33:goto _caedg ;case 47:goto _fbdbdf ;case 123:goto _fbdbdf ;case 125:goto _fbdbdf ;};
switch {case _gecf [_cgag ]< 48:switch {case _gecf [_cgag ]> 35:if 37<=_gecf [_cgag ]&&_gecf [_cgag ]<=45{goto _fbdbdf ;};case _gecf [_cgag ]>=34:goto _fbdbdf ;};case _gecf [_cgag ]> 57:switch {case _gecf [_cgag ]< 65:if 58<=_gecf [_cgag ]&&_gecf [_cgag ]<=63{goto _fbdbdf ;
};case _gecf [_cgag ]> 90:if 91<=_gecf [_cgag ]&&_gecf [_cgag ]<=94{goto _fbdbdf ;};default:goto _caede ;};default:goto _ddab ;};goto _bcfgf ;case 13:switch _gecf [_cgag ]{case 33:goto _caedg ;case 47:goto _fbdbdf ;case 58:goto _affda ;case 123:goto _fbdbdf ;
case 125:goto _fbdbdf ;};switch {case _gecf [_cgag ]< 48:switch {case _gecf [_cgag ]> 35:if 37<=_gecf [_cgag ]&&_gecf [_cgag ]<=45{goto _fbdbdf ;};case _gecf [_cgag ]>=34:goto _fbdbdf ;};case _gecf [_cgag ]> 57:switch {case _gecf [_cgag ]> 63:if 91<=_gecf [_cgag ]&&_gecf [_cgag ]<=94{goto _fbdbdf ;
};case _gecf [_cgag ]>=59:goto _fbdbdf ;};default:goto _ddab ;};goto _bcfgf ;case 14:if _gecf [_cgag ]==36{goto _gdabb ;};if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _baabe ;};goto _fbbd ;case 15:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _baabe ;
};goto _fbbd ;case 32:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _baabe ;};goto _fgba ;case 16:switch _gecf [_cgag ]{case 33:goto _caedg ;case 36:goto _aaabe ;case 47:goto _fbdbdf ;case 58:goto _ebcba ;case 123:goto _fbdbdf ;case 125:goto _fbdbdf ;
};switch {case _gecf [_cgag ]< 59:switch {case _gecf [_cgag ]> 45:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _addb ;};case _gecf [_cgag ]>=34:goto _fbdbdf ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]> 90:if 91<=_gecf [_cgag ]&&_gecf [_cgag ]<=94{goto _fbdbdf ;
};case _gecf [_cgag ]>=65:goto _caede ;};default:goto _fbdbdf ;};goto _bcfgf ;case 17:switch _gecf [_cgag ]{case 33:goto _caedg ;case 47:goto _fbbd ;case 123:goto _fbbd ;case 125:goto _fbbd ;};switch {case _gecf [_cgag ]< 48:switch {case _gecf [_cgag ]> 35:if 37<=_gecf [_cgag ]&&_gecf [_cgag ]<=45{goto _fbbd ;
};case _gecf [_cgag ]>=34:goto _fbbd ;};case _gecf [_cgag ]> 57:switch {case _gecf [_cgag ]> 63:if 91<=_gecf [_cgag ]&&_gecf [_cgag ]<=94{goto _fbbd ;};case _gecf [_cgag ]>=58:goto _fbbd ;};default:goto _addb ;};goto _bcfgf ;case 33:switch _gecf [_cgag ]{case 33:goto _caedg ;
case 47:goto _caadd ;case 123:goto _caadd ;case 125:goto _caadd ;};switch {case _gecf [_cgag ]< 48:switch {case _gecf [_cgag ]> 35:if 37<=_gecf [_cgag ]&&_gecf [_cgag ]<=45{goto _caadd ;};case _gecf [_cgag ]>=34:goto _caadd ;};case _gecf [_cgag ]> 57:switch {case _gecf [_cgag ]> 63:if 91<=_gecf [_cgag ]&&_gecf [_cgag ]<=94{goto _caadd ;
};case _gecf [_cgag ]>=58:goto _caadd ;};default:goto _addb ;};goto _bcfgf ;case 18:if _gecf [_cgag ]==36{goto _edbcfc ;};if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _cecba ;};goto _fbbd ;case 19:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _cecba ;
};goto _fbbd ;case 34:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _cecba ;};goto _eefg ;case 20:switch _gecf [_cgag ]{case 39:goto _fbdbdf ;case 42:goto _fbdbdf ;case 47:goto _fbdbdf ;case 58:goto _fbdbdf ;case 63:goto _fbdbdf ;};if 91<=_gecf [_cgag ]&&_gecf [_cgag ]<=93{goto _fbdbdf ;
};goto _bddec ;case 21:switch _gecf [_cgag ]{case 39:goto _dbeg ;case 42:goto _fbdbdf ;case 47:goto _fbdbdf ;case 58:goto _fbdbdf ;case 63:goto _fbdbdf ;};if 91<=_gecf [_cgag ]&&_gecf [_cgag ]<=93{goto _fbdbdf ;};goto _bddec ;case 22:if _gecf [_cgag ]==33{goto _ceaa ;
};goto _fbdbdf ;case 35:switch _gecf [_cgag ]{case 33:goto _caedg ;case 46:goto _bcadg ;case 58:goto _affda ;case 101:goto _bbba ;case 123:goto _eebcf ;case 125:goto _eebcf ;};switch {case _gecf [_cgag ]< 48:switch {case _gecf [_cgag ]> 35:if 37<=_gecf [_cgag ]&&_gecf [_cgag ]<=47{goto _eebcf ;
};case _gecf [_cgag ]>=34:goto _eebcf ;};case _gecf [_cgag ]> 57:switch {case _gecf [_cgag ]> 63:if 91<=_gecf [_cgag ]&&_gecf [_cgag ]<=94{goto _eebcf ;};case _gecf [_cgag ]>=59:goto _eebcf ;};default:goto _efaec ;};goto _bcfgf ;case 36:switch _gecf [_cgag ]{case 33:goto _caedg ;
case 47:goto _eebcf ;case 101:goto _bbba ;case 123:goto _eebcf ;case 125:goto _eebcf ;};switch {case _gecf [_cgag ]< 48:switch {case _gecf [_cgag ]> 35:if 37<=_gecf [_cgag ]&&_gecf [_cgag ]<=45{goto _eebcf ;};case _gecf [_cgag ]>=34:goto _eebcf ;};case _gecf [_cgag ]> 57:switch {case _gecf [_cgag ]> 63:if 91<=_gecf [_cgag ]&&_gecf [_cgag ]<=94{goto _eebcf ;
};case _gecf [_cgag ]>=58:goto _eebcf ;};default:goto _bcadg ;};goto _bcfgf ;case 23:switch _gecf [_cgag ]{case 33:goto _caedg ;case 47:goto _gcfeb ;case 123:goto _gcfeb ;case 125:goto _gcfeb ;};switch {case _gecf [_cgag ]< 48:switch {case _gecf [_cgag ]> 35:if 37<=_gecf [_cgag ]&&_gecf [_cgag ]<=45{goto _gcfeb ;
};case _gecf [_cgag ]>=34:goto _gcfeb ;};case _gecf [_cgag ]> 57:switch {case _gecf [_cgag ]> 63:if 91<=_gecf [_cgag ]&&_gecf [_cgag ]<=94{goto _gcfeb ;};case _gecf [_cgag ]>=58:goto _gcfeb ;};default:goto _fdga ;};goto _bcfgf ;case 37:switch _gecf [_cgag ]{case 33:goto _caedg ;
case 47:goto _eebcf ;case 123:goto _eebcf ;case 125:goto _eebcf ;};switch {case _gecf [_cgag ]< 48:switch {case _gecf [_cgag ]> 35:if 37<=_gecf [_cgag ]&&_gecf [_cgag ]<=45{goto _eebcf ;};case _gecf [_cgag ]>=34:goto _eebcf ;};case _gecf [_cgag ]> 57:switch {case _gecf [_cgag ]> 63:if 91<=_gecf [_cgag ]&&_gecf [_cgag ]<=94{goto _eebcf ;
};case _gecf [_cgag ]>=58:goto _eebcf ;};default:goto _fdga ;};goto _bcfgf ;case 38:switch _gecf [_cgag ]{case 61:goto _ddebe ;case 62:goto _ebeffd ;};goto _cbcbg ;case 39:if _gecf [_cgag ]==61{goto _geeg ;};goto _ccbe ;case 24:switch _gecf [_cgag ]{case 33:goto _caedg ;
case 36:goto _aaabe ;case 40:goto _gdbbg ;case 46:goto _bbccg ;case 58:goto _ebcba ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _fbdbdf ;case 125:goto _fbdbdf ;};switch {case _gecf [_cgag ]< 59:switch {case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _dbcac ;
};case _gecf [_cgag ]>=34:goto _fbdbdf ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _ecab ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;};default:goto _fbdbdf ;
};default:goto _fbdbdf ;};goto _bcfgf ;case 40:switch _gecf [_cgag ]{case 33:goto _caedg ;case 40:goto _gdbbg ;case 46:goto _bbccg ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _gedg ;case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 58:switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _gedg ;
};case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _bbccg ;};default:goto _gedg ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _bbccg ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;
};default:goto _gedg ;};default:goto _gedg ;};goto _bcfgf ;case 41:switch _gecf [_cgag ]{case 46:goto _aebc ;case 92:goto _aebc ;case 95:goto _aebc ;};switch {case _gecf [_cgag ]< 65:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _aebc ;};case _gecf [_cgag ]> 90:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _aebc ;
};default:goto _aebc ;};goto _gedg ;case 42:switch _gecf [_cgag ]{case 33:goto _caedg ;case 46:goto _cabef ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _gedg ;case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 58:switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _gedg ;
};case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _cabef ;};default:goto _gedg ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _cabef ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;
};default:goto _gedg ;};default:goto _gedg ;};goto _bcfgf ;case 43:switch _gecf [_cgag ]{case 33:goto _caedg ;case 40:goto _gdbbg ;case 46:goto _bbccg ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _caadd ;case 125:goto _caadd ;};switch {case _gecf [_cgag ]< 58:switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _caadd ;
};case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _dbcac ;};default:goto _caadd ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _bbccg ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;
};default:goto _caadd ;};default:goto _caadd ;};goto _bcfgf ;case 44:switch _gecf [_cgag ]{case 33:goto _caedg ;case 36:goto _aaabe ;case 40:goto _gdbbg ;case 46:goto _bbccg ;case 58:goto _ebcba ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _fbbd ;
case 125:goto _fbbd ;};switch {case _gecf [_cgag ]< 59:switch {case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _dbcac ;};case _gecf [_cgag ]>=34:goto _fbbd ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _ecab ;
};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;};default:goto _fbbd ;};default:goto _fbbd ;};goto _bcfgf ;case 25:switch _gecf [_cgag ]{case 33:goto _caedg ;case 36:goto _aaabe ;case 40:goto _gdbbg ;case 46:goto _bbccg ;
case 58:goto _ebcba ;case 65:goto _cddae ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _fbdbdf ;case 125:goto _fbdbdf ;};switch {case _gecf [_cgag ]< 59:switch {case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _dbcac ;};
case _gecf [_cgag ]>=34:goto _fbdbdf ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 66<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _ecab ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;};default:goto _fbdbdf ;
};default:goto _fbdbdf ;};goto _bcfgf ;case 45:switch _gecf [_cgag ]{case 33:goto _caedg ;case 36:goto _aaabe ;case 40:goto _gdbbg ;case 46:goto _bbccg ;case 58:goto _ebcba ;case 76:goto _agdbc ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _gedg ;
case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 59:switch {case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _dbcac ;};case _gecf [_cgag ]>=34:goto _gedg ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _ecab ;
};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;};default:goto _gedg ;};default:goto _gedg ;};goto _bcfgf ;case 46:switch _gecf [_cgag ]{case 33:goto _caedg ;case 36:goto _aaabe ;case 40:goto _gdbbg ;case 46:goto _bbccg ;
case 58:goto _ebcba ;case 83:goto _bbcg ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _gedg ;case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 59:switch {case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _dbcac ;};case _gecf [_cgag ]>=34:goto _gedg ;
};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _ecab ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;};default:goto _gedg ;};default:goto _gedg ;};goto _bcfgf ;
case 47:switch _gecf [_cgag ]{case 33:goto _caedg ;case 36:goto _aaabe ;case 40:goto _gdbbg ;case 46:goto _bbccg ;case 58:goto _ebcba ;case 69:goto _egcd ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _gedg ;case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 59:switch {case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _dbcac ;
};case _gecf [_cgag ]>=34:goto _gedg ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _ecab ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;};default:goto _gedg ;
};default:goto _gedg ;};goto _bcfgf ;case 26:switch _gecf [_cgag ]{case 33:goto _caedg ;case 36:goto _aaabe ;case 40:goto _gdbbg ;case 46:goto _bbccg ;case 58:goto _ebcba ;case 79:goto _aafd ;case 82:goto _fcdgg ;case 92:goto _aebc ;case 95:goto _cabef ;
case 123:goto _fbdbdf ;case 125:goto _fbdbdf ;};switch {case _gecf [_cgag ]< 59:switch {case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _dbcac ;};case _gecf [_cgag ]>=34:goto _fbdbdf ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _ecab ;
};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;};default:goto _fbdbdf ;};default:goto _fbdbdf ;};goto _bcfgf ;case 48:switch _gecf [_cgag ]{case 33:goto _caedg ;case 36:goto _aaabe ;case 40:goto _gdbbg ;case 46:goto _bbccg ;
case 58:goto _ebcba ;case 68:goto _cdbb ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _gedg ;case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 59:switch {case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _dbcac ;};case _gecf [_cgag ]>=34:goto _gedg ;
};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _ecab ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;};default:goto _gedg ;};default:goto _gedg ;};goto _bcfgf ;
case 49:switch _gecf [_cgag ]{case 33:goto _caedg ;case 36:goto _aaabe ;case 40:goto _gdbbg ;case 46:goto _bbccg ;case 58:goto _ebcba ;case 79:goto _agdb ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _gedg ;case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 59:switch {case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _dbcac ;
};case _gecf [_cgag ]>=34:goto _gedg ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _ecab ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;};default:goto _gedg ;
};default:goto _gedg ;};goto _bcfgf ;case 50:switch _gecf [_cgag ]{case 33:goto _caedg ;case 36:goto _aaabe ;case 40:goto _gdbbg ;case 46:goto _bbccg ;case 58:goto _ebcba ;case 85:goto _bbcg ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _gedg ;
case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 59:switch {case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _dbcac ;};case _gecf [_cgag ]>=34:goto _gedg ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _ecab ;
};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;};default:goto _gedg ;};default:goto _gedg ;};goto _bcfgf ;case 27:switch _gecf [_cgag ]{case 46:goto _aebc ;case 92:goto _aebc ;case 95:goto _aebc ;};switch {case _gecf [_cgag ]< 65:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _aebc ;
};case _gecf [_cgag ]> 90:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _aebc ;};default:goto _aebc ;};goto _fbdbdf ;case 28:switch _gecf [_cgag ]{case 33:goto _caedg ;case 46:goto _cabef ;case 92:goto _aebc ;case 95:goto _cabef ;case 120:goto _ggea ;
case 123:goto _fbdbdf ;case 125:goto _fbdbdf ;};switch {case _gecf [_cgag ]< 58:switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _fbdbdf ;};case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _cabef ;};default:goto _fbdbdf ;
};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _cabef ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;};default:goto _fbdbdf ;};default:goto _fbdbdf ;};goto _bcfgf ;
case 51:switch _gecf [_cgag ]{case 33:goto _caedg ;case 46:goto _cabef ;case 92:goto _aebc ;case 95:goto _cabef ;case 108:goto _fgacd ;case 123:goto _gedg ;case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 58:switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _gedg ;
};case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _cabef ;};default:goto _gedg ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _cabef ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;
};default:goto _gedg ;};default:goto _gedg ;};goto _bcfgf ;case 52:switch _gecf [_cgag ]{case 33:goto _caedg ;case 46:goto _cabef ;case 92:goto _aebc ;case 95:goto _cabef ;case 102:goto _agdaa ;case 110:goto _bcee ;case 123:goto _gedg ;case 125:goto _gedg ;
};switch {case _gecf [_cgag ]< 58:switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _gedg ;};case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _cabef ;};default:goto _gedg ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _cabef ;
};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;};default:goto _gedg ;};default:goto _gedg ;};goto _bcfgf ;case 53:switch _gecf [_cgag ]{case 33:goto _caedg ;case 46:goto _cabef ;case 92:goto _aebc ;case 95:goto _cabef ;
case 110:goto _febdc ;case 123:goto _gedg ;case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 58:switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _gedg ;};case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _cabef ;
};default:goto _gedg ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _cabef ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;};default:goto _gedg ;};default:goto _gedg ;
};goto _bcfgf ;case 54:switch _gecf [_cgag ]{case 33:goto _caedg ;case 46:goto _eabf ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _gedg ;case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 58:switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _gedg ;
};case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _cabef ;};default:goto _gedg ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _cabef ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;
};default:goto _gedg ;};default:goto _gedg ;};goto _bcfgf ;case 55:switch _gecf [_cgag ]{case 33:goto _caedg ;case 46:goto _cabef ;case 92:goto _aebc ;case 95:goto _aaage ;case 123:goto _gedg ;case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 58:switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _gedg ;
};case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _cabef ;};default:goto _gedg ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _aaage ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;
};default:goto _gedg ;};default:goto _gedg ;};goto _bcfgf ;case 56:switch _gecf [_cgag ]{case 33:goto _caedg ;case 40:goto _gadae ;case 46:goto _aaage ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _gedg ;case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 58:switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _gedg ;
};case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _aaage ;};default:goto _gedg ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _aaage ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;
};default:goto _gedg ;};default:goto _gedg ;};goto _bcfgf ;case 57:switch _gecf [_cgag ]{case 33:goto _caedg ;case 46:goto _cabef ;case 92:goto _aebc ;case 95:goto _cabef ;case 109:goto _cfee ;case 123:goto _gedg ;case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 58:switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _gedg ;
};case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _cabef ;};default:goto _gedg ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _cabef ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;
};default:goto _gedg ;};default:goto _gedg ;};goto _bcfgf ;case 58:switch _gecf [_cgag ]{case 33:goto _caedg ;case 46:goto _acag ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _gedg ;case 125:goto _gedg ;};switch {case _gecf [_cgag ]< 58:switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _gedg ;
};case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _cabef ;};default:goto _gedg ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _cabef ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;
};default:goto _gedg ;};default:goto _gedg ;};goto _bcfgf ;case 59:switch _gecf [_cgag ]{case 33:goto _caedg ;case 46:goto _cabef ;case 92:goto _aebc ;case 95:goto _efgge ;case 123:goto _fbbd ;case 125:goto _fbbd ;};switch {case _gecf [_cgag ]< 58:switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _fbbd ;
};case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _cabef ;};default:goto _fbbd ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _efgge ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;
};default:goto _fbbd ;};default:goto _fbbd ;};goto _bcfgf ;case 29:switch _gecf [_cgag ]{case 33:goto _caedg ;case 46:goto _cabef ;case 92:goto _aebc ;case 95:goto _cabef ;case 123:goto _fbdbdf ;case 125:goto _fbdbdf ;};switch {case _gecf [_cgag ]< 58:switch {case _gecf [_cgag ]< 37:if 34<=_gecf [_cgag ]&&_gecf [_cgag ]<=35{goto _fbdbdf ;
};case _gecf [_cgag ]> 47:if 48<=_gecf [_cgag ]&&_gecf [_cgag ]<=57{goto _cabef ;};default:goto _fbdbdf ;};case _gecf [_cgag ]> 63:switch {case _gecf [_cgag ]< 91:if 65<=_gecf [_cgag ]&&_gecf [_cgag ]<=90{goto _cabef ;};case _gecf [_cgag ]> 94:if 97<=_gecf [_cgag ]&&_gecf [_cgag ]<=122{goto _cabef ;
};default:goto _fbdbdf ;};default:goto _fbdbdf ;};goto _bcfgf ;};_fbdbdf :_bcffg =0;goto _dgbgb ;_bcfgf :_bcffg =1;goto _dgbgb ;_adbdcd :_bcffg =2;goto _dgbgb ;_cbdg :_bcffg =3;goto _dgbgb ;_fdgfa :_bcffg =4;goto _dgbgb ;_bafgf :_bcffg =5;goto _dgbgb ;
_daaaf :_bcffg =6;goto _dgbgb ;_ecbff :_bcffg =7;goto _dgbgb ;_fgdf :_bcffg =8;goto _dgbgb ;_dgbcd :_bcffg =9;goto _dgbgb ;_efada :_bcffg =10;goto _dgbgb ;_debc :_bcffg =11;goto _dgbgb ;_eegee :_bcffg =12;goto _dgbgb ;_ddab :_bcffg =13;goto _dgbgb ;_affda :_bcffg =14;
goto _dgbgb ;_gdabb :_bcffg =15;goto _dgbgb ;_caede :_bcffg =16;goto _dgbgb ;_aaabe :_bcffg =17;goto _dgbgb ;_ebcba :_bcffg =18;goto _dgbgb ;_edbcfc :_bcffg =19;goto _dgbgb ;_cgbfg :_bcffg =20;goto _dgbgb ;_bddec :_bcffg =21;goto _dgbgb ;_dbeg :_bcffg =22;
goto _dgbgb ;_bbba :_bcffg =23;goto _dgbgb ;_ddaee :_bcffg =24;goto _dgbgb ;_ceddc :_bcffg =25;goto _dgbgb ;_fgaba :_bcffg =26;goto _dgbgb ;_geef :_bcffg =27;goto _dgbgb ;_ddaf :_bcffg =28;goto _dgbgb ;_eadg :_bcffg =29;goto _dgbgb ;_fbbd :_bcffg =30;goto _dabb ;
_caedg :_bcffg =30;goto _dcdb ;_afbec :_bcffg =30;goto _gfaf ;_eebc :_bcffg =30;goto _bgcbf ;_ceaa :_bcffg =30;goto _cegca ;_gcfeb :_bcffg =30;goto _bfga ;_gdbbg :_bcffg =30;goto _eegbc ;_accc :_bcffg =30;goto _abfba ;_cdae :_bcffg =30;goto _dbcaa ;_cdeeg :_bcffg =30;
goto _ebfd ;_edce :_bcffg =30;goto _cdacg ;_agdef :_bcffg =30;goto _aafae ;_aegad :_bcffg =30;goto _fbfc ;_ccaae :_bcffg =30;goto _eaga ;_bfde :_bcffg =30;goto _dcafd ;_gdgb :_bcffg =30;goto _bggg ;_gcfg :_bcffg =30;goto _bcfd ;_fbdg :_bcffg =30;goto _effdc ;
_afcga :_bcffg =30;goto _ebfg ;_ggcag :_bcffg =30;goto _gddae ;_bbceed :_bcffg =30;goto _acee ;_dgbaf :_bcffg =30;goto _dbfb ;_fgba :_bcffg =30;goto _cffb ;_caadd :_bcffg =30;goto _bbdbe ;_eefg :_bcffg =30;goto _fdbfb ;_eebcf :_bcffg =30;goto _efac ;_cbcbg :_bcffg =30;
goto _bbggb ;_ddebe :_bcffg =30;goto _bfag ;_ebeffd :_bcffg =30;goto _adgcc ;_ccbe :_bcffg =30;goto _acbg ;_geeg :_bcffg =30;goto _cdced ;_gedg :_bcffg =30;goto _dddfc ;_gadae :_bcffg =30;goto _deebe ;_abbff :_bcffg =31;goto _cgad ;_baabe :_bcffg =32;goto _dgbgb ;
_addb :_bcffg =33;goto _gccec ;_cecba :_bcffg =34;goto _dgbgb ;_efaec :_bcffg =35;goto _caafc ;_bcadg :_bcffg =36;goto _caafc ;_fdga :_bcffg =37;goto _caafc ;_daec :_bcffg =38;goto _dgbgb ;_fbbc :_bcffg =39;goto _dgbgb ;_bbccg :_bcffg =40;goto _dgbcg ;
_aebc :_bcffg =41;goto _dgbgb ;_cabef :_bcffg =42;goto _dgbcg ;_dbcac :_bcffg =43;goto _gccec ;_ecab :_bcffg =44;goto _dgbcg ;_egcd :_bcffg =44;goto _bafa ;_agdb :_bcffg =44;goto _ffaf ;_cddae :_bcffg =45;goto _dgbcg ;_agdbc :_bcffg =46;goto _dgbcg ;_bbcg :_bcffg =47;
goto _dgbcg ;_aafd :_bcffg =48;goto _dgbcg ;_cdbb :_bcffg =49;goto _dgbcg ;_fcdgg :_bcffg =50;goto _dgbcg ;_ggea :_bcffg =51;goto _dgbcg ;_fgacd :_bcffg =52;goto _dgbcg ;_agdaa :_bcffg =53;goto _dgbcg ;_febdc :_bcffg =54;goto _dgbcg ;_eabf :_bcffg =55;
goto _dgbcg ;_aaage :_bcffg =56;goto _dgbcg ;_bcee :_bcffg =57;goto _dgbcg ;_cfee :_bcffg =58;goto _dgbcg ;_acag :_bcffg =59;goto _dgbcg ;_efgge :_bcffg =59;goto _edgc ;_gfaf :_aabef =3;goto _afacdd ;_bgcbf :_aabef =5;goto _afacdd ;_dcdb :_aabef =7;goto _afacdd ;
_cegca :_aabef =9;goto _afacdd ;_eegbc :_aabef =11;goto _afacdd ;_deebe :_aabef =13;goto _afacdd ;_abfba :_aabef =15;goto _afacdd ;_gddae :_aabef =17;goto _afacdd ;_acee :_aabef =19;goto _afacdd ;_dbcaa :_aabef =21;goto _afacdd ;_ebfd :_aabef =23;goto _afacdd ;
_aafae :_aabef =25;goto _afacdd ;_eaga :_aabef =27;goto _afacdd ;_cdacg :_aabef =29;goto _afacdd ;_dcafd :_aabef =31;goto _afacdd ;_ebfg :_aabef =33;goto _afacdd ;_effdc :_aabef =35;goto _afacdd ;_bfag :_aabef =37;goto _afacdd ;_cdced :_aabef =39;goto _afacdd ;
_adgcc :_aabef =41;goto _afacdd ;_bggg :_aabef =43;goto _afacdd ;_bcfd :_aabef =45;goto _afacdd ;_fbfc :_aabef =47;goto _afacdd ;_efac :_aabef =49;goto _afacdd ;_bbdbe :_aabef =51;goto _afacdd ;_cffb :_aabef =53;goto _afacdd ;_fdbfb :_aabef =55;goto _afacdd ;
_dddfc :_aabef =57;goto _afacdd ;_dbfb :_aabef =59;goto _afacdd ;_bbggb :_aabef =61;goto _afacdd ;_acbg :_aabef =63;goto _afacdd ;_bfga :_aabef =65;goto _afacdd ;_dabb :_aabef =67;goto _afacdd ;_bafa :_aabef =72;goto _afacdd ;_caafc :_aabef =75;goto _afacdd ;
_gccec :_aabef =78;goto _afacdd ;_ffaf :_aabef =81;goto _afacdd ;_edgc :_aabef =84;goto _afacdd ;_dgbcg :_aabef =87;goto _afacdd ;_cgad :_aabef =90;goto _afacdd ;_afacdd :_affeb =uint (_aacee [_aabef ]);_aabef ++;for ;_affeb > 0;_affeb --{_aabef ++;switch _aacee [_aabef -1]{case 3:_gffda =_cgag +1;
case 4:_gedda =1;case 5:_gedda =2;case 6:_gedda =3;case 7:_gedda =4;case 8:_gedda =11;case 9:_gedda =14;case 10:_gedda =15;case 11:_gffda =_cgag +1;{_egggd .emit (_bbceb ,_gecf [_baga :_gffda ]);};case 12:_gffda =_cgag +1;{_egggd .emit (_deaf ,_gecf [_baga :_gffda ]);
};case 13:_gffda =_cgag +1;{_egggd .emit (_bdfd ,_gecf [_baga :_gffda -1]);};case 14:_gffda =_cgag +1;{_egggd .emit (_bdfd ,_gecf [_baga +1:_gffda -2]);};case 15:_gffda =_cgag +1;{_egggd .emit (_eaea ,_gecf [_baga :_gffda -1]);};case 16:_gffda =_cgag +1;
{_egggd .emit (_eaea ,_gecf [_baga :_gffda -1]);};case 17:_gffda =_cgag +1;{_egggd .emit (_fcfed ,_gecf [_baga :_gffda ]);};case 18:_gffda =_cgag +1;{_egggd .emit (_ccgd ,_gecf [_baga :_gffda ]);};case 19:_gffda =_cgag +1;{_egggd .emit (_cdfde ,_gecf [_baga :_gffda ]);
};case 20:_gffda =_cgag +1;{_egggd .emit (_geeef ,_gecf [_baga :_gffda ]);};case 21:_gffda =_cgag +1;{_egggd .emit (_eccf ,_gecf [_baga :_gffda ]);};case 22:_gffda =_cgag +1;{_egggd .emit (_geffg ,_gecf [_baga :_gffda ]);};case 23:_gffda =_cgag +1;{_egggd .emit (_bcafb ,_gecf [_baga :_gffda ]);
};case 24:_gffda =_cgag +1;{_egggd .emit (_gecdg ,_gecf [_baga :_gffda ]);};case 25:_gffda =_cgag +1;{_egggd .emit (_bdegg ,_gecf [_baga :_gffda ]);};case 26:_gffda =_cgag +1;{_egggd .emit (_bbdea ,_gecf [_baga :_gffda ]);};case 27:_gffda =_cgag +1;{_egggd .emit (_aggb ,_gecf [_baga :_gffda ]);
};case 28:_gffda =_cgag +1;{_egggd .emit (_gcgce ,_gecf [_baga :_gffda ]);};case 29:_gffda =_cgag +1;{_egggd .emit (_fdbabe ,_gecf [_baga :_gffda ]);};case 30:_gffda =_cgag +1;{_egggd .emit (_acdg ,_gecf [_baga :_gffda ]);};case 31:_gffda =_cgag +1;{_egggd .emit (_eadd ,_gecf [_baga :_gffda ]);
};case 32:_gffda =_cgag +1;{_egggd .emit (_gaedb ,_gecf [_baga :_gffda ]);};case 33:_gffda =_cgag +1;{_egggd .emit (_bgfc ,_gecf [_baga :_gffda ]);};case 34:_gffda =_cgag ;_cgag --;{_egggd .emit (_fedbf ,_gecf [_baga :_gffda ]);};case 35:_gffda =_cgag ;
_cgag --;{_egggd .emit (_fggc ,_gecf [_baga :_gffda ]);};case 36:_gffda =_cgag ;_cgag --;{_egggd .emit (_bbeg ,_gecf [_baga :_gffda ]);};case 37:_gffda =_cgag ;_cgag --;{_egggd .emit (_begab ,_gecf [_baga :_gffda ]);};case 38:_gffda =_cgag ;_cgag --;{_egggd .emit (_gcfa ,_gecf [_baga :_gffda ]);
};case 39:_gffda =_cgag ;_cgag --;{_egggd .emit (_gcccd ,_gecf [_baga +1:_gffda -1]);};case 40:_gffda =_cgag ;_cgag --;{_egggd .emit (_ddfc ,_gecf [_baga :_gffda ]);};case 41:_gffda =_cgag ;_cgag --;{_egggd .emit (_cad ,_gecf [_baga :_gffda ]);};case 42:_cgag =(_gffda )-1;
{_egggd .emit (_fedbf ,_gecf [_baga :_gffda ]);};case 43:switch _gedda {case 0:{_bcffg =0;goto _dgbgb ;};case 1:{_cgag =(_gffda )-1;_egggd .emit (_baad ,_gecf [_baga :_gffda ]);};case 2:{_cgag =(_gffda )-1;_egggd .emit (_fedbf ,_gecf [_baga :_gffda ]);
};case 3:{_cgag =(_gffda )-1;_egggd .emit (_fggc ,_gecf [_baga :_gffda ]);};case 4:{_cgag =(_gffda )-1;_egggd .emit (_dffb ,_gecf [_baga :_gffda ]);};case 11:{_cgag =(_gffda )-1;_egggd .emit (_edca ,_gecf [_baga :_gffda ]);};case 14:{_cgag =(_gffda )-1;
_egggd .emit (_gcfa ,_gecf [_baga :_gffda ]);};case 15:{_cgag =(_gffda )-1;_egggd .emit (_gcccd ,_gecf [_baga +1:_gffda -1]);};};};};goto _dgbgb ;_dgbgb :_aabef =int (_cacc [_bcffg ]);_affeb =uint (_aacee [_aabef ]);_aabef ++;for ;_affeb > 0;_affeb --{_aabef ++;
switch _aacee [_aabef -1]{case 0:_baga =0;case 1:_gedda =0;};};if _bcffg ==0{goto _gddbc ;};if _cgag ++;_cgag !=_fadcc {goto _gbfg ;};_ggfe :{};if _cgag ==_fdbg {switch _bcffg {case 1:goto _fbbd ;case 2:goto _fbbd ;case 31:goto _dgbaf ;case 14:goto _fbbd ;
case 15:goto _fbbd ;case 32:goto _fgba ;case 17:goto _fbbd ;case 33:goto _caadd ;case 18:goto _fbbd ;case 19:goto _fbbd ;case 34:goto _eefg ;case 35:goto _eebcf ;case 36:goto _eebcf ;case 23:goto _gcfeb ;case 37:goto _eebcf ;case 38:goto _cbcbg ;case 39:goto _ccbe ;
case 40:goto _gedg ;case 41:goto _gedg ;case 42:goto _gedg ;case 43:goto _caadd ;case 44:goto _fbbd ;case 45:goto _gedg ;case 46:goto _gedg ;case 47:goto _gedg ;case 48:goto _gedg ;case 49:goto _gedg ;case 50:goto _gedg ;case 51:goto _gedg ;case 52:goto _gedg ;
case 53:goto _gedg ;case 54:goto _gedg ;case 55:goto _gedg ;case 56:goto _gedg ;case 57:goto _gedg ;case 58:goto _gedg ;case 59:goto _fbbd ;};};_gddbc :{};};if _baga > 0{copy (_gecf [0:],_gecf [_baga :]);};};_ =_fdbg ;if _bcffg ==_fada {_egggd .emit (_eefcd ,nil );
};close (_egggd ._bfaag );};var _gcda =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};

// Reference returns an invalid reference for Error.
func (_gab Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// String returns an empty string for Error.
func (_bcbf Error )String ()string {return ""};func _gbae (_dfea _fd .Time )_fd .Time {_dfea =_dfea .UTC ();return _fd .Date (_dfea .Year (),_dfea .Month (),_dfea .Day (),_dfea .Hour (),_dfea .Minute (),_dfea .Second (),_dfea .Nanosecond (),_fd .Local );
};func _bee ()evCache {_dca :=evCache {};_dca ._ege =make (map[string ]Result );_dca ._bbed =&_af .Mutex {};return _dca ;};const _bcafb =57365;var _bcafd =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};


// NewString constructs a new string expression.
func NewString (v string )Expression {v =_ba .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_fbddbe :v };};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_dfbf :=args [0];if _dfbf .Type !=ResultTypeArray &&_dfbf .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_fbce :=_dfbf .ValueArray ;if len (_fbce )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};return MakeNumberResult (float64 (len (_fbce )));};var _cade =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};


// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );
};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_dgea :=args [0].ValueNumber ;_fce :=args [1].ValueNumber ;if _fce < _dgea {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");
};if _fce ==_dgea {return MakeNumberResult (0);};_cab :=_ba .ToLower (args [2].ValueString );if _cab =="\u0064"{return MakeNumberResult (_fce -_dgea );};_bg :=_gaa (_dgea );_gbf :=_gaa (_fce );_ddeg ,_dfd ,_dda :=_bg .Date ();_aegg ,_dbf ,_ccd :=_gbf .Date ();
_beb :=int (_dfd );_bga :=int (_dbf );var _adbe float64 ;switch _cab {case "\u0079":_adbe =float64 (_aegg -_ddeg );if _bga < _beb ||(_bga ==_beb &&_ccd < _dda ){_adbe --;};case "\u006d":_ece :=_aegg -_ddeg ;_dab :=_bga -_beb ;if _ccd < _dda {_dab --;};
if _dab < 0{_ece --;_dab +=12;};_adbe =float64 (_ece *12+_dab );case "\u006d\u0064":_gefd :=_bga ;if _ccd < _dda {_gefd --;};_adbe =float64 (int (_fce -_bag (_aegg ,_gefd ,_dda )));case "\u0079\u006d":_adbe =float64 (_bga -_beb );if _ccd < _dda {_adbe --;
};if _adbe < 0{_adbe +=12;};case "\u0079\u0064":_fdec :=_aegg ;if _bga < _beb ||(_bga ==_beb &&_ccd < _dda ){_fdec --;};_adbe =float64 (int (_fce -_bag (_fdec ,_beb ,_dda )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");
};return MakeNumberResult (_adbe );};

// Update returns the same object as updating sheet references does not affect Bool.
func (_bfd Bool )Update (q *_db .UpdateQuery )Expression {return _bfd };const _gbdfc =_fd .Millisecond *1000;

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_edf :data }};

// ResultType is the type of the result
//
//go:generate stringer -type=ResultType
type ResultType byte ;

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_ffecc ,_fgbec :=_gabf (args ,false );if _fgbec ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_ffecc /_fgbec );};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_egee ,_geacd int };

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _geea (args ,true )};

// Reference returns an invalid reference for EmptyExpr.
func (_eaf EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Function is a standard function whose result only depends on its arguments.
type Function func (_gfgfd []Result )Result ;

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dbgf :=args [0].AsNumber ();if _dbgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fbegb :=float64 (1);if _dbgf .ValueNumber < 0{_fbegb =-1;};if len (args )> 1{_dgcd :=args [1].AsNumber ();if _dgcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fbegb =_fg .Abs (_dgcd .ValueNumber );};if len (args )==1{return MakeNumberResult (_fg .Ceil (_dbgf .ValueNumber ));};_efc :=_dbgf .ValueNumber ;_efc ,_gdff :=_fg .Modf (_efc /_fbegb );if _gdff !=0{if _dbgf .ValueNumber > 0{_efc ++;};};return MakeNumberResult (_efc *_fbegb );
};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_gfd ,_dbdb :=_daac (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _dbdb .Type ==ResultTypeError {return _dbdb ;};_dfee :=_gfd ._daff ;_feaca :=_gfd ._efad ;_bgf :=_gfd ._eeb ;_bbde :=_gfd ._egca ;_fgab :=_gfd ._dddc ;
_fcga :=_gfd ._cdefd ;_gad :=_gfd ._cfgcf ;_gdda ,_bccgc :=_bca (_feaca ,_bgf ,_gad );if _bccgc .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");
};_eeac :=_gdda *_fcga *_dfee ;if _fgab ==0{return MakeNumberResult (_eeac );};_dgd :=_dfee *_fcga ;_bged :=_dfee -_bbde ;_eage :=int ((_bged -_eeac )/_dgd );if _fgab <=_eage {return MakeNumberResult (_dgd );}else if _fgab ==_eage +1{return MakeNumberResult (_bged -_dgd *float64 (_eage )-_eeac );
}else {return MakeNumberResult (0);};};

// Update updates references in the PrefixExpr after removing a row/column.
func (_ddege PrefixExpr )Update (q *_db .UpdateQuery )Expression {_cebdd :=_ddege ;_ffcec :=_ddege ._dbab .String ();if _ffcec ==q .SheetToUpdate {_gabca :=*q ;_gabca .UpdateCurrentSheet =true ;_cebdd ._gefeg =_ddege ._gefeg .Update (&_gabca );};return _cebdd ;
};func _ceee (_gecge []Result ,_bgfg bool )Result {_bgda :="\u004d\u0041\u0058";if _bgfg {_bgda ="\u004d\u0041\u0058\u0041";};if len (_gecge )==0{return MakeErrorResult (_bgda +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dgee :=-_fg .MaxFloat64 ;for _ ,_deac :=range _gecge {switch _deac .Type {case ResultTypeNumber :if (_bgfg ||!_deac .IsBoolean )&&_deac .ValueNumber > _dgee {_dgee =_deac .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_dccd :=_ceee (_deac .ListValues (),_bgfg );
if _dccd .ValueNumber > _dgee {_dgee =_dccd .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_gceec :=0.0;if _bgfg {_gceec =_deac .AsNumber ().ValueNumber ;};if _gceec > _dgee {_dgee =_gceec ;};default:_ff .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_bgda +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_deac .Type );
};};if _dgee ==-_fg .MaxFloat64 {_dgee =0;};return MakeNumberResult (_dgee );};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_cdacc :=len (args );if _cdacc !=6&&_cdacc !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bbbga ,_cdbc ,_baaf :=_daa (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _baaf .Type ==ResultTypeError {return _baaf ;};_aecc :=args [2];if _aecc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bbdd :=_aecc .ValueNumber ;if _bbdd < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_dbded :=args [3];if _dbded .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cabd :=_dbded .ValueNumber ;if _cabd <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_gbb :=args [4];if _gbb .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_gag :=_gbb .ValueNumber ;if _gag < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_deab :=args [5];
if _deab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bedce :=float64 (int (_deab .ValueNumber ));if !_gfb (_bedce ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_edbff :=0;if _cdacc ==7&&args [6].Type !=ResultTypeEmpty {_fbbe :=args [6];
if _fbbe .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_edbff =int (_fbbe .ValueNumber );
if !_eba (_edbff ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_faeg :=0.0;
_efgea :=0.0;_egad :=1.0;_baca ,_baaf :=_dbdg (_bbbga ,_cdbc ,_bbdd ,_efgea ,_gag ,_bedce ,_edbff );if _baaf .Type ==ResultTypeError {return _baaf ;};_cgeg ,_baaf :=_dbdg (_bbbga ,_cdbc ,_bbdd ,_egad ,_gag ,_bedce ,_edbff );if _baaf .Type ==ResultTypeError {return _baaf ;
};_dgg :=(_egad -_efgea )*0.5;for _fegd :=0;_fegd < 100&&_faeg !=_cabd ;_fegd ++{_faeg ,_baaf =_dbdg (_bbbga ,_cdbc ,_bbdd ,_dgg ,_gag ,_bedce ,_edbff );if _baaf .Type ==ResultTypeError {return _baaf ;};if _cabd ==_baca {return MakeNumberResult (_efgea );
}else if _cabd ==_cgeg {return MakeNumberResult (_egad );}else if _cabd ==_faeg {return MakeNumberResult (_dgg );}else if _cabd < _cgeg {_egad *=2.0;_cgeg ,_baaf =_dbdg (_bbbga ,_cdbc ,_bbdd ,_egad ,_gag ,_bedce ,_edbff );if _baaf .Type ==ResultTypeError {return _baaf ;
};_dgg =(_egad -_efgea )*0.5;}else {if _cabd < _faeg {_efgea =_dgg ;_baca =_faeg ;}else {_egad =_dgg ;_cgeg =_faeg ;};_dgg =_egad -(_egad -_efgea )*((_cabd -_cgeg )/(_baca -_cgeg ));};};return MakeNumberResult (_dgg );};func _acacf (_dfce []Result )(bool ,Result ){for _ ,_faede :=range _dfce {if _faede .Type ==ResultTypeError {return true ,_faede ;
};};return false ,MakeEmptyResult ();};

// String returns a string representation of a range with prefix.
func (_gdcg PrefixRangeExpr )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gdcg ._agbb .String (),_gdcg ._acfe .String (),_gdcg ._cbeb .String ());};func _gfee (_efg ,_dce int )int {switch _dce {case 1:if _age (_efg ){return 366;
}else {return 365;};case 3:return 365;default:return 360;};};

// String returns a string representation of a horizontal range.
func (_adcfg HorizontalRange )String ()string {return _adcfg .horizontalRangeReference ()};const _fdgf =_efa +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";var _cfde =[...]int {0};
func _cfc (_cfg BinOpType ,_cfa ,_ecd []Result )Result {_ce :=[]Result {};for _bb :=range _cfa {_cc :=_cfa [_bb ].AsNumber ();_bcf :=_ecd [_bb ].AsNumber ();if _cc .Type !=ResultTypeNumber ||_bcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _cfg {case BinOpTypePlus :_ce =append (_ce ,MakeNumberResult (_cc .ValueNumber +_bcf .ValueNumber ));case BinOpTypeMinus :_ce =append (_ce ,MakeNumberResult (_cc .ValueNumber -_bcf .ValueNumber ));case BinOpTypeMult :_ce =append (_ce ,MakeNumberResult (_cc .ValueNumber *_bcf .ValueNumber ));
case BinOpTypeDiv :if _bcf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ce =append (_ce ,MakeNumberResult (_cc .ValueNumber /_bcf .ValueNumber ));case BinOpTypeExp :_ce =append (_ce ,MakeNumberResult (_fg .Pow (_cc .ValueNumber ,_bcf .ValueNumber )));
case BinOpTypeLT :_ce =append (_ce ,MakeBoolResult (_cc .ValueNumber < _bcf .ValueNumber ));case BinOpTypeGT :_ce =append (_ce ,MakeBoolResult (_cc .ValueNumber > _bcf .ValueNumber ));case BinOpTypeEQ :_ce =append (_ce ,MakeBoolResult (_cc .ValueNumber ==_bcf .ValueNumber ));
case BinOpTypeLEQ :_ce =append (_ce ,MakeBoolResult (_cc .ValueNumber <=_bcf .ValueNumber ));case BinOpTypeGEQ :_ce =append (_ce ,MakeBoolResult (_cc .ValueNumber >=_bcf .ValueNumber ));case BinOpTypeNE :_ce =append (_ce ,MakeBoolResult (_cc .ValueNumber !=_bcf .ValueNumber ));
default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_cfg ));};};return MakeListResult (_ce );};func _cace (_ffcb []Result ,_efde bool ,_agged string )Result {var _faeeg ,_egbc string ;
if _efde {_faeeg ="\u0074\u0068\u0072e\u0065";_egbc ="\u006f\u0064\u0064";}else {_faeeg ="\u0074\u0077\u006f";_egbc ="\u0065\u0076\u0065\u006e";};_dbedf :=len (_ffcb );if (_efde &&_dbedf < 3)||(!_efde &&_dbedf < 2){return MakeErrorResult (_agged +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_faeeg +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};if (_dbedf /2*2==_dbedf )==_efde {return MakeErrorResult (_agged +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_egbc +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_bdcce :=-1;_dgad :=-1;
for _abdg :=0;_abdg < _dbedf ;_abdg +=2{_cgfc :=_ffcb [_abdg ];if _cgfc .Type !=ResultTypeArray &&_cgfc .Type !=ResultTypeList {return MakeErrorResult (_agged +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");
};_beag :=_ebadf (_cgfc );if _dgad ==-1{_dgad =len (_beag );_bdcce =len (_beag [0]);}else if len (_beag )!=_dgad ||len (_beag [0])!=_bdcce {return MakeErrorResult (_agged +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");
};if _efde &&_abdg ==0{_abdg --;};};return _cea ;};func _effe (_febbe ,_gafad ,_cebd ,_ecba float64 ,_ebfb int )float64 {var _afge float64 ;if _febbe ==0{_afge =(_cebd +_ecba )/_gafad ;}else {_fgbd :=_fg .Pow (1+_febbe ,_gafad );if _ebfb ==1{_afge =(_ecba *_febbe /(_fgbd -1)+_cebd *_febbe /(1-1/_fgbd ))/(1+_febbe );
}else {_afge =_ecba *_febbe /(_fgbd -1)+_cebd *_febbe /(1-1/_fgbd );};};return -_afge ;};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_babcf PrefixVerticalRange )Update (q *_db .UpdateQuery )Expression {if q .UpdateType ==_db .UpdateActionRemoveColumn {_ebaf :=_babcf ;_affebc :=_babcf ._bfdfd .String ();if _affebc ==q .SheetToUpdate {_gfccf :=q .ColumnIdx ;_ebaf ._cafg =_bda (_babcf ._cafg ,_gfccf );
_ebaf ._egeec =_bda (_babcf ._egeec ,_gfccf );};return _ebaf ;};return _babcf ;};

// String returns a string representation of SheetPrefixExpr.
func (_aagdb SheetPrefixExpr )String ()string {return _aagdb ._fcdcf };

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_cacg :=len (args );if _cacg < 2||_cacg > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dgac :=args [0];if _dgac .Type !=ResultTypeArray &&_dgac .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_begb :=args [1].AsNumber ();if _begb .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_gcgg :=int (_begb .ValueNumber )-1;_eggd :=-1;if _cacg ==3&&args [2].Type !=ResultTypeEmpty {_dgebb :=args [2].AsNumber ();if _dgebb .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_eggd =int (_dgebb .ValueNumber )-1;};if _gcgg ==-1&&_eggd ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};var _egade []Result ;if _dgac .Type ==ResultTypeArray {_cddc :=_dgac .ValueArray ;if _gcgg < -1||_gcgg >=len (_cddc ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _gcgg ==-1{if _eggd >=len (_cddc [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_cgdad :=[][]Result {};for _ ,_bgecb :=range _cddc {_accfc :=_bgecb [_eggd ];
if _accfc .Type ==ResultTypeEmpty {_accfc =MakeNumberResult (0);};_cgdad =append (_cgdad ,[]Result {_accfc });};return MakeArrayResult (_cgdad );};_egade =_cddc [_gcgg ];}else {_bcae :=_dgac .ValueList ;if _gcgg < -1||_gcgg >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _gcgg ==-1{if _eggd >=len (_bcae ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_egfb :=_bcae [_eggd ];if _egfb .Type ==ResultTypeEmpty {_egfb =MakeNumberResult (0);
};return _egfb ;};_egade =_bcae ;};if _eggd < -1||_eggd > len (_egade ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _eggd ==-1{_badc :=[]Result {};
for _ ,_efea :=range _egade {if _efea .Type ==ResultTypeEmpty {_badc =append (_badc ,MakeNumberResult (0));}else {_badc =append (_badc ,_efea );};};return MakeArrayResult ([][]Result {_badc });};_gedcc :=_egade [_eggd ];if _gedcc .Type ==ResultTypeEmpty {return MakeNumberResult (0);
};return _gedcc ;};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_babea SheetPrefixExpr )Update (q *_db .UpdateQuery )Expression {return _babea };const _eccf =57363;const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;
BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);const _ffag ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";
const _fggc =57358;

// String returns a string representation of a vertical range with prefix.
func (_agdad PrefixVerticalRange )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_agdad ._bfdfd .String (),_agdad ._cafg ,_agdad ._egeec );};func (_dbbf ReferenceType )String ()string {if _dbbf >=ReferenceType (len (_gdef )-1){return _a .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_dbbf );
};return _eabce [_gdef [_dbbf ]:_gdef [_dbbf +1]];};

// Value returns a string version of the result.
func (_cfbca Result )Value ()string {switch _cfbca .Type {case ResultTypeNumber :_afafc :=_ec .FormatFloat (_cfbca .ValueNumber ,'f',-1,64);if len (_afafc )> 12{_dddfb :=12;for _gbca :=_dddfb ;_gbca > 0&&_afafc [_gbca ]=='0';_gbca --{_dddfb --;};_afafc =_afafc [0:_dddfb +1];
};return _afafc ;case ResultTypeError :return _cfbca .ValueString ;case ResultTypeString :return _cfbca .ValueString ;case ResultTypeList :if len (_cfbca .ValueList )==0{return "";};return _cfbca .ValueList [0].Value ();case ResultTypeArray :if len (_cfbca .ValueArray )==0||len (_cfbca .ValueArray [0])==0{return "";
};return _cfbca .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};func _bda (_bbg string ,_bed uint32 )string {_cdf :=_dc .ColumnToIndex (_bbg );
if _cdf ==_bed {return "\u0023\u0052\u0045F\u0021";}else if _cdf > _bed {return _dc .IndexToColumn (_cdf -1);}else {return _bbg ;};};

// Reference returns a string reference value to a horizontal range with prefix.
func (_efgec PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_gcgcb :=_efgec ._ceddcc .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_efgec .horizontalRangeReference (_gcgcb .Value )};};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_fgcbb .Lock ();defer _fgcbb .Unlock ();if _ ,_gebg :=_gegd [name ];_gebg {_ff .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_gegd [name ]=fn ;};const _cbba =_fd .Second *1;

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_efagd :=args [0].AsNumber ();
if _efagd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_aefe :=args [1].AsNumber ();if _aefe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dgdfa :=int (_aefe .ValueNumber );if _dgdfa < 0||_dgdfa > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");
};_ceca :=0;if len (args )> 2{_aeaa :=args [2].AsNumber ();if _aeaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ceca =int (_aeaa .ValueNumber );};_degd :=_ec .FormatInt (int64 (_efagd .ValueNumber ),_dgdfa );if len (_degd )< _ceca {_degd =_ba .Repeat ("\u0030",_ceca -len (_degd ))+_degd ;};return MakeStringResult (_degd );};type Reference struct{Type ReferenceType ;
Value string ;};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_dgc ,_ggca ,_bcdf :=_gecg (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _bcdf .Type ==ResultTypeError {return _bcdf ;};if _ggca ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _dgc ==0{return MakeNumberResult (0);};_cegc :=_dgc < 0;if _cegc {_dgc =-_dgc ;};_bcgdc :=float64 (int (_dgc ));_dcgd :=args [0].Value ();_bfab :=_ba .Split (_dcgd ,"\u002e");_bdcg :=0.0;if len (_bfab )> 1{var _becd error ;_ecce :=_bfab [1];_bdcg ,_becd =_ec .ParseFloat (_ecce ,64);
if _becd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");
};_eada :=float64 (len (_ecce ));_bdcg /=_fg .Pow (10,_eada );};_gfa :=_bdcg *_ggca /_fg .Pow (10,float64 (int (_fg .Log10 (_ggca )))+1)+_bcgdc ;if _cegc {_gfa =-_gfa ;};return MakeNumberResult (_gfa );};var _afc =[]int {31,28,31,30,31,30,31,31,30,31,30,31};


// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_bde ,_eagec :=_bfdd (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _eagec .Type ==ResultTypeError {return _eagec ;};_fcac :=_bde ._fdeb ;_bfgd :=_bde ._cgdd ;_bbgd :=_bde ._dcbc ;_abef :=_bde ._ffad ;_cece :=_bde ._bdgd ;
_adge :=_bde ._cfbb ;_fcec :=_ccda (_fcac ,_bfgd ,_bbgd ,_abef ,_cece ,_adge );if _fcec .Type ==ResultTypeError {return _fcec ;};_cgbe :=_fcec .ValueNumber /(1.0+_abef /_cece );return MakeNumberResult (_cgbe );};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_cdegg .Float64 ());
};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_gcdd ,_cedd :=_fdca (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _cedd .Type ==ResultTypeError {return _cedd ;};_fcdf :=_gaa (_gcdd ._cbec );_bfg :=_gaa (_gcdd ._bab );_eegd :=_gcdd ._edg ;_ffagg :=_eccg (_fcdf ,_bfg ,_eegd );
_defd ,_bebb ,_eege :=_ffagg .Date ();return MakeNumberResult (_bag (_defd ,int (_bebb ),_eege ));};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_fbdc :=args [0].AsNumber ();
_ecge :=args [1].AsNumber ();if _fbdc .Type ==ResultTypeNumber &&_ecge .Type ==ResultTypeNumber {_bfaec :=_fg .Atan2 (_ecge .ValueNumber ,_fbdc .ValueNumber );if _bfaec !=_bfaec {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");
};return MakeNumberResult (_bfaec );};for _ ,_ccab :=range []ResultType {_fbdc .Type ,_ecge .Type }{switch _ccab {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
case ResultTypeError :return _fbdc ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ccab ));
};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_fbdd :=args [0];if _fbdd .Type ==ResultTypeList {_afbe :=[][]Result {};for _ ,_cdea :=range _fbdd .ValueList {_afbe =append (_afbe ,[]Result {_cdea });};return MakeArrayResult (_afbe );};_gabd :=make ([][]Result ,len (_fbdd .ValueArray [0]));for _ ,_bbae :=range _fbdd .ValueArray {for _gfgb ,_bbff :=range _bbae {_gabd [_gfgb ]=append (_gabd [_gfgb ],_bbff );
};};return MakeArrayResult (_gabd );};var _ebgc =[...]int {-1,1,1,-1,-2,0};func _adgc (_ffcg float64 ,_cgge *criteriaRegex )bool {_agcd ,_fgaa :=_ec .ParseFloat (_cgge ._fceff ,64);if _fgaa !=nil {return false ;};switch _cgge ._gffbb {case _bbbgac :return _ffcg ==_agcd ;
case _ffee :return _ffcg <=_agcd ;case _cbgd :return _ffcg >=_agcd ;case _eggff :return _ffcg < _agcd ;case _gdagb :return _ffcg > _agcd ;};return false ;};type Expression interface{Eval (_bfdc Context ,_cdfe Evaluator )Result ;Reference (_bcbb Context ,_bcc Evaluator )Reference ;
String ()string ;Update (_dbd *_db .UpdateQuery )Expression ;};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_agac ,_fdcb ,_edbc :=_daa (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _edbc .Type ==ResultTypeError {return _edbc ;};_beee ,_edbc :=_dfcc (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _edbc .Type ==ResultTypeError {return _edbc ;};if _beee >=_agac {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_edcb :=args [3].ValueNumber ;if _edcb < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gecd :=args [4].ValueNumber ;if _gecd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_ffgg :=args [5].ValueNumber ;if _ffgg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_adggf :=float64 (int (args [6].ValueNumber ));if !_gfb (_adggf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_edgg :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_edgg =int (args [7].ValueNumber );if !_eba (_edgg ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");
};};_deed ,_edbc :=_bca (_beee ,_fdcb ,_edgg );if _edbc .Type ==ResultTypeError {return _edbc ;};_deed *=_adggf ;_dceg ,_edbc :=_bca (_agac ,_fdcb ,_edgg );if _edbc .Type ==ResultTypeError {return _edbc ;};_dceg *=_adggf ;_fgcb ,_edbc :=_bca (_beee ,_agac ,_edgg );
if _edbc .Type ==ResultTypeError {return _edbc ;};_fgcb *=_adggf ;_daeb :=_ffgg +_deed *100*_edcb /_adggf ;_daeb /=_gecd +_fgcb *100*_edcb /_adggf ;_daeb --;_daeb *=_adggf /_dceg ;return MakeNumberResult (_daeb );};

// GetEpoch returns a null time object for the invalid reference context.
func (_egeaf *ivr )GetEpoch ()_fd .Time {return _fd .Time {}};func _fcfc (_cfbe []Result )(float64 ,float64 ,Result ){_caad :=0.0;_cbfda :=1.0;for _ ,_fadf :=range _cfbe {switch _fadf .Type {case ResultTypeNumber :_caad +=_fadf .ValueNumber ;_cbfda *=_cgea (_fadf .ValueNumber );
case ResultTypeList ,ResultTypeArray :_bgaa ,_cdfd ,_adbgd :=_fcfc (_fadf .ListValues ());_caad +=_bgaa ;_cbfda *=_cgea (_cdfd );if _adbgd .Type ==ResultTypeError {return 0,0,_adbgd ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
case ResultTypeError :return 0,0,_fadf ;};};return _caad ,_cbfda ,_cea ;};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_ga ,_faf :=_ec .ParseBool (v );if _faf !=nil {_ff .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_faf );
};return Bool {_bae :_ga };};const _cdfc ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func _geaab (_geddd Result )Result {if _geddd .Type ==ResultTypeEmpty {return _geddd ;
};_fafgg :=_geddd .AsString ();if _fafgg .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _geddd .IsBoolean {if _fafgg .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _fafgg .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};}else {return MakeStringResult (_ba .ToLower (_fafgg .ValueString ));};};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _cdda (args ,_fbed )};func _bag (_gea ,_ggb ,_dbdd int )float64 {return float64 (_ddd (_gea ,_fd .Month (_ggb ),_dbdd )/86400)+_fgb ;};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_adb CellRef )Update (q *_db .UpdateQuery )Expression {if q .UpdateCurrentSheet {_adb ._adaa =_ceg (_adb ._adaa ,q );};return _adb ;};func _geea (_bdbc []Result ,_eeba bool )Result {_egac :="\u004d\u0049\u004e";if _eeba {_egac ="\u004d\u0049\u004e\u0041";
};if len (_bdbc )==0{return MakeErrorResult (_egac +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdbee :=_fg .MaxFloat64 ;
for _ ,_agcfd :=range _bdbc {switch _agcfd .Type {case ResultTypeNumber :if (_eeba ||!_agcfd .IsBoolean )&&_agcfd .ValueNumber < _fdbee {_fdbee =_agcfd .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_dgbb :=_geea (_agcfd .ListValues (),_eeba );if _dgbb .ValueNumber < _fdbee {_fdbee =_dgbb .ValueNumber ;
};case ResultTypeEmpty :case ResultTypeString :_ffdcc :=0.0;if _eeba {_ffdcc =_agcfd .AsNumber ().ValueNumber ;};if _ffdcc < _fdbee {_fdbee =_ffdcc ;};default:_ff .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_egac +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_agcfd .Type );
};};if _fdbee ==_fg .MaxFloat64 {_fdbee =0;};return MakeNumberResult (_fdbee );};

// Negate is a negate expression like -A1.
type Negate struct{_adcb Expression };func _gbfb (_dfdg int )bool {return _dfdg ==0||_dfdg ==4};func _daa (_fbf ,_dadf Result ,_fdc string )(float64 ,float64 ,Result ){_bafd ,_bfae :=_dfcc (_fbf ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_fdc );
if _bfae .Type ==ResultTypeError {return 0,0,_bfae ;};_gafd ,_bfae :=_dfcc (_dadf ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_fdc );if _bfae .Type ==ResultTypeError {return 0,0,_bfae ;};if _bafd >=_gafd {return 0,0,MakeErrorResultType (ErrorTypeNum ,_fdc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};return _bafd ,_gafd ,_cea ;};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_bcb EmptyExpr )Update (q *_db .UpdateQuery )Expression {return _bcb };func _de (_aa Result )bool {if _aa .Type ==ResultTypeString {return _aa .ValueString =="";};return _aa .ValueNumber ==0;};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_bfca :=len (args );if _bfca !=4&&_bfca !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bfcb ,_acgf ,_dace :=_daa (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _dace .Type ==ResultTypeError {return _dace ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_febba :=args [2].ValueNumber ;if _febba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_efaf :=args [3].ValueNumber ;if _efaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};_agad :=0;if _bfca ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_agad =int (args [4].ValueNumber );if !_eba (_agad ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");
};};_fdfac ,_dace :=_bca (_bfcb ,_acgf ,_agad );if _dace .Type ==ResultTypeError {return _dace ;};return MakeNumberResult ((_efaf -_febba )/_febba /_fdfac );};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_fgee :=args [0].AsNumber ();if _fgee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _fgee .ValueNumber < 0{return MakeNumberResult (-1);}else if _fgee .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_cdac ,_bedc :=_fdca (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _bedc .Type ==ResultTypeError {return _bedc ;};return MakeNumberResult (_agdf (_cdac ._cbec ,_cdac ._bab ,_cdac ._edg ,_cdac ._edff ));
};func _dgce (_bgcf Context ,_cbbf ,_gfeb int )(string ,string ){_accd :="\u0041"+_ec .Itoa (_cbbf );_eacc :=_bgcf .LastColumn (_cbbf ,_gfeb );_egfgc :=_eacc +_ec .Itoa (_gfeb );return _accd ,_egfgc ;};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_eegf ,_ddeb :=_abe (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _ddeb .Type ==ResultTypeError {return _ddeb ;};_acac :=_eegf ._fbb ;_cdb :=_eegf ._bgab ;_ddcc :=_eegf ._fcde ;_dacg :=_eegf ._cef ;
_dga :=_eegf ._gddg ;_cbcfa :=_eegf ._bdd ;_edba :=_effe (_acac ,_cdb ,_ddcc ,0,_cbcfa );_adfcf :=0.0;if _dacg ==1{if _cbcfa ==0{_adfcf =_edba +_ddcc *_acac ;}else {_adfcf =_edba ;};_dacg ++;};for _geaa :=_dacg ;_geaa <=_dga ;_geaa ++{if _cbcfa ==1{_adfcf +=_edba -(_fdbf (_acac ,_geaa -2,_edba ,_ddcc ,1)-_edba )*_acac ;
}else {_adfcf +=_edba -_fdbf (_acac ,_geaa -1,_edba ,_ddcc ,0)*_acac ;};};return MakeNumberResult (_adfcf );};

// Eval evaluates and returns a string.
func (_ddddd String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_ddddd ._fbddbe )};

// Eval evaluates the binary expression using the context given.
func (_gef BinaryExpr )String ()string {_ffa :="";switch _gef ._gb {case BinOpTypePlus :_ffa ="\u002b";case BinOpTypeMinus :_ffa ="\u002d";case BinOpTypeMult :_ffa ="\u002a";case BinOpTypeDiv :_ffa ="\u002f";case BinOpTypeExp :_ffa ="\u005e";case BinOpTypeLT :_ffa ="\u003c";
case BinOpTypeGT :_ffa ="\u003e";case BinOpTypeEQ :_ffa ="\u003d";case BinOpTypeLEQ :_ffa ="\u003c\u003d";case BinOpTypeGEQ :_ffa ="\u003e\u003d";case BinOpTypeNE :_ffa ="\u003c\u003e";case BinOpTypeConcat :_ffa ="\u0026";};return _gef ._ada .String ()+_ffa +_gef ._df .String ();
};const _fdea ="\u0028\u0020\u0028"+_dde +"\u007c"+_cdfc +"\u007c"+_caf +"\u007c"+_fdf +"\u0029\u0029\u003f\u0024";

// String returns a string representation of a vertical range.
func (_bafee VerticalRange )String ()string {return _bafee .verticalRangeReference ()};var _ffga =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};

// String is a string expression.
type String struct{_fbddbe string };

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_ggcbb :=args [0].AsNumber ();_faeec :=args [1].AsNumber ();if _ggcbb .Type !=ResultTypeNumber ||_faeec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};if _faeec .ValueNumber < _ggcbb .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");
};_fbbeb :=int64 (_ggcbb .ValueNumber );_gbfcb :=int64 (_faeec .ValueNumber );return MakeNumberResult (float64 (_cdegg .Int63n (_gbfcb -_fbbeb +1)+_fbbeb ));};

// Reference returns a string reference value to a cell.
func (_ccb CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_ccb ._adaa };};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _cdda (args ,_gca )};

// Reference returns an invalid reference for Number.
func (_abad Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// String returns a string representation of CellRef.
func (_ca CellRef )String ()string {return _ca ._adaa };

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_aegbf Result )AsNumber ()Result {if _aegbf .Type ==ResultTypeString {_dgbad ,_dage :=_ec .ParseFloat (_aegbf .ValueString ,64);if _dage ==nil {return MakeNumberResult (_dgbad );};};if _aegbf .Type ==ResultTypeEmpty {return MakeNumberResult (0);};
return _aegbf ;};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_eafga ,_fbab :=_gabf (args ,true );if _fbab ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_eafga /_fbab );};

// Number is a nubmer expression.
type Number struct{_bdbgc float64 };const _gcfa =57351;

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (ev .LastEvalIsRef ());};func _dbce (_bcbc ,_egfg []float64 ,_cbcfb float64 )float64 {_bfbc :=_cbcfb +1;_ddeag :=_bcbc [0];_dbb :=len (_bcbc );_bfdcb :=_egfg [0];for _fcc :=1;_fcc < _dbb ;_fcc ++{_ddeag +=_bcbc [_fcc ]/_fg .Pow (_bfbc ,(_egfg [_fcc ]-_bfdcb )/365);
};return _ddeag ;};func _dfdf (_dfdfb ,_cfbc int )string {const TOKSTART =4;if !_cfgaa {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_fbaf :=range _dged {if _fbaf ._bggd ==_dfdfb &&_fbaf ._feae ==_cfbc {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_fbaf ._ddcea ;
};};_cbgb :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_abbaa (_cfbc );_fgfg :=make ([]int ,0,4);_ebcb :=_cade [_dfdfb ];for _efbe :=TOKSTART ;_efbe -1< len (_bcafd );_efbe ++{if _fbfd :=_ebcb +_efbe ;
_fbfd >=0&&_fbfd < _bdecd &&_deefb [_gfagb [_fbfd ]]==_efbe {if len (_fgfg )==cap (_fgfg ){return _cbgb ;};_fgfg =append (_fgfg ,_efbe );};};if _adfa [_dfdfb ]==-2{_ccef :=0;for _ebgc [_ccef ]!=-1||_ebgc [_ccef +1]!=_dfdfb {_ccef +=2;};for _ccef +=2;_ebgc [_ccef ]>=0;
_ccef +=2{_gfed :=_ebgc [_ccef ];if _gfed < TOKSTART ||_ebgc [_ccef +1]==0{continue ;};if len (_fgfg )==cap (_fgfg ){return _cbgb ;};_fgfg =append (_fgfg ,_gfed );};if _ebgc [_ccef +1]!=0{return _cbgb ;};};for _bebbe ,_eegb :=range _fgfg {if _bebbe ==0{_cbgb +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";
}else {_cbgb +="\u0020\u006f\u0072\u0020";};_cbgb +=_abbaa (_eegb );};return _cbgb ;};var _cea Result =MakeEmptyResult ();func _edeg (_dcb ,_edef float64 ,_aca ,_gacb int )(float64 ,Result ){_ffc ,_eea :=_gaa (_dcb ),_gaa (_edef );if _eea .After (_ffc ){_feg :=_ebe (_ffc ,_eea ,_aca ,_gacb );
_adfc :=(_eea .Year ()-_feg .Year ())*12+int (_eea .Month ())-int (_feg .Month ());return float64 (_adfc *_aca )/12.0,_cea ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");
};func (_aeacf *yyParserImpl )Parse (yylex yyLexer )int {_geggg :=_fd .Now ();var _beae int ;var _gaeeb yySymType ;var _dfebc []yySymType ;_ =_dfebc ;_ggfgf :=_aeacf ._ddgc [:];Nerrs :=0;Errflag :=0;_bgaad :=0;_aeacf ._deec =-1;_ageed :=-1;defer func (){_bgaad =-1;
_aeacf ._deec =-1;_ageed =-1}();_gaad :=-1;goto _adfag ;_afcc :return 0;_deae :return 1;_adfag :if _cccaa (_geggg ){_ff .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _deae ;};if _bedg >=4{_a .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_abbaa (_ageed ),_bgcb (_bgaad ));
};_gaad ++;if _gaad >=len (_ggfgf ){_fgced :=make ([]yySymType ,len (_ggfgf )*2);copy (_fgced ,_ggfgf );_ggfgf =_fgced ;};_ggfgf [_gaad ]=_gaeeb ;_ggfgf [_gaad ]._eecgb =_bgaad ;_addfd :if _cccaa (_geggg ){_ff .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");
goto _deae ;};_beae =_cade [_bgaad ];if _beae <=_bfef {goto _aaef ;};if _aeacf ._deec < 0{_aeacf ._deec ,_ageed =_cabdb (yylex ,&_aeacf ._ggab );};_beae +=_ageed ;if _beae < 0||_beae >=_bdecd {goto _aaef ;};_beae =_gfagb [_beae ];if _deefb [_beae ]==_ageed {_aeacf ._deec =-1;
_ageed =-1;_gaeeb =_aeacf ._ggab ;_bgaad =_beae ;if Errflag > 0{Errflag --;};goto _adfag ;};_aaef :if _cccaa (_geggg ){_ff .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _deae ;};_beae =_adfa [_bgaad ];
if _beae ==-2{if _aeacf ._deec < 0{_aeacf ._deec ,_ageed =_cabdb (yylex ,&_aeacf ._ggab );};_gfagf :=0;for {if _ebgc [_gfagf +0]==-1&&_ebgc [_gfagf +1]==_bgaad {break ;};_gfagf +=2;};for _gfagf +=2;;_gfagf +=2{_beae =_ebgc [_gfagf +0];if _beae < 0||_beae ==_ageed {break ;
};};_beae =_ebgc [_gfagf +1];if _beae < 0{goto _afcc ;};};if _beae ==0{switch Errflag {case 0:yylex .Error (_dfdf (_bgaad ,_ageed ));Nerrs ++;if _bedg >=1{_a .Printf ("\u0025\u0073",_bgcb (_bgaad ));_a .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_abbaa (_ageed ));
};fallthrough;case 1,2:Errflag =3;for _gaad >=0{_beae =_cade [_ggfgf [_gaad ]._eecgb ]+_edddc ;if _beae >=0&&_beae < _bdecd {_bgaad =_gfagb [_beae ];if _deefb [_bgaad ]==_edddc {goto _adfag ;};};if _bedg >=2{_a .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_ggfgf [_gaad ]._eecgb );
};_gaad --;};goto _deae ;case 3:if _bedg >=2{_a .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_abbaa (_ageed ));};if _ageed ==_daaea {goto _deae ;};_aeacf ._deec =-1;
_ageed =-1;goto _addfd ;};};if _bedg >=2{_a .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_beae ,_bgcb (_bgaad ));};_gcea :=_beae ;_aaab :=_gaad ;_ =_aaab ;_gaad -=_ebdag [_beae ];if _gaad +1>=len (_ggfgf ){_deba :=make ([]yySymType ,len (_ggfgf )*2);
copy (_deba ,_ggfgf );_ggfgf =_deba ;};_gaeeb =_ggfgf [_gaad +1];_beae =_ffga [_beae ];_acgga :=_gcda [_beae ];_bbgc :=_acgga +_ggfgf [_gaad ]._eecgb +1;if _bbgc >=_bdecd {_bgaad =_gfagb [_acgga ];}else {_bgaad =_gfagb [_bbgc ];if _deefb [_bgaad ]!=-_beae {_bgaad =_gfagb [_acgga ];
};};switch _gcea {case 1:_dfebc =_ggfgf [_aaab -1:_aaab +1];{yylex .(*plex )._acfa =_gaeeb ._gagad ;};case 3:_dfebc =_ggfgf [_aaab -2:_aaab +1];{_gaeeb ._gagad =_dfebc [2]._gagad ;};case 4:_dfebc =_ggfgf [_aaab -4:_aaab +1];{};case 5:_dfebc =_ggfgf [_aaab -1:_aaab +1];
{_gaeeb ._gagad =NewBool (_dfebc [1]._fbegbe ._aggedb );};case 6:_dfebc =_ggfgf [_aaab -1:_aaab +1];{_gaeeb ._gagad =NewNumber (_dfebc [1]._fbegbe ._aggedb );};case 7:_dfebc =_ggfgf [_aaab -1:_aaab +1];{_gaeeb ._gagad =NewString (_dfebc [1]._fbegbe ._aggedb );
};case 8:_dfebc =_ggfgf [_aaab -1:_aaab +1];{_gaeeb ._gagad =NewError (_dfebc [1]._fbegbe ._aggedb );};case 9:_dfebc =_ggfgf [_aaab -2:_aaab +1];{_gaeeb ._gagad =_dfebc [2]._gagad ;};case 10:_dfebc =_ggfgf [_aaab -2:_aaab +1];{_gaeeb ._gagad =NewNegate (_dfebc [2]._gagad );
};case 15:_dfebc =_ggfgf [_aaab -3:_aaab +1];{_gaeeb ._gagad =_dfebc [2]._gagad ;};case 17:_dfebc =_ggfgf [_aaab -3:_aaab +1];{_gaeeb ._gagad =NewConstArrayExpr (_dfebc [2]._edfeg );};case 18:_dfebc =_ggfgf [_aaab -1:_aaab +1];{_gaeeb ._edfeg =append (_gaeeb ._edfeg ,_dfebc [1]._caae );
};case 19:_dfebc =_ggfgf [_aaab -3:_aaab +1];{_gaeeb ._edfeg =append (_dfebc [1]._edfeg ,_dfebc [3]._caae );};case 20:_dfebc =_ggfgf [_aaab -1:_aaab +1];{_gaeeb ._caae =append (_gaeeb ._caae ,_dfebc [1]._gagad );};case 21:_dfebc =_ggfgf [_aaab -3:_aaab +1];
{_gaeeb ._caae =append (_dfebc [1]._caae ,_dfebc [3]._gagad );};case 23:_dfebc =_ggfgf [_aaab -2:_aaab +1];{_gaeeb ._gagad =NewPrefixExpr (_dfebc [1]._gagad ,_dfebc [2]._gagad );};case 25:_dfebc =_ggfgf [_aaab -1:_aaab +1];{_gaeeb ._gagad =NewSheetPrefixExpr (_dfebc [1]._fbegbe ._aggedb );
};case 26:_dfebc =_ggfgf [_aaab -1:_aaab +1];{_gaeeb ._gagad =NewCellRef (_dfebc [1]._fbegbe ._aggedb );};case 27:_dfebc =_ggfgf [_aaab -3:_aaab +1];{_gaeeb ._gagad =NewRange (_dfebc [1]._gagad ,_dfebc [3]._gagad );};case 28:_dfebc =_ggfgf [_aaab -4:_aaab +1];
{_gaeeb ._gagad =NewPrefixRangeExpr (_dfebc [1]._gagad ,_dfebc [2]._gagad ,_dfebc [4]._gagad );};case 29:_dfebc =_ggfgf [_aaab -1:_aaab +1];{_gaeeb ._gagad =NewNamedRangeRef (_dfebc [1]._fbegbe ._aggedb );};case 30:_dfebc =_ggfgf [_aaab -1:_aaab +1];{_gaeeb ._gagad =NewHorizontalRange (_dfebc [1]._fbegbe ._aggedb );
};case 31:_dfebc =_ggfgf [_aaab -1:_aaab +1];{_gaeeb ._gagad =NewVerticalRange (_dfebc [1]._fbegbe ._aggedb );};case 32:_dfebc =_ggfgf [_aaab -2:_aaab +1];{_gaeeb ._gagad =NewPrefixHorizontalRange (_dfebc [1]._gagad ,_dfebc [2]._fbegbe ._aggedb );};case 33:_dfebc =_ggfgf [_aaab -2:_aaab +1];
{_gaeeb ._gagad =NewPrefixVerticalRange (_dfebc [1]._gagad ,_dfebc [2]._fbegbe ._aggedb );};case 34:_dfebc =_ggfgf [_aaab -3:_aaab +1];{_gaeeb ._gagad =NewBinaryExpr (_dfebc [1]._gagad ,BinOpTypePlus ,_dfebc [3]._gagad );};case 35:_dfebc =_ggfgf [_aaab -3:_aaab +1];
{_gaeeb ._gagad =NewBinaryExpr (_dfebc [1]._gagad ,BinOpTypeMinus ,_dfebc [3]._gagad );};case 36:_dfebc =_ggfgf [_aaab -3:_aaab +1];{_gaeeb ._gagad =NewBinaryExpr (_dfebc [1]._gagad ,BinOpTypeMult ,_dfebc [3]._gagad );};case 37:_dfebc =_ggfgf [_aaab -3:_aaab +1];
{_gaeeb ._gagad =NewBinaryExpr (_dfebc [1]._gagad ,BinOpTypeDiv ,_dfebc [3]._gagad );};case 38:_dfebc =_ggfgf [_aaab -3:_aaab +1];{_gaeeb ._gagad =NewBinaryExpr (_dfebc [1]._gagad ,BinOpTypeExp ,_dfebc [3]._gagad );};case 39:_dfebc =_ggfgf [_aaab -3:_aaab +1];
{_gaeeb ._gagad =NewBinaryExpr (_dfebc [1]._gagad ,BinOpTypeLT ,_dfebc [3]._gagad );};case 40:_dfebc =_ggfgf [_aaab -3:_aaab +1];{_gaeeb ._gagad =NewBinaryExpr (_dfebc [1]._gagad ,BinOpTypeGT ,_dfebc [3]._gagad );};case 41:_dfebc =_ggfgf [_aaab -3:_aaab +1];
{_gaeeb ._gagad =NewBinaryExpr (_dfebc [1]._gagad ,BinOpTypeLEQ ,_dfebc [3]._gagad );};case 42:_dfebc =_ggfgf [_aaab -3:_aaab +1];{_gaeeb ._gagad =NewBinaryExpr (_dfebc [1]._gagad ,BinOpTypeGEQ ,_dfebc [3]._gagad );};case 43:_dfebc =_ggfgf [_aaab -3:_aaab +1];
{_gaeeb ._gagad =NewBinaryExpr (_dfebc [1]._gagad ,BinOpTypeEQ ,_dfebc [3]._gagad );};case 44:_dfebc =_ggfgf [_aaab -3:_aaab +1];{_gaeeb ._gagad =NewBinaryExpr (_dfebc [1]._gagad ,BinOpTypeNE ,_dfebc [3]._gagad );};case 45:_dfebc =_ggfgf [_aaab -3:_aaab +1];
{_gaeeb ._gagad =NewBinaryExpr (_dfebc [1]._gagad ,BinOpTypeConcat ,_dfebc [3]._gagad );};case 47:_dfebc =_ggfgf [_aaab -2:_aaab +1];{_gaeeb ._gagad =NewFunction (_dfebc [1]._fbegbe ._aggedb ,nil );};case 48:_dfebc =_ggfgf [_aaab -3:_aaab +1];{_gaeeb ._gagad =NewFunction (_dfebc [1]._fbegbe ._aggedb ,_dfebc [2]._caae );
};case 49:_dfebc =_ggfgf [_aaab -1:_aaab +1];{_gaeeb ._caae =append (_gaeeb ._caae ,_dfebc [1]._gagad );};case 50:_dfebc =_ggfgf [_aaab -3:_aaab +1];{_gaeeb ._caae =append (_dfebc [1]._caae ,_dfebc [3]._gagad );};case 53:_dfebc =_ggfgf [_aaab -0:_aaab +1];
{_gaeeb ._gagad =NewEmptyExpr ();};};goto _adfag ;};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_efca :=args [0].Type ;for _ ,_baedc :=range args {if _baedc .Type !=_efca {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");
};};switch _efca {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_aafa :=len (args [0].ListValues ());_ggbb :=make ([]float64 ,_aafa );for _edae :=range _ggbb {_ggbb [_edae ]=1.0;};for _ ,_ffagcd :=range args {if len (_ffagcd .ListValues ())!=_aafa {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");
};for _eaggg ,_dcbd :=range _ffagcd .ListValues (){_dcbd =_dcbd .AsNumber ();if _dcbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");
};_ggbb [_eaggg ]=_ggbb [_eaggg ]*_dcbd .ValueNumber ;};};_dbgdd :=0.0;for _ ,_fcbbg :=range _ggbb {_dbgdd +=_fcbbg ;};return MakeNumberResult (_dbgdd );};return MakeNumberResult (1.0);};func _ebe (_cfgg ,_dcd _fd .Time ,_fecb ,_eafgg int )_fd .Time {_debd :=_dcd ;
_fgbb :=_cfgg .Year ()-_dcd .Year ();_debd =_debd .AddDate (_fgbb ,0,0);if _cfgg .After (_debd ){_debd =_debd .AddDate (1,0,0);};_aed :=-12/_fecb ;for _debd .After (_cfgg ){_debd =_debd .AddDate (0,_aed ,0);};return _debd ;};func (_bba *defEval )checkLastEvalIsRef (_agb Context ,_bdb Expression ){switch _bdb .(type ){case FunctionCall :switch _bdb .(FunctionCall )._eeea {case "\u0049\u0053\u0052E\u0046":for _ ,_ega :=range _bdb .(FunctionCall )._ffagd {switch _ega .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_gde :=_ega .Eval (_agb ,_bba );
_bba ._ace =!(_gde .Type ==ResultTypeError &&_gde .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_bba ._ace =false ;};};};};};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_edeb PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_ccde :=_edeb ._bfdfd .Reference (ctx ,ev );switch _ccde .Type {case ReferenceTypeSheet :if _acbgb (_ccde ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ccde .Value ));
};_ccfc :=_edeb .verticalRangeReference (_ccde .Value );if _bgce ,_facaa :=ev .GetFromCache (_ccfc );_facaa {return _bgce ;};_eeaf :=ctx .Sheet (_ccde .Value );_dbegb ,_ebfed :=_dfded (_eeaf ,_edeb ._cafg ,_edeb ._egeec );_fgaeg :=_aaaab (_eeaf ,ev ,_dbegb ,_ebfed );
ev .SetCache (_ccfc ,_fgaeg );return _fgaeg ;default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ccde .Type ));
};};const _ccee int =30;func _ebbd (_dfggg Result )[]Result {_ddec :=_dfggg .ValueList ;if _dfggg .Type ==ResultTypeArray {_ddec =nil ;for _ ,_eeaba :=range _dfggg .ValueArray {if len (_eeaba )> 0{_ddec =append (_ddec ,_eeaba [0]);}else {_ddec =append (_ddec ,_cea );
};};};return _ddec ;};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cbgfb :=args [0].AsNumber ();if _cbgfb .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bcfa ,_cabb :=_fg .Modf (_cbgfb .ValueNumber );if _cabb < 0{_bcfa --;};return MakeNumberResult (_bcfa );};const _gdb ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";
func _aaag (_fdece Result ,_efff *criteriaParsed )bool {if _fdece .Type ==ResultTypeEmpty {return false ;};if _efff ._cfdff {return _fdece .ValueNumber ==_efff ._dgeafa ;}else {_fdeg :=_ba .ToLower (_fdece .ValueString );return _efff ._bgbc ==_fdeg ||_ade .Match (_efff ._bgbc ,_fdeg );
};};type cmpResult int8 ;

// GetFormat returns an empty string for the invalid reference context.
func (_gfccb *ivr )GetFormat (cellRef string )string {return ""};

// Update updates references in the Range after removing a row/column.
func (_daaac Range )Update (q *_db .UpdateQuery )Expression {_dgag :=_daaac ;if q .UpdateCurrentSheet {_dgag ._aedga =_daaac ._aedga .Update (q );_dgag ._dcdaa =_daaac ._dcdaa .Update (q );};return _dgag ;};type defEval struct{evCache ;_ace bool ;};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_babc :=len (args );if _babc !=4&&_babc !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dfgg ,_gdcab ,_ebga :=_daa (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _ebga .Type ==ResultTypeError {return _ebga ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aeff :=args [2].ValueNumber ;if _aeff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_ccec :=args [3].ValueNumber ;if _ccec <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_aefc :=0;if _babc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aefc =int (args [4].ValueNumber );if !_eba (_aefc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");
};};_bafg ,_ebga :=_bca (_dfgg ,_gdcab ,_aefc );if _ebga .Type ==ResultTypeError {return _ebga ;};return MakeNumberResult ((_ccec /_aeff -1)/_bafg );};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_agaga :=false ;for _ ,_eacd :=range args {switch _eacd .Type {case ResultTypeList ,ResultTypeArray :_bded :=Or (_eacd .ListValues ());if _bded .Type ==ResultTypeError {return _bded ;};if _bded .ValueNumber !=0{_agaga =true ;};case ResultTypeNumber :if _eacd .ValueNumber !=0{_agaga =true ;
};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _eacd ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");
};};return MakeBoolResult (_agaga );};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fcfec :=args [0].AsNumber ();_bfgg :=args [1].AsNumber ();if _fcfec .Type !=ResultTypeNumber ||_bfgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_eebf :=_fg .Trunc (_fcfec .ValueNumber );_ggdb :=_fg .Trunc (_bfgg .ValueNumber );if _eebf < _ggdb {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");
};if _eebf ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_eebf +_ggdb -1);args [1]=MakeNumberResult (_eebf -1);return Combin (args );};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_dgbe PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_fefc :=_dgbe ._ceddcc .Reference (ctx ,ev );switch _fefc .Type {case ReferenceTypeSheet :if _acbgb (_fefc ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_fefc .Value ));
};_bebe :=_dgbe .horizontalRangeReference (_fefc .Value );if _bcdb ,_fdaab :=ev .GetFromCache (_bebe );_fdaab {return _bcdb ;};_cggc :=ctx .Sheet (_fefc .Value );_ecggd ,_cagcb :=_dgce (_cggc ,_dgbe ._aaba ,_dgbe ._fbcda );_ggbg :=_aaaab (_cggc ,ev ,_ecggd ,_cagcb );
ev .SetCache (_bebe ,_ggbg );return _ggbg ;default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fefc .Type ));
};};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _dccca (args ,true )};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dagc :=args [0].AsNumber ();if _dagc .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};if _dagc .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};return MakeNumberResult (_cgea (_dagc .ValueNumber ));};func _fcdc (){_bfddb =_bc .MustCompile ("\u005e\u0030\u002b\u0024");_egdc =_bc .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");
_dcce =_bc .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_caca =_bc .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_ffge =_bc .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");
_caffb =_bc .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_eedd =_bc .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");
_cbbae =_bc .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_edbg =_bc .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");
_afcac =_bc .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");
_affa =_bc .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");
_adbfa =_bc .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_edfb +_edfb +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_edfb +_edfb +"\u0029\u002b\u0059+\u0024");_dffga =_bc .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_edfb +_edfb +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_edfb +_edfb +"\u0029\u002b\u0059+\u0024");
_bgd =_bc .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_egadg =_bc .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");
};const _bgfc =57376;

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_agee :=args [0].ValueNumber ;if _agee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};_eeag ,_fefgc :=_gbcbb (args [1],args [2],"\u0058\u004e\u0050\u0056");if _fefgc .Type ==ResultTypeError {return _fefgc ;};_gffa :=_eeag ._eac ;_bgca :=_eeag ._bbab ;_aaeg :=0.0;_cecbc :=_bgca [0];for _ccgea ,_ddda :=range _gffa {_aaeg +=_ddda /_fg .Pow (1+_agee ,(_bgca [_ccgea ]-_cecbc )/365);
};return MakeNumberResult (_aaeg );};func _ggbd (_baeb []Result )[]rangeIndex {_ddg :=[]rangeIndex {};_fafca :=len (_baeb );for _aded :=0;_aded < _fafca -1;_aded +=2{_cddba :=[]rangeIndex {};_adda :=_ebadf (_baeb [_aded ]);_fgaef :=_ceab (_baeb [_aded +1]);
if _aded ==0{for _bebg ,_bbedb :=range _adda {for _dfca ,_babae :=range _bbedb {if _gdbca (_babae ,_fgaef ){_cddba =append (_cddba ,rangeIndex {_bebg ,_dfca });};};};}else {for _ ,_cgbbc :=range _ddg {_abfe :=_adda [_cgbbc ._dfcbb ][_cgbbc ._bdfc ];if _gdbca (_abfe ,_fgaef ){_cddba =append (_cddba ,_cgbbc );
};};};if len (_cddba )==0{return []rangeIndex {};};_ddg =_cddba [:];};return _ddg ;};const _acaee =57344;const _fedbf =57353;

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fdef :=args [0].AsNumber ();_fdfee :=args [1].AsNumber ();if _fdef .Type !=ResultTypeNumber ||_fdfee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _fdfee .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_fg .Trunc (_fdef .ValueNumber /_fdfee .ValueNumber ));
};

// Reference returns an invalid reference for ConstArrayExpr.
func (_bcfg ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_aebec :=args [0].AsNumber ();
_acaa :=args [1].AsNumber ();if _aebec .Type !=ResultTypeNumber ||_acaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};if _acaa .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_feggb ,_ebab :=_fg .Modf (_aebec .ValueNumber /_acaa .ValueNumber );if _ebab < 0{_feggb --;
};return MakeNumberResult (_aebec .ValueNumber -_acaa .ValueNumber *_feggb );};func _eeaa (_adbaf string ,_dbee []Result )(*parsedReplaceObject ,Result ){if len (_dbee )!=4{return nil ,MakeErrorResult (_adbaf +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _dbee [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_adbaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_afcacc :=_dbee [0].ValueString ;if _dbee [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_adbaf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");
};_ddegf :=int (_dbee [1].ValueNumber )-1;if _dbee [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_adbaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bgaff :=int (_dbee [2].ValueNumber );if _dbee [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_adbaf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");
};_aacf :=_dbee [3].ValueString ;return &parsedReplaceObject {_afcacc ,_ddegf ,_bgaff ,_aacf },_cea ;};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_deea :=args [0];_beeg :=args [1];if _beeg .Type !=ResultTypeArray &&_beeg .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_cccc :=_ebbd (_beeg );_bfbg :=-1;for _dabf ,_bdege :=range _cccc {if _cbgf (_deea ,_bdege ,false ,false )==_bbad {_bfbg =_dabf ;};};if _bfbg ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};_fdfec :=_cccc ;if len (args )==3{_fdfec =_ebbd (args [2]);};if _bfbg < 0||_bfbg >=len (_fdfec ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};return _fdfec [_bfbg ];};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");
};type countMode byte ;func _febbgc (_efgfb Result ,_egfcc ,_egbd string )(float64 ,Result ){switch _efgfb .Type {case ResultTypeEmpty :return 0,_cea ;case ResultTypeNumber :return _efgfb .ValueNumber ,_cea ;case ResultTypeString :_bdea ,_cbcdb :=_ec .ParseFloat (_efgfb .ValueString ,64);
if _cbcdb !=nil {return 0,MakeErrorResult (_egbd +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_egfcc );};return _bdea ,_cea ;default:return 0,MakeErrorResult (_egfcc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_egbd +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");
};};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};const _dffb =57349;var _cddec =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_ba .NewReader (s ));};var _fgcbb _af .Mutex ;

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_debf ,_fcab :=_bfdd (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _fcab .Type ==ResultTypeError {return _fcab ;};_cage :=_debf ._fdeb ;_caag :=_debf ._cgdd ;_cddd :=_debf ._dcbc ;_fgfff :=_debf ._ffad ;
_daef :=_debf ._bdgd ;_gaee :=_debf ._cfbb ;return _ccda (_cage ,_caag ,_cddd ,_fgfff ,_daef ,_gaee );};type parsedReplaceObject struct{_fbacf string ;_agaa int ;_cdee int ;_eegeb string ;};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_affd :=args [0].AsString ();if _affd .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fega :=_b .Buffer {};_gdab :=false ;_dcdf :=false ;_cacge :=0;for _ ,_cgfff :=range _affd .ValueString {_bgbe :=_cgfff ==' ';if _bgbe {if !_gdab {continue ;};if !_dcdf {_cacge ++;_fega .WriteRune (_cgfff );};}else {_cacge =0;_gdab =true ;_fega .WriteRune (_cgfff );
};_dcdf =_bgbe ;};_fega .Truncate (_fega .Len ()-_cacge );return MakeStringResult (_fega .String ());};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_ddaeb :=len (args );if _ddaeb !=4&&_ddaeb !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fbcf ,_agbg ,_cabee :=_daa (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _cabee .Type ==ResultTypeError {return _cabee ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ecbg :=args [2].ValueNumber ;if _ecbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_bdbab :=args [3].ValueNumber ;if _bdbab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");
};_fbfa :=0;if _ddaeb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbfa =int (args [4].ValueNumber );if !_eba (_fbfa ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");
};};_fcff ,_cabee :=_bca (_fbcf ,_agbg ,_fbfa );if _cabee .Type ==ResultTypeError {return _cabee ;};return MakeNumberResult (_bdbab *(1-_ecbg *_fcff ));};func _bfdd (_ggfc []Result ,_fdff string )(*durationArgs ,Result ){_debg :=len (_ggfc );if _debg !=5&&_debg !=6{return nil ,MakeErrorResult (_fdff +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_beg ,_fbdbd ,_cbde :=_daa (_ggfc [0],_ggfc [1],_fdff );if _cbde .Type ==ResultTypeError {return nil ,_cbde ;};_fecba :=_ggfc [2];if _fecba .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fdff +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_dabc :=_fecba .ValueNumber ;if _dabc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_dbac :=_ggfc [3];if _dbac .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fdff +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_addc :=_dbac .ValueNumber ;if _addc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_bbca :=_ggfc [4];if _bbca .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fdff +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bge :=float64 (int (_bbca .ValueNumber ));if !_gfb (_bge ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_aaecc :=0;if _debg ==6&&_ggfc [5].Type !=ResultTypeEmpty {_cgfg :=_ggfc [5];
if _cgfg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fdff +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aaecc =int (_cgfg .ValueNumber );
if !_eba (_aaecc ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_fdff );};};return &durationArgs {_beg ,_fbdbd ,_dabc ,_addc ,_bge ,_aaecc },_cea ;
};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_aedga ,_dcdaa Expression };

// Eval evaluates and returns a boolean.
func (_cd Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_cd ._bae )};func _gffd (_aec ,_efd _fd .Time ,_gcg int )float64 {if _aec .After (_efd ){_aec ,_efd =_efd ,_aec ;};_fgea :=0;_fcfg ,_dbfd ,_fae :=_aec .Date ();_bgae ,_ddef ,_aac :=_efd .Date ();
_aaa ,_fff :=int (_dbfd ),int (_ddef );_edb ,_aaff :=_bgge (_fcfg ,_aaa ,_fae ,_gcg ),_bgge (_bgae ,_fff ,_aac ,_gcg );if !_gbfb (_gcg ){return _bag (_bgae ,_fff ,_aaff )-_bag (_fcfg ,_aaa ,_edb );};if _gcg ==0{if (_aaa ==2||_edb < 30)&&_aac ==31{_aaff =31;
}else if _fff ==2&&_aaff ==_fef (_bgae ,_fff ){_aaff =_fef (_bgae ,2);};}else {if _aaa ==2&&_edb ==30{_edb =_fef (_fcfg ,2);};if _fff ==2&&_aaff ==30{_aaff =_fef (_bgae ,2);};};if _fcfg < _bgae ||(_fcfg ==_bgae &&_aaa < _fff ){_fgea =30-_edb +1;_fae =1;
_edb =1;_ecdb :=_fd .Date (_fcfg ,_fd .Month (_aaa ),_fae ,0,0,0,0,_fd .UTC ).AddDate (0,1,0);if _ecdb .Year ()< _bgae {_fgea +=_bcag (_ecdb .Year (),int (_ecdb .Month ()),12,_gcg );_ecdb =_ecdb .AddDate (0,13-int (_ecdb .Month ()),0);_fgea +=_aacd (_ecdb .Year (),_bgae -1,_gcg );
};_fgea +=_bcag (_bgae ,int (_ecdb .Month ()),_fff -1,_gcg );_ecdb =_ecdb .AddDate (0,_fff -int (_ecdb .Month ()),0);_aaa =_ecdb .Day ();};_fgea +=_aaff -_edb ;if _fgea > 0{return float64 (_fgea );}else {return 0;};};var _bdcf =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Reference returns a string reference value to an expression with prefix.
func (_dbdec PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_bfaab :=_dbdec ._dbab .Reference (ctx ,ev );_edbe :=_dbdec ._gefeg .Reference (ctx ,ev );if _bfaab .Type ==ReferenceTypeSheet &&_edbe .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_bfaab .Value +"\u0021"+_edbe .Value };
};return ReferenceInvalid ;};func _bgcb (_fgfb int )string {if _fgfb >=0&&_fgfb < len (_ffdff ){if _ffdff [_fgfb ]!=""{return _ffdff [_fgfb ];};};return _a .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_fgfb );};

// Reference returns a string reference value to a vertical range.
func (_aceb VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_aceb .verticalRangeReference ()};};

// CellRef is a reference to a single cell
type CellRef struct{_adaa string };const _cdfde =57361;func _fef (_ecgd ,_cdff int )int {if _cdff ==2&&_age (_ecgd ){return 29;}else {return _afc [_cdff -1];};};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};
_fabd :=int (args [0].ValueNumber );return MakeBoolResult (_fabd ==_fabd /2*2);};const _geeef =57362;var InvalidReferenceContext =&ivr {};func (_eabc PrefixVerticalRange )verticalRangeReference (_aafda string )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_aafda ,_eabc ._cafg ,_eabc ._egeec );
};

// String returns a string of a range.
func (_cfacd Range )String ()string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_cfacd ._aedga .String (),_cfacd ._dcdaa .String ());};

// String returns a string representation of ConstArrayExpr.
func (_aga ConstArrayExpr )String ()string {return ""};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_geffc :=args [0].AsNumber ();if _geffc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ccdge :=float64 (1);if _geffc .ValueNumber < 0{_ccdge =-1;};if len (args )> 1{_cbbaef :=args [1].AsNumber ();if _cbbaef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");
};_ccdge =_fg .Abs (_cbbaef .ValueNumber );};if len (args )==1{return MakeNumberResult (_fg .Floor (_geffc .ValueNumber ));};_eecf :=_geffc .ValueNumber ;_eecf ,_becb :=_fg .Modf (_eecf /_ccdge );if _becb !=0{if _geffc .ValueNumber < 0{_eecf --;};};return MakeNumberResult (_eecf *_ccdge );
};func _eceg (_dgadb Result ,_ccecf *criteriaParsed )bool {_bcbg :=_ba .ToLower (_dgadb .ValueString );_geccc :=_ccecf ._gbaa ._gffbb ;_geaf :=_ccecf ._gbaa ._fceff ;if _geccc ==_bbbgac {return _bcbg ==_geaf ||_ade .Match (_geaf ,_bcbg );};if _dgadb .Type !=ResultTypeEmpty {if _bcbg ==_ccecf ._bgbc ||_ade .Match (_ccecf ._bgbc ,_bcbg ){return true ;
};if _ ,_bbabd :=_ec .ParseFloat (_geaf ,64);_bbabd ==nil {return false ;};switch _geccc {case _ffee :return _bcbg <=_geaf ;case _cbgd :return _bcbg >=_geaf ;case _eggff :return _bcbg < _geaf ;case _gdagb :return _bcbg > _geaf ;};};return false ;};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_gedf (args ,_efcg ))};func _bca (_acbe ,_ffde float64 ,_afa int )(float64 ,Result ){_deb ,_gcbf :=_gaa (_acbe ),_gaa (_ffde );_egd :=_deb .Unix ();_eddc :=_gcbf .Unix ();if _egd ==_eddc {return 0,_cea ;
};_ccg ,_bbaaa ,_bdae :=_deb .Date ();_fag ,_gfcb ,_egb :=_gcbf .Date ();_fefaa ,_ffb :=int (_bbaaa ),int (_gfcb );var _cdad ,_dgfa float64 ;switch _afa {case 0:if _bdae ==31{_bdae --;};if _bdae ==30&&_egb ==31{_egb --;}else if _fefe :=_age (_ccg );_fefaa ==2&&((_fefe &&_bdae ==29)||(!_fefe &&_bdae ==28)){_bdae =30;
if _gec :=_age (_fag );_ffb ==2&&((_gec &&_egb ==29)||(!_gec &&_egb ==28)){_egb =30;};};_cdad =float64 ((_fag -_ccg )*360+(_ffb -_fefaa )*30+(_egb -_bdae ));_dgfa =360;case 1:_cdad =_ffde -_acbe ;_cdd :=_ccg !=_fag ;if _cdd &&(_fag !=_ccg +1||_fefaa < _ffb ||(_fefaa ==_ffb &&_bdae < _egb )){_dede :=0;
for _dfc :=_ccg ;_dfc <=_fag ;_dfc ++{_dede +=_gfee (_dfc ,1);};_dgfa =float64 (_dede )/float64 (_fag -_ccg +1);}else {if !_cdd &&_age (_ccg ){_dgfa =366;}else {if _cdd &&((_age (_ccg )&&(_fefaa < 2||(_fefaa ==2&&_bdae <=29)))||(_age (_fag )&&(_ffb > 2||(_ffb ==2&&_egb ==29)))){_dgfa =366;
}else {_dgfa =365;};};};case 2:_cdad =_ffde -_acbe ;_dgfa =360;case 3:_cdad =_ffde -_acbe ;_dgfa =365;case 4:if _bdae ==31{_bdae --;};if _egb ==31{_egb --;};_cdad =float64 ((_fag -_ccg )*360+(_ffb -_fefaa )*30+(_egb -_bdae ));_dgfa =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");
};return _cdad /_dgfa ,_cea ;};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;func (_cdbca tokenType )String ()string {return _abbaa (int (_cdbca ))};const _ccgd =57360;

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_agcf :=len (args );if _agcf !=4&&_agcf !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_bgaeb ,_gced ,_eeff :=_daa (args [0],args [1],"\u0044\u0049\u0053\u0043");if _eeff .Type ==ResultTypeError {return _eeff ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cfce :=args [2].ValueNumber ;if _cfce <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gccf :=args [3].ValueNumber ;if _gccf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcbfg :=0;if _agcf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcbfg =int (args [4].ValueNumber );if !_eba (_gcbfg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");
};};_gacbe ,_eeff :=_bca (_bgaeb ,_gced ,_gcbfg );if _eeff .Type ==ResultTypeError {return _eeff ;};return MakeNumberResult ((_gccf -_cfce )/_gccf /_gacbe );};

// Update returns the same object as updating sheet references does not affect String.
func (_dabcc String )Update (q *_db .UpdateQuery )Expression {return _dabcc };

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_dgdec :=_cace (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _dgdec .Type !=ResultTypeEmpty {return _dgdec ;};_fbdcc :=_ggbd (args [1:]);_bacad :=-_fg .MaxFloat64 ;_aggc :=_ebadf (args [0]);for _ ,_faec :=range _fbdcc {_defbb :=_aggc [_faec ._dfcbb ][_faec ._bdfc ].ValueNumber ;
if _bacad < _defbb {_bacad =_defbb ;};};if _bacad ==-_fg .MaxFloat64 {_bacad =0;};return MakeNumberResult (float64 (_bacad ));};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_bddfc :=[]string {};for _adde :=range _faddb {_bddfc =append (_bddfc ,_adde );};for _aggf :=range _gegd {_bddfc =append (_bddfc ,_aggf );};_c .Strings (_bddfc );return _bddfc ;};

// FunctionCall is a function call expression.
type FunctionCall struct{_eeea string ;_ffagd []Expression ;};func (_bdda Result )AsString ()Result {switch _bdda .Type {case ResultTypeNumber :return MakeStringResult (_bdda .Value ());default:return _bdda ;};};

// Reference returns an invalid reference for Bool.
func (_bf Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_fgcbb .Lock ();defer _fgcbb .Unlock ();if _ ,_cfffd :=_faddb [name ];_cfffd {_ff .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_faddb [name ]=fn ;};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_dbab :pfx ,_gefeg :exp }};

// String returns a string representation of FunctionCall expression.
func (_cfbea FunctionCall )String ()string {_gcbfe :=_b .Buffer {};_gcbfe .WriteString (_cfbea ._eeea );_gcbfe .WriteString ("\u0028");_bcagd :=len (_cfbea ._ffagd )-1;for _gaac ,_cbcfdd :=range _cfbea ._ffagd {_gcbfe .WriteString (_cbcfdd .String ());
if _gaac !=_bcagd {_gcbfe .WriteString ("\u002c");};};_gcbfe .WriteString ("\u0029");return _gcbfe .String ();};func _cfe (){_gg ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_bc .MustCompile ("\u005e"+_aeg +_fdea );_gg ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_bc .MustCompile ("\u005e"+_fdgf +_fdea );
_gg ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_bc .MustCompile ("\u005e"+_ead +_fdea );_gg ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_bc .MustCompile ("\u005e"+_bdf +_fdea );_egc ["\u0068\u0068"]=_bc .MustCompile (_cae +_dde +"\u0024");
_egc ["\u0068\u0068\u003am\u006d"]=_bc .MustCompile (_cae +_cdfc +"\u0024");_egc ["\u006d\u006d\u003as\u0073"]=_bc .MustCompile (_cae +_caf +"\u0024");_egc ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_bc .MustCompile (_cae +_fdf +"\u0024");_faa =[]*_bc .Regexp {_bc .MustCompile ("\u005e"+_aeg +"\u0024"),_bc .MustCompile ("\u005e"+_fdgf +"\u0024"),_bc .MustCompile ("\u005e"+_ead +"\u0024"),_bc .MustCompile ("\u005e"+_bdf +"\u0024")};
_aaea =[]*_bc .Regexp {_bc .MustCompile ("\u005e"+_dde +"\u0024"),_bc .MustCompile ("\u005e"+_cdfc +"\u0024"),_bc .MustCompile ("\u005e"+_caf +"\u0024"),_bc .MustCompile ("\u005e"+_fdf +"\u0024")};};const _eaea =57359;

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_cgg :=_ba .ToLower (args [0].ValueString );if !_dgf (_cgg ){_ ,_ ,_ ,_ ,_fece ,_fcf :=_ffd (_cgg );if _fcf .Type ==ResultTypeError {_fcf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";
return _fcf ;};if _fece {return MakeNumberResult (0);};};_dba ,_bcgc ,_afb ,_ ,_bbb :=_cgd (_cgg );if _bbb .Type ==ResultTypeError {return _bbb ;};return MakeNumberResult (_bag (_dba ,_bcgc ,_afb ));};func _agdf (_aegb ,_bccf float64 ,_aeae ,_fced int )float64 {_ffg :=_gaa (_aegb );
_bgba :=_gaa (_bccf );_bgbg :=_eccg (_ffg ,_bgba ,_aeae );return _gffd (_ffg ,_bgbg ,_fced );};

// Reference returns a string reference value to a sheet.
func (_eegdc SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_eegdc ._fcdcf };};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_fg .Pi );};const _fdbabe =57373;


// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_cfdf :=args [0].ValueNumber ;if _cfdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};_eeab :=float64 (int (args [1].ValueNumber ));if _eeab < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult ((_fg .Pow (_cfdf +1,1/_eeab )-1)*_eeab );};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_gabcf :=len (args );if _gabcf < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gaeg :=args [0].ValueNumber ;if _gaeg ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cebg :=[]float64 {};for _ ,_efag :=range args [1:]{switch _efag .Type {case ResultTypeNumber :_cebg =append (_cebg ,_efag .ValueNumber );case ResultTypeArray ,ResultTypeList :_ccedc :=_ebadf (_efag );
for _ ,_bgfe :=range _ccedc {for _ ,_ebb :=range _bgfe {if _ebb .Type ==ResultTypeNumber &&!_ebb .IsBoolean {_cebg =append (_cebg ,_ebb .ValueNumber );};};};};};_agga :=0.0;for _ggfd ,_aecg :=range _cebg {_agga +=_aecg /_fg .Pow (1+_gaeg ,float64 (_ggfd )+1);
};return MakeNumberResult (_agga );};func _adfd (_defbe []Result ,_abga []string ,_adegf bool )[]string {for _ ,_beffb :=range _defbe {switch _beffb .Type {case ResultTypeEmpty :if !_adegf {_abga =append (_abga ,"");};case ResultTypeString :if _beffb .ValueString !=""||!_adegf {_abga =append (_abga ,_beffb .ValueString );
};case ResultTypeNumber :_abga =append (_abga ,_beffb .Value ());case ResultTypeList :_abga =_bfdbgb (_abga ,_adfd (_beffb .ValueList ,[]string {},_adegf ));case ResultTypeArray :for _ ,_ccgc :=range _beffb .ValueArray {_abga =_bfdbgb (_abga ,_adfd (_ccgc ,[]string {},_adegf ));
};};};return _abga ;};