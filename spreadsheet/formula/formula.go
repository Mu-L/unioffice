//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_b "bytes";_g "errors";_c "fmt";_ca "github.com/unidoc/unioffice/common/logger";_eb "github.com/unidoc/unioffice/internal/mergesort";_a "github.com/unidoc/unioffice/internal/wildcard";_bbg "github.com/unidoc/unioffice/spreadsheet/format";
_gdg "github.com/unidoc/unioffice/spreadsheet/reference";_ed "github.com/unidoc/unioffice/spreadsheet/update";_cc "io";_ga "math";_gf "math/big";_ff "math/rand";_cb "regexp";_fc "sort";_fb "strconv";_gd "strings";_bb "sync";_e "time";_d "unicode";);

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};for _ddec :=0;_ddec < len (args )-1;_ddec +=2{if args [_ddec ].ValueNumber ==1{return args [_ddec +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_affgf :=1.0;for _ ,_gcgf :=range args {_gcgf =_gcgf .AsNumber ();switch _gcgf .Type {case ResultTypeNumber :_affgf *=_gcgf .ValueNumber ;case ResultTypeList ,ResultTypeArray :_ebfbg :=Product (_gcgf .ListValues ());
if _ebfbg .Type !=ResultTypeNumber {return _ebfbg ;};_affgf *=_ebfbg .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gcgf ;case ResultTypeEmpty :default:return MakeErrorResult (_c .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_gcgf .Type ));
};};return MakeNumberResult (_affgf );};func (_effd HorizontalRange )horizontalRangeReference ()string {return _c .Sprintf ("\u0025\u0064\u003a%\u0064",_effd ._fdffe ,_effd ._bdag );};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_fbcd :=len (args );if _fbcd ==0||_fbcd > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");
};_gfcg :=_acddd (args [0]);_egag :=[]float64 {};for _ ,_geefc :=range _gfcg {for _ ,_dga :=range _geefc {if _dga .Type ==ResultTypeNumber &&!_dga .IsBoolean {_egag =append (_egag ,_dga .ValueNumber );};};};_aeg :=len (_egag );if len (_egag )< 2{return MakeErrorResultType (ErrorTypeNum ,"");
};_bgbb :=0.1;if _fbcd ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bgbb =args [1].ValueNumber ;if _bgbb <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");
};};_dffa :=[]float64 {};for _dcdd :=0;_dcdd < _aeg ;_dcdd ++{if _dcdd ==0{_dffa =append (_dffa ,0);}else {_dffa =append (_dffa ,_dffa [_dcdd -1]+365);};};return _gbbd (_egag ,_dffa ,_bgbb );};

// Reference returns a string reference value to an expression with prefix.
func (_ecfe PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_gbbge :=_ecfe ._fbeda .Reference (ctx ,ev );_bgaeef :=_ecfe ._bfff .Reference (ctx ,ev );if _gbbge .Type ==ReferenceTypeSheet &&_bgaeef .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_gbbge .Value +"\u0021"+_bgaeef .Value };
};return ReferenceInvalid ;};const _fbdf ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_cag :lhs ,_ae :rhs ,_be :op };};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_dbac :=len (args );if _dbac !=4&&_dbac !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_cdfdb ,_acad ,_bbcf :=_cbeg (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _bbcf .Type ==ResultTypeError {return _bbcf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcbgb :=args [2].ValueNumber ;if _gcbgb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cbbg :=args [3].ValueNumber ;if _cbbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eabgf :=0;if _dbac ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eabgf =int (args [4].ValueNumber );if !_dbgg (_eabgf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");
};};_fadg ,_bbcf :=_efec (_cdfdb ,_acad ,_eabgf );if _bbcf .Type ==ResultTypeError {return _bbcf ;};return MakeNumberResult (_gcbgb /(1-_cbbg *_fadg ));};type cumulArgs struct{_debg float64 ;_ebe float64 ;_begb float64 ;_cbeed float64 ;_bcfg float64 ;_egbb int ;
};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_ccca :=len (args );if _ccca !=5&&_ccca !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_eddf ,_dcdfg ,_ecde :=_cbeg (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _ecde .Type ==ResultTypeError {return _ecde ;};_fffb ,_ecde :=_abgc (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");
if _ecde .Type ==ResultTypeError {return _ecde ;};if _fffb >=_eddf {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_ffbb :=args [3].ValueNumber ;if _ffbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_abac :=args [4].ValueNumber ;if _abac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_bfbec :=0;if _ccca ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bfbec =int (args [5].ValueNumber );if !_dbgg (_bfbec ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");
};};_aeee ,_ecde :=_efec (_eddf ,_dcdfg ,_bfbec );if _ecde .Type ==ResultTypeError {return _ecde ;};_ffaga ,_ecde :=_efec (_fffb ,_dcdfg ,_bfbec );if _ecde .Type ==ResultTypeError {return _ecde ;};_adbge ,_ecde :=_efec (_fffb ,_eddf ,_bfbec );if _ecde .Type ==ResultTypeError {return _ecde ;
};_edaef :=1+_ffaga *_ffbb ;_bfba :=1+_aeee *_abac ;return MakeNumberResult ((_edaef /_bfba -_adbge *_ffbb )*100);};var _ecdb =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};
type criteriaRegex struct{_dgabf byte ;_cceffc string ;};const _age ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_bdba +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";const _ecg ="\u0028\u0020\u0028"+_bdbg +"\u007c"+_fdg +"\u007c"+_fbbg +"\u007c"+_cd +"\u0029\u0029\u003f\u0024";
func _abgc (_ggd Result ,_deeb ,_gga string )(float64 ,Result ){var _aafff float64 ;switch _ggd .Type {case ResultTypeNumber :_aafff =float64 (int (_ggd .ValueNumber ));case ResultTypeString :_ccf :=DateValue ([]Result {_ggd });if _ccf .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_deeb +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_gga );
};_aafff =_ccf .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_gga );};if _aafff < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_deeb +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};return _aafff ,_eed ;};func _fedf (_aacdc []Result ,_ccgcg []string ,_afffg bool )[]string {for _ ,_gdefb :=range _aacdc {switch _gdefb .Type {case ResultTypeEmpty :if !_afffg {_ccgcg =append (_ccgcg ,"");};case ResultTypeString :if _gdefb .ValueString !=""||!_afffg {_ccgcg =append (_ccgcg ,_gdefb .ValueString );
};case ResultTypeNumber :_ccgcg =append (_ccgcg ,_gdefb .Value ());case ResultTypeList :_ccgcg =_bgff (_ccgcg ,_fedf (_gdefb .ValueList ,[]string {},_afffg ));case ResultTypeArray :for _ ,_fbaf :=range _gdefb .ValueArray {_ccgcg =_bgff (_ccgcg ,_fedf (_fbaf ,[]string {},_afffg ));
};};};return _ccgcg ;};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebdfg :=0;_eccd :=false ;for _ ,_fafe :=range args {switch _fafe .Type {case ResultTypeList ,ResultTypeArray :_cgfc :=Xor (_fafe .ListValues ());if _cgfc .Type ==ResultTypeError {return _cgfc ;};if _cgfc .ValueNumber !=0{_ebdfg ++;};_eccd =true ;case ResultTypeNumber :if _fafe .ValueNumber !=0{_ebdfg ++;
};_eccd =true ;case ResultTypeString :case ResultTypeError :return _fafe ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");
};};if !_eccd {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_ebdfg %2!=0);};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ddffa :=args [0].AsString ();if _ddffa .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fbegf :=_b .Buffer {};_ddaa :=false ;_bbac :=false ;_bbfcc :=0;for _ ,_abgfd :=range _ddffa .ValueString {_edbb :=_abgfd ==' ';if _edbb {if !_ddaa {continue ;};if !_bbac {_bbfcc ++;_fbegf .WriteRune (_abgfd );};}else {_bbfcc =0;_ddaa =true ;_fbegf .WriteRune (_abgfd );
};_bbac =_edbb ;};_fbegf .Truncate (_fbegf .Len ()-_bbfcc );return MakeStringResult (_fbegf .String ());};const _cacc =57372;const _ecae =57359;func _aged (_efcc ,_dge ,_cfgf int )bool {if _dge < 1||_dge > 12{return false ;};if _cfgf < 1{return false ;
};return _cfgf <=_acc (_efcc ,_dge );};func (_decb tokenType )String ()string {return _efebc (int (_decb ))};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (ev .LastEvalIsRef ());};

// Reference returns an invalid reference for Bool.
func (_ffg Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// String returns an empty string for EmptyExpr.
func (_ebb EmptyExpr )String ()string {return ""};func _cebca (_bbgae float64 ,_gcfe *criteriaRegex )bool {_gaggb ,_aedfd :=_fb .ParseFloat (_gcfe ._cceffc ,64);if _aedfd !=nil {return false ;};switch _gcfe ._dgabf {case _bbfd :return _bbgae ==_gaggb ;
case _cecbb :return _bbgae <=_gaggb ;case _bgebe :return _bbgae >=_gaggb ;case _befcg :return _bbgae < _gaggb ;case _bafda :return _bbgae > _gaggb ;};return false ;};

// Reference returns an invalid reference for EmptyExpr.
func (_ebdb EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_fabe PrefixHorizontalRange )Update (q *_ed .UpdateQuery )Expression {return _fabe };

// IsBool returns false for the invalid reference context.
func (_ecgce *ivr )IsBool (cellRef string )bool {return false };

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_cafba ,_aace ,_dcba :=_cde (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _dcba .Type ==ResultTypeError {return _dcba ;};if _aace < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");
};if _cafba ==0{return MakeNumberResult (0);};_eagc :=_cafba < 0;if _eagc {_cafba =-_cafba ;};_gede :=args [0].Value ();_acfa :=_gd .Split (_gede ,"\u002e");_faag :=float64 (int (_cafba ));_eggc :=_acfa [1];_ccbb :=len (_eggc );_cdgd :=int (_ga .Log10 (_aace ))+1;
_bceg :=float64 (_cdgd -_ccbb );_gbdg ,_beef :=_fb .ParseFloat (_eggc ,64);if _beef !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");
};_gbdg *=_ga .Pow (10,_bceg );_efde :=_faag +_gbdg /_aace ;if _eagc {_efde =-_efde ;};return MakeNumberResult (_efde );};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_fcge :=args [0];
if _fcge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_agf :=int (_fcge .ValueNumber );if _agf < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");
};if len (args )<=_agf {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");
};return args [_agf ];};func _efebc (_cadf int )string {if _cadf >=1&&_cadf -1< len (_abdac ){if _abdac [_cadf -1]!=""{return _abdac [_cadf -1];};};return _c .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_cadf );};

// Value returns a string version of the result.
func (_gfbaa Result )Value ()string {switch _gfbaa .Type {case ResultTypeNumber :_aedde :=_fb .FormatFloat (_gfbaa .ValueNumber ,'f',-1,64);if len (_aedde )> 12{_gbadb :=12;for _fgeec :=_gbadb ;_fgeec > 0&&_aedde [_fgeec ]=='0';_fgeec --{_gbadb --;};_aedde =_aedde [0:_gbadb +1];
};return _aedde ;case ResultTypeError :return _gfbaa .ValueString ;case ResultTypeString :return _gfbaa .ValueString ;case ResultTypeList :if len (_gfbaa .ValueList )==0{return "";};return _gfbaa .ValueList [0].Value ();case ResultTypeArray :if len (_gfbaa .ValueArray )==0||len (_gfbaa .ValueArray [0])==0{return "";
};return _gfbaa .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// Eval evaluates the binary expression using the context given.
func (_bbb BinaryExpr )String ()string {_dbg :="";switch _bbb ._be {case BinOpTypePlus :_dbg ="\u002b";case BinOpTypeMinus :_dbg ="\u002d";case BinOpTypeMult :_dbg ="\u002a";case BinOpTypeDiv :_dbg ="\u002f";case BinOpTypeExp :_dbg ="\u005e";case BinOpTypeLT :_dbg ="\u003c";
case BinOpTypeGT :_dbg ="\u003e";case BinOpTypeEQ :_dbg ="\u003d";case BinOpTypeLEQ :_dbg ="\u003c\u003d";case BinOpTypeGEQ :_dbg ="\u003e\u003d";case BinOpTypeNE :_dbg ="\u003c\u003e";case BinOpTypeConcat :_dbg ="\u0026";};return _bbb ._cag .String ()+_dbg +_bbb ._ae .String ();
};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dgcgf :=args [0].AsNumber ();
_egge :=args [1].AsNumber ();if _dgcgf .Type !=ResultTypeNumber ||_egge .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};if _egge .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_fcdff ,_ebeb :=_ga .Modf (_dgcgf .ValueNumber /_egge .ValueNumber );if _ebeb < 0{_fcdff --;
};return MakeNumberResult (_dgcgf .ValueNumber -_egge .ValueNumber *_fcdff );};func (_bbfda Result )String ()string {return _bbfda .Value ()};func _dbgff (_acg ,_deb ,_aec ,_fecb ,_aagf float64 ,_deea int )Result {_fbce ,_gbff :=_efec (_acg ,_deb ,_deea );
if _gbff .Type ==ResultTypeError {return _gbff ;};_abdg ,_eff :=_fcdf (_acg ,_deb ,int (_aagf ),_deea );if _eff .Type ==ResultTypeError {return _eff ;};_fceg :=0.0;_cbba :=0.0;_aec *=100/_aagf ;_fecb /=_aagf ;_fecb ++;_cage :=_fbce *_aagf -_abdg ;for _fggf :=1.0;
_fggf < _abdg ;_fggf ++{_bbd :=_fggf +_cage ;_bcca :=_aec /_ga .Pow (_fecb ,_bbd );_cbba +=_bcca ;_fceg +=_bbd *_bcca ;};_bccg :=(_aec +100)/_ga .Pow (_fecb ,_abdg +_cage );_cbba +=_bccg ;_fceg +=(_abdg +_cage )*_bccg ;_fceg /=_cbba ;_fceg /=_aagf ;return MakeNumberResult (_fceg );
};func _ffag (_ggb int )bool {return _ggb ==0||_ggb ==4};func _bdfd (_dggbc Context ,_aedd ,_ddcd int )(string ,string ){_fbga :="\u0041"+_fb .Itoa (_aedd );_ffdgf :=_dggbc .LastColumn (_aedd ,_ddcd );_cgfde :=_ffdgf +_fb .Itoa (_ddcd );return _fbga ,_cgfde ;
};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_cccb :=len (args );if _cccb !=4&&_cccb !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_daea ,_fafb ,_bgdff :=_cbeg (args [0],args [1],"\u0044\u0049\u0053\u0043");if _bgdff .Type ==ResultTypeError {return _bgdff ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gdae :=args [2].ValueNumber ;if _gdae <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_caa :=args [3].ValueNumber ;if _caa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cdce :=0;if _cccb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cdce =int (args [4].ValueNumber );if !_dbgg (_cdce ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");
};};_ggaa ,_bgdff :=_efec (_daea ,_fafb ,_cdce );if _bgdff .Type ==ResultTypeError {return _bgdff ;};return MakeNumberResult ((_caa -_gdae )/_caa /_ggaa );};func _afcec (_fbfg string )string {_fbfg =_gd .Replace (_fbfg ,"\u000a","\u005c\u006e",-1);_fbfg =_gd .Replace (_fbfg ,"\u000d","\u005c\u0072",-1);
_fbfg =_gd .Replace (_fbfg ,"\u0009","\u005c\u0074",-1);return _fbfg ;};

// Eval evaluates and returns the result of a formula.
func (_ebab *defEval )Eval (ctx Context ,formula string )Result {_afe :=ParseString (formula );_dd :=make (chan Result );go func (){if _afe ==nil {_dd <-MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));
}else {_ebab .checkLastEvalIsRef (ctx ,_afe );_dd <-_afe .Eval (ctx ,_ebab );};}();select{case _ffad :=<-_dd :return _ffad ;case <-_e .After (_gbf ):_ca .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");
return MakeNumberResult (0);};};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gaef :=args [0].Ref ;
if _gaef .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");
};_efff ,_adge :=_gdg .ParseCellReference (_gaef .Value );if _adge !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gaef .Value );};return MakeNumberResult (float64 (_efff .ColumnIdx +1));
};func _cbeg (_efd ,_aba Result ,_cac string )(float64 ,float64 ,Result ){_dcdf ,_cfba :=_abgc (_efd ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_cac );if _cfba .Type ==ResultTypeError {return 0,0,_cfba ;};_cdgc ,_cfba :=_abgc (_aba ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_cac );
if _cfba .Type ==ResultTypeError {return 0,0,_cfba ;};if _dcdf >=_cdgc {return 0,0,MakeErrorResultType (ErrorTypeNum ,_cac +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};return _dcdf ,_cdgc ,_eed ;};func _efec (_gbfd ,_fbbc float64 ,_aded int )(float64 ,Result ){_acd ,_aagg :=_dbab (_gbfd ),_dbab (_fbbc );_aaff :=_acd .Unix ();_ffbf :=_aagg .Unix ();if _aaff ==_ffbf {return 0,_eed ;};_ede ,_gfba ,_dfg :=_acd .Date ();
_bce ,_ecgfd ,_bgad :=_aagg .Date ();_efccg ,_dgde :=int (_gfba ),int (_ecgfd );var _dgec ,_dbbf float64 ;switch _aded {case 0:if _dfg ==31{_dfg --;};if _dfg ==30&&_bgad ==31{_bgad --;}else if _gedd :=_dbag (_ede );_efccg ==2&&((_gedd &&_dfg ==29)||(!_gedd &&_dfg ==28)){_dfg =30;
if _fbc :=_dbag (_bce );_dgde ==2&&((_fbc &&_bgad ==29)||(!_fbc &&_bgad ==28)){_bgad =30;};};_dgec =float64 ((_bce -_ede )*360+(_dgde -_efccg )*30+(_bgad -_dfg ));_dbbf =360;case 1:_dgec =_fbbc -_gbfd ;_bgdf :=_ede !=_bce ;if _bgdf &&(_bce !=_ede +1||_efccg < _dgde ||(_efccg ==_dgde &&_dfg < _bgad )){_cbdac :=0;
for _baf :=_ede ;_baf <=_bce ;_baf ++{_cbdac +=_faff (_baf ,1);};_dbbf =float64 (_cbdac )/float64 (_bce -_ede +1);}else {if !_bgdf &&_dbag (_ede ){_dbbf =366;}else {if _bgdf &&((_dbag (_ede )&&(_efccg < 2||(_efccg ==2&&_dfg <=29)))||(_dbag (_bce )&&(_dgde > 2||(_dgde ==2&&_bgad ==29)))){_dbbf =366;
}else {_dbbf =365;};};};case 2:_dgec =_fbbc -_gbfd ;_dbbf =360;case 3:_dgec =_fbbc -_gbfd ;_dbbf =365;case 4:if _dfg ==31{_dfg --;};if _bgad ==31{_bgad --;};_dgec =float64 ((_bce -_ede )*360+(_dgde -_efccg )*30+(_bgad -_dfg ));_dbbf =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");
};return _dgec /_dbbf ,_eed ;};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_cdfg ,_edga :=_ccfaa (args ,true );if _edga ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_cdfg /_edga );};func (_efc *defEval )checkLastEvalIsRef (_bgg Context ,_fac Expression ){switch _fac .(type ){case FunctionCall :switch _fac .(FunctionCall )._dacba {case "\u0049\u0053\u0052E\u0046":for _ ,_dbb :=range _fac .(FunctionCall )._cgee {switch _dbb .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_dbf :=_dbb .Eval (_bgg ,_efc );
_efc ._ebdf =!(_dbf .Type ==ResultTypeError &&_dbf .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_efc ._ebdf =false ;};};};};};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_egfac :=args [0].AsString ();if _egfac .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};if len (_egfac .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_egfac .ValueString [0]));};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_adbbe :=args [0].Ref ;for _adbbe .Type ==ReferenceTypeNamedRange {_adbbe =ctx .NamedRange (_adbbe .Value );};_ggfa :="";switch _adbbe .Type {case ReferenceTypeCell :_ggfa =_adbbe .Value ;case ReferenceTypeRange :_edfc :=_gd .Split (_adbbe .Value ,"\u003a");
if len (_edfc )==2{_ggfa =_edfc [0];};default:return MakeErrorResult (_c .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_adbbe .Type ));
};_fcab ,_effg :=_gdg .ParseCellReference (_ggfa );if _effg !=nil {return MakeErrorResult (_c .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_effg .Error ()));
};_fadcfe ,_cgbfa ,_abec :=_fcab .Column ,_fcab .RowIdx ,_fcab .SheetName ;_bdd :=args [1].AsNumber ();if _bdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};_dbga :=args [2].AsNumber ();if _dbga .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};var _degf ,_dbfd Result ;if len (args )==3{_degf =MakeNumberResult (1);_dbfd =MakeNumberResult (1);}else {_degf =args [3].AsNumber ();if _degf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");
};if _degf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_dbfd =args [4].AsNumber ();if _dbfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");
};if _dbfd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_gagg :=_gdg .ColumnToIndex (_fadcfe );_dcbb :=_cgbfa +uint32 (_bdd .ValueNumber );_feba :=_gagg +uint32 (_dbga .ValueNumber );_aeag :=_dcbb +uint32 (_degf .ValueNumber );_bfcc :=_feba +uint32 (_dbfd .ValueNumber );
if _degf .ValueNumber > 0{_aeag --;}else {_aeag ++;_dcbb ,_aeag =_aeag ,_dcbb ;};if _dbfd .ValueNumber > 0{_bfcc --;}else {_bfcc ++;_feba ,_bfcc =_bfcc ,_feba ;};_ecgca :=_c .Sprintf ("\u0025\u0073\u0025\u0064",_gdg .IndexToColumn (_feba ),_dcbb );_cdda :=_c .Sprintf ("\u0025\u0073\u0025\u0064",_gdg .IndexToColumn (_bfcc ),_aeag );
if _abec ==""{return _ecdg (ctx ,ev ,_ecgca ,_cdda );}else {return _ecdg (ctx .Sheet (_abec ),ev ,_ecgca ,_cdda );};};const _cfec =1;func _ecdg (_eaaec Context ,_eebgg Evaluator ,_gcgd ,_becca string )Result {_ffbfg ,_dabb :=_gdg .ParseCellReference (_gcgd );
if _dabb !=nil {return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gcgd ,_dabb .Error ()));
};_gccfg ,_bdacf :=_ffbfg .ColumnIdx ,_ffbfg .RowIdx ;_gefbd ,_acbec :=_gdg .ParseCellReference (_becca );if _acbec !=nil {return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_becca ,_acbec .Error ()));
};_bceeg ,_gacaa :=_gefbd .ColumnIdx ,_gefbd .RowIdx ;_eaeb :=[][]Result {};for _debca :=_bdacf ;_debca <=_gacaa ;_debca ++{_egbbc :=[]Result {};for _ebfca :=_gccfg ;_ebfca <=_bceeg ;_ebfca ++{_gbcc :=_eaaec .Cell (_c .Sprintf ("\u0025\u0073\u0025\u0064",_gdg .IndexToColumn (_ebfca ),_debca ),_eebgg );
_egbbc =append (_egbbc ,_gbcc );};_eaeb =append (_eaeb ,_egbbc );};if len (_eaeb )==1{if len (_eaeb [0])==1{return _eaeb [0][0];};return MakeListResult (_eaeb [0]);};return MakeArrayResult (_eaeb );};func (_gdgedc PrefixVerticalRange )verticalRangeReference (_cbcgeb string )string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_cbcgeb ,_gdgedc ._cgbfd ,_gdgedc ._gadf );
};func _bbfbg (_dbfba ,_dddgg ,_adfbd Reference )string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dbfba .Value ,_dddgg .Value ,_adfbd .Value );};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_abcga :=[]float64 {};
for _ ,_cfed :=range args {switch _cfed .Type {case ResultTypeString :_addaf :=_cfed .AsNumber ();if _addaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_abcga =append (_abcga ,_addaf .ValueNumber );case ResultTypeList :_ebfa :=LCM (_cfed .ValueList );if _ebfa .Type !=ResultTypeNumber {return _ebfa ;};_abcga =append (_abcga ,_ebfa .ValueNumber );case ResultTypeNumber :_abcga =append (_abcga ,_cfed .ValueNumber );
case ResultTypeEmpty :case ResultTypeError :return _cfed ;};};if len (_abcga )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if _abcga [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_abcga )==1{return MakeNumberResult (_abcga [0]);
};_cfge :=_abcga [0];for _gbffa :=1;_gbffa < len (_abcga );_gbffa ++{if _abcga [_gbffa ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_cfge =_efaf (_cfge ,_abcga [_gbffa ]);};return MakeNumberResult (_cfge );};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_cddc :=args [0].AsNumber ();_fbbb :=args [1].AsNumber ();if _cddc .Type !=ResultTypeNumber ||_fbbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};if _fbbb .ValueNumber < _cddc .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");
};_cceff :=int64 (_cddc .ValueNumber );_baaf :=int64 (_fbbb .ValueNumber );return MakeNumberResult (float64 (_baga .Int63n (_baaf -_cceff +1)+_cceff ));};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _fdff (args ,true )};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_eggfd (args ,_dgcfg ));};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_bgfd NamedRangeRef )Update (q *_ed .UpdateQuery )Expression {return _bgfd };

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_gd .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_eadac :v };};func _abg (_eaba ,_cgf ,_dggf ,_dcfa int )int {if !_ffag (_dcfa ){return _dggf ;};_ceag :=_dggf ;_dac :=_acc (_eaba ,_cgf );if _ceag > 30||_dggf >=_dac ||_ceag >=_dac {_ceag =30;
};return _ceag ;};var _geadb =map[string ]Function {};func init (){_agec ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );
RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );
RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );
RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_dgbfg :=len (args );if _dgbfg !=5&&_dgbfg !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_adadf ,_caae ,_cccc :=_cbeg (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _cccc .Type ==ResultTypeError {return _cccc ;};_gaag ,_cccc :=_abgc (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");
if _cccc .Type ==ResultTypeError {return _cccc ;};if _gaag >=_adadf {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_acgf :=args [3].ValueNumber ;if _acgf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gefg :=args [4].ValueNumber ;if _gefg <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};_abcgb :=0;if _dgbfg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_abcgb =int (args [5].ValueNumber );if !_dbgg (_abcgb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");
};};_gaagg ,_cccc :=_efec (_gaag ,_caae ,_abcgb );if _cccc .Type ==ResultTypeError {return _cccc ;};_dgceb ,_cccc :=_efec (_gaag ,_adadf ,_abcgb );if _cccc .Type ==ResultTypeError {return _cccc ;};_eaca ,_cccc :=_efec (_adadf ,_caae ,_abcgb );if _cccc .Type ==ResultTypeError {return _cccc ;
};_ecaf :=1+_gaagg *_acgf ;_ecaf /=_gefg /100+_dgceb *_acgf ;_ecaf --;_ecaf /=_eaca ;return MakeNumberResult (_ecaf );};var _cg =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_ga .Pi );};func _gfcae (_eeafd ,_ebfg float64 )float64 {_eeafd =_ga .Trunc (_eeafd );
_ebfg =_ga .Trunc (_ebfg );if _eeafd ==0{return _ebfg ;};if _ebfg ==0{return _eeafd ;};for _eeafd !=_ebfg {if _eeafd > _ebfg {_eeafd =_eeafd -_ebfg ;}else {_ebfg =_ebfg -_eeafd ;};};return _eeafd ;};type yyParserImpl struct{_dfefe yySymType ;_geacg [_adece ]yySymType ;
_deac int ;};

// Eval evaluates and returns the result of an error expression.
func (_dag Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_dag ._gec )};func _de (_dg BinOpType ,_bed ,_cfd []Result )Result {_ead :=[]Result {};for _gaa :=range _bed {_eg :=_bed [_gaa ].AsNumber ();_ef :=_cfd [_gaa ].AsNumber ();
if _eg .Type !=ResultTypeNumber ||_ef .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _dg {case BinOpTypePlus :_ead =append (_ead ,MakeNumberResult (_eg .ValueNumber +_ef .ValueNumber ));case BinOpTypeMinus :_ead =append (_ead ,MakeNumberResult (_eg .ValueNumber -_ef .ValueNumber ));case BinOpTypeMult :_ead =append (_ead ,MakeNumberResult (_eg .ValueNumber *_ef .ValueNumber ));
case BinOpTypeDiv :if _ef .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ead =append (_ead ,MakeNumberResult (_eg .ValueNumber /_ef .ValueNumber ));case BinOpTypeExp :_ead =append (_ead ,MakeNumberResult (_ga .Pow (_eg .ValueNumber ,_ef .ValueNumber )));
case BinOpTypeLT :_ead =append (_ead ,MakeBoolResult (_eg .ValueNumber < _ef .ValueNumber ));case BinOpTypeGT :_ead =append (_ead ,MakeBoolResult (_eg .ValueNumber > _ef .ValueNumber ));case BinOpTypeEQ :_ead =append (_ead ,MakeBoolResult (_eg .ValueNumber ==_ef .ValueNumber ));
case BinOpTypeLEQ :_ead =append (_ead ,MakeBoolResult (_eg .ValueNumber <=_ef .ValueNumber ));case BinOpTypeGEQ :_ead =append (_ead ,MakeBoolResult (_eg .ValueNumber >=_ef .ValueNumber ));case BinOpTypeNE :_ead =append (_ead ,MakeBoolResult (_eg .ValueNumber !=_ef .ValueNumber ));
default:return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_dg ));};};return MakeListResult (_ead );};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_gd .NewReader (s ));};var _bagcdd =[...]int {1};func _feed (_bfae ,_ecc ,_abcb ,_gbbc float64 ,_agca int )float64 {var _dacb float64 ;if _bfae ==0{_dacb =_gbbc +_abcb *_ecc ;
}else {_bafd :=_ga .Pow (1+_bfae ,_ecc );if _agca ==1{_dacb =_gbbc *_bafd +_abcb *(1+_bfae )*(_bafd -1)/_bfae ;}else {_dacb =_gbbc *_bafd +_abcb *(_bafd -1)/_bfae ;};};return -_dacb ;};func _fbbcd (){_fbef =_cb .MustCompile ("\u005e\u0030\u002b\u0024");
_eddb =_cb .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_dfdg =_cb .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");
_fgefb =_cb .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_bbdd =_cb .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");
_egbg =_cb .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_gedga =_cb .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");
_acbc =_cb .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_bcfce =_cb .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");
_fdaa =_cb .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");
_aaagd =_cb .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");
_ebccb =_cb .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_fdbf +_fdbf +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_fdbf +_fdbf +"\u0029\u002b\u0059+\u0024");_fcee =_cb .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_fdbf +_fdbf +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_fdbf +_fdbf +"\u0029\u002b\u0059+\u0024");
_acdf =_cb .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_dcdfgc =_cb .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");
};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_eeea :=args [0].AsNumber ();if _eeea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};var _ccfed float64 ;_febbf :=args [1].AsNumber ();if _febbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ccfed =_febbf .ValueNumber ;if _ccfed < 0&&_eeea .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");
};_dbgfg :=_eeea .ValueNumber ;_dbgfg ,_adff :=_ga .Modf (_dbgfg /_ccfed );if _adff !=0{if _eeea .ValueNumber < 0&&_adff < 0{_dbgfg --;};};return MakeNumberResult (_dbgfg *_ccfed );};func _gg (_aed ,_ea [][]Result )bool {if len (_aed )!=len (_ea ){return false ;
};for _fbd :=range _aed {if len (_aed [_fbd ])!=len (_ea [_fbd ]){return false ;};};return true ;};var _cdfe =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};
var _fcde =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_gceg ,_aggb :=_fbcf ("\u0046\u0049\u004e\u0044",args );if _aggb .Type !=ResultTypeEmpty {return _aggb ;};_eebg :=_gceg ._baffb ;if _eebg ==""{return MakeNumberResult (1.0);
};_fdfgc :=_gceg ._bcde ;_fdba :=_gceg ._daae -1;_feefa :=1;_afag :=0;for _ddce :=range _fdfgc {if _ddce !=0{_eeafc :=1;if _ddce -_afag > 1{_eeafc =2;};_feefa +=_eeafc ;};if _feefa > _fdba {_bcag :=_gd .Index (_fdfgc [_ddce :],_eebg );if _bcag ==0{return MakeNumberResult (float64 (_feefa ));
};};_afag =_ddce ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func _cbagb (_abgeg ,_gecg int )string {const TOKSTART =4;if !_fbcad {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";
};for _ ,_aaaa :=range _deda {if _aaaa ._gfaaa ==_abgeg &&_aaaa ._deec ==_gecg {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_aaaa ._gage ;};};_baaae :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_efebc (_gecg );
_cgbge :=make ([]int ,0,4);_fbab :=_aeefd [_abgeg ];for _fegdf :=TOKSTART ;_fegdf -1< len (_abdac );_fegdf ++{if _cacaf :=_fbab +_fegdf ;_cacaf >=0&&_cacaf < _cbbb &&_egda [_ecdb [_cacaf ]]==_fegdf {if len (_cgbge )==cap (_cgbge ){return _baaae ;};_cgbge =append (_cgbge ,_fegdf );
};};if _cdfe [_abgeg ]==-2{_cdff :=0;for _ecbg [_cdff ]!=-1||_ecbg [_cdff +1]!=_abgeg {_cdff +=2;};for _cdff +=2;_ecbg [_cdff ]>=0;_cdff +=2{_ggecc :=_ecbg [_cdff ];if _ggecc < TOKSTART ||_ecbg [_cdff +1]==0{continue ;};if len (_cgbge )==cap (_cgbge ){return _baaae ;
};_cgbge =append (_cgbge ,_ggecc );};if _ecbg [_cdff +1]!=0{return _baaae ;};};for _bbcab ,_gdgce :=range _cgbge {if _bbcab ==0{_baaae +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_baaae +="\u0020\u006f\u0072\u0020";};
_baaae +=_efebc (_gdgce );};return _baaae ;};func _bgff (_eegbe ,_fega []string )[]string {for _ ,_dceg :=range _fega {_eegbe =append (_eegbe ,_dceg );};return _eegbe ;};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fba :=args [0];switch _fba .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
case ResultTypeString :_gabc :=0.0;_beb :=0.0;for _ ,_bcfd :=range _fba .ValueString {_ceccf :=0.0;switch _bcfd {case 'I':_ceccf =1;case 'V':_ceccf =5;case 'X':_ceccf =10;case 'L':_ceccf =50;case 'C':_ceccf =100;case 'D':_ceccf =500;case 'M':_ceccf =1000;
};_gabc +=_ceccf ;switch {case _beb ==_ceccf &&(_beb ==5||_beb ==50||_beb ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_beb ==_ceccf :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");
};if _beb < _ceccf {_gabc -=2*_beb ;};_beb =_ceccf ;};return MakeNumberResult (_gabc );case ResultTypeError :return _fba ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fba .Type ));
};};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_fcbf :=_gd .Split (v ,"\u003a");if len (_fcbf )!=2{return nil ;};if _fcbf [0]> _fcbf [1]{_fcbf [0],_fcbf [1]=_fcbf [1],_fcbf [0];};return VerticalRange {_bcgec :_fcbf [0],_febed :_fcbf [1]};};const _afd ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";


// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bgcec :=args [0].AsNumber ();if _bgcec .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cecg ,_edadf :=_ga .Modf (_bgcec .ValueNumber );if _edadf < 0{_cecg --;};return MakeNumberResult (_cecg );};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gbef :=args [0];if _gbef .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cffb :=len (_gbef .ValueArray );for _ ,_fgff :=range _gbef .ValueArray {if len (_fgff )!=_cffb {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");
};};return MakeNumberResult (_bedc (_gbef .ValueArray ));};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_ceaa :=len (args );if _ceaa < 2||_ceaa > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_agedb :=args [0];if _agedb .Type !=ResultTypeArray &&_agedb .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_bagb :=args [1].AsNumber ();if _bagb .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_bdac :=int (_bagb .ValueNumber )-1;_gddff :=-1;if _ceaa ==3&&args [2].Type !=ResultTypeEmpty {_dcgg :=args [2].AsNumber ();if _dcgg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_gddff =int (_dcgg .ValueNumber )-1;};if _bdac ==-1&&_gddff ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};var _gace []Result ;if _agedb .Type ==ResultTypeArray {_gbc :=_agedb .ValueArray ;if _bdac < -1||_bdac >=len (_gbc ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _bdac ==-1{if _gddff >=len (_gbc [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_ecgd :=[][]Result {};for _ ,_abcgc :=range _gbc {_bdfa :=_abcgc [_gddff ];
if _bdfa .Type ==ResultTypeEmpty {_bdfa =MakeNumberResult (0);};_ecgd =append (_ecgd ,[]Result {_bdfa });};return MakeArrayResult (_ecgd );};_gace =_gbc [_bdac ];}else {_aabb :=_agedb .ValueList ;if _bdac < -1||_bdac >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _bdac ==-1{if _gddff >=len (_aabb ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_daac :=_aabb [_gddff ];if _daac .Type ==ResultTypeEmpty {_daac =MakeNumberResult (0);
};return _daac ;};_gace =_aabb ;};if _gddff < -1||_gddff > len (_gace ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _gddff ==-1{_acaf :=[]Result {};
for _ ,_fdfba :=range _gace {if _fdfba .Type ==ResultTypeEmpty {_acaf =append (_acaf ,MakeNumberResult (0));}else {_acaf =append (_acaf ,_fdfba );};};return MakeArrayResult ([][]Result {_acaf });};_daaca :=_gace [_gddff ];if _daaca .Type ==ResultTypeEmpty {return MakeNumberResult (0);
};return _daaca ;};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_cag ,_ae Expression ;_be BinOpType ;};

// Reference returns a string reference value to a vertical range.
func (_agdg VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_agdg .verticalRangeReference ()};};type tokenType int ;const _cfbg int =30;

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfea :=args [0];if _gfea .Type ==ResultTypeNumber {return _gfea ;};if _gfea .Type ==ResultTypeString {_eeag ,_fgfdb :=_fb .ParseFloat (_gfea .Value (),64);if _fgfdb ==nil {return MakeNumberResult (_eeag );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");
};var _ggegd _bb .Mutex ;

// Reference returns an invalid reference for ConstArrayExpr.
func (_bgcb ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eegd :=args [0].AsNumber ();if _eegd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eebe :=0;if len (args )> 1{_dffg :=args [1];if _dffg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_eebe =int (_dffg .ValueNumber );if _eebe < 0{_eebe =0;}else if _eebe > 4{_eebe =4;};};_ceda :=_abcaa ;switch _eebe {case 1:_ceda =_gddfc ;case 2:_ceda =_agbg ;case 3:_ceda =_gfggc ;case 4:_ceda =_fcde ;};_dccec :=_ga .Trunc (_eegd .ValueNumber );_acdfd :=_b .Buffer {};
for _ ,_ebgf :=range _ceda {for _dccec >=_ebgf ._gdgda {_acdfd .WriteString (_ebgf ._cgcb );_dccec -=_ebgf ._gdgda ;};};return MakeStringResult (_acdfd .String ());};

// Bool is a boolean expression.
type Bool struct{_dee bool };func _cbcc (_abcgf string )*criteriaRegex {_cbab :=&criteriaRegex {};if _abcgf ==""{return _cbab ;};if _fdccf :=_bacad .FindStringSubmatch (_abcgf );len (_fdccf )> 1{_cbab ._dgabf =_bbfd ;_cbab ._cceffc =_fdccf [1];}else if _dbfc :=_ceacc .FindStringSubmatch (_abcgf );
len (_dbfc )> 1{_cbab ._dgabf =_bbfd ;_cbab ._cceffc =_dbfc [1];}else if _gaed :=_gcedc .FindStringSubmatch (_abcgf );len (_gaed )> 1{_cbab ._dgabf =_cecbb ;_cbab ._cceffc =_gaed [1];}else if _cdacd :=_daacd .FindStringSubmatch (_abcgf );len (_cdacd )> 1{_cbab ._dgabf =_bgebe ;
_cbab ._cceffc =_cdacd [1];}else if _faea :=_fdggg .FindStringSubmatch (_abcgf );len (_faea )> 1{_cbab ._dgabf =_befcg ;_cbab ._cceffc =_faea [1];}else if _eceeb :=_ccecb .FindStringSubmatch (_abcgf );len (_eceeb )> 1{_cbab ._dgabf =_bafda ;_cbab ._cceffc =_eceeb [1];
};return _cbab ;};func _bacgg (_efcb []Result )Result {_ege :=_efcb [0].ValueList ;_abgd :=len (_ege );switch len (_efcb ){case 1:_fcgae :=[]Result {};for _ ,_ceccb :=range _ege {_fcgae =append (_fcgae ,MakeBoolResult (_ceccb .ValueNumber !=0));};return MakeListResult (_fcgae );
case 2:_gfcgg :=_efcb [1];switch _gfcgg .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_cdfaa :=[]Result {};for _ ,_adaf :=range _ege {var _dage Result ;if _adaf .ValueNumber ==0{_dage =MakeBoolResult (false );}else {_dage =_gfcgg ;};
_cdfaa =append (_cdfaa ,_dage );};return MakeListResult (_cdfaa );case ResultTypeList :_fdgd :=_ageea (_gfcgg ,_abgd );_gdgga :=[]Result {};for _cfbbf ,_dbfbb :=range _ege {var _cbcg Result ;if _dbfbb .ValueNumber ==0{_cbcg =MakeBoolResult (false );}else {_cbcg =_fdgd [_cfbbf ];
};_gdgga =append (_gdgga ,_cbcg );};return MakeListResult (_gdgga );case ResultTypeArray :_egdfa :=_bagfb (_gfcgg ,len (_gfcgg .ValueArray ),_abgd );_faca :=[][]Result {};for _ ,_cbdaca :=range _egdfa {_gbca :=[]Result {};for _gded ,_ceff :=range _ege {var _eagdg Result ;
if _ceff .ValueNumber ==0{_eagdg =MakeBoolResult (false );}else {_eagdg =_cbdaca [_gded ];};_gbca =append (_gbca ,_eagdg );};_faca =append (_faca ,_gbca );};return MakeArrayResult (_faca );};case 3:_ddfe :=_efcb [1];_gccf :=_efcb [2];_facg :=_ebec (_ddfe );
_ffba :=_ebec (_gccf );if _facg &&_ffba {_dgeb :=[]Result {};for _ ,_acbeb :=range _ege {var _ddcg Result ;if _acbeb .ValueNumber ==0{_ddcg =_gccf ;}else {_ddcg =_ddfe ;};_dgeb =append (_dgeb ,_ddcg );};return MakeListResult (_dgeb );};if _ddfe .Type !=ResultTypeArray &&_gccf .Type !=ResultTypeArray {_dfca :=_ageea (_ddfe ,_abgd );
_fedca :=_ageea (_gccf ,_abgd );_agce :=[]Result {};for _ffecg ,_cdac :=range _ege {var _dege Result ;if _cdac .ValueNumber ==0{_dege =_fedca [_ffecg ];}else {_dege =_dfca [_ffecg ];};_agce =append (_agce ,_dege );};return MakeListResult (_agce );};_eabdc ,_dfb :=len (_ddfe .ValueArray ),len (_gccf .ValueArray );
_cgbgb ,_befb :=_eabdc ,_dfb ;if _dfb > _cgbgb {_cgbgb ,_befb =_befb ,_cgbgb ;};_gggga :=_bagfb (_ddfe ,_cgbgb ,_abgd );_aebdd :=_bagfb (_gccf ,_cgbgb ,_abgd );_acaea :=[][]Result {};for _fcbc :=0;_fcbc < _cgbgb ;_fcbc ++{_cbdb :=[]Result {};for _dbcg ,_cad :=range _ege {var _adbdc Result ;
if _cad .ValueNumber ==0{if _fcbc < _dfb {_adbdc =_aebdd [_fcbc ][_dbcg ];}else {_adbdc =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _fcbc < _eabdc {_adbdc =_gggga [_fcbc ][_dbcg ];}else {_adbdc =MakeErrorResultType (ErrorTypeNA ,"");};};_cbdb =append (_cbdb ,_adbdc );
};_acaea =append (_acaea ,_cbdb );};return MakeArrayResult (_acaea );};return MakeErrorResult ("");};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_ggcad ,_gcedd Expression };

// Reference returns an invalid reference for Number.
func (_edgcb Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfaab :=args [0].AsNumber ();_defd :=args [1].AsNumber ();if _cfaab .Type !=ResultTypeNumber ||_defd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gaaf :=_ga .Trunc (_cfaab .ValueNumber );_gdgf :=_ga .Trunc (_defd .ValueNumber );if _gaaf < _gdgf {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");
};if _gaaf ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_gaaf +_gdgf -1);args [1]=MakeNumberResult (_gaaf -1);return Combin (args );};func _dfaf (_adeba ,_egac ,_acfc ,_ffdf float64 ,_gbaga int )float64 {var _cebf float64 ;if _adeba ==0{_cebf =(_acfc +_ffdf )/_egac ;
}else {_bdcg :=_ga .Pow (1+_adeba ,_egac );if _gbaga ==1{_cebf =(_ffdf *_adeba /(_bdcg -1)+_acfc *_adeba /(1-1/_bdcg ))/(1+_adeba );}else {_cebf =_ffdf *_adeba /(_bdcg -1)+_acfc *_adeba /(1-1/_bdcg );};};return -_cebf ;};var _egda =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};


// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_aaefe :=args [0].AsNumber ();_fefb :=args [1].AsNumber ();_afbaf :=args [2].AsNumber ();_fbdag :=args [3].ListValues ();if _aaefe .Type !=ResultTypeNumber ||_fefb .Type !=ResultTypeNumber ||_afbaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_cdccc :=float64 (0);for _gaaag ,_cfcd :=range _fbdag {_cdccc +=_cfcd .ValueNumber *_ga .Pow (_aaefe .ValueNumber ,_fefb .ValueNumber +float64 (_gaaag )*_afbaf .ValueNumber );};return MakeNumberResult (_cdccc );};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_ecee ,_fcec :=_ccfaa (args ,false );if _fcec ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_ecee /_fcec );};

// Update returns the same object as updating sheet references does not affect String.
func (_abde String )Update (q *_ed .UpdateQuery )Expression {return _abde };

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bfbfb :=args [0].AsNumber ();_bbca :=args [1].AsNumber ();if _bfbfb .Type !=ResultTypeNumber ||_bbca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _bbca .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_ga .Trunc (_bfbfb .ValueNumber /_bbca .ValueNumber ));
};

// Reference returns an invalid reference for Error.
func (_gfgg Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };type couponArgs struct{_gab float64 ;_bac float64 ;_aef int ;_fbe int ;};var _gfggc =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func _ffd (_bbbb float64 )bool {return _bbbb ==1||_bbbb ==2||_bbbb ==4};const (_faed rmode =iota ;_dgfdb ;_gdbg ;);

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };
case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };
case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };
default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};func _aacag (_gfbfd Reference ,_ecca Context )bool {return _ecca .Sheet (_gfbfd .Value )==InvalidReferenceContext ;};const _cefb =57367;
func _acce (_dcff []Result ,_feef string )(*durationArgs ,Result ){_afba :=len (_dcff );if _afba !=5&&_afba !=6{return nil ,MakeErrorResult (_feef +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bdbf ,_ebcc ,_bcge :=_cbeg (_dcff [0],_dcff [1],_feef );if _bcge .Type ==ResultTypeError {return nil ,_bcge ;};_gae :=_dcff [2];if _gae .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_feef +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_bfbd :=_gae .ValueNumber ;if _bfbd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_baff :=_dcff [3];if _baff .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_feef +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_dadg :=_baff .ValueNumber ;if _dadg < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_dcga :=_dcff [4];if _dcga .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_feef +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gaea :=float64 (int (_dcga .ValueNumber ));if !_ffd (_gaea ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_afeg :=0;if _afba ==6&&_dcff [5].Type !=ResultTypeEmpty {_cbca :=_dcff [5];
if _cbca .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_feef +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_afeg =int (_cbca .ValueNumber );
if !_dbgg (_afeg ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_feef );};};return &durationArgs {_bdbf ,_ebcc ,_bfbd ,_dadg ,_gaea ,_afeg },_eed ;
};

// Eval evaluates and returns a boolean.
func (_fd Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_fd ._dee )};const _gebb =57355;var _gddfc =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_gfcga :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfcga =int (args [1].ValueNumber );if _gfcga < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");
};if _gfcga ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_eceea :=args [0].Value ();
_ccbd :=len (_eceea );if _gfcga > _ccbd {return MakeStringResult (_eceea );};return MakeStringResult (_eceea [_ccbd -_gfcga :_ccbd ]);};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_aebd :=len (args );if _aebd < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_effe :=args [0].ValueNumber ;if _effe ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cecc :=[]float64 {};for _ ,_dbcd :=range args [1:]{switch _dbcd .Type {case ResultTypeNumber :_cecc =append (_cecc ,_dbcd .ValueNumber );case ResultTypeArray ,ResultTypeList :_dfee :=_acddd (_dbcd );
for _ ,_babe :=range _dfee {for _ ,_fedb :=range _babe {if _fedb .Type ==ResultTypeNumber &&!_fedb .IsBoolean {_cecc =append (_cecc ,_fedb .ValueNumber );};};};};};_acee :=0.0;for _edeg ,_aabd :=range _cecc {_acee +=_aabd /_ga .Pow (1+_effe ,float64 (_edeg )+1);
};return MakeNumberResult (_acee );};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_aebg :=len (args );if _aebg !=6&&_aebg !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bcdb ,_cdbcc ,_bgfbf :=_cbeg (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _bgfbf .Type ==ResultTypeError {return _bgfbf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ddebb :=args [2].ValueNumber ;if _ddebb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_egad :=args [3].ValueNumber ;if _egad < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afed :=args [4].ValueNumber ;if _afed <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dgbc :=args [5];if _dgbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dgce :=_dgbc .ValueNumber ;if !_ffd (_dgce ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_fdad :=0;if _aebg ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdad =int (args [6].ValueNumber );if !_dbgg (_fdad ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");
};};_bgbba ,_bgfbf :=_dgbg (_bcdb ,_cdbcc ,_ddebb ,_egad ,_afed ,_dgce ,_fdad );if _bgfbf .Type ==ResultTypeError {return _bgfbf ;};return MakeNumberResult (_bgbba );};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfaaf :=args [0].ValueNumber ;if _dfaaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cdfb :=args [1].ValueNumber ;if _cdfb <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aacd :=args [2].ValueNumber ;if _aacd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");
};return MakeNumberResult ((_ga .Log10 (_aacd )-_ga .Log10 (_cdfb ))/_ga .Log10 (1+_dfaaf ));};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_cggb ,_gegd :=_fbcf ("\u0046\u0049\u004e\u0044",args );if _gegd .Type !=ResultTypeEmpty {return _gegd ;};_gaceb :=_gd .ToLower (_cggb ._baffb );
_dfbg :=_gd .ToLower (_cggb ._bcde );if _gaceb ==""{return MakeNumberResult (1.0);};_dceb :=_cggb ._daae -1;_gdcaf :=1;_dcgba :=0;for _fffe :=range _dfbg {if _fffe !=0{_fbed :=1;if _fffe -_dcgba > 1{_fbed =2;};_gdcaf +=_fbed ;};if _gdcaf > _dceb {_cfdba :=_a .Index (_gaceb ,_dfbg [_fffe :]);
if _cfdba ==0{return MakeNumberResult (float64 (_gdcaf ));};};_dcgba =_fffe ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );
RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );
RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );
RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );
RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );
RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );
RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );
RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );
RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );
RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );
RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );
RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );
RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );
};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_bdaf PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_dfbc :=_bdaf ._aabgc .Reference (ctx ,ev );switch _dfbc .Type {case ReferenceTypeSheet :if _aacag (_dfbc ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dfbc .Value ));
};_ccff :=_bdaf .horizontalRangeReference (_dfbc .Value );if _dcgad ,_fggce :=ev .GetFromCache (_ccff );_fggce {return _dcgad ;};_acbbg :=ctx .Sheet (_dfbc .Value );_ceddg ,_eebb :=_bdfd (_acbbg ,_bdaf ._ebfag ,_bdaf ._feddb );_eacd :=_ecdg (_acbbg ,ev ,_ceddg ,_eebb );
ev .SetCache (_ccff ,_eacd );return _eacd ;default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dfbc .Type ));
};};func _gbbd (_aaga ,_ddc []float64 ,_ageg float64 )Result {_acga :=false ;_ffedf :=false ;for _feeg :=0;_feeg < len (_aaga );_feeg ++{if _aaga [_feeg ]> 0{_acga =true ;};if _aaga [_feeg ]< 0{_ffedf =true ;};};if !_acga ||!_ffedf {return MakeErrorResultType (ErrorTypeNum ,"");
};_bgaee :=_ageg ;_fbdd :=1e-10;_cdcec :=0;_adf :=50;_daaa :=false ;for {_ced :=_bagg (_aaga ,_ddc ,_bgaee );_ffca :=_bgaee -_ced /_efga (_aaga ,_ddc ,_bgaee );_aead :=_ga .Abs (_ffca -_bgaee );_bgaee =_ffca ;_cdcec ++;if _aead <=_fbdd ||_ga .Abs (_ced )<=_fbdd {break ;
};if _cdcec > _adf {_daaa =true ;break ;};};if _daaa ||_ga .IsNaN (_bgaee )||_ga .IsInf (_bgaee ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_bgaee );};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ddgca :=args [0].AsNumber ();
if _ddgca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffced :=_ga .Signbit (_ddgca .ValueNumber );
_fcef ,_bdgg :=_ga .Modf (_ddgca .ValueNumber /2);_efcg :=_fcef *2;if _bdgg !=0{if !_ffced {_efcg +=2;}else {_efcg -=2;};};return MakeNumberResult (_efcg );};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};_ggfab :=args [0];if _ggfab .Type !=ResultTypeArray &&_ggfab .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_gdged :=_dgcc (args [1]);_beeg :=0;for _ ,_dfcg :=range _acddd (_ggfab ){for _ ,_ccdgb :=range _dfcg {if _ceeb (_ccdgb ,_gdged ){_beeg ++;};};};return MakeNumberResult (float64 (_beeg ));};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_eggfd (args ,_dede ))};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_eedeg string };

// Eval evaluates and returns the result of the cell reference.
func (_fbda CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_fbda ._ba ,ev )};const _agba =_e .Millisecond *1000;

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_egaca :=args [0].AsString ();if _egaca .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");
};_ggaaf :="\u0041\u0031";if len (args )==2{_abgf :=args [1].Ref ;if _abgf .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};_ggaaf =_abgf .Value ;};switch _egaca .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_dedf ,_cfafg :=_gdg .ParseCellReference (_ggaaf );if _cfafg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ggaaf );
};_gbdba :="\u0024"+_dedf .Column +"\u0024"+_fb .Itoa (int (_dedf .RowIdx ));if _dedf .SheetName !=""{_gbdba =_dedf .SheetName +"\u0021"+_gbdba ;};return MakeStringResult (_gbdba );case "\u0063\u006f\u006c":_ceaae ,_deag :=_gdg .ParseCellReference (_ggaaf );
if _deag !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ggaaf );};return MakeNumberResult (float64 (_ceaae .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_baa :=_gd .Contains (ctx .GetFormat (_ggaaf ),"\u005b\u0052\u0045D\u005d");
return MakeBoolResult (_baa );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_bddg :="\u0047";
_cfbe :=ctx .GetFormat (_ggaaf );if _cfbe =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_fbef .MatchString (_cfbe ){_bddg ="\u0046\u0030";}else if _cfbe =="\u0030\u0025"{_bddg ="\u0050\u0030";}else if _cfbe =="\u004d\u004d\u004d\u0020\u0044\u0044"{_bddg ="\u0044\u0032";
}else if _cfbe =="\u004d\u004d\u002fY\u0059"{_bddg ="\u0044\u0033";}else if _cfbe =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_cfbe =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_bddg ="\u0044\u0034";
}else if _cfbe =="\u004d\u004d\u005c\u002d\u0044\u0044"{_bddg ="\u0044\u0035";}else if _cfbe =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bddg ="\u0044\u0036";}else if _cfbe =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bddg ="\u0044\u0037";
}else if _cfbe =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_bddg ="\u0044\u0038";}else if _cfbe =="\u0048\u0048\u003aM\u004d"{_bddg ="\u0044\u0039";}else if _eddb .MatchString (_cfbe ){_bddg ="\u002e\u0030";}else if _dfdg .MatchString (_cfbe ){_bddg ="\u002e\u0030\u0028\u0029";
}else if _bcfce .MatchString (_cfbe ){_bddg ="\u0043\u0030";}else if _ebccb .MatchString (_cfbe )||_fcee .MatchString (_cfbe ){_bddg ="\u0044\u0031";}else if _bgcd :=_fgefb .FindStringSubmatch (_cfbe );len (_bgcd )> 1{_bddg ="\u0046"+_fb .Itoa (len (_bgcd [1]));
}else if _bfea :=_egbg .FindStringSubmatch (_cfbe );len (_bfea )> 1{_bddg ="\u002e"+_fb .Itoa (len (_bfea [2]));}else if _abfe :=_acbc .FindStringSubmatch (_cfbe );len (_abfe )> 1{_bddg ="\u0050"+_fb .Itoa (len (_abfe [2]));}else if _efaa :=_fdaa .FindStringSubmatch (_cfbe );
len (_efaa )> 1{_bddg ="\u0043"+_eccc (_efaa ,1);}else if _ecfa :=_aaagd .FindStringSubmatch (_cfbe );len (_ecfa )> 1{_bddg ="\u0043"+_eccc (_ecfa ,1);}else if _fae :=_gedga .FindStringSubmatch (_cfbe );len (_fae )> 1{_bddg ="\u002e"+_eccc (_fae ,1)+"\u0028\u0029";
}else if _ecbff :=_bbdd .FindStringSubmatch (_cfbe );len (_ecbff )> 1{_bddg ="\u002e"+_eccc (_ecbff ,1);}else if _cgaa :=_acdf .FindStringSubmatch (_cfbe );len (_cgaa )> 1{_bddg ="\u0053"+_eccc (_cgaa ,3);};if _bddg !="\u0047"&&_gd .Contains (_cfbe ,"\u005b\u0052\u0045D\u005d"){_bddg +="\u002d";
};return MakeStringResult (_bddg );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_cgcc :=ctx .GetFormat (_ggaaf );if _dcdfgc .MatchString (_cgcc ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_ggaaf ));
case "\u0070r\u006f\u0074\u0065\u0063\u0074":_gaefe :=0.0;if ctx .GetLocked (_ggaaf ){_gaefe =1.0;};return MakeNumberResult (_gaefe );case "\u0072\u006f\u0077":_ffde ,_faec :=_gdg .ParseCellReference (_ggaaf );if _faec !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ggaaf );
};return MakeNumberResult (float64 (_ffde .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");
};case "\u0077\u0069\u0064t\u0068":_ddgf ,_faeg :=_gdg .ParseCellReference (_ggaaf );if _faeg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ggaaf );};if _ddgf .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_ddgf .ColumnIdx )));
}else {return MakeNumberResult (ctx .Sheet (_ddgf .SheetName ).GetWidth (int (_ddgf .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_egaca .ValueString );
};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gggf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aebe :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_geagf :=args [2].ValueNumber ;if _geagf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbbe :=args [3].ValueNumber ;return MakeNumberResult (_dbbe *_gggf *(_aebe /_geagf -1));};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bfgdd :=args [0].ValueNumber ;if _bfgdd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};_gdea ,_daab :=_dbda (args [1],args [2],"\u0058\u004e\u0050\u0056");if _daab .Type ==ResultTypeError {return _daab ;};_adfb :=_gdea ._ffdc ;_ddff :=_gdea ._gcccd ;_cabc :=0.0;_babgc :=_ddff [0];for _dbcb ,_ffgg :=range _adfb {_cabc +=_ffgg /_ga .Pow (1+_bfgdd ,(_ddff [_dbcb ]-_babgc )/365);
};return MakeNumberResult (_cabc );};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_befbg :=_b .Buffer {};for _ ,_eecb :=range args {switch _eecb .Type {case ResultTypeString :_befbg .WriteString (_eecb .ValueString );case ResultTypeNumber :var _fggg string ;if _eecb .IsBoolean {if _eecb .ValueNumber ==0{_fggg ="\u0046\u0041\u004cS\u0045";
}else {_fggg ="\u0054\u0052\u0055\u0045";};}else {_fggg =_eecb .AsString ().ValueString ;};_befbg .WriteString (_fggg );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
};};return MakeStringResult (_befbg .String ());};type evCache struct{_dbe map[string ]Result ;_bgdd *_bb .Mutex ;};const _aab ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";


// LastRow returns 0 for the invalid reference context.
func (_aadc *ivr )LastRow (colFrom string )int {return 0};func _baea (_bdea yyLexer ,_gbffe *yySymType )(_eede ,_aaaga int ){_aaaga =0;_eede =_bdea .Lex (_gbffe );if _eede <=0{_aaaga =_bagcdd [0];goto _gcdc ;};if _eede < len (_bagcdd ){_aaaga =_bagcdd [_eede ];
goto _gcdc ;};if _eede >=_abcd {if _eede < _abcd +len (_aadf ){_aaaga =_aadf [_eede -_abcd ];goto _gcdc ;};};for _abbe :=0;_abbe < len (_gabe );_abbe +=2{_aaaga =_gabe [_abbe +0];if _aaaga ==_eede {_aaaga =_gabe [_abbe +1];goto _gcdc ;};};_gcdc :if _aaaga ==0{_aaaga =_aadf [1];
};if _fafbg >=3{_c .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_efebc (_aaaga ),uint (_eede ));};return _eede ,_aaaga ;};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_dab ,_efgc :=_acde (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _efgc .Type ==ResultTypeError {return _efgc ;};return MakeNumberResult (_gbdb (_dab ._gab ,_dab ._bac ,_dab ._aef ,_dab ._fbe ));};type Reference struct{Type ReferenceType ;
Value string ;};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_beaa :=args [0].AsString ();if _beaa .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeStringResult (_gd .ToUpper (_beaa .ValueString ));};func _becf (_cea string )bool {for _ ,_ac :=range _gee {_abe :=_ac .FindStringSubmatch (_cea );if len (_abe )> 1{return true ;};};return false ;};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_gdf Context ,formula string )Result ;SetCache (_bff string ,_geag Result );GetFromCache (_ceb string )(Result ,bool );LastEvalIsRef ()bool ;};type criteriaParsed struct{_efed bool ;_dcdfc float64 ;_ecfcb string ;_edaec *criteriaRegex ;
};func _faff (_dae ,_cbc int )int {switch _cbc {case 1:if _dbag (_dae ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};func _ag (_cbb Result )bool {if _cbb .Type ==ResultTypeString {return _cbb .ValueString =="";};return _cbb .ValueNumber ==0;
};func (_cebbe ReferenceType )String ()string {if _cebbe >=ReferenceType (len (_cbcd )-1){return _c .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_cebbe );};return _eccaa [_cbcd [_cebbe ]:_cbcd [_cebbe +1]];
};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_dgf ,_bfcg :=_acde (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _bfcg .Type ==ResultTypeError {return _bfcg ;};return MakeNumberResult (_gdcca (_dgf ._gab ,_dgf ._bac ,_dgf ._aef ,_dgf ._fbe ));
};func _bagg (_gefb ,_ffdd []float64 ,_cgb float64 )float64 {_bgcf :=_cgb +1;_cdbg :=_gefb [0];_aedf :=len (_gefb );_cded :=_ffdd [0];for _caed :=1;_caed < _aedf ;_caed ++{_cdbg +=_gefb [_caed ]/_ga .Pow (_bgcf ,(_ffdd [_caed ]-_cded )/365);};return _cdbg ;
};

// String returns a string representation of CellRef.
func (_gge CellRef )String ()string {return _gge ._ba };func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_fced :=args [0].AsNumber ();if _fced .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _fced .ValueNumber < 0{return MakeNumberResult (-1);}else if _fced .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// Reference returns a string reference value to a sheet.
func (_ddcb SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_ddcb ._egfab };};func _eggfd (_cefa []Result ,_aabag countMode )float64 {_ffeca :=0.0;for _ ,_bagcd :=range _cefa {switch _bagcd .Type {case ResultTypeNumber :if _aabag ==_dede ||(_aabag ==_edac &&!_bagcd .IsBoolean ){_ffeca ++;
};case ResultTypeList ,ResultTypeArray :_ffeca +=_eggfd (_bagcd .ListValues (),_aabag );case ResultTypeString :if _aabag ==_dede {_ffeca ++;};case ResultTypeEmpty :if _aabag ==_dgcfg {_ffeca ++;};};};return _ffeca ;};var _eaga =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };


// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _cbfaa (args ,_faed )};func _ageea (_bfgf Result ,_ccdg int )[]Result {_afeb :=[]Result {};switch _bfgf .Type {case ResultTypeList :_agecb :=_bfgf .ValueList ;_debgb :=len (_agecb );for _gggb :=0;_gggb < _ccdg ;
_gggb ++{if _gggb < _debgb {_afeb =append (_afeb ,_agecb [_gggb ]);}else {_afeb =append (_afeb ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _adbf :=0;_adbf < _ccdg ;_adbf ++{_afeb =append (_afeb ,_bfgf );
};};return _afeb ;};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_cfffg ,_bgdde :=_acce (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _bgdde .Type ==ResultTypeError {return _bgdde ;};_ecdd :=_cfffg ._efcda ;_gdb :=_cfffg ._ggf ;_fgfd :=_cfffg ._gef ;_gceb :=_cfffg ._aaee ;
_abef :=_cfffg ._beddg ;_cdd :=_cfffg ._gcad ;return _dbgff (_ecdd ,_gdb ,_fgfd ,_gceb ,_abef ,_cdd );};

// String returns a string representation of a range with prefix.
func (_bccga PrefixRangeExpr )String ()string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_bccga ._gegda .String (),_bccga ._eada .String (),_bccga ._cece .String ());};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_gec :v }};func _acddd (_edef Result )[][]Result {switch _edef .Type {case ResultTypeArray :return _edef .ValueArray ;case ResultTypeList :return [][]Result {_edef .ValueList };default:return [][]Result {};
};};

// Eval evaluates and returns a string.
func (_gcce String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_gcce ._eadac )};func (_cgceb Result )AsString ()Result {switch _cgceb .Type {case ResultTypeNumber :return MakeStringResult (_cgceb .Value ());default:return _cgceb ;
};};const _bfd ="\u005e\u0028\u0028"+_afd +"\u007c"+_bcc +"\u007c"+_fbdf +"\u007c"+_age +"\u0029\u0020\u0029\u003f";

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_ece ,_bcfc :=_cdfd (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _bcfc .Type ==ResultTypeError {return _bcfc ;};_gcbbd :=_ece ._cbee ;_gdgd :=_ece ._cagb ;_ffagb :=_ece ._dgbf ;_gccd :=_ece ._adced ;_aacf :=_ece ._gcef ;
_aaad :=_ece ._ffec ;if _aaad >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");
};_dfcff :=_ece ._feag ;_gaaa :=1.0/_aaad ;_gffd :=2.5;if _gaaa < 3{_gffd =1;}else if _gaaa < 5{_gffd =1.5;}else if _gaaa <=6{_gffd =2;};_aaad *=_gffd ;_cca ,_ggcd :=_efec (_gdgd ,_ffagb ,_dfcff );if _ggcd .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");
};_faaaa :=_ggec (_cca *_aaad *_gcbbd );_gcbbd -=_faaaa ;_ddfdd :=_gcbbd -_gccd ;for _gggeg :=0;_gggeg < _aacf ;_gggeg ++{_faaaa =_ggec (_aaad *_gcbbd );_ddfdd -=_faaaa ;if _ddfdd < 0{switch _aacf -_gggeg {case 0:case 1:return MakeNumberResult (_ggec (_gcbbd *0.5));
default:return MakeNumberResult (0);};};_gcbbd -=_faaaa ;};return MakeNumberResult (_faaaa );};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gbgf ,_gbfe ,_aebb :=_cbeg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _aebb .Type ==ResultTypeError {return _aebb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aaadb :=_gbfe -_gbgf ;if _aaadb > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_dgfd :=args [2].ValueNumber ;if _dgfd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dddc :=(100-_dgfd )/_dgfd ;_fede :=360/_aaadb ;return MakeNumberResult (_dddc *_fede );};func _deaf (_ffce ,_cacf ,_bbgbb ,_cfe ,_bfdg float64 )float64 {var _gdbe float64 ;_eadd :=_bfdg /_bbgbb ;if _eadd >=1{_eadd =1;if _cfe ==1{_gdbe =_ffce ;}else {_gdbe =0;
};}else {_gdbe =_ffce *_ga .Pow (1-_eadd ,_cfe -1);};_gfaa :=_ffce *_ga .Pow (1-_eadd ,_cfe );var _ccfe float64 ;if _gfaa < _cacf {_ccfe =_gdbe -_cacf ;}else {_ccfe =_gdbe -_gfaa ;};if _ccfe < 0{_ccfe =0;};return _ccfe ;};const _gabcf =57362;func _fbcf (_fcdea string ,_dcca []Result )(*parsedSearchObject ,Result ){_ebcgdb :=len (_dcca );
if _ebcgdb !=2&&_ebcgdb !=3{return nil ,MakeErrorResult (_fcdea +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_agab :=_dcca [0];if _agab .Type ==ResultTypeError {return nil ,_agab ;};if _agab .Type !=ResultTypeString &&_agab .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_dcbd :=_dcca [1];if _dcbd .Type ==ResultTypeError {return nil ,_dcbd ;};if _dcbd .Type !=ResultTypeString &&_dcbd .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");
};_efdba :=_dcbd .Value ();_aebc :=_agab .Value ();_gdeb :=1;if _ebcgdb ==3&&_dcca [2].Type !=ResultTypeEmpty {_egaf :=_dcca [2];if _egaf .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");
};_gdeb =int (_egaf .ValueNumber );if _gdeb < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};if _gdeb > len (_efdba ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};};return &parsedSearchObject {_aebc ,_efdba ,_gdeb },_eed ;};func _feg (_fded ,_bcg _e .Time )bool {_bdc :=_fded .Unix ();_cbe :=_bcg .Unix ();_bgaed :=_fded .Year ();_egdb :=_bcd (_bgaed ,_e .March ,1);if _dbag (_bgaed )&&_bdc < _egdb &&_cbe >=_egdb {return true ;
};var _bbgb =_bcg .Year ();var _adeb =_bcd (_bbgb ,_e .March ,1);return (_dbag (_bbgb )&&_cbe >=_adeb &&_bdc < _adeb );};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dbcdb :=args [0];_fdfbe :=args [1];if _fdfbe .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_fdfa :=args [2].AsNumber ();if _fdfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fgee :=false ;if len (args )==4{_accb :=args [3].AsNumber ();if _accb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _accb .ValueNumber ==0{_fgee =true ;};};_dcee :=-1;_eeefg :=false ;if len (_fdfbe .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");
};_cda :=_fdfbe .ValueArray [0];_gacb :for _bdbag ,_afbe :=range _cda {switch _dddd (_afbe ,_dbcdb ,false ,_fgee ){case _cffc :_dcee =_bdbag ;case _bfdd :_dcee =_bdbag ;_eeefg =true ;break _gacb ;};};if _dcee ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_eec :=int (_fdfa .ValueNumber )-1;if _eec < 0||_eec > len (_fdfbe .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_cda =_fdfbe .ValueArray [_eec ];
if _dcee < 0||_dcee >=len (_cda ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _eeefg ||!_fgee {return _cda [_dcee ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _fdff (args ,false )};

// Eval evaluates and returns the result of a constant array expression.
func (_ebd ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_gaac :=[][]Result {};for _ ,_gba :=range _ebd ._efa {_gfg :=[]Result {};for _ ,_dgb :=range _gba {_gfg =append (_gfg ,_dgb .Eval (ctx ,ev ));};_gaac =append (_gaac ,_gfg );};return MakeArrayResult (_gaac );
};func _fdcdc (){_bacad =_cb .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_ceacc =_cb .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_fdggg =_cb .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_ccecb =_cb .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");
_gcedc =_cb .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_daacd =_cb .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};func (_abedaa *Lexer )nextRaw ()*node {for len (_abedaa ._efbb )!=0{_bbcb :=<-_abedaa ._efbb [len (_abedaa ._efbb )-1];
if _bbcb !=nil {return _bbcb ;};_abedaa ._efbb =_abedaa ._efbb [0:len (_abedaa ._efbb )-1];};return <-_abedaa ._bcfgf ;};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fgcb :=args [0].AsString ();_abeda :=args [1].AsString ();if _fgcb .Type !=ResultTypeString ||_abeda .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};return MakeBoolResult (_fgcb .ValueString ==_abeda .ValueString );};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_acbg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egfd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eeaf :=args [2].ValueNumber ;if _eeaf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult ((_acbg -_egfd )/_eeaf );};

// Reference returns a string reference value to a range with prefix.
func (_ccfb PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_beeb :=_ccfb ._gegda .Reference (ctx ,ev );_ccbbb :=_ccfb ._eada .Reference (ctx ,ev );_aeada :=_ccfb ._cece .Reference (ctx ,ev );if _beeb .Type ==ReferenceTypeSheet &&_ccbbb .Type ==ReferenceTypeCell &&_aeada .Type ==ReferenceTypeCell {return MakeRangeReference (_bbfbg (_beeb ,_ccbbb ,_aeada ));
};return ReferenceInvalid ;};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_baga .Float64 ());
};func _accd (_abed string )(int ,int ,float64 ,bool ,bool ,Result ){_faab :="";_fca :=[]string {};for _gfe ,_bgaf :=range _faaa {_fca =_bgaf .FindStringSubmatch (_abed );if len (_fca )> 1{_faab =_gfe ;break ;};};if _faab ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bfa );
};_dagc :=_fca [1]=="";_fca =_fca [49:];_ffaf :=len (_fca );_fdfb :=_fca [_ffaf -1];_cefc :=_fdfb =="\u0061\u006d";_ddgc :=_fdfb =="\u0070\u006d";var _cdc ,_acef int ;var _edgg float64 ;var _fgb error ;switch _faab {case "\u0068\u0068":_cdc ,_fgb =_fb .Atoi (_fca [0]);
if _fgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bfa );};_acef =0;_edgg =0;case "\u0068\u0068\u003am\u006d":_cdc ,_fgb =_fb .Atoi (_fca [0]);if _fgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bfa );
};_acef ,_fgb =_fb .Atoi (_fca [2]);if _fgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bfa );};_edgg =0;case "\u006d\u006d\u003as\u0073":_cdc =0;_acef ,_fgb =_fb .Atoi (_fca [0]);if _fgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bfa );
};_edgg ,_fgb =_fb .ParseFloat (_fca [2],64);if _fgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bfa );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_cdc ,_fgb =_fb .Atoi (_fca [0]);if _fgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bfa );
};_acef ,_fgb =_fb .Atoi (_fca [2]);if _fgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bfa );};_edgg ,_fgb =_fb .ParseFloat (_fca [4],64);if _fgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bfa );
};};if _acef >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bfa );};if _cefc ||_ddgc {if _cdc > 12||_edgg >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bfa );}else if _cdc ==12{_cdc =0;};}else if _cdc >=24||_edgg >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bfa );
};return _cdc ,_acef ,_edgg ,_ddgc ,_dagc ,_eed ;};

// GetWidth returns 0 for the invalid reference context.
func (_gdfbc *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_dedaa NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_feca :=ctx .NamedRange (_dedaa ._eedeg );_daead :=_feca .Value ;if _gdbgc ,_bagdf :=ev .GetFromCache (_daead );_bagdf {return _gdbgc ;};_febbe :=_gd .Split (_daead ,"\u0021");if len (_febbe )!=2{return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_daead ));
};_gedbc :=ctx .Sheet (_febbe [0]);_aeefb :=_gd .Split (_febbe [1],"\u003a");switch len (_aeefb ){case 1:_afca :=ev .Eval (_gedbc ,_aeefb [0]);ev .SetCache (_daead ,_afca );return _afca ;case 2:_deaef :=_ecdg (_gedbc ,ev ,_aeefb [0],_aeefb [1]);ev .SetCache (_daead ,_deaef );
return _deaef ;};return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_feca .Type ));};const (ErrorTypeValue ErrorType =iota ;
ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_faede :=_bggfg (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _faede .Type !=ResultTypeEmpty {return _faede ;};_aaagc :=_gbab (args [1:]);_eafe :=_ga .MaxFloat64 ;_bcgc :=_acddd (args [0]);for _ ,_agfc :=range _aaagc {_egdbg :=_bcgc [_agfc ._abdb ][_agfc ._eefb ].ValueNumber ;
if _eafe > _egdbg {_eafe =_egdbg ;};};if _eafe ==_ga .MaxFloat64 {_eafe =0;};return MakeNumberResult (float64 (_eafe ));};var _ffdfg =[...]string {};func _ffeg (_ddbda ,_faaaf Expression )(Expression ,Expression ,error ){_dfcba ,_ddgab :=_ddbda .(CellRef );
if !_ddgab {return nil ,nil ,_g .New (_c .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_ddbda .String ()));};_gecd ,_ddgab :=_faaaf .(CellRef );if !_ddgab {return nil ,nil ,_g .New (_c .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_faaaf .String ()));
};_eaagc ,_aebfd :=_gdg .ParseCellReference (_dfcba ._ba );if _aebfd !=nil {return nil ,nil ,_aebfd ;};_bfaf ,_fdea :=_gdg .ParseCellReference (_gecd ._ba );if _fdea !=nil {return nil ,nil ,_fdea ;};_caccg :=false ;if _eaagc .RowIdx > _bfaf .RowIdx {_caccg =true ;
_eaagc .RowIdx ,_bfaf .RowIdx =_bfaf .RowIdx ,_eaagc .RowIdx ;};if _eaagc .ColumnIdx > _bfaf .ColumnIdx {_caccg =true ;_eaagc .ColumnIdx ,_bfaf .ColumnIdx =_bfaf .ColumnIdx ,_eaagc .ColumnIdx ;_eaagc .Column ,_bfaf .Column =_bfaf .Column ,_eaagc .Column ;
};if _caccg {return NewCellRef (_eaagc .String ()),NewCellRef (_bfaf .String ()),nil ;};return _ddbda ,_faaaf ,nil ;};var _fbef ,_fgefb ,_eddb ,_dfdg ,_bbdd ,_egbg ,_gedga ,_dcdfgc ,_acbc ,_bcfce ,_fdaa ,_aaagd ,_ebccb ,_fcee ,_acdf *_cb .Regexp ;const _gbdfa =57364;
func _bbegc (_fgdg ,_daa _e .Time ,_becfg ,_gdad int )_e .Time {_cbgd :=_daa ;_ccfg :=_fgdg .Year ()-_daa .Year ();_cbgd =_cbgd .AddDate (_ccfg ,0,0);if _fgdg .After (_cbgd ){_cbgd =_cbgd .AddDate (1,0,0);};_dfec :=-12/_becfg ;for _cbgd .After (_fgdg ){_cbgd =_cbgd .AddDate (0,_dfec ,0);
};return _cbgd ;};const _bdbg ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";const _ebcea =57377;

// EmptyExpr is an empty expression.
type EmptyExpr struct{};var _eed Result =MakeEmptyResult ();

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_acda :=len (args );if _acda < 5||_acda > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dcdc :=args [0].ValueNumber ;if _dcdc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afdb :=args [1].ValueNumber ;if _afdb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_acfcc :=args [2].ValueNumber ;if _acfcc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _acfcc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgbg :=args [3].ValueNumber ;if _fgbg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgbg :=args [4].ValueNumber ;if _fgbg > _cgbg {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");
};if _cgbg > _acfcc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_egcg :=2.0;if _acda > 5{if args [5].Type ==ResultTypeEmpty {_egcg =0.0;
}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egcg =args [5].ValueNumber ;if _egcg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};};_geb :=false ;if _acda > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_geb =args [6].ValueNumber !=0;};_ecbf :=0.0;_dgbbb :=_ga .Floor (_fgbg );_bdfc :=_ga .Ceil (_cgbg );if _geb {for _ffea :=_dgbbb +1;_ffea <=_bdfc ;_ffea ++{_addb :=_deaf (_dcdc ,_afdb ,_acfcc ,_ffea ,_egcg );if _ffea ==_dgbbb +1{_addb *=_ga .Min (_cgbg ,_dgbbb +1)-_fgbg ;
}else if _ffea ==_bdfc {_addb *=_cgbg +1-_bdfc ;};_ecbf +=_addb ;};}else {_ccgf :=_acfcc ;var _gffcf float64 ;if !_abca (_fgbg ,_ga .Floor (_fgbg )){if _egcg ==1{_fbcae :=_acfcc /2;if _fgbg > _fbcae ||_abca (_fgbg ,_fbcae ){_gffcf =_fgbg -_fbcae ;_fgbg =_fbcae ;
_cgbg -=_gffcf ;_ccgf ++;};};};if _egcg !=0{_dcdc -=_daec (_dcdc ,_afdb ,_acfcc ,_ccgf ,_fgbg ,_egcg );};_ecbf =_daec (_dcdc ,_afdb ,_acfcc ,_acfcc -_fgbg ,_cgbg -_fgbg ,_egcg );};return MakeNumberResult (_ecbf );};var _bgce float64 =25569.0;const (BinOpTypeUnknown BinOpType =iota ;
BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);func _egd (_fda ,_ggge int64 )float64 {return float64 (int (0.5+float64 ((_ggge -_fda )/86400)))};
const _fbbg ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";
func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cgce :=args [0].AsNumber ();if _cgce .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_daabe :=float64 (0);if len (args )> 1{_deaed :=args [1].AsNumber ();if _deaed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_daabe =_deaed .ValueNumber ;};_eced :=_cgce .ValueNumber ;_egdc :=1.0;if _daabe >=0{_egdc =_ga .Pow (1/10.0,_daabe );}else {return MakeNumberResult (0);};_eced ,_cedad :=_ga .Modf (_eced /_egdc );_dbaa :=0.99999;if _cedad > _dbaa {_eced ++;}else if _cedad < -_dbaa {_eced --;
};_ =_cedad ;return MakeNumberResult (_eced *_egdc );};

// Error is an error expression.
type Error struct{_gec string };type plex struct{_egbcc chan *node ;_bgaff Expression ;_begc string ;};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");
};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dfff :=args [0].AsNumber ();if _dfff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_gaaceb :=float64 (1);if _dfff .ValueNumber < 0{_gaaceb =-1;};if len (args )> 1{_ggba :=args [1].AsNumber ();if _ggba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gaaceb =_ggba .ValueNumber ;};if _gaaceb < 0&&_dfff .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};if len (args )==1{return MakeNumberResult (_ga .Ceil (_dfff .ValueNumber ));};_fafag :=_dfff .ValueNumber ;_fafag ,_bfcca :=_ga .Modf (_fafag /_gaaceb );if _bfcca > 0{_fafag ++;};return MakeNumberResult (_fafag *_gaaceb );};type rmode byte ;func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );
RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );
RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );
RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );
};func _fdff (_babga []Result ,_gfgd bool )Result {var _gbec string ;if _gfgd {_gbec ="\u004c\u0041\u0052G\u0045";}else {_gbec ="\u0053\u004d\u0041L\u004c";};if len (_babga )!=2{return MakeErrorResult (_gbec +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_febb :=_babga [0];var _ebeg [][]Result ;switch _febb .Type {case ResultTypeArray :_ebeg =_febb .ValueArray ;case ResultTypeList :_ebeg =[][]Result {_febb .ValueList };default:return MakeErrorResult (_gbec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");
};if len (_ebeg )==0{return MakeErrorResult (_gbec +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};if _babga [1].Type !=ResultTypeNumber {return MakeErrorResult (_gbec +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_fegb :=_babga [1].ValueNumber ;if _fegb < 1{return MakeErrorResultType (ErrorTypeNum ,_gbec +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_begde :=int (_fegb );if float64 (_begde )!=_fegb {return MakeErrorResultType (ErrorTypeNum ,_gbec +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_gbeb :=[]float64 {};for _ ,_abeg :=range _ebeg {for _ ,_bcbc :=range _abeg {if _bcbc .Type ==ResultTypeNumber {_gbeb =append (_gbeb ,_bcbc .ValueNumber );};};};if _begde > len (_gbeb ){return MakeErrorResultType (ErrorTypeNum ,_gbec +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_ecfc :=_eb .MergeSort (_gbeb );if _gfgd {return MakeNumberResult (_ecfc [len (_ecfc )-_begde ]);}else {return MakeNumberResult (_ecfc [_begde -1]);};};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_fff CellRef )Update (q *_ed .UpdateQuery )Expression {if q .UpdateCurrentSheet {_fff ._ba =_agc (_fff ._ba ,q );};return _fff ;};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_ffcg ,_acbce ,_gecef :=_ffeg (from ,to );if _gecef !=nil {_ca .Log .Debug (_gecef .Error ());return NewError (_gecef .Error ());};return PrefixRangeExpr {_gegda :pfx ,_eada :_ffcg ,_cece :_acbce };
};const _cefaf =57373;

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ccd :=ctx .GetEpoch ();_fga ,_dcf :=_ebegb (args [0].Value (),_ccd );if _dcf !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (float64 (_fga .Year ()));};

// Update updates references in the Negate after removing a row/column.
func (_dccfb Negate )Update (q *_ed .UpdateQuery )Expression {return Negate {_befbge :_dccfb ._befbge .Update (q )};};const (_ byte =iota ;_bbfd ;_cecbb ;_bgebe ;_befcg ;_bafda ;);

// Negate is a negate expression like -A1.
type Negate struct{_befbge Expression };func _ffae (_cgfd ,_ddfd _e .Time ,_cbbc int )_e .Time {_fdgae :=_e .Date (_cgfd .Year (),_ddfd .Month (),_ddfd .Day (),0,0,0,0,_e .UTC );if _fdgae .After (_cgfd ){_fdgae =_fdgae .AddDate (-1,0,0);};for !_fdgae .After (_cgfd ){_fdgae =_fdgae .AddDate (0,12/_cbbc ,0);
};return _fdgae ;};func _dddd (_gaaad ,_cfbd Result ,_dgbd ,_accf bool )cmpResult {_gaaad =_gaaad .AsNumber ();_cfbd =_cfbd .AsNumber ();if _gaaad .Type !=_cfbd .Type {return _fgca ;};if _gaaad .Type ==ResultTypeNumber {if _gaaad .ValueNumber ==_cfbd .ValueNumber {return _bfdd ;
};if _gaaad .ValueNumber < _cfbd .ValueNumber {return _cffc ;};return _gcbda ;};if _gaaad .Type ==ResultTypeString {_eebfe :=_gaaad .ValueString ;_bggb :=_cfbd .ValueString ;if !_dgbd {_eebfe =_gd .ToLower (_eebfe );_bggb =_gd .ToLower (_bggb );};if _accf {_bcff :=_a .Match (_bggb ,_eebfe );
if _bcff {return _bfdd ;}else {return _gcbda ;};};return cmpResult (_gd .Compare (_eebfe ,_bggb ));};if _gaaad .Type ==ResultTypeEmpty {return _bfdd ;};if _gaaad .Type ==ResultTypeList {if len (_gaaad .ValueList )< len (_cfbd .ValueList ){return _cffc ;
};if len (_gaaad .ValueList )> len (_cfbd .ValueList ){return _gcbda ;};for _gagc :=range _gaaad .ValueList {_cfeg :=_dddd (_gaaad .ValueList [_gagc ],_cfbd .ValueList [_gagc ],_dgbd ,_accf );if _cfeg !=_bfdd {return _cfeg ;};};return _bfdd ;};if _gaaad .Type ==ResultTypeList {if len (_gaaad .ValueArray )< len (_cfbd .ValueArray ){return _cffc ;
};if len (_gaaad .ValueArray )> len (_cfbd .ValueArray ){return _gcbda ;};for _bacd :=range _gaaad .ValueArray {_abdcc :=_gaaad .ValueArray [_bacd ];_cgdf :=_gaaad .ValueArray [_bacd ];if len (_abdcc )< len (_cgdf ){return _cffc ;};if len (_abdcc )> len (_cgdf ){return _gcbda ;
};for _ffdgb :=range _abdcc {_dcfcd :=_dddd (_abdcc [_ffdgb ],_cgdf [_ffdgb ],_dgbd ,_accf );if _dcfcd !=_bfdd {return _dcfcd ;};};};return _bfdd ;};return _fgca ;};func _bea (_egc ,_fce ,_bbggg int )int {if _egc > _fce {return 0;};if _ffag (_bbggg ){return (_fce -_egc +1)*360;
};_gcd :=0;for _bgcbb :=_egc ;_bgcbb <=_fce ;_bgcbb ++{_gdce :=365;if _dbag (_bgcbb ){_gdce =366;};_gcd +=_gdce ;};return _gcd ;};const _bfa ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";
func _cde (_cgab []Result ,_bcee string )(float64 ,float64 ,Result ){if len (_cgab )!=2{return 0,0,MakeErrorResult (_bcee +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _cgab [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_bcee +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_adgaf :=_cgab [0].ValueNumber ;if _cgab [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_bcee +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fcbg :=float64 (int (_cgab [1].ValueNumber ));if _fcbg < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_bcee +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");
};return _adgaf ,_fcbg ,_eed ;};const _degea =-1000;

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_aabgc Expression ;_ebfag ,_feddb int ;};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_gegda ,_eada ,_cece Expression };const _cd ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";
var _efcd =map[string ]*_cb .Regexp {};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _faf ,_cgc float64 ;switch args [0].Type {case ResultTypeNumber :_cgc =args [0].ValueNumber ;
case ResultTypeString :_gdge :=DateValue ([]Result {args [0]});if _gdge .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");
};_cgc =_gdge .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_faf =args [1].ValueNumber ;
if _faf < 62&&_cgc >=62{_faf --;};case ResultTypeString :_gbd :=DateValue ([]Result {args [1]});if _gbd .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");
};_faf =_gbd .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_eaee :=float64 (int (_cgc -_faf ));return MakeNumberResult (_eaee );
};func _becb (_fecc string ,_begdb func (_fdcc float64 )float64 )Function {return func (_fab []Result )Result {if len (_fab )!=1{return MakeErrorResult (_fecc +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_afcfc :=_fab [0].AsNumber ();switch _afcfc .Type {case ResultTypeNumber :_ddded :=_begdb (_afcfc .ValueNumber );if _ga .IsNaN (_ddded ){return MakeErrorResult (_fecc +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");
};if _ga .IsInf (_ddded ,0){return MakeErrorResult (_fecc +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_ddded );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_fecc +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _afcfc ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fecc ,_afcfc .Type ));
};};};func init (){_fbbcd ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );
RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );
RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );
RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _abbd (args ,true )};var _cbcd =[...]uint8 {0,20,37,60,78,96};

// String returns a string representation of PrefixExpr.
func (_ffceb PrefixExpr )String ()string {return _c .Sprintf ("\u0025\u0073\u0021%\u0073",_ffceb ._fbeda .String (),_ffceb ._bfff .String ());};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_dabf ,_aeaa :=_acde (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _aeaa .Type ==ResultTypeError {return _aeaa ;};_cdb :=_dbab (_dabf ._gab );_badf :=_dbab (_dabf ._bac );_adda :=_dabf ._aef ;_ddf :=_dabf ._fbe ;
_abee :=_bbegc (_cdb ,_badf ,_adda ,_ddf );_egga ,_gfca ,_cgad :=_abee .Date ();return MakeNumberResult (_dcg (_egga ,int (_gfca ),_cgad ));};const _fffa =57354;

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_egffa :=_bggfg (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _egffa .Type !=ResultTypeEmpty {return _egffa ;};_efdab :=_gbab (args [1:]);_bcecd :=0.0;_eefac :=_acddd (args [0]);for _ ,_dffc :=range _efdab {_bcecd +=_eefac [_dffc ._abdb ][_dffc ._eefb ].ValueNumber ;
};return MakeNumberResult (float64 (_bcecd ));};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fdffc :=args [0].AsNumber ();if _fdffc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gbdec :=float64 (1);_ecba :=args [1].AsNumber ();if _ecba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_gbdec =_ecba .ValueNumber ;if _gbdec < 0&&_fdffc .ValueNumber > 0||_gbdec > 0&&_fdffc .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");
};_fafbc :=_fdffc .ValueNumber ;_fafbc ,_eacg :=_ga .Modf (_fafbc /_gbdec );if _ga .Trunc (_eacg +0.5)> 0{_fafbc ++;};return MakeNumberResult (_fafbc *_gbdec );};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cbef :=args [0].AsString ();if _cbef .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bcgb :=_b .Buffer {};for _ ,_eeae :=range _cbef .ValueString {if _d .IsPrint (_eeae ){_bcgb .WriteRune (_eeae );};};return MakeStringResult (_bcgb .String ());};func _gfgb ()evCache {_ffgd :=evCache {};_ffgd ._dbe =make (map[string ]Result );_ffgd ._bgdd =&_bb .Mutex {};
return _ffgd ;};func _degg (_eacc [][]Result ,_becdc int )[][]Result {_fbfce :=[][]Result {};for _bggfc :=range _eacc {if _bggfc ==0{continue ;};_bcbcf :=[]Result {};for _bdga :=range _eacc {if _bdga ==_becdc {continue ;};_bcbcf =append (_bcbcf ,_eacc [_bggfc ][_bdga ]);
};_fbfce =append (_fbfce ,_bcbcf );};return _fbfce ;};func _dcg (_bec ,_gcb ,_dfe int )float64 {return float64 (_bcd (_bec ,_e .Month (_gcb ),_dfe )/86400)+_bgce ;};

// String returns a string representation of String.
func (_gbbe String )String ()string {return "\u0022"+_gbbe ._eadac +"\u0022"};var _baga *_ff .Rand ;type yySymType struct{_ceea int ;_gbda *node ;_fdce Expression ;_bdee []Expression ;_bdgff [][]Expression ;};var _bacad ,_ceacc ,_ccecb ,_fdggg ,_daacd ,_gcedc *_cb .Regexp ;
func _ceeb (_ggggf Result ,_daef *criteriaParsed )bool {if _ggggf .IsBoolean {return false ;};_ccbg :=_ggggf .Type ;if _daef ._efed {return _ccbg ==ResultTypeNumber &&_ggggf .ValueNumber ==_daef ._dcdfc ;}else if _ccbg ==ResultTypeNumber {return _cebca (_ggggf .ValueNumber ,_daef ._edaec );
};return _decf (_ggggf ,_daef );};

// Reference returns an invalid reference for Negate.
func (_afee Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// HasFormula returns FALSE for the invalid reference context.
func (_dfdf *ivr )HasFormula (cellRef string )bool {return false };func _dcdce (_dccaa []Result )(bool ,Result ){for _ ,_cdfcd :=range _dccaa {if _cdfcd .Type ==ResultTypeError {return true ,_cdfcd ;};};return false ,MakeEmptyResult ();};

// Reference returns a string reference value to a horizontal range.
func (_defdd HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_defdd .horizontalRangeReference ()};};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ebadd :=args [0];switch _ebadd .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_dca :=_dbab (_ebadd .ValueNumber );return MakeNumberResult (float64 (_dca .Minute ()));case ResultTypeString :_aaae :=_gd .ToLower (_ebadd .ValueString );if !_cgdea (_aaae ){_ ,_ ,_ ,_gcg ,_fea :=_aac (_aaae );if _fea .Type ==ResultTypeError {_fea .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";
return _fea ;};if _gcg {return MakeNumberResult (0);};};_ ,_gcccb ,_ ,_ ,_ ,_gdac :=_accd (_aaae );if _gdac .Type ==ResultTypeError {return _gdac ;};return MakeNumberResult (float64 (_gcccb ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");
};};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );
RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );
};func _gdeae (_dcfgd float64 )float64 {_baeb :=float64 (1);for _gced :=float64 (2);_gced <=_dcfgd ;_gced ++{_baeb *=_gced ;};return _baeb ;};type amorArgs struct{_cbee float64 ;_cagb float64 ;_dgbf float64 ;_adced float64 ;_gcef int ;_ffec float64 ;_feag int ;
};

// CellRef is a reference to a single cell
type CellRef struct{_ba string };

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_abgac ,_cbdc :=_fb .ParseFloat (v ,64);if _cbdc !=nil {_ca .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_cbdc );
};return Number {_caag :_abgac };};

// BinOpType is the binary operation operator type
//
//go:generate stringer -type=BinOpType
type BinOpType byte ;func _bggfg (_ceca []Result ,_eaeg bool ,_ccgc string )Result {var _cgcea ,_fdfaf string ;if _eaeg {_cgcea ="\u0074\u0068\u0072e\u0065";_fdfaf ="\u006f\u0064\u0064";}else {_cgcea ="\u0074\u0077\u006f";_fdfaf ="\u0065\u0076\u0065\u006e";
};_bade :=len (_ceca );if (_eaeg &&_bade < 3)||(!_eaeg &&_bade < 2){return MakeErrorResult (_ccgc +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_cgcea +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};if (_bade /2*2==_bade )==_eaeg {return MakeErrorResult (_ccgc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_fdfaf +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_cafd :=-1;_gccb :=-1;
for _ccege :=0;_ccege < _bade ;_ccege +=2{_ebdbg :=_ceca [_ccege ];if _ebdbg .Type !=ResultTypeArray &&_ebdbg .Type !=ResultTypeList {return MakeErrorResult (_ccgc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");
};_fdgag :=_acddd (_ebdbg );if _gccb ==-1{_gccb =len (_fdgag );_cafd =len (_fdgag [0]);}else if len (_fdgag )!=_gccb ||len (_fdgag [0])!=_cafd {return MakeErrorResult (_ccgc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");
};if _eaeg &&_ccege ==0{_ccege --;};};return _eed ;};const (_edac countMode =iota ;_dede ;_dgcfg ;);

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bagd :=args [0];switch _bagd .Type {case ResultTypeError :return _bagd ;case ResultTypeNumber ,ResultTypeString :return _cdef (args [0]);case ResultTypeList :_dccf :=_bagd .ValueList ;_gbagd :=[]Result {};for _ ,_cdga :=range _dccf {_aebfa :=_cdef (_cdga );
if _aebfa .Type ==ResultTypeError {return _aebfa ;};_gbagd =append (_gbagd ,_aebfa );};return MakeListResult (_gbagd );case ResultTypeArray :_aeffd :=_bagd .ValueArray ;_cfef :=[][]Result {};for _ ,_fcbb :=range _aeffd {_bcbb :=[]Result {};for _ ,_gdfd :=range _fcbb {_agcef :=_cdef (_gdfd );
if _agcef .Type ==ResultTypeError {return _agcef ;};_bcbb =append (_bcbb ,_agcef );};_cfef =append (_cfef ,_bcbb );};return MakeArrayResult (_cfef );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};};type rangeIndex struct{_abdb int ;_eefb int ;};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_ade ConstArrayExpr )Update (q *_ed .UpdateQuery )Expression {return _ade };func _ccfaa (_fbfbf []Result ,_gaeg bool )(float64 ,float64 ){_bgdcb :=0.0;_geeff :=0.0;for _ ,_fcgaa :=range _fbfbf {switch _fcgaa .Type {case ResultTypeNumber :if _gaeg ||!_fcgaa .IsBoolean {_geeff +=_fcgaa .ValueNumber ;
_bgdcb ++;};case ResultTypeList ,ResultTypeArray :_ddgcaa ,_edce :=_ccfaa (_fcgaa .ListValues (),_gaeg );_geeff +=_ddgcaa ;_bgdcb +=_edce ;case ResultTypeString :if _gaeg {_bgdcb ++;};case ResultTypeEmpty :};};return _geeff ,_bgdcb ;};

// Reference returns a string reference value to a range.
func (_cccg Range )Reference (ctx Context ,ev Evaluator )Reference {_egggg :=_cccg ._ggcad .Reference (ctx ,ev );_aedgb :=_cccg ._gcedd .Reference (ctx ,ev );if _egggg .Type ==ReferenceTypeCell &&_aedgb .Type ==ReferenceTypeCell {return MakeRangeReference (_dggdg (_egggg ,_aedgb ));
};return ReferenceInvalid ;};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_cffca PrefixRangeExpr )Update (q *_ed .UpdateQuery )Expression {_gggff :=_cffca ;_dbfdg :=_cffca ._gegda .String ();if _dbfdg ==q .SheetToUpdate {_ddbd :=*q ;_ddbd .UpdateCurrentSheet =true ;_gggff ._eada =_cffca ._eada .Update (&_ddbd );_gggff ._cece =_cffca ._cece .Update (&_ddbd );
};return _gggff ;};type durationArgs struct{_efcda float64 ;_ggf float64 ;_gef float64 ;_aaee float64 ;_beddg float64 ;_gcad int ;};

// Reference returns a string reference value to a named range.
func (_eaag NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_eaag ._eedeg };};

// Reference returns an invalid reference for BinaryExpr.
func (_fbb BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func init (){_baga =_ff .New (_ff .NewSource (_e .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_becb ("\u0041\u0053\u0049\u004e",_ga .Abs ));
RegisterFunction ("\u0041\u0043\u004f\u0053",_becb ("\u0041\u0053\u0049\u004e",_ga .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_becb ("\u0041\u0053\u0049\u004e",_ga .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_becb ("\u0041\u0043\u004f\u0054",func (_ggead float64 )float64 {return _ga .Pi /2-_ga .Atan (_ggead )}));
RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_becb ("\u0041\u0043\u004fT\u0048",func (_ggecb float64 )float64 {return _ga .Atanh (1/_ggecb )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );
RegisterFunction ("\u0041\u0053\u0049\u004e",_becb ("\u0041\u0053\u0049\u004e",_ga .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_becb ("\u0041\u0053\u0049N\u0048",_ga .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_becb ("\u0041\u0054\u0041\u004e",_ga .Atan ));
RegisterFunction ("\u0041\u0054\u0041N\u0048",_becb ("\u0041\u0054\u0041N\u0048",_ga .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );
RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );
RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_becb ("\u0043\u004f\u0053",_ga .Cos ));
RegisterFunction ("\u0043\u004f\u0053\u0048",_becb ("\u0043\u004f\u0053\u0048",_ga .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_cdfc ("\u0043\u004f\u0054",_ga .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_cdfc ("\u0043\u004f\u0054\u0048",_ga .Tanh ));
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_cdfc ("\u0043\u0053\u0043",_ga .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_cdfc ("\u0043\u0053\u0043",_ga .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );
RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_becb ("\u0045\u0058\u0050",_ga .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );
RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );
RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_becb ("\u004c\u004e",_ga .Log ));
RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_becb ("\u004c\u004f\u00471\u0030",_ga .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );
RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );
RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );
RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );
RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_cdfc ("\u0053\u0045\u0043",_ga .Cos ));
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_cdfc ("\u0053\u0045\u0043\u0048",_ga .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );
RegisterFunction ("\u0053\u0049\u004e",_becb ("\u0053\u0049\u004e",_ga .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_becb ("\u0053\u0049\u004e\u0048",_ga .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_becb ("\u0053\u0051\u0052\u0054",_ga .Sqrt ));
RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_becb ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_baegb float64 )float64 {return _ga .Sqrt (_baegb *_ga .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );
RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_becb ("\u0054\u0041\u004e",_ga .Tan ));
RegisterFunction ("\u0054\u0041\u004e\u0048",_becb ("\u0054\u0041\u004e\u0048",_ga .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_bafc :=len (args );if _bafc !=4&&_bafc !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dgecd ,_aad ,_baca :=_cbeg (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _baca .Type ==ResultTypeError {return _baca ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gbg :=args [2].ValueNumber ;if _gbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_dddg :=args [3].ValueNumber ;if _dddg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");
};_fegc :=0;if _bafc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fegc =int (args [4].ValueNumber );if !_dbgg (_fegc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");
};};_gccdd ,_baca :=_efec (_dgecd ,_aad ,_fegc );if _baca .Type ==ResultTypeError {return _baca ;};return MakeNumberResult (_dddg *(1-_gbg *_gccdd ));};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_bdff :=args [0];
if _bdff .Type !=ResultTypeArray &&_bdff .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_dgfc :=_bdff .ValueArray ;if len (_dgfc )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");
};return MakeNumberResult (float64 (len (_dgfc [0])));};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_fdbe HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_gadbeg :=_fdbe .horizontalRangeReference ();if _gdfb ,_cdgaf :=ev .GetFromCache (_gadbeg );_cdgaf {return _gdfb ;};_aadeg ,_edgd :=_bdfd (ctx ,_fdbe ._fdffe ,_fdbe ._bdag );_caaec :=_ecdg (ctx ,ev ,_aadeg ,_edgd );
ev .SetCache (_gadbeg ,_caaec );return _caaec ;};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_cbbe :=_bggfg (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _cbbe .Type !=ResultTypeEmpty {return _cbbe ;};_eeacf :=_gbab (args [1:]);_eecd :=-_ga .MaxFloat64 ;_ebfd :=_acddd (args [0]);for _ ,_fabb :=range _eeacf {_bgab :=_ebfd [_fabb ._abdb ][_fabb ._eefb ].ValueNumber ;
if _eecd < _bgab {_eecd =_bgab ;};};if _eecd ==-_ga .MaxFloat64 {_eecd =0;};return MakeNumberResult (float64 (_eecd ));};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_faaaae ,_effef ,_fgbbb :=_cbeg (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _fgbbb .Type ==ResultTypeError {return _fgbbb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_beae :=_effef -_faaaae ;if _beae > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");
};_aadg :=args [2].ValueNumber ;if _aadg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult ((365*_aadg )/(360-_aadg *_beae ));};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_bcf ,_dbgf :=_acde (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _dbgf .Type ==ResultTypeError {return _dbgf ;};return MakeNumberResult (_fcdb (_bcf ._gab ,_bcf ._bac ,_bcf ._aef ,_bcf ._fbe ));};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_ggegd .Lock ();defer _ggegd .Unlock ();if _fbeb ,_eaaf :=_faaag [name ];_eaaf {return _fbeb ;};return nil ;};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dcgc :=args [0].AsNumber ();if _dcgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_ga .Pi /180.0*_dcgc .ValueNumber );};const _adece =16;

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_aaba :=args [0].ValueNumber ;_gfgc :=args [1].ValueNumber ;_fgf :=args [2].ValueNumber ;_bdg :=_dcdb (_aaba ,_gfgc ,_fgf );if _bdg >=0{return MakeNumberResult (_bdg );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");
};_facb ,_cfga ,_dgca :=_bafa (args );if _dgca .Type ==ResultTypeError {return _dgca ;};return MakeNumberResult (_gdeae (_facb )/_cfga );};var (_fafbg =0;_fbcad =false ;);func _adgafg ()yyParser {return &yyParserImpl {}};func _gcac (_caca Result ,_cffbf ,_bcdeg string )(string ,Result ){switch _caca .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _caca .Value (),_eed ;
default:return "",MakeErrorResult (_cffbf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_bcdeg +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};func _acc (_afc ,_ecgf int )int {if _ecgf ==2&&_dbag (_afc ){return 29;
}else {return _cg [_ecgf -1];};};func _dggdg (_fafg ,_abcgac Reference )string {return _c .Sprintf ("\u0025\u0073\u003a%\u0073",_fafg .Value ,_abcgac .Value );};func _gdcca (_cbg ,_babg float64 ,_cfgd ,_bbeg int )float64 {_ffed :=_dbab (_cbg );_bacg :=_dbab (_babg );
_eag :=_ffae (_ffed ,_bacg ,_cfgd );return _bge (_ffed ,_eag ,_bbeg );};const _fdg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_ee string ,_ggg Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_bc string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_e .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_abc int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_eac string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_gfb string )string ;

// GetFormat returns if cell is protected.
GetLocked (_bag string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_ffa string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_cbda string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_dc ,_abcg int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_fge string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_ada string ,_add bool );

// NamedRange returns a named range.
NamedRange (_bgd string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_ffb ,_bfb uint32 );};

// Update updates references in the Range after removing a row/column.
func (_fefcc Range )Update (q *_ed .UpdateQuery )Expression {_fdfd :=_fefcc ;if q .UpdateCurrentSheet {_fdfd ._ggcad =_fefcc ._ggcad .Update (q );_fdfd ._gcedd =_fefcc ._gcedd .Update (q );};return _fdfd ;};var _gabe =[...]int {0};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _cbfaa (args ,_gdbg )};func (_bbgd *Lexer )emit (_gece tokenType ,_ecag []byte ){if _gbba {_c .Println ("\u0065\u006d\u0069\u0074",_gece ,_afcec (string (_ecag )));};_bbgd ._bcfgf <-&node {_gece ,string (_ecag )};
};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_ecef :=len (args );if _ecef !=4&&_ecef !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ggdb ,_fdgc ,_ebgc :=_cbeg (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _ebgc .Type ==ResultTypeError {return _ebgc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ffaec :=args [2].ValueNumber ;if _ffaec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_fbfb :=args [3].ValueNumber ;if _fbfb <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_bbda :=0;if _ecef ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbda =int (args [4].ValueNumber );if !_dbgg (_bbda ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");
};};_dcce ,_ebgc :=_efec (_ggdb ,_fdgc ,_bbda );if _ebgc .Type ==ResultTypeError {return _ebgc ;};return MakeNumberResult ((_fbfb /_ffaec -1)/_dcce );};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_fbeda :pfx ,_bfff :exp }};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_edbf :=_gd .Split (v ,"\u003a");if len (_edbf )!=2{return nil ;};_geaa ,_ :=_fb .Atoi (_edbf [0]);_acedb ,_ :=_fb .Atoi (_edbf [1]);if _geaa > _acedb {_geaa ,_acedb =_acedb ,_geaa ;};return HorizontalRange {_fdffe :_geaa ,_bdag :_acedb };
};func _ebac (_caf int )int {if _caf < 1900{if _caf < 30{_caf +=2000;}else {_caf +=1900;};};return _caf ;};const _baad =57358;

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_geg :=MakeNumberResult (0);for _ ,_cdgdd :=range args {_cdgdd =_cdgdd .AsNumber ();switch _cdgdd .Type {case ResultTypeNumber :_geg .ValueNumber +=_cdgdd .ValueNumber ;case ResultTypeList ,ResultTypeArray :_cfbce :=Sum (_cdgdd .ListValues ());
if _cfbce .Type !=ResultTypeNumber {return _cfbce ;};_geg .ValueNumber +=_cfbce .ValueNumber ;case ResultTypeString :case ResultTypeError :return _cdgdd ;case ResultTypeEmpty :default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cdgdd .Type ));
};};return _geg ;};var _agbg =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// ErrorType is a formula evaluation error type.
type ErrorType byte ;const _egcaf =57365;func (_efbc *plex )Lex (lval *yySymType )int {_fbcad =true ;_abgg :=<-_efbc ._egbcc ;if _abgg !=nil {lval ._gbda =_abgg ;return int (lval ._gbda ._acbfe );};return 0;};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acab :=args [0].AsNumber ();if _acab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (180.0/_ga .Pi *_acab .ValueNumber );};

// GetFilename returns an empty string for the invalid reference context.
func (_bfabf *ivr )GetFilename ()string {return ""};var _abdac =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};


// String returns a string of a range.
func (_gabg Range )String ()string {return _c .Sprintf ("\u0025\u0073\u003a%\u0073",_gabg ._ggcad .String (),_gabg ._gcedd .String ());};const _dbeg =57353;

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ebede :=args [0].AsNumber ();if _ebede .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_daf :=float64 (1);if _ebede .ValueNumber < 0{_daf =-1;};if len (args )> 1{_abgcc :=args [1].AsNumber ();if _abgcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_daf =_ga .Abs (_abgcc .ValueNumber );};if len (args )==1{return MakeNumberResult (_ga .Ceil (_ebede .ValueNumber ));};_gfdb :=_ebede .ValueNumber ;_gfdb ,_gadca :=_ga .Modf (_gfdb /_daf );if _gadca !=0{if _ebede .ValueNumber > 0{_gfdb ++;};};return MakeNumberResult (_gfdb *_daf );
};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_gdda :=args [0].AsNumber ();if _gdda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ggga :=_ga .Signbit (_gdda .ValueNumber );_acbb ,_caeeb :=_ga .Modf ((_gdda .ValueNumber -1)/2);_fdde :=_acbb *2+1;if _caeeb !=0{if !_ggga {_fdde +=2;}else {_fdde -=2;};};return MakeNumberResult (_fdde );};

// Reference returns a string reference value to a cell.
func (_cab CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_cab ._ba };};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_befbge :e }};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_eedeg :v }};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_fagd :=args [0];if _fagd .Type !=ResultTypeArray &&_fagd .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_cbfb :=_acddd (_fagd );_bbgeb :=args [2];if _bbgeb .Type !=ResultTypeArray &&_bbgeb .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_efece :=_acddd (_bbgeb );_bgfc :=_dgcc (args [1]);_cbbada :=0.0;for _cbgf ,_gfcee :=range _cbfb {for _agge ,_bgde :=range _gfcee {if _ceeb (_bgde ,_bgfc ){_cbbada +=_efece [_cbgf ][_agge ].ValueNumber ;};};};return MakeNumberResult (_cbbada );};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];
};return args [0];};

// Update updates the FunctionCall references after removing a row/column.
func (_ggaab FunctionCall )Update (q *_ed .UpdateQuery )Expression {_dgff :=[]Expression {};for _ ,_febae :=range _ggaab ._cgee {_aade :=_febae .Update (q );_dgff =append (_dgff ,_aade );};return FunctionCall {_dacba :_ggaab ._dacba ,_cgee :_dgff };};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fgeee :=args [0].Ref ;if _fgeee .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .HasFormula (_fgeee .Value ));};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dafb :=args [0].AsNumber ();if _dafb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _dafb .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_cddag :=float64 (1);_cgdc :=_ga .Trunc (_dafb .ValueNumber );for _ceef :=_cgdc ;_ceef > 1;_ceef -=2{_cddag *=_ceef ;};return MakeNumberResult (_cddag );};func _cdfd (_ecge []Result ,_ebbeg string )(*amorArgs ,Result ){_aca :=len (_ecge );if _aca !=6&&_aca !=7{return nil ,MakeErrorResult (_ebbeg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _ecge [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebbeg +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ffga :=_ecge [0].ValueNumber ;
if _ffga < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ebbeg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_gfbg ,_egb :=_abgc (_ecge [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_ebbeg );if _egb .Type ==ResultTypeError {return nil ,_egb ;};_abea ,_egb :=_abgc (_ecge [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_ebbeg );
if _egb .Type ==ResultTypeError {return nil ,_egb ;};if _abea < _gfbg {return nil ,MakeErrorResultType (ErrorTypeNum ,_ebbeg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");
};if _ecge [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebbeg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_adcedb :=_ecge [3].ValueNumber ;if _adcedb < 0||_adcedb > _ffga {return nil ,MakeErrorResultType (ErrorTypeNum ,_ebbeg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");
};if _ecge [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebbeg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_badd :=int (_ecge [4].ValueNumber );if _badd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ebbeg +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if _ecge [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebbeg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_fcdcd :=_ecge [5].ValueNumber ;if _fcdcd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ebbeg +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");
};_gbag :=0;if _aca ==7&&_ecge [6].Type !=ResultTypeEmpty {if _ecge [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebbeg +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gbag =int (_ecge [6].ValueNumber );if !_dbgg (_gbag )||_gbag ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_ebbeg );
};};return &amorArgs {_ffga ,_gfbg ,_abea ,_adcedb ,_badd ,_fcdcd ,_gbag },_eed ;};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_bfbe EmptyExpr )Update (q *_ed .UpdateQuery )Expression {return _bfbe };var _fef int64 =_bcd (1900,_e .January ,1);

// String returns a string representation of Number.
func (_dffecb Number )String ()string {return _fb .FormatFloat (_dffecb ._caag ,'f',-1,64)};

// String returns a string representation of a horizontal range with prefix.
func (_dafc PrefixHorizontalRange )String ()string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_dafc ._aabgc .String (),_dafc ._ebfag ,_dafc ._feddb );};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_gfgf :=len (args );if _gfgf < 4||_gfgf > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_edfg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aefc :=args [1].ValueNumber ;if _aefc <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbfa :=args [2].ValueNumber ;if _bbfa < _aefc {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_dffaf :=args [3].ValueNumber ;_ded :=0.0;if _gfgf >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ded =args [4].ValueNumber ;};_dbcf :=0;if _gfgf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dbcf =int (args [5].ValueNumber );if _dbcf !=0{_dbcf =1;};};return MakeNumberResult (_dfaf (_edfg ,_bbfa ,_dffaf ,_ded ,_dbcf )-_ggea (_edfg ,_aefc ,_bbfa ,_dffaf ,_ded ,_dbcf ));};const _aecfg =57357;const _baedf =57370;func (_afce *yyParserImpl )Lookahead ()int {return _afce ._deac };
type parsedSearchObject struct{_baffb string ;_bcde string ;_daae int ;};func (_dfba PrefixHorizontalRange )horizontalRangeReference (_feee string )string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_feee ,_dfba ._ebfag ,_dfba ._feddb );
};const _fagcg =57371;

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_bcfgf chan *node ;_bdeeg _bb .Mutex ;_efbb []chan *node ;_faabf []*node ;};var _ecbg =[...]int {-1,1,1,-1,-2,0};func init (){_fdcdc ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );
RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );
RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );
RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );
RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_facgf :=args [0].AsNumber ();if _facgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ebddf :=float64 (1);if _facgf .ValueNumber < 0{_ebddf =-1;};if len (args )> 1{_agdf :=args [1].AsNumber ();if _agdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");
};_ebddf =_ga .Abs (_agdf .ValueNumber );};if len (args )==1{return MakeNumberResult (_ga .Floor (_facgf .ValueNumber ));};_afdea :=_facgf .ValueNumber ;_afdea ,_fdcg :=_ga .Modf (_afdea /_ebddf );if _fdcg !=0{if _facgf .ValueNumber < 0{_afdea --;};};return MakeNumberResult (_afdea *_ebddf );
};var _gee =[]*_cb .Regexp {};const _dbdec =57363;

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_fdc ,_gfce :=_acde (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _gfce .Type ==ResultTypeError {return _gfce ;};_dbc :=_fdc ._aef ;_bgfb :=_fdc ._fbe ;_aceb ,_gfce :=_fcdf (_fdc ._gab ,_fdc ._bac ,_dbc ,_bgfb );
if _gfce .Type ==ResultTypeError {return _gfce ;};return MakeNumberResult (_aceb );};

// IsDBCS returns false for the invalid reference context.
func (_gbbbd *ivr )IsDBCS ()bool {return false };

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ffge :=args [0].Ref ;if _ffge .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .Cell (_ffge .Value ,ev ).IsBoolean );};func _ggdg (_bccb _e .Time )_e .Time {_bccb =_bccb .UTC ();return _e .Date (_bccb .Year (),_bccb .Month (),_bccb .Day (),_bccb .Hour (),_bccb .Minute (),_bccb .Second (),_bccb .Nanosecond (),_e .Local );
};var _ecb =[]*_cb .Regexp {};

// FunctionCall is a function call expression.
type FunctionCall struct{_dacba string ;_cgee []Expression ;};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};_gfbgd :=args [0].ValueNumber ;if _gfbgd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");
};_dgbfc :=float64 (int (args [1].ValueNumber ));if _dgbfc < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult (_ga .Pow ((1+_gfbgd /_dgbfc ),_dgbfc )-1);};

// Reference returns an invalid reference for String.
func (_bbeb String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_ecff ,_cae :=_bfdb (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _cae .Type ==ResultTypeError {return _cae ;};_abga :=_ecff ._debg ;_ddgb :=_ecff ._ebe ;_ddeed :=_ecff ._begb ;_gcbd :=_ecff ._cbeed ;
_dcfg :=_ecff ._bcfg ;_bfeg :=_ecff ._egbb ;_geef :=_dfaf (_abga ,_ddgb ,_ddeed ,0,_bfeg );_cegb :=0.0;if _gcbd ==1{if _bfeg ==0{_cegb =_geef +_ddeed *_abga ;}else {_cegb =_geef ;};_gcbd ++;};for _efgf :=_gcbd ;_efgf <=_dcfg ;_efgf ++{if _bfeg ==1{_cegb +=_geef -(_feed (_abga ,_efgf -2,_geef ,_ddeed ,1)-_geef )*_abga ;
}else {_cegb +=_geef -_feed (_abga ,_efgf -1,_geef ,_ddeed ,0)*_abga ;};};return MakeNumberResult (_cegb );};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _cbfaa (args ,_dgfdb )};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_ggdff :=len (args );if _ggdff !=4&&_ggdff !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_adag ,_gfee ,_gcfd :=_cbeg (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _gcfd .Type ==ResultTypeError {return _gcfd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_fbcgf :=args [2].ValueNumber ;if _fbcgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_ddafa :=args [3].ValueNumber ;if _ddafa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};_fdcd :=0;if _ggdff ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_fdcd =int (args [4].ValueNumber );if !_dbgg (_fdcd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");
};};_gagd ,_gcfd :=_efec (_adag ,_gfee ,_fdcd );if _gcfd .Type ==ResultTypeError {return _gcfd ;};return MakeNumberResult ((_ddafa -_fbcgf )/_fbcgf /_gagd );};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_adgd :=[]float64 {};
for _ ,_cgca :=range args {switch _cgca .Type {case ResultTypeString :_ebddd :=_cgca .AsNumber ();if _ebddd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_adgd =append (_adgd ,_ebddd .ValueNumber );case ResultTypeList ,ResultTypeArray :_afff :=GCD (_cgca .ListValues ());if _afff .Type !=ResultTypeNumber {return _afff ;};_adgd =append (_adgd ,_afff .ValueNumber );case ResultTypeNumber :_adgd =append (_adgd ,_cgca .ValueNumber );
case ResultTypeError :return _cgca ;default:return MakeErrorResult (_c .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cgca .Type ));
};};if _adgd [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_adgd )==1{return MakeNumberResult (_adgd [0]);
};_cafaa :=_adgd [0];for _eaefd :=1;_eaefd < len (_adgd );_eaefd ++{if _adgd [_eaefd ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_cafaa =_gfcae (_cafaa ,_adgd [_eaefd ]);};return MakeNumberResult (_cafaa );};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_fafa ,_befd :=_bfdb (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _befd .Type ==ResultTypeError {return _befd ;};_fdbg :=_fafa ._debg ;_bgac :=_fafa ._ebe ;_cdcc :=_fafa ._begb ;_ffbfa :=_fafa ._cbeed ;_bagc :=_fafa ._bcfg ;
_cgdb :=_fafa ._egbb ;_cfff :=_dfaf (_fdbg ,_bgac ,_cdcc ,0,_cgdb );_gbbb :=0.0;if _ffbfa ==1{if _cgdb ==0{_gbbb =-_cdcc ;_ffbfa ++;};};for _dcb :=_ffbfa ;_dcb <=_bagc ;_dcb ++{if _cgdb ==1{_gbbb +=_feed (_fdbg ,_dcb -2,_cfff ,_cdcc ,1)-_cfff ;}else {_gbbb +=_feed (_fdbg ,_dcb -1,_cfff ,_cdcc ,0);
};};_gbbb *=_fdbg ;return MakeNumberResult (_gbbb );};func _acde (_edbc []Result ,_bbc string )(*couponArgs ,Result ){_cdbc :=len (_edbc );if _cdbc !=3&&_cdbc !=4{return nil ,MakeErrorResult (_bbc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_gddc ,_cgec ,_eee :=_cbeg (_edbc [0],_edbc [1],_bbc );if _eee .Type ==ResultTypeError {return nil ,_eee ;};if _edbc [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bbc +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebfc :=_edbc [2].ValueNumber ;if !_ffd (_ebfc ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_bbc );};_gfcc :=0;if _cdbc ==4&&_edbc [3].Type !=ResultTypeEmpty {if _edbc [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bbc +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gfcc =int (_edbc [3].ValueNumber );if !_dbgg (_gfcc ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_bbc );
};};return &couponArgs {_gddc ,_cgec ,int (_ebfc ),_gfcc },_eed ;};func _abca (_acgb ,_fdac float64 )bool {return _ga .Abs (_acgb -_fdac )< 1.0e-6};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_abdddd Context ,_baag Evaluator ,_deaa []Result )Result ;

// String is a string expression.
type String struct{_eadac string };

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _cc .Reader )Expression {_abagb :=&plex {_egbcc :LexReader (r )};_aegbd (_abagb );if _abagb ._begc !=""{return nil ;};return _abagb ._bgaff ;};const _fbbgf =57347;var _fg =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};func _eccc (_fece []string ,_fcegg int )string {return _fb .Itoa (len (_fece [len (_fece )-1-_fcegg ]))};
const _abcd =57344;

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cbbce :=args [0].AsNumber ();if _cbbce .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eaef :=float64 (1);if _cbbce .ValueNumber < 0{_eaef =-1;};if len (args )> 1{_ebcb :=args [1].AsNumber ();if _ebcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_eaef =_ebcb .ValueNumber ;};_efbd :=float64 (1);if len (args )> 2{_aceea :=args [2].AsNumber ();if _aceea .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_efbd =_aceea .ValueNumber ;};if len (args )==1{return MakeNumberResult (_ga .Floor (_cbbce .ValueNumber ));};_fdcb :=_cbbce .ValueNumber ;_fdcb ,_ddeec :=_ga .Modf (_fdcb /_eaef );if _ddeec !=0&&_cbbce .ValueNumber < 0&&_efbd > 0{_fdcb ++;};return MakeNumberResult (_fdcb *_eaef );
};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_daceg :=args [0].AsString ();if _daceg .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gbdc :=args [1].AsNumber ();if _gbdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_agbf :=_daceg .ValueString ;if len (_agbf )> 2&&(_gd .HasPrefix (_agbf ,"\u0030\u0078")||_gd .HasPrefix (_agbf ,"\u0030\u0058")){_agbf =_agbf [2:];};_ebfb ,_ebeca :=_fb .ParseInt (_agbf ,int (_gbdc .ValueNumber ),64);if _ebeca !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");
};return MakeNumberResult (float64 (_ebfb ));};const _dbcgb =57350;

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ceedbe :=args [0].AsString ();if _ceedbe .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (len (_ceedbe .ValueString )));};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_fagf :=_gd .Split (v ,"\u003a");if len (_fagf )!=2{return nil ;};_beed ,_ :=_fb .Atoi (_fagf [0]);_bfeag ,_ :=_fb .Atoi (_fagf [1]);if _beed > _bfeag {_beed ,_bfeag =_bfeag ,_beed ;};
return PrefixHorizontalRange {_aabgc :pfx ,_ebfag :_beed ,_feddb :_bfeag };};func _agc (_deg string ,_aa *_ed .UpdateQuery )string {_gdc ,_bbfc :=_gdg .ParseCellReference (_deg );if _bbfc !=nil {return "\u0023\u0052\u0045F\u0021";};if _aa .UpdateType ==_ed .UpdateActionRemoveColumn {_fa :=_aa .ColumnIdx ;
_gff :=_gdc .ColumnIdx ;if _gff < _fa {return _deg ;}else if _gff ==_fa {return "\u0023\u0052\u0045F\u0021";}else {return _gdc .Update (_ed .UpdateActionRemoveColumn ).String ();};};return _deg ;};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_fad :=_e .Now ();
_ ,_fde :=_fad .Zone ();_gce :=_bgce +float64 (_fad .Unix ()+int64 (_fde ))/86400;return MakeNumberResult (_gce );};const _dcac =57361;

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_eggfd (args ,_edac ))};const _ffadd =57360;func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );
RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );
RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );
RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );
RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );
RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );
RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];
case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));
default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_eacf :=args [0];if _eacf .Type ==ResultTypeError ||_eacf .Type ==ResultTypeString {return _eacf ;};return _eed ;};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_bgeg :=len (args );if _bgeg < 3||_bgeg > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gedg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_dgdee :=args [1].ValueNumber ;if _dgdee !=float64 (int (_dgdee )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecfd :=args [2].ValueNumber ;_bbaf :=0.0;if _bgeg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbaf =args [3].ValueNumber ;};_caga :=0.0;if _bgeg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_caga =args [4].ValueNumber ;if _caga !=0{_caga =1;};};if _gedg ==0{return MakeNumberResult (-_ecfd *_dgdee -_bbaf );}else {return MakeNumberResult ((((1-_ga .Pow (1+_gedg ,_dgdee ))/_gedg )*_ecfd *(1+_gedg *_caga )-_bbaf )/_ga .Pow (1+_gedg ,_dgdee ));
};};type Expression interface{Eval (_fgg Context ,_gfd Evaluator )Result ;Reference (_edb Context ,_bgf Evaluator )Reference ;String ()string ;Update (_bca *_ed .UpdateQuery )Expression ;};func _ebec (_ceee Result )bool {_aegb :=_ceee .Type ;return _aegb !=ResultTypeArray &&_aegb !=ResultTypeList ;
};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_acf :=len (args );if _acf !=4&&_acf !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_eaaa ,_bbbf :=_abgc (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _bbbf .Type ==ResultTypeError {return _bbbf ;};_gcfae ,_bbbf :=_abgc (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");
if _bbbf .Type ==ResultTypeError {return _bbbf ;};if _eaaa >=_gcfae {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_gbe :=args [2].ValueNumber ;if _gbe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dea :=args [3].ValueNumber ;if _dea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eagd :=0;if _acf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eagd =int (args [4].ValueNumber );if !_dbgg (_eagd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");
};};_adbd ,_bbbf :=_efec (_eaaa ,_gcfae ,_eagd );if _bbbf .Type ==ResultTypeError {return _bbbf ;};return MakeNumberResult (_dea *_gbe *_adbd );};func _gfdc (_fbdgg []Result ,_dcgeb bool )Result {_bgba :="\u004d\u0041\u0058";if _dcgeb {_bgba ="\u004d\u0041\u0058\u0041";
};if len (_fbdgg )==0{return MakeErrorResult (_bgba +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cega :=-_ga .MaxFloat64 ;
for _ ,_fagc :=range _fbdgg {switch _fagc .Type {case ResultTypeNumber :if (_dcgeb ||!_fagc .IsBoolean )&&_fagc .ValueNumber > _cega {_cega =_fagc .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_agda :=_gfdc (_fagc .ListValues (),_dcgeb );if _agda .ValueNumber > _cega {_cega =_agda .ValueNumber ;
};case ResultTypeEmpty :case ResultTypeString :_eabe :=0.0;if _dcgeb {_eabe =_fagc .AsNumber ().ValueNumber ;};if _eabe > _cega {_cega =_eabe ;};default:_ca .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_bgba +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fagc .Type );
};};if _cega ==-_ga .MaxFloat64 {_cega =0;};return MakeNumberResult (_cega );};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_fbcg :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_fbcg *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_ebca :=_acddd (args [1]);for _ ,_eeb :=range _ebca {for _ ,_accdf :=range _eeb {if _accdf .Type !=ResultTypeNumber ||_accdf .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");
};_fbcg *=1.0+_accdf .ValueNumber ;};};return MakeNumberResult (_fbcg );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");
};};var _deda =[...]struct{_gfaaa int ;_deec int ;_gage string ;}{};var _gcab =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};


// LastColumn returns empty string for the invalid reference context.
func (_egae *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};func (_gfccd *noCache )SetCache (key string ,value Result ){};var _gbba =false ;

// Eval evaluates and returns the result of a Negate expression.
func (_ddagf Negate )Eval (ctx Context ,ev Evaluator )Result {_bccc :=_ddagf ._befbge .Eval (ctx ,ev );if _bccc .Type ==ResultTypeNumber {return MakeNumberResult (-_bccc .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};func _gcbbb (_dgae []Result )[]float64 {_eddg :=make ([]float64 ,0);for _ ,_ggdbf :=range _dgae {if _ggdbf .Type ==ResultTypeEmpty {continue ;};_ggdbf =_ggdbf .AsNumber ();switch _ggdbf .Type {case ResultTypeNumber :if !_ggdbf .IsBoolean {_eddg =append (_eddg ,_ggdbf .ValueNumber );
};case ResultTypeList ,ResultTypeArray :_eddg =append (_eddg ,_gcbbb (_ggdbf .ListValues ())...);case ResultTypeString :default:_ca .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ggdbf .Type );
};};return _eddg ;};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_dcgb :=args [0];if _dcgb .Type ==ResultTypeError {return _dcgb ;
};if _dcgb .Type !=ResultTypeString &&_dcgb .Type !=ResultTypeNumber &&_dcgb .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_aebcb :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_fabd :=int (args [1].ValueNumber );if _fabd < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gbdcf :=int (args [2].ValueNumber );if _gbdcf < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_gaf :=len (_aebcb );if _fabd > _gaf {return MakeStringResult ("");};_fabd --;_agabg :=_fabd +_gbdcf ;if _agabg > _gaf {return MakeStringResult (_aebcb [_fabd :]);}else {return MakeStringResult (_aebcb [_fabd :_agabg ]);};};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_ebcg ,_bdb :=_fb .ParseBool (v );if _bdb !=nil {_ca .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_bdb );
};return Bool {_dee :_ebcg };};

// String returns an empty string for Error.
func (_dda Error )String ()string {return ""};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ddfb :=args [0].AsNumber ();_fcgag :=args [1].AsNumber ();if _ddfb .Type !=ResultTypeNumber ||_fcgag .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_dcfe :=_ga .Trunc (_ddfb .ValueNumber );_bbbgd :=_ga .Trunc (_fcgag .ValueNumber );if _bbbgd > _dcfe {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");
};if _bbbgd ==_dcfe ||_bbbgd ==0{return MakeNumberResult (1);};_bdgfe :=float64 (1);for _afae :=float64 (1);_afae <=_bbbgd ;_afae ++{_bdgfe *=(_dcfe +1-_afae )/_afae ;};return MakeNumberResult (_bdgfe );};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_dbed :=_bggfg (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _dbed .Type !=ResultTypeEmpty {return _dbed ;};_cbea :=_gbab (args );return MakeNumberResult (float64 (len (_cbea )));};const _cbbb =187;


// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_bfce :=args [0];if _bfce .Type !=ResultTypeNumber &&_bfce .Type !=ResultTypeString &&_bfce .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");
};_cdbe :=args [1].ValueString ;switch _bfce .Type {case ResultTypeNumber :return MakeStringResult (_bbg .Number (_bfce .ValueNumber ,_cdbe ));case ResultTypeString :return MakeStringResult (_bbg .String (_bfce .ValueString ,_cdbe ));case ResultTypeEmpty :return MakeStringResult (_bbg .Number (0,_cdbe ));
case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");
};};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_fggca :=_gd .Split (v ,"\u003a");if len (_fggca )!=2{return nil ;};if _fggca [0]> _fggca [1]{_fggca [0],_fggca [1]=_fggca [1],_fggca [0];};return PrefixVerticalRange {_bgcg :pfx ,_cgbfd :_fggca [0],_gadf :_fggca [1]};
};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_ebgd :=MakeNumberResult (0);for _ ,_adgcg :=range args {_adgcg =_adgcg .AsNumber ();switch _adgcg .Type {case ResultTypeNumber :_ebgd .ValueNumber +=_adgcg .ValueNumber *_adgcg .ValueNumber ;case ResultTypeList ,ResultTypeArray :_ccgd :=SumSquares (_adgcg .ListValues ());
if _ccgd .Type !=ResultTypeNumber {return _ccgd ;};_ebgd .ValueNumber +=_ccgd .ValueNumber ;case ResultTypeString :case ResultTypeError :return _adgcg ;case ResultTypeEmpty :default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_adgcg .Type ));
};};return _ebgd ;};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fgdgd :=args [0].AsNumber ();if _fgdgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gefdd :=args [1].AsNumber ();if _gefdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};return MakeNumberResult (_ga .Pow (_fgdgd .ValueNumber ,_gefdd .ValueNumber ));};

// Error is called in the case of parsing error and saves an error to a plex.
func (_aefa *plex )Error (s string ){_ca .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_aefa ._begc =s ;};func (_fage *ivr )Sheet (name string )Context {return _fage };var _bbcad =[...]uint8 {0,17,33,49,63,78,93,108};
var _ccac =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};

// Reference returns a string reference value to a horizontal range with prefix.
func (_eaff PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_fbba :=_eaff ._aabgc .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_eaff .horizontalRangeReference (_fbba .Value )};};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_bbdag :=args [0].AsNumber ();if _bbdag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_fedd :=int (_bbdag .ValueNumber );_bbagc :=make ([][]Result ,0,_fedd );for _dfcfc :=0;_dfcfc < _fedd ;_dfcfc ++{_bgge :=make ([]Result ,_fedd );for _adcd :=0;_adcd < _fedd ;_adcd ++{if _dfcfc ==_adcd {_bgge [_adcd ]=MakeNumberResult (1.0);}else {_bgge [_adcd ]=MakeNumberResult (0.0);
};};_bbagc =append (_bbagc ,_bgge );};return MakeArrayResult (_bbagc );};func _bge (_dgcd ,_affg _e .Time ,_gbaf int )float64 {if _dgcd .After (_affg ){_dgcd ,_affg =_affg ,_dgcd ;};_fgbb :=0;_beg ,_cbfc ,_bab :=_dgcd .Date ();_dfad ,_eea ,_gad :=_affg .Date ();
_fee ,_agaf :=int (_cbfc ),int (_eea );_ddd ,_bbag :=_abg (_beg ,_fee ,_bab ,_gbaf ),_abg (_dfad ,_agaf ,_gad ,_gbaf );if !_ffag (_gbaf ){return _dcg (_dfad ,_agaf ,_bbag )-_dcg (_beg ,_fee ,_ddd );};if _gbaf ==0{if (_fee ==2||_ddd < 30)&&_gad ==31{_bbag =31;
}else if _agaf ==2&&_bbag ==_acc (_dfad ,_agaf ){_bbag =_acc (_dfad ,2);};}else {if _fee ==2&&_ddd ==30{_ddd =_acc (_beg ,2);};if _agaf ==2&&_bbag ==30{_bbag =_acc (_dfad ,2);};};if _beg < _dfad ||(_beg ==_dfad &&_fee < _agaf ){_fgbb =30-_ddd +1;_bab =1;
_ddd =1;_dfef :=_e .Date (_beg ,_e .Month (_fee ),_bab ,0,0,0,0,_e .UTC ).AddDate (0,1,0);if _dfef .Year ()< _dfad {_fgbb +=_adce (_dfef .Year (),int (_dfef .Month ()),12,_gbaf );_dfef =_dfef .AddDate (0,13-int (_dfef .Month ()),0);_fgbb +=_bea (_dfef .Year (),_dfad -1,_gbaf );
};_fgbb +=_adce (_dfad ,int (_dfef .Month ()),_agaf -1,_gbaf );_dfef =_dfef .AddDate (0,_agaf -int (_dfef .Month ()),0);_fee =_dfef .Day ();};_fgbb +=_bbag -_ddd ;if _fgbb > 0{return float64 (_fgbb );}else {return 0;};};

// String returns a string representation for Bool.
func (_da Bool )String ()string {if _da ._dee {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_gfda :=args [0];if _gfda .Type ==ResultTypeList {_cdee :=[][]Result {};for _ ,_eefa :=range _gfda .ValueList {_cdee =append (_cdee ,[]Result {_eefa });};return MakeArrayResult (_cdee );};_ceed :=make ([][]Result ,len (_gfda .ValueArray [0]));for _ ,_ccad :=range _gfda .ValueArray {for _ffff ,_aebf :=range _ccad {_ceed [_ffff ]=append (_ceed [_ffff ],_aebf );
};};return MakeArrayResult (_ceed );};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_faafg ,_cadab ,_ecfdg :=_ffeg (from ,to );if _ecfdg !=nil {_ca .Log .Debug (_ecfdg .Error ());return NewError (_ecfdg .Error ());};return Range {_ggcad :_faafg ,_gcedd :_cadab };};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_ddba PrefixVerticalRange )Update (q *_ed .UpdateQuery )Expression {if q .UpdateType ==_ed .UpdateActionRemoveColumn {_befab :=_ddba ;_ecbge :=_ddba ._bgcg .String ();if _ecbge ==q .SheetToUpdate {_dgad :=q .ColumnIdx ;_befab ._cgbfd =_ab (_ddba ._cgbfd ,_dgad );
_befab ._gadf =_ab (_ddba ._gadf ,_dgad );};return _befab ;};return _ddba ;};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_abag :=args [0].AsNumber ();
if _abag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cgdbf :=args [1].AsNumber ();if _cgdbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_edad :=int (_cgdbf .ValueNumber );if _edad < 0||_edad > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");
};_egcb :=0;if len (args )> 2{_feffb :=args [2].AsNumber ();if _feffb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_egcb =int (_feffb .ValueNumber );};_gcbc :=_fb .FormatInt (int64 (_abag .ValueNumber ),_edad );if len (_gcbc )< _egcb {_gcbc =_gd .Repeat ("\u0030",_egcb -len (_gcbc ))+_gcbc ;};return MakeStringResult (_gcbc );};func _bafa (_bfgfa []Result )(float64 ,float64 ,Result ){_adgda :=0.0;
_egeb :=1.0;for _ ,_acggb :=range _bfgfa {switch _acggb .Type {case ResultTypeNumber :_adgda +=_acggb .ValueNumber ;_egeb *=_gdeae (_acggb .ValueNumber );case ResultTypeList ,ResultTypeArray :_dcggb ,_fgeg ,_deggc :=_bafa (_acggb .ListValues ());_adgda +=_dcggb ;
_egeb *=_gdeae (_fgeg );if _deggc .Type ==ResultTypeError {return 0,0,_deggc ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
case ResultTypeError :return 0,0,_acggb ;};};return _adgda ,_egeb ,_eed ;};const _bga ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";


// Eval evaluates a range returning a list of results or an error.
func (_deffe Range )Eval (ctx Context ,ev Evaluator )Result {_ggcac :=_deffe ._ggcad .Reference (ctx ,ev );_fgbc :=_deffe ._gcedd .Reference (ctx ,ev );_bcdef :=_dggdg (_ggcac ,_fgbc );if _ggcac .Type ==ReferenceTypeCell &&_fgbc .Type ==ReferenceTypeCell {if _aadff ,_faabfc :=ev .GetFromCache (_bcdef );
_faabfc {return _aadff ;}else {_ggeg :=_ecdg (ctx ,ev ,_ggcac .Value ,_fgbc .Value );ev .SetCache (_bcdef ,_ggeg );return _ggeg ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_bcdef );};var _aeefd =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};


// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fggd :=args [0].ValueNumber ;if _fggd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_fccg :=args [1].ValueNumber ;if _fccg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bcec :=args [2].ValueNumber ;if _bcec < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");
};return MakeNumberResult (_ga .Pow (_bcec /_fccg ,1/_fggd )-1);};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_ebece :=[]string {};for _febag :=range _geadb {_ebece =append (_ebece ,_febag );};for _dedfc :=range _faaag {_ebece =append (_ebece ,_dedfc );};_fc .Strings (_ebece );return _ebece ;};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_abda ,_adfc ,_cdgg :=_cbeg (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _cdgg .Type ==ResultTypeError {return _cdgg ;};_fcdd ,_cdgg :=_abgc (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _cdgg .Type ==ResultTypeError {return _cdgg ;};if _fcdd >=_abda {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};_effb :=args [3];if _effb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_baef :=_effb .ValueNumber ;if _baef < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_fbgg :=args [4];if _fbgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dead :=_fbgg .ValueNumber ;if _dead < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_abddg :=args [5];
if _abddg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_edbe :=_abddg .ValueNumber ;if _edbe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_ceecg :=args [6];
if _ceecg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cgbb :=float64 (int (_ceecg .ValueNumber ));if !_ffd (_cgbb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gefd :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_efccgb :=args [7];
if _efccgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gefd =int (_efccgb .ValueNumber );if !_dbgg (_gefd ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");
};};_afcf ,_cdgg :=_efec (_fcdd ,_adfc ,_gefd );if _cdgg .Type ==ResultTypeError {return _cdgg ;};_afcf *=_cgbb ;_feaaf ,_cdgg :=_efec (_abda ,_adfc ,_gefd );if _cdgg .Type ==ResultTypeError {return _cdgg ;};_feaaf *=_cgbb ;_caee ,_cdgg :=_efec (_fcdd ,_abda ,_gefd );
if _cdgg .Type ==ResultTypeError {return _cdgg ;};_caee *=_cgbb ;_dcag :=_edbe +_afcf *100*_baef /_cgbb ;_dcag /=_feaaf *_dead /_cgbb +1;_dcag -=_caee *100*_baef /_cgbb ;return MakeNumberResult (_dcag );};func _dbagg (_ebdd Result )[]Result {_ecgdd :=_ebdd .ValueList ;
if _ebdd .Type ==ResultTypeArray {_ecgdd =nil ;for _ ,_caff :=range _ebdd .ValueArray {if len (_caff )> 0{_ecgdd =append (_ecgdd ,_caff [0]);}else {_ecgdd =append (_ecgdd ,_eed );};};};return _ecgdd ;};const _bcc =_bdba +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";
type cmpResult int8 ;const _dcda =57369;

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eefe :=false ;for _ ,_bgadf :=range args {switch _bgadf .Type {case ResultTypeList ,ResultTypeArray :_fcag :=Or (_bgadf .ListValues ());if _fcag .Type ==ResultTypeError {return _fcag ;};if _fcag .ValueNumber !=0{_eefe =true ;};case ResultTypeNumber :if _bgadf .ValueNumber !=0{_eefe =true ;
};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _bgadf ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");
};};return MakeBoolResult (_eefe );};func _dbda (_efda ,_dbfe Result ,_ecgc string )(*xargs ,Result ){if _efda .Type !=ResultTypeList &&_efda .Type !=ResultTypeArray {return nil ,MakeErrorResult (_ecgc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_fddg :=_acddd (_efda );_fbdde :=[]float64 {};for _ ,_fcfb :=range _fddg {for _ ,_ffcd :=range _fcfb {if _ffcd .Type ==ResultTypeNumber &&!_ffcd .IsBoolean {_fbdde =append (_fbdde ,_ffcd .ValueNumber );}else {return nil ,MakeErrorResult (_ecgc +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");
};};};_bdef :=len (_fbdde );if len (_fbdde )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _dbfe .Type !=ResultTypeList &&_dbfe .Type !=ResultTypeArray {return nil ,MakeErrorResult (_ecgc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_cbag :=_acddd (_dbfe );_adca :=[]float64 {};_baed :=0.0;for _ ,_ddffd :=range _cbag {for _ ,_ffeb :=range _ddffd {if _ffeb .Type ==ResultTypeNumber &&!_ffeb .IsBoolean {_fdeff :=float64 (int (_ffeb .ValueNumber ));if _fdeff < _baed {return nil ,MakeErrorResultType (ErrorTypeNum ,_ecgc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");
};_adca =append (_adca ,_fdeff );_baed =_fdeff ;}else {return nil ,MakeErrorResult (_ecgc +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_adca )!=_bdef {return nil ,MakeErrorResultType (ErrorTypeNum ,"");
};return &xargs {_fbdde ,_adca },MakeEmptyResult ();};func _agec (){_efcd ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_cb .MustCompile ("\u005e"+_afd +_ecg );_efcd ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_cb .MustCompile ("\u005e"+_bcc +_ecg );
_efcd ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_cb .MustCompile ("\u005e"+_fbdf +_ecg );_efcd ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_cb .MustCompile ("\u005e"+_age +_ecg );_faaa ["\u0068\u0068"]=_cb .MustCompile (_bfd +_bdbg +"\u0024");
_faaa ["\u0068\u0068\u003am\u006d"]=_cb .MustCompile (_bfd +_fdg +"\u0024");_faaa ["\u006d\u006d\u003as\u0073"]=_cb .MustCompile (_bfd +_fbbg +"\u0024");_faaa ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_cb .MustCompile (_bfd +_cd +"\u0024");_gee =[]*_cb .Regexp {_cb .MustCompile ("\u005e"+_afd +"\u0024"),_cb .MustCompile ("\u005e"+_bcc +"\u0024"),_cb .MustCompile ("\u005e"+_fbdf +"\u0024"),_cb .MustCompile ("\u005e"+_age +"\u0024")};
_ecb =[]*_cb .Regexp {_cb .MustCompile ("\u005e"+_bdbg +"\u0024"),_cb .MustCompile ("\u005e"+_fdg +"\u0024"),_cb .MustCompile ("\u005e"+_fbbg +"\u0024"),_cb .MustCompile ("\u005e"+_cd +"\u0024")};};const (_bfdd cmpResult =0;_cffc cmpResult =-1;_gcbda cmpResult =1;
_fgca cmpResult =2;);

// Eval evaluates a vertical range returning a list of results or an error.
func (_egabe VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_ffdae :=_egabe .verticalRangeReference ();if _ccaae ,_eebfee :=ev .GetFromCache (_ffdae );_eebfee {return _ccaae ;};_efffg ,_bdfaf :=_bcegg (ctx ,_egabe ._bcgec ,_egabe ._febed );_ebfcc :=_ecdg (ctx ,ev ,_efffg ,_bdfaf );
ev .SetCache (_ffdae ,_ebfcc );return _ebfcc ;};

// Reference returns a string reference value to a vertical range with prefix.
func (_cceb PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_aedbf :=_cceb ._bgcg .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_cceb .verticalRangeReference (_aedbf .Value )};};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_ba :v }};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_baba :=len (args );if _baba < 3||_baba > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbcc :=args [0].ValueNumber ;if _bbcc !=float64 (int (_bbcc )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ffafb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_afeda :=args [2].ValueNumber ;_ccaa :=0.0;if _baba >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ccaa =args [3].ValueNumber ;};_geff :=0.0;if _baba >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_geff =args [4].ValueNumber ;if _geff !=0{_geff =1;};};_ccdd :=0.1;if _baba >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccdd =args [5].ValueNumber ;};_gaace :=100;_febd :=0;_acbf :=false ;_cebg :=1e-6;_geec :=_ccdd ;for _febd < _gaace &&!_acbf {_agafg :=_ga .Pow (_geec +1,_bbcc );_ecea :=_ga .Pow (_geec +1,_bbcc -1);_gbbf :=_geec *_geff +1;_fgbd :=_ffafb *(_agafg -1);
_cfbb :=_ccaa +_agafg *_afeda +_fgbd *_gbbf /_geec ;_ecgee :=_bbcc *_ecea *_afeda -_fgbd *_gbbf /_ga .Pow (_geec ,2);_dfab :=(_bbcc *_ffafb *_ecea *_gbbf +_fgbd *_geff )/_geec ;_bcb :=_cfbb /(_ecgee +_dfab );if _ga .Abs (_bcb )< _cebg {_acbf =true ;};_febd ++;
_geec -=_bcb ;};return MakeNumberResult (_geec );};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_ggegd .Lock ();defer _ggegd .Unlock ();if _cfgab ,_eggff :=_geadb [name ];_eggff {return _cfgab ;};return nil ;};func _gbdb (_bfe ,_cgfb float64 ,_afb ,_fgba int )float64 {_gfbf :=_dbab (_bfe );_cfaa :=_dbab (_cgfb );
_deeg :=_bbegc (_gfbf ,_cfaa ,_afb ,_fgba );return _bge (_deeg ,_gfbf ,_fgba );};func _dbgg (_fbcc int )bool {return _fbcc >=0&&_fbcc <=4};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_caab :=args [0];if _caab .Type !=ResultTypeArray &&_caab .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_dgac :=_caab .ValueArray ;if len (_dgac )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};return MakeNumberResult (float64 (len (_dgac )));};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_ggegd .Lock ();defer _ggegd .Unlock ();if _ ,_bgedf :=_geadb [name ];_bgedf {_ca .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_geadb [name ]=fn ;};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_ebadg :=len (args );if _ebadg < 4||_ebadg > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_agee :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dgdc :=args [1].ValueNumber ;if _dgdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ffdg :=args [2].ValueNumber ;if _ffdg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_deef :=args [3].ValueNumber ;_dbbd :=0.0;if _ebadg > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_dbbd =args [4].ValueNumber ;};_fgfc :=0;if _ebadg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fgfc =int (args [5].ValueNumber );if _fgfc !=0{_fgfc =1;};};return MakeNumberResult (_ggea (_agee ,_dgdc ,_ffdg ,_deef ,_dbbd ,_fgfc ));};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_ggag :=args [0].AsNumber ();if _ggag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_cedf :=10.0;if len (args )> 1{_fbdg :=args [1].AsNumber ();if _fbdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");
};_cedf =args [1].ValueNumber ;};if _ggag .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");
};if _cedf ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");
};return MakeNumberResult (_ga .Log (_ggag .ValueNumber )/_ga .Log (_cedf ));};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_beddc Result )ListValues ()[]Result {if _beddc .Type ==ResultTypeArray {_dacgc :=[]Result {};for _ ,_gfgbd :=range _beddc .ValueArray {for _ ,_ggfba :=range _gfgbd {_dacgc =append (_dacgc ,_ggfba );};};return _dacgc ;};if _beddc .Type ==ResultTypeList {return _beddc .ValueList ;
};return nil ;};func _bcd (_ecbd int ,_gacg _e .Month ,_cafb int )int64 {if _ecbd ==1900&&int (_gacg )<=2{_cafb --;};_aee :=_e .Date (_ecbd ,_gacg ,_cafb ,0,0,0,0,_e .UTC );return _aee .Unix ();};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_fada :=len (args );if _fada < 3||_fada > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bdf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_abf :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_efeba :=args [2].ValueNumber ;_dfaa :=0.0;if _fada >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_dfaa =args [3].ValueNumber ;};_fgda :=0.0;if _fada ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fgda =args [4].ValueNumber ;if _fgda !=0{_fgda =1;};};_ccfa :=_abf *(1+_bdf *_fgda )-_dfaa *_bdf ;_gdcec :=(_efeba *_bdf +_abf *(1+_bdf *_fgda ));return MakeNumberResult (_ga .Log (_ccfa /_gdcec )/_ga .Log (1+_bdf ));};func _gbb (_bfg BinOpType ,_ec []Result ,_af Result )Result {_bgc :=[]Result {};
switch _af .Type {case ResultTypeNumber :_dgg :=_af .ValueNumber ;for _gea :=range _ec {_bbf :=_ec [_gea ].AsNumber ();if _bbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _bfg {case BinOpTypePlus :_bgc =append (_bgc ,MakeNumberResult (_bbf .ValueNumber +_dgg ));case BinOpTypeMinus :_bgc =append (_bgc ,MakeNumberResult (_bbf .ValueNumber -_dgg ));case BinOpTypeMult :_bgc =append (_bgc ,MakeNumberResult (_bbf .ValueNumber *_dgg ));
case BinOpTypeDiv :if _dgg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bgc =append (_bgc ,MakeNumberResult (_bbf .ValueNumber /_dgg ));case BinOpTypeExp :_bgc =append (_bgc ,MakeNumberResult (_ga .Pow (_bbf .ValueNumber ,_dgg )));case BinOpTypeLT :_bgc =append (_bgc ,MakeBoolResult (_bbf .ValueNumber < _dgg ));
case BinOpTypeGT :_bgc =append (_bgc ,MakeBoolResult (_bbf .ValueNumber > _dgg ));case BinOpTypeEQ :_bgc =append (_bgc ,MakeBoolResult (_bbf .ValueNumber ==_dgg ));case BinOpTypeLEQ :_bgc =append (_bgc ,MakeBoolResult (_bbf .ValueNumber <=_dgg ));case BinOpTypeGEQ :_bgc =append (_bgc ,MakeBoolResult (_bbf .ValueNumber >=_dgg ));
case BinOpTypeNE :_bgc =append (_bgc ,MakeBoolResult (_bbf .ValueNumber !=_dgg ));default:return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_bfg ));
};};case ResultTypeString :_gc :=_af .ValueString ;for _ce :=range _ec {_ebc :=_ec [_ce ].AsString ();if _ebc .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _bfg {case BinOpTypeLT :_bgc =append (_bgc ,MakeBoolResult (_ebc .ValueString < _gc ));case BinOpTypeGT :_bgc =append (_bgc ,MakeBoolResult (_ebc .ValueString > _gc ));case BinOpTypeEQ :_bgc =append (_bgc ,MakeBoolResult (_ebc .ValueString ==_gc ));
case BinOpTypeLEQ :_bgc =append (_bgc ,MakeBoolResult (_ebc .ValueString <=_gc ));case BinOpTypeGEQ :_bgc =append (_bgc ,MakeBoolResult (_ebc .ValueString >=_gc ));case BinOpTypeNE :_bgc =append (_bgc ,MakeBoolResult (_ebc .ValueString !=_gc ));default:return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_bfg ));
};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");
};return MakeListResult (_bgc );};var _fdbf string =string ([]byte {92});func _gacc (_eecf int )string {if _eecf >=0&&_eecf < len (_ffdfg ){if _ffdfg [_eecf ]!=""{return _ffdfg [_eecf ];};};return _c .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_eecf );
};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afg :=int (args [0].ValueNumber );
return MakeBoolResult (_afg !=_afg /2*2);};

// String returns a string representation of a horizontal range.
func (_eega HorizontalRange )String ()string {return _eega .horizontalRangeReference ()};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_bgcg Expression ;_cgbfd ,_gadf string ;};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _gfdc (args ,false )};func _afdfc (_abad string ,_bdcbg []Result )(*parsedReplaceObject ,Result ){if len (_bdcbg )!=4{return nil ,MakeErrorResult (_abad +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _bdcbg [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_abad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_egada :=_bdcbg [0].ValueString ;if _bdcbg [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_abad +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");
};_addcg :=int (_bdcbg [1].ValueNumber )-1;if _bdcbg [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_abad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bgdce :=int (_bdcbg [2].ValueNumber );if _bdcbg [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_abad +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");
};_eccgb :=_bdcbg [3].ValueString ;return &parsedReplaceObject {_egada ,_addcg ,_bgdce ,_eccgb },_eed ;};

// String returns a string representation for Negate.
func (_fbfbc Negate )String ()string {return "\u002d"+_fbfbc ._befbge .String ()};const _faga =2;

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_babab :=args [0];_cafa :=args [1];if _cafa .Type !=ResultTypeArray &&_cafa .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_cbcb :=_dbagg (_cafa );_deeab :=-1;for _dgcf ,_ddag :=range _cbcb {if _dddd (_babab ,_ddag ,false ,false )==_bfdd {_deeab =_dgcf ;};};if _deeab ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};_eeaa :=_cbcb ;if len (args )==3{_eeaa =_dbagg (args [2]);};if _deeab < 0||_deeab >=len (_eeaa ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};return _eeaa [_deeab ];};func _cdfc (_bbecc string ,_aegf func (_baedb float64 )float64 )Function {return func (_ffcecb []Result )Result {if len (_ffcecb )!=1{return MakeErrorResult (_bbecc +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_bbgab :=_ffcecb [0].AsNumber ();switch _bbgab .Type {case ResultTypeNumber :_dbfgd :=_aegf (_bbgab .ValueNumber );if _ga .IsNaN (_dbfgd ){return MakeErrorResult (_bbecc +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");
};if _ga .IsInf (_dbfgd ,0){return MakeErrorResult (_bbecc +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _dbfgd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_bbecc +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult (1/_dbfgd );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_bbecc +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _bbgab ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bbecc ,_bbgab .Type ));
};};};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fadcf :=args [0].AsString ();if _fadcf .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};return ctx .Cell (_fadcf .ValueString ,ev );};func _decf (_eggg Result ,_bbdaa *criteriaParsed )bool {_edeae :=_gd .ToLower (_eggg .ValueString );_cbfac :=_bbdaa ._edaec ._dgabf ;_aeff :=_bbdaa ._edaec ._cceffc ;if _cbfac ==_bbfd {return _edeae ==_aeff ||_a .Match (_aeff ,_edeae );
};if _eggg .Type !=ResultTypeEmpty {if _edeae ==_bbdaa ._ecfcb ||_a .Match (_bbdaa ._ecfcb ,_edeae ){return true ;};if _ ,_abbb :=_fb .ParseFloat (_aeff ,64);_abbb ==nil {return false ;};switch _cbfac {case _cecbb :return _edeae <=_aeff ;case _bgebe :return _edeae >=_aeff ;
case _befcg :return _edeae < _aeff ;case _bafda :return _edeae > _aeff ;};};return false ;};func (_cgfgg *Lexer )Next ()*node {_cgfgg ._bdeeg .Lock ();defer _cgfgg ._bdeeg .Unlock ();if len (_cgfgg ._faabf )> 0{_effdf :=_cgfgg ._faabf [0];_cgfgg ._faabf =_cgfgg ._faabf [1:];
return _effdf ;};return _cgfgg .nextRaw ();};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_gdfg :=len (args );if (_gdfg !=2&&_gdfg !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ega :=0;if _gdfg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ega =int (args [2].ValueNumber );if !_dbgg (_ega ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");
};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gccg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cga :=args [1].ValueNumber ;_bedd ,_bba :=_efec (_gccg ,_cga ,_ega );if _bba .Type ==ResultTypeError {return _bba ;};return MakeNumberResult (_bedd );};var InvalidReferenceContext =&ivr {};const _aafcd ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";
func _dgcc (_dffe Result )*criteriaParsed {_eegb :=_dffe .Type ==ResultTypeNumber ;_fddb :=_dffe .ValueNumber ;_bggeg :=_gd .ToLower (_dffe .ValueString );_deee :=_cbcc (_bggeg );return &criteriaParsed {_eegb ,_fddb ,_bggeg ,_deee };};

// ResultType is the type of the result
//
//go:generate stringer -type=ResultType
type ResultType byte ;func _bedc (_cfdbe [][]Result )float64 {if len (_cfdbe )==2{_efaab :=_cfdbe [0][0].AsNumber ();_fdgg :=_cfdbe [0][1].AsNumber ();_baaa :=_cfdbe [1][0].AsNumber ();_ffac :=_cfdbe [1][1].AsNumber ();if _efaab .Type !=ResultTypeNumber ||_fdgg .Type !=ResultTypeNumber ||_baaa .Type !=ResultTypeNumber ||_ffac .Type !=ResultTypeNumber {return _ga .NaN ();
};return _efaab .ValueNumber *_ffac .ValueNumber -_baaa .ValueNumber *_fdgg .ValueNumber ;};_baab :=float64 (0);_bcdad :=float64 (1);for _gadcf :=range _cfdbe {_baab +=_bcdad *_cfdbe [0][_gadcf ].ValueNumber *_bedc (_degg (_cfdbe ,_gadcf ));_bcdad *=-1;
};return _baab ;};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_ga .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// GetEpoch returns a null time object for the invalid reference context.
func (_cgccd *ivr )GetEpoch ()_e .Time {return _e .Time {}};

// SetLocked does nothing for the invalid reference context.
func (_cada *ivr )SetLocked (cellRef string ,locked bool ){};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_abba :=len (args );if _abba < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _abba > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_daecf :=args [0];_edbd :=args [1];if _edbd .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_aaef :=args [2].AsNumber ();if _aaef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fcga :=false ;if _abba ==4&&args [3].Type !=ResultTypeEmpty {_aeec :=args [3].AsNumber ();if _aeec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _aeec .ValueNumber ==0{_fcga =true ;};};_dbde :=int (_aaef .ValueNumber )-1;_efdb :=-1;_bbbd :=false ;_agae :for _bcgda ,_cceg :=range _edbd .ValueArray {if len (_cceg )==0{continue ;};_fbgf :=_cceg [0];switch _dddd (_fbgf ,_daecf ,false ,_fcga ){case _cffc :_efdb =_bcgda ;
case _bfdd :_efdb =_bcgda ;_bbbd =true ;break _agae ;};};if _efdb ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_bagf :=_edbd .ValueArray [_efdb ];
if _dbde < 0||_dbde >=len (_bagf ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _bbbd ||!_fcga {return _bagf [_dbde ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};
_debbg :=int (args [0].ValueNumber );return MakeBoolResult (_debbg ==_debbg /2*2);};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dddgb :=args [0].AsNumber ();if _dddgb .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};if _dddgb .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};return MakeNumberResult (_gdeae (_dddgb .ValueNumber ));};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_efa :data }};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aacdb :=args [0];switch _aacdb .Type {case ResultTypeError :return _aacdb ;
case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_aacdb .ValueNumber !=0);};if _aacdb .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _bacgg (args );
case ResultTypeArray :return _daceb (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");
};};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_fdcf :=len (args );if _fdcf !=4&&_fdcf !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ddbfg :=args [0].ValueNumber ;if _ddbfg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_abdc :=args [1].ValueNumber ;if _abdc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aggf :=args [2].ValueNumber ;if _aggf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_efab :=args [3].ValueNumber ;if _efab < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");
};if _efab > _aggf {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_gdca :=2.0;if _fdcf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdca =args [4].ValueNumber ;if _gdca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};return MakeNumberResult (_deaf (_ddbfg ,_abdc ,_aggf ,_efab ,_gdca ));};func (_cbf *evCache )SetCache (key string ,value Result ){_cbf ._bgdd .Lock ();_cbf ._dbe [key ]=value ;_cbf ._bgdd .Unlock ();};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bfbfc :=args [0].AsNumber ();if _bfbfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_eacbb :=float64 (1);if _bfbfc .ValueNumber < 0{_eacbb =-1;};if len (args )> 1{_ceecd :=args [1].AsNumber ();if _ceecd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eacbb =_ceecd .ValueNumber ;};_bfgc :=float64 (1);if len (args )> 2{_cddd :=args [2].AsNumber ();if _cddd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_bfgc =_cddd .ValueNumber ;};if len (args )==1{return MakeNumberResult (_ga .Ceil (_bfbfc .ValueNumber ));};_dacd :=_bfbfc .ValueNumber ;_dacd ,_dfae :=_ga .Modf (_dacd /_eacbb );if _dfae !=0{if _bfbfc .ValueNumber > 0{_dacd ++;}else if _bfgc < 0{_dacd --;
};};return MakeNumberResult (_dacd *_eacbb );};

// Update returns the same object as updating sheet references does not affect Error.
func (_cfa Error )Update (q *_ed .UpdateQuery )Expression {return _cfa };type defEval struct{evCache ;_ebdf bool ;};const _agfg =57376;type countMode byte ;

// ReferenceType is a type of reference
//
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dggc :=_e .Now ();_ ,_bad :=_dggc .Zone ();_aeb :=_egd (_fef ,_dggc .Unix ()+int64 (_bad ))+1;return MakeNumberResult (_aeb );};

// Eval evaluates and returns the result of a sheet expression.
func (_dfddg SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");
};func (_dgacf *noCache )GetFromCache (key string )(Result ,bool ){return _eed ,false };

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func _efaf (_egbc ,_ebda float64 )float64 {_egbc =_ga .Trunc (_egbc );_ebda =_ga .Trunc (_ebda );if _egbc ==0&&_ebda ==0{return 0;};return _egbc *_ebda /_gfcae (_egbc ,_ebda );
};const _dbbb int =0;func _efga (_edae ,_dcfc []float64 ,_eeef float64 )float64 {_abdd :=_eeef +1;_gdag :=0.0;_adac :=len (_edae );_eaea :=_dcfc [0];for _ddda :=1;_ddda < _adac ;_ddda ++{_gfff :=(_dcfc [_ddda ]-_eaea )/365;_gdag -=_gfff *_edae [_ddda ]/_ga .Pow (_abdd ,_gfff +1);
};return _gdag ;};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gadc :=args [0].Ref ;if _gadc .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");
};_dgab ,_gddd :=_gdg .ParseCellReference (_gadc .Value );if _gddd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gadc .Value );};return MakeNumberResult (float64 (_dgab .RowIdx ));
};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};func (_ffe *evCache )GetFromCache (key string )(Result ,bool ){_ffe ._bgdd .Lock ();_ddac ,_fgc :=_ffe ._dbe [key ];_ffe ._bgdd .Unlock ();return _ddac ,_fgc ;
};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_ggegd .Lock ();defer _ggegd .Unlock ();if _ ,_fgfdd :=_faaag [name ];_fgfdd {_ca .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_faaag [name ]=fn ;};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_dff :=len (args );if _dff < 3||_dff > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bbec :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_fdgaf :=args [1].ValueNumber ;if _fdgaf !=float64 (int (_fdgaf )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebg :=args [2].ValueNumber ;_gadb :=0.0;if _dff >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gadb =args [3].ValueNumber ;};_dcge :=0;if _dff ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dcge =int (args [4].ValueNumber );if _dcge !=0{_dcge =1;};};return MakeNumberResult (_feed (_bbec ,_fdgaf ,_ebg ,_gadb ,_dcge ));};const _dadgg =57356;func (_efeg *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");
};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};type ri struct{_gdgda float64 ;_cgcb string ;};func (_gbgaf ResultType )String ()string {if _gbgaf >=ResultType (len (_bbcad )-1){return _c .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_gbgaf );
};return _aafcd [_bbcad [_gbgaf ]:_bbcad [_gbgaf +1]];};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_dbd :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_acfd :=args [2].ValueNumber +1;if _acfd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_agb :=_acddd (args [0]);_aega :=float64 (len (_agb ));_abae ,_egcf :=0.0,0.0;_edea ,_eebc :=1.0,1.0;_gadbe ,_fdaf :=false ,false ;for _ ,_bbbg :=range _agb {for _ ,_acea :=range _bbbg {if _acea .Type ==ResultTypeNumber &&!_acea .IsBoolean {_dace :=_acea .ValueNumber ;
if _dace ==0{continue ;}else {if _dace > 0{_gadbe =true ;_egcf +=_acea .ValueNumber *_eebc ;}else {_fdaf =true ;_abae +=_acea .ValueNumber *_edea ;};_edea /=_dbd ;_eebc /=_acfd ;};};};};if !_gadbe ||!_fdaf {return MakeErrorResultType (ErrorTypeDivideByZero ,"");
};_gbaa :=-_egcf /_abae ;_gbaa *=_ga .Pow (_acfd ,_aega -1);_gbaa =_ga .Pow (_gbaa ,1/(_aega -1));return MakeNumberResult (_gbaa -1);};func _ggec (_cbbad float64 )float64 {return float64 (int (_cbbad +0.5))};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_degb :=args [1].ValueNumber ;_aaf :=args [0];var _cfb float64 ;switch _aaf .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
case ResultTypeNumber :_cfb =_aaf .ValueNumber ;case ResultTypeString :_gcf :=DateValue ([]Result {args [0]});if _gcf .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_cfb =_gcf .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_adga :=_dbab (_cfb );_aae :=_adga .AddDate (0,int (_degb ),0);
_fdfg ,_bee ,_ddb :=_aae .Date ();_cgd :=_dcg (_fdfg ,int (_bee ),_ddb );if _cgd < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};return MakeNumberResult (_cgd );};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_ccegc :=args [0].AsNumber ();
_ecdea :=args [1].AsNumber ();if _ccegc .Type ==ResultTypeNumber &&_ecdea .Type ==ResultTypeNumber {_adcab :=_ga .Atan2 (_ecdea .ValueNumber ,_ccegc .ValueNumber );if _adcab !=_adcab {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");
};return MakeNumberResult (_adcab );};for _ ,_gagb :=range []ResultType {_ccegc .Type ,_ecdea .Type }{switch _gagb {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
case ResultTypeError :return _ccegc ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gagb ));
};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_fdffe ,_bdag int };

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fedc ,_beec ,_dbgd :=_cbeg (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _dbgd .Type ==ResultTypeError {return _dbgd ;};_efb ,_dbgd :=_abgc (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _dbgd .Type ==ResultTypeError {return _dbgd ;};if _efb >=_fedc {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_fbcb :=args [3].ValueNumber ;if _fbcb < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fgef :=args [4].ValueNumber ;if _fgef <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_aaea :=args [5].ValueNumber ;if _aaea < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_agag :=float64 (int (args [6].ValueNumber ));if !_ffd (_agag ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_aedbd :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_aedbd =int (args [7].ValueNumber );if !_dbgg (_aedbd ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");
};};_cfaff ,_dbgd :=_efec (_efb ,_beec ,_aedbd );if _dbgd .Type ==ResultTypeError {return _dbgd ;};_cfaff *=_agag ;_cfgb ,_dbgd :=_efec (_fedc ,_beec ,_aedbd );if _dbgd .Type ==ResultTypeError {return _dbgd ;};_cfgb *=_agag ;_aaag ,_dbgd :=_efec (_efb ,_fedc ,_aedbd );
if _dbgd .Type ==ResultTypeError {return _dbgd ;};_aaag *=_agag ;_gdfc :=_aaea +_cfaff *100*_fbcb /_agag ;_gdfc /=_fgef +_aaag *100*_fbcb /_agag ;_gdfc --;_gdfc *=_agag /_cfgb ;return MakeNumberResult (_gdfc );};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_bcgec ,_febed string };

// Update updates the horizontal range references after removing a row/column.
func (_edgc HorizontalRange )Update (q *_ed .UpdateQuery )Expression {return _edgc };func _bfc (_dba BinOpType ,_cf ,_ge [][]Result )Result {_bd :=[][]Result {};for _cfc :=range _cf {_cbd :=_de (_dba ,_cf [_cfc ],_ge [_cfc ]);if _cbd .Type ==ResultTypeError {return _cbd ;
};_bd =append (_bd ,_cbd .ValueList );};return MakeArrayResult (_bd );};

// String returns a string representation of SheetPrefixExpr.
func (_eacgg SheetPrefixExpr )String ()string {return _eacgg ._egfab };var _gcfeb []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};


// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gabd :=args [0].AsString ();if _gabd .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gbaac :=_b .Buffer {};_afbed :=false ;for _ ,_afegd :=range _gabd .ValueString {if !_afbed &&_d .IsLetter (_afegd ){_gbaac .WriteRune (_d .ToUpper (_afegd ));}else {_gbaac .WriteRune (_d .ToLower (_afegd ));};_afbed =_d .IsLetter (_afegd );};return MakeStringResult (_gbaac .String ());
};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_becaa ,_dbfbf :=_fbcf ("\u0046\u0049\u004e\u0044",args );if _dbfbf .Type !=ResultTypeEmpty {return _dbfbf ;};_fagcb :=_gd .ToLower (_becaa ._baffb );if _fagcb ==""{return MakeNumberResult (1.0);};_badeb :=_gd .ToLower (_becaa ._bcde );
_cfca :=_becaa ._daae ;_adde :=1;for _gfcgf :=range _badeb {if _adde < _cfca {_adde ++;continue ;};_dffec :=_a .Index (_fagcb ,_badeb [_gfcgf :]);if _dffec ==0{return MakeNumberResult (float64 (_adde ));};_adde ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};func _abbd (_ecbee []Result ,_cgg bool )Result {_dcbg :="\u004d\u0049\u004e";if _cgg {_dcbg ="\u004d\u0049\u004e\u0041";};if len (_ecbee )==0{return MakeErrorResult (_dcbg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_effa :=_ga .MaxFloat64 ;for _ ,_gggcf :=range _ecbee {switch _gggcf .Type {case ResultTypeNumber :if (_cgg ||!_gggcf .IsBoolean )&&_gggcf .ValueNumber < _effa {_effa =_gggcf .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_bgbf :=_abbd (_gggcf .ListValues (),_cgg );
if _bgbf .ValueNumber < _effa {_effa =_bgbf .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_befec :=0.0;if _cgg {_befec =_gggcf .AsNumber ().ValueNumber ;};if _befec < _effa {_effa =_befec ;};default:_ca .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_dcbg +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gggcf .Type );
};};if _effa ==_ga .MaxFloat64 {_effa =0;};return MakeNumberResult (_effa );};func (_aadb *ivr )SetOffset (col ,row uint32 ){};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_dcc :=_gd .ToLower (args [0].ValueString );if !_becf (_dcc ){_ ,_ ,_ ,_ ,_beca ,_aaa :=_accd (_dcc );if _aaa .Type ==ResultTypeError {_aaa .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";
return _aaa ;};if _beca {return MakeNumberResult (0);};};_bfda ,_bbea ,_egg ,_ ,_cfg :=_aac (_dcc );if _cfg .Type ==ResultTypeError {return _cfg ;};return MakeNumberResult (_dcg (_bfda ,_bbea ,_egg ));};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_edd :=args [0];switch _edd .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_abce :=_dbab (_edd .ValueNumber );return MakeNumberResult (float64 (_abce .Day ()));case ResultTypeString :_bfgd :=_gd .ToLower (_edd .ValueString );if !_becf (_bfgd ){_ ,_ ,_ ,_ ,_efeb ,_ebad :=_accd (_bfgd );if _ebad .Type ==ResultTypeError {_ebad .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";
return _ebad ;};if _efeb {return MakeNumberResult (0);};};_ ,_ ,_edc ,_ ,_fcd :=_aac (_bfgd );if _fcd .Type ==ResultTypeError {return _fcd ;};return MakeNumberResult (float64 (_edc ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");
};};func _bfdb (_aacac []Result ,_dggb string )(*cumulArgs ,Result ){if len (_aacac )!=6{return nil ,MakeErrorResult (_dggb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _aacac [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dggb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bffc :=_aacac [0].ValueNumber ;
if _bffc <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dggb +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _aacac [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dggb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cegd :=_aacac [1].ValueNumber ;if _cegd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dggb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if _aacac [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dggb +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfad :=_aacac [2].ValueNumber ;if _cfad <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dggb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _aacac [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dggb +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_dgcg :=_aacac [3].ValueNumber ;if _dgcg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dggb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _aacac [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dggb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dcffe :=_aacac [4].ValueNumber ;if _dcffe <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dggb +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if _dcffe < _dgcg {return nil ,MakeErrorResultType (ErrorTypeNum ,_dggb +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");
};if _dcffe > _cegd {return nil ,MakeErrorResultType (ErrorTypeNum ,_dggb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");
};_bgeb :=int (_aacac [5].ValueNumber );if _bgeb !=0&&_bgeb !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_dggb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");
};return &cumulArgs {_bffc ,_cegd ,_cfad ,_dgcg ,_dcffe ,_bgeb },_eed ;};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_bdfe PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_befa :=_bdfe ._bgcg .Reference (ctx ,ev );switch _befa .Type {case ReferenceTypeSheet :if _aacag (_befa ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_befa .Value ));
};_acgge :=_bdfe .verticalRangeReference (_befa .Value );if _cfbca ,_bbbgc :=ev .GetFromCache (_acgge );_bbbgc {return _cfbca ;};_daeag :=ctx .Sheet (_befa .Value );_acbeg ,_bbba :=_bcegg (_daeag ,_bdfe ._cgbfd ,_bdfe ._gadf );_adaga :=_ecdg (_daeag ,ev ,_acbeg ,_bbba );
ev .SetCache (_acgge ,_adaga );return _adaga ;default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_befa .Type ));
};};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_dacba :name ,_cgee :args };};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgae :=true ;for _ ,_gddba :=range args {_gddba =_gddba .AsNumber ();switch _gddba .Type {case ResultTypeList ,ResultTypeArray :_aeef :=And (_gddba .ListValues ());if _aeef .Type ==ResultTypeError {return _aeef ;};if _aeef .ValueNumber ==0{_fgae =false ;
};case ResultTypeNumber :if _gddba .ValueNumber ==0{_fgae =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
case ResultTypeError :return _gddba ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");
};};return MakeBoolResult (_fgae );};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_ceecf ,_ceaf ,_daddg :=_cbeg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _daddg .Type ==ResultTypeError {return _daddg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eccg :=_ceaf -_ceecf ;if _eccg > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_fdd :=args [2].ValueNumber ;if _fdd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (100*(1-_fdd *_eccg /360));};const _cgag =57375;

// Eval evaluates the binary expression using the context given.
func (_db BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_bg :=_db ._cag .Eval (ctx ,ev );if _bg .Type ==ResultTypeError {return _bg ;};_bf :=_db ._ae .Eval (ctx ,ev );if _bf .Type ==ResultTypeError {return _bf ;};if _bg .Type ==_bf .Type {if _bg .Type ==ResultTypeArray {if !_gg (_bg .ValueArray ,_bf .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _bfc (_db ._be ,_bg .ValueArray ,_bf .ValueArray );}else if _bg .Type ==ResultTypeList {if len (_bg .ValueList )!=len (_bf .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _de (_db ._be ,_bg .ValueList ,_bf .ValueList );};}else if _bg .Type ==ResultTypeArray &&(_bf .Type ==ResultTypeNumber ||_bf .Type ==ResultTypeString ){return _eba (_db ._be ,_bg .ValueArray ,_bf );}else if _bg .Type ==ResultTypeList &&(_bf .Type ==ResultTypeNumber ||_bf .Type ==ResultTypeString ){return _gbb (_db ._be ,_bg .ValueList ,_bf );
};switch _db ._be {case BinOpTypePlus :if _bg .Type ==_bf .Type {if _bg .Type ==ResultTypeNumber {return MakeNumberResult (_bg .ValueNumber +_bf .ValueNumber );};};case BinOpTypeMinus :if _bg .Type ==_bf .Type {if _bg .Type ==ResultTypeNumber {return MakeNumberResult (_bg .ValueNumber -_bf .ValueNumber );
};};case BinOpTypeMult :if _bg .Type ==_bf .Type {if _bg .Type ==ResultTypeNumber {return MakeNumberResult (_bg .ValueNumber *_bf .ValueNumber );};};case BinOpTypeDiv :if _bg .Type ==_bf .Type {if _bg .Type ==ResultTypeNumber {if _bf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");
};return MakeNumberResult (_bg .ValueNumber /_bf .ValueNumber );};};case BinOpTypeExp :if _bg .Type ==_bf .Type {if _bg .Type ==ResultTypeNumber {return MakeNumberResult (_ga .Pow (_bg .ValueNumber ,_bf .ValueNumber ));};};case BinOpTypeLT :if _bg .Type ==_bf .Type {if _bg .Type ==ResultTypeNumber {return MakeBoolResult (_bg .ValueNumber < _bf .ValueNumber );
};if _bg .Type ==ResultTypeString {return MakeBoolResult (_bg .ValueString < _bf .ValueString );};if _bg .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _bg .Type ==ResultTypeString &&_bf .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _bg .Type ==ResultTypeNumber &&_bf .Type ==ResultTypeString {return MakeBoolResult (true );}else if _bg .Type ==ResultTypeEmpty &&(_bf .Type ==ResultTypeNumber ||_bf .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_bg .Type ==ResultTypeNumber ||_bg .Type ==ResultTypeString )&&_bf .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};case BinOpTypeGT :if _bg .Type ==_bf .Type {if _bg .Type ==ResultTypeNumber {return MakeBoolResult (_bg .ValueNumber > _bf .ValueNumber );};if _bg .Type ==ResultTypeString {return MakeBoolResult (_bg .ValueString > _bf .ValueString );};if _bg .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if _bg .Type ==ResultTypeString &&_bf .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _bg .Type ==ResultTypeNumber &&_bf .Type ==ResultTypeString {return MakeBoolResult (false );}else if _bg .Type ==ResultTypeEmpty &&(_bf .Type ==ResultTypeNumber ||_bf .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if (_bg .Type ==ResultTypeNumber ||_bg .Type ==ResultTypeString )&&_bf .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _bg .Type ==_bf .Type {if _bg .Type ==ResultTypeNumber {return MakeBoolResult (_bg .ValueNumber ==_bf .ValueNumber );
};if _bg .Type ==ResultTypeString {return MakeBoolResult (_bg .ValueString ==_bf .ValueString );};if _bg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_bg .Type ==ResultTypeString &&_bf .Type ==ResultTypeNumber )||(_bg .Type ==ResultTypeNumber &&_bf .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if _bg .Type ==ResultTypeEmpty &&(_bf .Type ==ResultTypeNumber ||_bf .Type ==ResultTypeString ){return MakeBoolResult (_ag (_bf ));}else if (_bg .Type ==ResultTypeNumber ||_bg .Type ==ResultTypeString )&&_bf .Type ==ResultTypeEmpty {return MakeBoolResult (_ag (_bg ));
};case BinOpTypeNE :if _bg .Type ==_bf .Type {if _bg .Type ==ResultTypeNumber {return MakeBoolResult (_bg .ValueNumber !=_bf .ValueNumber );};if _bg .Type ==ResultTypeString {return MakeBoolResult (_bg .ValueString !=_bf .ValueString );};if _bg .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if (_bg .Type ==ResultTypeString &&_bf .Type ==ResultTypeNumber )||(_bg .Type ==ResultTypeNumber &&_bf .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _bg .Type ==ResultTypeEmpty &&(_bf .Type ==ResultTypeNumber ||_bf .Type ==ResultTypeString ){return MakeBoolResult (!_ag (_bf ));
}else if (_bg .Type ==ResultTypeNumber ||_bg .Type ==ResultTypeString )&&_bf .Type ==ResultTypeEmpty {return MakeBoolResult (!_ag (_bg ));};case BinOpTypeLEQ :if _bg .Type ==_bf .Type {if _bg .Type ==ResultTypeNumber {return MakeBoolResult (_bg .ValueNumber <=_bf .ValueNumber );
};if _bg .Type ==ResultTypeString {return MakeBoolResult (_bg .ValueString <=_bf .ValueString );};if _bg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _bg .Type ==ResultTypeString &&_bf .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _bg .Type ==ResultTypeNumber &&_bf .Type ==ResultTypeString {return MakeBoolResult (true );}else if _bg .Type ==ResultTypeEmpty &&(_bf .Type ==ResultTypeNumber ||_bf .Type ==ResultTypeString ){return MakeBoolResult (_ag (_bf ));}else if (_bg .Type ==ResultTypeNumber ||_bg .Type ==ResultTypeString )&&_bf .Type ==ResultTypeEmpty {return MakeBoolResult (_ag (_bg ));
};case BinOpTypeGEQ :if _bg .Type ==_bf .Type {if _bg .Type ==ResultTypeNumber {return MakeBoolResult (_bg .ValueNumber >=_bf .ValueNumber );};if _bg .Type ==ResultTypeString {return MakeBoolResult (_bg .ValueString >=_bf .ValueString );};if _bg .Type ==ResultTypeEmpty {return MakeBoolResult (true );
};}else if _bg .Type ==ResultTypeString &&_bf .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _bg .Type ==ResultTypeNumber &&_bf .Type ==ResultTypeString {return MakeBoolResult (false );}else if _bg .Type ==ResultTypeEmpty &&(_bf .Type ==ResultTypeNumber ||_bf .Type ==ResultTypeString ){return MakeBoolResult (_ag (_bf ));
}else if (_bg .Type ==ResultTypeNumber ||_bg .Type ==ResultTypeString )&&_bf .Type ==ResultTypeEmpty {return MakeBoolResult (_ag (_bg ));};case BinOpTypeConcat :return MakeStringResult (_bg .Value ()+_bf .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");
};

// Update updates references in the PrefixExpr after removing a row/column.
func (_dedb PrefixExpr )Update (q *_ed .UpdateQuery )Expression {_efebg :=_dedb ;_dcbdb :=_dedb ._fbeda .String ();if _dcbdb ==q .SheetToUpdate {_bceec :=*q ;_bceec .UpdateCurrentSheet =true ;_efebg ._bfff =_dedb ._bfff .Update (&_bceec );};return _efebg ;
};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_efa [][]Expression };const _bdba ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";
func _adce (_fgcdd ,_gcbg ,_dfeg ,_gfef int )int {if _gcbg > _dfeg {return 0;};if _ffag (_gfef ){return (_dfeg -_gcbg +1)*30;};_efg :=0;for _gdff :=_gcbg ;_gdff <=_dfeg ;_gdff ++{_efg +=_acc (_fgcdd ,_gdff );};return _efg ;};

// Reference returns an invalid reference for FunctionCall.
func (_dfdef FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_egfab string };

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_adebg Result )AsNumber ()Result {if _adebg .Type ==ResultTypeString {_aecb ,_dgccf :=_fb .ParseFloat (_adebg .ValueString ,64);if _dgccf ==nil {return MakeNumberResult (_aecb );};};if _adebg .Type ==ResultTypeEmpty {return MakeNumberResult (0);};
return _adebg ;};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _abbd (args ,false )};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_ffee :=len (args );if _ffee !=3&&_ffee !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eeca ,_cffg :=_gcac (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _cffg .Type ==ResultTypeError {return _cffg ;};_cbcge ,_cffg :=_gcac (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");
if _cffg .Type ==ResultTypeError {return _cffg ;};_bdggg ,_cffg :=_gcac (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _cffg .Type ==ResultTypeError {return _cffg ;};_ccea :=0;
if _ffee ==3{return MakeStringResult (_gd .Replace (_eeca ,_cbcge ,_bdggg ,-1));}else {_cgecf ,_dcbde :=_fggdb (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");
if _dcbde .Type ==ResultTypeError {return _dcbde ;};_ccea =int (_cgecf );if _ccea < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");
};_eace :=_eeca ;_bebf :=_ccea ;_ecgdb :=-1;_ggfae :=len (_cbcge );_bfbaf :=0;for {_bebf --;_daba :=_gd .Index (_eace ,_cbcge );if _daba ==-1{_ecgdb =-1;break ;}else {_ecgdb =_daba +_bfbaf ;if _bebf ==0{break ;};_fegd :=_ggfae +_daba ;_bfbaf +=_fegd ;_eace =_eace [_fegd :];
};};if _ecgdb ==-1{return MakeStringResult (_eeca );}else {_dgbe :=_eeca [:_ecgdb ];_dgcb :=_eeca [_ecgdb +_ggfae :];return MakeStringResult (_dgbe +_bdggg +_dgcb );};};};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_dcacg *ivr )GetLabelPrefix (cellRef string )string {return ""};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);const _bggg =57368;var _cagf []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
const _agaba =57374;func (_gbffd *Lexer )lex (_afga _cc .Reader ){_fcgb ,_gcfdb ,_gegg :=0,0,0;_bggd :=-1;_gdade ,_eabed ,_bgebg :=0,0,0;_ =_bgebg ;_ddcaa :=1;_ =_ddcaa ;_cgddb :=make ([]byte ,4096);_acbcb :=false ;for !_acbcb {_eabfb :=0;if _gdade > 0{_eabfb =_gcfdb -_gdade ;
};_gcfdb =0;_geca ,_bbcd :=_afga .Read (_cgddb [_eabfb :]);if _geca ==0||_bbcd !=nil {_acbcb =true ;};_gegg =_geca +_eabfb ;if _gegg < len (_cgddb ){_bggd =_gegg ;};{_fcgb =_cfbg ;_gdade =0;_eabed =0;_bgebg =0;};{var _gcgcd int ;var _gfeb uint ;if _gcfdb ==_gegg {goto _eecc ;
};if _fcgb ==0{goto _abbad ;};_edbea :_gcgcd =int (_gbebg [_fcgb ]);_gfeb =uint (_gcfeb [_gcgcd ]);_gcgcd ++;for ;_gfeb > 0;_gfeb --{_gcgcd ++;switch _gcfeb [_gcgcd -1]{case 2:_gdade =_gcfdb ;};};switch _fcgb {case 30:switch _cgddb [_gcfdb ]{case 34:goto _abafb ;
case 35:goto _baae ;case 36:goto _fefc ;case 38:goto _ddcee ;case 39:goto _fceca ;case 40:goto _efcce ;case 41:goto _bbacf ;case 42:goto _bdaa ;case 43:goto _gddac ;case 44:goto _ccaab ;case 45:goto _geffd ;case 47:goto _cgdeb ;case 58:goto _dcdcf ;case 59:goto _bbdb ;
case 60:goto _deace ;case 61:goto _dfdc ;case 62:goto _geceg ;case 63:goto _cdgda ;case 70:goto _gefgf ;case 84:goto _bfbaa ;case 92:goto _agfff ;case 94:goto _ceffc ;case 95:goto _fggc ;case 123:goto _dcdfb ;case 125:goto _bfbfa ;};switch {case _cgddb [_gcfdb ]< 65:switch {case _cgddb [_gcfdb ]> 37:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _bcdege ;
};case _cgddb [_gcfdb ]>=33:goto _cdgda ;};case _cgddb [_gcfdb ]> 90:switch {case _cgddb [_gcfdb ]> 93:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _dagea ;};case _cgddb [_gcfdb ]>=91:goto _cdgda ;};default:goto _cefad ;};goto _ebebc ;case 1:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;
case 47:goto _eggd ;case 123:goto _eggd ;case 125:goto _eggd ;};switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _eggd ;};case _cgddb [_gcfdb ]> 45:switch {case _cgddb [_gcfdb ]> 63:if 91<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=94{goto _eggd ;
};case _cgddb [_gcfdb ]>=58:goto _eggd ;};default:goto _eggd ;};goto _ebebc ;case 0:goto _abbad ;case 2:if _cgddb [_gcfdb ]==34{goto _ceecc ;};goto _abafb ;case 31:if _cgddb [_gcfdb ]==34{goto _abafb ;};goto _dacg ;case 3:switch _cgddb [_gcfdb ]{case 78:goto _fgggc ;
case 82:goto _ebfcd ;};goto _cdgda ;case 4:switch _cgddb [_gcfdb ]{case 47:goto _fabbb ;case 85:goto _agff ;};goto _cdgda ;case 5:if _cgddb [_gcfdb ]==65{goto _gcgaeb ;};goto _cdgda ;case 6:switch _cgddb [_gcfdb ]{case 76:goto _dfdd ;case 77:goto _afef ;
};goto _cdgda ;case 7:if _cgddb [_gcfdb ]==76{goto _afef ;};goto _cdgda ;case 8:if _cgddb [_gcfdb ]==33{goto _gcgaeb ;};goto _cdgda ;case 9:if _cgddb [_gcfdb ]==69{goto _efce ;};goto _cdgda ;case 10:if _cgddb [_gcfdb ]==70{goto _cceac ;};goto _cdgda ;case 11:if _cgddb [_gcfdb ]==33{goto _gbbg ;
};goto _cdgda ;case 12:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 47:goto _cdgda ;case 123:goto _cdgda ;case 125:goto _cdgda ;};switch {case _cgddb [_gcfdb ]< 48:switch {case _cgddb [_gcfdb ]> 35:if 37<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=45{goto _cdgda ;
};case _cgddb [_gcfdb ]>=34:goto _cdgda ;};case _cgddb [_gcfdb ]> 57:switch {case _cgddb [_gcfdb ]< 65:if 58<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=63{goto _cdgda ;};case _cgddb [_gcfdb ]> 90:if 91<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=94{goto _cdgda ;};default:goto _ffcc ;
};default:goto _cdefb ;};goto _ebebc ;case 13:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 47:goto _cdgda ;case 58:goto _febe ;case 123:goto _cdgda ;case 125:goto _cdgda ;};switch {case _cgddb [_gcfdb ]< 48:switch {case _cgddb [_gcfdb ]> 35:if 37<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=45{goto _cdgda ;
};case _cgddb [_gcfdb ]>=34:goto _cdgda ;};case _cgddb [_gcfdb ]> 57:switch {case _cgddb [_gcfdb ]> 63:if 91<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=94{goto _cdgda ;};case _cgddb [_gcfdb ]>=59:goto _cdgda ;};default:goto _cdefb ;};goto _ebebc ;case 14:if _cgddb [_gcfdb ]==36{goto _adagc ;
};if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _dedec ;};goto _eggd ;case 15:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _dedec ;};goto _eggd ;case 32:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _dedec ;};goto _aafce ;case 16:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;
case 36:goto _bbafa ;case 47:goto _cdgda ;case 58:goto _fagcbe ;case 123:goto _cdgda ;case 125:goto _cdgda ;};switch {case _cgddb [_gcfdb ]< 59:switch {case _cgddb [_gcfdb ]> 45:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _afceg ;};case _cgddb [_gcfdb ]>=34:goto _cdgda ;
};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]> 90:if 91<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=94{goto _cdgda ;};case _cgddb [_gcfdb ]>=65:goto _ffcc ;};default:goto _cdgda ;};goto _ebebc ;case 17:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 47:goto _eggd ;
case 123:goto _eggd ;case 125:goto _eggd ;};switch {case _cgddb [_gcfdb ]< 48:switch {case _cgddb [_gcfdb ]> 35:if 37<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=45{goto _eggd ;};case _cgddb [_gcfdb ]>=34:goto _eggd ;};case _cgddb [_gcfdb ]> 57:switch {case _cgddb [_gcfdb ]> 63:if 91<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=94{goto _eggd ;
};case _cgddb [_gcfdb ]>=58:goto _eggd ;};default:goto _afceg ;};goto _ebebc ;case 33:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 47:goto _cgfcg ;case 123:goto _cgfcg ;case 125:goto _cgfcg ;};switch {case _cgddb [_gcfdb ]< 48:switch {case _cgddb [_gcfdb ]> 35:if 37<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=45{goto _cgfcg ;
};case _cgddb [_gcfdb ]>=34:goto _cgfcg ;};case _cgddb [_gcfdb ]> 57:switch {case _cgddb [_gcfdb ]> 63:if 91<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=94{goto _cgfcg ;};case _cgddb [_gcfdb ]>=58:goto _cgfcg ;};default:goto _afceg ;};goto _ebebc ;case 18:if _cgddb [_gcfdb ]==36{goto _gegb ;
};if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _aacef ;};goto _eggd ;case 19:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _aacef ;};goto _eggd ;case 34:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _aacef ;};goto _ccgdf ;case 20:switch _cgddb [_gcfdb ]{case 39:goto _cdgda ;
case 42:goto _cdgda ;case 47:goto _cdgda ;case 58:goto _cdgda ;case 63:goto _cdgda ;};if 91<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=93{goto _cdgda ;};goto _bgage ;case 21:switch _cgddb [_gcfdb ]{case 39:goto _gdcf ;case 42:goto _cdgda ;case 47:goto _cdgda ;
case 58:goto _cdgda ;case 63:goto _cdgda ;};if 91<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=93{goto _cdgda ;};goto _bgage ;case 22:if _cgddb [_gcfdb ]==33{goto _eddge ;};goto _cdgda ;case 35:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 46:goto _dgabfa ;
case 58:goto _febe ;case 101:goto _cegc ;case 123:goto _dfaafa ;case 125:goto _dfaafa ;};switch {case _cgddb [_gcfdb ]< 48:switch {case _cgddb [_gcfdb ]> 35:if 37<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=47{goto _dfaafa ;};case _cgddb [_gcfdb ]>=34:goto _dfaafa ;
};case _cgddb [_gcfdb ]> 57:switch {case _cgddb [_gcfdb ]> 63:if 91<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=94{goto _dfaafa ;};case _cgddb [_gcfdb ]>=59:goto _dfaafa ;};default:goto _bcdege ;};goto _ebebc ;case 36:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;
case 47:goto _dfaafa ;case 101:goto _cegc ;case 123:goto _dfaafa ;case 125:goto _dfaafa ;};switch {case _cgddb [_gcfdb ]< 48:switch {case _cgddb [_gcfdb ]> 35:if 37<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=45{goto _dfaafa ;};case _cgddb [_gcfdb ]>=34:goto _dfaafa ;
};case _cgddb [_gcfdb ]> 57:switch {case _cgddb [_gcfdb ]> 63:if 91<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=94{goto _dfaafa ;};case _cgddb [_gcfdb ]>=58:goto _dfaafa ;};default:goto _dgabfa ;};goto _ebebc ;case 23:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;
case 47:goto _fcfbd ;case 123:goto _fcfbd ;case 125:goto _fcfbd ;};switch {case _cgddb [_gcfdb ]< 48:switch {case _cgddb [_gcfdb ]> 35:if 37<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=45{goto _fcfbd ;};case _cgddb [_gcfdb ]>=34:goto _fcfbd ;};case _cgddb [_gcfdb ]> 57:switch {case _cgddb [_gcfdb ]> 63:if 91<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=94{goto _fcfbd ;
};case _cgddb [_gcfdb ]>=58:goto _fcfbd ;};default:goto _dgcbe ;};goto _ebebc ;case 37:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 47:goto _dfaafa ;case 123:goto _dfaafa ;case 125:goto _dfaafa ;};switch {case _cgddb [_gcfdb ]< 48:switch {case _cgddb [_gcfdb ]> 35:if 37<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=45{goto _dfaafa ;
};case _cgddb [_gcfdb ]>=34:goto _dfaafa ;};case _cgddb [_gcfdb ]> 57:switch {case _cgddb [_gcfdb ]> 63:if 91<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=94{goto _dfaafa ;};case _cgddb [_gcfdb ]>=58:goto _dfaafa ;};default:goto _dgcbe ;};goto _ebebc ;case 38:switch _cgddb [_gcfdb ]{case 61:goto _ababb ;
case 62:goto _bdcc ;};goto _cabg ;case 39:if _cgddb [_gcfdb ]==61{goto _gcge ;};goto _gebg ;case 24:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 36:goto _bbafa ;case 40:goto _bebe ;case 46:goto _dccg ;case 58:goto _fagcbe ;case 92:goto _dbeeg ;case 95:goto _gbed ;
case 123:goto _cdgda ;case 125:goto _cdgda ;};switch {case _cgddb [_gcfdb ]< 59:switch {case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _fgdag ;};case _cgddb [_gcfdb ]>=34:goto _cdgda ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _cebfg ;
};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;};default:goto _cdgda ;};default:goto _cdgda ;};goto _ebebc ;case 40:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 40:goto _bebe ;case 46:goto _dccg ;case 92:goto _dbeeg ;
case 95:goto _gbed ;case 123:goto _ccee ;case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 58:switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _ccee ;};case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _dccg ;
};default:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _dccg ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;};default:goto _ccee ;};
default:goto _ccee ;};goto _ebebc ;case 41:switch _cgddb [_gcfdb ]{case 46:goto _dbeeg ;case 92:goto _dbeeg ;case 95:goto _dbeeg ;};switch {case _cgddb [_gcfdb ]< 65:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _dbeeg ;};case _cgddb [_gcfdb ]> 90:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _dbeeg ;
};default:goto _dbeeg ;};goto _ccee ;case 42:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 46:goto _gbed ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _ccee ;case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 58:switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _ccee ;
};case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _gbed ;};default:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _gbed ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;
};default:goto _ccee ;};default:goto _ccee ;};goto _ebebc ;case 43:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 40:goto _bebe ;case 46:goto _dccg ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _cgfcg ;case 125:goto _cgfcg ;};switch {case _cgddb [_gcfdb ]< 58:switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _cgfcg ;
};case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _fgdag ;};default:goto _cgfcg ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _dccg ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;
};default:goto _cgfcg ;};default:goto _cgfcg ;};goto _ebebc ;case 44:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 36:goto _bbafa ;case 40:goto _bebe ;case 46:goto _dccg ;case 58:goto _fagcbe ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _eggd ;
case 125:goto _eggd ;};switch {case _cgddb [_gcfdb ]< 59:switch {case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _fgdag ;};case _cgddb [_gcfdb ]>=34:goto _eggd ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _cebfg ;
};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;};default:goto _eggd ;};default:goto _eggd ;};goto _ebebc ;case 25:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 36:goto _bbafa ;case 40:goto _bebe ;case 46:goto _dccg ;
case 58:goto _fagcbe ;case 65:goto _gbbgf ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _cdgda ;case 125:goto _cdgda ;};switch {case _cgddb [_gcfdb ]< 59:switch {case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _fgdag ;
};case _cgddb [_gcfdb ]>=34:goto _cdgda ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 66<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _cebfg ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;};default:goto _cdgda ;
};default:goto _cdgda ;};goto _ebebc ;case 45:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 36:goto _bbafa ;case 40:goto _bebe ;case 46:goto _dccg ;case 58:goto _fagcbe ;case 76:goto _gcdb ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _ccee ;
case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 59:switch {case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _fgdag ;};case _cgddb [_gcfdb ]>=34:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _cebfg ;
};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;};default:goto _ccee ;};default:goto _ccee ;};goto _ebebc ;case 46:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 36:goto _bbafa ;case 40:goto _bebe ;case 46:goto _dccg ;
case 58:goto _fagcbe ;case 83:goto _aebfe ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _ccee ;case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 59:switch {case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _fgdag ;
};case _cgddb [_gcfdb ]>=34:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _cebfg ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;};default:goto _ccee ;
};default:goto _ccee ;};goto _ebebc ;case 47:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 36:goto _bbafa ;case 40:goto _bebe ;case 46:goto _dccg ;case 58:goto _fagcbe ;case 69:goto _fecg ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _ccee ;
case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 59:switch {case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _fgdag ;};case _cgddb [_gcfdb ]>=34:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _cebfg ;
};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;};default:goto _ccee ;};default:goto _ccee ;};goto _ebebc ;case 26:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 36:goto _bbafa ;case 40:goto _bebe ;case 46:goto _dccg ;
case 58:goto _fagcbe ;case 79:goto _afcd ;case 82:goto _dfac ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _cdgda ;case 125:goto _cdgda ;};switch {case _cgddb [_gcfdb ]< 59:switch {case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _fgdag ;
};case _cgddb [_gcfdb ]>=34:goto _cdgda ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _cebfg ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;};default:goto _cdgda ;
};default:goto _cdgda ;};goto _ebebc ;case 48:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 36:goto _bbafa ;case 40:goto _bebe ;case 46:goto _dccg ;case 58:goto _fagcbe ;case 68:goto _fbdac ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _ccee ;
case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 59:switch {case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _fgdag ;};case _cgddb [_gcfdb ]>=34:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _cebfg ;
};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;};default:goto _ccee ;};default:goto _ccee ;};goto _ebebc ;case 49:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 36:goto _bbafa ;case 40:goto _bebe ;case 46:goto _dccg ;
case 58:goto _fagcbe ;case 79:goto _cgga ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _ccee ;case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 59:switch {case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _fgdag ;
};case _cgddb [_gcfdb ]>=34:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _cebfg ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;};default:goto _ccee ;
};default:goto _ccee ;};goto _ebebc ;case 50:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 36:goto _bbafa ;case 40:goto _bebe ;case 46:goto _dccg ;case 58:goto _fagcbe ;case 85:goto _aebfe ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _ccee ;
case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 59:switch {case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _fgdag ;};case _cgddb [_gcfdb ]>=34:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _cebfg ;
};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;};default:goto _ccee ;};default:goto _ccee ;};goto _ebebc ;case 27:switch _cgddb [_gcfdb ]{case 46:goto _dbeeg ;case 92:goto _dbeeg ;case 95:goto _dbeeg ;};switch {case _cgddb [_gcfdb ]< 65:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _dbeeg ;
};case _cgddb [_gcfdb ]> 90:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _dbeeg ;};default:goto _dbeeg ;};goto _cdgda ;case 28:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 46:goto _gbed ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 120:goto _acdb ;
case 123:goto _cdgda ;case 125:goto _cdgda ;};switch {case _cgddb [_gcfdb ]< 58:switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _cdgda ;};case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _gbed ;
};default:goto _cdgda ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _gbed ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;};default:goto _cdgda ;
};default:goto _cdgda ;};goto _ebebc ;case 51:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 46:goto _gbed ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 108:goto _ggbe ;case 123:goto _ccee ;case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 58:switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _ccee ;
};case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _gbed ;};default:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _gbed ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;
};default:goto _ccee ;};default:goto _ccee ;};goto _ebebc ;case 52:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 46:goto _gbed ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 102:goto _ceeg ;case 110:goto _fecec ;case 123:goto _ccee ;case 125:goto _ccee ;
};switch {case _cgddb [_gcfdb ]< 58:switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _ccee ;};case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _gbed ;};default:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _gbed ;
};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;};default:goto _ccee ;};default:goto _ccee ;};goto _ebebc ;case 53:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 46:goto _gbed ;case 92:goto _dbeeg ;case 95:goto _gbed ;
case 110:goto _cede ;case 123:goto _ccee ;case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 58:switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _ccee ;};case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _gbed ;
};default:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _gbed ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;};default:goto _ccee ;};
default:goto _ccee ;};goto _ebebc ;case 54:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 46:goto _gbgg ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _ccee ;case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 58:switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _ccee ;
};case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _gbed ;};default:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _gbed ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;
};default:goto _ccee ;};default:goto _ccee ;};goto _ebebc ;case 55:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 46:goto _gbed ;case 92:goto _dbeeg ;case 95:goto _aabe ;case 123:goto _ccee ;case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 58:switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _ccee ;
};case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _gbed ;};default:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _aabe ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;
};default:goto _ccee ;};default:goto _ccee ;};goto _ebebc ;case 56:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 40:goto _aedbdg ;case 46:goto _aabe ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _ccee ;case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 58:switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _ccee ;
};case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _aabe ;};default:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _aabe ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;
};default:goto _ccee ;};default:goto _ccee ;};goto _ebebc ;case 57:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 46:goto _gbed ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 109:goto _ccbba ;case 123:goto _ccee ;case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 58:switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _ccee ;
};case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _gbed ;};default:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _gbed ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;
};default:goto _ccee ;};default:goto _ccee ;};goto _ebebc ;case 58:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 46:goto _fbcff ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _ccee ;case 125:goto _ccee ;};switch {case _cgddb [_gcfdb ]< 58:switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _ccee ;
};case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _gbed ;};default:goto _ccee ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _gbed ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;
};default:goto _ccee ;};default:goto _ccee ;};goto _ebebc ;case 59:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 46:goto _gbed ;case 92:goto _dbeeg ;case 95:goto _dcdfa ;case 123:goto _eggd ;case 125:goto _eggd ;};switch {case _cgddb [_gcfdb ]< 58:switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _eggd ;
};case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _gbed ;};default:goto _eggd ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _dcdfa ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;
};default:goto _eggd ;};default:goto _eggd ;};goto _ebebc ;case 29:switch _cgddb [_gcfdb ]{case 33:goto _fddd ;case 46:goto _gbed ;case 92:goto _dbeeg ;case 95:goto _gbed ;case 123:goto _cdgda ;case 125:goto _cdgda ;};switch {case _cgddb [_gcfdb ]< 58:switch {case _cgddb [_gcfdb ]< 37:if 34<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=35{goto _cdgda ;
};case _cgddb [_gcfdb ]> 47:if 48<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=57{goto _gbed ;};default:goto _cdgda ;};case _cgddb [_gcfdb ]> 63:switch {case _cgddb [_gcfdb ]< 91:if 65<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=90{goto _gbed ;};case _cgddb [_gcfdb ]> 94:if 97<=_cgddb [_gcfdb ]&&_cgddb [_gcfdb ]<=122{goto _gbed ;
};default:goto _cdgda ;};default:goto _cdgda ;};goto _ebebc ;};_cdgda :_fcgb =0;goto _cagc ;_ebebc :_fcgb =1;goto _cagc ;_abafb :_fcgb =2;goto _cagc ;_baae :_fcgb =3;goto _cagc ;_fgggc :_fcgb =4;goto _cagc ;_fabbb :_fcgb =5;goto _cagc ;_agff :_fcgb =6;
goto _cagc ;_dfdd :_fcgb =7;goto _cagc ;_afef :_fcgb =8;goto _cagc ;_ebfcd :_fcgb =9;goto _cagc ;_efce :_fcgb =10;goto _cagc ;_cceac :_fcgb =11;goto _cagc ;_fefc :_fcgb =12;goto _cagc ;_cdefb :_fcgb =13;goto _cagc ;_febe :_fcgb =14;goto _cagc ;_adagc :_fcgb =15;
goto _cagc ;_ffcc :_fcgb =16;goto _cagc ;_bbafa :_fcgb =17;goto _cagc ;_fagcbe :_fcgb =18;goto _cagc ;_gegb :_fcgb =19;goto _cagc ;_fceca :_fcgb =20;goto _cagc ;_bgage :_fcgb =21;goto _cagc ;_gdcf :_fcgb =22;goto _cagc ;_cegc :_fcgb =23;goto _cagc ;_cefad :_fcgb =24;
goto _cagc ;_gefgf :_fcgb =25;goto _cagc ;_bfbaa :_fcgb =26;goto _cagc ;_agfff :_fcgb =27;goto _cagc ;_fggc :_fcgb =28;goto _cagc ;_dagea :_fcgb =29;goto _cagc ;_eggd :_fcgb =30;goto _gbaag ;_fddd :_fcgb =30;goto _fadf ;_gcgaeb :_fcgb =30;goto _ebebf ;
_gbbg :_fcgb =30;goto _bdbcd ;_eddge :_fcgb =30;goto _ffdfd ;_fcfbd :_fcgb =30;goto _dcde ;_bebe :_fcgb =30;goto _gfeed ;_ddcee :_fcgb =30;goto _efee ;_efcce :_fcgb =30;goto _facab ;_bbacf :_fcgb =30;goto _cfbf ;_bdaa :_fcgb =30;goto _cdedg ;_gddac :_fcgb =30;
goto _cabb ;_ccaab :_fcgb =30;goto _gbbcb ;_geffd :_fcgb =30;goto _gccce ;_cgdeb :_fcgb =30;goto _dece ;_dcdcf :_fcgb =30;goto _fggfg ;_bbdb :_fcgb =30;goto _dgbge ;_dfdc :_fcgb =30;goto _bfbbe ;_ceffc :_fcgb =30;goto _fbcga ;_dcdfb :_fcgb =30;goto _ebaca ;
_bfbfa :_fcgb =30;goto _debc ;_dacg :_fcgb =30;goto _gecf ;_aafce :_fcgb =30;goto _dgcfe ;_cgfcg :_fcgb =30;goto _dffea ;_ccgdf :_fcgb =30;goto _adcc ;_dfaafa :_fcgb =30;goto _gdec ;_cabg :_fcgb =30;goto _gfcaf ;_ababb :_fcgb =30;goto _edfcg ;_bdcc :_fcgb =30;
goto _acgc ;_gebg :_fcgb =30;goto _gdbb ;_gcge :_fcgb =30;goto _gcag ;_ccee :_fcgb =30;goto _cddcf ;_aedbdg :_fcgb =30;goto _gbbgc ;_ceecc :_fcgb =31;goto _ebacac ;_dedec :_fcgb =32;goto _cagc ;_afceg :_fcgb =33;goto _bffg ;_aacef :_fcgb =34;goto _cagc ;
_bcdege :_fcgb =35;goto _bdfgd ;_dgabfa :_fcgb =36;goto _bdfgd ;_dgcbe :_fcgb =37;goto _bdfgd ;_deace :_fcgb =38;goto _cagc ;_geceg :_fcgb =39;goto _cagc ;_dccg :_fcgb =40;goto _feac ;_dbeeg :_fcgb =41;goto _cagc ;_gbed :_fcgb =42;goto _feac ;_fgdag :_fcgb =43;
goto _bffg ;_cebfg :_fcgb =44;goto _feac ;_fecg :_fcgb =44;goto _gdgeb ;_cgga :_fcgb =44;goto _dada ;_gbbgf :_fcgb =45;goto _feac ;_gcdb :_fcgb =46;goto _feac ;_aebfe :_fcgb =47;goto _feac ;_afcd :_fcgb =48;goto _feac ;_fbdac :_fcgb =49;goto _feac ;_dfac :_fcgb =50;
goto _feac ;_acdb :_fcgb =51;goto _feac ;_ggbe :_fcgb =52;goto _feac ;_ceeg :_fcgb =53;goto _feac ;_cede :_fcgb =54;goto _feac ;_gbgg :_fcgb =55;goto _feac ;_aabe :_fcgb =56;goto _feac ;_fecec :_fcgb =57;goto _feac ;_ccbba :_fcgb =58;goto _feac ;_fbcff :_fcgb =59;
goto _feac ;_dcdfa :_fcgb =59;goto _fgce ;_ebebf :_gcgcd =3;goto _decc ;_bdbcd :_gcgcd =5;goto _decc ;_fadf :_gcgcd =7;goto _decc ;_ffdfd :_gcgcd =9;goto _decc ;_gfeed :_gcgcd =11;goto _decc ;_gbbgc :_gcgcd =13;goto _decc ;_efee :_gcgcd =15;goto _decc ;
_ebaca :_gcgcd =17;goto _decc ;_debc :_gcgcd =19;goto _decc ;_facab :_gcgcd =21;goto _decc ;_cfbf :_gcgcd =23;goto _decc ;_cabb :_gcgcd =25;goto _decc ;_gccce :_gcgcd =27;goto _decc ;_cdedg :_gcgcd =29;goto _decc ;_dece :_gcgcd =31;goto _decc ;_fbcga :_gcgcd =33;
goto _decc ;_bfbbe :_gcgcd =35;goto _decc ;_edfcg :_gcgcd =37;goto _decc ;_gcag :_gcgcd =39;goto _decc ;_acgc :_gcgcd =41;goto _decc ;_fggfg :_gcgcd =43;goto _decc ;_dgbge :_gcgcd =45;goto _decc ;_gbbcb :_gcgcd =47;goto _decc ;_gdec :_gcgcd =49;goto _decc ;
_dffea :_gcgcd =51;goto _decc ;_dgcfe :_gcgcd =53;goto _decc ;_adcc :_gcgcd =55;goto _decc ;_cddcf :_gcgcd =57;goto _decc ;_gecf :_gcgcd =59;goto _decc ;_gfcaf :_gcgcd =61;goto _decc ;_gdbb :_gcgcd =63;goto _decc ;_dcde :_gcgcd =65;goto _decc ;_gbaag :_gcgcd =67;
goto _decc ;_gdgeb :_gcgcd =72;goto _decc ;_bdfgd :_gcgcd =75;goto _decc ;_bffg :_gcgcd =78;goto _decc ;_dada :_gcgcd =81;goto _decc ;_fgce :_gcgcd =84;goto _decc ;_feac :_gcgcd =87;goto _decc ;_ebacac :_gcgcd =90;goto _decc ;_decc :_gfeb =uint (_gcfeb [_gcgcd ]);
_gcgcd ++;for ;_gfeb > 0;_gfeb --{_gcgcd ++;switch _gcfeb [_gcgcd -1]{case 3:_eabed =_gcfdb +1;case 4:_bgebg =1;case 5:_bgebg =2;case 6:_bgebg =3;case 7:_bgebg =4;case 8:_bgebg =11;case 9:_bgebg =14;case 10:_bgebg =15;case 11:_eabed =_gcfdb +1;{_gbffd .emit (_gebb ,_cgddb [_gdade :_eabed ]);
};case 12:_eabed =_gcfdb +1;{_gbffd .emit (_dadgg ,_cgddb [_gdade :_eabed ]);};case 13:_eabed =_gcfdb +1;{_gbffd .emit (_aecfg ,_cgddb [_gdade :_eabed -1]);};case 14:_eabed =_gcfdb +1;{_gbffd .emit (_aecfg ,_cgddb [_gdade +1:_eabed -2]);};case 15:_eabed =_gcfdb +1;
{_gbffd .emit (_ecae ,_cgddb [_gdade :_eabed -1]);};case 16:_eabed =_gcfdb +1;{_gbffd .emit (_ecae ,_cgddb [_gdade :_eabed -1]);};case 17:_eabed =_gcfdb +1;{_gbffd .emit (_ebcea ,_cgddb [_gdade :_eabed ]);};case 18:_eabed =_gcfdb +1;{_gbffd .emit (_ffadd ,_cgddb [_gdade :_eabed ]);
};case 19:_eabed =_gcfdb +1;{_gbffd .emit (_dcac ,_cgddb [_gdade :_eabed ]);};case 20:_eabed =_gcfdb +1;{_gbffd .emit (_gabcf ,_cgddb [_gdade :_eabed ]);};case 21:_eabed =_gcfdb +1;{_gbffd .emit (_dbdec ,_cgddb [_gdade :_eabed ]);};case 22:_eabed =_gcfdb +1;
{_gbffd .emit (_gbdfa ,_cgddb [_gdade :_eabed ]);};case 23:_eabed =_gcfdb +1;{_gbffd .emit (_egcaf ,_cgddb [_gdade :_eabed ]);};case 24:_eabed =_gcfdb +1;{_gbffd .emit (_ggbdc ,_cgddb [_gdade :_eabed ]);};case 25:_eabed =_gcfdb +1;{_gbffd .emit (_cefb ,_cgddb [_gdade :_eabed ]);
};case 26:_eabed =_gcfdb +1;{_gbffd .emit (_bggg ,_cgddb [_gdade :_eabed ]);};case 27:_eabed =_gcfdb +1;{_gbffd .emit (_dcda ,_cgddb [_gdade :_eabed ]);};case 28:_eabed =_gcfdb +1;{_gbffd .emit (_cacc ,_cgddb [_gdade :_eabed ]);};case 29:_eabed =_gcfdb +1;
{_gbffd .emit (_cefaf ,_cgddb [_gdade :_eabed ]);};case 30:_eabed =_gcfdb +1;{_gbffd .emit (_agaba ,_cgddb [_gdade :_eabed ]);};case 31:_eabed =_gcfdb +1;{_gbffd .emit (_cgag ,_cgddb [_gdade :_eabed ]);};case 32:_eabed =_gcfdb +1;{_gbffd .emit (_bgbd ,_cgddb [_gdade :_eabed ]);
};case 33:_eabed =_gcfdb +1;{_gbffd .emit (_agfg ,_cgddb [_gdade :_eabed ]);};case 34:_eabed =_gcfdb ;_gcfdb --;{_gbffd .emit (_dbeg ,_cgddb [_gdade :_eabed ]);};case 35:_eabed =_gcfdb ;_gcfdb --;{_gbffd .emit (_baad ,_cgddb [_gdade :_eabed ]);};case 36:_eabed =_gcfdb ;
_gcfdb --;{_gbffd .emit (_cedd ,_cgddb [_gdade :_eabed ]);};case 37:_eabed =_gcfdb ;_gcfdb --;{_gbffd .emit (_fbbgf ,_cgddb [_gdade :_eabed ]);};case 38:_eabed =_gcfdb ;_gcfdb --;{_gbffd .emit (_bgafa ,_cgddb [_gdade :_eabed ]);};case 39:_eabed =_gcfdb ;
_gcfdb --;{_gbffd .emit (_fffa ,_cgddb [_gdade +1:_eabed -1]);};case 40:_eabed =_gcfdb ;_gcfdb --;{_gbffd .emit (_baedf ,_cgddb [_gdade :_eabed ]);};case 41:_eabed =_gcfdb ;_gcfdb --;{_gbffd .emit (_fagcg ,_cgddb [_gdade :_eabed ]);};case 42:_gcfdb =(_eabed )-1;
{_gbffd .emit (_dbeg ,_cgddb [_gdade :_eabed ]);};case 43:switch _bgebg {case 0:{_fcgb =0;goto _cagc ;};case 1:{_gcfdb =(_eabed )-1;_gbffd .emit (_adeda ,_cgddb [_gdade :_eabed ]);};case 2:{_gcfdb =(_eabed )-1;_gbffd .emit (_dbeg ,_cgddb [_gdade :_eabed ]);
};case 3:{_gcfdb =(_eabed )-1;_gbffd .emit (_baad ,_cgddb [_gdade :_eabed ]);};case 4:{_gcfdb =(_eabed )-1;_gbffd .emit (_eedf ,_cgddb [_gdade :_eabed ]);};case 11:{_gcfdb =(_eabed )-1;_gbffd .emit (_gfed ,_cgddb [_gdade :_eabed ]);};case 14:{_gcfdb =(_eabed )-1;
_gbffd .emit (_bgafa ,_cgddb [_gdade :_eabed ]);};case 15:{_gcfdb =(_eabed )-1;_gbffd .emit (_fffa ,_cgddb [_gdade +1:_eabed -1]);};};};};goto _cagc ;_cagc :_gcgcd =int (_cagf [_fcgb ]);_gfeb =uint (_gcfeb [_gcgcd ]);_gcgcd ++;for ;_gfeb > 0;_gfeb --{_gcgcd ++;
switch _gcfeb [_gcgcd -1]{case 0:_gdade =0;case 1:_bgebg =0;};};if _fcgb ==0{goto _abbad ;};if _gcfdb ++;_gcfdb !=_gegg {goto _edbea ;};_eecc :{};if _gcfdb ==_bggd {switch _fcgb {case 1:goto _eggd ;case 2:goto _eggd ;case 31:goto _dacg ;case 14:goto _eggd ;
case 15:goto _eggd ;case 32:goto _aafce ;case 17:goto _eggd ;case 33:goto _cgfcg ;case 18:goto _eggd ;case 19:goto _eggd ;case 34:goto _ccgdf ;case 35:goto _dfaafa ;case 36:goto _dfaafa ;case 23:goto _fcfbd ;case 37:goto _dfaafa ;case 38:goto _cabg ;case 39:goto _gebg ;
case 40:goto _ccee ;case 41:goto _ccee ;case 42:goto _ccee ;case 43:goto _cgfcg ;case 44:goto _eggd ;case 45:goto _ccee ;case 46:goto _ccee ;case 47:goto _ccee ;case 48:goto _ccee ;case 49:goto _ccee ;case 50:goto _ccee ;case 51:goto _ccee ;case 52:goto _ccee ;
case 53:goto _ccee ;case 54:goto _ccee ;case 55:goto _ccee ;case 56:goto _ccee ;case 57:goto _ccee ;case 58:goto _ccee ;case 59:goto _eggd ;};};_abbad :{};};if _gdade > 0{copy (_cgddb [0:],_cgddb [_gdade :]);};};_ =_bggd ;if _fcgb ==_dbbb {_gbffd .emit (_dbcgb ,nil );
};close (_gbffd ._bcfgf );};func (_cfdf VerticalRange )verticalRangeReference ()string {return _c .Sprintf ("\u0025\u0073\u003a%\u0073",_cfdf ._bcgec ,_cfdf ._febed );};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_egca ,_geac :=_cdfd (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _geac .Type ==ResultTypeError {return _geac ;};_bbgc :=_egca ._cbee ;_fbdc :=_egca ._cagb ;_fgaa :=_egca ._dgbf ;_ccda :=_egca ._adced ;
_ddee :=_egca ._gcef ;_ddbf :=_egca ._ffec ;_eda :=_egca ._feag ;_eadc ,_eeg :=_efec (_fbdc ,_fgaa ,_eda );if _eeg .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");
};_ccec :=_eadc *_ddbf *_bbgc ;if _ddee ==0{return MakeNumberResult (_ccec );};_gaca :=_bbgc *_ddbf ;_fdef :=_bbgc -_ccda ;_ecbdg :=int ((_fdef -_ccec )/_gaca );if _ddee <=_ecbdg {return MakeNumberResult (_gaca );}else if _ddee ==_ecbdg +1{return MakeNumberResult (_fdef -_gaca *float64 (_ecbdg )-_ccec );
}else {return MakeNumberResult (0);};};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_ffbe PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_ggcc :=_ffbe ._gegda .Reference (ctx ,ev );_aadfd :=_ffbe ._eada .Reference (ctx ,ev );_cced :=_ffbe ._cece .Reference (ctx ,ev );switch _ggcc .Type {case ReferenceTypeSheet :if _aacag (_ggcc ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ggcc .Value ));
};_bcega :=_bbfbg (_ggcc ,_aadfd ,_cced );if _aadfd .Type ==ReferenceTypeCell &&_cced .Type ==ReferenceTypeCell {if _eccdf ,_ggfb :=ev .GetFromCache (_bcega );_ggfb {return _eccdf ;}else {_bagbg :=_ecdg (ctx .Sheet (_ggcc .Value ),ev ,_aadfd .Value ,_cced .Value );
ev .SetCache (_bcega ,_bagbg );return _bagbg ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_bcega );default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ggcc .Type ));
};};type yyLexer interface{Lex (_egdg *yySymType )int ;Error (_aebfc string );};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_faa :=&defEval {};_faa .evCache =_gfgb ();return _faa };func _dcdb (_ccc ,_gdcc ,_cgdef float64 )float64 {return (_ccc *3600+_gdcc *60+_cgdef )/86400};type node struct{_acbfe tokenType ;_ebege string ;};func _bcegg (_aeddd Context ,_gbcgb ,_gbbaa string )(string ,string ){_ccce :=_gbcgb +"\u0031";
_acdef :=_aeddd .LastRow (_gbcgb );_cagcc :=_gbbaa +_fb .Itoa (_acdef );return _ccce ,_cagcc ;};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};
func _dbab (_cee float64 )_e .Time {_egfg :=int64 ((_cee -_bgce )*_dbee );return _e .Unix (0,_egfg ).UTC ();};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_ecf :=int (args [0].ValueNumber );if _ecf < 0||_ecf >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _ecf <=1899{_ecf +=1900;};_df :=_e .Month (args [1].ValueNumber );
_cge :=int (args [2].ValueNumber );_ffbc :=_bcd (_ecf ,_df ,_cge );_edg :=_egd (_fef ,_ffbc )+1;if _edg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_edg );
};func _aegbd (_ggae yyLexer )int {return _adgafg ().Parse (_ggae )};func _gbab (_gbga []Result )[]rangeIndex {_abddd :=[]rangeIndex {};_cgfg :=len (_gbga );for _efabb :=0;_efabb < _cgfg -1;_efabb +=2{_ggcg :=[]rangeIndex {};_ggdfb :=_acddd (_gbga [_efabb ]);
_dbgb :=_dgcc (_gbga [_efabb +1]);if _efabb ==0{for _ffggb ,_cfege :=range _ggdfb {for _dbcgc ,_eege :=range _cfege {if _ceeb (_eege ,_dbgb ){_ggcg =append (_ggcg ,rangeIndex {_ffggb ,_dbcgc });};};};}else {for _ ,_bagca :=range _abddd {_dedea :=_ggdfb [_bagca ._abdb ][_bagca ._eefb ];
if _ceeb (_dedea ,_dbgb ){_ggcg =append (_ggcg ,_bagca );};};};if len (_ggcg )==0{return []rangeIndex {};};_abddd =_ggcg [:];};return _abddd ;};func _affe (_fagcd _e .Time )bool {return _e .Now ().Sub (_fagcd )>=_agba };func _ebegb (_fcfg string ,_bdcb _e .Time )(_e .Time ,error ){_ggaae ,_ ,_ecda :=_gf .ParseFloat (_fcfg ,10,128,_gf .ToNearestEven );
if _ecda !=nil {return _e .Time {},_ecda ;};_eceab :=new (_gf .Float );_eceab .SetUint64 (uint64 (24*_e .Hour ));_ggaae .Mul (_ggaae ,_eceab );_gacd ,_ :=_ggaae .Uint64 ();_fffbd :=_bdcb .Add (_e .Duration (_gacd ));return _ggdg (_fffbd ),nil ;};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_eaa :=args [1].ValueNumber ;
_ggca :=args [0];var _gfc float64 ;switch _ggca .Type {case ResultTypeEmpty :_gfc =0;case ResultTypeNumber :_gfc =_ggca .ValueNumber ;case ResultTypeString :_dde :=DateValue ([]Result {args [0]});if _dde .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};_gfc =_dde .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_dged :=_dbab (_gfc );
_gfa :=_dged .AddDate (0,int (_eaa +1),0);_cbfg ,_ebcd ,_ :=_gfa .Date ();_gcfb :=_dcg (_cbfg ,int (_ebcd ),0);if _gcfb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};if _cbfg ==1900&&_ebcd ==3{_gcfb --;};return MakeNumberResult (_gcfb );};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ddca :=_gcbbb (args );_fc .Float64s (_ddca );var _ggeag float64 ;if len (_ddca )%2==0{_ggeag =(_ddca [len (_ddca )/2-1]+_ddca [len (_ddca )/2])/2;}else {_ggeag =_ddca [len (_ddca )/2];};return MakeNumberResult (_ggeag );};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_fbeda Expression ;_bfff Expression ;};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _gfdc (args ,true )};var _gbebg []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// String returns a string representation of a vertical range with prefix.
func (_fcbgb PrefixVerticalRange )String ()string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_fcbgb ._bgcg .String (),_fcbgb ._cgbfd ,_fcbgb ._gadf );};func _daec (_afaa ,_cdgf ,_bdfg ,_bged ,_acgd ,_dddf float64 )float64 {var _bbbc ,_egffc float64 ;
_bbfb :=0.0;_aecf :=_ga .Ceil (_acgd );_ebag :=_afaa -_cdgf ;_abaf :=false ;_eef :=0.0;for _gefc :=1.0;_gefc <=_aecf ;_gefc ++{if !_abaf {_bbbc =_deaf (_afaa ,_cdgf ,_bdfg ,_gefc ,_dddf );_eef =_ebag /(_bdfg -_gefc +1);if _eef > _bbbc {_egffc =_eef ;_abaf =true ;
}else {_egffc =_bbbc ;_ebag -=_bbbc ;};}else {_egffc =_eef ;};if _gefc ==_aecf {_egffc *=_acgd +1-_aecf ;};_bbfb +=_egffc ;};return _bbfb ;};

// String returns a string representation of ConstArrayExpr.
func (_ad ConstArrayExpr )String ()string {return ""};func _cgdea (_fgcd string )bool {for _ ,_dfd :=range _ecb {_bbgg :=_dfd .FindStringSubmatch (_fgcd );if len (_bbgg )> 1{return true ;};};return false ;};var _abcaa =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func (_fgde *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };func (_cbde *yyParserImpl )Parse (yylex yyLexer )int {_gaefg :=_e .Now ();var _fedce int ;var _deafc yySymType ;var _fgbe []yySymType ;_ =_fgbe ;_aced :=_cbde ._geacg [:];Nerrs :=0;
Errflag :=0;_faeb :=0;_cbde ._deac =-1;_eagcb :=-1;defer func (){_faeb =-1;_cbde ._deac =-1;_eagcb =-1}();_bacf :=-1;goto _gdfe ;_bbgaa :return 0;_ffab :return 1;_gdfe :if _affe (_gaefg ){_ca .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");
goto _ffab ;};if _fafbg >=4{_c .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_efebc (_eagcb ),_gacc (_faeb ));};_bacf ++;if _bacf >=len (_aced ){_deece :=make ([]yySymType ,len (_aced )*2);copy (_deece ,_aced );
_aced =_deece ;};_aced [_bacf ]=_deafc ;_aced [_bacf ]._ceea =_faeb ;_bbbdf :if _affe (_gaefg ){_ca .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _ffab ;};_fedce =_aeefd [_faeb ];if _fedce <=_degea {goto _cdec ;
};if _cbde ._deac < 0{_cbde ._deac ,_eagcb =_baea (yylex ,&_cbde ._dfefe );};_fedce +=_eagcb ;if _fedce < 0||_fedce >=_cbbb {goto _cdec ;};_fedce =_ecdb [_fedce ];if _egda [_fedce ]==_eagcb {_cbde ._deac =-1;_eagcb =-1;_deafc =_cbde ._dfefe ;_faeb =_fedce ;
if Errflag > 0{Errflag --;};goto _gdfe ;};_cdec :if _affe (_gaefg ){_ca .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _ffab ;};_fedce =_cdfe [_faeb ];if _fedce ==-2{if _cbde ._deac < 0{_cbde ._deac ,_eagcb =_baea (yylex ,&_cbde ._dfefe );
};_debeg :=0;for {if _ecbg [_debeg +0]==-1&&_ecbg [_debeg +1]==_faeb {break ;};_debeg +=2;};for _debeg +=2;;_debeg +=2{_fedce =_ecbg [_debeg +0];if _fedce < 0||_fedce ==_eagcb {break ;};};_fedce =_ecbg [_debeg +1];if _fedce < 0{goto _bbgaa ;};};if _fedce ==0{switch Errflag {case 0:yylex .Error (_cbagb (_faeb ,_eagcb ));
Nerrs ++;if _fafbg >=1{_c .Printf ("\u0025\u0073",_gacc (_faeb ));_c .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_efebc (_eagcb ));};fallthrough;case 1,2:Errflag =3;for _bacf >=0{_fedce =_aeefd [_aced [_bacf ]._ceea ]+_faga ;if _fedce >=0&&_fedce < _cbbb {_faeb =_ecdb [_fedce ];
if _egda [_faeb ]==_faga {goto _gdfe ;};};if _fafbg >=2{_c .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_aced [_bacf ]._ceea );
};_bacf --;};goto _ffab ;case 3:if _fafbg >=2{_c .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_efebc (_eagcb ));};if _eagcb ==_cfec {goto _ffab ;};_cbde ._deac =-1;
_eagcb =-1;goto _bbbdf ;};};if _fafbg >=2{_c .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_fedce ,_gacc (_faeb ));};_baeba :=_fedce ;_adfg :=_bacf ;_ =_adfg ;_bacf -=_ccac [_fedce ];if _bacf +1>=len (_aced ){_fcce :=make ([]yySymType ,len (_aced )*2);
copy (_fcce ,_aced );_aced =_fcce ;};_deafc =_aced [_bacf +1];_fedce =_afbafc [_fedce ];_beecc :=_fcedg [_fedce ];_edbcg :=_beecc +_aced [_bacf ]._ceea +1;if _edbcg >=_cbbb {_faeb =_ecdb [_beecc ];}else {_faeb =_ecdb [_edbcg ];if _egda [_faeb ]!=-_fedce {_faeb =_ecdb [_beecc ];
};};switch _baeba {case 1:_fgbe =_aced [_adfg -1:_adfg +1];{yylex .(*plex )._bgaff =_deafc ._fdce ;};case 3:_fgbe =_aced [_adfg -2:_adfg +1];{_deafc ._fdce =_fgbe [2]._fdce ;};case 4:_fgbe =_aced [_adfg -4:_adfg +1];{};case 5:_fgbe =_aced [_adfg -1:_adfg +1];
{_deafc ._fdce =NewBool (_fgbe [1]._gbda ._ebege );};case 6:_fgbe =_aced [_adfg -1:_adfg +1];{_deafc ._fdce =NewNumber (_fgbe [1]._gbda ._ebege );};case 7:_fgbe =_aced [_adfg -1:_adfg +1];{_deafc ._fdce =NewString (_fgbe [1]._gbda ._ebege );};case 8:_fgbe =_aced [_adfg -1:_adfg +1];
{_deafc ._fdce =NewError (_fgbe [1]._gbda ._ebege );};case 9:_fgbe =_aced [_adfg -2:_adfg +1];{_deafc ._fdce =_fgbe [2]._fdce ;};case 10:_fgbe =_aced [_adfg -2:_adfg +1];{_deafc ._fdce =NewNegate (_fgbe [2]._fdce );};case 15:_fgbe =_aced [_adfg -3:_adfg +1];
{_deafc ._fdce =_fgbe [2]._fdce ;};case 17:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._fdce =NewConstArrayExpr (_fgbe [2]._bdgff );};case 18:_fgbe =_aced [_adfg -1:_adfg +1];{_deafc ._bdgff =append (_deafc ._bdgff ,_fgbe [1]._bdee );};case 19:_fgbe =_aced [_adfg -3:_adfg +1];
{_deafc ._bdgff =append (_fgbe [1]._bdgff ,_fgbe [3]._bdee );};case 20:_fgbe =_aced [_adfg -1:_adfg +1];{_deafc ._bdee =append (_deafc ._bdee ,_fgbe [1]._fdce );};case 21:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._bdee =append (_fgbe [1]._bdee ,_fgbe [3]._fdce );
};case 23:_fgbe =_aced [_adfg -2:_adfg +1];{_deafc ._fdce =NewPrefixExpr (_fgbe [1]._fdce ,_fgbe [2]._fdce );};case 25:_fgbe =_aced [_adfg -1:_adfg +1];{_deafc ._fdce =NewSheetPrefixExpr (_fgbe [1]._gbda ._ebege );};case 26:_fgbe =_aced [_adfg -1:_adfg +1];
{_deafc ._fdce =NewCellRef (_fgbe [1]._gbda ._ebege );};case 27:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._fdce =NewRange (_fgbe [1]._fdce ,_fgbe [3]._fdce );};case 28:_fgbe =_aced [_adfg -4:_adfg +1];{_deafc ._fdce =NewPrefixRangeExpr (_fgbe [1]._fdce ,_fgbe [2]._fdce ,_fgbe [4]._fdce );
};case 29:_fgbe =_aced [_adfg -1:_adfg +1];{_deafc ._fdce =NewNamedRangeRef (_fgbe [1]._gbda ._ebege );};case 30:_fgbe =_aced [_adfg -1:_adfg +1];{_deafc ._fdce =NewHorizontalRange (_fgbe [1]._gbda ._ebege );};case 31:_fgbe =_aced [_adfg -1:_adfg +1];{_deafc ._fdce =NewVerticalRange (_fgbe [1]._gbda ._ebege );
};case 32:_fgbe =_aced [_adfg -2:_adfg +1];{_deafc ._fdce =NewPrefixHorizontalRange (_fgbe [1]._fdce ,_fgbe [2]._gbda ._ebege );};case 33:_fgbe =_aced [_adfg -2:_adfg +1];{_deafc ._fdce =NewPrefixVerticalRange (_fgbe [1]._fdce ,_fgbe [2]._gbda ._ebege );
};case 34:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._fdce =NewBinaryExpr (_fgbe [1]._fdce ,BinOpTypePlus ,_fgbe [3]._fdce );};case 35:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._fdce =NewBinaryExpr (_fgbe [1]._fdce ,BinOpTypeMinus ,_fgbe [3]._fdce );};case 36:_fgbe =_aced [_adfg -3:_adfg +1];
{_deafc ._fdce =NewBinaryExpr (_fgbe [1]._fdce ,BinOpTypeMult ,_fgbe [3]._fdce );};case 37:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._fdce =NewBinaryExpr (_fgbe [1]._fdce ,BinOpTypeDiv ,_fgbe [3]._fdce );};case 38:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._fdce =NewBinaryExpr (_fgbe [1]._fdce ,BinOpTypeExp ,_fgbe [3]._fdce );
};case 39:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._fdce =NewBinaryExpr (_fgbe [1]._fdce ,BinOpTypeLT ,_fgbe [3]._fdce );};case 40:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._fdce =NewBinaryExpr (_fgbe [1]._fdce ,BinOpTypeGT ,_fgbe [3]._fdce );};case 41:_fgbe =_aced [_adfg -3:_adfg +1];
{_deafc ._fdce =NewBinaryExpr (_fgbe [1]._fdce ,BinOpTypeLEQ ,_fgbe [3]._fdce );};case 42:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._fdce =NewBinaryExpr (_fgbe [1]._fdce ,BinOpTypeGEQ ,_fgbe [3]._fdce );};case 43:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._fdce =NewBinaryExpr (_fgbe [1]._fdce ,BinOpTypeEQ ,_fgbe [3]._fdce );
};case 44:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._fdce =NewBinaryExpr (_fgbe [1]._fdce ,BinOpTypeNE ,_fgbe [3]._fdce );};case 45:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._fdce =NewBinaryExpr (_fgbe [1]._fdce ,BinOpTypeConcat ,_fgbe [3]._fdce );};case 47:_fgbe =_aced [_adfg -2:_adfg +1];
{_deafc ._fdce =NewFunction (_fgbe [1]._gbda ._ebege ,nil );};case 48:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._fdce =NewFunction (_fgbe [1]._gbda ._ebege ,_fgbe [2]._bdee );};case 49:_fgbe =_aced [_adfg -1:_adfg +1];{_deafc ._bdee =append (_deafc ._bdee ,_fgbe [1]._fdce );
};case 50:_fgbe =_aced [_adfg -3:_adfg +1];{_deafc ._bdee =append (_fgbe [1]._bdee ,_fgbe [3]._fdce );};case 53:_fgbe =_aced [_adfg -0:_adfg +1];{_deafc ._fdce =NewEmptyExpr ();};};goto _gdfe ;};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// Db implements the Excel DB function.
func Db (args []Result )Result {_dega :=len (args );if _dega !=4&&_dega !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gedb :=args [0].ValueNumber ;if _gedb < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccb :=args [1].ValueNumber ;if _ccb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ecbe :=args [2].ValueNumber ;if _ecbe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dfde :=args [3].ValueNumber ;if _dfde <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};if _dfde -_ecbe > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_beff :=12.0;if _dega ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_beff =args [4].ValueNumber ;if _beff < 1||_beff > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");
};};if _beff ==12&&_dfde > _ecbe {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _ccb >=_gedb {return MakeNumberResult (0);
};_fbbd :=1-_ga .Pow (_ccb /_gedb ,1/_ecbe );_fbbd =float64 (int (_fbbd *1000+0.5))/1000;_cgfa :=_gedb *_fbbd *_beff /12;if _dfde ==1{return MakeNumberResult (_cgfa );};_cagba :=_cgfa ;_bfdc :=0.0;_adec :=_ecbe ;if _adec > _dfde {_adec =_dfde ;};for _cfcc :=2.0;
_cfcc <=_adec ;_cfcc ++{_bfdc =(_gedb -_cagba )*_fbbd ;_cagba +=_bfdc ;};if _dfde > _ecbe {return MakeNumberResult ((_gedb -_cagba )*_fbbd *(12-_beff )/12);};return MakeNumberResult (_bfdc );};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bced :=args [0].AsNumber ();if _bced .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gcee :=int (_bced .ValueNumber );if _gcee < 0||_gcee > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");
};return MakeStringResult (_c .Sprintf ("\u0025\u0063",_gcee ));};func _fggdb (_dafe Result ,_fedg ,_dfcb string )(float64 ,Result ){switch _dafe .Type {case ResultTypeEmpty :return 0,_eed ;case ResultTypeNumber :return _dafe .ValueNumber ,_eed ;case ResultTypeString :_babcf ,_aceeb :=_fb .ParseFloat (_dafe .ValueString ,64);
if _aceeb !=nil {return 0,MakeErrorResult (_dfcb +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_fedg );};return _babcf ,_eed ;default:return 0,MakeErrorResult (_fedg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_dfcb +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");
};};func _aac (_addg string )(int ,int ,int ,bool ,Result ){_fcdc :="";_ddg :=[]string {};for _ged ,_gggg :=range _efcd {_ddg =_gggg .FindStringSubmatch (_addg );if len (_ddg )> 1{_fcdc =_ged ;break ;};};if _fcdc ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );
};_aaca :=false ;var _cba ,_bgae ,_dec int ;var _agg error ;switch _fcdc {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_bgae ,_agg =_fb .Atoi (_ddg [1]);if _agg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );};_dec ,_agg =_fb .Atoi (_ddg [3]);
if _agg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );};_cba ,_agg =_fb .Atoi (_ddg [5]);if _agg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );};if _cba < 0||_cba > 9999||(_cba > 99&&_cba < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );
};_cba =_ebac (_cba );_aaca =_ddg [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_bgae =_gcab [_ddg [1]];_dec ,_agg =_fb .Atoi (_ddg [14]);if _agg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );};_cba ,_agg =_fb .Atoi (_ddg [16]);
if _agg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );};if _cba < 0||_cba > 9999||(_cba > 99&&_cba < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );};_cba =_ebac (_cba );_aaca =_ddg [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_fdb ,_fgdd :=_fb .Atoi (_ddg [1]);
if _fgdd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );};_cce ,_fgdd :=_fb .Atoi (_ddg [3]);if _fgdd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );};_fbf ,_fgdd :=_fb .Atoi (_ddg [5]);if _fgdd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );
};if _fdb >=1900&&_fdb < 10000{_cba =_fdb ;_bgae =_cce ;_dec =_fbf ;}else if _fdb > 0&&_fdb < 13{_bgae =_fdb ;_dec =_cce ;_cba =_fbf ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );};_aaca =_ddg [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_cba ,_agg =_fb .Atoi (_ddg [16]);
if _agg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );};_bgae =_gcab [_ddg [3]];_dec ,_agg =_fb .Atoi (_ddg [1]);if _agg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );};_aaca =_ddg [19]=="";};if !_aged (_cba ,_bgae ,_dec ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aab );
};return _cba ,_bgae ,_dec ,_aaca ,_eed ;};var _aadf =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};const _cedd =57346;

// Eval evaluates and returns a number.
func (_gbfae Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_gbfae ._caag )};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;
ReferenceTypeRange ;ReferenceTypeSheet ;);

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_cgde :=args [0];switch _cgde .Type {case ResultTypeEmpty :return MakeNumberResult (1);
case ResultTypeNumber :_aafc :=_dbab (_cgde .ValueNumber );return MakeNumberResult (float64 (_aafc .Month ()));case ResultTypeString :_ddeb :=_gd .ToLower (_cgde .ValueString );if !_becf (_ddeb ){_ ,_ ,_ ,_ ,_aag ,_gag :=_accd (_ddeb );if _gag .Type ==ResultTypeError {_gag .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";
return _gag ;};if _aag {return MakeNumberResult (1);};};_ ,_becc ,_ ,_ ,_gcfa :=_aac (_ddeb );if _gcfa .Type ==ResultTypeError {return _gcfa ;};return MakeNumberResult (float64 (_becc ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");
};};func _egab (_bffde Result ,_faagd *criteriaParsed )bool {if _bffde .Type ==ResultTypeEmpty {return false ;};if _faagd ._efed {return _bffde .ValueNumber ==_faagd ._dcdfc ;}else {_debb :=_gd .ToLower (_bffde .ValueString );return _faagd ._ecfcb ==_debb ||_a .Match (_faagd ._ecfcb ,_debb );
};};var _fcedg =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};func NewLexer ()*Lexer {return &Lexer {_bcfgf :make (chan *node )}};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_bbga :=len (args );if _bbga < 3||_bbga > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_degcf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcga :=args [1].ValueNumber ;if _gcga ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ebcgd :=args [2].ValueNumber ;_fadc :=0.0;if _bbga >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fadc =args [3].ValueNumber ;};_abdde :=0.0;if _bbga ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_abdde =args [4].ValueNumber ;if _abdde !=0{_abdde =1;};};var _eacb float64 ;if _degcf ==0{_eacb =(_ebcgd +_fadc )/_gcga ;}else {_bgdb :=_ga .Pow (1+_degcf ,_gcga );if _abdde ==1{_eacb =(_fadc *_degcf /(_bgdb -1)+_ebcgd *_degcf /(1-1/_bgdb ))/(1+_degcf );
}else {_eacb =_fadc *_degcf /(_bgdb -1)+_ebcgd *_degcf /(1-1/_bgdb );};};return MakeNumberResult (-_eacb );};func _eba (_dgc BinOpType ,_eae [][]Result ,_bfcf Result )Result {_gdd :=[][]Result {};for _gb :=range _eae {_eab :=_gbb (_dgc ,_eae [_gb ],_bfcf );
if _eab .Type ==ResultTypeError {return _eab ;};_gdd =append (_gdd ,_eab .ValueList );};return MakeArrayResult (_gdd );};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_egfab :s }};const _adeda =57352;func _dgbg (_fgfa ,_caec ,_ddde ,_acb ,_cbcag ,_debe float64 ,_accde int )(float64 ,Result ){_becd :=int (_debe );_dfag :=_fcdb (_fgfa ,_caec ,_becd ,_accde );
_fbfc :=_gdcca (_fgfa ,_caec ,_becd ,_accde )/_dfag ;_begd ,_cgcge :=_fcdf (_fgfa ,_caec ,_becd ,_accde );if _cgcge .Type ==ResultTypeError {return 0,_cgcge ;};_dcgf :=_gbdb (_fgfa ,_caec ,_becd ,_accde );_gddf :=_cbcag /_ga .Pow (1+_acb /_debe ,_begd -1+_fbfc );
_gddf -=100*_ddde /_debe *_dcgf /_dfag ;_ffgf :=100*_ddde /_debe ;_ggbd :=1+_acb /_debe ;for _bcgd :=0.0;_bcgd < _begd ;_bcgd ++{_gddf +=_ffgf /_ga .Pow (_ggbd ,_bcgd +_fbfc );};return _gddf ,MakeEmptyResult ();};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_ccgb ,_dcbf :=_afdfc ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _dcbf .Type !=ResultTypeEmpty {return _dcbf ;};_dcfeg :=_ccgb ._cbff ;_gbdff :=_ccgb ._aacca ;_bfcfg :=_ccgb ._ddef ;_ddfba :=_ccgb ._ffcedg ;
_efag :=len (_dcfeg );if _gbdff > _efag {_gbdff =_efag ;};_adbe :=_gbdff +_bfcfg ;if _adbe > _efag {_adbe =_efag ;};_gead :=_dcfeg [0:_gbdff ]+_ddfba +_dcfeg [_adbe :];return MakeStringResult (_gead );};type parsedReplaceObject struct{_cbff string ;_aacca int ;
_ddef int ;_ffcedg string ;};func _fcdb (_gcbb ,_bde float64 ,_aea ,_fdbd int )float64 {_aeae :=_dbab (_gcbb );_ceec :=_dbab (_bde );if _fdbd ==1{_ggcae :=_bbegc (_aeae ,_ceec ,_aea ,1);_fcf :=_ggcae .AddDate (0,12/_aea ,0);return _bge (_ggcae ,_fcf ,_fdbd );
};return float64 (_faff (0,_fdbd ))/float64 (_aea );};const _bgafa =57351;

// Update returns the same object as updating sheet references does not affect Number.
func (_gfdg Number )Update (q *_ed .UpdateQuery )Expression {return _gfdg };

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_cff :=_gd .ToLower (args [0].ValueString );if !_cgdea (_cff ){_ ,_ ,_ ,_adc ,_dadd :=_aac (_cff );if _dadd .Type ==ResultTypeError {_dadd .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";
return _dadd ;};if _adc {return MakeNumberResult (0);};};_fcb ,_ace ,_dgd ,_dce ,_ ,_ceac :=_accd (_cff );if _ceac .Type ==ResultTypeError {return _ceac ;};_cbdf :=_dcdb (float64 (_fcb ),float64 (_ace ),_dgd );if _dce {_cbdf +=0.5;}else if _cbdf >=1{_cbdf -=float64 (int (_cbdf ));
};return MakeNumberResult (_cbdf );};

// String returns a string representation of FunctionCall expression.
func (_gadcd FunctionCall )String ()string {_fedgc :=_b .Buffer {};_fedgc .WriteString (_gadcd ._dacba );_fedgc .WriteString ("\u0028");_fdffcf :=len (_gadcd ._cgee )-1;for _accbd ,_ceffd :=range _gadcd ._cgee {_fedgc .WriteString (_ceffd .String ());if _accbd !=_fdffcf {_fedgc .WriteString ("\u002c");
};};_fedgc .WriteString ("\u0029");return _fedgc .String ();};

// Update returns the same object as updating sheet references does not affect Bool.
func (_eabg Bool )Update (q *_ed .UpdateQuery )Expression {return _eabg };

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_gcebc :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");
};_gcebc =int (args [1].ValueNumber );if _gcebc < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");
};if _gcebc ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_abefe :=args [0].Value ();
if _gcebc > len (_abefe ){return MakeStringResult (_abefe );};return MakeStringResult (_abefe [0:_gcebc ]);};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_abeb :=len (args );if _abeb !=6&&_abeb !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_eabc ,_eedc ,_fadcd :=_cbeg (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _fadcd .Type ==ResultTypeError {return _fadcd ;};_feefg :=args [2];if _feefg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cbgb :=_feefg .ValueNumber ;if _cbgb < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_ggbb :=args [3];if _ggbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ffcec :=_ggbb .ValueNumber ;if _ffcec <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_febc :=args [4];if _febc .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_bbdad :=_febc .ValueNumber ;if _bbdad < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_acdd :=args [5];
if _acdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_fffd :=float64 (int (_acdd .ValueNumber ));if !_ffd (_fffd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ebcf :=0;if _abeb ==7&&args [6].Type !=ResultTypeEmpty {_aabg :=args [6];
if _aabg .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ebcf =int (_aabg .ValueNumber );
if !_dbgg (_ebcf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_egacd :=0.0;
_cgbf :=0.0;_abfbe :=1.0;_fbcaeg ,_fadcd :=_dgbg (_eabc ,_eedc ,_cbgb ,_cgbf ,_bbdad ,_fffd ,_ebcf );if _fadcd .Type ==ResultTypeError {return _fadcd ;};_bggf ,_fadcd :=_dgbg (_eabc ,_eedc ,_cbgb ,_abfbe ,_bbdad ,_fffd ,_ebcf );if _fadcd .Type ==ResultTypeError {return _fadcd ;
};_dgeg :=(_abfbe -_cgbf )*0.5;for _agd :=0;_agd < 100&&_egacd !=_ffcec ;_agd ++{_egacd ,_fadcd =_dgbg (_eabc ,_eedc ,_cbgb ,_dgeg ,_bbdad ,_fffd ,_ebcf );if _fadcd .Type ==ResultTypeError {return _fadcd ;};if _ffcec ==_fbcaeg {return MakeNumberResult (_cgbf );
}else if _ffcec ==_bggf {return MakeNumberResult (_abfbe );}else if _ffcec ==_egacd {return MakeNumberResult (_dgeg );}else if _ffcec < _bggf {_abfbe *=2.0;_bggf ,_fadcd =_dgbg (_eabc ,_eedc ,_cbgb ,_abfbe ,_bbdad ,_fffd ,_ebcf );if _fadcd .Type ==ResultTypeError {return _fadcd ;
};_dgeg =(_abfbe -_cgbf )*0.5;}else {if _ffcec < _egacd {_cgbf =_dgeg ;_fbcaeg =_egacd ;}else {_abfbe =_dgeg ;_bggf =_egacd ;};_dgeg =_abfbe -(_abfbe -_cgbf )*((_ffcec -_bggf )/(_fbcaeg -_bggf ));};};return MakeNumberResult (_dgeg );};type xargs struct{_ffdc []float64 ;
_gcccd []float64 ;};

// Update updates references in the BinaryExpr after removing a row/column.
func (_cec BinaryExpr )Update (q *_ed .UpdateQuery )Expression {_cfde :=_cec ;_cfde ._cag =_cec ._cag .Update (q );_cfde ._ae =_cec ._ae .Update (q );return _cfde ;};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_caaee :=ctx .GetEpoch ();_gdgc ,_gabf :=_ebegb (args [0].Value (),_caaee );if _gabf !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_ffggc :=_gdgc .Year ();return MakeBoolResult (_dbag (_ffggc ));};func _daceb (_befc []Result )Result {_gbad :=_befc [0].ValueArray ;if len (_befc )==1{_aggff :=[][]Result {};for _ ,_gggc :=range _gbad {_aggff =append (_aggff ,_bacgg ([]Result {MakeListResult (_gggc )}).ValueList );
};return MakeArrayResult (_aggff );}else if len (_befc )==2{_aedg :=len (_gbad );_cdgcd :=len (_gbad [0]);_cgfdd :=_bagfb (_befc [1],_aedg ,_cdgcd );_bfbb :=len (_cgfdd );_cfdb :=[][]Result {};var _fgbgf []Result ;for _bdbe ,_gbfa :=range _gbad {if _bdbe < _bfbb {_fgbgf =_cgfdd [_bdbe ];
}else {_fgbgf =_ageea (MakeErrorResultType (ErrorTypeNA ,""),_cdgcd );};_cfdb =append (_cfdb ,_bacgg ([]Result {MakeListResult (_gbfa ),MakeListResult (_fgbgf )}).ValueList );};return MakeArrayResult (_cfdb );}else if len (_befc )==3{_fdcfg :=len (_gbad );
_gabfc :=len (_gbad [0]);_cdcb :=_bagfb (_befc [1],_fdcfg ,_gabfc );_bdgf :=_bagfb (_befc [2],_fdcfg ,_gabfc );_egfe :=len (_cdcb );_fgaee :=len (_bdgf );_dedg :=[][]Result {};var _eage ,_cfbc []Result ;for _eccb ,_faaf :=range _gbad {if _eccb < _egfe {_eage =_cdcb [_eccb ];
}else {_eage =_ageea (MakeErrorResultType (ErrorTypeNA ,""),_gabfc );};if _eccb < _fgaee {_cfbc =_bdgf [_eccb ];}else {_cfbc =_ageea (MakeErrorResultType (ErrorTypeNA ,""),_gabfc );};_dedg =append (_dedg ,_bacgg ([]Result {MakeListResult (_faaf ),MakeListResult (_eage ),MakeListResult (_cfbc )}).ValueList );
};return MakeArrayResult (_dedg );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_dfefd :=len (args );if _dfefd !=2&&_dfefd !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_fdag ,_gged :=_dbda (args [0],args [1],"\u0058\u0049\u0052\u0052");if _gged .Type ==ResultTypeError {return _gged ;};_befe :=_fdag ._ffdc ;_eca :=_fdag ._gcccd ;_faada :=0.1;if _dfefd ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_faada =args [2].ValueNumber ;if _faada <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");
};};return _gbbd (_befe ,_eca ,_faada );};

// Update updates references in the VerticalRange after removing a row/column.
func (_cgcgb VerticalRange )Update (q *_ed .UpdateQuery )Expression {if q .UpdateType ==_ed .UpdateActionRemoveColumn {_eeeg :=_cgcgb ;if q .UpdateCurrentSheet {_fcdg :=q .ColumnIdx ;_eeeg ._bcgec =_ab (_cgcgb ._bcgec ,_fcdg );_eeeg ._febed =_ab (_cgcgb ._febed ,_fcdg );
};return _eeeg ;};return _cgcgb ;};func (_efe BinOpType )String ()string {if _efe >=BinOpType (len (_fg )-1){return _c .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_efe );};return _bga [_fg [_efe ]:_fg [_efe +1]];
};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// Eval evaluates and returns the result of a function call.
func (_fgdde FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_ceeca :=LookupFunction (_fgdde ._dacba );if _ceeca !=nil {_beefg :=make ([]Result ,len (_fgdde ._cgee ));for _dgabb ,_fbcac :=range _fgdde ._cgee {_beefg [_dgabb ]=_fbcac .Eval (ctx ,ev );
_beefg [_dgabb ].Ref =_fbcac .Reference (ctx ,ev );};if _ ,_adebb :=_eaga [_fgdde ._dacba ];!_adebb {if _dgaa ,_eagdf :=_dcdce (_beefg );_dgaa {return _eagdf ;};};return _ceeca (_beefg );};_bddgb :=LookupFunctionComplex (_fgdde ._dacba );if _bddgb !=nil {_cdaf :=make ([]Result ,len (_fgdde ._cgee ));
for _cfgeb ,_degeb :=range _fgdde ._cgee {_cdaf [_cfgeb ]=_degeb .Eval (ctx ,ev );_cdaf [_cfgeb ].Ref =_degeb .Reference (ctx ,ev );};if _ ,_dbdb :=_eaga [_fgdde ._dacba ];!_dbdb {if _agfcb ,_fgaed :=_dcdce (_cdaf );_agfcb {return _fgaed ;};};return _bddgb (ctx ,ev ,_cdaf );
};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_fgdde ._dacba );};type ivr struct{};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egdfac :=args [0].AsString ();if _egdfac .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (_egdfac .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (_egdfac .ValueString [0]));};var _afbafc =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_ggc *defEval )LastEvalIsRef ()bool {return _ggc ._ebdf };

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gffc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dddad :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_baeg :=args [2].ValueNumber ;if _baeg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fcfe :=args [3].ValueNumber ;if _fcfe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _fcfe > _baeg {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");
};_ggad :=(_gffc -_dddad )*(_baeg -_fcfe +1)*2;_bcda :=_baeg *(_baeg +1);return MakeNumberResult (_ggad /_bcda );};func (_gbded node )String ()string {return _c .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_gbded ._acbfe ,_afcec (string (_gbded ._ebege )));
};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_edf ,_gbae ,_dgef :=_cde (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _dgef .Type ==ResultTypeError {return _dgef ;};if _gbae ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _edf ==0{return MakeNumberResult (0);};_acae :=_edf < 0;if _acae {_edf =-_edf ;};_ddab :=float64 (int (_edf ));_ggdf :=args [0].Value ();_adbb :=_gd .Split (_ggdf ,"\u002e");_fagg :=0.0;if len (_adbb )> 1{var _ebbg error ;_egdf :=_adbb [1];_fagg ,_ebbg =_fb .ParseFloat (_egdf ,64);
if _ebbg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");
};_gffe :=float64 (len (_egdf ));_fagg /=_ga .Pow (10,_gffe );};_cebc :=_fagg *_gbae /_ga .Pow (10,float64 (int (_ga .Log10 (_gbae )))+1)+_ddab ;if _acae {_cebc =-_cebc ;};return MakeNumberResult (_cebc );};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};

// Eval evaluates and returns an expression with prefix.
func (_fcagf PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_eade :=_fcagf ._fbeda .Reference (ctx ,ev );switch _eade .Type {case ReferenceTypeSheet :if _aacag (_eade ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_eade .Value ));
};_cgda :=ctx .Sheet (_eade .Value );return _fcagf ._bfff .Eval (_cgda ,ev );default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eade .Type ));
};};func LexReader (r _cc .Reader )chan *node {_afaeb :=NewLexer ();go _afaeb .lex (r );return _afaeb ._bcfgf };func _fcdf (_adea ,_cbae float64 ,_dbfg ,_fadb int )(float64 ,Result ){_ebbe ,_gde :=_dbab (_adea ),_dbab (_cbae );if _gde .After (_ebbe ){_addgg :=_bbegc (_ebbe ,_gde ,_dbfg ,_fadb );
_fbca :=(_gde .Year ()-_addgg .Year ())*12+int (_gde .Month ())-int (_addgg .Month ());return float64 (_fbca *_dbfg )/12.0,_eed ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");
};type noCache struct{};const _gfed =57348;

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_cged ,_abd :=_acde (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _abd .Type ==ResultTypeError {return _abd ;};_dbfb :=_dbab (_cged ._gab );_ebf :=_dbab (_cged ._bac );_aabc :=_cged ._aef ;_bae :=_ffae (_dbfb ,_ebf ,_aabc );
_degc ,_gdgg ,_dfgb :=_bae .Date ();return MakeNumberResult (_dcg (_degc ,int (_gdgg ),_dfgb ));};var _faaa =map[string ]*_cb .Regexp {};const _gbf =_e .Second *1;const _dbee =86400000000000;

// String returns a string representation of a named range.
func (_gfge NamedRangeRef )String ()string {return _gfge ._eedeg };

// GetLocked returns FALSE for the invalid reference context.
func (_gcgae *ivr )GetLocked (cellRef string )bool {return false };const _eccaa ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";
func _cdef (_dcddc Result )Result {if _dcddc .Type ==ResultTypeEmpty {return _dcddc ;};_gbdf :=_dcddc .AsString ();if _gbdf .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _dcddc .IsBoolean {if _gbdf .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _gbdf .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};}else {return MakeStringResult (_gd .ToLower (_gbdf .ValueString ));};};const _eedf =57349;func _bagfb (_eggf Result ,_ddga ,_gefff int )[][]Result {_bbgaf :=[][]Result {};switch _eggf .Type {case ResultTypeArray :for _dggd ,_acfg :=range _eggf .ValueArray {if _dggd < _ddga {_bbgaf =append (_bbgaf ,_ageea (MakeListResult (_acfg ),_gefff ));
}else {_bbgaf =append (_bbgaf ,_ageea (MakeErrorResultType (ErrorTypeNA ,""),_gefff ));};};case ResultTypeList :_gagf :=_ageea (_eggf ,_gefff );for _bgcbbe :=0;_bgcbbe < _ddga ;_bgcbbe ++{_bbgaf =append (_bbgaf ,_gagf );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _acbe :=0;
_acbe < _ddga ;_acbe ++{_eaec :=_ageea (_eggf ,_gefff );_bbgaf =append (_bbgaf ,_eaec );};};return _bbgaf ;};func _dbag (_bfcb int )bool {if _bfcb ==_bfcb /400*400{return true ;};if _bfcb ==_bfcb /100*100{return false ;};return _bfcb ==_bfcb /4*4;};const _dagd int =30;


// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_aafa ,_fcc :=_acce (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _fcc .Type ==ResultTypeError {return _fcc ;};_feb :=_aafa ._efcda ;_adbg :=_aafa ._ggf ;_ffgb :=_aafa ._gef ;_dagg :=_aafa ._aaee ;_eadce :=_aafa ._beddg ;
_fed :=_aafa ._gcad ;_feaa :=_dbgff (_feb ,_adbg ,_ffgb ,_dagg ,_eadce ,_fed );if _feaa .Type ==ResultTypeError {return _feaa ;};_bccf :=_feaa .ValueNumber /(1.0+_dagg /_eadce );return MakeNumberResult (_bccf );};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_bgdg SheetPrefixExpr )Update (q *_ed .UpdateQuery )Expression {return _bgdg };

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdef :=args [0].Type ;for _ ,_bdbc :=range args {if _bdbc .Type !=_gdef {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");
};};switch _gdef {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_bagce :=len (args [0].ListValues ());_dddde :=make ([]float64 ,_bagce );for _degbc :=range _dddde {_dddde [_degbc ]=1.0;};for _ ,_ffffc :=range args {if len (_ffffc .ListValues ())!=_bagce {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");
};for _cbce ,_dcbab :=range _ffffc .ListValues (){_dcbab =_dcbab .AsNumber ();if _dcbab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");
};_dddde [_cbce ]=_dddde [_cbce ]*_dcbab .ValueNumber ;};};_ccbe :=0.0;for _ ,_fbeg :=range _dddde {_ccbe +=_fbeg ;};return MakeNumberResult (_ccbe );};return MakeNumberResult (1.0);};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_fec :=args [0].ValueNumber ;_cgcg :=args [1].ValueNumber ;if _cgcg < _fec {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");
};if _cgcg ==_fec {return MakeNumberResult (0);};_dfc :=_gd .ToLower (args [2].ValueString );if _dfc =="\u0064"{return MakeNumberResult (_cgcg -_fec );};_ffc :=_dbab (_fec );_fdf :=_dbab (_cgcg );_dbaf ,_egff ,_cef :=_ffc .Date ();_ddaf ,_dcd ,_adg :=_fdf .Date ();
_adgc :=int (_egff );_bfgda :=int (_dcd );var _fgd float64 ;switch _dfc {case "\u0079":_fgd =float64 (_ddaf -_dbaf );if _bfgda < _adgc ||(_bfgda ==_adgc &&_adg < _cef ){_fgd --;};case "\u006d":_aeda :=_ddaf -_dbaf ;_dfcf :=_bfgda -_adgc ;if _adg < _cef {_dfcf --;
};if _dfcf < 0{_aeda --;_dfcf +=12;};_fgd =float64 (_aeda *12+_dfcf );case "\u006d\u0064":_bbe :=_bfgda ;if _adg < _cef {_bbe --;};_fgd =float64 (int (_cgcg -_dcg (_ddaf ,_bbe ,_cef )));case "\u0079\u006d":_fgd =float64 (_bfgda -_adgc );if _adg < _cef {_fgd --;
};if _fgd < 0{_fgd +=12;};case "\u0079\u0064":_ebdc :=_ddaf ;if _bfgda < _adgc ||(_bfgda ==_adgc &&_adg < _cef ){_ebdc --;};_fgd =float64 (int (_cgcg -_dcg (_ebdc ,_adgc ,_cef )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");
};return MakeNumberResult (_fgd );};var _faaag =map[string ]FunctionComplex {};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_gdde :=args [0].ValueNumber ;if _gdde <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};_gaae :=float64 (int (args [1].ValueNumber ));if _gaae < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult ((_ga .Pow (_gdde +1,1/_gaae )-1)*_gaae );};

// String returns a string representation of a vertical range.
func (_feefgg VerticalRange )String ()string {return _feefgg .verticalRangeReference ()};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_adeg :=args [0].AsString ();if _adeg .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_daecd :=args [1].AsNumber ();if _daecd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _daecd .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");
};if _daecd .ValueNumber ==0{return MakeStringResult ("");};_gbcaa :=_b .Buffer {};for _dcgaf :=0;_dcgaf < int (_daecd .ValueNumber );_dcgaf ++{_gbcaa .WriteString (_adeg .ValueString );};return MakeStringResult (_gbcaa .String ());};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_ccdfg ,_ffaa :=_fbcf ("\u0046\u0049\u004e\u0044",args );if _ffaa .Type !=ResultTypeEmpty {return _ffaa ;};_fddf :=_ccdfg ._baffb ;if _fddf ==""{return MakeNumberResult (1.0);};_bgdda :=_ccdfg ._bcde ;_efbe :=_ccdfg ._daae ;
_ffda :=1;for _affd :=range _bgdda {if _ffda < _efbe {_ffda ++;continue ;};_cade :=_gd .Index (_bgdda [_affd :],_fddf );if _cade ==0{return MakeNumberResult (float64 (_ffda ));};_ffda ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// Function is a standard function whose result only depends on its arguments.
type Function func (_bgbbf []Result )Result ;

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );
};func _ab (_cabf string ,_egf uint32 )string {_gca :=_gdg .ColumnToIndex (_cabf );if _gca ==_egf {return "\u0023\u0052\u0045F\u0021";}else if _gca > _egf {return _gdg .IndexToColumn (_gca -1);}else {return _cabf ;};};const _ggbdc =57366;

// Eval evaluates and returns the result of an empty expression.
func (_ceg EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};const _cagec int =30;

// Match implements the MATCH function.
func Match (args []Result )Result {_cfdg :=len (args );if _cfdg !=2&&_cfdg !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dadgc :=1;if _cfdg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_bffd :=args [2].ValueNumber ;if _bffd ==-1||_bffd ==0{_dadgc =int (_bffd );};};_gfag :=args [1];var _eeac []Result ;switch _gfag .Type {case ResultTypeList :_eeac =_gfag .ValueList ;case ResultTypeArray :_eebf :=_gfag .ValueArray ;for _ ,_dabg :=range _eebf {if len (_dabg )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_eeac =append (_eeac ,_dabg [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_ffbg :=_dgcc (args [0]);switch _dadgc {case 0:for _ccef ,_ebed :=range _eeac {if _egab (_ebed ,_ffbg ){return MakeNumberResult (float64 (_ccef +1));};};case -1:for _aabcb :=0;_aabcb < len (_eeac );_aabcb ++{if _egab (_eeac [_aabcb ],_ffbg ){return MakeNumberResult (float64 (_aabcb +1));
};if _ffbg ._efed &&(_eeac [_aabcb ].ValueNumber < _ffbg ._dcdfc ){if _aabcb ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_aabcb ));};};case 1:for _dfgbe :=0;_dfgbe < len (_eeac );_dfgbe ++{if _egab (_eeac [_dfgbe ],_ffbg ){return MakeNumberResult (float64 (_dfgbe +1));
};if _ffbg ._efed &&(_eeac [_dfgbe ].ValueNumber > _ffbg ._dcdfc ){if _dfgbe ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_dfgbe ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};const _bgbd =57378;

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_fcbgd :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");
};_gcgag :=args [1].ValueNumber !=0;_ebce :=_fedf (args [2:],[]string {},_gcgag );return MakeStringResult (_gd .Join (_ebce ,_fcbgd ));};func _cbfaa (_addc []Result ,_ccba rmode )Result {if len (_addc )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bbbda :=_addc [0].AsNumber ();if _bbbda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_daed :=_addc [1].AsNumber ();if _daed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dgea :=_daed .ValueNumber ;_bbab :=_bbbda .ValueNumber ;_bbfbc :=1.0;if _dgea > 0{_bbfbc =_ga .Pow (1/10.0,_dgea );}else {_bbfbc =_ga .Pow (10.0,-_dgea );};_bbab ,_cgbgbf :=_ga .Modf (_bbab /_bbfbc );switch _ccba {case _faed :const _gdbfe =0.499999999;
if _cgbgbf >=_gdbfe {_bbab ++;}else if _cgbgbf <=-_gdbfe {_bbab --;};case _dgfdb :case _gdbg :if _cgbgbf > 0{_bbab ++;}else if _cgbgbf < 0{_bbab --;};};return MakeNumberResult (_bbab *_bbfbc );};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };
func _ggea (_fgea ,_bgbe ,_eegc ,_bgef ,_bfbf float64 ,_egfa int )float64 {_acaa :=_dfaf (_fgea ,_eegc ,_bgef ,_bfbf ,_egfa );var _ccg float64 ;if _bgbe ==1{if _egfa ==1{_ccg =0;}else {_ccg =-_bgef ;};}else {if _egfa ==1{_ccg =_feed (_fgea ,_bgbe -2,_acaa ,_bgef ,1)-_acaa ;
}else {_ccg =_feed (_fgea ,_bgbe -1,_acaa ,_bgef ,0);};};return _ccg *_fgea ;};

// GetFormat returns an empty string for the invalid reference context.
func (_fgdb *ivr )GetFormat (cellRef string )string {return ""};

// Number is a nubmer expression.
type Number struct{_caag float64 };