//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_be "bytes";_c "errors";_bg "fmt";_ed "github.com/unidoc/unioffice/common/logger";_gd "github.com/unidoc/unioffice/internal/mergesort";_f "github.com/unidoc/unioffice/internal/wildcard";_da "github.com/unidoc/unioffice/spreadsheet/format";
_fb "github.com/unidoc/unioffice/spreadsheet/reference";_af "github.com/unidoc/unioffice/spreadsheet/update";_cg "io";_a "math";_e "math/big";_df "math/rand";_g "regexp";_d "sort";_ee "strconv";_dc "strings";_ef "sync";_bc "time";_bf "unicode";);

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_dgfcc SheetPrefixExpr )Update (q *_af .UpdateQuery )Expression {return _dgfcc };func _efge (_dae ,_gfad _bc .Time ,_bbb ,_fbbd int )_bc .Time {_dfaec :=_gfad ;_cdfbg :=_dae .Year ()-_gfad .Year ();_dfaec =_dfaec .AddDate (_cdfbg ,0,0);if _dae .After (_dfaec ){_dfaec =_dfaec .AddDate (1,0,0);
};_egda :=-12/_bbb ;for _dfaec .After (_dae ){_dfaec =_dfaec .AddDate (0,_egda ,0);};return _dfaec ;};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_fbcg Context ,formula string )Result ;SetCache (_bcc string ,_bede Result );GetFromCache (_dcf string )(Result ,bool );LastEvalIsRef ()bool ;};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_gdafe :=len (args );if _gdafe < 2||_gdafe > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dbaf :=args [0];if _dbaf .Type !=ResultTypeArray &&_dbaf .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_agcfb :=args [1].AsNumber ();if _agcfb .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_fggf :=int (_agcfb .ValueNumber )-1;_caae :=-1;if _gdafe ==3&&args [2].Type !=ResultTypeEmpty {_bfdcc :=args [2].AsNumber ();if _bfdcc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_caae =int (_bfdcc .ValueNumber )-1;};if _fggf ==-1&&_caae ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};var _fabff []Result ;if _dbaf .Type ==ResultTypeArray {_efde :=_dbaf .ValueArray ;if _fggf < -1||_fggf >=len (_efde ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _fggf ==-1{if _caae >=len (_efde [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_eafb :=[][]Result {};for _ ,_adeg :=range _efde {_cbeb :=_adeg [_caae ];
if _cbeb .Type ==ResultTypeEmpty {_cbeb =MakeNumberResult (0);};_eafb =append (_eafb ,[]Result {_cbeb });};return MakeArrayResult (_eafb );};_fabff =_efde [_fggf ];}else {_eegc :=_dbaf .ValueList ;if _fggf < -1||_fggf >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _fggf ==-1{if _caae >=len (_eegc ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_eada :=_eegc [_caae ];if _eada .Type ==ResultTypeEmpty {_eada =MakeNumberResult (0);
};return _eada ;};_fabff =_eegc ;};if _caae < -1||_caae > len (_fabff ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _caae ==-1{_ddd :=[]Result {};
for _ ,_aeaff :=range _fabff {if _aeaff .Type ==ResultTypeEmpty {_ddd =append (_ddd ,MakeNumberResult (0));}else {_ddd =append (_ddd ,_aeaff );};};return MakeArrayResult ([][]Result {_ddd });};_agga :=_fabff [_caae ];if _agga .Type ==ResultTypeEmpty {return MakeNumberResult (0);
};return _agga ;};

// String returns a string representation of ConstArrayExpr.
func (_fg ConstArrayExpr )String ()string {return ""};type rangeIndex struct{_ecfac int ;_aged int ;};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_bfbeb :e }};func _fcgfe (_adfd string ,_cgce []Result )(*parsedReplaceObject ,Result ){if len (_cgce )!=4{return nil ,MakeErrorResult (_adfd +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _cgce [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_adfd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_eafeb :=_cgce [0].ValueString ;if _cgce [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_adfd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");
};_fgabc :=int (_cgce [1].ValueNumber )-1;if _cgce [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_adfd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cafcc :=int (_cgce [2].ValueNumber );if _cgce [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_adfd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");
};_efedd :=_cgce [3].ValueString ;return &parsedReplaceObject {_eafeb ,_fgabc ,_cafcc ,_efedd },_bgb ;};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_eccc :=args [1].ValueNumber ;_cggc :=args [0];var _bff float64 ;switch _cggc .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
case ResultTypeNumber :_bff =_cggc .ValueNumber ;case ResultTypeString :_cdfb :=DateValue ([]Result {args [0]});if _cdfb .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_bff =_cdfb .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_egcg :=_dgfe (_bff );_bde :=_egcg .AddDate (0,int (_eccc ),0);
_bbg ,_begfb ,_aaee :=_bde .Date ();_gade :=_defge (_bbg ,int (_begfb ),_aaee );if _gade < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};return MakeNumberResult (_gade );};const _caaf =57349;

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func _fcce (_aafd ,_cgba float64 )float64 {_aafd =_a .Trunc (_aafd );_cgba =_a .Trunc (_cgba );if _aafd ==0&&_cgba ==0{return 0;};return _aafd *_cgba /_badfa (_aafd ,_cgba );
};const (_ byte =iota ;_gdeef ;_bdbb ;_gdgff ;_efae ;_dcbbb ;);

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _cegf (args ,_dgfgc )};func (_agbg *yyParserImpl )Lookahead ()int {return _agbg ._gaagg };

// String returns a string representation of SheetPrefixExpr.
func (_bgadef SheetPrefixExpr )String ()string {return _bgadef ._dgede };func _cfdf (_aacf Result )*criteriaParsed {_bdaga :=_aacf .Type ==ResultTypeNumber ;_eaage :=_aacf .ValueNumber ;_dfbag :=_dc .ToLower (_aacf .ValueString );_abdef :=_gbgb (_dfbag );
return &criteriaParsed {_bdaga ,_eaage ,_dfbag ,_abdef };};var _dgaa ,_dffd ,_eeca ,_agbe ,_gdef ,_cafac *_g .Regexp ;func _bdcg (_ebdd ,_afed int )string {const TOKSTART =4;if !_gfgf {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";
};for _ ,_fffgg :=range _eddbg {if _fffgg ._aeedb ==_ebdd &&_fffgg ._fdfdc ==_afed {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_fffgg ._fbbga ;};};_eggfe :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_bdae (_afed );
_ddfg :=make ([]int ,0,4);_egcfbf :=_bdbe [_ebdd ];for _cgbb :=TOKSTART ;_cgbb -1< len (_abagc );_cgbb ++{if _gace :=_egcfbf +_cgbb ;_gace >=0&&_gace < _gadd &&_fddg [_efeag [_gace ]]==_cgbb {if len (_ddfg )==cap (_ddfg ){return _eggfe ;};_ddfg =append (_ddfg ,_cgbb );
};};if _geaab [_ebdd ]==-2{_egdd :=0;for _afbd [_egdd ]!=-1||_afbd [_egdd +1]!=_ebdd {_egdd +=2;};for _egdd +=2;_afbd [_egdd ]>=0;_egdd +=2{_bgbeb :=_afbd [_egdd ];if _bgbeb < TOKSTART ||_afbd [_egdd +1]==0{continue ;};if len (_ddfg )==cap (_ddfg ){return _eggfe ;
};_ddfg =append (_ddfg ,_bgbeb );};if _afbd [_egdd +1]!=0{return _eggfe ;};};for _feeg ,_beaf :=range _ddfg {if _feeg ==0{_eggfe +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_eggfe +="\u0020\u006f\u0072\u0020";};_eggfe +=_bdae (_beaf );
};return _eggfe ;};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_abfdee :=args [0].AsNumber ();
_adcgf :=args [1].AsNumber ();if _abfdee .Type ==ResultTypeNumber &&_adcgf .Type ==ResultTypeNumber {_fdbg :=_a .Atan2 (_adcgf .ValueNumber ,_abfdee .ValueNumber );if _fdbg !=_fdbg {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");
};return MakeNumberResult (_fdbg );};for _ ,_fccd :=range []ResultType {_abfdee .Type ,_adcgf .Type }{switch _fccd {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
case ResultTypeError :return _abfdee ;default:return MakeErrorResult (_bg .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fccd ));
};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};func _baf (_gba ,_fcfa float64 ,_adbe int )(float64 ,Result ){_fac ,_fdc :=_dgfe (_gba ),_dgfe (_fcfa );
_gagb :=_fac .Unix ();_cafe :=_fdc .Unix ();if _gagb ==_cafe {return 0,_bgb ;};_bac ,_afd ,_eedc :=_fac .Date ();_cbd ,_dfab ,_geaa :=_fdc .Date ();_adcg ,_fea :=int (_afd ),int (_dfab );var _fcba ,_adcc float64 ;switch _adbe {case 0:if _eedc ==31{_eedc --;
};if _eedc ==30&&_geaa ==31{_geaa --;}else if _gce :=_fbce (_bac );_adcg ==2&&((_gce &&_eedc ==29)||(!_gce &&_eedc ==28)){_eedc =30;if _bgba :=_fbce (_cbd );_fea ==2&&((_bgba &&_geaa ==29)||(!_bgba &&_geaa ==28)){_geaa =30;};};_fcba =float64 ((_cbd -_bac )*360+(_fea -_adcg )*30+(_geaa -_eedc ));
_adcc =360;case 1:_fcba =_fcfa -_gba ;_bfga :=_bac !=_cbd ;if _bfga &&(_cbd !=_bac +1||_adcg < _fea ||(_adcg ==_fea &&_eedc < _geaa )){_bfa :=0;for _ddgb :=_bac ;_ddgb <=_cbd ;_ddgb ++{_bfa +=_fdde (_ddgb ,1);};_adcc =float64 (_bfa )/float64 (_cbd -_bac +1);
}else {if !_bfga &&_fbce (_bac ){_adcc =366;}else {if _bfga &&((_fbce (_bac )&&(_adcg < 2||(_adcg ==2&&_eedc <=29)))||(_fbce (_cbd )&&(_fea > 2||(_fea ==2&&_geaa ==29)))){_adcc =366;}else {_adcc =365;};};};case 2:_fcba =_fcfa -_gba ;_adcc =360;case 3:_fcba =_fcfa -_gba ;
_adcc =365;case 4:if _eedc ==31{_eedc --;};if _geaa ==31{_geaa --;};_fcba =float64 ((_cbd -_bac )*360+(_fea -_adcg )*30+(_geaa -_eedc ));_adcc =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");
};return _fcba /_adcc ,_bgb ;};

// Update returns the same object as updating sheet references does not affect Bool.
func (_dfd Bool )Update (q *_af .UpdateQuery )Expression {return _dfd };

// Number is a nubmer expression.
type Number struct{_fbbgb float64 };

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_dcfd ,_ddgcg ,_gfeeb Expression };

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_abe :=_dc .ToLower (args [0].ValueString );if !_dgg (_abe ){_ ,_ ,_ ,_efcf ,_edg :=_gfg (_abe );if _edg .Type ==ResultTypeError {_edg .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";
return _edg ;};if _efcf {return MakeNumberResult (0);};};_ecbf ,_bfe ,_agg ,_eaa ,_ ,_egdg :=_dfac (_abe );if _egdg .Type ==ResultTypeError {return _egdg ;};_afgg :=_gaa (float64 (_ecbf ),float64 (_bfe ),_agg );if _eaa {_afgg +=0.5;}else if _afgg >=1{_afgg -=float64 (int (_afgg ));
};return MakeNumberResult (_afgg );};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_aded :=args [0];if _aded .Type !=ResultTypeArray &&_aded .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_eeaab :=_ggbe (_aded );_cadg :=args [2];if _cadg .Type !=ResultTypeArray &&_cadg .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_efegf :=_ggbe (_cadg );_ggdge :=_cfdf (args [1]);_cddc :=0.0;for _bbce ,_edebd :=range _eeaab {for _eacc ,_dcdb :=range _edebd {if _aaab (_dcdb ,_ggdge ){_cddc +=_efegf [_bbce ][_eacc ].ValueNumber ;};};};return MakeNumberResult (_cddc );};func (_facb *ivr )Sheet (name string )Context {return _facb };


// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_ffgf :=args [0].AsNumber ();if _ffgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_beee :=int (_ffgf .ValueNumber );_gcaf :=make ([][]Result ,0,_beee );for _gggc :=0;_gggc < _beee ;_gggc ++{_aagf :=make ([]Result ,_beee );for _ffgda :=0;_ffgda < _beee ;_ffgda ++{if _gggc ==_ffgda {_aagf [_ffgda ]=MakeNumberResult (1.0);}else {_aagf [_ffgda ]=MakeNumberResult (0.0);
};};_gcaf =append (_gcaf ,_aagf );};return MakeArrayResult (_gcaf );};type defEval struct{evCache ;_dbg bool ;};var _dac =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func _ccb (_efgf ,_bca ,_dfef int )bool {if _bca < 1||_bca > 12{return false ;};if _dfef < 1{return false ;};return _dfef <=_cfdb (_efgf ,_bca );};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_bfda :=len (args );if _bfda ==0||_bfda > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");
};_aeed :=_ggbe (args [0]);_dabc :=[]float64 {};for _ ,_eccca :=range _aeed {for _ ,_gcdg :=range _eccca {if _gcdg .Type ==ResultTypeNumber &&!_gcdg .IsBoolean {_dabc =append (_dabc ,_gcdg .ValueNumber );};};};_cfbf :=len (_dabc );if len (_dabc )< 2{return MakeErrorResultType (ErrorTypeNum ,"");
};_abff :=0.1;if _bfda ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_abff =args [1].ValueNumber ;if _abff <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");
};};_effec :=[]float64 {};for _aaca :=0;_aaca < _cfbf ;_aaca ++{if _aaca ==0{_effec =append (_effec ,0);}else {_effec =append (_effec ,_effec [_aaca -1]+365);};};return _dcaf (_dabc ,_effec ,_abff );};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_becf :=int (args [0].ValueNumber );
return MakeBoolResult (_becf !=_becf /2*2);};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gbafa :=args [0].AsNumber ();_fbgc :=args [1].AsNumber ();if _gbafa .Type !=ResultTypeNumber ||_fbgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _fbgc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_a .Trunc (_gbafa .ValueNumber /_fbgc .ValueNumber ));
};const _abaf =2;const _bbbg =57353;

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_dccd :=len (args );if _dccd !=6&&_dccd !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_gdab ,_cdfe ,_gafa :=_agcb (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _gafa .Type ==ResultTypeError {return _gafa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_decd :=args [2].ValueNumber ;if _decd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_faab :=args [3].ValueNumber ;if _faab < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbdf :=args [4].ValueNumber ;if _fbdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdee :=args [5];if _fdee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gceb :=_fdee .ValueNumber ;if !_ecg (_gceb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bbdg :=0;if _dccd ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbdg =int (args [6].ValueNumber );if !_gbaa (_bbdg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");
};};_ebd ,_gafa :=_ffbb (_gdab ,_cdfe ,_decd ,_faab ,_fbdf ,_gceb ,_bbdg );if _gafa .Type ==ResultTypeError {return _gafa ;};return MakeNumberResult (_ebd );};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_ffff ,_cecg :=_bgcg (args ,false );if _cecg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_ffff /_cecg );};func _bbfe (_dddb Result )[]Result {_fcegc :=_dddb .ValueList ;if _dddb .Type ==ResultTypeArray {_fcegc =nil ;for _ ,_bgeg :=range _dddb .ValueArray {if len (_bgeg )> 0{_fcegc =append (_fcegc ,_bgeg [0]);}else {_fcegc =append (_fcegc ,_bgb );
};};};return _fcegc ;};func _eefbc (_ggbeb _bc .Time )bool {return _bc .Now ().Sub (_ggbeb )>=_ffbf };

// String returns a string representation of a vertical range.
func (_bbefg VerticalRange )String ()string {return _bbefg .verticalRangeReference ()};

// Update returns the same object as updating sheet references does not affect Number.
func (_gebfc Number )Update (q *_af .UpdateQuery )Expression {return _gebfc };type couponArgs struct{_eedbc float64 ;_bfb float64 ;_gddd int ;_gegg int ;};func _badfa (_bbgac ,_eeaec float64 )float64 {_bbgac =_a .Trunc (_bbgac );_eeaec =_a .Trunc (_eeaec );
if _bbgac ==0{return _eeaec ;};if _eeaec ==0{return _bbgac ;};for _bbgac !=_eeaec {if _bbgac > _eeaec {_bbgac =_bbgac -_eeaec ;}else {_eeaec =_eeaec -_bbgac ;};};return _bbgac ;};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _deaa (args ,false )};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_baee :=args [0];
if _baee .Type !=ResultTypeArray &&_baee .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_daag :=_baee .ValueArray ;if len (_daag )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");
};return MakeNumberResult (float64 (len (_daag [0])));};const _efefb =57371;func (_fga *evCache )SetCache (key string ,value Result ){_fga ._ged .Lock ();_fga ._dab [key ]=value ;_fga ._ged .Unlock ();};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_gece NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_fgdg :=ctx .NamedRange (_gece ._bdbc );_ggff :=_fgdg .Value ;if _bdga ,_becb :=ev .GetFromCache (_ggff );_becb {return _bdga ;};_eefd :=_dc .Split (_ggff ,"\u0021");if len (_eefd )!=2{return MakeErrorResult (_bg .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_ggff ));
};_agcge :=ctx .Sheet (_eefd [0]);_begae :=_dc .Split (_eefd [1],"\u003a");switch len (_begae ){case 1:_ggab :=ev .Eval (_agcge ,_begae [0]);ev .SetCache (_ggff ,_ggab );return _ggab ;case 2:_fabdf :=_cabcgf (_agcge ,ev ,_begae [0],_begae [1]);ev .SetCache (_ggff ,_fabdf );
return _fabdf ;};return MakeErrorResult (_bg .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_fgdg .Type ));};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _efef ,_defg float64 ;switch args [0].Type {case ResultTypeNumber :_defg =args [0].ValueNumber ;
case ResultTypeString :_cgf :=DateValue ([]Result {args [0]});if _cgf .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");
};_defg =_cgf .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_efef =args [1].ValueNumber ;
if _efef < 62&&_defg >=62{_efef --;};case ResultTypeString :_decc :=DateValue ([]Result {args [1]});if _decc .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");
};_efef =_decc .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_afbf :=float64 (int (_defg -_efef ));return MakeNumberResult (_afbf );
};

// Eval evaluates and returns the result of a sheet expression.
func (_fdgcab SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");
};const _feb =86400000000000;type node struct{_aaeaf tokenType ;_baec string ;};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_cbf :=args [0];switch _cbf .Type {case ResultTypeEmpty :return MakeNumberResult (1);
case ResultTypeNumber :_febf :=_dgfe (_cbf .ValueNumber );return MakeNumberResult (float64 (_febf .Month ()));case ResultTypeString :_gagf :=_dc .ToLower (_cbf .ValueString );if !_afg (_gagf ){_ ,_ ,_ ,_ ,_gbdd ,_eca :=_dfac (_gagf );if _eca .Type ==ResultTypeError {_eca .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";
return _eca ;};if _gbdd {return MakeNumberResult (1);};};_ ,_eebg ,_ ,_ ,_bebdf :=_gfg (_gagf );if _bebdf .Type ==ResultTypeError {return _bebdf ;};return MakeNumberResult (float64 (_eebg ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");
};};

// String is a string expression.
type String struct{_gbgbe string };

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bgea :=args [0].AsNumber ();if _bgea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _bgea .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_bbgbc :=float64 (1);_cddgc :=_a .Trunc (_bgea .ValueNumber );for _eafbe :=_cddgc ;_eafbe > 1;_eafbe -=2{_bbgbc *=_eafbe ;};return MakeNumberResult (_bbgbc );};

// FunctionCall is a function call expression.
type FunctionCall struct{_accc string ;_cega []Expression ;};

// Eval evaluates a vertical range returning a list of results or an error.
func (_bbeae VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_aadaa :=_bbeae .verticalRangeReference ();if _gfbac ,_eeefc :=ev .GetFromCache (_aadaa );_eeefc {return _gfbac ;};_cdffa ,_ccbb :=_dadae (ctx ,_bbeae ._ecga ,_bbeae ._gccba );_cadad :=_cabcgf (ctx ,ev ,_cdffa ,_ccbb );
ev .SetCache (_aadaa ,_cadad );return _cadad ;};func _bcga (_cb ,_bgc [][]Result )bool {if len (_cb )!=len (_bgc ){return false ;};for _eee :=range _cb {if len (_cb [_eee ])!=len (_bgc [_eee ]){return false ;};};return true ;};const _cffed =-1000;func _ebcbb (_cbeff Result ,_bbega ,_dfdcc string )(float64 ,Result ){switch _cbeff .Type {case ResultTypeEmpty :return 0,_bgb ;
case ResultTypeNumber :return _cbeff .ValueNumber ,_bgb ;case ResultTypeString :_gaff ,_dgac :=_ee .ParseFloat (_cbeff .ValueString ,64);if _dgac !=nil {return 0,MakeErrorResult (_dfdcc +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_bbega );
};return _gaff ,_bgb ;default:return 0,MakeErrorResult (_bbega +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_dfdcc +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");
};};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_acfc :=args [0].AsString ();_fcbb :=args [1].AsString ();if _acfc .Type !=ResultTypeString ||_fcbb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};return MakeBoolResult (_acfc .ValueString ==_fcbb .ValueString );};func init (){_dea ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );
RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );
RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );
RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};func _gfgbc (_bbdd string ,_adee func (_cefb float64 )float64 )Function {return func (_ffabb []Result )Result {if len (_ffabb )!=1{return MakeErrorResult (_bbdd +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_agfef :=_ffabb [0].AsNumber ();switch _agfef .Type {case ResultTypeNumber :_ccga :=_adee (_agfef .ValueNumber );if _a .IsNaN (_ccga ){return MakeErrorResult (_bbdd +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};
if _a .IsInf (_ccga ,0){return MakeErrorResult (_bbdd +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_ccga );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_bbdd +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _agfef ;default:return MakeErrorResult (_bg .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bbdd ,_agfef .Type ));
};};};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ddgce :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_edae :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aeaf :=args [2].ValueNumber ;if _aeaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfdbc :=args [3].ValueNumber ;return MakeNumberResult (_dfdbc *_ddgce *(_edae /_aeaf -1));};func _aef (_dca ,_cefd _bc .Time ,_aefg int )float64 {if _dca .After (_cefd ){_dca ,_cefd =_cefd ,_dca ;};_fafg :=0;_fddb ,_age ,_febc :=_dca .Date ();_dece ,_aeg ,_affa :=_cefd .Date ();
_fdb ,_dcbd :=int (_age ),int (_aeg );_gee ,_dcga :=_bcgd (_fddb ,_fdb ,_febc ,_aefg ),_bcgd (_dece ,_dcbd ,_affa ,_aefg );if !_afgb (_aefg ){return _defge (_dece ,_dcbd ,_dcga )-_defge (_fddb ,_fdb ,_gee );};if _aefg ==0{if (_fdb ==2||_gee < 30)&&_affa ==31{_dcga =31;
}else if _dcbd ==2&&_dcga ==_cfdb (_dece ,_dcbd ){_dcga =_cfdb (_dece ,2);};}else {if _fdb ==2&&_gee ==30{_gee =_cfdb (_fddb ,2);};if _dcbd ==2&&_dcga ==30{_dcga =_cfdb (_dece ,2);};};if _fddb < _dece ||(_fddb ==_dece &&_fdb < _dcbd ){_fafg =30-_gee +1;
_febc =1;_gee =1;_ceea :=_bc .Date (_fddb ,_bc .Month (_fdb ),_febc ,0,0,0,0,_bc .UTC ).AddDate (0,1,0);if _ceea .Year ()< _dece {_fafg +=_aabe (_ceea .Year (),int (_ceea .Month ()),12,_aefg );_ceea =_ceea .AddDate (0,13-int (_ceea .Month ()),0);_fafg +=_cbdf (_ceea .Year (),_dece -1,_aefg );
};_fafg +=_aabe (_dece ,int (_ceea .Month ()),_dcbd -1,_aefg );_ceea =_ceea .AddDate (0,_dcbd -int (_ceea .Month ()),0);_fdb =_ceea .Day ();};_fafg +=_dcga -_gee ;if _fafg > 0{return float64 (_fafg );}else {return 0;};};type cumulArgs struct{_fcg float64 ;
_ggd float64 ;_baa float64 ;_bgac float64 ;_bdcf float64 ;_cecag int ;};func _fgegb ()yyParser {return &yyParserImpl {}};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dbbd :=args [0];_dada :=args [1];if _dada .Type !=ResultTypeArray &&_dada .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_bcgda :=_bbfe (_dada );_acba :=-1;for _dffce ,_egeg :=range _bcgda {if _baeg (_dbbd ,_egeg ,false ,false )==_bafef {_acba =_dffce ;};};if _acba ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};_fafa :=_bcgda ;if len (args )==3{_fafa =_bbfe (args [2]);};if _acba < 0||_acba >=len (_fafa ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};return _fafa [_acba ];};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_gbed :=args [0].Ref ;for _gbed .Type ==ReferenceTypeNamedRange {_gbed =ctx .NamedRange (_gbed .Value );};_cgee :="";switch _gbed .Type {case ReferenceTypeCell :_cgee =_gbed .Value ;case ReferenceTypeRange :_edde :=_dc .Split (_gbed .Value ,"\u003a");
if len (_edde )==2{_cgee =_edde [0];};default:return MakeErrorResult (_bg .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_gbed .Type ));
};_bgbcg ,_egcd :=_fb .ParseCellReference (_cgee );if _egcd !=nil {return MakeErrorResult (_bg .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_egcd .Error ()));
};_edf ,_adef ,_fcfg :=_bgbcg .Column ,_bgbcg .RowIdx ,_bgbcg .SheetName ;_gcdfa :=args [1].AsNumber ();if _gcdfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};_eagd :=args [2].AsNumber ();if _eagd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};var _adbgc ,_fcdc Result ;if len (args )==3{_adbgc =MakeNumberResult (1);_fcdc =MakeNumberResult (1);}else {_adbgc =args [3].AsNumber ();if _adbgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");
};if _adbgc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_fcdc =args [4].AsNumber ();if _fcdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");
};if _fcdc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_adga :=_fb .ColumnToIndex (_edf );_gcge :=_adef +uint32 (_gcdfa .ValueNumber );_eegf :=_adga +uint32 (_eagd .ValueNumber );_bfaf :=_gcge +uint32 (_adbgc .ValueNumber );_dfdgg :=_eegf +uint32 (_fcdc .ValueNumber );
if _adbgc .ValueNumber > 0{_bfaf --;}else {_bfaf ++;_gcge ,_bfaf =_bfaf ,_gcge ;};if _fcdc .ValueNumber > 0{_dfdgg --;}else {_dfdgg ++;_eegf ,_dfdgg =_dfdgg ,_eegf ;};_dfefa :=_bg .Sprintf ("\u0025\u0073\u0025\u0064",_fb .IndexToColumn (_eegf ),_gcge );
_edba :=_bg .Sprintf ("\u0025\u0073\u0025\u0064",_fb .IndexToColumn (_dfdgg ),_bfaf );if _fcfg ==""{return _cabcgf (ctx ,ev ,_dfefa ,_edba );}else {return _cabcgf (ctx .Sheet (_fcfg ),ev ,_dfefa ,_edba );};};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_cbag :=len (args );if _cbag !=5&&_cbag !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ddeb ,_dagg ,_ebac :=_agcb (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _ebac .Type ==ResultTypeError {return _ebac ;};_bead ,_ebac :=_aefb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");
if _ebac .Type ==ResultTypeError {return _ebac ;};if _bead >=_ddeb {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_aafg :=args [3].ValueNumber ;if _aafg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_ddfc :=args [4].ValueNumber ;if _ddfc <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};_cffd :=0;if _cbag ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cffd =int (args [5].ValueNumber );if !_gbaa (_cffd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");
};};_fade ,_ebac :=_baf (_bead ,_dagg ,_cffd );if _ebac .Type ==ResultTypeError {return _ebac ;};_eged ,_ebac :=_baf (_bead ,_ddeb ,_cffd );if _ebac .Type ==ResultTypeError {return _ebac ;};_eebgc ,_ebac :=_baf (_ddeb ,_dagg ,_cffd );if _ebac .Type ==ResultTypeError {return _ebac ;
};_efefe :=1+_fade *_aafg ;_efefe /=_ddfc /100+_eged *_aafg ;_efefe --;_efefe /=_eebgc ;return MakeNumberResult (_efefe );};

// Reference returns a string reference value to a sheet.
func (_abefe SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_abefe ._dgede };};func _cfdb (_fgeb ,_eed int )int {if _eed ==2&&_fbce (_fgeb ){return 29;}else {return _fe [_eed -1];};};
const _gcdf ="\u005e\u0028\u0028"+_bgge +"\u007c"+_bbc +"\u007c"+_fff +"\u007c"+_cae +"\u0029\u0020\u0029\u003f";

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_afdf :=len (args );if _afdf < 3||_afdf > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gadg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_dfgeb :=args [1].ValueNumber ;if _dfgeb !=float64 (int (_dfgeb )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_agac :=args [2].ValueNumber ;_bfgb :=0.0;if _afdf >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bfgb =args [3].ValueNumber ;};_ebaf :=0.0;if _afdf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ebaf =args [4].ValueNumber ;if _ebaf !=0{_ebaf =1;};};if _gadg ==0{return MakeNumberResult (-_agac *_dfgeb -_bfgb );}else {return MakeNumberResult ((((1-_a .Pow (1+_gadg ,_dfgeb ))/_gadg )*_agac *(1+_gadg *_ebaf )-_bfgb )/_a .Pow (1+_gadg ,_dfgeb ));
};};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fcda :=args [0].AsNumber ();if _fcda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gcfb :=float64 (1);if _fcda .ValueNumber < 0{_gcfb =-1;};if len (args )> 1{_daab :=args [1].AsNumber ();if _daab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gcfb =_a .Abs (_daab .ValueNumber );};if len (args )==1{return MakeNumberResult (_a .Ceil (_fcda .ValueNumber ));};_ddga :=_fcda .ValueNumber ;_ddga ,_aegee :=_a .Modf (_ddga /_gcfb );if _aegee !=0{if _fcda .ValueNumber > 0{_ddga ++;};};return MakeNumberResult (_ddga *_gcfb );
};type ri struct{_gecc float64 ;_facf string ;};func _begfd (_efbb ,_fbcge ,_ffcg ,_egbe float64 ,_eceg int )float64 {var _gfee float64 ;if _efbb ==0{_gfee =(_ffcg +_egbe )/_fbcge ;}else {_gcbe :=_a .Pow (1+_efbb ,_fbcge );if _eceg ==1{_gfee =(_egbe *_efbb /(_gcbe -1)+_ffcg *_efbb /(1-1/_gcbe ))/(1+_efbb );
}else {_gfee =_egbe *_efbb /(_gcbe -1)+_ffcg *_efbb /(1-1/_gcbe );};};return -_gfee ;};var _abcb =false ;func _bedfe (_agceg []Result ,_gedgf countMode )float64 {_bcfec :=0.0;for _ ,_cfcge :=range _agceg {switch _cfcge .Type {case ResultTypeNumber :if _gedgf ==_cbagb ||(_gedgf ==_edbf &&!_cfcge .IsBoolean ){_bcfec ++;
};case ResultTypeList ,ResultTypeArray :_bcfec +=_bedfe (_cfcge .ListValues (),_gedgf );case ResultTypeString :if _gedgf ==_cbagb {_bcfec ++;};case ResultTypeEmpty :if _gedgf ==_gdac {_bcfec ++;};};};return _bcfec ;};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_ecdaf ,_abea :=_gefc ("\u0046\u0049\u004e\u0044",args );if _abea .Type !=ResultTypeEmpty {return _abea ;};_ecgb :=_ecdaf ._egce ;if _ecgb ==""{return MakeNumberResult (1.0);
};_beeb :=_ecdaf ._bdff ;_bbebcg :=_ecdaf ._dffb -1;_gbff :=1;_gfgc :=0;for _fdga :=range _beeb {if _fdga !=0{_fbcb :=1;if _fdga -_gfgc > 1{_fbcb =2;};_gbff +=_fbcb ;};if _gbff > _bbebcg {_edacd :=_dc .Index (_beeb [_fdga :],_ecgb );if _edacd ==0{return MakeNumberResult (float64 (_gbff ));
};};_gfgc =_fdga ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Reference returns an invalid reference for Bool.
func (_efg Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _ccd (_cba BinOpType ,_bd []Result ,_agb Result )Result {_aed :=[]Result {};switch _agb .Type {case ResultTypeNumber :_bgca :=_agb .ValueNumber ;for _dcb :=range _bd {_bfc :=_bd [_dcb ].AsNumber ();
if _bfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _cba {case BinOpTypePlus :_aed =append (_aed ,MakeNumberResult (_bfc .ValueNumber +_bgca ));case BinOpTypeMinus :_aed =append (_aed ,MakeNumberResult (_bfc .ValueNumber -_bgca ));case BinOpTypeMult :_aed =append (_aed ,MakeNumberResult (_bfc .ValueNumber *_bgca ));
case BinOpTypeDiv :if _bgca ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_aed =append (_aed ,MakeNumberResult (_bfc .ValueNumber /_bgca ));case BinOpTypeExp :_aed =append (_aed ,MakeNumberResult (_a .Pow (_bfc .ValueNumber ,_bgca )));case BinOpTypeLT :_aed =append (_aed ,MakeBoolResult (_bfc .ValueNumber < _bgca ));
case BinOpTypeGT :_aed =append (_aed ,MakeBoolResult (_bfc .ValueNumber > _bgca ));case BinOpTypeEQ :_aed =append (_aed ,MakeBoolResult (_bfc .ValueNumber ==_bgca ));case BinOpTypeLEQ :_aed =append (_aed ,MakeBoolResult (_bfc .ValueNumber <=_bgca ));case BinOpTypeGEQ :_aed =append (_aed ,MakeBoolResult (_bfc .ValueNumber >=_bgca ));
case BinOpTypeNE :_aed =append (_aed ,MakeBoolResult (_bfc .ValueNumber !=_bgca ));default:return MakeErrorResult (_bg .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_cba ));
};};case ResultTypeString :_fc :=_agb .ValueString ;for _aa :=range _bd {_db :=_bd [_aa ].AsString ();if _db .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _cba {case BinOpTypeLT :_aed =append (_aed ,MakeBoolResult (_db .ValueString < _fc ));case BinOpTypeGT :_aed =append (_aed ,MakeBoolResult (_db .ValueString > _fc ));case BinOpTypeEQ :_aed =append (_aed ,MakeBoolResult (_db .ValueString ==_fc ));
case BinOpTypeLEQ :_aed =append (_aed ,MakeBoolResult (_db .ValueString <=_fc ));case BinOpTypeGEQ :_aed =append (_aed ,MakeBoolResult (_db .ValueString >=_fc ));case BinOpTypeNE :_aed =append (_aed ,MakeBoolResult (_db .ValueString !=_fc ));default:return MakeErrorResult (_bg .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_cba ));
};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");
};return MakeListResult (_aed );};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ecfg :=args [0].AsNumber ();_dceab :=args [1].AsNumber ();_ebbe :=args [2].AsNumber ();_egef :=args [3].ListValues ();if _ecfg .Type !=ResultTypeNumber ||_dceab .Type !=ResultTypeNumber ||_ebbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_cdgb :=float64 (0);for _accbd ,_acef :=range _egef {_cdgb +=_acef .ValueNumber *_a .Pow (_ecfg .ValueNumber ,_dceab .ValueNumber +float64 (_accbd )*_ebbe .ValueNumber );};return MakeNumberResult (_cdgb );};var _egag ,_adbef ,_cfce ,_bdeb ,_bfca ,_aegb ,_cgdd ,_deef ,_bgagge ,_faebcd ,_dfbbb ,_ffgd ,_egfac ,_egaf ,_aadf *_g .Regexp ;


// Eval evaluates and returns the result of a constant array expression.
func (_aea ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_ga :=[][]Result {};for _ ,_cecf :=range _aea ._efea {_def :=[]Result {};for _ ,_cd :=range _cecf {_def =append (_def ,_cd .Eval (ctx ,ev ));};_ga =append (_ga ,_def );};return MakeArrayResult (_ga );
};func _cbdf (_dcffb ,_ebg ,_fdg int )int {if _dcffb > _ebg {return 0;};if _afgb (_fdg ){return (_ebg -_dcffb +1)*360;};_gdb :=0;for _degd :=_dcffb ;_degd <=_ebg ;_degd ++{_fbb :=365;if _fbce (_degd ){_fbb =366;};_gdb +=_fbb ;};return _gdb ;};

// Bool is a boolean expression.
type Bool struct{_aab bool };

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type !=ResultTypeString );};func _dadae (_gecb Context ,_egcb ,_abfa string )(string ,string ){_ddaa :=_egcb +"\u0031";_gaegf :=_gecb .LastRow (_egcb );_cfcf :=_abfa +_ee .Itoa (_gaegf );return _ddaa ,_cfcf ;};var _fcgcf =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };


// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bgcfg :=args [0];_fefd :=args [1];if _fefd .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_afde :=args [2].AsNumber ();if _afde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dgcfe :=false ;if len (args )==4{_eeaae :=args [3].AsNumber ();if _eeaae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _eeaae .ValueNumber ==0{_dgcfe =true ;};};_badg :=-1;_egfc :=false ;if len (_fefd .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");
};_ddag :=_fefd .ValueArray [0];_dcdd :for _dbbf ,_adcbb :=range _ddag {switch _baeg (_adcbb ,_bgcfg ,false ,_dgcfe ){case _dcfa :_badg =_dbbf ;case _bafef :_badg =_dbbf ;_egfc =true ;break _dcdd ;};};if _badg ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_ecee :=int (_afde .ValueNumber )-1;if _ecee < 0||_ecee > len (_fefd .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_ddag =_fefd .ValueArray [_ecee ];
if _badg < 0||_badg >=len (_ddag ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _egfc ||!_dgcfe {return _ddag [_badg ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};var _fddg =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};


// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_bbef ,_bfec Expression };

// Update updates references in the BinaryExpr after removing a row/column.
func (_ff BinaryExpr )Update (q *_af .UpdateQuery )Expression {_eef :=_ff ;_eef ._eg =_ff ._eg .Update (q );_eef ._ec =_ff ._ec .Update (q );return _eef ;};type rmode byte ;const _cca ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";


// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_fddbd ,_ffa :=_bfcgb (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _ffa .Type ==ResultTypeError {return _ffa ;};return MakeNumberResult (_gcb (_fddbd ._eedbc ,_fddbd ._bfb ,_fddbd ._gddd ,_fddbd ._gegg ));
};func _aeca (_dee string ,_bb *_af .UpdateQuery )string {_dbe ,_aeb :=_fb .ParseCellReference (_dee );if _aeb !=nil {return "\u0023\u0052\u0045F\u0021";};if _bb .UpdateType ==_af .UpdateActionRemoveColumn {_bfdd :=_bb .ColumnIdx ;_eeg :=_dbe .ColumnIdx ;
if _eeg < _bfdd {return _dee ;}else if _eeg ==_bfdd {return "\u0023\u0052\u0045F\u0021";}else {return _dbe .Update (_af .UpdateActionRemoveColumn ).String ();};};return _dee ;};func _abdf (_dgdg string ,_fbcdc _bc .Time )(_bc .Time ,error ){_gecg ,_ ,_eeaad :=_e .ParseFloat (_dgdg ,10,128,_e .ToNearestEven );
if _eeaad !=nil {return _bc .Time {},_eeaad ;};_aaaag :=new (_e .Float );_aaaag .SetUint64 (uint64 (24*_bc .Hour ));_gecg .Mul (_gecg ,_aaaag );_geeb ,_ :=_gecg .Uint64 ();_cbad :=_fbcdc .Add (_bc .Duration (_geeb ));return _gfbae (_cbad ),nil ;};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_agdg :=len (args );if _agdg !=3&&_agdg !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ddeedc ,_cadgc :=_bcgg (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _cadgc .Type ==ResultTypeError {return _cadgc ;};_ggdda ,_cadgc :=_bcgg (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");
if _cadgc .Type ==ResultTypeError {return _cadgc ;};_febfg ,_cadgc :=_bcgg (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _cadgc .Type ==ResultTypeError {return _cadgc ;};
_eecg :=0;if _agdg ==3{return MakeStringResult (_dc .Replace (_ddeedc ,_ggdda ,_febfg ,-1));}else {_afff ,_cfebb :=_ebcbb (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");
if _cfebb .Type ==ResultTypeError {return _cfebb ;};_eecg =int (_afff );if _eecg < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");
};_dccb :=_ddeedc ;_cbee :=_eecg ;_cbgae :=-1;_eddcb :=len (_ggdda );_afcd :=0;for {_cbee --;_eecfg :=_dc .Index (_dccb ,_ggdda );if _eecfg ==-1{_cbgae =-1;break ;}else {_cbgae =_eecfg +_afcd ;if _cbee ==0{break ;};_fggef :=_eddcb +_eecfg ;_afcd +=_fggef ;
_dccb =_dccb [_fggef :];};};if _cbgae ==-1{return MakeStringResult (_ddeedc );}else {_dgdf :=_ddeedc [:_cbgae ];_afdeg :=_ddeedc [_cbgae +_eddcb :];return MakeStringResult (_dgdf +_febfg +_afdeg );};};};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_eaddc :=args [0].AsNumber ();if _eaddc .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};if _eaddc .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};return MakeNumberResult (_eddee (_eaddc .ValueNumber ));};const _aedfd ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";


// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_ddc :=_ggfe (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _ddc .Type !=ResultTypeEmpty {return _ddc ;};_dfdf :=_effga (args );return MakeNumberResult (float64 (len (_dfdf )));};const _gaeeg =57356;
func _aabe (_fabb ,_dfefg ,_dfge ,_gda int )int {if _dfefg > _dfge {return 0;};if _afgb (_gda ){return (_dfge -_dfefg +1)*30;};_bbaa :=0;for _effe :=_dfefg ;_effe <=_dfge ;_effe ++{_bbaa +=_cfdb (_fabb ,_effe );};return _bbaa ;};type parsedReplaceObject struct{_cfbbg string ;
_fggefb int ;_gdcc int ;_ecdca string ;};

// String returns a string representation of a vertical range with prefix.
func (_gdddc PrefixVerticalRange )String ()string {return _bg .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gdddc ._adac .String (),_gdddc ._feffc ,_gdddc ._gdeed );};

// GetLocked returns FALSE for the invalid reference context.
func (_cfca *ivr )GetLocked (cellRef string )bool {return false };

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_cccd :=args [0].AsNumber ();_cccag :=args [1].AsNumber ();if _cccd .Type !=ResultTypeNumber ||_cccag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};if _cccag .ValueNumber < _cccd .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");
};_ded :=int64 (_cccd .ValueNumber );_egcfb :=int64 (_cccag .ValueNumber );return MakeNumberResult (float64 (_facc .Int63n (_egcfb -_ded +1)+_ded ));};

// String returns a string representation for Negate.
func (_adaf Negate )String ()string {return "\u002d"+_adaf ._bfbeb .String ()};var _efeag =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};
var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };var _adc int64 =_afbga (1900,_bc .January ,1);

// Reference returns a string reference value to a range with prefix.
func (_gfca PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_addef :=_gfca ._dcfd .Reference (ctx ,ev );_aaede :=_gfca ._ddgcg .Reference (ctx ,ev );_bcacg :=_gfca ._gfeeb .Reference (ctx ,ev );if _addef .Type ==ReferenceTypeSheet &&_aaede .Type ==ReferenceTypeCell &&_bcacg .Type ==ReferenceTypeCell {return MakeRangeReference (_dabeb (_addef ,_aaede ,_bcacg ));
};return ReferenceInvalid ;};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_bedfe (args ,_gdac ));};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_ecba :=args [0].AsString ();if _ecba .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_ebdb :=args [1].AsNumber ();if _ebdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _ebdb .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");
};if _ebdb .ValueNumber ==0{return MakeStringResult ("");};_gdaac :=_be .Buffer {};for _dfda :=0;_dfda < int (_ebdb .ValueNumber );_dfda ++{_gdaac .WriteString (_ecba .ValueString );};return MakeStringResult (_gdaac .String ());};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _cegf (args ,_ffde )};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_aagcg :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");
};_aeaa :=args [1].ValueNumber !=0;_cddad :=_fccdd (args [2:],[]string {},_aeaa );return MakeStringResult (_dc .Join (_cddad ,_aagcg ));};var _bgb Result =MakeEmptyResult ();func _fdde (_cfdbf ,_bega int )int {switch _bega {case 1:if _fbce (_cfdbf ){return 366;
}else {return 365;};case 3:return 365;default:return 360;};};func _eddee (_abdgf float64 )float64 {_ccef :=float64 (1);for _dcgag :=float64 (2);_dcgag <=_abdgf ;_dcgag ++{_ccef *=_dcgag ;};return _ccef ;};func _aabf (_cbff yyLexer )int {return _fgegb ().Parse (_cbff )};


// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gedb :=true ;for _ ,_fdgca :=range args {_fdgca =_fdgca .AsNumber ();switch _fdgca .Type {case ResultTypeList ,ResultTypeArray :_abdg :=And (_fdgca .ListValues ());if _abdg .Type ==ResultTypeError {return _abdg ;};if _abdg .ValueNumber ==0{_gedb =false ;
};case ResultTypeNumber :if _fdgca .ValueNumber ==0{_gedb =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
case ResultTypeError :return _fdgca ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");
};};return MakeBoolResult (_gedb );};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );
RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );
RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );
RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );
RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );
RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );
RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );
RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );
RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );
RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );
RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );
RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );
RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};const _fdfg =57357;func _dgbe (_eddfc ,_gfaab []float64 ,_fbe float64 )float64 {_cgge :=_fbe +1;
_cfebf :=_eddfc [0];_bgfg :=len (_eddfc );_bgbag :=_gfaab [0];for _fgad :=1;_fgad < _bgfg ;_fgad ++{_cfebf +=_eddfc [_fgad ]/_a .Pow (_cgge ,(_gfaab [_fgad ]-_bgbag )/365);};return _cfebf ;};const (_edbf countMode =iota ;_cbagb ;_gdac ;);func _gaa (_dfa ,_dgfg ,_gabf float64 )float64 {return (_dfa *3600+_dgfg *60+_gabf )/86400};
const _fgfd ="\u0028\u0020\u0028"+_bef +"\u007c"+_cedg +"\u007c"+_gdc +"\u007c"+_eaf +"\u0029\u0029\u003f\u0024";

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_fgda ,_cdbd ,_geaf :=_fedb (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _geaf .Type ==ResultTypeError {return _geaf ;};if _cdbd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _fgda ==0{return MakeNumberResult (0);};_bag :=_fgda < 0;if _bag {_fgda =-_fgda ;};_dgcg :=float64 (int (_fgda ));_bce :=args [0].Value ();_acaa :=_dc .Split (_bce ,"\u002e");_dffc :=0.0;if len (_acaa )> 1{var _gde error ;_cgae :=_acaa [1];_dffc ,_gde =_ee .ParseFloat (_cgae ,64);
if _gde !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");
};_ccac :=float64 (len (_cgae ));_dffc /=_a .Pow (10,_ccac );};_aggd :=_dffc *_cdbd /_a .Pow (10,float64 (int (_a .Log10 (_cdbd )))+1)+_dgcg ;if _bag {_aggd =-_aggd ;};return MakeNumberResult (_aggd );};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ecbd :=args [0].Ref ;
if _ecbd .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");
};_bbcg ,_cfgag :=_fb .ParseCellReference (_ecbd .Value );if _cfgag !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ecbd .Value );};return MakeNumberResult (float64 (_bbcg .ColumnIdx +1));
};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_bdaa ,_dgfc :=_gefc ("\u0046\u0049\u004e\u0044",args );if _dgfc .Type !=ResultTypeEmpty {return _dgfc ;};_cgac :=_dc .ToLower (_bdaa ._egce );_eafgf :=_dc .ToLower (_bdaa ._bdff );
if _cgac ==""{return MakeNumberResult (1.0);};_acfg :=_bdaa ._dffb -1;_agcce :=1;_cfgfe :=0;for _ecdgc :=range _eafgf {if _ecdgc !=0{_accge :=1;if _ecdgc -_cfgfe > 1{_accge =2;};_agcce +=_accge ;};if _agcce > _acfg {_abgdg :=_f .Index (_cgac ,_eafgf [_ecdgc :]);
if _abgdg ==0{return MakeNumberResult (float64 (_agcce ));};};_cfgfe =_ecdgc ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};const _ddcg int =30;

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_efed ,_bffc :=_fgeg (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _bffc .Type ==ResultTypeError {return _bffc ;};_gfac :=_efed ._bfbe ;_efebe :=_efed ._cafec ;_bdec :=_efed ._faa ;_bddd :=_efed ._ddgg ;
_dggc :=_efed ._dcgb ;_agdb :=_efed ._bae ;_faeb :=_efed ._cabf ;_agcd ,_gdae :=_baf (_efebe ,_bdec ,_faeb );if _gdae .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");
};_bebc :=_agcd *_agdb *_gfac ;if _dggc ==0{return MakeNumberResult (_bebc );};_cggcg :=_gfac *_agdb ;_gcec :=_gfac -_bddd ;_fgecb :=int ((_gcec -_bebc )/_cggcg );if _dggc <=_fgecb {return MakeNumberResult (_cggcg );}else if _dggc ==_fgecb +1{return MakeNumberResult (_gcec -_cggcg *float64 (_fgecb )-_bebc );
}else {return MakeNumberResult (0);};};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_ccdff ,_dfff :=_gefc ("\u0046\u0049\u004e\u0044",args );if _dfff .Type !=ResultTypeEmpty {return _dfff ;};_fabca :=_dc .ToLower (_ccdff ._egce );if _fabca ==""{return MakeNumberResult (1.0);};_ggaf :=_dc .ToLower (_ccdff ._bdff );
_aagd :=_ccdff ._dffb ;_gggeb :=1;for _gccbb :=range _ggaf {if _gggeb < _aagd {_gggeb ++;continue ;};_eaeee :=_f .Index (_fabca ,_ggaf [_gccbb :]);if _eaeee ==0{return MakeNumberResult (float64 (_gggeb ));};_gggeb ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};type noCache struct{};func _fgb (_edgg ,_bgd int64 )float64 {return float64 (int (0.5+float64 ((_bgd -_edgg )/86400)))};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_bdcfb HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_adgad :=_bdcfb .horizontalRangeReference ();if _bgaeg ,_edggc :=ev .GetFromCache (_adgad );_edggc {return _bgaeg ;};_ggbdg ,_dbda :=_efeab (ctx ,_bdcfb ._fddf ,_bdcfb ._gccbd );_bdfd :=_cabcgf (ctx ,ev ,_ggbdg ,_dbda );
ev .SetCache (_adgad ,_bdfd );return _bdfd ;};

// Update updates references in the Range after removing a row/column.
func (_fdec Range )Update (q *_af .UpdateQuery )Expression {_dabga :=_fdec ;if q .UpdateCurrentSheet {_dabga ._bbef =_fdec ._bbef .Update (q );_dabga ._bfec =_fdec ._bfec .Update (q );};return _dabga ;};func _gcag (_gfbb Result ,_egfb *criteriaParsed )bool {_eefb :=_dc .ToLower (_gfbb .ValueString );
_dggbg :=_egfb ._dfcf ._adag ;_gdgcf :=_egfb ._dfcf ._fdeeg ;if _dggbg ==_gdeef {return _eefb ==_gdgcf ||_f .Match (_gdgcf ,_eefb );};if _gfbb .Type !=ResultTypeEmpty {if _eefb ==_egfb ._gggd ||_f .Match (_egfb ._gggd ,_eefb ){return true ;};if _ ,_fabcf :=_ee .ParseFloat (_gdgcf ,64);
_fabcf ==nil {return false ;};switch _dggbg {case _bdbb :return _eefb <=_gdgcf ;case _gdgff :return _eefb >=_gdgcf ;case _efae :return _eefb < _gdgcf ;case _dcbbb :return _eefb > _gdgcf ;};};return false ;};var _cecbf []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
var _degaef =[...]uint8 {0,20,37,60,78,96};

// Negate is a negate expression like -A1.
type Negate struct{_bfbeb Expression };func _gggee (_aeaffe ,_gbega []string )[]string {for _ ,_afcf :=range _gbega {_aeaffe =append (_aeaffe ,_afcf );};return _aeaffe ;};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bgfec :=args [0].Type ;for _ ,_dggcf :=range args {if _dggcf .Type !=_bgfec {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");
};};switch _bgfec {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_ccbec :=len (args [0].ListValues ());_gcaed :=make ([]float64 ,_ccbec );for _fdfa :=range _gcaed {_gcaed [_fdfa ]=1.0;};for _ ,_eabg :=range args {if len (_eabg .ListValues ())!=_ccbec {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");
};for _fdadg ,_bfebf :=range _eabg .ListValues (){_bfebf =_bfebf .AsNumber ();if _bfebf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");
};_gcaed [_fdadg ]=_gcaed [_fdadg ]*_bfebf .ValueNumber ;};};_facg :=0.0;for _ ,_efcd :=range _gcaed {_facg +=_efcd ;};return MakeNumberResult (_facg );};return MakeNumberResult (1.0);};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_dcbb ,_edbg :=_bfcgb (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _edbg .Type ==ResultTypeError {return _edbg ;};_bcbaa :=_dgfe (_dcbb ._eedbc );_egfa :=_dgfe (_dcbb ._bfb );_fefb :=_dcbb ._gddd ;_fce :=_dcbb ._gegg ;
_gebd :=_efge (_bcbaa ,_egfa ,_fefb ,_fce );_bedff ,_cbaf ,_cfff :=_gebd .Date ();return MakeNumberResult (_defge (_bedff ,int (_cbaf ),_cfff ));};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_faedb :=len (args );if _faedb !=4&&_faedb !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_aefd ,_cgca ,_ddbd :=_agcb (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _ddbd .Type ==ResultTypeError {return _ddbd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbfe :=args [2].ValueNumber ;if _fbfe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_gdbdb :=args [3].ValueNumber ;if _gdbdb <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_gbdg :=0;if _faedb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gbdg =int (args [4].ValueNumber );if !_gbaa (_gbdg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");
};};_ccbeg ,_ddbd :=_baf (_aefd ,_cgca ,_gbdg );if _ddbd .Type ==ResultTypeError {return _ddbd ;};return MakeNumberResult ((_gdbdb /_fbfe -1)/_ccbeg );};

// Eval evaluates and returns the result of the cell reference.
func (_ecf CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_ecf ._ca ,ev )};const _edbag =57348;const _cdcc =57378;

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_abdfb :=args [0].AsNumber ();
if _abdfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fba :=args [1].AsNumber ();if _fba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ffagc :=int (_fba .ValueNumber );if _ffagc < 0||_ffagc > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");
};_fadd :=0;if len (args )> 2{_dggeg :=args [2].AsNumber ();if _dggeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fadd =int (_dggeg .ValueNumber );};_ffcb :=_ee .FormatInt (int64 (_abdfb .ValueNumber ),_ffagc );if len (_ffcb )< _fadd {_ffcb =_dc .Repeat ("\u0030",_fadd -len (_ffcb ))+_ffcb ;};return MakeStringResult (_ffcb );};type amorArgs struct{_bfbe float64 ;
_cafec float64 ;_faa float64 ;_ddgg float64 ;_dcgb int ;_bae float64 ;_cabf int ;};func (_acbd ReferenceType )String ()string {if _acbd >=ReferenceType (len (_degaef )-1){return _bg .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_acbd );
};return _aedfd [_degaef [_acbd ]:_degaef [_acbd +1]];};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gcgce :=args [0].AsString ();if _gcgce .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};if len (_gcgce .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_gcgce .ValueString [0]));};func (_eeb *defEval )checkLastEvalIsRef (_cedd Context ,_cdb Expression ){switch _cdb .(type ){case FunctionCall :switch _cdb .(FunctionCall )._accc {case "\u0049\u0053\u0052E\u0046":for _ ,_bba :=range _cdb .(FunctionCall )._cega {switch _bba .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_cfdg :=_bba .Eval (_cedd ,_eeb );
_eeb ._dbg =!(_cfdg .Type ==ResultTypeError &&_cfdg .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_eeb ._dbg =false ;};};};};};type durationArgs struct{_aee float64 ;_eeea float64 ;_eabd float64 ;_fdca float64 ;_bbaad float64 ;_dcgg int ;
};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_bfdb :=len (args );if _bfdb !=4&&_bfdb !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_fbdb ,_gedc ,_acgf :=_agcb (args [0],args [1],"\u0044\u0049\u0053\u0043");if _acgf .Type ==ResultTypeError {return _acgf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_caea :=args [2].ValueNumber ;if _caea <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eaae :=args [3].ValueNumber ;if _eaae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ddec :=0;if _bfdb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ddec =int (args [4].ValueNumber );if !_gbaa (_ddec ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");
};};_gebf ,_acgf :=_baf (_fbdb ,_gedc ,_ddec );if _acgf .Type ==ResultTypeError {return _acgf ;};return MakeNumberResult ((_eaae -_caea )/_eaae /_gebf );};func _cecfa (_gdgf ,_bffd ,_bda ,_agdbf float64 ,_dfba int )float64 {var _bbfb float64 ;if _gdgf ==0{_bbfb =_agdbf +_bda *_bffd ;
}else {_dadeb :=_a .Pow (1+_gdgf ,_bffd );if _dfba ==1{_bbfb =_agdbf *_dadeb +_bda *(1+_gdgf )*(_dadeb -1)/_gdgf ;}else {_bbfb =_agdbf *_dadeb +_bda *(_dadeb -1)/_gdgf ;};};return -_bbfb ;};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_cbce ,_eadg ,_bgfe :=_agcb (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _bgfe .Type ==ResultTypeError {return _bgfe ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aecc :=_eadg -_cbce ;if _aecc > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_bdcc :=args [2].ValueNumber ;if _bdcc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (100*(1-_bdcc *_aecc /360));};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_afga :=len (args );if _afga !=4&&_afga !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bfcgba ,_cdcb ,_ddeg :=_agcb (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _ddeg .Type ==ResultTypeError {return _ddeg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_eaea :=args [2].ValueNumber ;if _eaea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_gac :=args [3].ValueNumber ;if _gac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};_dfdg :=0;if _afga ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_dfdg =int (args [4].ValueNumber );if !_gbaa (_dfdg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");
};};_abbe ,_ddeg :=_baf (_bfcgba ,_cdcb ,_dfdg );if _ddeg .Type ==ResultTypeError {return _ddeg ;};return MakeNumberResult ((_gac -_eaea )/_eaea /_abbe );};const (_bafef cmpResult =0;_dcfa cmpResult =-1;_cbbaa cmpResult =1;_eede cmpResult =2;);

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eadga :=args [0];if _eadga .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cafc :=len (_eadga .ValueArray );for _ ,_bdbf :=range _eadga .ValueArray {if len (_bdbf )!=_cafc {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");
};};return MakeNumberResult (_ggge (_eadga .ValueArray ));};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_a .Pi );};const _ddce =57359;
func _dfb (_bcg Result )bool {if _bcg .Type ==ResultTypeString {return _bcg .ValueString =="";};return _bcg .ValueNumber ==0;};var _cfa =[]*_g .Regexp {};

// Reference returns an invalid reference for String.
func (_gfbeb String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func (_fddeb node )String ()string {return _bg .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_fddeb ._aaeaf ,_gbaad (string (_fddeb ._baec )));};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgbg :=args [0].ValueNumber ;if _fgbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ecfb :=args [1].ValueNumber ;if _ecfb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfbb :=args [2].ValueNumber ;if _cfbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");
};return MakeNumberResult (_a .Pow (_cfbb /_ecfb ,1/_fgbg )-1);};func _fbce (_fbcd int )bool {if _fbcd ==_fbcd /400*400{return true ;};if _fbcd ==_fbcd /100*100{return false ;};return _fbcd ==_fbcd /4*4;};var _eadf =[...]int {0};const _cae ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_aecf +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";
const _fcaed =57362;type plex struct{_ccab chan *node ;_cfbbe Expression ;_fbgf string ;};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_fbff :=MakeNumberResult (0);for _ ,_ccfg :=range args {_ccfg =_ccfg .AsNumber ();switch _ccfg .Type {case ResultTypeNumber :_fbff .ValueNumber +=_ccfg .ValueNumber *_ccfg .ValueNumber ;case ResultTypeList ,ResultTypeArray :_bdece :=SumSquares (_ccfg .ListValues ());
if _bdece .Type !=ResultTypeNumber {return _bdece ;};_fbff .ValueNumber +=_bdece .ValueNumber ;case ResultTypeString :case ResultTypeError :return _ccfg ;case ResultTypeEmpty :default:return MakeErrorResult (_bg .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_ccfg .Type ));
};};return _fbff ;};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_bgbe :=len (args );if _bgbe !=6&&_bgbe !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ace ,_fdad ,_bdf :=_agcb (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _bdf .Type ==ResultTypeError {return _bdf ;};_gadbd :=args [2];if _gadbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bebe :=_gadbd .ValueNumber ;if _bebe < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_gcgc :=args [3];if _gcgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fgcf :=_gcgc .ValueNumber ;if _fgcf <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_aag :=args [4];if _aag .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_ecdg :=_aag .ValueNumber ;if _ecdg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_ffee :=args [5];
if _ffee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_debgb :=float64 (int (_ffee .ValueNumber ));if !_ecg (_debgb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_faebc :=0;if _bgbe ==7&&args [6].Type !=ResultTypeEmpty {_eaggf :=args [6];
if _eaggf .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_faebc =int (_eaggf .ValueNumber );
if !_gbaa (_faebc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_cagd :=0.0;
_bad :=0.0;_fcdd :=1.0;_cfabe ,_bdf :=_ffbb (_ace ,_fdad ,_bebe ,_bad ,_ecdg ,_debgb ,_faebc );if _bdf .Type ==ResultTypeError {return _bdf ;};_cgbg ,_bdf :=_ffbb (_ace ,_fdad ,_bebe ,_fcdd ,_ecdg ,_debgb ,_faebc );if _bdf .Type ==ResultTypeError {return _bdf ;
};_cdga :=(_fcdd -_bad )*0.5;for _caed :=0;_caed < 100&&_cagd !=_fgcf ;_caed ++{_cagd ,_bdf =_ffbb (_ace ,_fdad ,_bebe ,_cdga ,_ecdg ,_debgb ,_faebc );if _bdf .Type ==ResultTypeError {return _bdf ;};if _fgcf ==_cfabe {return MakeNumberResult (_bad );}else if _fgcf ==_cgbg {return MakeNumberResult (_fcdd );
}else if _fgcf ==_cagd {return MakeNumberResult (_cdga );}else if _fgcf < _cgbg {_fcdd *=2.0;_cgbg ,_bdf =_ffbb (_ace ,_fdad ,_bebe ,_fcdd ,_ecdg ,_debgb ,_faebc );if _bdf .Type ==ResultTypeError {return _bdf ;};_cdga =(_fcdd -_bad )*0.5;}else {if _fgcf < _cagd {_bad =_cdga ;
_cfabe =_cagd ;}else {_fcdd =_cdga ;_cgbg =_cagd ;};_cdga =_fcdd -(_fcdd -_bad )*((_fgcf -_cgbg )/(_cfabe -_cgbg ));};};return MakeNumberResult (_cdga );};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_bdg :=len (args );if _bdg !=4&&_bdg !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_gdcf ,_bdda :=_aefb (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _bdda .Type ==ResultTypeError {return _bdda ;};_befd ,_bdda :=_aefb (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");
if _bdda .Type ==ResultTypeError {return _bdda ;};if _gdcf >=_befd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_fafc :=args [2].ValueNumber ;if _fafc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egb :=args [3].ValueNumber ;if _egb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecd :=0;if _bdg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecd =int (args [4].ValueNumber );if !_gbaa (_ecd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");
};};_bebdb ,_bdda :=_baf (_gdcf ,_befd ,_ecd );if _bdda .Type ==ResultTypeError {return _bdda ;};return MakeNumberResult (_egb *_fafc *_bebdb );};func _begd (){_egag =_g .MustCompile ("\u005e\u0030\u002b\u0024");_cfce =_g .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");
_bdeb =_g .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_adbef =_g .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_bfca =_g .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");
_aegb =_g .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_cgdd =_g .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");
_bgagge =_g .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_faebcd =_g .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");
_dfbbb =_g .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");
_ffgd =_g .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");
_egfac =_g .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_fdbc +_fdbc +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_fdbc +_fdbc +"\u0029\u002b\u0059+\u0024");_egaf =_g .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_fdbc +_fdbc +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_fdbc +_fdbc +"\u0029\u002b\u0059+\u0024");
_aadf =_g .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_deef =_g .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");
};var _facc *_df .Rand ;func _fag (_ag BinOpType ,_cge [][]Result ,_eff Result )Result {_eab :=[][]Result {};for _ab :=range _cge {_bcf :=_ccd (_ag ,_cge [_ab ],_eff );if _bcf .Type ==ResultTypeError {return _bcf ;};_eab =append (_eab ,_bcf .ValueList );
};return MakeArrayResult (_eab );};

// Error is an error expression.
type Error struct{_cab string };var _bbea _ef .Mutex ;func _cfdd (_fdefd ,_cfb _bc .Time ,_fdac int )_bc .Time {_fceg :=_bc .Date (_fdefd .Year (),_cfb .Month (),_cfb .Day (),0,0,0,0,_bc .UTC );if _fceg .After (_fdefd ){_fceg =_fceg .AddDate (-1,0,0);};
for !_fceg .After (_fdefd ){_fceg =_fceg .AddDate (0,12/_fdac ,0);};return _fceg ;};

// Reference returns an invalid reference for Error.
func (_acb Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ccdb ,_ade ,_begb :=_agcb (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _begb .Type ==ResultTypeError {return _begb ;};_agce ,_begb :=_aefb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _begb .Type ==ResultTypeError {return _begb ;};if _agce >=_ccdb {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dfag :=args [3].ValueNumber ;if _dfag < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_efcg :=args [4].ValueNumber ;if _efcg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_dfgfg :=args [5].ValueNumber ;if _dfgfg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dfec :=float64 (int (args [6].ValueNumber ));if !_ecg (_dfec ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gbaf :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gbaf =int (args [7].ValueNumber );if !_gbaa (_gbaf ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");
};};_fbdg ,_begb :=_baf (_agce ,_ade ,_gbaf );if _begb .Type ==ResultTypeError {return _begb ;};_fbdg *=_dfec ;_bcaga ,_begb :=_baf (_ccdb ,_ade ,_gbaf );if _begb .Type ==ResultTypeError {return _begb ;};_bcaga *=_dfec ;_gcad ,_begb :=_baf (_agce ,_ccdb ,_gbaf );
if _begb .Type ==ResultTypeError {return _begb ;};_gcad *=_dfec ;_abfb :=_dfgfg +_fbdg *100*_dfag /_dfec ;_abfb /=_efcg +_gcad *100*_dfag /_dfec ;_abfb --;_abfb *=_dfec /_bcaga ;return MakeNumberResult (_abfb );};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_gdaef :=len (args );if _gdaef !=2&&_gdaef !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_eece ,_addd :=_egac (args [0],args [1],"\u0058\u0049\u0052\u0052");if _addd .Type ==ResultTypeError {return _addd ;};_fgcg :=_eece ._adf ;_efec :=_eece ._dgcf ;_ddgf :=0.1;if _gdaef ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ddgf =args [2].ValueNumber ;if _ddgf <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");
};};return _dcaf (_fgcg ,_efec ,_ddgf );};func (_debd Result )String ()string {return _debd .Value ()};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_faabb :=_ggfe (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _faabb .Type !=ResultTypeEmpty {return _faabb ;};_bcgde :=_effga (args [1:]);_afaf :=_a .MaxFloat64 ;_cfeg :=_ggbe (args [0]);for _ ,_aegg :=range _bcgde {_ecadd :=_cfeg [_aegg ._ecfac ][_aegg ._aged ].ValueNumber ;
if _afaf > _ecadd {_afaf =_ecadd ;};};if _afaf ==_a .MaxFloat64 {_afaf =0;};return MakeNumberResult (float64 (_afaf ));};

// String returns an empty string for EmptyExpr.
func (_edd EmptyExpr )String ()string {return ""};

// Reference returns a string reference value to a horizontal range.
func (_feec HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_feec .horizontalRangeReference ()};};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_eaed :=args [0].AsNumber ();
_eggbb :=args [1].AsNumber ();if _eaed .Type !=ResultTypeNumber ||_eggbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};if _eggbb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_ddee ,_ggaa :=_a .Modf (_eaed .ValueNumber /_eggbb .ValueNumber );if _ggaa < 0{_ddee --;
};return MakeNumberResult (_eaed .ValueNumber -_eggbb .ValueNumber *_ddee );};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_adfc ,_eeagd :=_bgcg (args ,true );if _eeagd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_adfc /_eeagd );};func (_daaf *Lexer )nextRaw ()*node {for len (_daaf ._adae )!=0{_cbffg :=<-_daaf ._adae [len (_daaf ._adae )-1];if _cbffg !=nil {return _cbffg ;};_daaf ._adae =_daaf ._adae [0:len (_daaf ._adae )-1];};return <-_daaf ._bfbb ;
};

// GetWidth returns 0 for the invalid reference context.
func (_eacbg *ivr )GetWidth (colIdx int )float64 {return float64 (0)};const _egdf =16;func _fggeg (_fagf ,_beac Reference )string {return _bg .Sprintf ("\u0025\u0073\u003a%\u0073",_fagf .Value ,_beac .Value );};func _gbgb (_bdab string )*criteriaRegex {_edcbc :=&criteriaRegex {};
if _bdab ==""{return _edcbc ;};if _dgdc :=_dgaa .FindStringSubmatch (_bdab );len (_dgdc )> 1{_edcbc ._adag =_gdeef ;_edcbc ._fdeeg =_dgdc [1];}else if _aaae :=_dffd .FindStringSubmatch (_bdab );len (_aaae )> 1{_edcbc ._adag =_gdeef ;_edcbc ._fdeeg =_aaae [1];
}else if _cgaa :=_cafac .FindStringSubmatch (_bdab );len (_cgaa )> 1{_edcbc ._adag =_bdbb ;_edcbc ._fdeeg =_cgaa [1];}else if _gead :=_gdef .FindStringSubmatch (_bdab );len (_gead )> 1{_edcbc ._adag =_gdgff ;_edcbc ._fdeeg =_gead [1];}else if _fccg :=_agbe .FindStringSubmatch (_bdab );
len (_fccg )> 1{_edcbc ._adag =_efae ;_edcbc ._fdeeg =_fccg [1];}else if _fdeb :=_eeca .FindStringSubmatch (_bdab );len (_fdeb )> 1{_edcbc ._adag =_dcbbb ;_edcbc ._fdeeg =_fdeb [1];};return _edcbc ;};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_facc .Float64 ());
};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_gbce :=args [0].AsNumber ();if _gbce .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_eebdb :=10.0;if len (args )> 1{_decce :=args [1].AsNumber ();if _decce .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");
};_eebdb =args [1].ValueNumber ;};if _gbce .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");
};if _eebdb ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");
};return MakeNumberResult (_a .Log (_gbce .ValueNumber )/_a .Log (_eebdb ));};func _egac (_fdcbd ,_dccdd Result ,_daec string )(*xargs ,Result ){if _fdcbd .Type !=ResultTypeList &&_fdcbd .Type !=ResultTypeArray {return nil ,MakeErrorResult (_daec +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_ebfb :=_ggbe (_fdcbd );_bbdb :=[]float64 {};for _ ,_fafed :=range _ebfb {for _ ,_fedec :=range _fafed {if _fedec .Type ==ResultTypeNumber &&!_fedec .IsBoolean {_bbdb =append (_bbdb ,_fedec .ValueNumber );}else {return nil ,MakeErrorResult (_daec +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");
};};};_aaaa :=len (_bbdb );if len (_bbdb )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _dccdd .Type !=ResultTypeList &&_dccdd .Type !=ResultTypeArray {return nil ,MakeErrorResult (_daec +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_dabd :=_ggbe (_dccdd );_bgcab :=[]float64 {};_gbdc :=0.0;for _ ,_fbdgb :=range _dabd {for _ ,_cebc :=range _fbdgb {if _cebc .Type ==ResultTypeNumber &&!_cebc .IsBoolean {_abad :=float64 (int (_cebc .ValueNumber ));if _abad < _gbdc {return nil ,MakeErrorResultType (ErrorTypeNum ,_daec +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");
};_bgcab =append (_bgcab ,_abad );_gbdc =_abad ;}else {return nil ,MakeErrorResult (_daec +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_bgcab )!=_aaaa {return nil ,MakeErrorResultType (ErrorTypeNum ,"");
};return &xargs {_bbdb ,_bgcab },MakeEmptyResult ();};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_bbea .Lock ();defer _bbea .Unlock ();if _adfa ,_acfga :=_gbgfg [name ];_acfga {return _adfa ;};return nil ;};func _fgeg (_fbbdg []Result ,_fec string )(*amorArgs ,Result ){_ffgc :=len (_fbbdg );
if _ffgc !=6&&_ffgc !=7{return nil ,MakeErrorResult (_fec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _fbbdg [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fec +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_bgdg :=_fbbdg [0].ValueNumber ;if _bgdg < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fec +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_gdaf ,_edbc :=_aefb (_fbbdg [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_fec );if _edbc .Type ==ResultTypeError {return nil ,_edbc ;};_eeef ,_edbc :=_aefb (_fbbdg [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_fec );
if _edbc .Type ==ResultTypeError {return nil ,_edbc ;};if _eeef < _gdaf {return nil ,MakeErrorResultType (ErrorTypeNum ,_fec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");
};if _fbbdg [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_acae :=_fbbdg [3].ValueNumber ;if _acae < 0||_acae > _bgdg {return nil ,MakeErrorResultType (ErrorTypeNum ,_fec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");
};if _fbbdg [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gcga :=int (_fbbdg [4].ValueNumber );if _gcga < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fec +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if _fbbdg [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fec +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_edbca :=_fbbdg [5].ValueNumber ;if _edbca < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fec +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");
};_faed :=0;if _ffgc ==7&&_fbbdg [6].Type !=ResultTypeEmpty {if _fbbdg [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fec +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_faed =int (_fbbdg [6].ValueNumber );if !_gbaa (_faed )||_faed ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_fec );
};};return &amorArgs {_bgdg ,_gdaf ,_eeef ,_acae ,_gcga ,_edbca ,_faed },_bgb ;};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bddb :=args [0].AsNumber ();if _bddb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_dega :=float64 (1);if _bddb .ValueNumber < 0{_dega =-1;};if len (args )> 1{_gdbc :=args [1].AsNumber ();if _gdbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dega =_gdbc .ValueNumber ;};_egeb :=float64 (1);if len (args )> 2{_aebc :=args [2].AsNumber ();if _aebc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_egeb =_aebc .ValueNumber ;};if len (args )==1{return MakeNumberResult (_a .Ceil (_bddb .ValueNumber ));};_faaac :=_bddb .ValueNumber ;_faaac ,_fabee :=_a .Modf (_faaac /_dega );if _fabee !=0{if _bddb .ValueNumber > 0{_faaac ++;}else if _egeb < 0{_faaac --;
};};return MakeNumberResult (_faaac *_dega );};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_bbea .Lock ();defer _bbea .Unlock ();if _ ,_ebfe :=_bgga [name ];_ebfe {_ed .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_bgga [name ]=fn ;};func _baeg (_acag ,_dcage Result ,_egdeg ,_bfge bool )cmpResult {_acag =_acag .AsNumber ();_dcage =_dcage .AsNumber ();if _acag .Type !=_dcage .Type {return _eede ;};if _acag .Type ==ResultTypeNumber {if _acag .ValueNumber ==_dcage .ValueNumber {return _bafef ;
};if _acag .ValueNumber < _dcage .ValueNumber {return _dcfa ;};return _cbbaa ;};if _acag .Type ==ResultTypeString {_gga :=_acag .ValueString ;_cfffe :=_dcage .ValueString ;if !_egdeg {_gga =_dc .ToLower (_gga );_cfffe =_dc .ToLower (_cfffe );};if _bfge {_gbb :=_f .Match (_cfffe ,_gga );
if _gbb {return _bafef ;}else {return _cbbaa ;};};return cmpResult (_dc .Compare (_gga ,_cfffe ));};if _acag .Type ==ResultTypeEmpty {return _bafef ;};if _acag .Type ==ResultTypeList {if len (_acag .ValueList )< len (_dcage .ValueList ){return _dcfa ;};
if len (_acag .ValueList )> len (_dcage .ValueList ){return _cbbaa ;};for _cbfb :=range _acag .ValueList {_egacg :=_baeg (_acag .ValueList [_cbfb ],_dcage .ValueList [_cbfb ],_egdeg ,_bfge );if _egacg !=_bafef {return _egacg ;};};return _bafef ;};if _acag .Type ==ResultTypeList {if len (_acag .ValueArray )< len (_dcage .ValueArray ){return _dcfa ;
};if len (_acag .ValueArray )> len (_dcage .ValueArray ){return _cbbaa ;};for _ggbd :=range _acag .ValueArray {_fafge :=_acag .ValueArray [_ggbd ];_aggf :=_acag .ValueArray [_ggbd ];if len (_fafge )< len (_aggf ){return _dcfa ;};if len (_fafge )> len (_aggf ){return _cbbaa ;
};for _bebca :=range _fafge {_gfadg :=_baeg (_fafge [_bebca ],_aggf [_bebca ],_egdeg ,_bfge );if _gfadg !=_bafef {return _gfadg ;};};};return _bafef ;};return _eede ;};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_fbbc Expression ;_bdgf ,_egec int ;};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fdgb :=args [0].AsNumber ();if _fdgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ecbdg :=args [1].AsNumber ();if _ecbdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};return MakeNumberResult (_a .Pow (_fdgb .ValueNumber ,_ecbdg .ValueNumber ));};var _cbc =map[string ]*_g .Regexp {};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );
RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );
RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );
RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};
type yyParserImpl struct{_bbfa yySymType ;_ebaae [_egdf ]yySymType ;_gaagg int ;};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};const _edbbb =57377;func (_decg *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};var _decca =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};


// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};_gccg :=args [0];if _gccg .Type !=ResultTypeArray &&_gccg .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_bgfde :=_cfdf (args [1]);_cdceg :=0;for _ ,_cadc :=range _ggbe (_gccg ){for _ ,_ccde :=range _cadc {if _aaab (_ccde ,_bgfde ){_cdceg ++;};};};return MakeNumberResult (float64 (_cdceg ));};var _gcg =map[string ]*_g .Regexp {};type parsedSearchObject struct{_egce string ;
_bdff string ;_dffb int ;};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_acaac NamedRangeRef )Update (q *_af .UpdateQuery )Expression {return _acaac };

// Reference returns a string reference value to a named range.
func (_eddca NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_eddca ._bdbc };};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_gag *defEval )LastEvalIsRef ()bool {return _gag ._dbg };

// String returns a string representation of PrefixExpr.
func (_fgabb PrefixExpr )String ()string {return _bg .Sprintf ("\u0025\u0073\u0021%\u0073",_fgabb ._fafac .String (),_fgabb ._egbba .String ());};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_bced :=len (args );if _bced < 3||_bced > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_abde :=args [0].ValueNumber ;if _abde !=float64 (int (_abde )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbgg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cegd :=args [2].ValueNumber ;_aaea :=0.0;if _bced >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_aaea =args [3].ValueNumber ;};_cced :=0.0;if _bced >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cced =args [4].ValueNumber ;if _cced !=0{_cced =1;};};_aeee :=0.1;if _bced >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aeee =args [5].ValueNumber ;};_eefg :=100;_eddb :=0;_cbgb :=false ;_cedf :=1e-6;_ccace :=_aeee ;for _eddb < _eefg &&!_cbgb {_agdd :=_a .Pow (_ccace +1,_abde );_gdbd :=_a .Pow (_ccace +1,_abde -1);_cbba :=_ccace *_cced +1;_bbgb :=_dbgg *(_agdd -1);_bfce :=_aaea +_agdd *_cegd +_bbgb *_cbba /_ccace ;
_ebe :=_abde *_gdbd *_cegd -_bbgb *_cbba /_a .Pow (_ccace ,2);_dccdc :=(_abde *_dbgg *_gdbd *_cbba +_bbgb *_cced )/_ccace ;_aegd :=_bfce /(_ebe +_dccdc );if _a .Abs (_aegd )< _cedf {_cbgb =true ;};_eddb ++;_ccace -=_aegd ;};return MakeNumberResult (_ccace );
};func _cegf (_baca []Result ,_abfbe rmode )Result {if len (_baca )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_acaec :=_baca [0].AsNumber ();if _acaec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cebca :=_baca [1].AsNumber ();if _cebca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dgead :=_cebca .ValueNumber ;_afbb :=_acaec .ValueNumber ;_eacfe :=1.0;if _dgead > 0{_eacfe =_a .Pow (1/10.0,_dgead );}else {_eacfe =_a .Pow (10.0,-_dgead );};_afbb ,_bbec :=_a .Modf (_afbb /_eacfe );switch _abfbe {case _gbdea :const _degg =0.499999999;
if _bbec >=_degg {_afbb ++;}else if _bbec <=-_degg {_afbb --;};case _dgfgc :case _ffde :if _bbec > 0{_afbb ++;}else if _bbec < 0{_afbb --;};};return MakeNumberResult (_afbb *_eacfe );};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_cfabg ,_egcf :=_fcag (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _egcf .Type ==ResultTypeError {return _egcf ;};_gagfb :=_cfabg ._fcg ;_afe :=_cfabg ._ggd ;_adccg :=_cfabg ._baa ;_agab :=_cfabg ._bgac ;_aebd :=_cfabg ._bdcf ;
_bebdfc :=_cfabg ._cecag ;_fffeb :=_begfd (_gagfb ,_afe ,_adccg ,0,_bebdfc );_acbcc :=0.0;if _agab ==1{if _bebdfc ==0{_acbcc =-_adccg ;_agab ++;};};for _aadc :=_agab ;_aadc <=_aebd ;_aadc ++{if _bebdfc ==1{_acbcc +=_cecfa (_gagfb ,_aadc -2,_fffeb ,_adccg ,1)-_fffeb ;
}else {_acbcc +=_cecfa (_gagfb ,_aadc -1,_fffeb ,_adccg ,0);};};_acbcc *=_gagfb ;return MakeNumberResult (_acbcc );};type countMode byte ;func _bbgaa (_fggd ,_fecd Expression )(Expression ,Expression ,error ){_cdeg ,_cafaa :=_fggd .(CellRef );if !_cafaa {return nil ,nil ,_c .New (_bg .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fggd .String ()));
};_fabg ,_cafaa :=_fecd .(CellRef );if !_cafaa {return nil ,nil ,_c .New (_bg .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fecd .String ()));};_fcacf ,_geebg :=_fb .ParseCellReference (_cdeg ._ca );
if _geebg !=nil {return nil ,nil ,_geebg ;};_dgafa ,_gaab :=_fb .ParseCellReference (_fabg ._ca );if _gaab !=nil {return nil ,nil ,_gaab ;};_dgdgb :=false ;if _fcacf .RowIdx > _dgafa .RowIdx {_dgdgb =true ;_fcacf .RowIdx ,_dgafa .RowIdx =_dgafa .RowIdx ,_fcacf .RowIdx ;
};if _fcacf .ColumnIdx > _dgafa .ColumnIdx {_dgdgb =true ;_fcacf .ColumnIdx ,_dgafa .ColumnIdx =_dgafa .ColumnIdx ,_fcacf .ColumnIdx ;_fcacf .Column ,_dgafa .Column =_dgafa .Column ,_fcacf .Column ;};if _dgdgb {return NewCellRef (_fcacf .String ()),NewCellRef (_dgafa .String ()),nil ;
};return _fggd ,_fecd ,nil ;};func _gfbae (_cdae _bc .Time )_bc .Time {_cdae =_cdae .UTC ();return _bc .Date (_cdae .Year (),_cdae .Month (),_cdae .Day (),_cdae .Hour (),_cdae .Minute (),_cdae .Second (),_cdae .Nanosecond (),_bc .Local );};const _fcgb =57376;
var _geaab =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};func init (){_begd ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );
RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );
RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );
RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );
RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};func NewLexer ()*Lexer {return &Lexer {_bfbb :make (chan *node )}};const _afda =57355;

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_gbdff PrefixHorizontalRange )Update (q *_af .UpdateQuery )Expression {return _gbdff };func _fedb (_fafff []Result ,_efd string )(float64 ,float64 ,Result ){if len (_fafff )!=2{return 0,0,MakeErrorResult (_efd +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _fafff [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_efd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_gcaa :=_fafff [0].ValueNumber ;if _fafff [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_efd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_feca :=float64 (int (_fafff [1].ValueNumber ));if _feca < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_efd +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");
};return _gcaa ,_feca ,_bgb ;};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_bfdfa ,_gafg :=_fgeg (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _gafg .Type ==ResultTypeError {return _gafg ;};_gbefa :=_bfdfa ._bfbe ;_ffe :=_bfdfa ._cafec ;_caff :=_bfdfa ._faa ;_dfdb :=_bfdfa ._ddgg ;
_cgda :=_bfdfa ._dcgb ;_geff :=_bfdfa ._bae ;if _geff >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");
};_bafb :=_bfdfa ._cabf ;_aege :=1.0/_geff ;_eggb :=2.5;if _aege < 3{_eggb =1;}else if _aege < 5{_eggb =1.5;}else if _aege <=6{_eggb =2;};_geff *=_eggb ;_gfaaa ,_adcf :=_baf (_ffe ,_caff ,_bafb );if _adcf .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");
};_cgcd :=_dbdc (_gfaaa *_geff *_gbefa );_gbefa -=_cgcd ;_dcea :=_gbefa -_dfdb ;for _ddbb :=0;_ddbb < _cgda ;_ddbb ++{_cgcd =_dbdc (_geff *_gbefa );_dcea -=_cgcd ;if _dcea < 0{switch _cgda -_ddbb {case 0:case 1:return MakeNumberResult (_dbdc (_gbefa *0.5));
default:return MakeNumberResult (0);};};_gbefa -=_cgcd ;};return MakeNumberResult (_cgcd );};var _afbd =[...]int {-1,1,1,-1,-2,0};

// Reference returns an invalid reference for EmptyExpr.
func (_ceg EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_baad ,_daed :=_gefc ("\u0046\u0049\u004e\u0044",args );if _daed .Type !=ResultTypeEmpty {return _daed ;};_eedee :=_baad ._egce ;if _eedee ==""{return MakeNumberResult (1.0);};_ggfcf :=_baad ._bdff ;_dfbg :=_baad ._dffb ;
_acdc :=1;for _aaba :=range _ggfcf {if _acdc < _dfbg {_acdc ++;continue ;};_aaff :=_dc .Index (_ggfcf [_aaba :],_eedee );if _aaff ==0{return MakeNumberResult (float64 (_acdc ));};_acdc ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};

// Update updates references in the VerticalRange after removing a row/column.
func (_bcfdb VerticalRange )Update (q *_af .UpdateQuery )Expression {if q .UpdateType ==_af .UpdateActionRemoveColumn {_fdgbd :=_bcfdb ;if q .UpdateCurrentSheet {_aeae :=q .ColumnIdx ;_fdgbd ._ecga =_caf (_bcfdb ._ecga ,_aeae );_fdgbd ._gccba =_caf (_bcfdb ._gccba ,_aeae );
};return _fdgbd ;};return _bcfdb ;};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_a .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};const _afee =57352;

// Eval evaluates the binary expression using the context given.
func (_dcg BinaryExpr )String ()string {_dec :="";switch _dcg ._dg {case BinOpTypePlus :_dec ="\u002b";case BinOpTypeMinus :_dec ="\u002d";case BinOpTypeMult :_dec ="\u002a";case BinOpTypeDiv :_dec ="\u002f";case BinOpTypeExp :_dec ="\u005e";case BinOpTypeLT :_dec ="\u003c";
case BinOpTypeGT :_dec ="\u003e";case BinOpTypeEQ :_dec ="\u003d";case BinOpTypeLEQ :_dec ="\u003c\u003d";case BinOpTypeGEQ :_dec ="\u003e\u003d";case BinOpTypeNE :_dec ="\u003c\u003e";case BinOpTypeConcat :_dec ="\u0026";};return _dcg ._eg .String ()+_dec +_dcg ._ec .String ();
};var _bbag =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func (_dfad HorizontalRange )horizontalRangeReference ()string {return _bg .Sprintf ("\u0025\u0064\u003a%\u0064",_dfad ._fddf ,_dfad ._gccbd );
};type evCache struct{_dab map[string ]Result ;_ged *_ef .Mutex ;};

// String returns a string representation of Number.
func (_gedab Number )String ()string {return _ee .FormatFloat (_gedab ._fbbgb ,'f',-1,64)};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bffee :=args [0].AsNumber ();if _bffee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bebb :=float64 (1);_agaa :=args [1].AsNumber ();if _agaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_bebb =_agaa .ValueNumber ;if _bebb < 0&&_bffee .ValueNumber > 0||_bebb > 0&&_bffee .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");
};_dcbg :=_bffee .ValueNumber ;_dcbg ,_dbce :=_a .Modf (_dcbg /_bebb );if _a .Trunc (_dbce +0.5)> 0{_dcbg ++;};return MakeNumberResult (_dcbg *_bebb );};func _ggce (_ddeaa []Result )Result {_deee :=_ddeaa [0].ValueList ;_fcgf :=len (_deee );switch len (_ddeaa ){case 1:_dcef :=[]Result {};
for _ ,_gfdc :=range _deee {_dcef =append (_dcef ,MakeBoolResult (_gfdc .ValueNumber !=0));};return MakeListResult (_dcef );case 2:_ffbdc :=_ddeaa [1];switch _ffbdc .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_fbba :=[]Result {};for _ ,_ggda :=range _deee {var _dgea Result ;
if _ggda .ValueNumber ==0{_dgea =MakeBoolResult (false );}else {_dgea =_ffbdc ;};_fbba =append (_fbba ,_dgea );};return MakeListResult (_fbba );case ResultTypeList :_ccfde :=_gdgce (_ffbdc ,_fcgf );_fcea :=[]Result {};for _aebf ,_ccfb :=range _deee {var _effb Result ;
if _ccfb .ValueNumber ==0{_effb =MakeBoolResult (false );}else {_effb =_ccfde [_aebf ];};_fcea =append (_fcea ,_effb );};return MakeListResult (_fcea );case ResultTypeArray :_fdded :=_ddff (_ffbdc ,len (_ffbdc .ValueArray ),_fcgf );_bdfed :=[][]Result {};
for _ ,_cbef :=range _fdded {_fcebg :=[]Result {};for _gfga ,_ageg :=range _deee {var _feag Result ;if _ageg .ValueNumber ==0{_feag =MakeBoolResult (false );}else {_feag =_cbef [_gfga ];};_fcebg =append (_fcebg ,_feag );};_bdfed =append (_bdfed ,_fcebg );
};return MakeArrayResult (_bdfed );};case 3:_acddb :=_ddeaa [1];_ddgd :=_ddeaa [2];_cdfg :=_fdbd (_acddb );_fgada :=_fdbd (_ddgd );if _cdfg &&_fgada {_aabc :=[]Result {};for _ ,_fefba :=range _deee {var _dbefc Result ;if _fefba .ValueNumber ==0{_dbefc =_ddgd ;
}else {_dbefc =_acddb ;};_aabc =append (_aabc ,_dbefc );};return MakeListResult (_aabc );};if _acddb .Type !=ResultTypeArray &&_ddgd .Type !=ResultTypeArray {_efecb :=_gdgce (_acddb ,_fcgf );_aebe :=_gdgce (_ddgd ,_fcgf );_gcgb :=[]Result {};for _fgcgc ,_ggace :=range _deee {var _fbda Result ;
if _ggace .ValueNumber ==0{_fbda =_aebe [_fgcgc ];}else {_fbda =_efecb [_fgcgc ];};_gcgb =append (_gcgb ,_fbda );};return MakeListResult (_gcgb );};_ecde ,_ccbac :=len (_acddb .ValueArray ),len (_ddgd .ValueArray );_gbdf ,_accf :=_ecde ,_ccbac ;if _ccbac > _gbdf {_gbdf ,_accf =_accf ,_gbdf ;
};_cfgaa :=_ddff (_acddb ,_gbdf ,_fcgf );_dgedc :=_ddff (_ddgd ,_gbdf ,_fcgf );_aeab :=[][]Result {};for _cgab :=0;_cgab < _gbdf ;_cgab ++{_cffde :=[]Result {};for _adefd ,_eedf :=range _deee {var _bcgaf Result ;if _eedf .ValueNumber ==0{if _cgab < _ccbac {_bcgaf =_dgedc [_cgab ][_adefd ];
}else {_bcgaf =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _cgab < _ecde {_bcgaf =_cfgaa [_cgab ][_adefd ];}else {_bcgaf =MakeErrorResultType (ErrorTypeNA ,"");};};_cffde =append (_cffde ,_bcgaf );};_aeab =append (_aeab ,_cffde );};return MakeArrayResult (_aeab );
};return MakeErrorResult ("");};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fcaeg :=args [0].AsNumber ();if _fcaeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_a .Pi /180.0*_fcaeg .ValueNumber );};func _adb ()evCache {_effd :=evCache {};_effd ._dab =make (map[string ]Result );_effd ._ged =&_ef .Mutex {};return _effd ;};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );
RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );
RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};const _aec ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";


// ErrorType is a formula evaluation error type.
type ErrorType byte ;func _bgcg (_eceee []Result ,_agbc bool )(float64 ,float64 ){_afggb :=0.0;_fdce :=0.0;for _ ,_dgaad :=range _eceee {switch _dgaad .Type {case ResultTypeNumber :if _agbc ||!_dgaad .IsBoolean {_fdce +=_dgaad .ValueNumber ;_afggb ++;};
case ResultTypeList ,ResultTypeArray :_dgbb ,_cafd :=_bgcg (_dgaad .ListValues (),_agbc );_fdce +=_dgbb ;_afggb +=_cafd ;case ResultTypeString :if _agbc {_afggb ++;};case ResultTypeEmpty :};};return _fdce ,_afggb ;};

// LastRow returns 0 for the invalid reference context.
func (_egdfc *ivr )LastRow (colFrom string )int {return 0};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_edea :=args [0].AsNumber ();if _edea .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eebe :=float64 (1);if _edea .ValueNumber < 0{_eebe =-1;};if len (args )> 1{_fefge :=args [1].AsNumber ();if _fefge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_eebe =_fefge .ValueNumber ;};_gdfa :=float64 (1);if len (args )> 2{_gbddc :=args [2].AsNumber ();if _gbddc .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gdfa =_gbddc .ValueNumber ;};if len (args )==1{return MakeNumberResult (_a .Floor (_edea .ValueNumber ));};_gdddb :=_edea .ValueNumber ;_gdddb ,_cgdb :=_a .Modf (_gdddb /_eebe );if _cgdb !=0&&_edea .ValueNumber < 0&&_gdfa > 0{_gdddb ++;};return MakeNumberResult (_gdddb *_eebe );
};const _cabd ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_caggc :=args [0];if _caggc .Type ==ResultTypeError {return _caggc ;
};if _caggc .Type !=ResultTypeString &&_caggc .Type !=ResultTypeNumber &&_caggc .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_aagc :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bffg :=int (args [1].ValueNumber );if _bffg < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_adfcc :=int (args [2].ValueNumber );if _adfcc < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_aedb :=len (_aagc );if _bffg > _aedb {return MakeStringResult ("");};_bffg --;_ffcgb :=_bffg +_adfcc ;if _ffcgb > _aedb {return MakeStringResult (_aagc [_bffg :]);}else {return MakeStringResult (_aagc [_bffg :_ffcgb ]);};};type yyParser interface{Parse (yyLexer )int ;
Lookahead ()int ;};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_eggd ,_bgcf :=_bfcgb (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _bgcf .Type ==ResultTypeError {return _bgcf ;};_dfabg :=_dgfe (_eggd ._eedbc );_bcag :=_dgfe (_eggd ._bfb );_fefg :=_eggd ._gddd ;_adbf :=_cfdd (_dfabg ,_bcag ,_fefg );
_befc ,_agea ,_acc :=_adbf .Date ();return MakeNumberResult (_defge (_befc ,int (_agea ),_acc ));};var _cggca =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_adcd ,_eace ,_dabg :=_agcb (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _dabg .Type ==ResultTypeError {return _dabg ;};_gffc ,_dabg :=_aefb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _dabg .Type ==ResultTypeError {return _dabg ;};if _gffc >=_adcd {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};_bdea :=args [3];if _bdea .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_agcbg :=_bdea .ValueNumber ;if _agcbg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_abfe :=args [4];if _abfe .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dfeg :=_abfe .ValueNumber ;if _dfeg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_fcgc :=args [5];
if _fcgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_cdad :=_fcgc .ValueNumber ;if _cdad < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gdgc :=args [6];
if _gdgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cbda :=float64 (int (_gdgc .ValueNumber ));if !_ecg (_cbda ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ebfg :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_dcdgg :=args [7];
if _dcdgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_ebfg =int (_dcdgg .ValueNumber );if !_gbaa (_ebfg ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");
};};_edaee ,_dabg :=_baf (_gffc ,_eace ,_ebfg );if _dabg .Type ==ResultTypeError {return _dabg ;};_edaee *=_cbda ;_fabc ,_dabg :=_baf (_adcd ,_eace ,_ebfg );if _dabg .Type ==ResultTypeError {return _dabg ;};_fabc *=_cbda ;_fgab ,_dabg :=_baf (_gffc ,_adcd ,_ebfg );
if _dabg .Type ==ResultTypeError {return _dabg ;};_fgab *=_cbda ;_abedc :=_cdad +_edaee *100*_agcbg /_cbda ;_abedc /=_fabc *_dfeg /_cbda +1;_abedc -=_fgab *100*_agcbg /_cbda ;return MakeNumberResult (_abedc );};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_aecff PrefixRangeExpr )Update (q *_af .UpdateQuery )Expression {_dagda :=_aecff ;_gfbea :=_aecff ._dcfd .String ();if _gfbea ==q .SheetToUpdate {_abbf :=*q ;_abbf .UpdateCurrentSheet =true ;_dagda ._ddgcg =_aecff ._ddgcg .Update (&_abbf );_dagda ._gfeeb =_aecff ._gfeeb .Update (&_abbf );
};return _dagda ;};const _fadf =57358;

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_bebg :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_bgagg :=args [2].ValueNumber +1;if _bgagg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_eeag :=_ggbe (args [0]);_ccba :=float64 (len (_eeag ));_cace ,_eggdf :=0.0,0.0;_bgfb ,_cbfc :=1.0,1.0;_dfgf ,_bfcc :=false ,false ;for _ ,_fdgd :=range _eeag {for _ ,_adbb :=range _fdgd {if _adbb .Type ==ResultTypeNumber &&!_adbb .IsBoolean {_acdd :=_adbb .ValueNumber ;
if _acdd ==0{continue ;}else {if _acdd > 0{_dfgf =true ;_eggdf +=_adbb .ValueNumber *_cbfc ;}else {_bfcc =true ;_cace +=_adbb .ValueNumber *_bgfb ;};_bgfb /=_bebg ;_cbfc /=_bgagg ;};};};};if !_dfgf ||!_bfcc {return MakeErrorResultType (ErrorTypeDivideByZero ,"");
};_egde :=-_eggdf /_cace ;_egde *=_a .Pow (_bgagg ,_ccba -1);_egde =_a .Pow (_egde ,1/(_ccba -1));return MakeNumberResult (_egde -1);};var _bcfdg []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};
func _afg (_gfe string )bool {for _ ,_bccg :=range _cfa {_egfe :=_bccg .FindStringSubmatch (_gfe );if len (_egfe )> 1{return true ;};};return false ;};func init (){_facc =_df .New (_df .NewSource (_bc .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_gfgbc ("\u0041\u0053\u0049\u004e",_a .Abs ));
RegisterFunction ("\u0041\u0043\u004f\u0053",_gfgbc ("\u0041\u0053\u0049\u004e",_a .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_gfgbc ("\u0041\u0053\u0049\u004e",_a .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_gfgbc ("\u0041\u0043\u004f\u0054",func (_aeac float64 )float64 {return _a .Pi /2-_a .Atan (_aeac )}));
RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_gfgbc ("\u0041\u0043\u004fT\u0048",func (_fadgc float64 )float64 {return _a .Atanh (1/_fadgc )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );
RegisterFunction ("\u0041\u0053\u0049\u004e",_gfgbc ("\u0041\u0053\u0049\u004e",_a .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_gfgbc ("\u0041\u0053\u0049N\u0048",_a .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_gfgbc ("\u0041\u0054\u0041\u004e",_a .Atan ));
RegisterFunction ("\u0041\u0054\u0041N\u0048",_gfgbc ("\u0041\u0054\u0041N\u0048",_a .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );
RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );
RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_gfgbc ("\u0043\u004f\u0053",_a .Cos ));
RegisterFunction ("\u0043\u004f\u0053\u0048",_gfgbc ("\u0043\u004f\u0053\u0048",_a .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_adbdc ("\u0043\u004f\u0054",_a .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_adbdc ("\u0043\u004f\u0054\u0048",_a .Tanh ));
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_adbdc ("\u0043\u0053\u0043",_a .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_adbdc ("\u0043\u0053\u0043",_a .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );
RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_gfgbc ("\u0045\u0058\u0050",_a .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );
RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );
RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_gfgbc ("\u004c\u004e",_a .Log ));
RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_gfgbc ("\u004c\u004f\u00471\u0030",_a .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );
RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );
RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );
RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );
RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_adbdc ("\u0053\u0045\u0043",_a .Cos ));
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_adbdc ("\u0053\u0045\u0043\u0048",_a .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );
RegisterFunction ("\u0053\u0049\u004e",_gfgbc ("\u0053\u0049\u004e",_a .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_gfgbc ("\u0053\u0049\u004e\u0048",_a .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_gfgbc ("\u0053\u0051\u0052\u0054",_a .Sqrt ));
RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_gfgbc ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_fdgcf float64 )float64 {return _a .Sqrt (_fdgcf *_a .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );
RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_gfgbc ("\u0054\u0041\u004e",_a .Tan ));
RegisterFunction ("\u0054\u0041\u004e\u0048",_gfgbc ("\u0054\u0041\u004e\u0048",_a .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};func _cadcc (_gdge Reference ,_fbdc Context )bool {return _fbdc .Sheet (_gdge .Value )==InvalidReferenceContext ;
};func _gdgce (_bab Result ,_gagg int )[]Result {_adbgg :=[]Result {};switch _bab .Type {case ResultTypeList :_aedd :=_bab .ValueList ;_dfegb :=len (_aedd );for _febe :=0;_febe < _gagg ;_febe ++{if _febe < _dfegb {_adbgg =append (_adbgg ,_aedd [_febe ]);
}else {_adbgg =append (_adbgg ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _fffd :=0;_fffd < _gagg ;_fffd ++{_adbgg =append (_adbgg ,_bab );};};return _adbgg ;};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_dcfb :=_be .Buffer {};for _ ,_bdeae :=range args {switch _bdeae .Type {case ResultTypeString :_dcfb .WriteString (_bdeae .ValueString );case ResultTypeNumber :var _fded string ;if _bdeae .IsBoolean {if _bdeae .ValueNumber ==0{_fded ="\u0046\u0041\u004cS\u0045";
}else {_fded ="\u0054\u0052\u0055\u0045";};}else {_fded =_bdeae .AsString ().ValueString ;};_dcfb .WriteString (_fded );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
};};return MakeStringResult (_dcfb .String ());};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_eafa :=_dc .Split (v ,"\u003a");if len (_eafa )!=2{return nil ;};if _eafa [0]> _eafa [1]{_eafa [0],_eafa [1]=_eafa [1],_eafa [0];};return PrefixVerticalRange {_adac :pfx ,_feffc :_eafa [0],_gdeed :_eafa [1]};
};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_cada :=1.0;for _ ,_aafgc :=range args {_aafgc =_aafgc .AsNumber ();switch _aafgc .Type {case ResultTypeNumber :_cada *=_aafgc .ValueNumber ;case ResultTypeList ,ResultTypeArray :_ebgc :=Product (_aafgc .ListValues ());
if _ebgc .Type !=ResultTypeNumber {return _ebgc ;};_cada *=_ebgc .ValueNumber ;case ResultTypeString :case ResultTypeError :return _aafgc ;case ResultTypeEmpty :default:return MakeErrorResult (_bg .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_aafgc .Type ));
};};return MakeNumberResult (_cada );};func _caf (_cec string ,_edb uint32 )string {_gc :=_fb .ColumnToIndex (_cec );if _gc ==_edb {return "\u0023\u0052\u0045F\u0021";}else if _gc > _edb {return _fb .IndexToColumn (_gc -1);}else {return _cec ;};};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_fcccf PrefixVerticalRange )Update (q *_af .UpdateQuery )Expression {if q .UpdateType ==_af .UpdateActionRemoveColumn {_gadec :=_fcccf ;_dggd :=_fcccf ._adac .String ();if _dggd ==q .SheetToUpdate {_decde :=q .ColumnIdx ;_gadec ._feffc =_caf (_fcccf ._feffc ,_decde );
_gadec ._gdeed =_caf (_fcccf ._gdeed ,_decde );};return _gadec ;};return _fcccf ;};const _cgfd =57363;

// String returns an empty string for Error.
func (_cce Error )String ()string {return ""};func _aaf (_eacb ,_bcfee ,_cfed ,_bfed ,_gdcg ,_ebce float64 )float64 {var _fdgdf ,_aeccc float64 ;_dgbf :=0.0;_fabfe :=_a .Ceil (_gdcg );_efbba :=_eacb -_bcfee ;_afbae :=false ;_cgbf :=0.0;for _abfbd :=1.0;
_abfbd <=_fabfe ;_abfbd ++{if !_afbae {_fdgdf =_eedce (_eacb ,_bcfee ,_cfed ,_abfbd ,_ebce );_cgbf =_efbba /(_cfed -_abfbd +1);if _cgbf > _fdgdf {_aeccc =_cgbf ;_afbae =true ;}else {_aeccc =_fdgdf ;_efbba -=_fdgdf ;};}else {_aeccc =_cgbf ;};if _abfbd ==_fabfe {_aeccc *=_gdcg +1-_fabfe ;
};_dgbf +=_aeccc ;};return _dgbf ;};func _gggeba (_gfab int )string {if _gfab >=0&&_gfab < len (_befe ){if _befe [_gfab ]!=""{return _befe [_gfab ];};};return _bg .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_gfab );};func _geed (_cabgd []Result )(float64 ,float64 ,Result ){_feg :=0.0;
_agddf :=1.0;for _ ,_adcgbd :=range _cabgd {switch _adcgbd .Type {case ResultTypeNumber :_feg +=_adcgbd .ValueNumber ;_agddf *=_eddee (_adcgbd .ValueNumber );case ResultTypeList ,ResultTypeArray :_bfebb ,_dcge ,_bgdb :=_geed (_adcgbd .ListValues ());_feg +=_bfebb ;
_agddf *=_eddee (_dcge );if _bgdb .Type ==ResultTypeError {return 0,0,_bgdb ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
case ResultTypeError :return 0,0,_adcgbd ;};};return _feg ,_agddf ,_bgb ;};const _bbc =_aecf +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dbbg :=args [0].AsNumber ();if _dbbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aggc :=0;if len (args )> 1{_gacc :=args [1];if _gacc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_aggc =int (_gacc .ValueNumber );if _aggc < 0{_aggc =0;}else if _aggc > 4{_aggc =4;};};_agfa :=_bbag ;switch _aggc {case 1:_agfa =_cggca ;case 2:_agfa =_dac ;case 3:_agfa =_fdda ;case 4:_agfa =_ddeed ;};_bedae :=_a .Trunc (_dbbg .ValueNumber );_bccd :=_be .Buffer {};
for _ ,_gffd :=range _agfa {for _bedae >=_gffd ._gecc {_bccd .WriteString (_gffd ._facf );_bedae -=_gffd ._gecc ;};};return MakeStringResult (_bccd .String ());};var _fdbc string =string ([]byte {92});

// Reference returns an invalid reference for BinaryExpr.
func (_cc BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_adcbd :=args [0];if _adcbd .Type !=ResultTypeArray &&_adcbd .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_gage :=_adcbd .ValueArray ;if len (_gage )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};return MakeNumberResult (float64 (len (_gage )));};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_ccec :=len (args );if _ccec !=4&&_ccec !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ede ,_fbcgec ,_aadg :=_agcb (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _aadg .Type ==ResultTypeError {return _aadg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dcag :=args [2].ValueNumber ;if _dcag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_fgabd :=args [3].ValueNumber ;if _fgabd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");
};_bggb :=0;if _ccec ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bggb =int (args [4].ValueNumber );if !_gbaa (_bggb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");
};};_ceb ,_aadg :=_baf (_ede ,_fbcgec ,_bggb );if _aadg .Type ==ResultTypeError {return _aadg ;};return MakeNumberResult (_fgabd *(1-_dcag *_ceb ));};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_bdbc :v }};func _gbaa (_fffe int )bool {return _fffe >=0&&_fffe <=4};const _gecf =57368;

// ResultType is the type of the result
//
//go:generate stringer -type=ResultType
type ResultType byte ;

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_eeddd PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_edbcda :=_eeddd ._adac .Reference (ctx ,ev );switch _edbcda .Type {case ReferenceTypeSheet :if _cadcc (_edbcda ,ctx ){return MakeErrorResultType (ErrorTypeName ,_bg .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_edbcda .Value ));
};_edeac :=_eeddd .verticalRangeReference (_edbcda .Value );if _dafc ,_feed :=ev .GetFromCache (_edeac );_feed {return _dafc ;};_baaaa :=ctx .Sheet (_edbcda .Value );_aabda ,_cafecf :=_dadae (_baaaa ,_eeddd ._feffc ,_eeddd ._gdeed );_fcbf :=_cabcgf (_baaaa ,ev ,_aabda ,_cafecf );
ev .SetCache (_edeac ,_fcbf );return _fcbf ;default:return MakeErrorResult (_bg .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_edbcda .Type ));
};};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_dgede :s }};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bcec :=false ;for _ ,_gcfd :=range args {switch _gcfd .Type {case ResultTypeList ,ResultTypeArray :_eceeb :=Or (_gcfd .ListValues ());if _eceeb .Type ==ResultTypeError {return _eceeb ;};if _eceeb .ValueNumber !=0{_bcec =true ;};case ResultTypeNumber :if _gcfd .ValueNumber !=0{_bcec =true ;
};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _gcfd ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");
};};return MakeBoolResult (_bcec );};

// Value returns a string version of the result.
func (_cgcf Result )Value ()string {switch _cgcf .Type {case ResultTypeNumber :_gaef :=_ee .FormatFloat (_cgcf .ValueNumber ,'f',-1,64);if len (_gaef )> 12{_bbfde :=12;for _dagc :=_bbfde ;_dagc > 0&&_gaef [_dagc ]=='0';_dagc --{_bbfde --;};_gaef =_gaef [0:_bbfde +1];
};return _gaef ;case ResultTypeError :return _cgcf .ValueString ;case ResultTypeString :return _cgcf .ValueString ;case ResultTypeList :if len (_cgcf .ValueList )==0{return "";};return _cgcf .ValueList [0].Value ();case ResultTypeArray :if len (_cgcf .ValueArray )==0||len (_cgcf .ValueArray [0])==0{return "";
};return _cgcf .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};func _eecb (){_dgaa =_g .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");
_dffd =_g .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_agbe =_g .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_eeca =_g .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_cafac =_g .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");
_gdef =_g .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};func _gbag (_eedg ,_cdbg _bc .Time )bool {_geg :=_eedg .Unix ();_dbc :=_cdbg .Unix ();_fafe :=_eedg .Year ();_fadg :=_afbga (_fafe ,_bc .March ,1);if _fbce (_fafe )&&_geg < _fadg &&_dbc >=_fadg {return true ;
};var _agcf =_cdbg .Year ();var _dbde =_afbga (_agcf ,_bc .March ,1);return (_fbce (_agcf )&&_dbc >=_dbde &&_geg < _dbde );};func (_dedb *Lexer )Next ()*node {_dedb ._afcfg .Lock ();defer _dedb ._afcfg .Unlock ();if len (_dedb ._bbee )> 0{_bgddc :=_dedb ._bbee [0];
_dedb ._bbee =_dedb ._bbee [1:];return _bgddc ;};return _dedb .nextRaw ();};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gdfg ,_gaee ,_fgcc :=_agcb (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _fgcc .Type ==ResultTypeError {return _fgcc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfce :=_gaee -_gdfg ;if _dfce > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_ebef :=args [2].ValueNumber ;if _ebef <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_edag :=(100-_ebef )/_ebef ;_ffcge :=360/_dfce ;return MakeNumberResult (_edag *_ffcge );};type tokenType int ;const _ggfg int =30;

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_ca :v }};func _bcgd (_ceddc ,_fffg ,_fef ,_cbe int )int {if !_afgb (_cbe ){return _fef ;};_gfaa :=_fef ;_cdd :=_cfdb (_ceddc ,_fffg );if _gfaa > 30||_fef >=_cdd ||_gfaa >=_cdd {_gfaa =30;};return _gfaa ;
};func _bfgd (_eaaed [][]Result ,_efbbad int )[][]Result {_cfgec :=[][]Result {};for _gfdg :=range _eaaed {if _gfdg ==0{continue ;};_afag :=[]Result {};for _ecbbf :=range _eaaed {if _ecbbf ==_efbbad {continue ;};_afag =append (_afag ,_eaaed [_gfdg ][_ecbbf ]);
};_cfgec =append (_cfgec ,_afag );};return _cfgec ;};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_dcdfc :=args [0].AsNumber ();if _dcdfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};var _edga float64 ;_afdb :=args [1].AsNumber ();if _afdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_edga =_afdb .ValueNumber ;if _edga < 0&&_dcdfc .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");
};_edeb :=_dcdfc .ValueNumber ;_edeb ,_cabcg :=_a .Modf (_edeb /_edga );if _cabcg !=0{if _dcdfc .ValueNumber < 0&&_cabcg < 0{_edeb --;};};return MakeNumberResult (_edeb *_edga );};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bea :=ctx .GetEpoch ();_aaed ,_fbd :=_abdf (args [0].Value (),_bea );if _fbd !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (float64 (_aaed .Year ()));};func _gfg (_gcc string )(int ,int ,int ,bool ,Result ){_aaa :="";_ecb :=[]string {};for _fgc ,_gdg :=range _gcg {_ecb =_gdg .FindStringSubmatch (_gcc );if len (_ecb )> 1{_aaa =_fgc ;break ;};};if _aaa ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );
};_dce :=false ;var _fgef ,_fae ,_dfeb int ;var _bcfd error ;switch _aaa {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_fae ,_bcfd =_ee .Atoi (_ecb [1]);if _bcfd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );};_dfeb ,_bcfd =_ee .Atoi (_ecb [3]);
if _bcfd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );};_fgef ,_bcfd =_ee .Atoi (_ecb [5]);if _bcfd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );};if _fgef < 0||_fgef > 9999||(_fgef > 99&&_fgef < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );
};_fgef =_cga (_fgef );_dce =_ecb [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_fae =_cea [_ecb [1]];_dfeb ,_bcfd =_ee .Atoi (_ecb [14]);if _bcfd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );};_fgef ,_bcfd =_ee .Atoi (_ecb [16]);
if _bcfd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );};if _fgef < 0||_fgef > 9999||(_fgef > 99&&_fgef < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );};_fgef =_cga (_fgef );_dce =_ecb [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_gadb ,_deec :=_ee .Atoi (_ecb [1]);
if _deec !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );};_acgd ,_deec :=_ee .Atoi (_ecb [3]);if _deec !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );};_cged ,_deec :=_ee .Atoi (_ecb [5]);if _deec !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );
};if _gadb >=1900&&_gadb < 10000{_fgef =_gadb ;_fae =_acgd ;_dfeb =_cged ;}else if _gadb > 0&&_gadb < 13{_fae =_gadb ;_dfeb =_acgd ;_fgef =_cged ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );};_dce =_ecb [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_fgef ,_bcfd =_ee .Atoi (_ecb [16]);
if _bcfd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );};_fae =_cea [_ecb [3]];_dfeb ,_bcfd =_ee .Atoi (_ecb [1]);if _bcfd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );};_dce =_ecb [19]=="";};if !_ccb (_fgef ,_fae ,_dfeb ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cca );
};return _fgef ,_fae ,_dfeb ,_dce ,_bgb ;};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gdcfd :=_dcbc (args );_d .Float64s (_gdcfd );var _gaga float64 ;if len (_gdcfd )%2==0{_gaga =(_gdcfd [len (_gdcfd )/2-1]+_gdcfd [len (_gdcfd )/2])/2;}else {_gaga =_gdcfd [len (_gdcfd )/2];};return MakeNumberResult (_gaga );};type yyLexer interface{Lex (_aada *yySymType )int ;
Error (_cbbaf string );};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};_ggb :=args [0].ValueNumber ;if _ggb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");
};_cfe :=float64 (int (args [1].ValueNumber ));if _cfe < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult (_a .Pow ((1+_ggb /_cfe ),_cfe )-1);};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gbf :=int (args [0].ValueNumber );if _gbf < 0||_gbf >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _gbf <=1899{_gbf +=1900;};_faf :=_bc .Month (args [1].ValueNumber );
_feea :=int (args [2].ValueNumber );_dfe :=_afbga (_gbf ,_faf ,_feea );_aca :=_fgb (_adc ,_dfe )+1;if _aca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_aca );
};const _cbdb =1;

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};var _fdda =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func (_gbgf *noCache )GetFromCache (key string )(Result ,bool ){return _bgb ,false };const _bfeg =57367;func _aefdc (_dfdcg float64 ,_gcecf *criteriaRegex )bool {_ggdae ,_gedce :=_ee .ParseFloat (_gcecf ._fdeeg ,64);if _gedce !=nil {return false ;};switch _gcecf ._adag {case _gdeef :return _dfdcg ==_ggdae ;
case _bdbb :return _dfdcg <=_ggdae ;case _gdgff :return _dfdcg >=_ggdae ;case _efae :return _dfdcg < _ggdae ;case _dcbbb :return _dfdcg > _ggdae ;};return false ;};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_decb :=len (args );if _decb !=5&&_decb !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_gdeca ,_fdgf ,_abcd :=_agcb (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _abcd .Type ==ResultTypeError {return _abcd ;};_cbgaa ,_abcd :=_aefb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");
if _abcd .Type ==ResultTypeError {return _abcd ;};if _cbgaa >=_gdeca {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_aecaa :=args [3].ValueNumber ;if _aecaa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_fgcb :=args [4].ValueNumber ;if _fgcb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_bbeb :=0;if _decb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbeb =int (args [5].ValueNumber );if !_gbaa (_bbeb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");
};};_ebc ,_abcd :=_baf (_gdeca ,_fdgf ,_bbeb );if _abcd .Type ==ResultTypeError {return _abcd ;};_dagd ,_abcd :=_baf (_cbgaa ,_fdgf ,_bbeb );if _abcd .Type ==ResultTypeError {return _abcd ;};_gcff ,_abcd :=_baf (_cbgaa ,_gdeca ,_bbeb );if _abcd .Type ==ResultTypeError {return _abcd ;
};_ddbe :=1+_dagd *_aecaa ;_fbec :=1+_ebc *_fgcb ;return MakeNumberResult ((_ddbe /_fbec -_gcff *_aecaa )*100);};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};var _befe =[...]string {};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_ecdbd ,_dcgab ,_gfeff :=_bbgaa (from ,to );if _gfeff !=nil {_ed .Log .Debug (_gfeff .Error ());return NewError (_gfeff .Error ());};return Range {_bbef :_ecdbd ,_bfec :_dcgab };};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_abc CellRef )Update (q *_af .UpdateQuery )Expression {if q .UpdateCurrentSheet {_abc ._ca =_aeca (_abc ._ca ,q );};return _abc ;};type ivr struct{};func _daba (_fdef ,_bdde float64 ,_bddc ,_faff int )float64 {_ffb :=_dgfe (_fdef );_agfe :=_dgfe (_bdde );
if _faff ==1{_aeag :=_efge (_ffb ,_agfe ,_bddc ,1);_aefa :=_aeag .AddDate (0,12/_bddc ,0);return _aef (_aeag ,_aefa ,_faff );};return float64 (_fdde (0,_faff ))/float64 (_bddc );};

// Eval evaluates a range returning a list of results or an error.
func (_edda Range )Eval (ctx Context ,ev Evaluator )Result {_fffdf :=_edda ._bbef .Reference (ctx ,ev );_gbdcd :=_edda ._bfec .Reference (ctx ,ev );_ffge :=_fggeg (_fffdf ,_gbdcd );if _fffdf .Type ==ReferenceTypeCell &&_gbdcd .Type ==ReferenceTypeCell {if _abbg ,_bcgae :=ev .GetFromCache (_ffge );
_bcgae {return _abbg ;}else {_edfg :=_cabcgf (ctx ,ev ,_fffdf .Value ,_gbdcd .Value );ev .SetCache (_ffge ,_edfg );return _edfg ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_ffge );};func _gcb (_cfac ,_ead float64 ,_eac ,_eea int )float64 {_ebf :=_dgfe (_cfac );
_dgda :=_dgfe (_ead );_fcfc :=_cfdd (_ebf ,_dgda ,_eac );return _aef (_ebf ,_fcfc ,_eea );};func _ffbb (_eeae ,_aadd ,_abg ,_gcbf ,_abfc ,_acgfc float64 ,_fecc int )(float64 ,Result ){_deea :=int (_acgfc );_aecd :=_daba (_eeae ,_aadd ,_deea ,_fecc );_ddgge :=_gcb (_eeae ,_aadd ,_deea ,_fecc )/_aecd ;
_gdee ,_gbeb :=_bgcde (_eeae ,_aadd ,_deea ,_fecc );if _gbeb .Type ==ResultTypeError {return 0,_gbeb ;};_ccca :=_ddgc (_eeae ,_aadd ,_deea ,_fecc );_cccc :=_abfc /_a .Pow (1+_gcbf /_acgfc ,_gdee -1+_ddgge );_cccc -=100*_abg /_acgfc *_ccca /_aecd ;_gabc :=100*_abg /_acgfc ;
_eadd :=1+_gcbf /_acgfc ;for _fgge :=0.0;_fgge < _gdee ;_fgge ++{_cccc +=_gabc /_a .Pow (_eadd ,_fgge +_ddgge );};return _cccc ,MakeEmptyResult ();};

// IsDBCS returns false for the invalid reference context.
func (_bcdc *ivr )IsDBCS ()bool {return false };

// GetFormat returns an empty string for the invalid reference context.
func (_eaca *ivr )GetFormat (cellRef string )string {return ""};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_ecad ,_dda :=_bfcgb (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _dda .Type ==ResultTypeError {return _dda ;};return MakeNumberResult (_daba (_ecad ._eedbc ,_ecad ._bfb ,_ecad ._gddd ,_ecad ._gegg ));
};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_ce ,_bga :=_ee .ParseBool (v );if _bga !=nil {_ed .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_bga );
};return Bool {_aab :_ce };};func init (){_eecb ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );
RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );
RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );
RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );
};func (_gdgbc Result )AsString ()Result {switch _gdgbc .Type {case ResultTypeNumber :return MakeStringResult (_gdgbc .Value ());default:return _gdgbc ;};};const _dabe =57351;

// BinaryExpr is a binary expression.
type BinaryExpr struct{_eg ,_ec Expression ;_dg BinOpType ;};

// String returns a string representation of String.
func (_aaffb String )String ()string {return "\u0022"+_aaffb ._gbgbe +"\u0022"};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_efea :data }};func (_cbafc ResultType )String ()string {if _cbafc >=ResultType (len (_fdace )-1){return _bg .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_cbafc );
};return _dceae [_fdace [_cbafc ]:_fdace [_cbafc +1]];};func _dcaf (_bbbe ,_aeadf []float64 ,_cabc float64 )Result {_eaec :=false ;_cacf :=false ;for _cfc :=0;_cfc < len (_bbbe );_cfc ++{if _bbbe [_cfc ]> 0{_eaec =true ;};if _bbbe [_cfc ]< 0{_cacf =true ;
};};if !_eaec ||!_cacf {return MakeErrorResultType (ErrorTypeNum ,"");};_gcdc :=_cabc ;_ffbc :=1e-10;_befgb :=0;_ddab :=50;_afeg :=false ;for {_debf :=_dgbe (_bbbe ,_aeadf ,_gcdc );_begg :=_gcdc -_debf /_agee (_bbbe ,_aeadf ,_gcdc );_ddfa :=_a .Abs (_begg -_gcdc );
_gcdc =_begg ;_befgb ++;if _ddfa <=_ffbc ||_a .Abs (_debf )<=_ffbc {break ;};if _befgb > _ddab {_afeg =true ;break ;};};if _afeg ||_a .IsNaN (_gcdc )||_a .IsInf (_gcdc ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_gcdc );
};func (_dfdgc *Lexer )lex (_fgegc _cg .Reader ){_gaggb ,_ddbea ,_fdebf :=0,0,0;_deggg :=-1;_dedf ,_acgec ,_efca :=0,0,0;_ =_efca ;_fabbf :=1;_ =_fabbf ;_eegd :=make ([]byte ,4096);_caced :=false ;for !_caced {_fgbcf :=0;if _dedf > 0{_fgbcf =_ddbea -_dedf ;
};_ddbea =0;_gedd ,_cdaef :=_fgegc .Read (_eegd [_fgbcf :]);if _gedd ==0||_cdaef !=nil {_caced =true ;};_fdebf =_gedd +_fgbcf ;if _fdebf < len (_eegd ){_deggg =_fdebf ;};{_gaggb =_ebcd ;_dedf =0;_acgec =0;_efca =0;};{var _beeee int ;var _dcdgd uint ;if _ddbea ==_fdebf {goto _cedff ;
};if _gaggb ==0{goto _fcdfe ;};_cebe :_beeee =int (_eccf [_gaggb ]);_dcdgd =uint (_bcfdg [_beeee ]);_beeee ++;for ;_dcdgd > 0;_dcdgd --{_beeee ++;switch _bcfdg [_beeee -1]{case 2:_dedf =_ddbea ;};};switch _gaggb {case 30:switch _eegd [_ddbea ]{case 34:goto _cdbgf ;
case 35:goto _ffgce ;case 36:goto _aggaa ;case 38:goto _daca ;case 39:goto _gafb ;case 40:goto _begacc ;case 41:goto _acde ;case 42:goto _cfabfa ;case 43:goto _face ;case 44:goto _cgef ;case 45:goto _gfeb ;case 47:goto _gbbf ;case 58:goto _cebb ;case 59:goto _eafba ;
case 60:goto _gagff ;case 61:goto _febb ;case 62:goto _cead ;case 63:goto _eecgc ;case 70:goto _aeedbc ;case 84:goto _cggb ;case 92:goto _aacd ;case 94:goto _egege ;case 95:goto _faca ;case 123:goto _dfacd ;case 125:goto _adgc ;};switch {case _eegd [_ddbea ]< 65:switch {case _eegd [_ddbea ]> 37:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _bgcff ;
};case _eegd [_ddbea ]>=33:goto _eecgc ;};case _eegd [_ddbea ]> 90:switch {case _eegd [_ddbea ]> 93:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _efgc ;};case _eegd [_ddbea ]>=91:goto _eecgc ;};default:goto _aadb ;};goto _bgegb ;case 1:switch _eegd [_ddbea ]{case 33:goto _cecba ;
case 47:goto _befa ;case 123:goto _befa ;case 125:goto _befa ;};switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _befa ;};case _eegd [_ddbea ]> 45:switch {case _eegd [_ddbea ]> 63:if 91<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=94{goto _befa ;
};case _eegd [_ddbea ]>=58:goto _befa ;};default:goto _befa ;};goto _bgegb ;case 0:goto _fcdfe ;case 2:if _eegd [_ddbea ]==34{goto _cfded ;};goto _cdbgf ;case 31:if _eegd [_ddbea ]==34{goto _cdbgf ;};goto _defgce ;case 3:switch _eegd [_ddbea ]{case 78:goto _cabcgb ;
case 82:goto _eaef ;};goto _eecgc ;case 4:switch _eegd [_ddbea ]{case 47:goto _feebd ;case 85:goto _cgec ;};goto _eecgc ;case 5:if _eegd [_ddbea ]==65{goto _fbab ;};goto _eecgc ;case 6:switch _eegd [_ddbea ]{case 76:goto _bcgdg ;case 77:goto _ddebf ;};
goto _eecgc ;case 7:if _eegd [_ddbea ]==76{goto _ddebf ;};goto _eecgc ;case 8:if _eegd [_ddbea ]==33{goto _fbab ;};goto _eecgc ;case 9:if _eegd [_ddbea ]==69{goto _efeac ;};goto _eecgc ;case 10:if _eegd [_ddbea ]==70{goto _eadc ;};goto _eecgc ;case 11:if _eegd [_ddbea ]==33{goto _agcgc ;
};goto _eecgc ;case 12:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 47:goto _eecgc ;case 123:goto _eecgc ;case 125:goto _eecgc ;};switch {case _eegd [_ddbea ]< 48:switch {case _eegd [_ddbea ]> 35:if 37<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=45{goto _eecgc ;
};case _eegd [_ddbea ]>=34:goto _eecgc ;};case _eegd [_ddbea ]> 57:switch {case _eegd [_ddbea ]< 65:if 58<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=63{goto _eecgc ;};case _eegd [_ddbea ]> 90:if 91<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=94{goto _eecgc ;};default:goto _aggca ;
};default:goto _faaacc ;};goto _bgegb ;case 13:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 47:goto _eecgc ;case 58:goto _caga ;case 123:goto _eecgc ;case 125:goto _eecgc ;};switch {case _eegd [_ddbea ]< 48:switch {case _eegd [_ddbea ]> 35:if 37<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=45{goto _eecgc ;
};case _eegd [_ddbea ]>=34:goto _eecgc ;};case _eegd [_ddbea ]> 57:switch {case _eegd [_ddbea ]> 63:if 91<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=94{goto _eecgc ;};case _eegd [_ddbea ]>=59:goto _eecgc ;};default:goto _faaacc ;};goto _bgegb ;case 14:if _eegd [_ddbea ]==36{goto _bfdaf ;
};if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _agag ;};goto _befa ;case 15:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _agag ;};goto _befa ;case 32:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _agag ;};goto _ddgfg ;case 16:switch _eegd [_ddbea ]{case 33:goto _cecba ;
case 36:goto _ccceb ;case 47:goto _eecgc ;case 58:goto _adcgfc ;case 123:goto _eecgc ;case 125:goto _eecgc ;};switch {case _eegd [_ddbea ]< 59:switch {case _eegd [_ddbea ]> 45:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _bdeced ;};case _eegd [_ddbea ]>=34:goto _eecgc ;
};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]> 90:if 91<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=94{goto _eecgc ;};case _eegd [_ddbea ]>=65:goto _aggca ;};default:goto _eecgc ;};goto _bgegb ;case 17:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 47:goto _befa ;
case 123:goto _befa ;case 125:goto _befa ;};switch {case _eegd [_ddbea ]< 48:switch {case _eegd [_ddbea ]> 35:if 37<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=45{goto _befa ;};case _eegd [_ddbea ]>=34:goto _befa ;};case _eegd [_ddbea ]> 57:switch {case _eegd [_ddbea ]> 63:if 91<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=94{goto _befa ;
};case _eegd [_ddbea ]>=58:goto _befa ;};default:goto _bdeced ;};goto _bgegb ;case 33:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 47:goto _edagg ;case 123:goto _edagg ;case 125:goto _edagg ;};switch {case _eegd [_ddbea ]< 48:switch {case _eegd [_ddbea ]> 35:if 37<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=45{goto _edagg ;
};case _eegd [_ddbea ]>=34:goto _edagg ;};case _eegd [_ddbea ]> 57:switch {case _eegd [_ddbea ]> 63:if 91<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=94{goto _edagg ;};case _eegd [_ddbea ]>=58:goto _edagg ;};default:goto _bdeced ;};goto _bgegb ;case 18:if _eegd [_ddbea ]==36{goto _bbba ;
};if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _efbf ;};goto _befa ;case 19:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _efbf ;};goto _befa ;case 34:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _efbf ;};goto _decgb ;case 20:switch _eegd [_ddbea ]{case 39:goto _eecgc ;
case 42:goto _eecgc ;case 47:goto _eecgc ;case 58:goto _eecgc ;case 63:goto _eecgc ;};if 91<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=93{goto _eecgc ;};goto _dgbbe ;case 21:switch _eegd [_ddbea ]{case 39:goto _cbbb ;case 42:goto _eecgc ;case 47:goto _eecgc ;case 58:goto _eecgc ;
case 63:goto _eecgc ;};if 91<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=93{goto _eecgc ;};goto _dgbbe ;case 22:if _eegd [_ddbea ]==33{goto _gfda ;};goto _eecgc ;case 35:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 46:goto _gacf ;case 58:goto _caga ;case 101:goto _acdf ;
case 123:goto _fbcdd ;case 125:goto _fbcdd ;};switch {case _eegd [_ddbea ]< 48:switch {case _eegd [_ddbea ]> 35:if 37<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=47{goto _fbcdd ;};case _eegd [_ddbea ]>=34:goto _fbcdd ;};case _eegd [_ddbea ]> 57:switch {case _eegd [_ddbea ]> 63:if 91<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=94{goto _fbcdd ;
};case _eegd [_ddbea ]>=59:goto _fbcdd ;};default:goto _bgcff ;};goto _bgegb ;case 36:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 47:goto _fbcdd ;case 101:goto _acdf ;case 123:goto _fbcdd ;case 125:goto _fbcdd ;};switch {case _eegd [_ddbea ]< 48:switch {case _eegd [_ddbea ]> 35:if 37<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=45{goto _fbcdd ;
};case _eegd [_ddbea ]>=34:goto _fbcdd ;};case _eegd [_ddbea ]> 57:switch {case _eegd [_ddbea ]> 63:if 91<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=94{goto _fbcdd ;};case _eegd [_ddbea ]>=58:goto _fbcdd ;};default:goto _gacf ;};goto _bgegb ;case 23:switch _eegd [_ddbea ]{case 33:goto _cecba ;
case 47:goto _bdcfe ;case 123:goto _bdcfe ;case 125:goto _bdcfe ;};switch {case _eegd [_ddbea ]< 48:switch {case _eegd [_ddbea ]> 35:if 37<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=45{goto _bdcfe ;};case _eegd [_ddbea ]>=34:goto _bdcfe ;};case _eegd [_ddbea ]> 57:switch {case _eegd [_ddbea ]> 63:if 91<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=94{goto _bdcfe ;
};case _eegd [_ddbea ]>=58:goto _bdcfe ;};default:goto _adfda ;};goto _bgegb ;case 37:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 47:goto _fbcdd ;case 123:goto _fbcdd ;case 125:goto _fbcdd ;};switch {case _eegd [_ddbea ]< 48:switch {case _eegd [_ddbea ]> 35:if 37<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=45{goto _fbcdd ;
};case _eegd [_ddbea ]>=34:goto _fbcdd ;};case _eegd [_ddbea ]> 57:switch {case _eegd [_ddbea ]> 63:if 91<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=94{goto _fbcdd ;};case _eegd [_ddbea ]>=58:goto _fbcdd ;};default:goto _adfda ;};goto _bgegb ;case 38:switch _eegd [_ddbea ]{case 61:goto _eefgd ;
case 62:goto _fcdgb ;};goto _caeb ;case 39:if _eegd [_ddbea ]==61{goto _ceefb ;};goto _ddggb ;case 24:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 36:goto _ccceb ;case 40:goto _dagf ;case 46:goto _gaeb ;case 58:goto _adcgfc ;case 92:goto _bfab ;case 95:goto _cgdg ;
case 123:goto _eecgc ;case 125:goto _eecgc ;};switch {case _eegd [_ddbea ]< 59:switch {case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _deedd ;};case _eegd [_ddbea ]>=34:goto _eecgc ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _adbggd ;
};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;};default:goto _eecgc ;};default:goto _eecgc ;};goto _bgegb ;case 40:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 40:goto _dagf ;case 46:goto _gaeb ;case 92:goto _bfab ;
case 95:goto _cgdg ;case 123:goto _gcdfe ;case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 58:switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _gcdfe ;};case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _gaeb ;
};default:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _gaeb ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;};default:goto _gcdfe ;};default:goto _gcdfe ;
};goto _bgegb ;case 41:switch _eegd [_ddbea ]{case 46:goto _bfab ;case 92:goto _bfab ;case 95:goto _bfab ;};switch {case _eegd [_ddbea ]< 65:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _bfab ;};case _eegd [_ddbea ]> 90:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _bfab ;
};default:goto _bfab ;};goto _gcdfe ;case 42:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 46:goto _cgdg ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _gcdfe ;case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 58:switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _gcdfe ;
};case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _cgdg ;};default:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _cgdg ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;
};default:goto _gcdfe ;};default:goto _gcdfe ;};goto _bgegb ;case 43:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 40:goto _dagf ;case 46:goto _gaeb ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _edagg ;case 125:goto _edagg ;};switch {case _eegd [_ddbea ]< 58:switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _edagg ;
};case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _deedd ;};default:goto _edagg ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _gaeb ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;
};default:goto _edagg ;};default:goto _edagg ;};goto _bgegb ;case 44:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 36:goto _ccceb ;case 40:goto _dagf ;case 46:goto _gaeb ;case 58:goto _adcgfc ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _befa ;
case 125:goto _befa ;};switch {case _eegd [_ddbea ]< 59:switch {case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _deedd ;};case _eegd [_ddbea ]>=34:goto _befa ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _adbggd ;
};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;};default:goto _befa ;};default:goto _befa ;};goto _bgegb ;case 25:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 36:goto _ccceb ;case 40:goto _dagf ;case 46:goto _gaeb ;
case 58:goto _adcgfc ;case 65:goto _dffg ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _eecgc ;case 125:goto _eecgc ;};switch {case _eegd [_ddbea ]< 59:switch {case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _deedd ;};
case _eegd [_ddbea ]>=34:goto _eecgc ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 66<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _adbggd ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;};default:goto _eecgc ;
};default:goto _eecgc ;};goto _bgegb ;case 45:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 36:goto _ccceb ;case 40:goto _dagf ;case 46:goto _gaeb ;case 58:goto _adcgfc ;case 76:goto _gfebd ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _gcdfe ;
case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 59:switch {case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _deedd ;};case _eegd [_ddbea ]>=34:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _adbggd ;
};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;};default:goto _gcdfe ;};default:goto _gcdfe ;};goto _bgegb ;case 46:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 36:goto _ccceb ;case 40:goto _dagf ;case 46:goto _gaeb ;
case 58:goto _adcgfc ;case 83:goto _cbec ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _gcdfe ;case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 59:switch {case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _deedd ;};
case _eegd [_ddbea ]>=34:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _adbggd ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;};default:goto _gcdfe ;
};default:goto _gcdfe ;};goto _bgegb ;case 47:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 36:goto _ccceb ;case 40:goto _dagf ;case 46:goto _gaeb ;case 58:goto _adcgfc ;case 69:goto _fbfbg ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _gcdfe ;
case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 59:switch {case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _deedd ;};case _eegd [_ddbea ]>=34:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _adbggd ;
};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;};default:goto _gcdfe ;};default:goto _gcdfe ;};goto _bgegb ;case 26:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 36:goto _ccceb ;case 40:goto _dagf ;case 46:goto _gaeb ;
case 58:goto _adcgfc ;case 79:goto _eaedd ;case 82:goto _cggcf ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _eecgc ;case 125:goto _eecgc ;};switch {case _eegd [_ddbea ]< 59:switch {case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _deedd ;
};case _eegd [_ddbea ]>=34:goto _eecgc ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _adbggd ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;};default:goto _eecgc ;
};default:goto _eecgc ;};goto _bgegb ;case 48:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 36:goto _ccceb ;case 40:goto _dagf ;case 46:goto _gaeb ;case 58:goto _adcgfc ;case 68:goto _ggbef ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _gcdfe ;
case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 59:switch {case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _deedd ;};case _eegd [_ddbea ]>=34:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _adbggd ;
};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;};default:goto _gcdfe ;};default:goto _gcdfe ;};goto _bgegb ;case 49:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 36:goto _ccceb ;case 40:goto _dagf ;case 46:goto _gaeb ;
case 58:goto _adcgfc ;case 79:goto _dbdb ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _gcdfe ;case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 59:switch {case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _deedd ;};
case _eegd [_ddbea ]>=34:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _adbggd ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;};default:goto _gcdfe ;
};default:goto _gcdfe ;};goto _bgegb ;case 50:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 36:goto _ccceb ;case 40:goto _dagf ;case 46:goto _gaeb ;case 58:goto _adcgfc ;case 85:goto _cbec ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _gcdfe ;
case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 59:switch {case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _deedd ;};case _eegd [_ddbea ]>=34:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _adbggd ;
};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;};default:goto _gcdfe ;};default:goto _gcdfe ;};goto _bgegb ;case 27:switch _eegd [_ddbea ]{case 46:goto _bfab ;case 92:goto _bfab ;case 95:goto _bfab ;};switch {case _eegd [_ddbea ]< 65:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _bfab ;
};case _eegd [_ddbea ]> 90:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _bfab ;};default:goto _bfab ;};goto _eecgc ;case 28:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 46:goto _cgdg ;case 92:goto _bfab ;case 95:goto _cgdg ;case 120:goto _gddg ;
case 123:goto _eecgc ;case 125:goto _eecgc ;};switch {case _eegd [_ddbea ]< 58:switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _eecgc ;};case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _cgdg ;
};default:goto _eecgc ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _cgdg ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;};default:goto _eecgc ;};default:goto _eecgc ;
};goto _bgegb ;case 51:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 46:goto _cgdg ;case 92:goto _bfab ;case 95:goto _cgdg ;case 108:goto _bbdba ;case 123:goto _gcdfe ;case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 58:switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _gcdfe ;
};case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _cgdg ;};default:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _cgdg ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;
};default:goto _gcdfe ;};default:goto _gcdfe ;};goto _bgegb ;case 52:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 46:goto _cgdg ;case 92:goto _bfab ;case 95:goto _cgdg ;case 102:goto _eefa ;case 110:goto _egdfcf ;case 123:goto _gcdfe ;case 125:goto _gcdfe ;
};switch {case _eegd [_ddbea ]< 58:switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _gcdfe ;};case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _cgdg ;};default:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _cgdg ;
};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;};default:goto _gcdfe ;};default:goto _gcdfe ;};goto _bgegb ;case 53:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 46:goto _cgdg ;case 92:goto _bfab ;case 95:goto _cgdg ;
case 110:goto _faeff ;case 123:goto _gcdfe ;case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 58:switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _gcdfe ;};case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _cgdg ;
};default:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _cgdg ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;};default:goto _gcdfe ;};default:goto _gcdfe ;
};goto _bgegb ;case 54:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 46:goto _cdaa ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _gcdfe ;case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 58:switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _gcdfe ;
};case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _cgdg ;};default:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _cgdg ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;
};default:goto _gcdfe ;};default:goto _gcdfe ;};goto _bgegb ;case 55:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 46:goto _cgdg ;case 92:goto _bfab ;case 95:goto _dgdaa ;case 123:goto _gcdfe ;case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 58:switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _gcdfe ;
};case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _cgdg ;};default:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _dgdaa ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;
};default:goto _gcdfe ;};default:goto _gcdfe ;};goto _bgegb ;case 56:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 40:goto _dcbf ;case 46:goto _dgdaa ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _gcdfe ;case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 58:switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _gcdfe ;
};case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _dgdaa ;};default:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _dgdaa ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;
};default:goto _gcdfe ;};default:goto _gcdfe ;};goto _bgegb ;case 57:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 46:goto _cgdg ;case 92:goto _bfab ;case 95:goto _cgdg ;case 109:goto _bedag ;case 123:goto _gcdfe ;case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 58:switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _gcdfe ;
};case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _cgdg ;};default:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _cgdg ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;
};default:goto _gcdfe ;};default:goto _gcdfe ;};goto _bgegb ;case 58:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 46:goto _bdgcc ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _gcdfe ;case 125:goto _gcdfe ;};switch {case _eegd [_ddbea ]< 58:switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _gcdfe ;
};case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _cgdg ;};default:goto _gcdfe ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _cgdg ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;
};default:goto _gcdfe ;};default:goto _gcdfe ;};goto _bgegb ;case 59:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 46:goto _cgdg ;case 92:goto _bfab ;case 95:goto _gdgbg ;case 123:goto _befa ;case 125:goto _befa ;};switch {case _eegd [_ddbea ]< 58:switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _befa ;
};case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _cgdg ;};default:goto _befa ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _gdgbg ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;
};default:goto _befa ;};default:goto _befa ;};goto _bgegb ;case 29:switch _eegd [_ddbea ]{case 33:goto _cecba ;case 46:goto _cgdg ;case 92:goto _bfab ;case 95:goto _cgdg ;case 123:goto _eecgc ;case 125:goto _eecgc ;};switch {case _eegd [_ddbea ]< 58:switch {case _eegd [_ddbea ]< 37:if 34<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=35{goto _eecgc ;
};case _eegd [_ddbea ]> 47:if 48<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=57{goto _cgdg ;};default:goto _eecgc ;};case _eegd [_ddbea ]> 63:switch {case _eegd [_ddbea ]< 91:if 65<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=90{goto _cgdg ;};case _eegd [_ddbea ]> 94:if 97<=_eegd [_ddbea ]&&_eegd [_ddbea ]<=122{goto _cgdg ;
};default:goto _eecgc ;};default:goto _eecgc ;};goto _bgegb ;};_eecgc :_gaggb =0;goto _cffgd ;_bgegb :_gaggb =1;goto _cffgd ;_cdbgf :_gaggb =2;goto _cffgd ;_ffgce :_gaggb =3;goto _cffgd ;_cabcgb :_gaggb =4;goto _cffgd ;_feebd :_gaggb =5;goto _cffgd ;_cgec :_gaggb =6;
goto _cffgd ;_bcgdg :_gaggb =7;goto _cffgd ;_ddebf :_gaggb =8;goto _cffgd ;_eaef :_gaggb =9;goto _cffgd ;_efeac :_gaggb =10;goto _cffgd ;_eadc :_gaggb =11;goto _cffgd ;_aggaa :_gaggb =12;goto _cffgd ;_faaacc :_gaggb =13;goto _cffgd ;_caga :_gaggb =14;goto _cffgd ;
_bfdaf :_gaggb =15;goto _cffgd ;_aggca :_gaggb =16;goto _cffgd ;_ccceb :_gaggb =17;goto _cffgd ;_adcgfc :_gaggb =18;goto _cffgd ;_bbba :_gaggb =19;goto _cffgd ;_gafb :_gaggb =20;goto _cffgd ;_dgbbe :_gaggb =21;goto _cffgd ;_cbbb :_gaggb =22;goto _cffgd ;
_acdf :_gaggb =23;goto _cffgd ;_aadb :_gaggb =24;goto _cffgd ;_aeedbc :_gaggb =25;goto _cffgd ;_cggb :_gaggb =26;goto _cffgd ;_aacd :_gaggb =27;goto _cffgd ;_faca :_gaggb =28;goto _cffgd ;_efgc :_gaggb =29;goto _cffgd ;_befa :_gaggb =30;goto _ffdf ;_cecba :_gaggb =30;
goto _dcacb ;_fbab :_gaggb =30;goto _cfgecf ;_agcgc :_gaggb =30;goto _bgdgb ;_gfda :_gaggb =30;goto _aabgf ;_bdcfe :_gaggb =30;goto _bfcd ;_dagf :_gaggb =30;goto _eddcba ;_daca :_gaggb =30;goto _agca ;_begacc :_gaggb =30;goto _gdag ;_acde :_gaggb =30;goto _bacb ;
_cfabfa :_gaggb =30;goto _abba ;_face :_gaggb =30;goto _fcbe ;_cgef :_gaggb =30;goto _addfc ;_gfeb :_gaggb =30;goto _gceec ;_gbbf :_gaggb =30;goto _gcdgc ;_cebb :_gaggb =30;goto _aaaeb ;_eafba :_gaggb =30;goto _ddba ;_febb :_gaggb =30;goto _caeg ;_egege :_gaggb =30;
goto _abafb ;_dfacd :_gaggb =30;goto _dcdgb ;_adgc :_gaggb =30;goto _dgfa ;_defgce :_gaggb =30;goto _caggd ;_ddgfg :_gaggb =30;goto _dcfbe ;_edagg :_gaggb =30;goto _dbae ;_decgb :_gaggb =30;goto _aaedg ;_fbcdd :_gaggb =30;goto _efcge ;_caeb :_gaggb =30;
goto _fabbdf ;_eefgd :_gaggb =30;goto _gdfad ;_fcdgb :_gaggb =30;goto _gcfbga ;_ddggb :_gaggb =30;goto _acgg ;_ceefb :_gaggb =30;goto _dadb ;_gcdfe :_gaggb =30;goto _fgaag ;_dcbf :_gaggb =30;goto _fcdf ;_cfded :_gaggb =31;goto _ffdc ;_agag :_gaggb =32;
goto _cffgd ;_bdeced :_gaggb =33;goto _ggfa ;_efbf :_gaggb =34;goto _cffgd ;_bgcff :_gaggb =35;goto _bbcgf ;_gacf :_gaggb =36;goto _bbcgf ;_adfda :_gaggb =37;goto _bbcgf ;_gagff :_gaggb =38;goto _cffgd ;_cead :_gaggb =39;goto _cffgd ;_gaeb :_gaggb =40;
goto _gbca ;_bfab :_gaggb =41;goto _cffgd ;_cgdg :_gaggb =42;goto _gbca ;_deedd :_gaggb =43;goto _ggfa ;_adbggd :_gaggb =44;goto _gbca ;_fbfbg :_gaggb =44;goto _aaga ;_dbdb :_gaggb =44;goto _abcf ;_dffg :_gaggb =45;goto _gbca ;_gfebd :_gaggb =46;goto _gbca ;
_cbec :_gaggb =47;goto _gbca ;_eaedd :_gaggb =48;goto _gbca ;_ggbef :_gaggb =49;goto _gbca ;_cggcf :_gaggb =50;goto _gbca ;_gddg :_gaggb =51;goto _gbca ;_bbdba :_gaggb =52;goto _gbca ;_eefa :_gaggb =53;goto _gbca ;_faeff :_gaggb =54;goto _gbca ;_cdaa :_gaggb =55;
goto _gbca ;_dgdaa :_gaggb =56;goto _gbca ;_egdfcf :_gaggb =57;goto _gbca ;_bedag :_gaggb =58;goto _gbca ;_bdgcc :_gaggb =59;goto _gbca ;_gdgbg :_gaggb =59;goto _bfceg ;_cfgecf :_beeee =3;goto _facee ;_bgdgb :_beeee =5;goto _facee ;_dcacb :_beeee =7;goto _facee ;
_aabgf :_beeee =9;goto _facee ;_eddcba :_beeee =11;goto _facee ;_fcdf :_beeee =13;goto _facee ;_agca :_beeee =15;goto _facee ;_dcdgb :_beeee =17;goto _facee ;_dgfa :_beeee =19;goto _facee ;_gdag :_beeee =21;goto _facee ;_bacb :_beeee =23;goto _facee ;_fcbe :_beeee =25;
goto _facee ;_gceec :_beeee =27;goto _facee ;_abba :_beeee =29;goto _facee ;_gcdgc :_beeee =31;goto _facee ;_abafb :_beeee =33;goto _facee ;_caeg :_beeee =35;goto _facee ;_gdfad :_beeee =37;goto _facee ;_dadb :_beeee =39;goto _facee ;_gcfbga :_beeee =41;
goto _facee ;_aaaeb :_beeee =43;goto _facee ;_ddba :_beeee =45;goto _facee ;_addfc :_beeee =47;goto _facee ;_efcge :_beeee =49;goto _facee ;_dbae :_beeee =51;goto _facee ;_dcfbe :_beeee =53;goto _facee ;_aaedg :_beeee =55;goto _facee ;_fgaag :_beeee =57;
goto _facee ;_caggd :_beeee =59;goto _facee ;_fabbdf :_beeee =61;goto _facee ;_acgg :_beeee =63;goto _facee ;_bfcd :_beeee =65;goto _facee ;_ffdf :_beeee =67;goto _facee ;_aaga :_beeee =72;goto _facee ;_bbcgf :_beeee =75;goto _facee ;_ggfa :_beeee =78;
goto _facee ;_abcf :_beeee =81;goto _facee ;_bfceg :_beeee =84;goto _facee ;_gbca :_beeee =87;goto _facee ;_ffdc :_beeee =90;goto _facee ;_facee :_dcdgd =uint (_bcfdg [_beeee ]);_beeee ++;for ;_dcdgd > 0;_dcdgd --{_beeee ++;switch _bcfdg [_beeee -1]{case 3:_acgec =_ddbea +1;
case 4:_efca =1;case 5:_efca =2;case 6:_efca =3;case 7:_efca =4;case 8:_efca =11;case 9:_efca =14;case 10:_efca =15;case 11:_acgec =_ddbea +1;{_dfdgc .emit (_afda ,_eegd [_dedf :_acgec ]);};case 12:_acgec =_ddbea +1;{_dfdgc .emit (_gaeeg ,_eegd [_dedf :_acgec ]);
};case 13:_acgec =_ddbea +1;{_dfdgc .emit (_fdfg ,_eegd [_dedf :_acgec -1]);};case 14:_acgec =_ddbea +1;{_dfdgc .emit (_fdfg ,_eegd [_dedf +1:_acgec -2]);};case 15:_acgec =_ddbea +1;{_dfdgc .emit (_ddce ,_eegd [_dedf :_acgec -1]);};case 16:_acgec =_ddbea +1;
{_dfdgc .emit (_ddce ,_eegd [_dedf :_acgec -1]);};case 17:_acgec =_ddbea +1;{_dfdgc .emit (_edbbb ,_eegd [_dedf :_acgec ]);};case 18:_acgec =_ddbea +1;{_dfdgc .emit (_dgeg ,_eegd [_dedf :_acgec ]);};case 19:_acgec =_ddbea +1;{_dfdgc .emit (_deag ,_eegd [_dedf :_acgec ]);
};case 20:_acgec =_ddbea +1;{_dfdgc .emit (_fcaed ,_eegd [_dedf :_acgec ]);};case 21:_acgec =_ddbea +1;{_dfdgc .emit (_cgfd ,_eegd [_dedf :_acgec ]);};case 22:_acgec =_ddbea +1;{_dfdgc .emit (_abac ,_eegd [_dedf :_acgec ]);};case 23:_acgec =_ddbea +1;{_dfdgc .emit (_bdcbg ,_eegd [_dedf :_acgec ]);
};case 24:_acgec =_ddbea +1;{_dfdgc .emit (_cbgbb ,_eegd [_dedf :_acgec ]);};case 25:_acgec =_ddbea +1;{_dfdgc .emit (_bfeg ,_eegd [_dedf :_acgec ]);};case 26:_acgec =_ddbea +1;{_dfdgc .emit (_gecf ,_eegd [_dedf :_acgec ]);};case 27:_acgec =_ddbea +1;{_dfdgc .emit (_fggec ,_eegd [_dedf :_acgec ]);
};case 28:_acgec =_ddbea +1;{_dfdgc .emit (_aacc ,_eegd [_dedf :_acgec ]);};case 29:_acgec =_ddbea +1;{_dfdgc .emit (_bagea ,_eegd [_dedf :_acgec ]);};case 30:_acgec =_ddbea +1;{_dfdgc .emit (_bagd ,_eegd [_dedf :_acgec ]);};case 31:_acgec =_ddbea +1;{_dfdgc .emit (_cgad ,_eegd [_dedf :_acgec ]);
};case 32:_acgec =_ddbea +1;{_dfdgc .emit (_cdcc ,_eegd [_dedf :_acgec ]);};case 33:_acgec =_ddbea +1;{_dfdgc .emit (_fcgb ,_eegd [_dedf :_acgec ]);};case 34:_acgec =_ddbea ;_ddbea --;{_dfdgc .emit (_bbbg ,_eegd [_dedf :_acgec ]);};case 35:_acgec =_ddbea ;
_ddbea --;{_dfdgc .emit (_fadf ,_eegd [_dedf :_acgec ]);};case 36:_acgec =_ddbea ;_ddbea --;{_dfdgc .emit (_cceb ,_eegd [_dedf :_acgec ]);};case 37:_acgec =_ddbea ;_ddbea --;{_dfdgc .emit (_cffe ,_eegd [_dedf :_acgec ]);};case 38:_acgec =_ddbea ;_ddbea --;
{_dfdgc .emit (_dabe ,_eegd [_dedf :_acgec ]);};case 39:_acgec =_ddbea ;_ddbea --;{_dfdgc .emit (_afdfd ,_eegd [_dedf +1:_acgec -1]);};case 40:_acgec =_ddbea ;_ddbea --;{_dfdgc .emit (_egefd ,_eegd [_dedf :_acgec ]);};case 41:_acgec =_ddbea ;_ddbea --;
{_dfdgc .emit (_efefb ,_eegd [_dedf :_acgec ]);};case 42:_ddbea =(_acgec )-1;{_dfdgc .emit (_bbbg ,_eegd [_dedf :_acgec ]);};case 43:switch _efca {case 0:{_gaggb =0;goto _cffgd ;};case 1:{_ddbea =(_acgec )-1;_dfdgc .emit (_afee ,_eegd [_dedf :_acgec ]);
};case 2:{_ddbea =(_acgec )-1;_dfdgc .emit (_bbbg ,_eegd [_dedf :_acgec ]);};case 3:{_ddbea =(_acgec )-1;_dfdgc .emit (_fadf ,_eegd [_dedf :_acgec ]);};case 4:{_ddbea =(_acgec )-1;_dfdgc .emit (_caaf ,_eegd [_dedf :_acgec ]);};case 11:{_ddbea =(_acgec )-1;
_dfdgc .emit (_edbag ,_eegd [_dedf :_acgec ]);};case 14:{_ddbea =(_acgec )-1;_dfdgc .emit (_dabe ,_eegd [_dedf :_acgec ]);};case 15:{_ddbea =(_acgec )-1;_dfdgc .emit (_afdfd ,_eegd [_dedf +1:_acgec -1]);};};};};goto _cffgd ;_cffgd :_beeee =int (_cecbf [_gaggb ]);
_dcdgd =uint (_bcfdg [_beeee ]);_beeee ++;for ;_dcdgd > 0;_dcdgd --{_beeee ++;switch _bcfdg [_beeee -1]{case 0:_dedf =0;case 1:_efca =0;};};if _gaggb ==0{goto _fcdfe ;};if _ddbea ++;_ddbea !=_fdebf {goto _cebe ;};_cedff :{};if _ddbea ==_deggg {switch _gaggb {case 1:goto _befa ;
case 2:goto _befa ;case 31:goto _defgce ;case 14:goto _befa ;case 15:goto _befa ;case 32:goto _ddgfg ;case 17:goto _befa ;case 33:goto _edagg ;case 18:goto _befa ;case 19:goto _befa ;case 34:goto _decgb ;case 35:goto _fbcdd ;case 36:goto _fbcdd ;case 23:goto _bdcfe ;
case 37:goto _fbcdd ;case 38:goto _caeb ;case 39:goto _ddggb ;case 40:goto _gcdfe ;case 41:goto _gcdfe ;case 42:goto _gcdfe ;case 43:goto _edagg ;case 44:goto _befa ;case 45:goto _gcdfe ;case 46:goto _gcdfe ;case 47:goto _gcdfe ;case 48:goto _gcdfe ;case 49:goto _gcdfe ;
case 50:goto _gcdfe ;case 51:goto _gcdfe ;case 52:goto _gcdfe ;case 53:goto _gcdfe ;case 54:goto _gcdfe ;case 55:goto _gcdfe ;case 56:goto _gcdfe ;case 57:goto _gcdfe ;case 58:goto _gcdfe ;case 59:goto _befa ;};};_fcdfe :{};};if _dedf > 0{copy (_eegd [0:],_eegd [_dedf :]);
};};_ =_deggg ;if _gaggb ==_ebgd {_dfdgc .emit (_gcdeg ,nil );};close (_dfdgc ._bfbb );};

// Reference returns an invalid reference for FunctionCall.
func (_cdff FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// String returns a string representation of a horizontal range with prefix.
func (_cdfd PrefixHorizontalRange )String ()string {return _bg .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_cdfd ._fbbc .String (),_cdfd ._bdgf ,_cdfd ._egec );};const (_gbdea rmode =iota ;_dgfgc ;_ffde ;);

// Eval evaluates and returns a string.
func (_deaf String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_deaf ._gbgbe )};const _bgge ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";
func _dfdc (_egdgg []Result ,_cdgbf bool )Result {_eeff :="\u004d\u0041\u0058";if _cdgbf {_eeff ="\u004d\u0041\u0058\u0041";};if len (_egdgg )==0{return MakeErrorResult (_eeff +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aabcc :=-_a .MaxFloat64 ;for _ ,_fcac :=range _egdgg {switch _fcac .Type {case ResultTypeNumber :if (_cdgbf ||!_fcac .IsBoolean )&&_fcac .ValueNumber > _aabcc {_aabcc =_fcac .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_efcgd :=_dfdc (_fcac .ListValues (),_cdgbf );
if _efcgd .ValueNumber > _aabcc {_aabcc =_efcgd .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_aeggb :=0.0;if _cdgbf {_aeggb =_fcac .AsNumber ().ValueNumber ;};if _aeggb > _aabcc {_aabcc =_aeggb ;};default:_ed .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_eeff +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fcac .Type );
};};if _aabcc ==-_a .MaxFloat64 {_aabcc =0;};return MakeNumberResult (_aabcc );};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_cbde :=len (args );if _cbde < 3||_cbde > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_caa :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bge :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_dcbdg :=args [2].ValueNumber ;_eeab :=0.0;if _cbde >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_eeab =args [3].ValueNumber ;};_gcf :=0.0;if _cbde ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gcf =args [4].ValueNumber ;if _gcf !=0{_gcf =1;};};_gccf :=_bge *(1+_caa *_gcf )-_eeab *_caa ;_afgaf :=(_dcbdg *_caa +_bge *(1+_caa *_gcf ));return MakeNumberResult (_a .Log (_gccf /_afgaf )/_a .Log (1+_caa ));};var _cea =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};


// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_eebb :=args [0];if _eebb .Type !=ResultTypeNumber &&_eebb .Type !=ResultTypeString &&_eebb .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");
};_gcfbg :=args [1].ValueString ;switch _eebb .Type {case ResultTypeNumber :return MakeStringResult (_da .Number (_eebb .ValueNumber ,_gcfbg ));case ResultTypeString :return MakeStringResult (_da .String (_eebb .ValueString ,_gcfbg ));case ResultTypeEmpty :return MakeStringResult (_da .Number (0,_gcfbg ));
case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");
};};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eagda :=args [0].AsString ();if _eagda .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gabcd :=args [1].AsNumber ();if _gabcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgcde :=_eagda .ValueString ;if len (_cgcde )> 2&&(_dc .HasPrefix (_cgcde ,"\u0030\u0078")||_dc .HasPrefix (_cgcde ,"\u0030\u0058")){_cgcde =_cgcde [2:];};_gadc ,_cfcg :=_ee .ParseInt (_cgcde ,int (_gabcd .ValueNumber ),64);if _cfcg !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");
};return MakeNumberResult (float64 (_gadc ));};

// Reference returns an invalid reference for ConstArrayExpr.
func (_cad ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _bagd =57374;

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_bedfe (args ,_edbf ))};const _fff ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";
var _ddeed =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_cegcb :=len (args );if _cegcb < 5||_cegcb > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aeda :=args [0].ValueNumber ;if _aeda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cebg :=args [1].ValueNumber ;if _cebg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_faaa :=args [2].ValueNumber ;if _faaa ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _faaa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eddc :=args [3].ValueNumber ;if _eddc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eegg :=args [4].ValueNumber ;if _eddc > _eegg {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");
};if _eegg > _faaa {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_ccf :=2.0;if _cegcb > 5{if args [5].Type ==ResultTypeEmpty {_ccf =0.0;
}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccf =args [5].ValueNumber ;if _ccf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};};_afgd :=false ;if _cegcb > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_afgd =args [6].ValueNumber !=0;};_bbgc :=0.0;_gbda :=_a .Floor (_eddc );_cabe :=_a .Ceil (_eegg );if _afgd {for _cbed :=_gbda +1;_cbed <=_cabe ;_cbed ++{_beda :=_eedce (_aeda ,_cebg ,_faaa ,_cbed ,_ccf );if _cbed ==_gbda +1{_beda *=_a .Min (_eegg ,_gbda +1)-_eddc ;
}else if _cbed ==_cabe {_beda *=_eegg +1-_cabe ;};_bbgc +=_beda ;};}else {_bddad :=_faaa ;var _gebe float64 ;if !_ddbg (_eddc ,_a .Floor (_eddc )){if _ccf ==1{_eebd :=_faaa /2;if _eddc > _eebd ||_ddbg (_eddc ,_eebd ){_gebe =_eddc -_eebd ;_eddc =_eebd ;
_eegg -=_gebe ;_bddad ++;};};};if _ccf !=0{_aeda -=_aaf (_aeda ,_cebg ,_faaa ,_bddad ,_eddc ,_ccf );};_bbgc =_aaf (_aeda ,_cebg ,_faaa ,_faaa -_eddc ,_eegg -_eddc ,_ccf );};return MakeNumberResult (_bbgc );};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_abfde :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afgc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fdba :=args [2].ValueNumber ;if _fdba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aba :=args [3].ValueNumber ;if _aba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _aba > _fdba {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");
};_ffbg :=(_abfde -_afgc )*(_fdba -_aba +1)*2;_dcgbb :=_fdba *(_fdba +1);return MakeNumberResult (_ffbg /_dcgbb );};

// Eval evaluates and returns an expression with prefix.
func (_eddg PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_feab :=_eddg ._fafac .Reference (ctx ,ev );switch _feab .Type {case ReferenceTypeSheet :if _cadcc (_feab ,ctx ){return MakeErrorResultType (ErrorTypeName ,_bg .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_feab .Value ));
};_dfde :=ctx .Sheet (_feab .Value );return _eddg ._egbba .Eval (_dfde ,ev );default:return MakeErrorResult (_bg .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_feab .Type ));
};};const _gadd =187;

// Eval evaluates a range with prefix returning a list of results or an error.
func (_fgae PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_agad :=_fgae ._dcfd .Reference (ctx ,ev );_gaeg :=_fgae ._ddgcg .Reference (ctx ,ev );_gcbd :=_fgae ._gfeeb .Reference (ctx ,ev );switch _agad .Type {case ReferenceTypeSheet :if _cadcc (_agad ,ctx ){return MakeErrorResultType (ErrorTypeName ,_bg .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_agad .Value ));
};_ecdaa :=_dabeb (_agad ,_gaeg ,_gcbd );if _gaeg .Type ==ReferenceTypeCell &&_gcbd .Type ==ReferenceTypeCell {if _ffeaf ,_efecg :=ev .GetFromCache (_ecdaa );_efecg {return _ffeaf ;}else {_fgacf :=_cabcgf (ctx .Sheet (_agad .Value ),ev ,_gaeg .Value ,_gcbd .Value );
ev .SetCache (_ecdaa ,_fgacf );return _fgacf ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_ecdaa );default:return MakeErrorResult (_bg .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_agad .Type ));
};};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_dgede string };

// Reference returns a string reference value to a cell.
func (_cff CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_cff ._ca };};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_cbbc :=len (args );if _cbbc < 3||_cbbc > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bdega :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_bgf :=args [1].ValueNumber ;if _bgf !=float64 (int (_bgf )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_affc :=args [2].ValueNumber ;_fgce :=0.0;if _cbbc >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgce =args [3].ValueNumber ;};_gaag :=0;if _cbbc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gaag =int (args [4].ValueNumber );if _gaag !=0{_gaag =1;};};return MakeNumberResult (_cecfa (_bdega ,_bgf ,_affc ,_fgce ,_gaag ));};func _dgg (_gbcb string )bool {for _ ,_eedb :=range _dcff {_dgb :=_eedb .FindStringSubmatch (_gbcb );if len (_dgb )> 1{return true ;
};};return false ;};func _ecg (_abed float64 )bool {return _abed ==1||_abed ==2||_abed ==4};const _cffe =57347;func _gf (_beb BinOpType ,_dgf ,_cgg []Result )Result {_de :=[]Result {};for _fab :=range _dgf {_cf :=_dgf [_fab ].AsNumber ();_dcd :=_cgg [_fab ].AsNumber ();
if _cf .Type !=ResultTypeNumber ||_dcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _beb {case BinOpTypePlus :_de =append (_de ,MakeNumberResult (_cf .ValueNumber +_dcd .ValueNumber ));case BinOpTypeMinus :_de =append (_de ,MakeNumberResult (_cf .ValueNumber -_dcd .ValueNumber ));case BinOpTypeMult :_de =append (_de ,MakeNumberResult (_cf .ValueNumber *_dcd .ValueNumber ));
case BinOpTypeDiv :if _dcd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_de =append (_de ,MakeNumberResult (_cf .ValueNumber /_dcd .ValueNumber ));case BinOpTypeExp :_de =append (_de ,MakeNumberResult (_a .Pow (_cf .ValueNumber ,_dcd .ValueNumber )));
case BinOpTypeLT :_de =append (_de ,MakeBoolResult (_cf .ValueNumber < _dcd .ValueNumber ));case BinOpTypeGT :_de =append (_de ,MakeBoolResult (_cf .ValueNumber > _dcd .ValueNumber ));case BinOpTypeEQ :_de =append (_de ,MakeBoolResult (_cf .ValueNumber ==_dcd .ValueNumber ));
case BinOpTypeLEQ :_de =append (_de ,MakeBoolResult (_cf .ValueNumber <=_dcd .ValueNumber ));case BinOpTypeGEQ :_de =append (_de ,MakeBoolResult (_cf .ValueNumber >=_dcd .ValueNumber ));case BinOpTypeNE :_de =append (_de ,MakeBoolResult (_cf .ValueNumber !=_dcd .ValueNumber ));
default:return MakeErrorResult (_bg .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_beb ));};};return MakeListResult (_de );};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );
RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );
RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );
RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );
RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );
RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );
RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );
RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );
RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};func _dcdf (_adab []Result ,_ega string )(*durationArgs ,Result ){_ceca :=len (_adab );if _ceca !=5&&_ceca !=6{return nil ,MakeErrorResult (_ega +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cafb ,_bbcc ,_eeec :=_agcb (_adab [0],_adab [1],_ega );if _eeec .Type ==ResultTypeError {return nil ,_eeec ;};_ffag :=_adab [2];if _ffag .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ega +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_bbd :=_ffag .ValueNumber ;if _bbd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_eaff :=_adab [3];if _eaff .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ega +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_ccag :=_eaff .ValueNumber ;if _ccag < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_bfdf :=_adab [4];if _bfdf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ega +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dba :=float64 (int (_bfdf .ValueNumber ));if !_ecg (_dba ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_cfbe :=0;if _ceca ==6&&_adab [5].Type !=ResultTypeEmpty {_deeb :=_adab [5];
if _deeb .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ega +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cfbe =int (_deeb .ValueNumber );
if !_gbaa (_cfbe ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_ega );};};return &durationArgs {_cafb ,_bbcc ,_bbd ,_ccag ,_dba ,_cfbe },_bgb ;
};func (_fgf *evCache )GetFromCache (key string )(Result ,bool ){_fgf ._ged .Lock ();_acg ,_cac :=_fgf ._dab [key ];_fgf ._ged .Unlock ();return _acg ,_cac ;};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_babg :=_ggfe (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _babg .Type !=ResultTypeEmpty {return _babg ;};_baeeg :=_effga (args [1:]);_gcdb :=-_a .MaxFloat64 ;_cedc :=_ggbe (args [0]);for _ ,_dgba :=range _baeeg {_aegba :=_cedc [_dgba ._ecfac ][_dgba ._aged ].ValueNumber ;
if _gcdb < _aegba {_gcdb =_aegba ;};};if _gcdb ==-_a .MaxFloat64 {_gcdb =0;};return MakeNumberResult (float64 (_gcdb ));};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_dcace :=_dc .Split (v ,"\u003a");if len (_dcace )!=2{return nil ;};_aeacd ,_ :=_ee .Atoi (_dcace [0]);_daadg ,_ :=_ee .Atoi (_dcace [1]);if _aeacd > _daadg {_aeacd ,_daadg =_daadg ,_aeacd ;};return HorizontalRange {_fddf :_aeacd ,_gccbd :_daadg };
};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cabb :=[]float64 {};
for _ ,_ggae :=range args {switch _ggae .Type {case ResultTypeString :_bdebe :=_ggae .AsNumber ();if _bdebe .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_cabb =append (_cabb ,_bdebe .ValueNumber );case ResultTypeList :_gdgb :=LCM (_ggae .ValueList );if _gdgb .Type !=ResultTypeNumber {return _gdgb ;};_cabb =append (_cabb ,_gdgb .ValueNumber );case ResultTypeNumber :_cabb =append (_cabb ,_ggae .ValueNumber );
case ResultTypeEmpty :case ResultTypeError :return _ggae ;};};if len (_cabb )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if _cabb [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_cabb )==1{return MakeNumberResult (_cabb [0]);
};_feaac :=_cabb [0];for _acab :=1;_acab < len (_cabb );_acab ++{if _cabb [_acab ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_feaac =_fcce (_feaac ,_cabb [_acab ]);};return MakeNumberResult (_feaac );};type yySymType struct{_fdcf int ;_dcdbc *node ;_cfddd Expression ;_cgaf []Expression ;_dcdda [][]Expression ;};var _eddbg =[...]struct{_aeedb int ;_fdfdc int ;_fbbga string ;
}{};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bagg :=args [0].AsString ();if _bagg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");
};_dgcfc :="\u0041\u0031";if len (args )==2{_abffd :=args [1].Ref ;if _abffd .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};_dgcfc =_abffd .Value ;};switch _bagg .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_gcce ,_cdgdb :=_fb .ParseCellReference (_dgcfc );if _cdgdb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dgcfc );
};_adde :="\u0024"+_gcce .Column +"\u0024"+_ee .Itoa (int (_gcce .RowIdx ));if _gcce .SheetName !=""{_adde =_gcce .SheetName +"\u0021"+_adde ;};return MakeStringResult (_adde );case "\u0063\u006f\u006c":_aabg ,_gageb :=_fb .ParseCellReference (_dgcfc );
if _gageb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dgcfc );};return MakeNumberResult (float64 (_aabg .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_cfgg :=_dc .Contains (ctx .GetFormat (_dgcfc ),"\u005b\u0052\u0045D\u005d");
return MakeBoolResult (_cfgg );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_abfg :="\u0047";
_ddfd :=ctx .GetFormat (_dgcfc );if _ddfd =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_egag .MatchString (_ddfd ){_abfg ="\u0046\u0030";}else if _ddfd =="\u0030\u0025"{_abfg ="\u0050\u0030";}else if _ddfd =="\u004d\u004d\u004d\u0020\u0044\u0044"{_abfg ="\u0044\u0032";
}else if _ddfd =="\u004d\u004d\u002fY\u0059"{_abfg ="\u0044\u0033";}else if _ddfd =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_ddfd =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_abfg ="\u0044\u0034";
}else if _ddfd =="\u004d\u004d\u005c\u002d\u0044\u0044"{_abfg ="\u0044\u0035";}else if _ddfd =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_abfg ="\u0044\u0036";}else if _ddfd =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_abfg ="\u0044\u0037";
}else if _ddfd =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_abfg ="\u0044\u0038";}else if _ddfd =="\u0048\u0048\u003aM\u004d"{_abfg ="\u0044\u0039";}else if _cfce .MatchString (_ddfd ){_abfg ="\u002e\u0030";}else if _bdeb .MatchString (_ddfd ){_abfg ="\u002e\u0030\u0028\u0029";
}else if _faebcd .MatchString (_ddfd ){_abfg ="\u0043\u0030";}else if _egfac .MatchString (_ddfd )||_egaf .MatchString (_ddfd ){_abfg ="\u0044\u0031";}else if _bdag :=_adbef .FindStringSubmatch (_ddfd );len (_bdag )> 1{_abfg ="\u0046"+_ee .Itoa (len (_bdag [1]));
}else if _dbag :=_aegb .FindStringSubmatch (_ddfd );len (_dbag )> 1{_abfg ="\u002e"+_ee .Itoa (len (_dbag [2]));}else if _dcac :=_bgagge .FindStringSubmatch (_ddfd );len (_dcac )> 1{_abfg ="\u0050"+_ee .Itoa (len (_dcac [2]));}else if _fcca :=_dfbbb .FindStringSubmatch (_ddfd );
len (_fcca )> 1{_abfg ="\u0043"+_ffbe (_fcca ,1);}else if _ddbc :=_ffgd .FindStringSubmatch (_ddfd );len (_ddbc )> 1{_abfg ="\u0043"+_ffbe (_ddbc ,1);}else if _bacc :=_cgdd .FindStringSubmatch (_ddfd );len (_bacc )> 1{_abfg ="\u002e"+_ffbe (_bacc ,1)+"\u0028\u0029";
}else if _cbgg :=_bfca .FindStringSubmatch (_ddfd );len (_cbgg )> 1{_abfg ="\u002e"+_ffbe (_cbgg ,1);}else if _ddea :=_aadf .FindStringSubmatch (_ddfd );len (_ddea )> 1{_abfg ="\u0053"+_ffbe (_ddea ,3);};if _abfg !="\u0047"&&_dc .Contains (_ddfd ,"\u005b\u0052\u0045D\u005d"){_abfg +="\u002d";
};return MakeStringResult (_abfg );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_efa :=ctx .GetFormat (_dgcfc );if _deef .MatchString (_efa ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_dgcfc ));
case "\u0070r\u006f\u0074\u0065\u0063\u0074":_bffe :=0.0;if ctx .GetLocked (_dgcfc ){_bffe =1.0;};return MakeNumberResult (_bffe );case "\u0072\u006f\u0077":_ddabe ,_fgac :=_fb .ParseCellReference (_dgcfc );if _fgac !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dgcfc );
};return MakeNumberResult (float64 (_ddabe .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");
};case "\u0077\u0069\u0064t\u0068":_cbbcf ,_gaad :=_fb .ParseCellReference (_dgcfc );if _gaad !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dgcfc );};if _cbbcf .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_cbbcf .ColumnIdx )));
}else {return MakeNumberResult (ctx .Sheet (_cbbcf .SheetName ).GetWidth (int (_cbbcf .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_bagg .ValueString );
};const _dceae ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";


// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_agbd :=args [0];switch _agbd .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_fda :=_dgfe (_agbd .ValueNumber );return MakeNumberResult (float64 (_fda .Minute ()));case ResultTypeString :_dcfg :=_dc .ToLower (_agbd .ValueString );if !_dgg (_dcfg ){_ ,_ ,_ ,_egd ,_bcba :=_gfg (_dcfg );if _bcba .Type ==ResultTypeError {_bcba .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";
return _bcba ;};if _egd {return MakeNumberResult (0);};};_ ,_deg ,_ ,_ ,_ ,_efc :=_dfac (_dcfg );if _efc .Type ==ResultTypeError {return _efc ;};return MakeNumberResult (float64 (_deg ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");
};};

// Error is called in the case of parsing error and saves an error to a plex.
func (_adcgc *plex )Error (s string ){_ed .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_adcgc ._fbgf =s ;};func _bdae (_bgae int )string {if _bgae >=1&&_bgae -1< len (_abagc ){if _abagc [_bgae -1]!=""{return _abagc [_bgae -1];
};};return _bg .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_bgae );};const _afdfd =57354;var InvalidReferenceContext =&ivr {};func (_eeee *plex )Lex (lval *yySymType )int {_gfgf =true ;_bdgd :=<-_eeee ._ccab ;if _bdgd !=nil {lval ._dcdbc =_bdgd ;return int (lval ._dcdbc ._aaeaf );
};return 0;};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ecgc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fcbc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cddb :=args [2].ValueNumber ;if _cddb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult ((_ecgc -_fcbc )/_cddb );};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ggg :=args [0].AsNumber ();_gcae :=args [1].AsNumber ();if _ggg .Type !=ResultTypeNumber ||_gcae .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_decfb :=_a .Trunc (_ggg .ValueNumber );_bdad :=_a .Trunc (_gcae .ValueNumber );if _bdad > _decfb {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");
};if _bdad ==_decfb ||_bdad ==0{return MakeNumberResult (1);};_dbba :=float64 (1);for _bgdd :=float64 (1);_bgdd <=_bdad ;_bgdd ++{_dbba *=(_decfb +1-_bgdd )/_bgdd ;};return MakeNumberResult (_dbba );};func _ddbg (_cggeg ,_dadf float64 )bool {return _a .Abs (_cggeg -_dadf )< 1.0e-6};
func _bcgg (_afbc Result ,_bfged ,_efbc string )(string ,Result ){switch _afbc .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _afbc .Value (),_bgb ;default:return "",MakeErrorResult (_bfged +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_efbc +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");
};};func _dfac (_gdd string )(int ,int ,float64 ,bool ,bool ,Result ){_bbga :="";_cfab :=[]string {};for _gfa ,_ccdg :=range _cbc {_cfab =_ccdg .FindStringSubmatch (_gdd );if len (_cfab )> 1{_bbga =_gfa ;break ;};};if _bbga ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabd );
};_fede :=_cfab [1]=="";_cfab =_cfab [49:];_afbg :=len (_cfab );_gg :=_cfab [_afbg -1];_cgcb :=_gg =="\u0061\u006d";_eag :=_gg =="\u0070\u006d";var _addg ,_geb int ;var _ccbf float64 ;var _dge error ;switch _bbga {case "\u0068\u0068":_addg ,_dge =_ee .Atoi (_cfab [0]);
if _dge !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabd );};_geb =0;_ccbf =0;case "\u0068\u0068\u003am\u006d":_addg ,_dge =_ee .Atoi (_cfab [0]);if _dge !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabd );
};_geb ,_dge =_ee .Atoi (_cfab [2]);if _dge !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabd );};_ccbf =0;case "\u006d\u006d\u003as\u0073":_addg =0;_geb ,_dge =_ee .Atoi (_cfab [0]);if _dge !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabd );
};_ccbf ,_dge =_ee .ParseFloat (_cfab [2],64);if _dge !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabd );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_addg ,_dge =_ee .Atoi (_cfab [0]);if _dge !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabd );
};_geb ,_dge =_ee .Atoi (_cfab [2]);if _dge !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabd );};_ccbf ,_dge =_ee .ParseFloat (_cfab [4],64);if _dge !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabd );
};};if _geb >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabd );};if _cgcb ||_eag {if _addg > 12||_ccbf >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabd );}else if _addg ==12{_addg =0;};}else if _addg >=24||_ccbf >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabd );
};return _addg ,_geb ,_ccbf ,_eag ,_fede ,_bgb ;};func _ffbe (_bbgg []string ,_adcgd int )string {return _ee .Itoa (len (_bbgg [len (_bbgg )-1-_adcgd ]))};type Expression interface{Eval (_gcd Context ,_dde Evaluator )Result ;Reference (_cbb Context ,_eda Evaluator )Reference ;
String ()string ;Update (_aad *_af .UpdateQuery )Expression ;};var _fe =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_ggad :=_ggfe (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _ggad .Type !=ResultTypeEmpty {return _ggad ;};_gaca :=_effga (args [1:]);_fcbaf :=0.0;_afagd :=_ggbe (args [0]);for _ ,_acf :=range _gaca {_fcbaf +=_afagd [_acf ._ecfac ][_acf ._aged ].ValueNumber ;
};return MakeNumberResult (float64 (_fcbaf ));};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeString );};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;
BinOpTypeConcat ;);func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fefea :=args [0].AsNumber ();if _fefea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cfag :=float64 (0);if len (args )> 1{_cdgde :=args [1].AsNumber ();if _cdgde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cfag =_cdgde .ValueNumber ;};_afef :=_fefea .ValueNumber ;_fcabb :=1.0;if _cfag >=0{_fcabb =_a .Pow (1/10.0,_cfag );}else {return MakeNumberResult (0);};_afef ,_ceef :=_a .Modf (_afef /_fcabb );_ggfc :=0.99999;if _ceef > _ggfc {_afef ++;}else if _ceef < -_ggfc {_afef --;
};_ =_ceef ;return MakeNumberResult (_afef *_fcabb );};func (_cefe *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_eg :lhs ,_ec :rhs ,_dg :op };};func _gefc (_gbbg string ,_bafc []Result )(*parsedSearchObject ,Result ){_fccc :=len (_bafc );if _fccc !=2&&_fccc !=3{return nil ,MakeErrorResult (_gbbg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fgddc :=_bafc [0];if _fgddc .Type ==ResultTypeError {return nil ,_fgddc ;};if _fgddc .Type !=ResultTypeString &&_fgddc .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_bfgaa :=_bafc [1];if _bfgaa .Type ==ResultTypeError {return nil ,_bfgaa ;};if _bfgaa .Type !=ResultTypeString &&_bfgaa .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");
};_bfgg :=_bfgaa .Value ();_aebda :=_fgddc .Value ();_dfbe :=1;if _fccc ==3&&_bafc [2].Type !=ResultTypeEmpty {_baegd :=_bafc [2];if _baegd .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");
};_dfbe =int (_baegd .ValueNumber );if _dfbe < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};if _dfbe > len (_bfgg ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};};return &parsedSearchObject {_aebda ,_bfgg ,_dfbe },_bgb ;};const _egefd =57370;

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_edgc :=args [0].ValueNumber ;if _edgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eagg :=args [1].ValueNumber ;if _eagg <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfcd :=args [2].ValueNumber ;if _cfcd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");
};return MakeNumberResult ((_a .Log10 (_cfcd )-_a .Log10 (_eagg ))/_a .Log10 (1+_edgc ));};

// Eval evaluates and returns the result of a function call.
func (_cegag FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_cdde :=LookupFunction (_cegag ._accc );if _cdde !=nil {_gcgf :=make ([]Result ,len (_cegag ._cega ));for _cgbc ,_bedd :=range _cegag ._cega {_gcgf [_cgbc ]=_bedd .Eval (ctx ,ev );_gcgf [_cgbc ].Ref =_bedd .Reference (ctx ,ev );
};if _ ,_afeb :=_fcgcf [_cegag ._accc ];!_afeb {if _dfbce ,_dgee :=_abgg (_gcgf );_dfbce {return _dgee ;};};return _cdde (_gcgf );};_fbfdb :=LookupFunctionComplex (_cegag ._accc );if _fbfdb !=nil {_ecabf :=make ([]Result ,len (_cegag ._cega ));for _acdb ,_aeba :=range _cegag ._cega {_ecabf [_acdb ]=_aeba .Eval (ctx ,ev );
_ecabf [_acdb ].Ref =_aeba .Reference (ctx ,ev );};if _ ,_ggba :=_fcgcf [_cegag ._accc ];!_ggba {if _eaeg ,_cdfbe :=_abgg (_ecabf );_eaeg {return _cdfbe ;};};return _fbfdb (ctx ,ev ,_ecabf );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_cegag ._accc );
};var _ccbg =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _dfcfe (args ,true )};func _abgg (_abebd []Result )(bool ,Result ){for _ ,_dcdfg :=range _abebd {if _dcdfg .Type ==ResultTypeError {return true ,_dcdfg ;};};return false ,MakeEmptyResult ();};func (_geaae *ivr )SetOffset (col ,row uint32 ){};
func _ggbe (_dabf Result )[][]Result {switch _dabf .Type {case ResultTypeArray :return _dabf .ValueArray ;case ResultTypeList :return [][]Result {_dabf .ValueList };default:return [][]Result {};};};

// ReferenceType is a type of reference
//
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// SetLocked does nothing for the invalid reference context.
func (_beaef *ivr )SetLocked (cellRef string ,locked bool ){};var _fbgeg =[...]int {1};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_cfeda :=ctx .GetEpoch ();_gfbe ,_ebdc :=_abdf (args [0].Value (),_cfeda );if _ebdc !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_abbd :=_gfbe .Year ();return MakeBoolResult (_fbce (_abbd ));};

// Eval evaluates and returns a number.
func (_dgdff Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_dgdff ._fbbgb )};func (_agd BinOpType )String ()string {if _agd >=BinOpType (len (_efe )-1){return _bg .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_agd );
};return _aec [_efe [_agd ]:_efe [_agd +1]];};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dcecb :=args [0].AsString ();if _dcecb .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (len (_dcecb .ValueString )));};

// Update returns the same object as updating sheet references does not affect Error.
func (_defe Error )Update (q *_af .UpdateQuery )Expression {return _defe };

// Eval evaluates and returns the result of an empty expression.
func (_bed EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_afa ,_dggg :=_dcdf (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _dggg .Type ==ResultTypeError {return _dggg ;};_gec :=_afa ._aee ;_fgdd :=_afa ._eeea ;_fbcde :=_afa ._eabd ;_dbdec :=_afa ._fdca ;_ceff :=_afa ._bbaad ;
_fagda :=_afa ._dcgg ;return _fcad (_gec ,_fgdd ,_fbcde ,_dbdec ,_ceff ,_fagda );};

// String returns a string representation of FunctionCall expression.
func (_dedg FunctionCall )String ()string {_efbcf :=_be .Buffer {};_efbcf .WriteString (_dedg ._accc );_efbcf .WriteString ("\u0028");_dfced :=len (_dedg ._cega )-1;for _gabfb ,_ecce :=range _dedg ._cega {_efbcf .WriteString (_ecce .String ());if _gabfb !=_dfced {_efbcf .WriteString ("\u002c");
};};_efbcf .WriteString ("\u0029");return _efbcf .String ();};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_aagb :=args [0].Ref ;if _aagb .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");
};_fffeg ,_ebdg :=_fb .ParseCellReference (_aagb .Value );if _ebdg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_aagb .Value );};return MakeNumberResult (float64 (_fffeg .RowIdx ));
};var _gbgfg =map[string ]FunctionComplex {};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_bdgce ,_fcebd ,_gfcf :=_bbgaa (from ,to );if _gfcf !=nil {_ed .Log .Debug (_gfcf .Error ());return NewError (_gfcf .Error ());};return PrefixRangeExpr {_dcfd :pfx ,_ddgcg :_bdgce ,_gfeeb :_fcebd };
};func _fdbd (_ffac Result )bool {_bcbe :=_ffac .Type ;return _bcbe !=ResultTypeArray &&_bcbe !=ResultTypeList ;};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_bedfe (args ,_cbagb ))};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ffcc ,_aefae ,_cabce :=_agcb (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _cabce .Type ==ResultTypeError {return _cabce ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbfg :=_aefae -_ffcc ;if _fbfg > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");
};_eggf :=args [2].ValueNumber ;if _eggf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult ((365*_eggf )/(360-_eggf *_fbfg ));};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adfb :=args [0].AsNumber ();_faef :=args [1].AsNumber ();if _adfb .Type !=ResultTypeNumber ||_faef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gggf :=_a .Trunc (_adfb .ValueNumber );_eabf :=_a .Trunc (_faef .ValueNumber );if _gggf < _eabf {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");
};if _gggf ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_gggf +_eabf -1);args [1]=MakeNumberResult (_gggf -1);return Combin (args );};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ggddb :=args [0].AsString ();if _ggddb .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fbdbf :=_be .Buffer {};_bebgc :=false ;for _ ,_dcce :=range _ggddb .ValueString {if !_bebgc &&_bf .IsLetter (_dcce ){_fbdbf .WriteRune (_bf .ToUpper (_dcce ));}else {_fbdbf .WriteRune (_bf .ToLower (_dcce ));};_bebgc =_bf .IsLetter (_dcce );};return MakeStringResult (_fbdbf .String ());
};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_fde :=_dc .ToLower (args [0].ValueString );if !_afg (_fde ){_ ,_ ,_ ,_ ,_gcgd ,_gfbc :=_dfac (_fde );if _gfbc .Type ==ResultTypeError {_gfbc .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";
return _gfbc ;};if _gcgd {return MakeNumberResult (0);};};_cdc ,_eb ,_adcb ,_ ,_daf :=_gfg (_fde );if _daf .Type ==ResultTypeError {return _daf ;};return MakeNumberResult (_defge (_cdc ,_eb ,_adcb ));};const _gcdeg =57350;func _dfcfe (_gbae []Result ,_egbg bool )Result {_bbebc :="\u004d\u0049\u004e";
if _egbg {_bbebc ="\u004d\u0049\u004e\u0041";};if len (_gbae )==0{return MakeErrorResult (_bbebc +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgdac :=_a .MaxFloat64 ;for _ ,_edaa :=range _gbae {switch _edaa .Type {case ResultTypeNumber :if (_egbg ||!_edaa .IsBoolean )&&_edaa .ValueNumber < _cgdac {_cgdac =_edaa .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_adgf :=_dfcfe (_edaa .ListValues (),_egbg );
if _adgf .ValueNumber < _cgdac {_cgdac =_adgf .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_fggb :=0.0;if _egbg {_fggb =_edaa .AsNumber ().ValueNumber ;};if _fggb < _cgdac {_cgdac =_fggb ;};default:_ed .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_bbebc +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_edaa .Type );
};};if _cgdac ==_a .MaxFloat64 {_cgdac =0;};return MakeNumberResult (_cgdac );};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_dc .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_gbgbe :v };};

// Match implements the MATCH function.
func Match (args []Result )Result {_cgcac :=len (args );if _cgcac !=2&&_cgcac !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fceb :=1;if _cgcac ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_deed :=args [2].ValueNumber ;if _deed ==-1||_deed ==0{_fceb =int (_deed );};};_gabe :=args [1];var _edec []Result ;switch _gabe .Type {case ResultTypeList :_edec =_gabe .ValueList ;case ResultTypeArray :_caef :=_gabe .ValueArray ;for _ ,_bdfe :=range _caef {if len (_bdfe )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_edec =append (_edec ,_bdfe [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_gfeg :=_cfdf (args [0]);switch _fceb {case 0:for _gefb ,_daee :=range _edec {if _gfgb (_daee ,_gfeg ){return MakeNumberResult (float64 (_gefb +1));};};case -1:for _feffb :=0;_feffb < len (_edec );_feffb ++{if _gfgb (_edec [_feffb ],_gfeg ){return MakeNumberResult (float64 (_feffb +1));
};if _gfeg ._ceffb &&(_edec [_feffb ].ValueNumber < _gfeg ._dcbe ){if _feffb ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_feffb ));};};case 1:for _dadg :=0;_dadg < len (_edec );_dadg ++{if _gfgb (_edec [_dadg ],_gfeg ){return MakeNumberResult (float64 (_dadg +1));
};if _gfeg ._ceffb &&(_edec [_dadg ].ValueNumber > _gfeg ._dcbe ){if _dadg ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_dadg ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_accc :name ,_cega :args };};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_agcgg :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_agcgg =int (args [1].ValueNumber );if _agcgg < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");
};if _agcgg ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_bgbec :=args [0].Value ();
_gdfe :=len (_bgbec );if _agcgg > _gdfe {return MakeStringResult (_bgbec );};return MakeStringResult (_bgbec [_gdfe -_agcgg :_gdfe ]);};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_bfcf :=args [0];if _bfcf .Type ==ResultTypeList {_dceg :=[][]Result {};for _ ,_degc :=range _bfcf .ValueList {_dceg =append (_dceg ,[]Result {_degc });};return MakeArrayResult (_dceg );};_dbcca :=make ([][]Result ,len (_bfcf .ValueArray [0]));for _ ,_gffg :=range _bfcf .ValueArray {for _cbage ,_gffe :=range _gffg {_dbcca [_cbage ]=append (_dbcca [_cbage ],_gffe );
};};return MakeArrayResult (_dbcca );};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acaba :=args [0];if _acaba .Type ==ResultTypeNumber {return _acaba ;};if _acaba .Type ==ResultTypeString {_ebcc ,_cgacd :=_ee .ParseFloat (_acaba .Value (),64);if _cgacd ==nil {return MakeNumberResult (_ebcc );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");
};

// GetFilename returns an empty string for the invalid reference context.
func (_ebacc *ivr )GetFilename ()string {return ""};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _dfcfe (args ,false )};

// String returns a string representation of a named range.
func (_ffca NamedRangeRef )String ()string {return _ffca ._bdbc };func _dcbc (_abdfc []Result )[]float64 {_eaedb :=make ([]float64 ,0);for _ ,_ggfee :=range _abdfc {if _ggfee .Type ==ResultTypeEmpty {continue ;};_ggfee =_ggfee .AsNumber ();switch _ggfee .Type {case ResultTypeNumber :if !_ggfee .IsBoolean {_eaedb =append (_eaedb ,_ggfee .ValueNumber );
};case ResultTypeList ,ResultTypeArray :_eaedb =append (_eaedb ,_dcbc (_ggfee .ListValues ())...);case ResultTypeString :default:_ed .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ggfee .Type );
};};return _eaedb ;};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_cedfa :=_dc .Split (v ,"\u003a");if len (_cedfa )!=2{return nil ;};_eaeeg ,_ :=_ee .Atoi (_cedfa [0]);_bdee ,_ :=_ee .Atoi (_cedfa [1]);if _eaeeg > _bdee {_eaeeg ,_bdee =_bdee ,_eaeeg ;
};return PrefixHorizontalRange {_fbbc :pfx ,_bdgf :_eaeeg ,_egec :_bdee };};func (_faacb *noCache )SetCache (key string ,value Result ){};

// CellRef is a reference to a single cell
type CellRef struct{_ca string };

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};func _ggge (_ggdg [][]Result )float64 {if len (_ggdg )==2{_cecac :=_ggdg [0][0].AsNumber ();
_bdfb :=_ggdg [0][1].AsNumber ();_fdab :=_ggdg [1][0].AsNumber ();_bdadg :=_ggdg [1][1].AsNumber ();if _cecac .Type !=ResultTypeNumber ||_bdfb .Type !=ResultTypeNumber ||_fdab .Type !=ResultTypeNumber ||_bdadg .Type !=ResultTypeNumber {return _a .NaN ();
};return _cecac .ValueNumber *_bdadg .ValueNumber -_fdab .ValueNumber *_bdfb .ValueNumber ;};_cabg :=float64 (0);_cbcd :=float64 (1);for _eaee :=range _ggdg {_cabg +=_cbcd *_ggdg [0][_eaee ].ValueNumber *_ggge (_bfgd (_ggdg ,_eaee ));_cbcd *=-1;};return _cabg ;
};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_eeaa :=args [0].ValueNumber ;if _eeaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};_accb ,_fabbd :=_egac (args [1],args [2],"\u0058\u004e\u0050\u0056");if _fabbd .Type ==ResultTypeError {return _fabbd ;};_fbbg :=_accb ._adf ;_baaa :=_accb ._dgcf ;_gcde :=0.0;_ecgdb :=_baaa [0];for _ecac ,_dbb :=range _fbbg {_gcde +=_dbb /_a .Pow (1+_eeaa ,(_baaa [_ecac ]-_ecgdb )/365);
};return MakeNumberResult (_gcde );};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_fafca :=args [0].AsNumber ();if _fafca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gcbb :=float64 (1);if _fafca .ValueNumber < 0{_gcbb =-1;};if len (args )> 1{_ddfde :=args [1].AsNumber ();if _ddfde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");
};_gcbb =_a .Abs (_ddfde .ValueNumber );};if len (args )==1{return MakeNumberResult (_a .Floor (_fafca .ValueNumber ));};_eebf :=_fafca .ValueNumber ;_eebf ,_agccd :=_a .Modf (_eebf /_gcbb );if _agccd !=0{if _fafca .ValueNumber < 0{_eebf --;};};return MakeNumberResult (_eebf *_gcbb );
};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_gbd :=&defEval {};_gbd .evCache =_adb ();return _gbd };

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_accg :=MakeNumberResult (0);for _ ,_fceba :=range args {_fceba =_fceba .AsNumber ();switch _fceba .Type {case ResultTypeNumber :_accg .ValueNumber +=_fceba .ValueNumber ;case ResultTypeList ,ResultTypeArray :_edad :=Sum (_fceba .ListValues ());
if _edad .Type !=ResultTypeNumber {return _edad ;};_accg .ValueNumber +=_edad .ValueNumber ;case ResultTypeString :case ResultTypeError :return _fceba ;case ResultTypeEmpty :default:return MakeErrorResult (_bg .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fceba .Type ));
};};return _accg ;};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};func _effga (_fgegd []Result )[]rangeIndex {_afcea :=[]rangeIndex {};_beba :=len (_fgegd );for _dabaa :=0;_dabaa < _beba -1;
_dabaa +=2{_fedeb :=[]rangeIndex {};_eegb :=_ggbe (_fgegd [_dabaa ]);_cdgf :=_cfdf (_fgegd [_dabaa +1]);if _dabaa ==0{for _fdagd ,_ccdf :=range _eegb {for _ecgcf ,_fcaa :=range _ccdf {if _aaab (_fcaa ,_cdgf ){_fedeb =append (_fedeb ,rangeIndex {_fdagd ,_ecgcf });
};};};}else {for _ ,_ggcec :=range _afcea {_fffgc :=_eegb [_ggcec ._ecfac ][_ggcec ._aged ];if _aaab (_fffgc ,_cdgf ){_fedeb =append (_fedeb ,_ggcec );};};};if len (_fedeb )==0{return []rangeIndex {};};_afcea =_fedeb [:];};return _afcea ;};var _eccf []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
func _efgb (_ggaab Result )Result {if _ggaab .Type ==ResultTypeEmpty {return _ggaab ;};_ggbf :=_ggaab .AsString ();if _ggbf .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _ggaab .IsBoolean {if _ggbf .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _ggbf .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};}else {return MakeStringResult (_dc .ToLower (_ggbf .ValueString ));};};

// String returns a string of a range.
func (_cdfa Range )String ()string {return _bg .Sprintf ("\u0025\u0073\u003a%\u0073",_cdfa ._bbef .String (),_cdfa ._bfec .String ());};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_daad :=args [0].AsNumber ();if _daad .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bgbd ,_bebdd :=_a .Modf (_daad .ValueNumber );if _bebdd < 0{_bgbd --;};return MakeNumberResult (_bgbd );};const _abac =57364;

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_bdc string ,_fbc Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_ced string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_bc .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_fge int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_beg string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_faba string )string ;

// GetFormat returns if cell is protected.
GetLocked (_begf string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_cde string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_gfb string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_cfd ,_ge int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_ffc string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_egg string ,_edbb bool );

// NamedRange returns a named range.
NamedRange (_ddg string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_ac ,_ccc uint32 );};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};for _bdfc :=0;_bdfc < len (args )-1;_bdfc +=2{if args [_bdfc ].ValueNumber ==1{return args [_bdfc +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Update updates the FunctionCall references after removing a row/column.
func (_cacdf FunctionCall )Update (q *_af .UpdateQuery )Expression {_babc :=[]Expression {};for _ ,_degde :=range _cacdf ._cega {_feeb :=_degde .Update (q );_babc =append (_babc ,_feeb );};return FunctionCall {_accc :_cacdf ._accc ,_cega :_babc };};func _ddgc (_dggf ,_adbg float64 ,_cfge ,_cgd int )float64 {_cddg :=_dgfe (_dggf );
_fada :=_dgfe (_adbg );_cecd :=_efge (_cddg ,_fada ,_cfge ,_cgd );return _aef (_cecd ,_cddg ,_cgd );};func _afgb (_eec int )bool {return _eec ==0||_eec ==4};func _dgfe (_fgg float64 )_bc .Time {_bebd :=int64 ((_fgg -_gbde )*_feb );return _bc .Unix (0,_bebd ).UTC ();
};const _gb =_bc .Second *1;const _cceb =57346;

// String returns a string representation of a range with prefix.
func (_gcddc PrefixRangeExpr )String ()string {return _bg .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gcddc ._dcfd .String (),_gcddc ._ddgcg .String (),_gcddc ._gfeeb .String ());};func _deaa (_decf []Result ,_eafe bool )Result {var _eccdb string ;
if _eafe {_eccdb ="\u004c\u0041\u0052G\u0045";}else {_eccdb ="\u0053\u004d\u0041L\u004c";};if len (_decf )!=2{return MakeErrorResult (_eccdb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gfed :=_decf [0];var _bgfbb [][]Result ;switch _gfed .Type {case ResultTypeArray :_bgfbb =_gfed .ValueArray ;case ResultTypeList :_bgfbb =[][]Result {_gfed .ValueList };default:return MakeErrorResult (_eccdb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");
};if len (_bgfbb )==0{return MakeErrorResult (_eccdb +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};if _decf [1].Type !=ResultTypeNumber {return MakeErrorResult (_eccdb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_ffeec :=_decf [1].ValueNumber ;if _ffeec < 1{return MakeErrorResultType (ErrorTypeNum ,_eccdb +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_eefe :=int (_ffeec );if float64 (_eefe )!=_ffeec {return MakeErrorResultType (ErrorTypeNum ,_eccdb +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_eacf :=[]float64 {};for _ ,_abada :=range _bgfbb {for _ ,_degf :=range _abada {if _degf .Type ==ResultTypeNumber {_eacf =append (_eacf ,_degf .ValueNumber );};};};if _eefe > len (_eacf ){return MakeErrorResultType (ErrorTypeNum ,_eccdb +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_fadga :=_gd .MergeSort (_eacf );if _eafe {return MakeNumberResult (_fadga [len (_fadga )-_eefe ]);}else {return MakeNumberResult (_fadga [_eefe -1]);};};

// Reference returns a string reference value to an expression with prefix.
func (_cffge PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_bebf :=_cffge ._fafac .Reference (ctx ,ev );_afge :=_cffge ._egbba .Reference (ctx ,ev );if _bebf .Type ==ReferenceTypeSheet &&_afge .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_bebf .Value +"\u0021"+_afge .Value };
};return ReferenceInvalid ;};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_fbdga :=args [0].AsNumber ();if _fbdga .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_faabe :=_a .Signbit (_fbdga .ValueNumber );_eaba ,_bcdb :=_a .Modf ((_fbdga .ValueNumber -1)/2);_ebab :=_eaba *2+1;if _bcdb !=0{if !_faabe {_ebab +=2;}else {_ebab -=2;};};return MakeNumberResult (_ebab );};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afcbg :=0;_agfd :=false ;for _ ,_ebaa :=range args {switch _ebaa .Type {case ResultTypeList ,ResultTypeArray :_bdddf :=Xor (_ebaa .ListValues ());if _bdddf .Type ==ResultTypeError {return _bdddf ;};if _bdddf .ValueNumber !=0{_afcbg ++;};_agfd =true ;
case ResultTypeNumber :if _ebaa .ValueNumber !=0{_afcbg ++;};_agfd =true ;case ResultTypeString :case ResultTypeError :return _ebaa ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");
};};if !_agfd {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_afcbg %2!=0);};func _bfcgb (_fca []Result ,_gef string )(*couponArgs ,Result ){_gff :=len (_fca );
if _gff !=3&&_gff !=4{return nil ,MakeErrorResult (_gef +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_feff ,_dead ,_gca :=_agcb (_fca [0],_fca [1],_gef );
if _gca .Type ==ResultTypeError {return nil ,_gca ;};if _fca [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gef +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfbcg :=_fca [2].ValueNumber ;if !_ecg (_gfbcg ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_gef );};_eceb :=0;if _gff ==4&&_fca [3].Type !=ResultTypeEmpty {if _fca [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gef +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eceb =int (_fca [3].ValueNumber );if !_gbaa (_eceb ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_gef );
};};return &couponArgs {_feff ,_dead ,int (_gfbcg ),_eceb },_bgb ;};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (ev .LastEvalIsRef ());};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];
};return args [0];};func _fccdd (_bcfb []Result ,_daeag []string ,_abaec bool )[]string {for _ ,_eebfa :=range _bcfb {switch _eebfa .Type {case ResultTypeEmpty :if !_abaec {_daeag =append (_daeag ,"");};case ResultTypeString :if _eebfa .ValueString !=""||!_abaec {_daeag =append (_daeag ,_eebfa .ValueString );
};case ResultTypeNumber :_daeag =append (_daeag ,_eebfa .Value ());case ResultTypeList :_daeag =_gggee (_daeag ,_fccdd (_eebfa .ValueList ,[]string {},_abaec ));case ResultTypeArray :for _ ,_feee :=range _eebfa .ValueArray {_daeag =_gggee (_daeag ,_fccdd (_feee ,[]string {},_abaec ));
};};};return _daeag ;};var _efe =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// LastColumn returns empty string for the invalid reference context.
func (_gddb *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_fcgd :=len (args );if _fcgd !=4&&_fcgd !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_bebcf ,_dcagc ,_adccc :=_agcb (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _adccc .Type ==ResultTypeError {return _adccc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfec :=args [2].ValueNumber ;if _gfec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ccagf :=args [3].ValueNumber ;if _ccagf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acgc :=0;if _fcgd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acgc =int (args [4].ValueNumber );if !_gbaa (_acgc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");
};};_gdba ,_adccc :=_baf (_bebcf ,_dcagc ,_acgc );if _adccc .Type ==ResultTypeError {return _adccc ;};return MakeNumberResult (_gfec /(1-_ccagf *_gdba ));};func _aaab (_ddcd Result ,_fccge *criteriaParsed )bool {if _ddcd .IsBoolean {return false ;};_gbdfa :=_ddcd .Type ;
if _fccge ._ceffb {return _gbdfa ==ResultTypeNumber &&_ddcd .ValueNumber ==_fccge ._dcbe ;}else if _gbdfa ==ResultTypeNumber {return _aefdc (_ddcd .ValueNumber ,_fccge ._dfcf );};return _gcag (_ddcd ,_fccge );};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _cg .Reader )Expression {_cdba :=&plex {_ccab :LexReader (r )};_aabf (_cdba );if _cdba ._fbgf !=""{return nil ;};return _cdba ._cfbbe ;};

// Update updates references in the Negate after removing a row/column.
func (_accab Negate )Update (q *_af .UpdateQuery )Expression {return Negate {_bfbeb :_accab ._bfbeb .Update (q )};};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_edace :=len (args );if (_edace !=2&&_edace !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fcdg :=0;if _edace ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fcdg =int (args [2].ValueNumber );if !_gbaa (_fcdg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");
};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ffd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_dgcb :=args [1].ValueNumber ;_cef ,_gedg :=_baf (_ffd ,_dgcb ,_fcdg );if _gedg .Type ==ResultTypeError {return _gedg ;};return MakeNumberResult (_cef );};

// IsBool returns false for the invalid reference context.
func (_gebff *ivr )IsBool (cellRef string )bool {return false };

// Eval evaluates and returns the result of a Negate expression.
func (_bfdac Negate )Eval (ctx Context ,ev Evaluator )Result {_cedge :=_bfdac ._bfbeb .Eval (ctx ,ev );if _cedge .Type ==ResultTypeNumber {return MakeNumberResult (-_cedge .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_bbea .Lock ();defer _bbea .Unlock ();if _ceac ,_gcfba :=_bgga [name ];_gcfba {return _ceac ;};return nil ;};

// Eval evaluates and returns a boolean.
func (_fad Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_fad ._aab )};const _deag =57361;func _agee (_bace ,_adca []float64 ,_gfd float64 )float64 {_cbfg :=_gfd +1;_fabd :=0.0;_eaffd :=len (_bace );_fbg :=_adca [0];for _cbgf :=1;
_cbgf < _eaffd ;_cbgf ++{_abcc :=(_adca [_cbgf ]-_fbg )/365;_fabd -=_abcc *_bace [_cbgf ]/_a .Pow (_cbfg ,_abcc +1);};return _fabd ;};type xargs struct{_adf []float64 ;_dgcf []float64 ;};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_acbc :=args [0];switch _acbc .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_agf :=_dgfe (_acbc .ValueNumber );return MakeNumberResult (float64 (_agf .Day ()));case ResultTypeString :_afb :=_dc .ToLower (_acbc .ValueString );if !_afg (_afb ){_ ,_ ,_ ,_ ,_dad ,_abd :=_dfac (_afb );if _abd .Type ==ResultTypeError {_abd .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";
return _abd ;};if _dad {return MakeNumberResult (0);};};_ ,_ ,_caec ,_ ,_ffg :=_gfg (_afb );if _ffg .Type ==ResultTypeError {return _ffg ;};return MakeNumberResult (float64 (_caec ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");
};};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_adad :=args [0].AsNumber ();
if _adad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgaf :=_a .Signbit (_adad .ValueNumber );
_egacf ,_fecf :=_a .Modf (_adad .ValueNumber /2);_gcfc :=_egacf *2;if _fecf !=0{if !_dgaf {_gcfc +=2;}else {_gcfc -=2;};};return MakeNumberResult (_gcfc );};const _bef ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";


// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_ffead :=[]string {};for _bgbce :=range _bgga {_ffead =append (_ffead ,_bgbce );};for _effea :=range _gbgfg {_ffead =append (_ffead ,_effea );};_d .Strings (_ffead );return _ffead ;};func _adbdc (_dbaa string ,_febaa func (_aebff float64 )float64 )Function {return func (_acca []Result )Result {if len (_acca )!=1{return MakeErrorResult (_dbaa +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_adcgb :=_acca [0].AsNumber ();switch _adcgb .Type {case ResultTypeNumber :_ggbda :=_febaa (_adcgb .ValueNumber );if _a .IsNaN (_ggbda ){return MakeErrorResult (_dbaa +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");
};if _a .IsInf (_ggbda ,0){return MakeErrorResult (_dbaa +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _ggbda ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_dbaa +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult (1/_ggbda );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_dbaa +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _adcgb ;default:return MakeErrorResult (_bg .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dbaa ,_adcgb .Type ));
};};};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};const _aecf ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";


// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_dbcc :=len (args );if _dbcc < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _dbcc > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_baed :=args [0];_fecce :=args [1];if _fecce .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_effg :=args [2].AsNumber ();if _effg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gbeg :=false ;if _dbcc ==4&&args [3].Type !=ResultTypeEmpty {_bgad :=args [3].AsNumber ();if _bgad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _bgad .ValueNumber ==0{_gbeg =true ;};};_gaacg :=int (_effg .ValueNumber )-1;_acea :=-1;_eccd :=false ;_cggega :for _bcd ,_baeea :=range _fecce .ValueArray {if len (_baeea )==0{continue ;};_cgeb :=_baeea [0];switch _baeg (_cgeb ,_baed ,false ,_gbeg ){case _dcfa :_acea =_bcd ;
case _bafef :_acea =_bcd ;_eccd =true ;break _cggega ;};};if _acea ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gcba :=_fecce .ValueArray [_acea ];
if _gaacg < 0||_gaacg >=len (_gcba ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _eccd ||!_gbeg {return _gcba [_gaacg ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};func (_aagdf *yyParserImpl )Parse (yylex yyLexer )int {_dafd :=_bc .Now ();
var _bdfcf int ;var _gfef yySymType ;var _degfg []yySymType ;_ =_degfg ;_gge :=_aagdf ._ebaae [:];Nerrs :=0;Errflag :=0;_cbafe :=0;_aagdf ._gaagg =-1;_bcbb :=-1;defer func (){_cbafe =-1;_aagdf ._gaagg =-1;_bcbb =-1}();_aagg :=-1;goto _aaad ;_dbdg :return 0;
_cdef :return 1;_aaad :if _eefbc (_dafd ){_ed .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _cdef ;};if _debbc >=4{_bg .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_bdae (_bcbb ),_gggeba (_cbafe ));
};_aagg ++;if _aagg >=len (_gge ){_gefbe :=make ([]yySymType ,len (_gge )*2);copy (_gefbe ,_gge );_gge =_gefbe ;};_gge [_aagg ]=_gfef ;_gge [_aagg ]._fdcf =_cbafe ;_acge :if _eefbc (_dafd ){_ed .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");
goto _cdef ;};_bdfcf =_bdbe [_cbafe ];if _bdfcf <=_cffed {goto _aggdf ;};if _aagdf ._gaagg < 0{_aagdf ._gaagg ,_bcbb =_bcfc (yylex ,&_aagdf ._bbfa );};_bdfcf +=_bcbb ;if _bdfcf < 0||_bdfcf >=_gadd {goto _aggdf ;};_bdfcf =_efeag [_bdfcf ];if _fddg [_bdfcf ]==_bcbb {_aagdf ._gaagg =-1;
_bcbb =-1;_gfef =_aagdf ._bbfa ;_cbafe =_bdfcf ;if Errflag > 0{Errflag --;};goto _aaad ;};_aggdf :if _eefbc (_dafd ){_ed .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _cdef ;};_bdfcf =_geaab [_cbafe ];
if _bdfcf ==-2{if _aagdf ._gaagg < 0{_aagdf ._gaagg ,_bcbb =_bcfc (yylex ,&_aagdf ._bbfa );};_efcc :=0;for {if _afbd [_efcc +0]==-1&&_afbd [_efcc +1]==_cbafe {break ;};_efcc +=2;};for _efcc +=2;;_efcc +=2{_bdfcf =_afbd [_efcc +0];if _bdfcf < 0||_bdfcf ==_bcbb {break ;
};};_bdfcf =_afbd [_efcc +1];if _bdfcf < 0{goto _dbdg ;};};if _bdfcf ==0{switch Errflag {case 0:yylex .Error (_bdcg (_cbafe ,_bcbb ));Nerrs ++;if _debbc >=1{_bg .Printf ("\u0025\u0073",_gggeba (_cbafe ));_bg .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_bdae (_bcbb ));
};fallthrough;case 1,2:Errflag =3;for _aagg >=0{_bdfcf =_bdbe [_gge [_aagg ]._fdcf ]+_abaf ;if _bdfcf >=0&&_bdfcf < _gadd {_cbafe =_efeag [_bdfcf ];if _fddg [_cbafe ]==_abaf {goto _aaad ;};};if _debbc >=2{_bg .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_gge [_aagg ]._fdcf );
};_aagg --;};goto _cdef ;case 3:if _debbc >=2{_bg .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_bdae (_bcbb ));};if _bcbb ==_cbdb {goto _cdef ;};_aagdf ._gaagg =-1;
_bcbb =-1;goto _acge ;};};if _debbc >=2{_bg .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_bdfcf ,_gggeba (_cbafe ));};_adgfa :=_bdfcf ;_bebdff :=_aagg ;_ =_bebdff ;_aagg -=_affcg [_bdfcf ];if _aagg +1>=len (_gge ){_gabfc :=make ([]yySymType ,len (_gge )*2);
copy (_gabfc ,_gge );_gge =_gabfc ;};_gfef =_gge [_aagg +1];_bdfcf =_decca [_bdfcf ];_ebcba :=_cebcb [_bdfcf ];_ggcaa :=_ebcba +_gge [_aagg ]._fdcf +1;if _ggcaa >=_gadd {_cbafe =_efeag [_ebcba ];}else {_cbafe =_efeag [_ggcaa ];if _fddg [_cbafe ]!=-_bdfcf {_cbafe =_efeag [_ebcba ];
};};switch _adgfa {case 1:_degfg =_gge [_bebdff -1:_bebdff +1];{yylex .(*plex )._cfbbe =_gfef ._cfddd ;};case 3:_degfg =_gge [_bebdff -2:_bebdff +1];{_gfef ._cfddd =_degfg [2]._cfddd ;};case 4:_degfg =_gge [_bebdff -4:_bebdff +1];{};case 5:_degfg =_gge [_bebdff -1:_bebdff +1];
{_gfef ._cfddd =NewBool (_degfg [1]._dcdbc ._baec );};case 6:_degfg =_gge [_bebdff -1:_bebdff +1];{_gfef ._cfddd =NewNumber (_degfg [1]._dcdbc ._baec );};case 7:_degfg =_gge [_bebdff -1:_bebdff +1];{_gfef ._cfddd =NewString (_degfg [1]._dcdbc ._baec );
};case 8:_degfg =_gge [_bebdff -1:_bebdff +1];{_gfef ._cfddd =NewError (_degfg [1]._dcdbc ._baec );};case 9:_degfg =_gge [_bebdff -2:_bebdff +1];{_gfef ._cfddd =_degfg [2]._cfddd ;};case 10:_degfg =_gge [_bebdff -2:_bebdff +1];{_gfef ._cfddd =NewNegate (_degfg [2]._cfddd );
};case 15:_degfg =_gge [_bebdff -3:_bebdff +1];{_gfef ._cfddd =_degfg [2]._cfddd ;};case 17:_degfg =_gge [_bebdff -3:_bebdff +1];{_gfef ._cfddd =NewConstArrayExpr (_degfg [2]._dcdda );};case 18:_degfg =_gge [_bebdff -1:_bebdff +1];{_gfef ._dcdda =append (_gfef ._dcdda ,_degfg [1]._cgaf );
};case 19:_degfg =_gge [_bebdff -3:_bebdff +1];{_gfef ._dcdda =append (_degfg [1]._dcdda ,_degfg [3]._cgaf );};case 20:_degfg =_gge [_bebdff -1:_bebdff +1];{_gfef ._cgaf =append (_gfef ._cgaf ,_degfg [1]._cfddd );};case 21:_degfg =_gge [_bebdff -3:_bebdff +1];
{_gfef ._cgaf =append (_degfg [1]._cgaf ,_degfg [3]._cfddd );};case 23:_degfg =_gge [_bebdff -2:_bebdff +1];{_gfef ._cfddd =NewPrefixExpr (_degfg [1]._cfddd ,_degfg [2]._cfddd );};case 25:_degfg =_gge [_bebdff -1:_bebdff +1];{_gfef ._cfddd =NewSheetPrefixExpr (_degfg [1]._dcdbc ._baec );
};case 26:_degfg =_gge [_bebdff -1:_bebdff +1];{_gfef ._cfddd =NewCellRef (_degfg [1]._dcdbc ._baec );};case 27:_degfg =_gge [_bebdff -3:_bebdff +1];{_gfef ._cfddd =NewRange (_degfg [1]._cfddd ,_degfg [3]._cfddd );};case 28:_degfg =_gge [_bebdff -4:_bebdff +1];
{_gfef ._cfddd =NewPrefixRangeExpr (_degfg [1]._cfddd ,_degfg [2]._cfddd ,_degfg [4]._cfddd );};case 29:_degfg =_gge [_bebdff -1:_bebdff +1];{_gfef ._cfddd =NewNamedRangeRef (_degfg [1]._dcdbc ._baec );};case 30:_degfg =_gge [_bebdff -1:_bebdff +1];{_gfef ._cfddd =NewHorizontalRange (_degfg [1]._dcdbc ._baec );
};case 31:_degfg =_gge [_bebdff -1:_bebdff +1];{_gfef ._cfddd =NewVerticalRange (_degfg [1]._dcdbc ._baec );};case 32:_degfg =_gge [_bebdff -2:_bebdff +1];{_gfef ._cfddd =NewPrefixHorizontalRange (_degfg [1]._cfddd ,_degfg [2]._dcdbc ._baec );};case 33:_degfg =_gge [_bebdff -2:_bebdff +1];
{_gfef ._cfddd =NewPrefixVerticalRange (_degfg [1]._cfddd ,_degfg [2]._dcdbc ._baec );};case 34:_degfg =_gge [_bebdff -3:_bebdff +1];{_gfef ._cfddd =NewBinaryExpr (_degfg [1]._cfddd ,BinOpTypePlus ,_degfg [3]._cfddd );};case 35:_degfg =_gge [_bebdff -3:_bebdff +1];
{_gfef ._cfddd =NewBinaryExpr (_degfg [1]._cfddd ,BinOpTypeMinus ,_degfg [3]._cfddd );};case 36:_degfg =_gge [_bebdff -3:_bebdff +1];{_gfef ._cfddd =NewBinaryExpr (_degfg [1]._cfddd ,BinOpTypeMult ,_degfg [3]._cfddd );};case 37:_degfg =_gge [_bebdff -3:_bebdff +1];
{_gfef ._cfddd =NewBinaryExpr (_degfg [1]._cfddd ,BinOpTypeDiv ,_degfg [3]._cfddd );};case 38:_degfg =_gge [_bebdff -3:_bebdff +1];{_gfef ._cfddd =NewBinaryExpr (_degfg [1]._cfddd ,BinOpTypeExp ,_degfg [3]._cfddd );};case 39:_degfg =_gge [_bebdff -3:_bebdff +1];
{_gfef ._cfddd =NewBinaryExpr (_degfg [1]._cfddd ,BinOpTypeLT ,_degfg [3]._cfddd );};case 40:_degfg =_gge [_bebdff -3:_bebdff +1];{_gfef ._cfddd =NewBinaryExpr (_degfg [1]._cfddd ,BinOpTypeGT ,_degfg [3]._cfddd );};case 41:_degfg =_gge [_bebdff -3:_bebdff +1];
{_gfef ._cfddd =NewBinaryExpr (_degfg [1]._cfddd ,BinOpTypeLEQ ,_degfg [3]._cfddd );};case 42:_degfg =_gge [_bebdff -3:_bebdff +1];{_gfef ._cfddd =NewBinaryExpr (_degfg [1]._cfddd ,BinOpTypeGEQ ,_degfg [3]._cfddd );};case 43:_degfg =_gge [_bebdff -3:_bebdff +1];
{_gfef ._cfddd =NewBinaryExpr (_degfg [1]._cfddd ,BinOpTypeEQ ,_degfg [3]._cfddd );};case 44:_degfg =_gge [_bebdff -3:_bebdff +1];{_gfef ._cfddd =NewBinaryExpr (_degfg [1]._cfddd ,BinOpTypeNE ,_degfg [3]._cfddd );};case 45:_degfg =_gge [_bebdff -3:_bebdff +1];
{_gfef ._cfddd =NewBinaryExpr (_degfg [1]._cfddd ,BinOpTypeConcat ,_degfg [3]._cfddd );};case 47:_degfg =_gge [_bebdff -2:_bebdff +1];{_gfef ._cfddd =NewFunction (_degfg [1]._dcdbc ._baec ,nil );};case 48:_degfg =_gge [_bebdff -3:_bebdff +1];{_gfef ._cfddd =NewFunction (_degfg [1]._dcdbc ._baec ,_degfg [2]._cgaf );
};case 49:_degfg =_gge [_bebdff -1:_bebdff +1];{_gfef ._cgaf =append (_gfef ._cgaf ,_degfg [1]._cfddd );};case 50:_degfg =_gge [_bebdff -3:_bebdff +1];{_gfef ._cgaf =append (_degfg [1]._cgaf ,_degfg [3]._cfddd );};case 53:_degfg =_gge [_bebdff -0:_bebdff +1];
{_gfef ._cfddd =NewEmptyExpr ();};};goto _aaad ;};func _eecd (_fdaa ,_eaag ,_cegc ,_gegd ,_bbeg float64 ,_bafe int )float64 {_gbfb :=_begfd (_fdaa ,_cegc ,_gegd ,_bbeg ,_bafe );var _bbdf float64 ;if _eaag ==1{if _bafe ==1{_bbdf =0;}else {_bbdf =-_gegd ;
};}else {if _bafe ==1{_bbdf =_cecfa (_fdaa ,_eaag -2,_gbfb ,_gegd ,1)-_gbfb ;}else {_bbdf =_cecfa (_fdaa ,_eaag -1,_gbfb ,_gegd ,0);};};return _bbdf *_fdaa ;};

// GetEpoch returns a null time object for the invalid reference context.
func (_gdcca *ivr )GetEpoch ()_bc .Time {return _bc .Time {}};const _cbgbb =57366;

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };
case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };
case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };
default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gege :=args [0].AsString ();if _gege .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bbaf :=_be .Buffer {};for _ ,_eaad :=range _gege .ValueString {if _bf .IsPrint (_eaad ){_bbaf .WriteRune (_eaad );};};return MakeStringResult (_bbaf .String ());};func (_ebed tokenType )String ()string {return _bdae (int (_ebed ))};

// Update updates the horizontal range references after removing a row/column.
func (_bded HorizontalRange )Update (q *_af .UpdateQuery )Expression {return _bded };

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _deaa (args ,true )};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_bfbb chan *node ;_afcfg _ef .Mutex ;_adae []chan *node ;_bbee []*node ;};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_gcdd :=len (args );if _gcdd < 4||_gcdd > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ecdc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afab :=args [1].ValueNumber ;if _afab <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gbfe :=args [2].ValueNumber ;if _gbfe < _afab {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_dfbd :=args [3].ValueNumber ;_geef :=0.0;if _gcdd >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_geef =args [4].ValueNumber ;};_ggca :=0;if _gcdd ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ggca =int (args [5].ValueNumber );if _ggca !=0{_ggca =1;};};return MakeNumberResult (_begfd (_ecdc ,_gbfe ,_dfbd ,_geef ,_ggca )-_eecd (_ecdc ,_afab ,_gbfe ,_dfbd ,_geef ,_ggca ));};const _cgad =57375;

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ebcb :=args [0].Ref ;if _ebcb .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .HasFormula (_ebcb .Value ));};const _ffbf =_bc .Millisecond *1000;func _gbaad (_bgaa string )string {_bgaa =_dc .Replace (_bgaa ,"\u000a","\u005c\u006e",-1);_bgaa =_dc .Replace (_bgaa ,"\u000d","\u005c\u0072",-1);_bgaa =_dc .Replace (_bgaa ,"\u0009","\u005c\u0074",-1);
return _bgaa ;};const _fggec =57369;

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_bdbc string };

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );
};var (_debbc =0;_gfgf =false ;);

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ecab :=args [0].AsNumber ();if _ecab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_dfcc :=float64 (1);if _ecab .ValueNumber < 0{_dfcc =-1;};if len (args )> 1{_edccc :=args [1].AsNumber ();if _edccc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dfcc =_edccc .ValueNumber ;};if _dfcc < 0&&_ecab .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};if len (args )==1{return MakeNumberResult (_a .Ceil (_ecab .ValueNumber ));};_ffea :=_ecab .ValueNumber ;_ffea ,_ccgcb :=_a .Modf (_ffea /_dfcc );if _ccgcb > 0{_ffea ++;};return MakeNumberResult (_ffea *_dfcc );};func _afbga (_ege int ,_cbgc _bc .Month ,_abeg int )int64 {if _ege ==1900&&int (_cbgc )<=2{_abeg --;
};_agdc :=_bc .Date (_ege ,_cbgc ,_abeg ,0,0,0,0,_bc .UTC );return _agdc .Unix ();};func (_bceg *Lexer )emit (_fggeb tokenType ,_cgcdea []byte ){if _abcb {_bg .Println ("\u0065\u006d\u0069\u0074",_fggeb ,_gbaad (string (_cgcdea )));};_bceg ._bfbb <-&node {_fggeb ,string (_cgcdea )};
};func _eedce (_ecca ,_fddc ,_gegb ,_bfddf ,_cdgd float64 )float64 {var _cgdc float64 ;_gdaa :=_cdgd /_gegb ;if _gdaa >=1{_gdaa =1;if _bfddf ==1{_cgdc =_ecca ;}else {_cgdc =0;};}else {_cgdc =_ecca *_a .Pow (1-_gdaa ,_bfddf -1);};_ffbd :=_ecca *_a .Pow (1-_gdaa ,_bfddf );
var _dbef float64 ;if _ffbd < _fddc {_dbef =_cgdc -_fddc ;}else {_dbef =_cgdc -_ffbd ;};if _dbef < 0{_dbef =0;};return _dbef ;};var _fdace =[...]uint8 {0,17,33,49,63,78,93,108};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_add :=args [1].ValueNumber ;
_fcbg :=args [0];var _deb float64 ;switch _fcbg .Type {case ResultTypeEmpty :_deb =0;case ResultTypeNumber :_deb =_fcbg .ValueNumber ;case ResultTypeString :_ba :=DateValue ([]Result {args [0]});if _ba .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};_deb =_ba .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_gbe :=_dgfe (_deb );
_efb :=_gbe .AddDate (0,int (_add +1),0);_gaf ,_bfde ,_ :=_efb .Date ();_cag :=_defge (_gaf ,int (_bfde ),0);if _cag < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};if _gaf ==1900&&_bfde ==3{_cag --;};return MakeNumberResult (_cag );};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_bgbf ,_fgbc :=_bfcgb (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _fgbc .Type ==ResultTypeError {return _fgbc ;};return MakeNumberResult (_ddgc (_bgbf ._eedbc ,_bgbf ._bfb ,_bgbf ._gddd ,_bgbf ._gegg ));
};type cmpResult int8 ;

// Eval evaluates the binary expression using the context given.
func (_ece BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_bgg :=_ece ._eg .Eval (ctx ,ev );if _bgg .Type ==ResultTypeError {return _bgg ;};_fa :=_ece ._ec .Eval (ctx ,ev );if _fa .Type ==ResultTypeError {return _fa ;};if _bgg .Type ==_fa .Type {if _bgg .Type ==ResultTypeArray {if !_bcga (_bgg .ValueArray ,_fa .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _ea (_ece ._dg ,_bgg .ValueArray ,_fa .ValueArray );}else if _bgg .Type ==ResultTypeList {if len (_bgg .ValueList )!=len (_fa .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _gf (_ece ._dg ,_bgg .ValueList ,_fa .ValueList );};}else if _bgg .Type ==ResultTypeArray &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return _fag (_ece ._dg ,_bgg .ValueArray ,_fa );}else if _bgg .Type ==ResultTypeList &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return _ccd (_ece ._dg ,_bgg .ValueList ,_fa );
};switch _ece ._dg {case BinOpTypePlus :if _bgg .Type ==_fa .Type {if _bgg .Type ==ResultTypeNumber {return MakeNumberResult (_bgg .ValueNumber +_fa .ValueNumber );};};case BinOpTypeMinus :if _bgg .Type ==_fa .Type {if _bgg .Type ==ResultTypeNumber {return MakeNumberResult (_bgg .ValueNumber -_fa .ValueNumber );
};};case BinOpTypeMult :if _bgg .Type ==_fa .Type {if _bgg .Type ==ResultTypeNumber {return MakeNumberResult (_bgg .ValueNumber *_fa .ValueNumber );};};case BinOpTypeDiv :if _bgg .Type ==_fa .Type {if _bgg .Type ==ResultTypeNumber {if _fa .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");
};return MakeNumberResult (_bgg .ValueNumber /_fa .ValueNumber );};};case BinOpTypeExp :if _bgg .Type ==_fa .Type {if _bgg .Type ==ResultTypeNumber {return MakeNumberResult (_a .Pow (_bgg .ValueNumber ,_fa .ValueNumber ));};};case BinOpTypeLT :if _bgg .Type ==_fa .Type {if _bgg .Type ==ResultTypeNumber {return MakeBoolResult (_bgg .ValueNumber < _fa .ValueNumber );
};if _bgg .Type ==ResultTypeString {return MakeBoolResult (_bgg .ValueString < _fa .ValueString );};if _bgg .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _bgg .Type ==ResultTypeString &&_fa .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _bgg .Type ==ResultTypeNumber &&_fa .Type ==ResultTypeString {return MakeBoolResult (true );}else if _bgg .Type ==ResultTypeEmpty &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_bgg .Type ==ResultTypeNumber ||_bgg .Type ==ResultTypeString )&&_fa .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};case BinOpTypeGT :if _bgg .Type ==_fa .Type {if _bgg .Type ==ResultTypeNumber {return MakeBoolResult (_bgg .ValueNumber > _fa .ValueNumber );};if _bgg .Type ==ResultTypeString {return MakeBoolResult (_bgg .ValueString > _fa .ValueString );};if _bgg .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if _bgg .Type ==ResultTypeString &&_fa .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _bgg .Type ==ResultTypeNumber &&_fa .Type ==ResultTypeString {return MakeBoolResult (false );}else if _bgg .Type ==ResultTypeEmpty &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if (_bgg .Type ==ResultTypeNumber ||_bgg .Type ==ResultTypeString )&&_fa .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _bgg .Type ==_fa .Type {if _bgg .Type ==ResultTypeNumber {return MakeBoolResult (_bgg .ValueNumber ==_fa .ValueNumber );
};if _bgg .Type ==ResultTypeString {return MakeBoolResult (_bgg .ValueString ==_fa .ValueString );};if _bgg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_bgg .Type ==ResultTypeString &&_fa .Type ==ResultTypeNumber )||(_bgg .Type ==ResultTypeNumber &&_fa .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if _bgg .Type ==ResultTypeEmpty &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return MakeBoolResult (_dfb (_fa ));}else if (_bgg .Type ==ResultTypeNumber ||_bgg .Type ==ResultTypeString )&&_fa .Type ==ResultTypeEmpty {return MakeBoolResult (_dfb (_bgg ));
};case BinOpTypeNE :if _bgg .Type ==_fa .Type {if _bgg .Type ==ResultTypeNumber {return MakeBoolResult (_bgg .ValueNumber !=_fa .ValueNumber );};if _bgg .Type ==ResultTypeString {return MakeBoolResult (_bgg .ValueString !=_fa .ValueString );};if _bgg .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if (_bgg .Type ==ResultTypeString &&_fa .Type ==ResultTypeNumber )||(_bgg .Type ==ResultTypeNumber &&_fa .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _bgg .Type ==ResultTypeEmpty &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return MakeBoolResult (!_dfb (_fa ));
}else if (_bgg .Type ==ResultTypeNumber ||_bgg .Type ==ResultTypeString )&&_fa .Type ==ResultTypeEmpty {return MakeBoolResult (!_dfb (_bgg ));};case BinOpTypeLEQ :if _bgg .Type ==_fa .Type {if _bgg .Type ==ResultTypeNumber {return MakeBoolResult (_bgg .ValueNumber <=_fa .ValueNumber );
};if _bgg .Type ==ResultTypeString {return MakeBoolResult (_bgg .ValueString <=_fa .ValueString );};if _bgg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _bgg .Type ==ResultTypeString &&_fa .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _bgg .Type ==ResultTypeNumber &&_fa .Type ==ResultTypeString {return MakeBoolResult (true );}else if _bgg .Type ==ResultTypeEmpty &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return MakeBoolResult (_dfb (_fa ));}else if (_bgg .Type ==ResultTypeNumber ||_bgg .Type ==ResultTypeString )&&_fa .Type ==ResultTypeEmpty {return MakeBoolResult (_dfb (_bgg ));
};case BinOpTypeGEQ :if _bgg .Type ==_fa .Type {if _bgg .Type ==ResultTypeNumber {return MakeBoolResult (_bgg .ValueNumber >=_fa .ValueNumber );};if _bgg .Type ==ResultTypeString {return MakeBoolResult (_bgg .ValueString >=_fa .ValueString );};if _bgg .Type ==ResultTypeEmpty {return MakeBoolResult (true );
};}else if _bgg .Type ==ResultTypeString &&_fa .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _bgg .Type ==ResultTypeNumber &&_fa .Type ==ResultTypeString {return MakeBoolResult (false );}else if _bgg .Type ==ResultTypeEmpty &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return MakeBoolResult (_dfb (_fa ));
}else if (_bgg .Type ==ResultTypeNumber ||_bgg .Type ==ResultTypeString )&&_fa .Type ==ResultTypeEmpty {return MakeBoolResult (_dfb (_bgg ));};case BinOpTypeConcat :return MakeStringResult (_bgg .Value ()+_fa .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");
};

// Reference returns a string reference value to a range.
func (_ffcgg Range )Reference (ctx Context ,ev Evaluator )Reference {_cceba :=_ffcgg ._bbef .Reference (ctx ,ev );_dedff :=_ffcgg ._bfec .Reference (ctx ,ev );if _cceba .Type ==ReferenceTypeCell &&_dedff .Type ==ReferenceTypeCell {return MakeRangeReference (_fggeg (_cceba ,_dedff ));
};return ReferenceInvalid ;};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_adac Expression ;_feffc ,_gdeed string ;};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_fafac Expression ;_egbba Expression ;};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_egcc :=_bc .Now ();_ ,_cfga :=_egcc .Zone ();_efeb :=_fgb (_adc ,_egcc .Unix ()+int64 (_cfga ))+1;return MakeNumberResult (_efeb );};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_acbcd :=args [0].AsString ();if _acbcd .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};return ctx .Cell (_acbcd .ValueString ,ev );};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_dfbb ConstArrayExpr )Update (q *_af .UpdateQuery )Expression {return _dfbb };func _fcag (_cgb []Result ,_ccbe string )(*cumulArgs ,Result ){if len (_cgb )!=6{return nil ,MakeErrorResult (_ccbe +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _cgb [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccbe +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_aabd :=_cgb [0].ValueNumber ;
if _aabd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ccbe +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _cgb [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccbe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_bccga :=_cgb [1].ValueNumber ;if _bccga <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ccbe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if _cgb [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccbe +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ddf :=_cgb [2].ValueNumber ;if _ddf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ccbe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _cgb [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccbe +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_eedd :=_cgb [3].ValueNumber ;if _eedd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ccbe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _cgb [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccbe +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acd :=_cgb [4].ValueNumber ;if _acd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ccbe +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if _acd < _eedd {return nil ,MakeErrorResultType (ErrorTypeNum ,_ccbe +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");
};if _acd > _bccga {return nil ,MakeErrorResultType (ErrorTypeNum ,_ccbe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");
};_ggc :=int (_cgb [5].ValueNumber );if _ggc !=0&&_ggc !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_ccbe +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");
};return &cumulArgs {_aabd ,_bccga ,_ddf ,_eedd ,_acd ,_ggc },_bgb ;};func _cga (_gfba int )int {if _gfba < 1900{if _gfba < 30{_gfba +=2000;}else {_gfba +=1900;};};return _gfba ;};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_dbca Result )ListValues ()[]Result {if _dbca .Type ==ResultTypeArray {_eded :=[]Result {};for _ ,_dcgbbc :=range _dbca .ValueArray {for _ ,_babb :=range _dcgbbc {_eded =append (_eded ,_babb );};};return _eded ;};if _dbca .Type ==ResultTypeList {return _dbca .ValueList ;
};return nil ;};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");
};

// Reference returns a string reference value to a vertical range with prefix.
func (_adcgde PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_ffcae :=_adcgde ._adac .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_adcgde .verticalRangeReference (_ffcae .Value )};};var _cebcb =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};
var _affcg =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// BinOpType is the binary operation operator type
//
//go:generate stringer -type=BinOpType
type BinOpType byte ;const _eaf ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";
const _gdc ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_egca :=args [0].ValueNumber ;if _egca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcdce :=float64 (int (args [1].ValueNumber ));if _gcdce < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult ((_a .Pow (_egca +1,1/_gcdce )-1)*_gcdce );};func _ea (_ae BinOpType ,_dd ,_egf [][]Result )Result {_bee :=[][]Result {};for _bfd :=range _dd {_bcb :=_gf (_ae ,_dd [_bfd ],_egf [_bfd ]);if _bcb .Type ==ResultTypeError {return _bcb ;
};_bee =append (_bee ,_bcb .ValueList );};return MakeArrayResult (_bee );};func _aefb (_ecaa Result ,_fbfb ,_eeed string )(float64 ,Result ){var _dfae float64 ;switch _ecaa .Type {case ResultTypeNumber :_dfae =float64 (int (_ecaa .ValueNumber ));case ResultTypeString :_aga :=DateValue ([]Result {_ecaa });
if _aga .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_fbfb +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_eeed );};_dfae =_aga .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_eeed );
};if _dfae < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_fbfb +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _dfae ,_bgb ;};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_acec Context ,_decgbg Evaluator ,_ddcc []Result )Result ;

// Db implements the Excel DB function.
func Db (args []Result )Result {_edcb :=len (args );if _edcb !=4&&_edcb !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_egbea :=args [0].ValueNumber ;if _egbea < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bdbgg :=args [1].ValueNumber ;if _bdbgg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_daeg :=args [2].ValueNumber ;if _daeg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fdf :=args [3].ValueNumber ;if _fdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};if _fdf -_daeg > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_dgcbe :=12.0;if _edcb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dgcbe =args [4].ValueNumber ;if _dgcbe < 1||_dgcbe > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");
};};if _dgcbe ==12&&_fdf > _daeg {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _bdbgg >=_egbea {return MakeNumberResult (0);
};_gface :=1-_a .Pow (_bdbgg /_egbea ,1/_daeg );_gface =float64 (int (_gface *1000+0.5))/1000;_ffce :=_egbea *_gface *_dgcbe /12;if _fdf ==1{return MakeNumberResult (_ffce );};_efeg :=_ffce ;_bdef :=0.0;_fabf :=_daeg ;if _fabf > _fdf {_fabf =_fdf ;};for _egbb :=2.0;
_egbb <=_fabf ;_egbb ++{_bdef =(_egbea -_efeg )*_gface ;_efeg +=_bdef ;};if _fdf > _daeg {return MakeNumberResult ((_egbea -_efeg )*_gface *(12-_dgcbe )/12);};return MakeNumberResult (_bdef );};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_ecga ,_gccba string };

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_edgb :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");
};_edgb =int (args [1].ValueNumber );if _edgb < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");
};if _edgb ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_bgdf :=args [0].Value ();
if _edgb > len (_bgdf ){return MakeStringResult (_bgdf );};return MakeStringResult (_bgdf [0:_edgb ]);};type criteriaRegex struct{_adag byte ;_fdeeg string ;};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_bdbfb *ivr )GetLabelPrefix (cellRef string )string {return ""};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_gad :=args [0].ValueNumber ;_cda :=args [1].ValueNumber ;if _cda < _gad {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");
};if _cda ==_gad {return MakeNumberResult (0);};_bdb :=_dc .ToLower (args [2].ValueString );if _bdb =="\u0064"{return MakeNumberResult (_cda -_gad );};_bfg :=_dgfe (_gad );_afba :=_dgfe (_cda );_bggd ,_cafa ,_dga :=_bfg .Date ();_cedb ,_fcb ,_daa :=_afba .Date ();
_cede :=int (_cafa );_gcgg :=int (_fcb );var _fadb float64 ;switch _bdb {case "\u0079":_fadb =float64 (_cedb -_bggd );if _gcgg < _cede ||(_gcgg ==_cede &&_daa < _dga ){_fadb --;};case "\u006d":_aae :=_cedb -_bggd ;_fagd :=_gcgg -_cede ;if _daa < _dga {_fagd --;
};if _fagd < 0{_aae --;_fagd +=12;};_fadb =float64 (_aae *12+_fagd );case "\u006d\u0064":_dfg :=_gcgg ;if _daa < _dga {_dfg --;};_fadb =float64 (int (_cda -_defge (_cedb ,_dfg ,_dga )));case "\u0079\u006d":_fadb =float64 (_gcgg -_cede );if _daa < _dga {_fadb --;
};if _fadb < 0{_fadb +=12;};case "\u0079\u0064":_egc :=_cedb ;if _gcgg < _cede ||(_gcgg ==_cede &&_daa < _dga ){_egc --;};_fadb =float64 (int (_cda -_defge (_egc ,_cede ,_dga )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");
};return MakeNumberResult (_fadb );};const _bdcbg =57365;

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_ecfa :=args [0];
if _ecfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_defgc :=int (_ecfa .ValueNumber );if _defgc < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");
};if len (args )<=_defgc {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");
};return args [_defgc ];};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};
_ebace :=int (args [0].ValueNumber );return MakeBoolResult (_ebace ==_ebace /2*2);};

// String returns a string representation of a horizontal range.
func (_bbbf HorizontalRange )String ()string {return _bbbf .horizontalRangeReference ()};func (_cebbe VerticalRange )verticalRangeReference ()string {return _bg .Sprintf ("\u0025\u0073\u003a%\u0073",_cebbe ._ecga ,_cebbe ._gccba );};func _bgcde (_debg ,_aead float64 ,_gae ,_fgd int )(float64 ,Result ){_gbge ,_gbef :=_dgfe (_debg ),_dgfe (_aead );
if _gbef .After (_gbge ){_dded :=_efge (_gbge ,_gbef ,_gae ,_fgd );_bgbb :=(_gbef .Year ()-_dded .Year ())*12+int (_gbef .Month ())-int (_dded .Month ());return float64 (_bgbb *_gae )/12.0,_bgb ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");
};func _fcad (_fgec ,_bgag ,_cgfc ,_bdeg ,_dgab float64 ,_cacd int )Result {_aac ,_gegf :=_baf (_fgec ,_bgag ,_cacd );if _gegf .Type ==ResultTypeError {return _gegf ;};_fgaa ,_edab :=_bgcde (_fgec ,_bgag ,int (_dgab ),_cacd );if _edab .Type ==ResultTypeError {return _edab ;
};_ebb :=0.0;_bcac :=0.0;_cgfc *=100/_dgab ;_bdeg /=_dgab ;_bdeg ++;_ecfc :=_aac *_dgab -_fgaa ;for _fcae :=1.0;_fcae < _fgaa ;_fcae ++{_acad :=_fcae +_ecfc ;_gcee :=_cgfc /_a .Pow (_bdeg ,_acad );_bcac +=_gcee ;_ebb +=_acad *_gcee ;};_abfd :=(_cgfc +100)/_a .Pow (_bdeg ,_fgaa +_ecfc );
_bcac +=_abfd ;_ebb +=(_fgaa +_ecfc )*_abfd ;_ebb /=_bcac ;_ebb /=_dgab ;return MakeNumberResult (_ebb );};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _cegf (args ,_gbdea )};var _gbde float64 =25569.0;

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dgae :=args [0].Ref ;if _dgae .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .Cell (_dgae .Value ,ev ).IsBoolean );};const _cedg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";
func _gcbc (_bdba []Result )Result {_ccfd :=_bdba [0].ValueArray ;if len (_bdba )==1{_fddd :=[][]Result {};for _ ,_ddbec :=range _ccfd {_fddd =append (_fddd ,_ggce ([]Result {MakeListResult (_ddbec )}).ValueList );};return MakeArrayResult (_fddd );}else if len (_bdba )==2{_bgfd :=len (_ccfd );
_dgfef :=len (_ccfd [0]);_fgadf :=_ddff (_bdba [1],_bgfd ,_dgfef );_fgcca :=len (_fgadf );_dfbc :=[][]Result {};var _badf []Result ;for _gede ,_aegeb :=range _ccfd {if _gede < _fgcca {_badf =_fgadf [_gede ];}else {_badf =_gdgce (MakeErrorResultType (ErrorTypeNA ,""),_dgfef );
};_dfbc =append (_dfbc ,_ggce ([]Result {MakeListResult (_aegeb ),MakeListResult (_badf )}).ValueList );};return MakeArrayResult (_dfbc );}else if len (_bdba )==3{_cefa :=len (_ccfd );_daea :=len (_ccfd [0]);_fagec :=_ddff (_bdba [1],_cefa ,_daea );_dadab :=_ddff (_bdba [2],_cefa ,_daea );
_bbbd :=len (_fagec );_geca :=len (_dadab );_begdc :=[][]Result {};var _eabde ,_bbge []Result ;for _afbfb ,_efcb :=range _ccfd {if _afbfb < _bbbd {_eabde =_fagec [_afbfb ];}else {_eabde =_gdgce (MakeErrorResultType (ErrorTypeNA ,""),_daea );};if _afbfb < _geca {_bbge =_dadab [_afbfb ];
}else {_bbge =_gdgce (MakeErrorResultType (ErrorTypeNA ,""),_daea );};_begdc =append (_begdc ,_ggce ([]Result {MakeListResult (_efcb ),MakeListResult (_eabde ),MakeListResult (_bbge )}).ValueList );};return MakeArrayResult (_begdc );};return MakeErrorResultType (ErrorTypeValue ,"");
};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _dfdc (args ,true )};const _ebcd int =30;

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ggac :=args [0];switch _ggac .Type {case ResultTypeError :return _ggac ;
case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_ggac .ValueNumber !=0);};if _ggac .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _ggce (args );case ResultTypeArray :return _gcbc (args );
default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};
};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_befg :=len (args );if _befg < 4||_befg > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_aabb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aebg :=args [1].ValueNumber ;if _aebg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_defa :=args [2].ValueNumber ;if _defa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cfeb :=args [3].ValueNumber ;_bage :=0.0;if _befg > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_bage =args [4].ValueNumber ;};_ggf :=0;if _befg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ggf =int (args [5].ValueNumber );if _ggf !=0{_ggf =1;};};return MakeNumberResult (_eecd (_aabb ,_aebg ,_defa ,_cfeb ,_bage ,_ggf ));};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_dc .NewReader (s ));};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_cab :v }};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_aeff :=args [0];if _aeff .Type ==ResultTypeError ||_aeff .Type ==ResultTypeString {return _aeff ;};return _bgb ;};

// Function is a standard function whose result only depends on its arguments.
type Function func (_gbcd []Result )Result ;

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cfdbb :=args [0].AsNumber ();if _cfdbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dcdc :=int (_cfdbb .ValueNumber );if _dcdc < 0||_dcdc > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");
};return MakeStringResult (_bg .Sprintf ("\u0025\u0063",_dcdc ));};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_fedd :=_bc .Now ();
_ ,_bgbc :=_fedd .Zone ();_fffc :=_gbde +float64 (_fedd .Unix ()+int64 (_bgbc ))/86400;return MakeNumberResult (_fffc );};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_ddcdb Result )AsNumber ()Result {if _ddcdb .Type ==ResultTypeString {_gccc ,_caegd :=_ee .ParseFloat (_ddcdb .ValueString ,64);if _caegd ==nil {return MakeNumberResult (_gccc );};};if _ddcdb .Type ==ResultTypeEmpty {return MakeNumberResult (0);};
return _ddcdb ;};func _dbdc (_gbgef float64 )float64 {return float64 (int (_gbgef +0.5))};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");
};_cfgb ,_eabfe ,_abdd :=_geed (args );if _abdd .Type ==ResultTypeError {return _abdd ;};return MakeNumberResult (_eddee (_cfgb )/_eabfe );};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];
case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));
default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};const _eead =57344;

// Reference returns an invalid reference for Negate.
func (_bdcfea Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfc :=args [0].AsString ();if _gfc .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (_gfc .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (_gfc .ValueString [0]));};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_fcgfb ,_ebcec :=_fcgfe ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _ebcec .Type !=ResultTypeEmpty {return _ebcec ;};_aaec :=_fcgfb ._cfbbg ;_edfa :=_fcgfb ._fggefb ;_fdfd :=_fcgfb ._gdcc ;_fgdf :=_fcgfb ._ecdca ;
_bffgd :=len (_aaec );if _edfa > _bffgd {_edfa =_bffgd ;};_gfcc :=_edfa +_fdfd ;if _gfcc > _bffgd {_gfcc =_bffgd ;};_abag :=_aaec [0:_edfa ]+_fgdf +_aaec [_gfcc :];return MakeStringResult (_abag );};var _abagc =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};
func _cabcgf (_bcgge Context ,_bgfgf Evaluator ,_dbafg ,_efbg string )Result {_cbcf ,_abaeb :=_fb .ParseCellReference (_dbafg );if _abaeb !=nil {return MakeErrorResult (_bg .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_dbafg ,_abaeb .Error ()));
};_eaaga ,_bbeee :=_cbcf .ColumnIdx ,_cbcf .RowIdx ;_bfcb ,_ccbad :=_fb .ParseCellReference (_efbg );if _ccbad !=nil {return MakeErrorResult (_bg .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_efbg ,_ccbad .Error ()));
};_edcgd ,_ddaca :=_bfcb .ColumnIdx ,_bfcb .RowIdx ;_ebccf :=[][]Result {};for _dddd :=_bbeee ;_dddd <=_ddaca ;_dddd ++{_efda :=[]Result {};for _gbgg :=_eaaga ;_gbgg <=_edcgd ;_gbgg ++{_gcbaf :=_bcgge .Cell (_bg .Sprintf ("\u0025\u0073\u0025\u0064",_fb .IndexToColumn (_gbgg ),_dddd ),_bgfgf );
_efda =append (_efda ,_gcbaf );};_ebccf =append (_ebccf ,_efda );};if len (_ebccf )==1{if len (_ebccf [0])==1{return _ebccf [0][0];};return MakeListResult (_ebccf [0]);};return MakeArrayResult (_ebccf );};func _gfgb (_cfabf Result ,_ggdd *criteriaParsed )bool {if _cfabf .Type ==ResultTypeEmpty {return false ;
};if _ggdd ._ceffb {return _cfabf .ValueNumber ==_ggdd ._dcbe ;}else {_fcaga :=_dc .ToLower (_cfabf .ValueString );return _ggdd ._gggd ==_fcaga ||_f .Match (_ggdd ._gggd ,_fcaga );};};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_abgd :=[]float64 {};
for _ ,_bbgea :=range args {switch _bbgea .Type {case ResultTypeString :_dafa :=_bbgea .AsNumber ();if _dafa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_abgd =append (_abgd ,_dafa .ValueNumber );case ResultTypeList ,ResultTypeArray :_cfba :=GCD (_bbgea .ListValues ());if _cfba .Type !=ResultTypeNumber {return _cfba ;};_abgd =append (_abgd ,_cfba .ValueNumber );case ResultTypeNumber :_abgd =append (_abgd ,_bbgea .ValueNumber );
case ResultTypeError :return _bbgea ;default:return MakeErrorResult (_bg .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bbgea .Type ));
};};if _abgd [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_abgd )==1{return MakeNumberResult (_abgd [0]);
};_geda :=_abgd [0];for _debb :=1;_debb < len (_abgd );_debb ++{if _abgd [_debb ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_geda =_badfa (_geda ,_abgd [_debb ]);};return MakeNumberResult (_geda );};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_fafac :pfx ,_egbba :exp }};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_adg ,_gddf :=_bfcgb (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _gddf .Type ==ResultTypeError {return _gddf ;};_dceb :=_adg ._gddd ;_cfde :=_adg ._gegg ;_bedb ,_gddf :=_bgcde (_adg ._eedbc ,_adg ._bfb ,_dceb ,_cfde );
if _gddf .Type ==ResultTypeError {return _gddf ;};return MakeNumberResult (_bedb );};func _ddff (_gdea Result ,_ddffd ,_bceb int )[][]Result {_cbcg :=[][]Result {};switch _gdea .Type {case ResultTypeArray :for _bcee ,_affd :=range _gdea .ValueArray {if _bcee < _ddffd {_cbcg =append (_cbcg ,_gdgce (MakeListResult (_affd ),_bceb ));
}else {_cbcg =append (_cbcg ,_gdgce (MakeErrorResultType (ErrorTypeNA ,""),_bceb ));};};case ResultTypeList :_bbgf :=_gdgce (_gdea ,_bceb );for _gbdcb :=0;_gbdcb < _ddffd ;_gbdcb ++{_cbcg =append (_cbcg ,_bbgf );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _ecbdb :=0;
_ecbdb < _ddffd ;_ecbdb ++{_cfgf :=_gdgce (_gdea ,_bceb );_cbcg =append (_cbcg ,_cfgf );};};return _cbcg ;};func _defge (_bbf ,_cbga ,_fcf int )float64 {return float64 (_afbga (_bbf ,_bc .Month (_cbga ),_fcf )/86400)+_gbde ;};func _agcb (_cdda ,_bbe Result ,_aefgd string )(float64 ,float64 ,Result ){_eae ,_abeb :=_aefb (_cdda ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_aefgd );
if _abeb .Type ==ResultTypeError {return 0,0,_abeb ;};_feba ,_abeb :=_aefb (_bbe ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_aefgd );if _abeb .Type ==ResultTypeError {return 0,0,_abeb ;};if _eae >=_feba {return 0,0,MakeErrorResultType (ErrorTypeNum ,_aefgd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};return _eae ,_feba ,_bgb ;};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_gdec ,_bacd :=_dcdf (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _bacd .Type ==ResultTypeError {return _bacd ;};_bcbg :=_gdec ._aee ;_efff :=_gdec ._eeea ;_ffab :=_gdec ._eabd ;_fbcec :=_gdec ._fdca ;
_bcfe :=_gdec ._bbaad ;_ccgc :=_gdec ._dcgg ;_ecdb :=_fcad (_bcbg ,_efff ,_ffab ,_fbcec ,_bcfe ,_ccgc );if _ecdb .Type ==ResultTypeError {return _ecdb ;};_fcbd :=_ecdb .ValueNumber /(1.0+_fbcec /_bcfe );return MakeNumberResult (_fcbd );};

// HasFormula returns FALSE for the invalid reference context.
func (_cgdcc *ivr )HasFormula (cellRef string )bool {return false };

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_addf :=args [0].AsString ();if _addf .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_abae :=_be .Buffer {};_abbdb :=false ;_degab :=false ;_feaga :=0;for _ ,_begba :=range _addf .ValueString {_gdce :=_begba ==' ';if _gdce {if !_abbdb {continue ;};if !_degab {_feaga ++;_abae .WriteRune (_begba );};}else {_feaga =0;_abbdb =true ;_abae .WriteRune (_begba );
};_degab =_gdce ;};_abae .Truncate (_abae .Len ()-_feaga );return MakeStringResult (_abae .String ());};func _bcfc (_dbfc yyLexer ,_fgdfc *yySymType )(_gcca ,_dcbeg int ){_dcbeg =0;_gcca =_dbfc .Lex (_fgdfc );if _gcca <=0{_dcbeg =_fbgeg [0];goto _ccfa ;
};if _gcca < len (_fbgeg ){_dcbeg =_fbgeg [_gcca ];goto _ccfa ;};if _gcca >=_eead {if _gcca < _eead +len (_ccbg ){_dcbeg =_ccbg [_gcca -_eead ];goto _ccfa ;};};for _ddac :=0;_ddac < len (_eadf );_ddac +=2{_dcbeg =_eadf [_ddac +0];if _dcbeg ==_gcca {_dcbeg =_eadf [_ddac +1];
goto _ccfa ;};};_ccfa :if _dcbeg ==0{_dcbeg =_ccbg [1];};if _debbc >=3{_bg .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_bdae (_dcbeg ),uint (_gcca ));};return _gcca ,_dcbeg ;};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_egff :=args [0].ValueNumber ;_bedf :=args [1].ValueNumber ;_cdce :=args [2].ValueNumber ;_abb :=_gaa (_egff ,_bedf ,_cdce );if _abb >=0{return MakeNumberResult (_abb );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _dfdc (args ,false )};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aafe :=args [0];switch _aafe .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
case ResultTypeString :_bbfd :=0.0;_fgfa :=0.0;for _ ,_efag :=range _aafe .ValueString {_gdca :=0.0;switch _efag {case 'I':_gdca =1;case 'V':_gdca =5;case 'X':_gdca =10;case 'L':_gdca =50;case 'C':_gdca =100;case 'D':_gdca =500;case 'M':_gdca =1000;};_bbfd +=_gdca ;
switch {case _fgfa ==_gdca &&(_fgfa ==5||_fgfa ==50||_fgfa ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_fgfa ==_gdca :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");
};if _fgfa < _gdca {_bbfd -=2*_fgfa ;};_fgfa =_gdca ;};return MakeNumberResult (_bbfd );case ResultTypeError :return _aafe ;default:return MakeErrorResult (_bg .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_aafe .Type ));
};};

// Eval evaluates and returns the result of a formula.
func (_bfdc *defEval )Eval (ctx Context ,formula string )Result {_bgaf :=ParseString (formula );_faga :=make (chan Result );go func (){if _bgaf ==nil {_faga <-MakeErrorResult (_bg .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));
}else {_bfdc .checkLastEvalIsRef (ctx ,_bgaf );_faga <-_bgaf .Eval (ctx ,_bfdc );};}();select{case _aede :=<-_faga :return _aede ;case <-_bc .After (_gb ):_ed .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");
return MakeNumberResult (0);};};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dgfd :=args [0].AsString ();if _dgfd .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeStringResult (_dc .ToUpper (_dgfd .ValueString ));};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_dgd EmptyExpr )Update (q *_af .UpdateQuery )Expression {return _dgd };func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bcfdd :=args [0].AsNumber ();if _bcfdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (180.0/_a .Pi *_bcfdd .ValueNumber );};

// Update returns the same object as updating sheet references does not affect String.
func (_aagbc String )Update (q *_af .UpdateQuery )Expression {return _aagbc };

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};func LexReader (r _cg .Reader )chan *node {_adbdg :=NewLexer ();go _adbdg .lex (r );return _adbdg ._bfbb };

// Reference returns a string reference value to a horizontal range with prefix.
func (_afgec PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_fadea :=_afgec ._fbbc .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_afgec .horizontalRangeReference (_fadea .Value )};};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_efea [][]Expression };func (_cebgd PrefixVerticalRange )verticalRangeReference (_feddd string )string {return _bg .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_feddd ,_cebgd ._feffc ,_cebgd ._gdeed );};var _bdbe =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};
const _bagea =57373;

// String returns a string representation for Bool.
func (_ad Bool )String ()string {if _ad ._aab {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bbaaf :=args [0];switch _bbaaf .Type {case ResultTypeError :return _bbaaf ;case ResultTypeNumber ,ResultTypeString :return _efgb (args [0]);case ResultTypeList :_bfddg :=_bbaaf .ValueList ;_begac :=[]Result {};for _ ,_fbfc :=range _bfddg {_effff :=_efgb (_fbfc );
if _effff .Type ==ResultTypeError {return _effff ;};_begac =append (_begac ,_effff );};return MakeListResult (_begac );case ResultTypeArray :_becfa :=_bbaaf .ValueArray ;_degae :=[][]Result {};for _ ,_bfdg :=range _becfa {_abbc :=[]Result {};for _ ,_deac :=range _bfdg {_edcgf :=_efgb (_deac );
if _edcgf .Type ==ResultTypeError {return _edcgf ;};_abbc =append (_abbc ,_edcgf );};_degae =append (_degae ,_abbc );};return MakeArrayResult (_degae );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_edgae PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_ccdfg :=_edgae ._fbbc .Reference (ctx ,ev );switch _ccdfg .Type {case ReferenceTypeSheet :if _cadcc (_ccdfg ,ctx ){return MakeErrorResultType (ErrorTypeName ,_bg .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ccdfg .Value ));
};_bcdd :=_edgae .horizontalRangeReference (_ccdfg .Value );if _cdadg ,_agcegd :=ev .GetFromCache (_bcdd );_agcegd {return _cdadg ;};_cbagd :=ctx .Sheet (_ccdfg .Value );_gddda ,_aacff :=_efeab (_cbagd ,_edgae ._bdgf ,_edgae ._egec );_fbde :=_cabcgf (_cbagd ,ev ,_gddda ,_aacff );
ev .SetCache (_bcdd ,_fbde );return _fbde ;default:return MakeErrorResult (_bg .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ccdfg .Type ));
};};

// Update updates references in the PrefixExpr after removing a row/column.
func (_ggada PrefixExpr )Update (q *_af .UpdateQuery )Expression {_bfbg :=_ggada ;_fgadfe :=_ggada ._fafac .String ();if _fgadfe ==q .SheetToUpdate {_dffe :=*q ;_dffe .UpdateCurrentSheet =true ;_bfbg ._egbba =_ggada ._egbba .Update (&_dffe );};return _bfbg ;
};const _dgeg =57360;

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_fbed ,_dfbgf :=_ee .ParseFloat (v ,64);if _dfbgf !=nil {_ed .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_dfbgf );
};return Number {_fbbgb :_fbed };};func (_gagee PrefixHorizontalRange )horizontalRangeReference (_egge string )string {return _bg .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_egge ,_gagee ._bdgf ,_gagee ._egec );};const (ResultTypeUnknown ResultType =iota ;
ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_bacg :=len (args );if _bacg < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_edcc :=args [0].ValueNumber ;if _edcc ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_eafg :=[]float64 {};for _ ,_gaac :=range args [1:]{switch _gaac .Type {case ResultTypeNumber :_eafg =append (_eafg ,_gaac .ValueNumber );case ResultTypeArray ,ResultTypeList :_fefe :=_ggbe (_gaac );
for _ ,_bec :=range _fefe {for _ ,_dcc :=range _bec {if _dcc .Type ==ResultTypeNumber &&!_dcc .IsBoolean {_eafg =append (_eafg ,_dcc .ValueNumber );};};};};};_beff :=0.0;for _cdg ,_bfaa :=range _eafg {_beff +=_bfaa /_a .Pow (1+_edcc ,float64 (_cdg )+1);
};return MakeNumberResult (_beff );};func _ggfe (_aefab []Result ,_bdcb bool ,_dacc string )Result {var _afbe ,_ecebe string ;if _bdcb {_afbe ="\u0074\u0068\u0072e\u0065";_ecebe ="\u006f\u0064\u0064";}else {_afbe ="\u0074\u0077\u006f";_ecebe ="\u0065\u0076\u0065\u006e";
};_afce :=len (_aefab );if (_bdcb &&_afce < 3)||(!_bdcb &&_afce < 2){return MakeErrorResult (_dacc +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_afbe +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};if (_afce /2*2==_afce )==_bdcb {return MakeErrorResult (_dacc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_ecebe +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_gbced :=-1;_bfafa :=-1;
for _gdbcg :=0;_gdbcg < _afce ;_gdbcg +=2{_bgade :=_aefab [_gdbcg ];if _bgade .Type !=ResultTypeArray &&_bgade .Type !=ResultTypeList {return MakeErrorResult (_dacc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");
};_fbaa :=_ggbe (_bgade );if _bfafa ==-1{_bfafa =len (_fbaa );_gbced =len (_fbaa [0]);}else if len (_fbaa )!=_bfafa ||len (_fbaa [0])!=_gbced {return MakeErrorResult (_dacc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");
};if _bdcb &&_gdbcg ==0{_gdbcg --;};};return _bgb ;};type Reference struct{Type ReferenceType ;Value string ;};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_efgg ,_bdgc ,_edcg :=_fedb (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _edcg .Type ==ResultTypeError {return _edcg ;};if _bdgc < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");
};if _efgg ==0{return MakeNumberResult (0);};_eba :=_efgg < 0;if _eba {_efgg =-_efgg ;};_cfaf :=args [0].Value ();_gdf :=_dc .Split (_cfaf ,"\u002e");_acbcb :=float64 (int (_efgg ));_aedf :=_gdf [1];_beae :=len (_aedf );_abef :=int (_a .Log10 (_bdgc ))+1;
_cece :=float64 (_abef -_beae );_dbdf ,_feda :=_ee .ParseFloat (_aedf ,64);if _feda !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");
};_dbdf *=_a .Pow (10,_cece );_fage :=_acbcb +_dbdf /_bdgc ;if _eba {_fage =-_fage ;};return MakeNumberResult (_fage );};const _ebgd int =0;func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ebefd :=args [0].AsNumber ();if _ebefd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _ebefd .ValueNumber < 0{return MakeNumberResult (-1);}else if _ebefd .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_ecgd :=len (args );if _ecgd !=4&&_ecgd !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_feaa :=args [0].ValueNumber ;if _feaa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_agcc :=args [1].ValueNumber ;if _agcc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gbab :=args [2].ValueNumber ;if _gbab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aegf :=args [3].ValueNumber ;if _aegf < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");
};if _aegf > _gbab {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_cgbd :=2.0;if _ecgd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgbd =args [4].ValueNumber ;if _cgbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};return MakeNumberResult (_eedce (_feaa ,_agcc ,_gbab ,_aegf ,_cgbd ));};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_dgca :=_dc .Split (v ,"\u003a");if len (_dgca )!=2{return nil ;};if _dgca [0]> _dgca [1]{_dgca [0],_dgca [1]=_dgca [1],_dgca [0];};return VerticalRange {_ecga :_dgca [0],_gccba :_dgca [1]};};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_gbaab :=len (args );if _gbaab < 3||_gbaab > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gega :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbdfg :=args [1].ValueNumber ;if _dbdfg ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_aace :=args [2].ValueNumber ;_afgge :=0.0;if _gbaab >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afgge =args [3].ValueNumber ;};_dcgbc :=0.0;if _gbaab ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dcgbc =args [4].ValueNumber ;if _dcgbc !=0{_dcgbc =1;};};var _dgbd float64 ;if _gega ==0{_dgbd =(_aace +_afgge )/_dbdfg ;}else {_afcba :=_a .Pow (1+_gega ,_dbdfg );if _dcgbc ==1{_dgbd =(_afgge *_gega /(_afcba -1)+_aace *_gega /(1-1/_afcba ))/(1+_gega );
}else {_dgbd =_afgge *_gega /(_afcba -1)+_aace *_gega /(1-1/_afcba );};};return MakeNumberResult (-_dgbd );};

// Reference returns an invalid reference for Number.
func (_egbf Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// String returns a string representation of CellRef.
func (_cbg CellRef )String ()string {return _cbg ._ca };func _dabeb (_cfcgea ,_bcdba ,_gdbcc Reference )string {return _bg .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_cfcgea .Value ,_bcdba .Value ,_gdbcc .Value );};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_fddf ,_gccbd int };

// Eval evaluates and returns the result of an error expression.
func (_eege Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_eege ._cab )};func _dea (){_gcg ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_g .MustCompile ("\u005e"+_bgge +_fgfd );_gcg ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_g .MustCompile ("\u005e"+_bbc +_fgfd );
_gcg ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_g .MustCompile ("\u005e"+_fff +_fgfd );_gcg ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_g .MustCompile ("\u005e"+_cae +_fgfd );_cbc ["\u0068\u0068"]=_g .MustCompile (_gcdf +_bef +"\u0024");
_cbc ["\u0068\u0068\u003am\u006d"]=_g .MustCompile (_gcdf +_cedg +"\u0024");_cbc ["\u006d\u006d\u003as\u0073"]=_g .MustCompile (_gcdf +_gdc +"\u0024");_cbc ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_g .MustCompile (_gcdf +_eaf +"\u0024");_cfa =[]*_g .Regexp {_g .MustCompile ("\u005e"+_bgge +"\u0024"),_g .MustCompile ("\u005e"+_bbc +"\u0024"),_g .MustCompile ("\u005e"+_fff +"\u0024"),_g .MustCompile ("\u005e"+_cae +"\u0024")};
_dcff =[]*_g .Regexp {_g .MustCompile ("\u005e"+_bef +"\u0024"),_g .MustCompile ("\u005e"+_cedg +"\u0024"),_g .MustCompile ("\u005e"+_gdc +"\u0024"),_g .MustCompile ("\u005e"+_eaf +"\u0024")};};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_afcb :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_afcb *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_cffg :=_ggbe (args [1]);for _ ,_fffb :=range _cffg {for _ ,_fdcb :=range _fffb {if _fdcb .Type !=ResultTypeNumber ||_fdcb .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");
};_afcb *=1.0+_fdcb .ValueNumber ;};};return MakeNumberResult (_afcb );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");
};};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_bdbg ,_fdag :=_fcag (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _fdag .Type ==ResultTypeError {return _fdag ;};_ccg :=_bdbg ._fcg ;_gdbb :=_bdbg ._ggd ;_ccbfb :=_bdbg ._baa ;_ecda :=_bdbg ._bgac ;
_ccce :=_bdbg ._bdcf ;_gccb :=_bdbg ._cecag ;_dcdg :=_begfd (_ccg ,_gdbb ,_ccbfb ,0,_gccb );_egba :=0.0;if _ecda ==1{if _gccb ==0{_egba =_dcdg +_ccbfb *_ccg ;}else {_egba =_dcdg ;};_ecda ++;};for _bbaab :=_ecda ;_bbaab <=_ccce ;_bbaab ++{if _gccb ==1{_egba +=_dcdg -(_cecfa (_ccg ,_bbaab -2,_dcdg ,_ccbfb ,1)-_dcdg )*_ccg ;
}else {_egba +=_dcdg -_cecfa (_ccg ,_bbaab -1,_dcdg ,_ccbfb ,0)*_ccg ;};};return MakeNumberResult (_egba );};var _dcff =[]*_g .Regexp {};var _bgga =map[string ]Function {};

// Reference returns a string reference value to a vertical range.
func (_abdde VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_abdde .verticalRangeReference ()};};type criteriaParsed struct{_ceffb bool ;_dcbe float64 ;_gggd string ;_dfcf *criteriaRegex ;
};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_bbea .Lock ();defer _bbea .Unlock ();if _ ,_abbfg :=_gbgfg [name ];_abbfg {_ed .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_gbgfg [name ]=fn ;};func _efeab (_ggadd Context ,_bgafe ,_ecdafa int )(string ,string ){_febd :="\u0041"+_ee .Itoa (_bgafe );_egaa :=_ggadd .LastColumn (_bgafe ,_ecdafa );_fdeg :=_egaa +_ee .Itoa (_ecdafa );return _febd ,_fdeg ;};const _aacc =57372;
