//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_eg "bytes";_d "errors";_ef "fmt";_bf "github.com/unidoc/unioffice/common/logger";_b "github.com/unidoc/unioffice/internal/mergesort";_fg "github.com/unidoc/unioffice/internal/wildcard";_g "github.com/unidoc/unioffice/spreadsheet/format";
_ab "github.com/unidoc/unioffice/spreadsheet/reference";_cg "github.com/unidoc/unioffice/spreadsheet/update";_a "io";_eff "math";_c "math/big";_aa "math/rand";_f "regexp";_dc "sort";_ead "strconv";_ea "strings";_ee "sync";_cb "time";_dd "unicode";);const _ggf ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";
const _gbfe ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";


// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fbce :=args [0].Ref ;if _fbce .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .HasFormula (_fbce .Value ));};func _edbb (_eeg int )int {if _eeg < 1900{if _eeg < 30{_eeg +=2000;}else {_eeg +=1900;};};return _eeg ;};func _fgdc (_aacfa ,_faad Result ,_ggca ,_geced bool )cmpResult {_aacfa =_aacfa .AsNumber ();
_faad =_faad .AsNumber ();if _aacfa .Type !=_faad .Type {return _ebgd ;};if _aacfa .Type ==ResultTypeNumber {if _aacfa .ValueNumber ==_faad .ValueNumber {return _feaga ;};if _aacfa .ValueNumber < _faad .ValueNumber {return _bdgf ;};return _gbfb ;};if _aacfa .Type ==ResultTypeString {_caca :=_aacfa .ValueString ;
_deeac :=_faad .ValueString ;if !_ggca {_caca =_ea .ToLower (_caca );_deeac =_ea .ToLower (_deeac );};if _geced {_bacg :=_fg .Match (_deeac ,_caca );if _bacg {return _feaga ;}else {return _gbfb ;};};return cmpResult (_ea .Compare (_caca ,_deeac ));};if _aacfa .Type ==ResultTypeEmpty {return _feaga ;
};if _aacfa .Type ==ResultTypeList {if len (_aacfa .ValueList )< len (_faad .ValueList ){return _bdgf ;};if len (_aacfa .ValueList )> len (_faad .ValueList ){return _gbfb ;};for _gcbba :=range _aacfa .ValueList {_fdbge :=_fgdc (_aacfa .ValueList [_gcbba ],_faad .ValueList [_gcbba ],_ggca ,_geced );
if _fdbge !=_feaga {return _fdbge ;};};return _feaga ;};if _aacfa .Type ==ResultTypeList {if len (_aacfa .ValueArray )< len (_faad .ValueArray ){return _bdgf ;};if len (_aacfa .ValueArray )> len (_faad .ValueArray ){return _gbfb ;};for _gfaeg :=range _aacfa .ValueArray {_aead :=_aacfa .ValueArray [_gfaeg ];
_bega :=_aacfa .ValueArray [_gfaeg ];if len (_aead )< len (_bega ){return _bdgf ;};if len (_aead )> len (_bega ){return _gbfb ;};for _cbea :=range _aead {_egcgf :=_fgdc (_aead [_cbea ],_bega [_cbea ],_ggca ,_geced );if _egcgf !=_feaga {return _egcgf ;};
};};return _feaga ;};return _ebgd ;};const _fgfaff =1;

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_cbe :=&defEval {};_cbe .evCache =_efc ();return _cbe };

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_afbd ,_cdea :=_babc (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _cdea .Type ==ResultTypeError {return _cdea ;};_bbfde :=_afbd ._dgcg ;_fcdb :=_afbd ._aga ;_baeaa :=_afbd ._cdeb ;_dbca :=_afbd ._bddf ;
_efdb :=_afbd ._aec ;_fec :=_afbd ._eeeg ;if _fec >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");
};_gbcc :=_afbd ._aacf ;_acdf :=1.0/_fec ;_ddeg :=2.5;if _acdf < 3{_ddeg =1;}else if _acdf < 5{_ddeg =1.5;}else if _acdf <=6{_ddeg =2;};_fec *=_ddeg ;_dgce ,_adef :=_ggff (_fcdb ,_baeaa ,_gbcc );if _adef .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");
};_fgfa :=_cga (_dgce *_fec *_bbfde );_bbfde -=_fgfa ;_cgdf :=_bbfde -_dbca ;for _gffc :=0;_gffc < _efdb ;_gffc ++{_fgfa =_cga (_fec *_bbfde );_cgdf -=_fgfa ;if _cgdf < 0{switch _efdb -_gffc {case 0:case 1:return MakeNumberResult (_cga (_bbfde *0.5));default:return MakeNumberResult (0);
};};_bbfde -=_fgfa ;};return MakeNumberResult (_fgfa );};const (_feaga cmpResult =0;_bdgf cmpResult =-1;_gbfb cmpResult =1;_ebgd cmpResult =2;);

// String returns a string representation of Number.
func (_bbcce Number )String ()string {return _ead .FormatFloat (_bbcce ._bgeda ,'f',-1,64)};func _aede (_cabe ,_eebgg float64 )float64 {_cabe =_eff .Trunc (_cabe );_eebgg =_eff .Trunc (_eebgg );if _cabe ==0&&_eebgg ==0{return 0;};return _cabe *_eebgg /_ebab (_cabe ,_eebgg );
};

// Update updates references in the BinaryExpr after removing a row/column.
func (_aagg BinaryExpr )Update (q *_cg .UpdateQuery )Expression {_eed :=_aagg ;_eed ._db =_aagg ._db .Update (q );_eed ._aae =_aagg ._aae .Update (q );return _eed ;};func _afadf (_gggc int )string {if _gggc >=0&&_gggc < len (_bdff ){if _bdff [_gggc ]!=""{return _bdff [_gggc ];
};};return _ef .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_gggc );};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_fefbg PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_dcfdc :=_fefbg ._fbbc .Reference (ctx ,ev );switch _dcfdc .Type {case ReferenceTypeSheet :if _effg (_dcfdc ,ctx ){return MakeErrorResultType (ErrorTypeName ,_ef .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dcfdc .Value ));
};_gfedea :=_fefbg .horizontalRangeReference (_dcfdc .Value );if _aeeb ,_gegfc :=ev .GetFromCache (_gfedea );_gegfc {return _aeeb ;};_gbba :=ctx .Sheet (_dcfdc .Value );_dbfge ,_fabbf :=_acgfe (_gbba ,_fefbg ._ggede ,_fefbg ._dcaf );_fdagd :=_ebcab (_gbba ,ev ,_dbfge ,_fabbf );
ev .SetCache (_gfedea ,_fdagd );return _fdagd ;default:return MakeErrorResult (_ef .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dcfdc .Type ));
};};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_fbge :=_cb .Now ();
_ ,_egfg :=_fbge .Zone ();_bcae :=_abb +float64 (_fbge .Unix ()+int64 (_egfg ))/86400;return MakeNumberResult (_bcae );};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_gcf :=len (args );if _gcf < 3||_gcf > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_acce :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_fff :=args [1].ValueNumber ;if _fff !=float64 (int (_fff )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfg :=args [2].ValueNumber ;_bacc :=0.0;if _gcf >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bacc =args [3].ValueNumber ;};_cebe :=0;if _gcf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cebe =int (args [4].ValueNumber );if _cebe !=0{_cebe =1;};};return MakeNumberResult (_bbgga (_acce ,_fff ,_cfg ,_bacc ,_cebe ));};

// String returns an empty string for EmptyExpr.
func (_ebf EmptyExpr )String ()string {return ""};func (_eabc Result )String ()string {return _eabc .Value ()};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_fabf :=len (args );if _fabf !=6&&_fabf !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dgaaf ,_bbed ,_bbfa :=_cafe (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _bbfa .Type ==ResultTypeError {return _bbfa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_feac :=args [2].ValueNumber ;if _feac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_ceeg :=args [3].ValueNumber ;if _ceeg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bfcc :=args [4].ValueNumber ;if _bfcc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dffd :=args [5];if _dffd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cbaba :=_dffd .ValueNumber ;if !_dbed (_cbaba ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_edac :=0;if _fabf ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_edac =int (args [6].ValueNumber );if !_eegdf (_edac ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");
};};_aeec ,_bbfa :=_cdgd (_dgaaf ,_bbed ,_feac ,_ceeg ,_bfcc ,_cbaba ,_edac );if _bbfa .Type ==ResultTypeError {return _bbfa ;};return MakeNumberResult (_aeec );};func _eaa (_gaed Result ,_age ,_edef string )(float64 ,Result ){var _eccf float64 ;switch _gaed .Type {case ResultTypeNumber :_eccf =float64 (int (_gaed .ValueNumber ));
case ResultTypeString :_ffg :=DateValue ([]Result {_gaed });if _ffg .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_age +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_edef );
};_eccf =_ffg .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_edef );};if _eccf < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_age +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};return _eccf ,_bgg ;};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_cbga ,_abaaf :=_eege (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _abaaf .Type ==ResultTypeError {return _abaaf ;};return MakeNumberResult (_eab (_cbga ._ccff ,_cbga ._eeed ,_cbga ._bcbd ,_cbga ._cegd ));
};func _agdg (_fcgb []Result ,_bacf string )(float64 ,float64 ,Result ){if len (_fcgb )!=2{return 0,0,MakeErrorResult (_bacf +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _fcgb [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_bacf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_ebfa :=_fcgb [0].ValueNumber ;if _fcgb [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_bacf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gcba :=float64 (int (_fcgb [1].ValueNumber ));if _gcba < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_bacf +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");
};return _ebfa ,_gcba ,_bgg ;};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_egee :=args [0].Ref ;if _egee .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");
};_cbag ,_fffc :=_ab .ParseCellReference (_egee .Value );if _fffc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_egee .Value );};return MakeNumberResult (float64 (_cbag .RowIdx ));
};func _aegba (_ccbgb Result ,_afcdb *criteriaParsed )bool {_cbgea :=_ea .ToLower (_ccbgb .ValueString );_cfgddb :=_afcdb ._ggfd ._eeef ;_gebd :=_afcdb ._ggfd ._efge ;if _cfgddb ==_dggb {return _cbgea ==_gebd ||_fg .Match (_gebd ,_cbgea );};if _ccbgb .Type !=ResultTypeEmpty {if _cbgea ==_afcdb ._gecg ||_fg .Match (_afcdb ._gecg ,_cbgea ){return true ;
};if _ ,_bdaa :=_ead .ParseFloat (_gebd ,64);_bdaa ==nil {return false ;};switch _cfgddb {case _fcafb :return _cbgea <=_gebd ;case _eagbb :return _cbgea >=_gebd ;case _edfg :return _cbgea < _gebd ;case _gegd :return _cbgea > _gebd ;};};return false ;};
const (_ byte =iota ;_dggb ;_fcafb ;_eagbb ;_edfg ;_gegd ;);

// Reference returns a string reference value to a vertical range with prefix.
func (_aceeg PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_fgfgf :=_aceeg ._dagdb .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_aceeg .verticalRangeReference (_fgfgf .Value )};};func _fe (_fgf BinOpType ,_dg [][]Result ,_afd Result )Result {_bfb :=[][]Result {};
for _bff :=range _dg {_bfba :=_eac (_fgf ,_dg [_bff ],_afd );if _bfba .Type ==ResultTypeError {return _bfba ;};_bfb =append (_bfb ,_bfba .ValueList );};return MakeArrayResult (_bfb );};const _ebcea =57359;

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};func _ddac (_fbeg Result ,_becac *criteriaParsed )bool {if _fbeg .Type ==ResultTypeEmpty {return false ;};if _becac ._cfdeb {return _fbeg .ValueNumber ==_becac ._ceea ;
}else {_bagge :=_ea .ToLower (_fbeg .ValueString );return _becac ._gecg ==_bagge ||_fg .Match (_becac ._gecg ,_bagge );};};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_eagbg :=args [0].AsNumber ();if _eagbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _eagbg .ValueNumber < 0{return MakeNumberResult (-1);}else if _eagbg .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_deead :=args [0];if _deead .Type !=ResultTypeArray &&_deead .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_cdba :=_bfacf (_deead );_acade :=args [2];if _acade .Type !=ResultTypeArray &&_acade .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_edff :=_bfacf (_acade );_gbab :=_bcac (args [1]);_bbgb :=0.0;for _ebcbg ,_ccadcb :=range _cdba {for _ccdde ,_gbddc :=range _ccadcb {if _abebd (_gbddc ,_gbab ){_bbgb +=_edff [_ebcbg ][_ccdde ].ValueNumber ;};};};return MakeNumberResult (_bbgb );};

// Reference returns an invalid reference for Error.
func (_bcd Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Reference returns a string reference value to a cell.
func (_add CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_add ._eeb };};func (_eggc *yyParserImpl )Parse (yylex yyLexer )int {_caedd :=_cb .Now ();var _ecac int ;var _adgg yySymType ;var _fded []yySymType ;
_ =_fded ;_eedag :=_eggc ._cecgb [:];Nerrs :=0;Errflag :=0;_bbacf :=0;_eggc ._fdfc =-1;_aaef :=-1;defer func (){_bbacf =-1;_eggc ._fdfc =-1;_aaef =-1}();_gfcf :=-1;goto _fcad ;_edfb :return 0;_gged :return 1;_fcad :if _cbdfa (_caedd ){_bf .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");
goto _gged ;};if _bdaf >=4{_ef .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_ebagc (_aaef ),_afadf (_bbacf ));};_gfcf ++;if _gfcf >=len (_eedag ){_fffca :=make ([]yySymType ,len (_eedag )*2);copy (_fffca ,_eedag );
_eedag =_fffca ;};_eedag [_gfcf ]=_adgg ;_eedag [_gfcf ]._gbfag =_bbacf ;_afga :if _cbdfa (_caedd ){_bf .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _gged ;};_ecac =_eece [_bbacf ];if _ecac <=_edaga {goto _gbge ;
};if _eggc ._fdfc < 0{_eggc ._fdfc ,_aaef =_bdgbb (yylex ,&_eggc ._ccdcec );};_ecac +=_aaef ;if _ecac < 0||_ecac >=_fcfeb {goto _gbge ;};_ecac =_dcdg [_ecac ];if _baaag [_ecac ]==_aaef {_eggc ._fdfc =-1;_aaef =-1;_adgg =_eggc ._ccdcec ;_bbacf =_ecac ;if Errflag > 0{Errflag --;
};goto _fcad ;};_gbge :if _cbdfa (_caedd ){_bf .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _gged ;};_ecac =_edefg [_bbacf ];if _ecac ==-2{if _eggc ._fdfc < 0{_eggc ._fdfc ,_aaef =_bdgbb (yylex ,&_eggc ._ccdcec );
};_feeg :=0;for {if _dgfeb [_feeg +0]==-1&&_dgfeb [_feeg +1]==_bbacf {break ;};_feeg +=2;};for _feeg +=2;;_feeg +=2{_ecac =_dgfeb [_feeg +0];if _ecac < 0||_ecac ==_aaef {break ;};};_ecac =_dgfeb [_feeg +1];if _ecac < 0{goto _edfb ;};};if _ecac ==0{switch Errflag {case 0:yylex .Error (_cebacc (_bbacf ,_aaef ));
Nerrs ++;if _bdaf >=1{_ef .Printf ("\u0025\u0073",_afadf (_bbacf ));_ef .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_ebagc (_aaef ));};fallthrough;case 1,2:Errflag =3;for _gfcf >=0{_ecac =_eece [_eedag [_gfcf ]._gbfag ]+_cfbde ;if _ecac >=0&&_ecac < _fcfeb {_bbacf =_dcdg [_ecac ];
if _baaag [_bbacf ]==_cfbde {goto _fcad ;};};if _bdaf >=2{_ef .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_eedag [_gfcf ]._gbfag );
};_gfcf --;};goto _gged ;case 3:if _bdaf >=2{_ef .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_ebagc (_aaef ));};if _aaef ==_fgfaff {goto _gged ;};_eggc ._fdfc =-1;
_aaef =-1;goto _afga ;};};if _bdaf >=2{_ef .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_ecac ,_afadf (_bbacf ));};_cgggb :=_ecac ;_agca :=_gfcf ;_ =_agca ;_gfcf -=_fecag [_ecac ];if _gfcf +1>=len (_eedag ){_cbbgfd :=make ([]yySymType ,len (_eedag )*2);
copy (_cbbgfd ,_eedag );_eedag =_cbbgfd ;};_adgg =_eedag [_gfcf +1];_ecac =_ffgg [_ecac ];_ceadd :=_ceeae [_ecac ];_cgaf :=_ceadd +_eedag [_gfcf ]._gbfag +1;if _cgaf >=_fcfeb {_bbacf =_dcdg [_ceadd ];}else {_bbacf =_dcdg [_cgaf ];if _baaag [_bbacf ]!=-_ecac {_bbacf =_dcdg [_ceadd ];
};};switch _cgggb {case 1:_fded =_eedag [_agca -1:_agca +1];{yylex .(*plex )._gdfa =_adgg ._efdg ;};case 3:_fded =_eedag [_agca -2:_agca +1];{_adgg ._efdg =_fded [2]._efdg ;};case 4:_fded =_eedag [_agca -4:_agca +1];{};case 5:_fded =_eedag [_agca -1:_agca +1];
{_adgg ._efdg =NewBool (_fded [1]._fbgdc ._geba );};case 6:_fded =_eedag [_agca -1:_agca +1];{_adgg ._efdg =NewNumber (_fded [1]._fbgdc ._geba );};case 7:_fded =_eedag [_agca -1:_agca +1];{_adgg ._efdg =NewString (_fded [1]._fbgdc ._geba );};case 8:_fded =_eedag [_agca -1:_agca +1];
{_adgg ._efdg =NewError (_fded [1]._fbgdc ._geba );};case 9:_fded =_eedag [_agca -2:_agca +1];{_adgg ._efdg =_fded [2]._efdg ;};case 10:_fded =_eedag [_agca -2:_agca +1];{_adgg ._efdg =NewNegate (_fded [2]._efdg );};case 15:_fded =_eedag [_agca -3:_agca +1];
{_adgg ._efdg =_fded [2]._efdg ;};case 17:_fded =_eedag [_agca -3:_agca +1];{_adgg ._efdg =NewConstArrayExpr (_fded [2]._edfcf );};case 18:_fded =_eedag [_agca -1:_agca +1];{_adgg ._edfcf =append (_adgg ._edfcf ,_fded [1]._egdga );};case 19:_fded =_eedag [_agca -3:_agca +1];
{_adgg ._edfcf =append (_fded [1]._edfcf ,_fded [3]._egdga );};case 20:_fded =_eedag [_agca -1:_agca +1];{_adgg ._egdga =append (_adgg ._egdga ,_fded [1]._efdg );};case 21:_fded =_eedag [_agca -3:_agca +1];{_adgg ._egdga =append (_fded [1]._egdga ,_fded [3]._efdg );
};case 23:_fded =_eedag [_agca -2:_agca +1];{_adgg ._efdg =NewPrefixExpr (_fded [1]._efdg ,_fded [2]._efdg );};case 25:_fded =_eedag [_agca -1:_agca +1];{_adgg ._efdg =NewSheetPrefixExpr (_fded [1]._fbgdc ._geba );};case 26:_fded =_eedag [_agca -1:_agca +1];
{_adgg ._efdg =NewCellRef (_fded [1]._fbgdc ._geba );};case 27:_fded =_eedag [_agca -3:_agca +1];{_adgg ._efdg =NewRange (_fded [1]._efdg ,_fded [3]._efdg );};case 28:_fded =_eedag [_agca -4:_agca +1];{_adgg ._efdg =NewPrefixRangeExpr (_fded [1]._efdg ,_fded [2]._efdg ,_fded [4]._efdg );
};case 29:_fded =_eedag [_agca -1:_agca +1];{_adgg ._efdg =NewNamedRangeRef (_fded [1]._fbgdc ._geba );};case 30:_fded =_eedag [_agca -1:_agca +1];{_adgg ._efdg =NewHorizontalRange (_fded [1]._fbgdc ._geba );};case 31:_fded =_eedag [_agca -1:_agca +1];
{_adgg ._efdg =NewVerticalRange (_fded [1]._fbgdc ._geba );};case 32:_fded =_eedag [_agca -2:_agca +1];{_adgg ._efdg =NewPrefixHorizontalRange (_fded [1]._efdg ,_fded [2]._fbgdc ._geba );};case 33:_fded =_eedag [_agca -2:_agca +1];{_adgg ._efdg =NewPrefixVerticalRange (_fded [1]._efdg ,_fded [2]._fbgdc ._geba );
};case 34:_fded =_eedag [_agca -3:_agca +1];{_adgg ._efdg =NewBinaryExpr (_fded [1]._efdg ,BinOpTypePlus ,_fded [3]._efdg );};case 35:_fded =_eedag [_agca -3:_agca +1];{_adgg ._efdg =NewBinaryExpr (_fded [1]._efdg ,BinOpTypeMinus ,_fded [3]._efdg );};case 36:_fded =_eedag [_agca -3:_agca +1];
{_adgg ._efdg =NewBinaryExpr (_fded [1]._efdg ,BinOpTypeMult ,_fded [3]._efdg );};case 37:_fded =_eedag [_agca -3:_agca +1];{_adgg ._efdg =NewBinaryExpr (_fded [1]._efdg ,BinOpTypeDiv ,_fded [3]._efdg );};case 38:_fded =_eedag [_agca -3:_agca +1];{_adgg ._efdg =NewBinaryExpr (_fded [1]._efdg ,BinOpTypeExp ,_fded [3]._efdg );
};case 39:_fded =_eedag [_agca -3:_agca +1];{_adgg ._efdg =NewBinaryExpr (_fded [1]._efdg ,BinOpTypeLT ,_fded [3]._efdg );};case 40:_fded =_eedag [_agca -3:_agca +1];{_adgg ._efdg =NewBinaryExpr (_fded [1]._efdg ,BinOpTypeGT ,_fded [3]._efdg );};case 41:_fded =_eedag [_agca -3:_agca +1];
{_adgg ._efdg =NewBinaryExpr (_fded [1]._efdg ,BinOpTypeLEQ ,_fded [3]._efdg );};case 42:_fded =_eedag [_agca -3:_agca +1];{_adgg ._efdg =NewBinaryExpr (_fded [1]._efdg ,BinOpTypeGEQ ,_fded [3]._efdg );};case 43:_fded =_eedag [_agca -3:_agca +1];{_adgg ._efdg =NewBinaryExpr (_fded [1]._efdg ,BinOpTypeEQ ,_fded [3]._efdg );
};case 44:_fded =_eedag [_agca -3:_agca +1];{_adgg ._efdg =NewBinaryExpr (_fded [1]._efdg ,BinOpTypeNE ,_fded [3]._efdg );};case 45:_fded =_eedag [_agca -3:_agca +1];{_adgg ._efdg =NewBinaryExpr (_fded [1]._efdg ,BinOpTypeConcat ,_fded [3]._efdg );};case 47:_fded =_eedag [_agca -2:_agca +1];
{_adgg ._efdg =NewFunction (_fded [1]._fbgdc ._geba ,nil );};case 48:_fded =_eedag [_agca -3:_agca +1];{_adgg ._efdg =NewFunction (_fded [1]._fbgdc ._geba ,_fded [2]._egdga );};case 49:_fded =_eedag [_agca -1:_agca +1];{_adgg ._egdga =append (_adgg ._egdga ,_fded [1]._efdg );
};case 50:_fded =_eedag [_agca -3:_agca +1];{_adgg ._egdga =append (_fded [1]._egdga ,_fded [3]._efdg );};case 53:_fded =_eedag [_agca -0:_agca +1];{_adgg ._efdg =NewEmptyExpr ();};};goto _fcad ;};type node struct{_badde tokenType ;_geba string ;};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aaba :=args [0].AsString ();if _aaba .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeStringResult (_ea .ToUpper (_aaba .ValueString ));};var _eece =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};
type Expression interface{Eval (_edb Context ,_cbfg Evaluator )Result ;Reference (_ecbd Context ,_ccg Evaluator )Reference ;String ()string ;Update (_gbc *_cg .UpdateQuery )Expression ;};type noCache struct{};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_gaedb :pfx ,_bcfaga :exp }};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _cbfa (args ,false )};var _bcb =[]*_f .Regexp {};func _cac (_aabd int )bool {return _aabd ==0||_aabd ==4};type Reference struct{Type ReferenceType ;Value string ;};const _efce =57355;func _agaef (_effbc []Result ,_bddbe bool )(float64 ,float64 ){_abef :=0.0;
_dfdd :=0.0;for _ ,_fgcf :=range _effbc {switch _fgcf .Type {case ResultTypeNumber :if _bddbe ||!_fgcf .IsBoolean {_dfdd +=_fgcf .ValueNumber ;_abef ++;};case ResultTypeList ,ResultTypeArray :_agbb ,_beac :=_agaef (_fgcf .ListValues (),_bddbe );_dfdd +=_agbb ;
_abef +=_beac ;case ResultTypeString :if _bddbe {_abef ++;};case ResultTypeEmpty :};};return _dfdd ,_abef ;};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_gbaf ,_beca :=_eege (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _beca .Type ==ResultTypeError {return _beca ;};_gfb :=_fa (_gbaf ._ccff );_dagc :=_fa (_gbaf ._eeed );_cbcc :=_gbaf ._bcbd ;_bfgg :=_gbaf ._cegd ;
_ged :=_cffg (_gfb ,_dagc ,_cbcc ,_bfgg );_ddea ,_abgg ,_fef :=_ged .Date ();return MakeNumberResult (_dbd (_ddea ,int (_abgg ),_fef ));};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_fedf :=len (args );if _fedf < 5||_fedf > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bdbd :=args [0].ValueNumber ;if _bdbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_abdbd :=args [1].ValueNumber ;if _abdbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_egag :=args [2].ValueNumber ;if _egag ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _egag < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fagf :=args [3].ValueNumber ;if _fagf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bdac :=args [4].ValueNumber ;if _fagf > _bdac {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");
};if _bdac > _egag {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_bceg :=2.0;if _fedf > 5{if args [5].Type ==ResultTypeEmpty {_bceg =0.0;
}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bceg =args [5].ValueNumber ;if _bceg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};};_dfcd :=false ;if _fedf > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_dfcd =args [6].ValueNumber !=0;};_edae :=0.0;_dba :=_eff .Floor (_fagf );_ddfg :=_eff .Ceil (_bdac );if _dfcd {for _cgcd :=_dba +1;_cgcd <=_ddfg ;_cgcd ++{_gebg :=_babd (_bdbd ,_abdbd ,_egag ,_cgcd ,_bceg );if _cgcd ==_dba +1{_gebg *=_eff .Min (_bdac ,_dba +1)-_fagf ;
}else if _cgcd ==_ddfg {_gebg *=_bdac +1-_ddfg ;};_edae +=_gebg ;};}else {_fbbg :=_egag ;var _afced float64 ;if !_bfefg (_fagf ,_eff .Floor (_fagf )){if _bceg ==1{_fbe :=_egag /2;if _fagf > _fbe ||_bfefg (_fagf ,_fbe ){_afced =_fagf -_fbe ;_fagf =_fbe ;
_bdac -=_afced ;_fbbg ++;};};};if _bceg !=0{_bdbd -=_fgfgd (_bdbd ,_abdbd ,_egag ,_fbbg ,_fagf ,_bceg );};_edae =_fgfgd (_bdbd ,_abdbd ,_egag ,_egag -_fagf ,_bdac -_fagf ,_bceg );};return MakeNumberResult (_edae );};

// Eval evaluates and returns the result of an error expression.
func (_bbb Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_bbb ._cba )};func _befedf (_eacc ,_gfcg ,_eedg Reference )string {return _ef .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_eacc .Value ,_gfcg .Value ,_eedg .Value );
};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fbdg :=args [0].AsNumber ();if _fbdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_fgga :=float64 (1);if _fbdg .ValueNumber < 0{_fgga =-1;};if len (args )> 1{_edfe :=args [1].AsNumber ();if _edfe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fgga =_edfe .ValueNumber ;};if _fgga < 0&&_fbdg .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};if len (args )==1{return MakeNumberResult (_eff .Ceil (_fbdg .ValueNumber ));};_ffffc :=_fbdg .ValueNumber ;_ffffc ,_deed :=_eff .Modf (_ffffc /_fgga );if _deed > 0{_ffffc ++;};return MakeNumberResult (_ffffc *_fgga );};func _ebcab (_eafe Context ,_ggece Evaluator ,_fcefd ,_eace string )Result {_ddeb ,_gcag :=_ab .ParseCellReference (_fcefd );
if _gcag !=nil {return MakeErrorResult (_ef .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_fcefd ,_gcag .Error ()));
};_ffffcg ,_gbeg :=_ddeb .ColumnIdx ,_ddeb .RowIdx ;_bfeg ,_dbddg :=_ab .ParseCellReference (_eace );if _dbddg !=nil {return MakeErrorResult (_ef .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_eace ,_dbddg .Error ()));
};_cgffcd ,_edcbf :=_bfeg .ColumnIdx ,_bfeg .RowIdx ;_cbfga :=[][]Result {};for _cfaed :=_gbeg ;_cfaed <=_edcbf ;_cfaed ++{_bdbdb :=[]Result {};for _dede :=_ffffcg ;_dede <=_cgffcd ;_dede ++{_caafd :=_eafe .Cell (_ef .Sprintf ("\u0025\u0073\u0025\u0064",_ab .IndexToColumn (_dede ),_cfaed ),_ggece );
_bdbdb =append (_bdbdb ,_caafd );};_cbfga =append (_cbfga ,_bdbdb );};if len (_cbfga )==1{if len (_cbfga [0])==1{return _cbfga [0][0];};return MakeListResult (_cbfga [0]);};return MakeArrayResult (_cbfga );};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gegg :=args [0].ValueNumber ;_ecgc :=args [1].ValueNumber ;_eee :=args [2].ValueNumber ;_cgf :=_daec (_gegg ,_ecgc ,_eee );if _cgf >=0{return MakeNumberResult (_cgf );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};var _dced =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_acbfa :=args [0].AsString ();if _acbfa .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gcbc :=_eg .Buffer {};for _ ,_ffcc :=range _acbfa .ValueString {if _dd .IsPrint (_ffcc ){_gcbc .WriteRune (_ffcc );};};return MakeStringResult (_gcbc .String ());};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_dagdb Expression ;_ccga ,_cabf string ;};func _eefe (_fdce int )bool {if _fdce ==_fdce /400*400{return true ;};if _fdce ==_fdce /100*100{return false ;};return _fdce ==_fdce /4*4;};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eegg :=_gedga (args );_dc .Float64s (_eegg );var _aaab float64 ;if len (_eegg )%2==0{_aaab =(_eegg [len (_eegg )/2-1]+_eegg [len (_eegg )/2])/2;}else {_aaab =_eegg [len (_eegg )/2];};return MakeNumberResult (_aaab );};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_cbgg .Lock ();defer _cbgg .Unlock ();if _ ,_cebgd :=_gbabe [name ];_cebgd {_bf .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_gbabe [name ]=fn ;};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_aaeg Result )AsNumber ()Result {if _aaeg .Type ==ResultTypeString {_adfd ,_abfb :=_ead .ParseFloat (_aaeg .ValueString ,64);if _abfb ==nil {return MakeNumberResult (_adfd );};};if _aaeg .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _aaeg ;
};func init (){_caf ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );
RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );
RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );
RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};var _bgabc []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};


// Pv implements the Excel PV function.
func Pv (args []Result )Result {_eeae :=len (args );if _eeae < 3||_eeae > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_acaf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_abbc :=args [1].ValueNumber ;if _abbc !=float64 (int (_abbc )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adcgea :=args [2].ValueNumber ;_dfgg :=0.0;if _eeae >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfgg =args [3].ValueNumber ;};_acbc :=0.0;if _eeae ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_acbc =args [4].ValueNumber ;if _acbc !=0{_acbc =1;};};if _acaf ==0{return MakeNumberResult (-_adcgea *_abbc -_dfgg );}else {return MakeNumberResult ((((1-_eff .Pow (1+_acaf ,_abbc ))/_acaf )*_adcgea *(1+_acaf *_acbc )-_dfgg )/_eff .Pow (1+_acaf ,_abbc ));
};};type rmode byte ;

// String returns a string representation of ConstArrayExpr.
func (_ag ConstArrayExpr )String ()string {return ""};func _babd (_ebg ,_dbaa ,_ecee ,_fagd ,_efbb float64 )float64 {var _egca float64 ;_ccabc :=_efbb /_ecee ;if _ccabc >=1{_ccabc =1;if _fagd ==1{_egca =_ebg ;}else {_egca =0;};}else {_egca =_ebg *_eff .Pow (1-_ccabc ,_fagd -1);
};_cegad :=_ebg *_eff .Pow (1-_ccabc ,_fagd );var _gfaeb float64 ;if _cegad < _dbaa {_gfaeb =_egca -_dbaa ;}else {_gfaeb =_egca -_cegad ;};if _gfaeb < 0{_gfaeb =0;};return _gfaeb ;};func _ffef (_ddfe []Result )[]rangeIndex {_gaage :=[]rangeIndex {};_fefd :=len (_ddfe );
for _abga :=0;_abga < _fefd -1;_abga +=2{_dfge :=[]rangeIndex {};_cbbae :=_bfacf (_ddfe [_abga ]);_bbbc :=_bcac (_ddfe [_abga +1]);if _abga ==0{for _aabdb ,_bfea :=range _cbbae {for _dbee ,_gcac :=range _bfea {if _abebd (_gcac ,_bbbc ){_dfge =append (_dfge ,rangeIndex {_aabdb ,_dbee });
};};};}else {for _ ,_debae :=range _gaage {_egcad :=_cbbae [_debae ._bageg ][_debae ._gdfc ];if _abebd (_egcad ,_bbbc ){_dfge =append (_dfge ,_debae );};};};if len (_dfge )==0{return []rangeIndex {};};_gaage =_dfge [:];};return _gaage ;};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_dbf :=len (args );if _dbf !=4&&_dbf !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_ggfc ,_bbaa ,_cceg :=_cafe (args [0],args [1],"\u0044\u0049\u0053\u0043");if _cceg .Type ==ResultTypeError {return _cceg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ceag :=args [2].ValueNumber ;if _ceag <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afgg :=args [3].ValueNumber ;if _afgg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdeg :=0;if _dbf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdeg =int (args [4].ValueNumber );if !_eegdf (_fdeg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");
};};_bggf ,_cceg :=_ggff (_ggfc ,_bbaa ,_fdeg );if _cceg .Type ==ResultTypeError {return _cceg ;};return MakeNumberResult ((_afgg -_ceag )/_afgg /_bggf );};var _ebdec string =string ([]byte {92});func _bcac (_bcgc Result )*criteriaParsed {_feeb :=_bcgc .Type ==ResultTypeNumber ;
_bbbgd :=_bcgc .ValueNumber ;_gddad :=_ea .ToLower (_bcgc .ValueString );_eeaeb :=_cffd (_gddad );return &criteriaParsed {_feeb ,_bbbgd ,_gddad ,_eeaeb };};func _gbdg (_agaf []Result ,_fed string )(*cumulArgs ,Result ){if len (_agaf )!=6{return nil ,MakeErrorResult (_fed +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _agaf [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fed +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ceded :=_agaf [0].ValueNumber ;
if _ceded <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fed +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _agaf [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fed +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_gbfg :=_agaf [1].ValueNumber ;if _gbfg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if _agaf [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fed +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bcf :=_agaf [2].ValueNumber ;if _bcf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _agaf [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fed +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_ebb :=_agaf [3].ValueNumber ;if _ebb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _agaf [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fed +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aee :=_agaf [4].ValueNumber ;if _aee <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fed +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if _aee < _ebb {return nil ,MakeErrorResultType (ErrorTypeNum ,_fed +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");
};if _aee > _gbfg {return nil ,MakeErrorResultType (ErrorTypeNum ,_fed +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");
};_bagc :=int (_agaf [5].ValueNumber );if _bagc !=0&&_bagc !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_fed +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");
};return &cumulArgs {_ceded ,_gbfg ,_bcf ,_ebb ,_aee ,_bagc },_bgg ;};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_cegae Context ,_bcbf Evaluator ,_ccbd []Result )Result ;func _bcce (_bbae ,_debc float64 ,_dcfd ,_ecgfg int )float64 {_aac :=_fa (_bbae );_fcgg :=_fa (_debc );_fgc :=_dfe (_aac ,_fcgg ,_dcfd );return _aaa (_aac ,_fgc ,_ecgfg );
};const _begedf int =30;

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_acfbc ,_dbde :=_eege (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _dbde .Type ==ResultTypeError {return _dbde ;};return MakeNumberResult (_bcce (_acfbc ._ccff ,_acfbc ._eeed ,_acfbc ._bcbd ,_acfbc ._cegd ));
};type parsedSearchObject struct{_bgga string ;_bbaegg string ;_dgga int ;};func _abebd (_cbcd Result ,_aaebe *criteriaParsed )bool {if _cbcd .IsBoolean {return false ;};_acgeb :=_cbcd .Type ;if _aaebe ._cfdeb {return _acgeb ==ResultTypeNumber &&_cbcd .ValueNumber ==_aaebe ._ceea ;
}else if _acgeb ==ResultTypeNumber {return _effcc (_cbcd .ValueNumber ,_aaebe ._ggfd );};return _aegba (_cbcd ,_aaebe );};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _dcbcfc (args ,true )};const _dcaaa =57344;

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ffcd :=args [0].AsNumber ();if _ffcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bcag :=float64 (1);_aeeda :=args [1].AsNumber ();if _aeeda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_bcag =_aeeda .ValueNumber ;if _bcag < 0&&_ffcd .ValueNumber > 0||_bcag > 0&&_ffcd .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");
};_accbd :=_ffcd .ValueNumber ;_accbd ,_dfede :=_eff .Modf (_accbd /_bcag );if _eff .Trunc (_dfede +0.5)> 0{_accbd ++;};return MakeNumberResult (_accbd *_bcag );};const _bbeff =57350;func (_fefg HorizontalRange )horizontalRangeReference ()string {return _ef .Sprintf ("\u0025\u0064\u003a%\u0064",_fefg ._dcfff ,_fefg ._cafade );
};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_dcgcg :=args [0];if _dcgcg .Type ==ResultTypeError ||_dcgcg .Type ==ResultTypeString {return _dcgcg ;};return _bgg ;};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dfedf :=[]float64 {};
for _ ,_egcfc :=range args {switch _egcfc .Type {case ResultTypeString :_dbdb :=_egcfc .AsNumber ();if _dbdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_dfedf =append (_dfedf ,_dbdb .ValueNumber );case ResultTypeList ,ResultTypeArray :_aged :=GCD (_egcfc .ListValues ());if _aged .Type !=ResultTypeNumber {return _aged ;};_dfedf =append (_dfedf ,_aged .ValueNumber );case ResultTypeNumber :_dfedf =append (_dfedf ,_egcfc .ValueNumber );
case ResultTypeError :return _egcfc ;default:return MakeErrorResult (_ef .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_egcfc .Type ));
};};if _dfedf [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_dfedf )==1{return MakeNumberResult (_dfedf [0]);
};_gcae :=_dfedf [0];for _gdcc :=1;_gdcc < len (_dfedf );_gdcc ++{if _dfedf [_gdcc ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_gcae =_ebab (_gcae ,_dfedf [_gdcc ]);};return MakeNumberResult (_gcae );};

// Db implements the Excel DB function.
func Db (args []Result )Result {_efgb :=len (args );if _efgb !=4&&_efgb !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fgee :=args [0].ValueNumber ;if _fgee < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebff :=args [1].ValueNumber ;if _ebff < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_efebb :=args [2].ValueNumber ;if _efebb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ddd :=args [3].ValueNumber ;if _ddd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};if _ddd -_efebb > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_cedae :=12.0;if _efgb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cedae =args [4].ValueNumber ;if _cedae < 1||_cedae > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");
};};if _cedae ==12&&_ddd > _efebb {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _ebff >=_fgee {return MakeNumberResult (0);
};_dcge :=1-_eff .Pow (_ebff /_fgee ,1/_efebb );_dcge =float64 (int (_dcge *1000+0.5))/1000;_edbg :=_fgee *_dcge *_cedae /12;if _ddd ==1{return MakeNumberResult (_edbg );};_dgfg :=_edbg ;_bbac :=0.0;_cgeg :=_efebb ;if _cgeg > _ddd {_cgeg =_ddd ;};for _ccdg :=2.0;
_ccdg <=_cgeg ;_ccdg ++{_bbac =(_fgee -_dgfg )*_dcge ;_dgfg +=_bbac ;};if _ddd > _efebb {return MakeNumberResult ((_fgee -_dgfg )*_dcge *(12-_cedae )/12);};return MakeNumberResult (_bbac );};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_eggb :=args [0].AsNumber ();
_addb :=args [1].AsNumber ();if _eggb .Type !=ResultTypeNumber ||_addb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};if _addb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_fbgbc ,_bgag :=_eff .Modf (_eggb .ValueNumber /_addb .ValueNumber );if _bgag < 0{_fbgbc --;
};return MakeNumberResult (_eggb .ValueNumber -_addb .ValueNumber *_fbgbc );};

// HasFormula returns FALSE for the invalid reference context.
func (_dgbe *ivr )HasFormula (cellRef string )bool {return false };

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_faf :=args [0];
if _faf .Type !=ResultTypeArray &&_faf .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_gbfa :=_faf .ValueArray ;if len (_gbfa )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");
};return MakeNumberResult (float64 (len (_gbfa [0])));};func _eegdf (_afee int )bool {return _afee >=0&&_afee <=4};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ccda :=args [0].AsNumber ();if _ccda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_abdf :=args [1].AsNumber ();if _abdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};return MakeNumberResult (_eff .Pow (_ccda .ValueNumber ,_abdf .ValueNumber ));};var (_bdaf =0;_dcfe =false ;);

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_fgfaf :=args [0].AsNumber ();if _fgfaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bagac :=_eff .Signbit (_fgfaf .ValueNumber );_cebac ,_bdgee :=_eff .Modf ((_fgfaf .ValueNumber -1)/2);_gbda :=_cebac *2+1;if _bdgee !=0{if !_bagac {_gbda +=2;}else {_gbda -=2;};};return MakeNumberResult (_gbda );};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_egba :=len (args );if _egba !=4&&_egba !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fgff ,_eabg ,_gdfe :=_cafe (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _gdfe .Type ==ResultTypeError {return _gdfe ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acabe :=args [2].ValueNumber ;if _acabe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_cab :=args [3].ValueNumber ;if _cab <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_ffdd :=0;if _egba ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ffdd =int (args [4].ValueNumber );if !_eegdf (_ffdd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");
};};_gce ,_gdfe :=_ggff (_fgff ,_eabg ,_ffdd );if _gdfe .Type ==ResultTypeError {return _gdfe ;};return MakeNumberResult ((_cab /_acabe -1)/_gce );};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");
};

// Reference returns a string reference value to a range with prefix.
func (_ccggc PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_eacf :=_ccggc ._bfaa .Reference (ctx ,ev );_caaf :=_ccggc ._fdged .Reference (ctx ,ev );_efefd :=_ccggc ._cacff .Reference (ctx ,ev );if _eacf .Type ==ReferenceTypeSheet &&_caaf .Type ==ReferenceTypeCell &&_efefd .Type ==ReferenceTypeCell {return MakeRangeReference (_befedf (_eacf ,_caaf ,_efefd ));
};return ReferenceInvalid ;};func (_eeeb *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_caaa PrefixHorizontalRange )Update (q *_cg .UpdateQuery )Expression {return _caaa };

// GetFilename returns an empty string for the invalid reference context.
func (_fgfafd *ivr )GetFilename ()string {return ""};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_facc ,_cfbf :=_daefc ("\u0046\u0049\u004e\u0044",args );if _cfbf .Type !=ResultTypeEmpty {return _cfbf ;};_adgfa :=_ea .ToLower (_facc ._bgga );
_fcca :=_ea .ToLower (_facc ._bbaegg );if _adgfa ==""{return MakeNumberResult (1.0);};_dagaf :=_facc ._dgga -1;_edfee :=1;_gggga :=0;for _dfba :=range _fcca {if _dfba !=0{_cagaec :=1;if _dfba -_gggga > 1{_cagaec =2;};_edfee +=_cagaec ;};if _edfee > _dagaf {_ddcg :=_fg .Index (_adgfa ,_fcca [_dfba :]);
if _ddcg ==0{return MakeNumberResult (float64 (_edfee ));};};_gggga =_dfba ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// ReferenceType is a type of reference
//
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// Update returns the same object as updating sheet references does not affect Bool.
func (_ace Bool )Update (q *_cg .UpdateQuery )Expression {return _ace };var _ecade =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_abeg :=_ddba (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _abeg .Type !=ResultTypeEmpty {return _abeg ;};_bfda :=_ffef (args [1:]);_cdebg :=0.0;_bffdc :=_bfacf (args [0]);for _ ,_dgbg :=range _bfda {_cdebg +=_bffdc [_dgbg ._bageg ][_dgbg ._gdfc ].ValueNumber ;
};return MakeNumberResult (float64 (_cdebg ));};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_fdcf :e }};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];
case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));
default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_gabf :=args [0].AsNumber ();if _gabf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};var _dafgc float64 ;_edcca :=args [1].AsNumber ();if _edcca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dafgc =_edcca .ValueNumber ;if _dafgc < 0&&_gabf .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");
};_dcbcf :=_gabf .ValueNumber ;_dcbcf ,_cfae :=_eff .Modf (_dcbcf /_dafgc );if _cfae !=0{if _gabf .ValueNumber < 0&&_cfae < 0{_dcbcf --;};};return MakeNumberResult (_dcbcf *_dafgc );};type evCache struct{_dde map[string ]Result ;_gbf *_ee .Mutex ;};const _dce ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";


// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_bgab :=args [0];
if _bgab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cbgab :=int (_bgab .ValueNumber );if _cbgab < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");
};if len (args )<=_cbgab {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");
};return args [_cbgab ];};

// Reference returns an invalid reference for String.
func (_bgbd String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_edbag :=true ;for _ ,_fdab :=range args {_fdab =_fdab .AsNumber ();switch _fdab .Type {case ResultTypeList ,ResultTypeArray :_ffca :=And (_fdab .ListValues ());if _ffca .Type ==ResultTypeError {return _ffca ;};if _ffca .ValueNumber ==0{_edbag =false ;
};case ResultTypeNumber :if _fdab .ValueNumber ==0{_edbag =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
case ResultTypeError :return _fdab ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");
};};return MakeBoolResult (_edbag );};func (_acgbe node )String ()string {return _ef .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_acgbe ._badde ,_gfbbe (string (_acgbe ._geba )));};func _aaffg (_cfeg []Result )Result {_baedc :=_cfeg [0].ValueArray ;
if len (_cfeg )==1{_adf :=[][]Result {};for _ ,_acgf :=range _baedc {_adf =append (_adf ,_bcca ([]Result {MakeListResult (_acgf )}).ValueList );};return MakeArrayResult (_adf );}else if len (_cfeg )==2{_fgfff :=len (_baedc );_dggd :=len (_baedc [0]);_efgf :=_dddb (_cfeg [1],_fgfff ,_dggd );
_bfde :=len (_efgf );_ecaa :=[][]Result {};var _ddab []Result ;for _dggge ,_edcf :=range _baedc {if _dggge < _bfde {_ddab =_efgf [_dggge ];}else {_ddab =_dceb (MakeErrorResultType (ErrorTypeNA ,""),_dggd );};_ecaa =append (_ecaa ,_bcca ([]Result {MakeListResult (_edcf ),MakeListResult (_ddab )}).ValueList );
};return MakeArrayResult (_ecaa );}else if len (_cfeg )==3{_cegf :=len (_baedc );_ebgc :=len (_baedc [0]);_eadfc :=_dddb (_cfeg [1],_cegf ,_ebgc );_adebd :=_dddb (_cfeg [2],_cegf ,_ebgc );_gedb :=len (_eadfc );_ccdgf :=len (_adebd );_acabef :=[][]Result {};
var _gcdc ,_ccef []Result ;for _cgffc ,_ddeeb :=range _baedc {if _cgffc < _gedb {_gcdc =_eadfc [_cgffc ];}else {_gcdc =_dceb (MakeErrorResultType (ErrorTypeNA ,""),_ebgc );};if _cgffc < _ccdgf {_ccef =_adebd [_cgffc ];}else {_ccef =_dceb (MakeErrorResultType (ErrorTypeNA ,""),_ebgc );
};_acabef =append (_acabef ,_bcca ([]Result {MakeListResult (_ddeeb ),MakeListResult (_gcdc ),MakeListResult (_ccef )}).ValueList );};return MakeArrayResult (_acabef );};return MakeErrorResultType (ErrorTypeValue ,"");};func _gbce (_adec [][]Result ,_gbgb int )[][]Result {_beged :=[][]Result {};
for _afaa :=range _adec {if _afaa ==0{continue ;};_egddg :=[]Result {};for _dgceb :=range _adec {if _dgceb ==_gbgb {continue ;};_egddg =append (_egddg ,_adec [_afaa ][_dgceb ]);};_beged =append (_beged ,_egddg );};return _beged ;};func _effcc (_edccg float64 ,_dece *criteriaRegex )bool {_bagea ,_cbcba :=_ead .ParseFloat (_dece ._efge ,64);
if _cbcba !=nil {return false ;};switch _dece ._eeef {case _dggb :return _edccg ==_bagea ;case _fcafb :return _edccg <=_bagea ;case _eagbb :return _edccg >=_bagea ;case _edfg :return _edccg < _bagea ;case _gegd :return _edccg > _bagea ;};return false ;
};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_fgec :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_fgec *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_beeb :=_bfacf (args [1]);for _ ,_cgfd :=range _beeb {for _ ,_bceb :=range _cgfd {if _bceb .Type !=ResultTypeNumber ||_bceb .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");
};_fgec *=1.0+_bceb .ValueNumber ;};};return MakeNumberResult (_fgec );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");
};};func _fedc (_ddcab Result )Result {if _ddcab .Type ==ResultTypeEmpty {return _ddcab ;};_cbef :=_ddcab .AsString ();if _cbef .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _ddcab .IsBoolean {if _cbef .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _cbef .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};}else {return MakeStringResult (_ea .ToLower (_cbef .ValueString ));};};type cmpResult int8 ;

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_eeb :v }};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_eff .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// Eval evaluates the binary expression using the context given.
func (_eec BinaryExpr )String ()string {_ced :="";switch _eec ._ge {case BinOpTypePlus :_ced ="\u002b";case BinOpTypeMinus :_ced ="\u002d";case BinOpTypeMult :_ced ="\u002a";case BinOpTypeDiv :_ced ="\u002f";case BinOpTypeExp :_ced ="\u005e";case BinOpTypeLT :_ced ="\u003c";
case BinOpTypeGT :_ced ="\u003e";case BinOpTypeEQ :_ced ="\u003d";case BinOpTypeLEQ :_ced ="\u003c\u003d";case BinOpTypeGEQ :_ced ="\u003e\u003d";case BinOpTypeNE :_ced ="\u003c\u003e";case BinOpTypeConcat :_ced ="\u0026";};return _eec ._db .String ()+_ced +_eec ._aae .String ();
};func (_ebac *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );
RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );
RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );
RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );
RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );
RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );
RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );
RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );
RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );
RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );
RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );
RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );
RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};func _bfacf (_bffgc Result )[][]Result {switch _bffgc .Type {case ResultTypeArray :return _bffgc .ValueArray ;
case ResultTypeList :return [][]Result {_bffgc .ValueList };default:return [][]Result {};};};func _cdgd (_afad ,_cfdd ,_fbac ,_bedf ,_cfbd ,_gabg float64 ,_caad int )(float64 ,Result ){_bgc :=int (_gabg );_dabg :=_fdf (_afad ,_cfdd ,_bgc ,_caad );_gggg :=_bcce (_afad ,_cfdd ,_bgc ,_caad )/_dabg ;
_acec ,_cfa :=_bdb (_afad ,_cfdd ,_bgc ,_caad );if _cfa .Type ==ResultTypeError {return 0,_cfa ;};_faca :=_eab (_afad ,_cfdd ,_bgc ,_caad );_fdcb :=_cfbd /_eff .Pow (1+_bedf /_gabg ,_acec -1+_gggg );_fdcb -=100*_fbac /_gabg *_faca /_dabg ;_ggbd :=100*_fbac /_gabg ;
_cecg :=1+_bedf /_gabg ;for _fgef :=0.0;_fgef < _acec ;_fgef ++{_fdcb +=_ggbd /_eff .Pow (_cecg ,_fgef +_gggg );};return _fdcb ,MakeEmptyResult ();};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eaab :=args [0];switch _eaab .Type {case ResultTypeError :return _eaab ;case ResultTypeNumber ,ResultTypeString :return _fedc (args [0]);case ResultTypeList :_bgbeb :=_eaab .ValueList ;_gffgc :=[]Result {};for _ ,_bafe :=range _bgbeb {_fdcee :=_fedc (_bafe );
if _fdcee .Type ==ResultTypeError {return _fdcee ;};_gffgc =append (_gffgc ,_fdcee );};return MakeListResult (_gffgc );case ResultTypeArray :_bfcd :=_eaab .ValueArray ;_gdabg :=[][]Result {};for _ ,_ebdce :=range _bfcd {_fcecb :=[]Result {};for _ ,_ageee :=range _ebdce {_fbgaf :=_fedc (_ageee );
if _fbgaf .Type ==ResultTypeError {return _fbgaf ;};_fcecb =append (_fcecb ,_fbgaf );};_gdabg =append (_gdabg ,_fcecb );};return MakeArrayResult (_gdabg );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_edfdf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adcbb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eafb :=args [2].ValueNumber ;if _eafb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adca :=args [3].ValueNumber ;if _adca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _adca > _eafb {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");
};_edgc :=(_edfdf -_adcbb )*(_eafb -_adca +1)*2;_dfdc :=_eafb *(_eafb +1);return MakeNumberResult (_edgc /_dfdc );};

// Bool is a boolean expression.
type Bool struct{_eadc bool };

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };
case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };
case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };
default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};const _eddd =57367;const _aagdb =57364;

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dfgd :=args [0].AsString ();if _dfgd .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (len (_dfgd .ValueString )));};const _fgfb =57353;

// Number is a nubmer expression.
type Number struct{_bgeda float64 };

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _a .Reader )Expression {_cbgaa :=&plex {_acbd :LexReader (r )};_cafga (_cbgaa );if _cbgaa ._fffb !=""{return nil ;};return _cbgaa ._gdfa ;};

// Update updates references in the Range after removing a row/column.
func (_ecdab Range )Update (q *_cg .UpdateQuery )Expression {_ggba :=_ecdab ;if q .UpdateCurrentSheet {_ggba ._bfbcd =_ecdab ._bfbcd .Update (q );_ggba ._agfcf =_ecdab ._agfcf .Update (q );};return _ggba ;};

// String returns a string representation of a horizontal range.
func (_dfegf HorizontalRange )String ()string {return _dfegf .horizontalRangeReference ()};func _dfcf (_dade ,_cgfg _cb .Time )bool {_bfd :=_dade .Unix ();_baeb :=_cgfg .Unix ();_acef :=_dade .Year ();_geaa :=_gage (_acef ,_cb .March ,1);if _eefe (_acef )&&_bfd < _geaa &&_baeb >=_geaa {return true ;
};var _addg =_cgfg .Year ();var _bfcb =_gage (_addg ,_cb .March ,1);return (_eefe (_addg )&&_baeb >=_bfcb &&_bfd < _bfcb );};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_gecd ,_ggaa :=_eege (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _ggaa .Type ==ResultTypeError {return _ggaa ;};_agc :=_fa (_gecd ._ccff );_egdd :=_fa (_gecd ._eeed );_bdgb :=_gecd ._bcbd ;_gccb :=_dfe (_agc ,_egdd ,_bdgb );
_dcgc ,_gfdd ,_edc :=_gccb .Date ();return MakeNumberResult (_dbd (_dcgc ,int (_gfdd ),_edc ));};var _gbabe =map[string ]FunctionComplex {};var _aggbe =[...]uint8 {0,17,33,49,63,78,93,108};const _efcfc =57354;const (ReferenceTypeInvalid ReferenceType =iota ;
ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);const _ga ="\u005e\u0028\u0028"+_acag +"\u007c"+_ddgd +"\u007c"+_dce +"\u007c"+_acdc +"\u0029\u0020\u0029\u003f";
const _cdfcf =57363;

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_ebcf ,_bbbd ,_gcdg :=_cafe (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _gcdg .Type ==ResultTypeError {return _gcdg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bdef :=_bbbd -_ebcf ;if _bdef > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_cdgef :=args [2].ValueNumber ;if _cdgef <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebdb :=(100-_cdgef )/_cdgef ;_cccgf :=360/_bdef ;return MakeNumberResult (_ebdb *_cccgf );};

// Reference returns an invalid reference for FunctionCall.
func (_dgabe FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _bcagb =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};
const _cfbde =2;var _caed =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};


// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_gbbc :=len (args );if _gbbc < 3||_gbbc > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gcgg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bege :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cadb :=args [2].ValueNumber ;_cdfg :=0.0;if _gbbc >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cdfg =args [3].ValueNumber ;};_dfeb :=0.0;if _gbbc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dfeb =args [4].ValueNumber ;if _dfeb !=0{_dfeb =1;};};_agdb :=_bege *(1+_gcgg *_dfeb )-_cdfg *_gcgg ;_ggcc :=(_cadb *_gcgg +_bege *(1+_gcgg *_dfeb ));return MakeNumberResult (_eff .Log (_agdb /_ggcc )/_eff .Log (1+_gcgg ));};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_aabda :=args [0];if _aabda .Type !=ResultTypeNumber &&_aabda .Type !=ResultTypeString &&_aabda .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");
};_abegb :=args [1].ValueString ;switch _aabda .Type {case ResultTypeNumber :return MakeStringResult (_g .Number (_aabda .ValueNumber ,_abegb ));case ResultTypeString :return MakeStringResult (_g .String (_aabda .ValueString ,_abegb ));case ResultTypeEmpty :return MakeStringResult (_g .Number (0,_abegb ));
case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");
};};

// Eval evaluates the binary expression using the context given.
func (_cgb BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_de :=_cgb ._db .Eval (ctx ,ev );if _de .Type ==ResultTypeError {return _de ;};_ddg :=_cgb ._aae .Eval (ctx ,ev );if _ddg .Type ==ResultTypeError {return _ddg ;};if _de .Type ==_ddg .Type {if _de .Type ==ResultTypeArray {if !_fc (_de .ValueArray ,_ddg .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _egb (_cgb ._ge ,_de .ValueArray ,_ddg .ValueArray );}else if _de .Type ==ResultTypeList {if len (_de .ValueList )!=len (_ddg .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _bc (_cgb ._ge ,_de .ValueList ,_ddg .ValueList );};}else if _de .Type ==ResultTypeArray &&(_ddg .Type ==ResultTypeNumber ||_ddg .Type ==ResultTypeString ){return _fe (_cgb ._ge ,_de .ValueArray ,_ddg );}else if _de .Type ==ResultTypeList &&(_ddg .Type ==ResultTypeNumber ||_ddg .Type ==ResultTypeString ){return _eac (_cgb ._ge ,_de .ValueList ,_ddg );
};switch _cgb ._ge {case BinOpTypePlus :if _de .Type ==_ddg .Type {if _de .Type ==ResultTypeNumber {return MakeNumberResult (_de .ValueNumber +_ddg .ValueNumber );};};case BinOpTypeMinus :if _de .Type ==_ddg .Type {if _de .Type ==ResultTypeNumber {return MakeNumberResult (_de .ValueNumber -_ddg .ValueNumber );
};};case BinOpTypeMult :if _de .Type ==_ddg .Type {if _de .Type ==ResultTypeNumber {return MakeNumberResult (_de .ValueNumber *_ddg .ValueNumber );};};case BinOpTypeDiv :if _de .Type ==_ddg .Type {if _de .Type ==ResultTypeNumber {if _ddg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");
};return MakeNumberResult (_de .ValueNumber /_ddg .ValueNumber );};};case BinOpTypeExp :if _de .Type ==_ddg .Type {if _de .Type ==ResultTypeNumber {return MakeNumberResult (_eff .Pow (_de .ValueNumber ,_ddg .ValueNumber ));};};case BinOpTypeLT :if _de .Type ==_ddg .Type {if _de .Type ==ResultTypeNumber {return MakeBoolResult (_de .ValueNumber < _ddg .ValueNumber );
};if _de .Type ==ResultTypeString {return MakeBoolResult (_de .ValueString < _ddg .ValueString );};if _de .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _de .Type ==ResultTypeString &&_ddg .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _de .Type ==ResultTypeNumber &&_ddg .Type ==ResultTypeString {return MakeBoolResult (true );}else if _de .Type ==ResultTypeEmpty &&(_ddg .Type ==ResultTypeNumber ||_ddg .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_de .Type ==ResultTypeNumber ||_de .Type ==ResultTypeString )&&_ddg .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};case BinOpTypeGT :if _de .Type ==_ddg .Type {if _de .Type ==ResultTypeNumber {return MakeBoolResult (_de .ValueNumber > _ddg .ValueNumber );};if _de .Type ==ResultTypeString {return MakeBoolResult (_de .ValueString > _ddg .ValueString );};if _de .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if _de .Type ==ResultTypeString &&_ddg .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _de .Type ==ResultTypeNumber &&_ddg .Type ==ResultTypeString {return MakeBoolResult (false );}else if _de .Type ==ResultTypeEmpty &&(_ddg .Type ==ResultTypeNumber ||_ddg .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if (_de .Type ==ResultTypeNumber ||_de .Type ==ResultTypeString )&&_ddg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _de .Type ==_ddg .Type {if _de .Type ==ResultTypeNumber {return MakeBoolResult (_de .ValueNumber ==_ddg .ValueNumber );
};if _de .Type ==ResultTypeString {return MakeBoolResult (_de .ValueString ==_ddg .ValueString );};if _de .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_de .Type ==ResultTypeString &&_ddg .Type ==ResultTypeNumber )||(_de .Type ==ResultTypeNumber &&_ddg .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if _de .Type ==ResultTypeEmpty &&(_ddg .Type ==ResultTypeNumber ||_ddg .Type ==ResultTypeString ){return MakeBoolResult (_gd (_ddg ));}else if (_de .Type ==ResultTypeNumber ||_de .Type ==ResultTypeString )&&_ddg .Type ==ResultTypeEmpty {return MakeBoolResult (_gd (_de ));
};case BinOpTypeNE :if _de .Type ==_ddg .Type {if _de .Type ==ResultTypeNumber {return MakeBoolResult (_de .ValueNumber !=_ddg .ValueNumber );};if _de .Type ==ResultTypeString {return MakeBoolResult (_de .ValueString !=_ddg .ValueString );};if _de .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if (_de .Type ==ResultTypeString &&_ddg .Type ==ResultTypeNumber )||(_de .Type ==ResultTypeNumber &&_ddg .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _de .Type ==ResultTypeEmpty &&(_ddg .Type ==ResultTypeNumber ||_ddg .Type ==ResultTypeString ){return MakeBoolResult (!_gd (_ddg ));
}else if (_de .Type ==ResultTypeNumber ||_de .Type ==ResultTypeString )&&_ddg .Type ==ResultTypeEmpty {return MakeBoolResult (!_gd (_de ));};case BinOpTypeLEQ :if _de .Type ==_ddg .Type {if _de .Type ==ResultTypeNumber {return MakeBoolResult (_de .ValueNumber <=_ddg .ValueNumber );
};if _de .Type ==ResultTypeString {return MakeBoolResult (_de .ValueString <=_ddg .ValueString );};if _de .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _de .Type ==ResultTypeString &&_ddg .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _de .Type ==ResultTypeNumber &&_ddg .Type ==ResultTypeString {return MakeBoolResult (true );}else if _de .Type ==ResultTypeEmpty &&(_ddg .Type ==ResultTypeNumber ||_ddg .Type ==ResultTypeString ){return MakeBoolResult (_gd (_ddg ));}else if (_de .Type ==ResultTypeNumber ||_de .Type ==ResultTypeString )&&_ddg .Type ==ResultTypeEmpty {return MakeBoolResult (_gd (_de ));
};case BinOpTypeGEQ :if _de .Type ==_ddg .Type {if _de .Type ==ResultTypeNumber {return MakeBoolResult (_de .ValueNumber >=_ddg .ValueNumber );};if _de .Type ==ResultTypeString {return MakeBoolResult (_de .ValueString >=_ddg .ValueString );};if _de .Type ==ResultTypeEmpty {return MakeBoolResult (true );
};}else if _de .Type ==ResultTypeString &&_ddg .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _de .Type ==ResultTypeNumber &&_ddg .Type ==ResultTypeString {return MakeBoolResult (false );}else if _de .Type ==ResultTypeEmpty &&(_ddg .Type ==ResultTypeNumber ||_ddg .Type ==ResultTypeString ){return MakeBoolResult (_gd (_ddg ));
}else if (_de .Type ==ResultTypeNumber ||_de .Type ==ResultTypeString )&&_ddg .Type ==ResultTypeEmpty {return MakeBoolResult (_gd (_de ));};case BinOpTypeConcat :return MakeStringResult (_de .Value ()+_ddg .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");
};var _ggddf =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };
func _caf (){_gbg ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_f .MustCompile ("\u005e"+_acag +_dbb );_gbg ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_f .MustCompile ("\u005e"+_ddgd +_dbb );_gbg ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_f .MustCompile ("\u005e"+_dce +_dbb );
_gbg ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_f .MustCompile ("\u005e"+_acdc +_dbb );_effb ["\u0068\u0068"]=_f .MustCompile (_ga +_cged +"\u0024");_effb ["\u0068\u0068\u003am\u006d"]=_f .MustCompile (_ga +_gga +"\u0024");_effb ["\u006d\u006d\u003as\u0073"]=_f .MustCompile (_ga +_ggf +"\u0024");
_effb ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_f .MustCompile (_ga +_bbc +"\u0024");_bcb =[]*_f .Regexp {_f .MustCompile ("\u005e"+_acag +"\u0024"),_f .MustCompile ("\u005e"+_ddgd +"\u0024"),_f .MustCompile ("\u005e"+_dce +"\u0024"),_f .MustCompile ("\u005e"+_acdc +"\u0024")};
_efcd =[]*_f .Regexp {_f .MustCompile ("\u005e"+_cged +"\u0024"),_f .MustCompile ("\u005e"+_gga +"\u0024"),_f .MustCompile ("\u005e"+_ggf +"\u0024"),_f .MustCompile ("\u005e"+_bbc +"\u0024")};};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};_cage :=args [0];if _cage .Type !=ResultTypeArray &&_cage .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_aafb :=_bcac (args [1]);_ggaab :=0;for _ ,_ddgdf :=range _bfacf (_cage ){for _ ,_dbaba :=range _ddgdf {if _abebd (_dbaba ,_aafb ){_ggaab ++;};};};return MakeNumberResult (float64 (_ggaab ));};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_dcfff ,_cafade int };

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_eeaf ,_ceff :=_baed (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _ceff .Type ==ResultTypeError {return _ceff ;};_dgde :=_eeaf ._gggf ;_fdg :=_eeaf ._gcdb ;_beee :=_eeaf ._eaggc ;_gbcfc :=_eeaf ._gcbf ;
_bcdd :=_eeaf ._cbfgg ;_ddefe :=_eeaf ._dagd ;_cfbg :=_afdb (_dgde ,_fdg ,_beee ,_gbcfc ,_bcdd ,_ddefe );if _cfbg .Type ==ResultTypeError {return _cfbg ;};_gaga :=_cfbg .ValueNumber /(1.0+_gbcfc /_bcdd );return MakeNumberResult (_gaga );};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_febec :=args [0].AsNumber ();if _febec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_dafa :=float64 (1);if _febec .ValueNumber < 0{_dafa =-1;};if len (args )> 1{_gedd :=args [1].AsNumber ();if _gedd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dafa =_gedd .ValueNumber ;};_caga :=float64 (1);if len (args )> 2{_abee :=args [2].AsNumber ();if _abee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_caga =_abee .ValueNumber ;};if len (args )==1{return MakeNumberResult (_eff .Ceil (_febec .ValueNumber ));};_dgdb :=_febec .ValueNumber ;_dgdb ,_fcae :=_eff .Modf (_dgdb /_dafa );if _fcae !=0{if _febec .ValueNumber > 0{_dgdb ++;}else if _caga < 0{_dgdb --;
};};return MakeNumberResult (_dgdb *_dafa );};

// Match implements the MATCH function.
func Match (args []Result )Result {_bgda :=len (args );if _bgda !=2&&_bgda !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dbga :=1;if _bgda ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_eaea :=args [2].ValueNumber ;if _eaea ==-1||_eaea ==0{_dbga =int (_eaea );};};_fgea :=args [1];var _efgc []Result ;switch _fgea .Type {case ResultTypeList :_efgc =_fgea .ValueList ;case ResultTypeArray :_fgcg :=_fgea .ValueArray ;for _ ,_bdce :=range _fgcg {if len (_bdce )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_efgc =append (_efgc ,_bdce [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_fddg :=_bcac (args [0]);switch _dbga {case 0:for _gdded ,_bbec :=range _efgc {if _ddac (_bbec ,_fddg ){return MakeNumberResult (float64 (_gdded +1));};};case -1:for _efef :=0;_efef < len (_efgc );_efef ++{if _ddac (_efgc [_efef ],_fddg ){return MakeNumberResult (float64 (_efef +1));
};if _fddg ._cfdeb &&(_efgc [_efef ].ValueNumber < _fddg ._ceea ){if _efef ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_efef ));};};case 1:for _bcdb :=0;_bcdb < len (_efgc );_bcdb ++{if _ddac (_efgc [_bcdb ],_fddg ){return MakeNumberResult (float64 (_bcdb +1));
};if _fddg ._cfdeb &&(_efgc [_bcdb ].ValueNumber > _fddg ._ceea ){if _bcdb ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_bcdb ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};var _aefga =map[string ]Function {};


// GetEpoch returns a null time object for the invalid reference context.
func (_agfc *ivr )GetEpoch ()_cb .Time {return _cb .Time {}};func (_eba *evCache )SetCache (key string ,value Result ){_eba ._gbf .Lock ();_eba ._dde [key ]=value ;_eba ._gbf .Unlock ();};const _cbcbe =57358;

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_fcdca :=_ea .Split (v ,"\u003a");if len (_fcdca )!=2{return nil ;};_efbe ,_ :=_ead .Atoi (_fcdca [0]);_efbeg ,_ :=_ead .Atoi (_fcdca [1]);if _efbe > _efbeg {_efbe ,_efbeg =_efbeg ,_efbe ;};return HorizontalRange {_dcfff :_efbe ,_cafade :_efbeg };
};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aefbb :=args [0].ValueNumber ;if _aefbb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbab :=args [1].ValueNumber ;if _cbab <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdeg :=args [2].ValueNumber ;if _gdeg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");
};return MakeNumberResult ((_eff .Log10 (_gdeg )-_eff .Log10 (_cbab ))/_eff .Log10 (1+_aefbb ));};func (_bggd PrefixHorizontalRange )horizontalRangeReference (_adbba string )string {return _ef .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_adbba ,_bggd ._ggede ,_bggd ._dcaf );
};var _dfbbc =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_cbfdc NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_eebcf :=ctx .NamedRange (_cbfdc ._gdaf );_baccc :=_eebcf .Value ;if _decaf ,_dggad :=ev .GetFromCache (_baccc );_dggad {return _decaf ;};_afde :=_ea .Split (_baccc ,"\u0021");if len (_afde )!=2{return MakeErrorResult (_ef .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_baccc ));
};_afgda :=ctx .Sheet (_afde [0]);_aebeg :=_ea .Split (_afde [1],"\u003a");switch len (_aebeg ){case 1:_dgbd :=ev .Eval (_afgda ,_aebeg [0]);ev .SetCache (_baccc ,_dgbd );return _dgbd ;case 2:_abbe :=_ebcab (_afgda ,ev ,_aebeg [0],_aebeg [1]);ev .SetCache (_baccc ,_abbe );
return _abbe ;};return MakeErrorResult (_ef .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_eebcf .Type ));};var _adga =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
const _bccfa =57361;const _faggb =57352;

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_acae :=args [1].ValueNumber ;
_caa :=args [0];var _eeaa float64 ;switch _caa .Type {case ResultTypeEmpty :_eeaa =0;case ResultTypeNumber :_eeaa =_caa .ValueNumber ;case ResultTypeString :_bde :=DateValue ([]Result {args [0]});if _bde .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};_eeaa =_bde .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cbd :=_fa (_eeaa );
_ded :=_cbd .AddDate (0,int (_acae +1),0);_ede ,_fccdg ,_ :=_ded .Date ();_agd :=_dbd (_ede ,int (_fccdg ),0);if _agd < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};if _ede ==1900&&_fccdg ==3{_agd --;};return MakeNumberResult (_agd );};

// String returns a string representation of a vertical range.
func (_cceb VerticalRange )String ()string {return _cceb .verticalRangeReference ()};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_dcab :=len (args );if _dcab !=4&&_dcab !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ebceg :=args [0].ValueNumber ;if _ebceg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbbg :=args [1].ValueNumber ;if _cbbg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dbcd :=args [2].ValueNumber ;if _dbcd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccafa :=args [3].ValueNumber ;if _ccafa < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");
};if _ccafa > _dbcd {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_gfef :=2.0;if _dcab ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfef =args [4].ValueNumber ;if _gfef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};return MakeNumberResult (_babd (_ebceg ,_cbbg ,_dbcd ,_ccafa ,_gfef ));};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_agded :=[]string {};for _bccb :=range _aefga {_agded =append (_agded ,_bccb );};for _aedf :=range _gbabe {_agded =append (_agded ,_aedf );};_dc .Strings (_agded );return _agded ;};func _beb (_dcbc string )(int ,int ,float64 ,bool ,bool ,Result ){_gdgf :="";
_eecg :=[]string {};for _bfbe ,_efe :=range _effb {_eecg =_efe .FindStringSubmatch (_dcbc );if len (_eecg )> 1{_gdgf =_bfbe ;break ;};};if _gdgf ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};_gcbb :=_eecg [1]=="";_eecg =_eecg [49:];
_bged :=len (_eecg );_fcaa :=_eecg [_bged -1];_fae :=_fcaa =="\u0061\u006d";_ccd :=_fcaa =="\u0070\u006d";var _efag ,_ebd int ;var _dcg float64 ;var _dad error ;switch _gdgf {case "\u0068\u0068":_efag ,_dad =_ead .Atoi (_eecg [0]);if _dad !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );
};_ebd =0;_dcg =0;case "\u0068\u0068\u003am\u006d":_efag ,_dad =_ead .Atoi (_eecg [0]);if _dad !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};_ebd ,_dad =_ead .Atoi (_eecg [2]);if _dad !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );
};_dcg =0;case "\u006d\u006d\u003as\u0073":_efag =0;_ebd ,_dad =_ead .Atoi (_eecg [0]);if _dad !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};_dcg ,_dad =_ead .ParseFloat (_eecg [2],64);if _dad !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );
};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_efag ,_dad =_ead .Atoi (_eecg [0]);if _dad !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};_ebd ,_dad =_ead .Atoi (_eecg [2]);if _dad !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );
};_dcg ,_dad =_ead .ParseFloat (_eecg [4],64);if _dad !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};};if _ebd >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};if _fae ||_ccd {if _efag > 12||_dcg >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );
}else if _efag ==12{_efag =0;};}else if _efag >=24||_dcg >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};return _efag ,_ebd ,_dcg ,_ccd ,_gcbb ,_bgg ;};func _fgfgd (_bgbg ,_dbbe ,_cbgf ,_cafa ,_cfcc ,_dcbdb float64 )float64 {var _ggbg ,_acfbe float64 ;
_cagb :=0.0;_dfdb :=_eff .Ceil (_cfcc );_bfge :=_bgbg -_dbbe ;_abdg :=false ;_agdd :=0.0;for _bgeg :=1.0;_bgeg <=_dfdb ;_bgeg ++{if !_abdg {_ggbg =_babd (_bgbg ,_dbbe ,_cbgf ,_bgeg ,_dcbdb );_agdd =_bfge /(_cbgf -_bgeg +1);if _agdd > _ggbg {_acfbe =_agdd ;
_abdg =true ;}else {_acfbe =_ggbg ;_bfge -=_ggbg ;};}else {_acfbe =_agdd ;};if _bgeg ==_dfdb {_acfbe *=_cfcc +1-_dfdb ;};_cagb +=_acfbe ;};return _cagb ;};type cumulArgs struct{_afbf float64 ;_ccac float64 ;_bgdf float64 ;_agac float64 ;_faea float64 ;
_ddf int ;};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_cbfc :=len (args );if _cbfc < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cgdfa :=args [0].ValueNumber ;if _cgdfa ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gagec :=[]float64 {};for _ ,_afce :=range args [1:]{switch _afce .Type {case ResultTypeNumber :_gagec =append (_gagec ,_afce .ValueNumber );case ResultTypeArray ,ResultTypeList :_agbe :=_bfacf (_afce );
for _ ,_ddee :=range _agbe {for _ ,_aefb :=range _ddee {if _aefb .Type ==ResultTypeNumber &&!_aefb .IsBoolean {_gagec =append (_gagec ,_aefb .ValueNumber );};};};};};_badd :=0.0;for _egcg ,_efffe :=range _gagec {_badd +=_efffe /_eff .Pow (1+_cgdfa ,float64 (_egcg )+1);
};return MakeNumberResult (_badd );};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_edcgb :=args [0].AsNumber ();if _edcgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (180.0/_eff .Pi *_edcgb .ValueNumber );};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_ecgaf :=_eg .Buffer {};for _ ,_cdaaad :=range args {switch _cdaaad .Type {case ResultTypeString :_ecgaf .WriteString (_cdaaad .ValueString );case ResultTypeNumber :var _cccc string ;if _cdaaad .IsBoolean {if _cdaaad .ValueNumber ==0{_cccc ="\u0046\u0041\u004cS\u0045";
}else {_cccc ="\u0054\u0052\u0055\u0045";};}else {_cccc =_cdaaad .AsString ().ValueString ;};_ecgaf .WriteString (_cccc );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
};};return MakeStringResult (_ecgaf .String ());};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afbe :=args [0].AsNumber ();_cefcb :=args [1].AsNumber ();if _afbe .Type !=ResultTypeNumber ||_cefcb .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_bbdge :=_eff .Trunc (_afbe .ValueNumber );_ccbf :=_eff .Trunc (_cefcb .ValueNumber );if _ccbf > _bbdge {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");
};if _ccbf ==_bbdge ||_ccbf ==0{return MakeNumberResult (1);};_gdgaa :=float64 (1);for _acaef :=float64 (1);_acaef <=_ccbf ;_acaef ++{_gdgaa *=(_bbdge +1-_acaef )/_acaef ;};return MakeNumberResult (_gdgaa );};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _cbfa (args ,true )};

// Eval evaluates and returns an expression with prefix.
func (_abfe PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_dgabb :=_abfe ._gaedb .Reference (ctx ,ev );switch _dgabb .Type {case ReferenceTypeSheet :if _effg (_dgabb ,ctx ){return MakeErrorResultType (ErrorTypeName ,_ef .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dgabb .Value ));
};_fdagb :=ctx .Sheet (_dgabb .Value );return _abfe ._bcfaga .Eval (_fdagb ,ev );default:return MakeErrorResult (_ef .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dgabb .Type ));
};};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_bga ,_def :=_eege (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _def .Type ==ResultTypeError {return _def ;};return MakeNumberResult (_fdf (_bga ._ccff ,_bga ._eeed ,_bga ._bcbd ,_bga ._cegd ));};func _eab (_bcde ,_efff float64 ,_febg ,_dafe int )float64 {_dgcb :=_fa (_bcde );
_efb :=_fa (_efff );_ffbf :=_cffg (_dgcb ,_efb ,_febg ,_dafe );return _aaa (_ffbf ,_dgcb ,_dafe );};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// Eval evaluates and returns the result of a formula.
func (_gef *defEval )Eval (ctx Context ,formula string )Result {_gfg :=ParseString (formula );_bed :=make (chan Result );go func (){if _gfg ==nil {_bed <-MakeErrorResult (_ef .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));
}else {_gef .checkLastEvalIsRef (ctx ,_gfg );_bed <-_gfg .Eval (ctx ,_gef );};}();select{case _fdd :=<-_bed :return _fdd ;case <-_cb .After (_dfb ):_bf .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");
return MakeNumberResult (0);};};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_bfc :=args [0];switch _bfc .Type {case ResultTypeEmpty :return MakeNumberResult (1);
case ResultTypeNumber :_afdc :=_fa (_bfc .ValueNumber );return MakeNumberResult (float64 (_afdc .Month ()));case ResultTypeString :_bcda :=_ea .ToLower (_bfc .ValueString );if !_gge (_bcda ){_ ,_ ,_ ,_ ,_gdgg ,_cgc :=_beb (_bcda );if _cgc .Type ==ResultTypeError {_cgc .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";
return _cgc ;};if _gdgg {return MakeNumberResult (1);};};_ ,_bac ,_ ,_ ,_ebce :=_efa (_bcda );if _ebce .Type ==ResultTypeError {return _ebce ;};return MakeNumberResult (float64 (_bac ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");
};};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egdf :=args [0];if _egdf .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bdeff :=len (_egdf .ValueArray );for _ ,_ddafb :=range _egdf .ValueArray {if len (_ddafb )!=_bdeff {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");
};};return MakeNumberResult (_faba (_egdf .ValueArray ));};

// Reference returns an invalid reference for Negate.
func (_fcdaa Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _dcbcfc (args ,false )};var _eggg =[...]int {1};

// Reference returns an invalid reference for BinaryExpr.
func (_gc BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _aaa (_bcec ,_ebfd _cb .Time ,_babf int )float64 {if _bcec .After (_ebfd ){_bcec ,_ebfd =_ebfd ,_bcec ;};_gdgc :=0;_ebdf ,_fea ,_feg :=_bcec .Date ();
_egda ,_cff ,_febf :=_ebfd .Date ();_egcc ,_dccf :=int (_fea ),int (_cff );_bcdg ,_cbg :=_affa (_ebdf ,_egcc ,_feg ,_babf ),_affa (_egda ,_dccf ,_febf ,_babf );if !_cac (_babf ){return _dbd (_egda ,_dccf ,_cbg )-_dbd (_ebdf ,_egcc ,_bcdg );};if _babf ==0{if (_egcc ==2||_bcdg < 30)&&_febf ==31{_cbg =31;
}else if _dccf ==2&&_cbg ==_gccc (_egda ,_dccf ){_cbg =_gccc (_egda ,2);};}else {if _egcc ==2&&_bcdg ==30{_bcdg =_gccc (_ebdf ,2);};if _dccf ==2&&_cbg ==30{_cbg =_gccc (_egda ,2);};};if _ebdf < _egda ||(_ebdf ==_egda &&_egcc < _dccf ){_gdgc =30-_bcdg +1;
_feg =1;_bcdg =1;_bbdc :=_cb .Date (_ebdf ,_cb .Month (_egcc ),_feg ,0,0,0,0,_cb .UTC ).AddDate (0,1,0);if _bbdc .Year ()< _egda {_gdgc +=_aefg (_bbdc .Year (),int (_bbdc .Month ()),12,_babf );_bbdc =_bbdc .AddDate (0,13-int (_bbdc .Month ()),0);_gdgc +=_ffc (_bbdc .Year (),_egda -1,_babf );
};_gdgc +=_aefg (_egda ,int (_bbdc .Month ()),_dccf -1,_babf );_bbdc =_bbdc .AddDate (0,_dccf -int (_bbdc .Month ()),0);_egcc =_bbdc .Day ();};_gdgc +=_cbg -_bcdg ;if _gdgc > 0{return float64 (_gdgc );}else {return 0;};};const (_cgecf countMode =iota ;
_eeegga ;_bcfa ;);type durationArgs struct{_gggf float64 ;_gcdb float64 ;_eaggc float64 ;_gcbf float64 ;_cbfgg float64 ;_dagd int ;};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_afdd :=args [0].AsString ();if _afdd .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");
};_edfa :="\u0041\u0031";if len (args )==2{_aegb :=args [1].Ref ;if _aegb .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};_edfa =_aegb .Value ;};switch _afdd .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_ebe ,_fbab :=_ab .ParseCellReference (_edfa );if _fbab !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_edfa );
};_ebgg :="\u0024"+_ebe .Column +"\u0024"+_ead .Itoa (int (_ebe .RowIdx ));if _ebe .SheetName !=""{_ebgg =_ebe .SheetName +"\u0021"+_ebgg ;};return MakeStringResult (_ebgg );case "\u0063\u006f\u006c":_gcce ,_dac :=_ab .ParseCellReference (_edfa );if _dac !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_edfa );
};return MakeNumberResult (float64 (_gcce .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_gcec :=_ea .Contains (ctx .GetFormat (_edfa ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_gcec );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];
case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_gaag :="\u0047";_aaeae :=ctx .GetFormat (_edfa );if _aaeae =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_aade .MatchString (_aaeae ){_gaag ="\u0046\u0030";
}else if _aaeae =="\u0030\u0025"{_gaag ="\u0050\u0030";}else if _aaeae =="\u004d\u004d\u004d\u0020\u0044\u0044"{_gaag ="\u0044\u0032";}else if _aaeae =="\u004d\u004d\u002fY\u0059"{_gaag ="\u0044\u0033";}else if _aaeae =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_aaeae =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_gaag ="\u0044\u0034";
}else if _aaeae =="\u004d\u004d\u005c\u002d\u0044\u0044"{_gaag ="\u0044\u0035";}else if _aaeae =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_gaag ="\u0044\u0036";}else if _aaeae =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_gaag ="\u0044\u0037";
}else if _aaeae =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_gaag ="\u0044\u0038";}else if _aaeae =="\u0048\u0048\u003aM\u004d"{_gaag ="\u0044\u0039";}else if _daega .MatchString (_aaeae ){_gaag ="\u002e\u0030";}else if _babg .MatchString (_aaeae ){_gaag ="\u002e\u0030\u0028\u0029";
}else if _bffd .MatchString (_aaeae ){_gaag ="\u0043\u0030";}else if _cgaa .MatchString (_aaeae )||_bcgg .MatchString (_aaeae ){_gaag ="\u0044\u0031";}else if _dgfe :=_gfbg .FindStringSubmatch (_aaeae );len (_dgfe )> 1{_gaag ="\u0046"+_ead .Itoa (len (_dgfe [1]));
}else if _bcfd :=_bgaa .FindStringSubmatch (_aaeae );len (_bcfd )> 1{_gaag ="\u002e"+_ead .Itoa (len (_bcfd [2]));}else if _cadc :=_gee .FindStringSubmatch (_aaeae );len (_cadc )> 1{_gaag ="\u0050"+_ead .Itoa (len (_cadc [2]));}else if _beeea :=_abfd .FindStringSubmatch (_aaeae );
len (_beeea )> 1{_gaag ="\u0043"+_acfc (_beeea ,1);}else if _dbec :=_gacf .FindStringSubmatch (_aaeae );len (_dbec )> 1{_gaag ="\u0043"+_acfc (_dbec ,1);}else if _cbcfg :=_deef .FindStringSubmatch (_aaeae );len (_cbcfg )> 1{_gaag ="\u002e"+_acfc (_cbcfg ,1)+"\u0028\u0029";
}else if _dea :=_gacc .FindStringSubmatch (_aaeae );len (_dea )> 1{_gaag ="\u002e"+_acfc (_dea ,1);}else if _fbcb :=_bcad .FindStringSubmatch (_aaeae );len (_fbcb )> 1{_gaag ="\u0053"+_acfc (_fbcb ,3);};if _gaag !="\u0047"&&_ea .Contains (_aaeae ,"\u005b\u0052\u0045D\u005d"){_gaag +="\u002d";
};return MakeStringResult (_gaag );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_abec :=ctx .GetFormat (_edfa );if _faeg .MatchString (_abec ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_edfa ));
case "\u0070r\u006f\u0074\u0065\u0063\u0074":_agfa :=0.0;if ctx .GetLocked (_edfa ){_agfa =1.0;};return MakeNumberResult (_agfa );case "\u0072\u006f\u0077":_ccadc ,_befff :=_ab .ParseCellReference (_edfa );if _befff !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_edfa );
};return MakeNumberResult (float64 (_ccadc .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");
};case "\u0077\u0069\u0064t\u0068":_ecged ,_acad :=_ab .ParseCellReference (_edfa );if _acad !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_edfa );};if _ecged .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_ecged .ColumnIdx )));
}else {return MakeNumberResult (ctx .Sheet (_ecged .SheetName ).GetWidth (int (_ecged .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_afdd .ValueString );
};

// Function is a standard function whose result only depends on its arguments.
type Function func (_fcfgb []Result )Result ;

// String is a string expression.
type String struct{_dffec string };

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_acfb :=_ea .ToLower (args [0].ValueString );if !_efgg (_acfb ){_ ,_ ,_ ,_agf ,_cbfd :=_efa (_acfb );if _cbfd .Type ==ResultTypeError {_cbfd .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";
return _cbfd ;};if _agf {return MakeNumberResult (0);};};_dcce ,_acba ,_feb ,_gag ,_ ,_ceb :=_beb (_acfb );if _ceb .Type ==ResultTypeError {return _ceb ;};_dfad :=_daec (float64 (_dcce ),float64 (_acba ),_feb );if _gag {_dfad +=0.5;}else if _dfad >=1{_dfad -=float64 (int (_dfad ));
};return MakeNumberResult (_dfad );};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};_aecg :=args [0].ValueNumber ;if _aecg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");
};_ecgb :=float64 (int (args [1].ValueNumber ));if _ecgb < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult (_eff .Pow ((1+_aecg /_ecgb ),_ecgb )-1);};const _effbg ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";


// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_aaggd :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aaggd =int (args [1].ValueNumber );if _aaggd < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");
};if _aaggd ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_cead :=args [0].Value ();
_gace :=len (_cead );if _aaggd > _gace {return MakeStringResult (_cead );};return MakeStringResult (_cead [_gace -_aaggd :_gace ]);};func _bbbe (_cdgca []Result ,_degf countMode )float64 {_aebef :=0.0;for _ ,_cade :=range _cdgca {switch _cade .Type {case ResultTypeNumber :if _degf ==_eeegga ||(_degf ==_cgecf &&!_cade .IsBoolean ){_aebef ++;
};case ResultTypeList ,ResultTypeArray :_aebef +=_bbbe (_cade .ListValues (),_degf );case ResultTypeString :if _degf ==_eeegga {_aebef ++;};case ResultTypeEmpty :if _degf ==_bcfa {_aebef ++;};};};return _aebef ;};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );
RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );
RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );
RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );
};func _gedga (_dgec []Result )[]float64 {_beeef :=make ([]float64 ,0);for _ ,_cebg :=range _dgec {if _cebg .Type ==ResultTypeEmpty {continue ;};_cebg =_cebg .AsNumber ();switch _cebg .Type {case ResultTypeNumber :if !_cebg .IsBoolean {_beeef =append (_beeef ,_cebg .ValueNumber );
};case ResultTypeList ,ResultTypeArray :_beeef =append (_beeef ,_gedga (_cebg .ListValues ())...);case ResultTypeString :default:_bf .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cebg .Type );
};};return _beeef ;};

// Update returns the same object as updating sheet references does not affect String.
func (_gcbdd String )Update (q *_cg .UpdateQuery )Expression {return _gcbdd };

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_fccb :=_ddba (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _fccb .Type !=ResultTypeEmpty {return _fccb ;};_eacg :=_ffef (args [1:]);_ffabc :=_eff .MaxFloat64 ;_gcbd :=_bfacf (args [0]);for _ ,_aabec :=range _eacg {_acfa :=_gcbd [_aabec ._bageg ][_aabec ._gdfc ].ValueNumber ;
if _ffabc > _acfa {_ffabc =_acfa ;};};if _ffabc ==_eff .MaxFloat64 {_ffabc =0;};return MakeNumberResult (float64 (_ffabc ));};func _ebagc (_bbfab int )string {if _bbfab >=1&&_bbfab -1< len (_bcagb ){if _bcagb [_bbfab -1]!=""{return _bcagb [_bbfab -1];};
};return _ef .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_bbfab );};

// String returns a string of a range.
func (_egeba Range )String ()string {return _ef .Sprintf ("\u0025\u0073\u003a%\u0073",_egeba ._bfbcd .String (),_egeba ._agfcf .String ());};

// Error is an error expression.
type Error struct{_cba string };

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ddef :=args [0];switch _ddef .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_fddc :=_fa (_ddef .ValueNumber );return MakeNumberResult (float64 (_fddc .Minute ()));case ResultTypeString :_eeda :=_ea .ToLower (_ddef .ValueString );if !_efgg (_eeda ){_ ,_ ,_ ,_cdf ,_cad :=_efa (_eeda );if _cad .Type ==ResultTypeError {_cad .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";
return _cad ;};if _cdf {return MakeNumberResult (0);};};_ ,_gggd ,_ ,_ ,_ ,_fbc :=_beb (_eeda );if _fbc .Type ==ResultTypeError {return _fbc ;};return MakeNumberResult (float64 (_gggd ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");
};};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_cbgg .Lock ();defer _cbgg .Unlock ();if _bdab ,_dcgeae :=_aefga [name ];_dcgeae {return _bdab ;};return nil ;};func _cbee (_edbf Result ,_fgefa ,_adgb string )(float64 ,Result ){switch _edbf .Type {case ResultTypeEmpty :return 0,_bgg ;
case ResultTypeNumber :return _edbf .ValueNumber ,_bgg ;case ResultTypeString :_cafag ,_dbagd :=_ead .ParseFloat (_edbf .ValueString ,64);if _dbagd !=nil {return 0,MakeErrorResult (_adgb +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_fgefa );
};return _cafag ,_bgg ;default:return 0,MakeErrorResult (_fgefa +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_adgb +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");
};};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_ceadg :s }};const _gga ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// EmptyExpr is an empty expression.
type EmptyExpr struct{};func _fc (_gf ,_gfe [][]Result )bool {if len (_gf )!=len (_gfe ){return false ;};for _ad :=range _gf {if len (_gf [_ad ])!=len (_gfe [_ad ]){return false ;};};return true ;};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_gfcfc ,_cbcge string };

// SetLocked does nothing for the invalid reference context.
func (_ggacb *ivr )SetLocked (cellRef string ,locked bool ){};func _fadb (_bgbbe ,_fcdc []string )[]string {for _ ,_ddbg :=range _fcdc {_bgbbe =append (_bgbbe ,_ddbg );};return _bgbbe ;};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_fcecg :=len (args );if _fcecg < 3||_fcecg > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eecde :=args [0].ValueNumber ;if _eecde !=float64 (int (_eecde )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gggdf :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cbad :=args [2].ValueNumber ;_abcc :=0.0;if _fcecg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_abcc =args [3].ValueNumber ;};_gdfg :=0.0;if _fcecg >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gdfg =args [4].ValueNumber ;if _gdfg !=0{_gdfg =1;};};_fbfcc :=0.1;if _fcecg >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbfcc =args [5].ValueNumber ;};_egdg :=100;_fgab :=0;_fdeb :=false ;_deea :=1e-6;_gbfc :=_fbfcc ;for _fgab < _egdg &&!_fdeb {_bdge :=_eff .Pow (_gbfc +1,_eecde );_gfede :=_eff .Pow (_gbfc +1,_eecde -1);_fcac :=_gbfc *_gdfg +1;_daee :=_gggdf *(_bdge -1);
_gdga :=_abcc +_bdge *_cbad +_daee *_fcac /_gbfc ;_dedb :=_eecde *_gfede *_cbad -_daee *_fcac /_eff .Pow (_gbfc ,2);_dda :=(_eecde *_gggdf *_gfede *_fcac +_daee *_gdfg )/_gbfc ;_cgegd :=_gdga /(_dedb +_dda );if _eff .Abs (_cgegd )< _deea {_fdeb =true ;
};_fgab ++;_gbfc -=_cgegd ;};return MakeNumberResult (_gbfc );};

// FunctionCall is a function call expression.
type FunctionCall struct{_fdaad string ;_ebfcg []Expression ;};func _bbgga (_fadd ,_egdc ,_bea ,_gcg float64 ,_dfded int )float64 {var _cbdc float64 ;if _fadd ==0{_cbdc =_gcg +_bea *_egdc ;}else {_adda :=_eff .Pow (1+_fadd ,_egdc );if _dfded ==1{_cbdc =_gcg *_adda +_bea *(1+_fadd )*(_adda -1)/_fadd ;
}else {_cbdc =_gcg *_adda +_bea *(_adda -1)/_fadd ;};};return -_cbdc ;};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_cfff :=_ea .Split (v ,"\u003a");if len (_cfff )!=2{return nil ;};if _cfff [0]> _cfff [1]{_cfff [0],_cfff [1]=_cfff [1],_cfff [0];};return VerticalRange {_gfcfc :_cfff [0],_cbcge :_cfff [1]};};type rangeIndex struct{_bageg int ;
_gdfc int ;};func init (){_ggcac ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );
RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );
RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );
RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};const _cgafb int =0;
func _dddb (_ecfbc Result ,_edde ,_gffe int )[][]Result {_gbbf :=[][]Result {};switch _ecfbc .Type {case ResultTypeArray :for _ecd ,_aggba :=range _ecfbc .ValueArray {if _ecd < _edde {_gbbf =append (_gbbf ,_dceb (MakeListResult (_aggba ),_gffe ));}else {_gbbf =append (_gbbf ,_dceb (MakeErrorResultType (ErrorTypeNA ,""),_gffe ));
};};case ResultTypeList :_fafd :=_dceb (_ecfbc ,_gffe );for _gaba :=0;_gaba < _edde ;_gaba ++{_gbbf =append (_gbbf ,_fafd );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _aeadf :=0;_aeadf < _edde ;_aeadf ++{_beaa :=_dceb (_ecfbc ,_gffe );
_gbbf =append (_gbbf ,_beaa );};};return _gbbf ;};func _bcadg (_aecd []Result ,_ebdd rmode )Result {if len (_aecd )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fdege :=_aecd [0].AsNumber ();if _fdege .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eabed :=_aecd [1].AsNumber ();if _eabed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fgcad :=_eabed .ValueNumber ;_gaecg :=_fdege .ValueNumber ;_aecf :=1.0;if _fgcad > 0{_aecf =_eff .Pow (1/10.0,_fgcad );}else {_aecf =_eff .Pow (10.0,-_fgcad );};_gaecg ,_bcdf :=_eff .Modf (_gaecg /_aecf );switch _ebdd {case _gbbg :const _eefc =0.499999999;
if _bcdf >=_eefc {_gaecg ++;}else if _bcdf <=-_eefc {_gaecg --;};case _dbaf :case _fabee :if _bcdf > 0{_gaecg ++;}else if _bcdf < 0{_gaecg --;};};return MakeNumberResult (_gaecg *_aecf );};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;
BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);func _egcfg (_eeegg Result )bool {_faadd :=_eeegg .Type ;return _faadd !=ResultTypeArray &&_faadd !=ResultTypeList ;
};const _dfb =_cb .Second *1;

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_bbbe (args ,_bcfa ));};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_acgb :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");
};_dbfg :=args [1].ValueNumber !=0;_edeb :=_dfddc (args [2:],[]string {},_dbfg );return MakeStringResult (_ea .Join (_edeb ,_acgb ));};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_acabb :=len (args );if _acabb < 4||_acabb > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_edeg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eecddd :=args [1].ValueNumber ;if _eecddd <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cefc :=args [2].ValueNumber ;if _cefc < _eecddd {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_dded :=args [3].ValueNumber ;_bcfe :=0.0;if _acabb >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_bcfe =args [4].ValueNumber ;};_afda :=0;if _acabb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_afda =int (args [5].ValueNumber );if _afda !=0{_afda =1;};};return MakeNumberResult (_gaeg (_edeg ,_cefc ,_dded ,_bcfe ,_afda )-_gfed (_edeg ,_eecddd ,_cefc ,_dded ,_bcfe ,_afda ));};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _bcadg (args ,_fabee )};

// String returns a string representation of String.
func (_fabfa String )String ()string {return "\u0022"+_fabfa ._dffec +"\u0022"};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (ev .LastEvalIsRef ());};

// Reference returns a string reference value to a vertical range.
func (_aacdg VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_aacdg .verticalRangeReference ()};};func (_abecg *ivr )Sheet (name string )Context {return _abecg };

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_bgbb .Float64 ());
};var _efcd =[]*_f .Regexp {};

// String returns a string representation of PrefixExpr.
func (_fdde PrefixExpr )String ()string {return _ef .Sprintf ("\u0025\u0073\u0021%\u0073",_fdde ._gaedb .String (),_fdde ._bcfaga .String ());};type criteriaParsed struct{_cfdeb bool ;_ceea float64 ;_gecg string ;_ggfd *criteriaRegex ;};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_cbgg .Lock ();defer _cbgg .Unlock ();if _ddfd ,_edad :=_gbabe [name ];_edad {return _ddfd ;};return nil ;};

// Update updates the FunctionCall references after removing a row/column.
func (_fdga FunctionCall )Update (q *_cg .UpdateQuery )Expression {_ggge :=[]Expression {};for _ ,_ecea :=range _fdga ._ebfcg {_cfedg :=_ecea .Update (q );_ggge =append (_ggge ,_cfedg );};return FunctionCall {_fdaad :_fdga ._fdaad ,_ebfcg :_ggge };};func init (){RegisterFunction ("\u0041\u004e\u0044",And );
RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );
};

// Reference returns a string reference value to a horizontal range.
func (_bdec HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_bdec .horizontalRangeReference ()};};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_bcg :=args [0];if _bcg .Type !=ResultTypeArray &&_bcg .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_ccfdg :=_bcg .ValueArray ;if len (_ccfdg )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};return MakeNumberResult (float64 (len (_ccfdg )));};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_abdc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acge :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfgfc :=args [2].ValueNumber ;if _dfgfc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cag :=args [3].ValueNumber ;return MakeNumberResult (_cag *_abdc *(_acge /_dfgfc -1));};const _dage int =30;

// Update returns the same object as updating sheet references does not affect Error.
func (_baa Error )Update (q *_cg .UpdateQuery )Expression {return _baa };const _cffc =57372;func _ggeg (_gdae _cb .Time )_cb .Time {_gdae =_gdae .UTC ();return _cb .Date (_gdae .Year (),_gdae .Month (),_gdae .Day (),_gdae .Hour (),_gdae .Minute (),_gdae .Second (),_gdae .Nanosecond (),_cb .Local );
};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gebf :=int (args [0].ValueNumber );
return MakeBoolResult (_gebf !=_gebf /2*2);};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_gaedb Expression ;_bcfaga Expression ;};const _geffd =57374;

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_gfa :=args [0].ValueNumber ;_ggg :=args [1].ValueNumber ;if _ggg < _gfa {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");
};if _ggg ==_gfa {return MakeNumberResult (0);};_fgag :=_ea .ToLower (args [2].ValueString );if _fgag =="\u0064"{return MakeNumberResult (_ggg -_gfa );};_gbec :=_fa (_gfa );_dag :=_fa (_ggg );_ffd ,_dab ,_gcc :=_gbec .Date ();_agg ,_dgc ,_dcbd :=_dag .Date ();
_gcb :=int (_dab );_agge :=int (_dgc );var _gda float64 ;switch _fgag {case "\u0079":_gda =float64 (_agg -_ffd );if _agge < _gcb ||(_agge ==_gcb &&_dcbd < _gcc ){_gda --;};case "\u006d":_abaa :=_agg -_ffd ;_abad :=_agge -_gcb ;if _dcbd < _gcc {_abad --;
};if _abad < 0{_abaa --;_abad +=12;};_gda =float64 (_abaa *12+_abad );case "\u006d\u0064":_bbcc :=_agge ;if _dcbd < _gcc {_bbcc --;};_gda =float64 (int (_ggg -_dbd (_agg ,_bbcc ,_gcc )));case "\u0079\u006d":_gda =float64 (_agge -_gcb );if _dcbd < _gcc {_gda --;
};if _gda < 0{_gda +=12;};case "\u0079\u0064":_gefe :=_agg ;if _agge < _gcb ||(_agge ==_gcb &&_dcbd < _gcc ){_gefe --;};_gda =float64 (int (_ggg -_dbd (_gefe ,_gcb ,_gcc )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");
};return MakeNumberResult (_gda );};const _dgafa =57362;

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bbef :=args [0].AsNumber ();if _bbef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ecde :=int (_bbef .ValueNumber );if _ecde < 0||_ecde > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");
};return MakeStringResult (_ef .Sprintf ("\u0025\u0063",_ecde ));};func _gage (_abg int ,_fggb _cb .Month ,_cdef int )int64 {if _abg ==1900&&int (_fggb )<=2{_cdef --;};_bccd :=_cb .Date (_abg ,_fggb ,_cdef ,0,0,0,0,_cb .UTC );return _bccd .Unix ();};func _fafdc (_egcca string ,_eaag func (_eccdg float64 )float64 )Function {return func (_aeda []Result )Result {if len (_aeda )!=1{return MakeErrorResult (_egcca +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_cdbff :=_aeda [0].AsNumber ();switch _cdbff .Type {case ResultTypeNumber :_bdbg :=_eaag (_cdbff .ValueNumber );if _eff .IsNaN (_bdbg ){return MakeErrorResult (_egcca +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");
};if _eff .IsInf (_bdbg ,0){return MakeErrorResult (_egcca +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _bdbg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_egcca +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult (1/_bdbg );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_egcca +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _cdbff ;default:return MakeErrorResult (_ef .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_egcca ,_cdbff .Type ));
};};};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_cdab PrefixVerticalRange )Update (q *_cg .UpdateQuery )Expression {if q .UpdateType ==_cg .UpdateActionRemoveColumn {_agff :=_cdab ;_ebceb :=_cdab ._dagdb .String ();if _ebceb ==q .SheetToUpdate {_dbeag :=q .ColumnIdx ;_agff ._ccga =_bbe (_cdab ._ccga ,_dbeag );
_agff ._cabf =_bbe (_cdab ._cabf ,_dbeag );};return _agff ;};return _cdab ;};func init (){_bgbb =_aa .New (_aa .NewSource (_cb .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_babfc ("\u0041\u0053\u0049\u004e",_eff .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_babfc ("\u0041\u0053\u0049\u004e",_eff .Acos ));
RegisterFunction ("\u0041\u0043\u004fS\u0048",_babfc ("\u0041\u0053\u0049\u004e",_eff .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_babfc ("\u0041\u0043\u004f\u0054",func (_bcge float64 )float64 {return _eff .Pi /2-_eff .Atan (_bcge )}));
RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_babfc ("\u0041\u0043\u004fT\u0048",func (_dgcea float64 )float64 {return _eff .Atanh (1/_dgcea )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );
RegisterFunction ("\u0041\u0053\u0049\u004e",_babfc ("\u0041\u0053\u0049\u004e",_eff .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_babfc ("\u0041\u0053\u0049N\u0048",_eff .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_babfc ("\u0041\u0054\u0041\u004e",_eff .Atan ));
RegisterFunction ("\u0041\u0054\u0041N\u0048",_babfc ("\u0041\u0054\u0041N\u0048",_eff .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );
RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );
RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_babfc ("\u0043\u004f\u0053",_eff .Cos ));
RegisterFunction ("\u0043\u004f\u0053\u0048",_babfc ("\u0043\u004f\u0053\u0048",_eff .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_fafdc ("\u0043\u004f\u0054",_eff .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_fafdc ("\u0043\u004f\u0054\u0048",_eff .Tanh ));
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_fafdc ("\u0043\u0053\u0043",_eff .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_fafdc ("\u0043\u0053\u0043",_eff .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );
RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_babfc ("\u0045\u0058\u0050",_eff .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );
RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );
RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );
RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_babfc ("\u004c\u004e",_eff .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_babfc ("\u004c\u004f\u00471\u0030",_eff .Log10 ));
RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );
RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );
RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );
RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_fafdc ("\u0053\u0045\u0043",_eff .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_fafdc ("\u0053\u0045\u0043\u0048",_eff .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );
RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_babfc ("\u0053\u0049\u004e",_eff .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_babfc ("\u0053\u0049\u004e\u0048",_eff .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_babfc ("\u0053\u0051\u0052\u0054",_eff .Sqrt ));
RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_babfc ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_ecgde float64 )float64 {return _eff .Sqrt (_ecgde *_eff .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );
RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_babfc ("\u0054\u0041\u004e",_eff .Tan ));
RegisterFunction ("\u0054\u0041\u004e\u0048",_babfc ("\u0054\u0041\u004e\u0048",_eff .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fcfg :=args [0].AsNumber ();if _fcfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eggd :=float64 (0);if len (args )> 1{_edaed :=args [1].AsNumber ();if _edaed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eggd =_edaed .ValueNumber ;};_dbac :=_fcfg .ValueNumber ;_acdb :=1.0;if _eggd >=0{_acdb =_eff .Pow (1/10.0,_eggd );}else {return MakeNumberResult (0);};_dbac ,_cfbdbf :=_eff .Modf (_dbac /_acdb );_dggde :=0.99999;if _cfbdbf > _dggde {_dbac ++;}else if _cfbdbf < -_dggde {_dbac --;
};_ =_cfbdbf ;return MakeNumberResult (_dbac *_acdb );};func _acg (_febd ,_ggab int64 )float64 {return float64 (int (0.5+float64 ((_ggab -_febd )/86400)))};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fddga :=args [0];_acecb :=args [1];if _acecb .Type !=ResultTypeArray &&_acecb .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_dgggc :=_bbga (_acecb );_cedc :=-1;for _dcfb ,_edce :=range _dgggc {if _fgdc (_fddga ,_edce ,false ,false )==_feaga {_cedc =_dcfb ;};};if _cedc ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};_fegd :=_dgggc ;if len (args )==3{_fegd =_bbga (args [2]);};if _cedc < 0||_cedc >=len (_fegd ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};return _fegd [_cedc ];};var _dcdg =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};


// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_deeb :=0;_gedf :=false ;for _ ,_efbf :=range args {switch _efbf .Type {case ResultTypeList ,ResultTypeArray :_feed :=Xor (_efbf .ListValues ());if _feed .Type ==ResultTypeError {return _feed ;};if _feed .ValueNumber !=0{_deeb ++;};_gedf =true ;case ResultTypeNumber :if _efbf .ValueNumber !=0{_deeb ++;
};_gedf =true ;case ResultTypeString :case ResultTypeError :return _efbf ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");
};};if !_gedf {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_deeb %2!=0);};func _gadgg (){_cdaaa =_f .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");
_aagde =_f .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_bgec =_f .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_ceaa =_f .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_dfdf =_f .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");
_bdeb =_f .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};func NewLexer ()*Lexer {return &Lexer {_fcggd :make (chan *node )}};

// Eval evaluates and returns the result of the cell reference.
func (_gffa CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_gffa ._eeb ,ev )};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_acbb :=len (args );if _acbb !=4&&_acbb !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_ccdc ,_caff :=_eaa (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _caff .Type ==ResultTypeError {return _caff ;};_bdbe ,_caff :=_eaa (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");
if _caff .Type ==ResultTypeError {return _caff ;};if _ccdc >=_bdbe {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_agef :=args [2].ValueNumber ;if _agef <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gabc :=args [3].ValueNumber ;if _gabc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gaeb :=0;if _acbb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gaeb =int (args [4].ValueNumber );if !_eegdf (_gaeb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");
};};_bbgf ,_caff :=_ggff (_ccdc ,_bdbe ,_gaeb );if _caff .Type ==ResultTypeError {return _caff ;};return MakeNumberResult (_gabc *_agef *_bbgf );};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_fefb ,_fcab :=_gbdf ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _fcab .Type !=ResultTypeEmpty {return _fcab ;};_gbag :=_fefb ._gfge ;_ffad :=_fefb ._acea ;_efeba :=_fefb ._ebabd ;_bbedb :=_fefb ._abdgb ;_feaba :=len (_gbag );
if _ffad > _feaba {_ffad =_feaba ;};_eecce :=_ffad +_efeba ;if _eecce > _feaba {_eecce =_feaba ;};_gbdaa :=_gbag [0:_ffad ]+_bbedb +_gbag [_eecce :];return MakeStringResult (_gbdaa );};const _fgafb int =30;

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_caebf :=len (args );if _caebf < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _caebf > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dcgea :=args [0];_fgdg :=args [1];if _fgdg .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_dgdc :=args [2].AsNumber ();if _dgdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aafg :=false ;if _caebf ==4&&args [3].Type !=ResultTypeEmpty {_bffea :=args [3].AsNumber ();if _bffea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _bffea .ValueNumber ==0{_aafg =true ;};};_bgad :=int (_dgdc .ValueNumber )-1;_dcac :=-1;_dafg :=false ;_cfcg :for _bggfa ,_fbdb :=range _fgdg .ValueArray {if len (_fbdb )==0{continue ;};_feacb :=_fbdb [0];switch _fgdc (_feacb ,_dcgea ,false ,_aafg ){case _bdgf :_dcac =_bggfa ;
case _feaga :_dcac =_bggfa ;_dafg =true ;break _cfcg ;};};if _dcac ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_cgfgf :=_fgdg .ValueArray [_dcac ];
if _bgad < 0||_bgad >=len (_cgfgf ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _dafg ||!_aafg {return _cgfgf [_bgad ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};func _cebacc (_egea ,_eeec int )string {const TOKSTART =4;if !_dcfe {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";
};for _ ,_bcbc :=range _ffggb {if _bcbc ._bcfag ==_egea &&_bcbc ._egaea ==_eeec {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_bcbc ._bafg ;};};_acda :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_ebagc (_eeec );
_bgedd :=make ([]int ,0,4);_aefab :=_eece [_egea ];for _fdfdb :=TOKSTART ;_fdfdb -1< len (_bcagb );_fdfdb ++{if _defg :=_aefab +_fdfdb ;_defg >=0&&_defg < _fcfeb &&_baaag [_dcdg [_defg ]]==_fdfdb {if len (_bgedd )==cap (_bgedd ){return _acda ;};_bgedd =append (_bgedd ,_fdfdb );
};};if _edefg [_egea ]==-2{_dddf :=0;for _dgfeb [_dddf ]!=-1||_dgfeb [_dddf +1]!=_egea {_dddf +=2;};for _dddf +=2;_dgfeb [_dddf ]>=0;_dddf +=2{_cdbee :=_dgfeb [_dddf ];if _cdbee < TOKSTART ||_dgfeb [_dddf +1]==0{continue ;};if len (_bgedd )==cap (_bgedd ){return _acda ;
};_bgedd =append (_bgedd ,_cdbee );};if _dgfeb [_dddf +1]!=0{return _acda ;};};for _fgac ,_fgagb :=range _bgedd {if _fgac ==0{_acda +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_acda +="\u0020\u006f\u0072\u0020";};_acda +=_ebagc (_fgagb );
};return _acda ;};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_eadcb :=_ea .Split (v ,"\u003a");if len (_eadcb )!=2{return nil ;};_bffad ,_ :=_ead .Atoi (_eadcb [0]);_eadfa ,_ :=_ead .Atoi (_eadcb [1]);if _bffad > _eadfa {_bffad ,_eadfa =_eadfa ,_bffad ;
};return PrefixHorizontalRange {_fbbc :pfx ,_ggede :_bffad ,_dcaf :_eadfa };};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_bfbcd ,_agfcf Expression };func (_gaca ReferenceType )String ()string {if _gaca >=ReferenceType (len (_caadf )-1){return _ef .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_gaca );
};return _effbg [_caadf [_gaca ]:_caadf [_gaca +1]];};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bcbg :=args [0];if _bcbg .Type ==ResultTypeNumber {return _bcbg ;};if _bcbg .Type ==ResultTypeString {_feafc ,_edgd :=_ead .ParseFloat (_bcbg .Value (),64);if _edgd ==nil {return MakeNumberResult (_feafc );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");
};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];
};return args [0];};func _cdffd (_dacg ,_gdcga Reference )string {return _ef .Sprintf ("\u0025\u0073\u003a%\u0073",_dacg .Value ,_gdcga .Value );};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_ceadg string };func (_baab *Lexer )emit (_aabab tokenType ,_cedcg []byte ){if _cbda {_ef .Println ("\u0065\u006d\u0069\u0074",_aabab ,_gfbbe (string (_cedcg )));};_baab ._fcggd <-&node {_aabab ,string (_cedcg )};};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_fcggd chan *node ;_dgbad _ee .Mutex ;_egcd []chan *node ;_ecda []*node ;};func _bbga (_bgbf Result )[]Result {_cdac :=_bgbf .ValueList ;if _bgbf .Type ==ResultTypeArray {_cdac =nil ;for _ ,_beffb :=range _bgbf .ValueArray {if len (_beffb )> 0{_cdac =append (_cdac ,_beffb [0]);
}else {_cdac =append (_cdac ,_bgg );};};};return _cdac ;};const _dddg =57366;

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_fbbc Expression ;_ggede ,_dcaf int ;};func _babfc (_agefd string ,_ecdg func (_dfbd float64 )float64 )Function {return func (_bgcf []Result )Result {if len (_bgcf )!=1{return MakeErrorResult (_agefd +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_fdcba :=_bgcf [0].AsNumber ();switch _fdcba .Type {case ResultTypeNumber :_dbagf :=_ecdg (_fdcba .ValueNumber );if _eff .IsNaN (_dbagf ){return MakeErrorResult (_agefd +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");
};if _eff .IsInf (_dbagf ,0){return MakeErrorResult (_agefd +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_dbagf );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_agefd +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _fdcba ;default:return MakeErrorResult (_ef .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_agefd ,_fdcba .Type ));
};};};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_acd string ,_efd Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_ecc string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_cb .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_egf int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_aef string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_fba string )string ;

// GetFormat returns if cell is protected.
GetLocked (_bca string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_ecg string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_ca string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_cge ,_bbf int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_fda string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_ega string ,_aca bool );

// NamedRange returns a named range.
NamedRange (_fdc string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_acb ,_dcc uint32 );};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ebdde :=args [0].AsString ();if _ebdde .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gdfb :=_eg .Buffer {};_edge :=false ;_ffffg :=false ;_cbdf :=0;for _ ,_dagf :=range _ebdde .ValueString {_fbeea :=_dagf ==' ';if _fbeea {if !_edge {continue ;};if !_ffffg {_cbdf ++;_gdfb .WriteRune (_dagf );};}else {_cbdf =0;_edge =true ;_gdfb .WriteRune (_dagf );
};_ffffg =_fbeea ;};_gdfb .Truncate (_gdfb .Len ()-_cbdf );return MakeStringResult (_gdfb .String ());};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_ceg [][]Expression };

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ageb :=args [0].Type ;for _ ,_defa :=range args {if _defa .Type !=_ageb {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");
};};switch _ageb {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_begc :=len (args [0].ListValues ());_bfed :=make ([]float64 ,_begc );for _dbab :=range _bfed {_bfed [_dbab ]=1.0;};for _ ,_cdaa :=range args {if len (_cdaa .ListValues ())!=_begc {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");
};for _fcfeg ,_adee :=range _cdaa .ListValues (){_adee =_adee .AsNumber ();if _adee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");
};_bfed [_fcfeg ]=_bfed [_fcfeg ]*_adee .ValueNumber ;};};_cdace :=0.0;for _ ,_cdce :=range _bfed {_cdace +=_cdce ;};return MakeNumberResult (_cdace );};return MakeNumberResult (1.0);};func _bffgb (_ecfefe Result ,_efbdd ,_dcefb string )(string ,Result ){switch _ecfefe .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _ecfefe .Value (),_bgg ;
default:return "",MakeErrorResult (_efbdd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_dcefb +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};type countMode byte ;


// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_eff .Pi );};func _bbe (_ff string ,_bae uint32 )string {_ebc :=_ab .ColumnToIndex (_ff );
if _ebc ==_bae {return "\u0023\u0052\u0045F\u0021";}else if _ebc > _bae {return _ab .IndexToColumn (_ebc -1);}else {return _ff ;};};func _abba (_cgef ,_cce int )int {switch _cce {case 1:if _eefe (_cgef ){return 366;}else {return 365;};case 3:return 365;
default:return 360;};};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _fcgf (args ,true )};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_bdgfe :=MakeNumberResult (0);for _ ,_adeg :=range args {_adeg =_adeg .AsNumber ();switch _adeg .Type {case ResultTypeNumber :_bdgfe .ValueNumber +=_adeg .ValueNumber *_adeg .ValueNumber ;case ResultTypeList ,ResultTypeArray :_egef :=SumSquares (_adeg .ListValues ());
if _egef .Type !=ResultTypeNumber {return _egef ;};_bdgfe .ValueNumber +=_egef .ValueNumber ;case ResultTypeString :case ResultTypeError :return _adeg ;case ResultTypeEmpty :default:return MakeErrorResult (_ef .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_adeg .Type ));
};};return _bdgfe ;};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dgcbf :=args [0].AsString ();_afgeb :=args [1].AsString ();if _dgcbf .Type !=ResultTypeString ||_afgeb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};return MakeBoolResult (_dgcbf .ValueString ==_afgeb .ValueString );};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_bedff Result )ListValues ()[]Result {if _bedff .Type ==ResultTypeArray {_eggbc :=[]Result {};for _ ,_deabbf :=range _bedff .ValueArray {for _ ,_cgdff :=range _deabbf {_eggbc =append (_eggbc ,_cgdff );};};return _eggbc ;};if _bedff .Type ==ResultTypeList {return _bedff .ValueList ;
};return nil ;};func _dbed (_ffcb float64 )bool {return _ffcb ==1||_ffcb ==2||_ffcb ==4};func _cafga (_dfaea yyLexer )int {return _ageeb ().Parse (_dfaea )};const _acagg =57368;

// Reference returns a string reference value to a range.
func (_gfff Range )Reference (ctx Context ,ev Evaluator )Reference {_gfgg :=_gfff ._bfbcd .Reference (ctx ,ev );_bdba :=_gfff ._agfcf .Reference (ctx ,ev );if _gfgg .Type ==ReferenceTypeCell &&_bdba .Type ==ReferenceTypeCell {return MakeRangeReference (_cdffd (_gfgg ,_bdba ));
};return ReferenceInvalid ;};type criteriaRegex struct{_eeef byte ;_efge string ;};func _gd (_dbc Result )bool {if _dbc .Type ==ResultTypeString {return _dbc .ValueString =="";};return _dbc .ValueNumber ==0;};const _egdgc =57351;

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_edfdc :=len (args );if _edfdc !=5&&_edfdc !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dgb ,_aefa ,_aecb :=_cafe (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _aecb .Type ==ResultTypeError {return _aecb ;};_dcef ,_aecb :=_eaa (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");
if _aecb .Type ==ResultTypeError {return _aecb ;};if _dcef >=_dgb {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bfec :=args [3].ValueNumber ;if _bfec < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cdee :=args [4].ValueNumber ;if _cdee < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_gfbe :=0;if _edfdc ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfbe =int (args [5].ValueNumber );if !_eegdf (_gfbe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");
};};_bdea ,_aecb :=_ggff (_dgb ,_aefa ,_gfbe );if _aecb .Type ==ResultTypeError {return _aecb ;};_ddbc ,_aecb :=_ggff (_dcef ,_aefa ,_gfbe );if _aecb .Type ==ResultTypeError {return _aecb ;};_eeca ,_aecb :=_ggff (_dcef ,_dgb ,_gfbe );if _aecb .Type ==ResultTypeError {return _aecb ;
};_ege :=1+_ddbc *_bfec ;_adag :=1+_bdea *_cdee ;return MakeNumberResult ((_ege /_adag -_eeca *_bfec )*100);};var InvalidReferenceContext =&ivr {};var _cgbf []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_abd *defEval )LastEvalIsRef ()bool {return _abd ._ecgd };

// Error is called in the case of parsing error and saves an error to a plex.
func (_bacd *plex )Error (s string ){_bf .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_bacd ._fffb =s ;};func _efa (_dfa string )(int ,int ,int ,bool ,Result ){_gdc :="";_caec :=[]string {};for _adb ,_bab :=range _gbg {_caec =_bab .FindStringSubmatch (_dfa );
if len (_caec )> 1{_gdc =_adb ;break ;};};if _gdc ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );};_aabe :=false ;var _fccd ,_egc ,_dcfg int ;var _aad error ;switch _gdc {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_egc ,_aad =_ead .Atoi (_caec [1]);
if _aad !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );};_dcfg ,_aad =_ead .Atoi (_caec [3]);if _aad !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );};_fccd ,_aad =_ead .Atoi (_caec [5]);if _aad !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );
};if _fccd < 0||_fccd > 9999||(_fccd > 99&&_fccd < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );};_fccd =_edbb (_fccd );_aabe =_caec [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_egc =_caed [_caec [1]];_dcfg ,_aad =_ead .Atoi (_caec [14]);
if _aad !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );};_fccd ,_aad =_ead .Atoi (_caec [16]);if _aad !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );};if _fccd < 0||_fccd > 9999||(_fccd > 99&&_fccd < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );
};_fccd =_edbb (_fccd );_aabe =_caec [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_babb ,_cf :=_ead .Atoi (_caec [1]);if _cf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );};_egd ,_cf :=_ead .Atoi (_caec [3]);
if _cf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );};_eedf ,_cf :=_ead .Atoi (_caec [5]);if _cf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );};if _babb >=1900&&_babb < 10000{_fccd =_babb ;_egc =_egd ;
_dcfg =_eedf ;}else if _babb > 0&&_babb < 13{_egc =_babb ;_dcfg =_egd ;_fccd =_eedf ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );};_aabe =_caec [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_fccd ,_aad =_ead .Atoi (_caec [16]);
if _aad !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );};_egc =_caed [_caec [3]];_dcfg ,_aad =_ead .Atoi (_caec [1]);if _aad !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );};_aabe =_caec [19]=="";};if !_adc (_fccd ,_egc ,_dcfg ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ccab );
};return _fccd ,_egc ,_dcfg ,_aabe ,_bgg ;};

// Reference returns an invalid reference for ConstArrayExpr.
func (_eef ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// LastRow returns 0 for the invalid reference context.
func (_dddc *ivr )LastRow (colFrom string )int {return 0};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_dbbgd PrefixRangeExpr )Update (q *_cg .UpdateQuery )Expression {_cgdb :=_dbbgd ;_ccace :=_dbbgd ._bfaa .String ();if _ccace ==q .SheetToUpdate {_egdffg :=*q ;_egdffg .UpdateCurrentSheet =true ;_cgdb ._fdged =_dbbgd ._fdged .Update (&_egdffg );_cgdb ._cacff =_dbbgd ._cacff .Update (&_egdffg );
};return _cgdb ;};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_eecda :=len (args );if _eecda < 4||_eecda > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cedd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eda :=args [1].ValueNumber ;if _eda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccad :=args [2].ValueNumber ;if _ccad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_bgdee :=args [3].ValueNumber ;_eecc :=0.0;if _eecda > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_eecc =args [4].ValueNumber ;};_efab :=0;if _eecda ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_efab =int (args [5].ValueNumber );if _efab !=0{_efab =1;};};return MakeNumberResult (_gfed (_cedd ,_eda ,_ccad ,_bgdee ,_eecc ,_efab ));};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};func init (){_gadgg ();
RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );
RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );
RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );
RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );
};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gbee :=args [0].AsNumber ();if _gbee .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bccf ,_baaf :=_eff .Modf (_gbee .ValueNumber );if _baaf < 0{_bccf --;};return MakeNumberResult (_bccf );};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_agec :=len (args );if _agec !=3&&_agec !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fafg ,_cebacf :=_bffgb (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _cebacf .Type ==ResultTypeError {return _cebacf ;};_bbggaf ,_cebacf :=_bffgb (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");
if _cebacf .Type ==ResultTypeError {return _cebacf ;};_fecgc ,_cebacf :=_bffgb (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _cebacf .Type ==ResultTypeError {return _cebacf ;
};_fgcae :=0;if _agec ==3{return MakeStringResult (_ea .Replace (_fafg ,_bbggaf ,_fecgc ,-1));}else {_effa ,_efbda :=_cbee (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");
if _efbda .Type ==ResultTypeError {return _efbda ;};_fgcae =int (_effa );if _fgcae < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");
};_gaea :=_fafg ;_caee :=_fgcae ;_dbddd :=-1;_gebdg :=len (_bbggaf );_gceg :=0;for {_caee --;_cfdbb :=_ea .Index (_gaea ,_bbggaf );if _cfdbb ==-1{_dbddd =-1;break ;}else {_dbddd =_cfdbb +_gceg ;if _caee ==0{break ;};_cfdec :=_gebdg +_cfdbb ;_gceg +=_cfdec ;
_gaea =_gaea [_cfdec :];};};if _dbddd ==-1{return MakeStringResult (_fafg );}else {_gbad :=_fafg [:_dbddd ];_fbgafg :=_fafg [_dbddd +_gebdg :];return MakeStringResult (_gbad +_fecgc +_fbgafg );};};};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _fcgf (args ,false )};const _dfbb =57369;

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _bcadg (args ,_dbaf )};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_bbbe (args ,_cgecf ))};type plex struct{_acbd chan *node ;_gdfa Expression ;_fffb string ;};const _gff ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";
const _afbdb =57378;

// Negate is a negate expression like -A1.
type Negate struct{_fdcf Expression };

// Reference returns a string reference value to an expression with prefix.
func (_affc PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_dcga :=_affc ._gaedb .Reference (ctx ,ev );_eggce :=_affc ._bcfaga .Reference (ctx ,ev );if _dcga .Type ==ReferenceTypeSheet &&_eggce .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_dcga .Value +"\u0021"+_eggce .Value };
};return ReferenceInvalid ;};

// String returns a string representation for Negate.
func (_cace Negate )String ()string {return "\u002d"+_cace ._fdcf .String ()};func _bc (_bb BinOpType ,_eag ,_be []Result )Result {_afg :=[]Result {};for _ba :=range _eag {_gdg :=_eag [_ba ].AsNumber ();_fcd :=_be [_ba ].AsNumber ();if _gdg .Type !=ResultTypeNumber ||_fcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _bb {case BinOpTypePlus :_afg =append (_afg ,MakeNumberResult (_gdg .ValueNumber +_fcd .ValueNumber ));case BinOpTypeMinus :_afg =append (_afg ,MakeNumberResult (_gdg .ValueNumber -_fcd .ValueNumber ));case BinOpTypeMult :_afg =append (_afg ,MakeNumberResult (_gdg .ValueNumber *_fcd .ValueNumber ));
case BinOpTypeDiv :if _fcd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_afg =append (_afg ,MakeNumberResult (_gdg .ValueNumber /_fcd .ValueNumber ));case BinOpTypeExp :_afg =append (_afg ,MakeNumberResult (_eff .Pow (_gdg .ValueNumber ,_fcd .ValueNumber )));
case BinOpTypeLT :_afg =append (_afg ,MakeBoolResult (_gdg .ValueNumber < _fcd .ValueNumber ));case BinOpTypeGT :_afg =append (_afg ,MakeBoolResult (_gdg .ValueNumber > _fcd .ValueNumber ));case BinOpTypeEQ :_afg =append (_afg ,MakeBoolResult (_gdg .ValueNumber ==_fcd .ValueNumber ));
case BinOpTypeLEQ :_afg =append (_afg ,MakeBoolResult (_gdg .ValueNumber <=_fcd .ValueNumber ));case BinOpTypeGEQ :_afg =append (_afg ,MakeBoolResult (_gdg .ValueNumber >=_fcd .ValueNumber ));case BinOpTypeNE :_afg =append (_afg ,MakeBoolResult (_gdg .ValueNumber !=_fcd .ValueNumber ));
default:return MakeErrorResult (_ef .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_bb ));};};return MakeListResult (_afg );};func (_edegg tokenType )String ()string {return _ebagc (int (_edegg ))};


// Eval evaluates and returns the result of a function call.
func (_ccdce FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_decd :=LookupFunction (_ccdce ._fdaad );if _decd !=nil {_bgcd :=make ([]Result ,len (_ccdce ._ebfcg ));for _bdfc ,_acbg :=range _ccdce ._ebfcg {_bgcd [_bdfc ]=_acbg .Eval (ctx ,ev );_bgcd [_bdfc ].Ref =_acbg .Reference (ctx ,ev );
};if _ ,_gdgd :=_ggddf [_ccdce ._fdaad ];!_gdgd {if _cbbb ,_ccag :=_ggag (_bgcd );_cbbb {return _ccag ;};};return _decd (_bgcd );};_caeba :=LookupFunctionComplex (_ccdce ._fdaad );if _caeba !=nil {_cfbec :=make ([]Result ,len (_ccdce ._ebfcg ));for _gfce ,_aefe :=range _ccdce ._ebfcg {_cfbec [_gfce ]=_aefe .Eval (ctx ,ev );
_cfbec [_gfce ].Ref =_aefe .Reference (ctx ,ev );};if _ ,_cfcff :=_ggddf [_ccdce ._fdaad ];!_cfcff {if _cgae ,_aada :=_ggag (_cfbec );_cgae {return _aada ;};};return _caeba (ctx ,ev ,_cfbec );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_ccdce ._fdaad );
};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_ceda ,_efeb :=_gbdg (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _efeb .Type ==ResultTypeError {return _efeb ;};_gaaf :=_ceda ._afbf ;_fbfc :=_ceda ._ccac ;_ebca :=_ceda ._bgdf ;_geb :=_ceda ._agac ;_ccgdc :=_ceda ._faea ;
_fcggb :=_ceda ._ddf ;_aabbc :=_gaeg (_gaaf ,_fbfc ,_ebca ,0,_fcggb );_faa :=0.0;if _geb ==1{if _fcggb ==0{_faa =-_ebca ;_geb ++;};};for _gaec :=_geb ;_gaec <=_ccgdc ;_gaec ++{if _fcggb ==1{_faa +=_bbgga (_gaaf ,_gaec -2,_aabbc ,_ebca ,1)-_aabbc ;}else {_faa +=_bbgga (_gaaf ,_gaec -1,_aabbc ,_ebca ,0);
};};_faa *=_gaaf ;return MakeNumberResult (_faa );};type amorArgs struct{_dgcg float64 ;_aga float64 ;_cdeb float64 ;_bddf float64 ;_aec int ;_eeeg float64 ;_aacf int ;};

// IsBool returns false for the invalid reference context.
func (_ggec *ivr )IsBool (cellRef string )bool {return false };

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_dgggb :=len (args );if _dgggb < 2||_dgggb > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ggebg :=args [0];if _ggebg .Type !=ResultTypeArray &&_ggebg .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_bdag :=args [1].AsNumber ();if _bdag .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_fagdc :=int (_bdag .ValueNumber )-1;_eagc :=-1;if _dgggb ==3&&args [2].Type !=ResultTypeEmpty {_caeb :=args [2].AsNumber ();if _caeb .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_eagc =int (_caeb .ValueNumber )-1;};if _fagdc ==-1&&_eagc ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};var _ebdc []Result ;if _ggebg .Type ==ResultTypeArray {_fdfb :=_ggebg .ValueArray ;if _fagdc < -1||_fagdc >=len (_fdfb ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _fagdc ==-1{if _eagc >=len (_fdfb [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_ddcb :=[][]Result {};for _ ,_eabfd :=range _fdfb {_babcg :=_eabfd [_eagc ];
if _babcg .Type ==ResultTypeEmpty {_babcg =MakeNumberResult (0);};_ddcb =append (_ddcb ,[]Result {_babcg });};return MakeArrayResult (_ddcb );};_ebdc =_fdfb [_fagdc ];}else {_gfec :=_ggebg .ValueList ;if _fagdc < -1||_fagdc >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _fagdc ==-1{if _eagc >=len (_gfec ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_gfac :=_gfec [_eagc ];if _gfac .Type ==ResultTypeEmpty {_gfac =MakeNumberResult (0);
};return _gfac ;};_ebdc =_gfec ;};if _eagc < -1||_eagc > len (_ebdc ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _eagc ==-1{_beda :=[]Result {};
for _ ,_caag :=range _ebdc {if _caag .Type ==ResultTypeEmpty {_beda =append (_beda ,MakeNumberResult (0));}else {_beda =append (_beda ,_caag );};};return MakeArrayResult ([][]Result {_beda });};_bffe :=_ebdc [_eagc ];if _bffe .Type ==ResultTypeEmpty {return MakeNumberResult (0);
};return _bffe ;};func _ggff (_acbe ,_aggb float64 ,_bddb int )(float64 ,Result ){_bgb ,_deec :=_fa (_acbe ),_fa (_aggb );_gfd :=_bgb .Unix ();_daf :=_deec .Unix ();if _gfd ==_daf {return 0,_bgg ;};_eecd ,_ddeff ,_bffc :=_bgb .Date ();_cde ,_fab ,_fabb :=_deec .Date ();
_eegd ,_fbad :=int (_ddeff ),int (_fab );var _dff ,_adcg float64 ;switch _bddb {case 0:if _bffc ==31{_bffc --;};if _bffc ==30&&_fabb ==31{_fabb --;}else if _cggg :=_eefe (_eecd );_eegd ==2&&((_cggg &&_bffc ==29)||(!_cggg &&_bffc ==28)){_bffc =30;if _afge :=_eefe (_cde );
_fbad ==2&&((_afge &&_fabb ==29)||(!_afge &&_fabb ==28)){_fabb =30;};};_dff =float64 ((_cde -_eecd )*360+(_fbad -_eegd )*30+(_fabb -_bffc ));_adcg =360;case 1:_dff =_aggb -_acbe ;_cfb :=_eecd !=_cde ;if _cfb &&(_cde !=_eecd +1||_eegd < _fbad ||(_eegd ==_fbad &&_bffc < _fabb )){_gdd :=0;
for _bfe :=_eecd ;_bfe <=_cde ;_bfe ++{_gdd +=_abba (_bfe ,1);};_adcg =float64 (_gdd )/float64 (_cde -_eecd +1);}else {if !_cfb &&_eefe (_eecd ){_adcg =366;}else {if _cfb &&((_eefe (_eecd )&&(_eegd < 2||(_eegd ==2&&_bffc <=29)))||(_eefe (_cde )&&(_fbad > 2||(_fbad ==2&&_fabb ==29)))){_adcg =366;
}else {_adcg =365;};};};case 2:_dff =_aggb -_acbe ;_adcg =360;case 3:_dff =_aggb -_acbe ;_adcg =365;case 4:if _bffc ==31{_bffc --;};if _fabb ==31{_fabb --;};_dff =float64 ((_cde -_eecd )*360+(_fbad -_eegd )*30+(_fabb -_bffc ));_adcg =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");
};return _dff /_adcg ,_bgg ;};const _ccab ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ccc :=_cb .Now ();_ ,_cdg :=_ccc .Zone ();_cega :=_acg (_gg ,_ccc .Unix ()+int64 (_cdg ))+1;return MakeNumberResult (_cega );};type ivr struct{};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_bfaa ,_fdged ,_cacff Expression };var _ddff =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_fadc :=args [0];if _fadc .Type ==ResultTypeError {return _fadc ;
};if _fadc .Type !=ResultTypeString &&_fadc .Type !=ResultTypeNumber &&_fadc .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_dcfdg :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_eegaf :=int (args [1].ValueNumber );if _eegaf < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_eegaa :=int (args [2].ValueNumber );if _eegaa < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_febeg :=len (_dcfdg );if _eegaf > _febeg {return MakeStringResult ("");};_eegaf --;_gfeg :=_eegaf +_eegaa ;if _gfeg > _febeg {return MakeStringResult (_dcfdg [_eegaf :]);}else {return MakeStringResult (_dcfdg [_eegaf :_gfeg ]);};};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_gac :=args [1].ValueNumber ;_bdg :=args [0];var _gbgc float64 ;switch _bdg .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
case ResultTypeNumber :_gbgc =_bdg .ValueNumber ;case ResultTypeString :_ffab :=DateValue ([]Result {args [0]});if _ffab .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_gbgc =_ffab .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_ccb :=_fa (_gbgc );_gea :=_ccb .AddDate (0,int (_gac ),0);
_afeaa ,_bge ,_gdeb :=_gea .Date ();_cdbd :=_dbd (_afeaa ,int (_bge ),_gdeb );if _cdbd < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};return MakeNumberResult (_cdbd );};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_cdda *ivr )GetLabelPrefix (cellRef string )string {return ""};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_gbafb :=len (args );if _gbafb !=6&&_gbafb !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ebccg ,_afed ,_aaag :=_cafe (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _aaag .Type ==ResultTypeError {return _aaag ;};_cbdb :=args [2];if _cbdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dbbg :=_cbdb .ValueNumber ;if _dbbg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_dedd :=args [3];if _dedd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_caef :=_dedd .ValueNumber ;if _caef <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_cfgdd :=args [4];if _cfgdd .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_bagfg :=_cfgdd .ValueNumber ;if _bagfg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_ceed :=args [5];
if _ceed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bbea :=float64 (int (_ceed .ValueNumber ));if !_dbed (_bbea ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_fcaae :=0;if _gbafb ==7&&args [6].Type !=ResultTypeEmpty {_ggfa :=args [6];
if _ggfa .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_fcaae =int (_ggfa .ValueNumber );
if !_eegdf (_fcaae ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_fdag :=0.0;
_cbdga :=0.0;_dfgb :=1.0;_fcda ,_aaag :=_cdgd (_ebccg ,_afed ,_dbbg ,_cbdga ,_bagfg ,_bbea ,_fcaae );if _aaag .Type ==ResultTypeError {return _aaag ;};_cacc ,_aaag :=_cdgd (_ebccg ,_afed ,_dbbg ,_dfgb ,_bagfg ,_bbea ,_fcaae );if _aaag .Type ==ResultTypeError {return _aaag ;
};_gfeba :=(_dfgb -_cbdga )*0.5;for _dcdb :=0;_dcdb < 100&&_fdag !=_caef ;_dcdb ++{_fdag ,_aaag =_cdgd (_ebccg ,_afed ,_dbbg ,_gfeba ,_bagfg ,_bbea ,_fcaae );if _aaag .Type ==ResultTypeError {return _aaag ;};if _caef ==_fcda {return MakeNumberResult (_cbdga );
}else if _caef ==_cacc {return MakeNumberResult (_dfgb );}else if _caef ==_fdag {return MakeNumberResult (_gfeba );}else if _caef < _cacc {_dfgb *=2.0;_cacc ,_aaag =_cdgd (_ebccg ,_afed ,_dbbg ,_dfgb ,_bagfg ,_bbea ,_fcaae );if _aaag .Type ==ResultTypeError {return _aaag ;
};_gfeba =(_dfgb -_cbdga )*0.5;}else {if _caef < _fdag {_cbdga =_gfeba ;_fcda =_fdag ;}else {_dfgb =_gfeba ;_cacc =_fdag ;};_gfeba =_dfgb -(_dfgb -_cbdga )*((_caef -_cacc )/(_fcda -_cacc ));};};return MakeNumberResult (_gfeba );};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_ggac :=args [0];if _ggac .Type ==ResultTypeList {_fgce :=[][]Result {};for _ ,_fegda :=range _ggac .ValueList {_fgce =append (_fgce ,[]Result {_fegda });};return MakeArrayResult (_fgce );};_bbaeg :=make ([][]Result ,len (_ggac .ValueArray [0]));for _ ,_dega :=range _ggac .ValueArray {for _dgfc ,_afgc :=range _dega {_bbaeg [_dgfc ]=append (_bbaeg [_dgfc ],_afgc );
};};return MakeArrayResult (_bbaeg );};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bedd :=args [0].AsNumber ();_gdcf :=args [1].AsNumber ();if _bedd .Type !=ResultTypeNumber ||_gdcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_abece :=_eff .Trunc (_bedd .ValueNumber );_deeg :=_eff .Trunc (_gdcf .ValueNumber );if _abece < _deeg {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");
};if _abece ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_abece +_deeg -1);args [1]=MakeNumberResult (_abece -1);return Combin (args );};

// Value returns a string version of the result.
func (_gbbag Result )Value ()string {switch _gbbag .Type {case ResultTypeNumber :_acgff :=_ead .FormatFloat (_gbbag .ValueNumber ,'f',-1,64);if len (_acgff )> 12{_geccg :=12;for _gdeae :=_geccg ;_gdeae > 0&&_acgff [_gdeae ]=='0';_gdeae --{_geccg --;};_acgff =_acgff [0:_geccg +1];
};return _acgff ;case ResultTypeError :return _gbbag .ValueString ;case ResultTypeString :return _gbbag .ValueString ;case ResultTypeList :if len (_gbbag .ValueList )==0{return "";};return _gbbag .ValueList [0].Value ();case ResultTypeArray :if len (_gbbag .ValueArray )==0||len (_gbbag .ValueArray [0])==0{return "";
};return _gbbag .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_gcgd :=len (args );if _gcgd !=4&&_gcgd !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dcec ,_gfad ,_ada :=_cafe (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _ada .Type ==ResultTypeError {return _ada ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_gcbae :=args [2].ValueNumber ;if _gcbae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_gca :=args [3].ValueNumber ;if _gca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};_egfgb :=0;if _gcgd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_egfgb =int (args [4].ValueNumber );if !_eegdf (_egfgb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");
};};_ffaaf ,_ada :=_ggff (_dcec ,_gfad ,_egfgb );if _ada .Type ==ResultTypeError {return _ada ;};return MakeNumberResult ((_gca -_gcbae )/_gcbae /_ffaaf );};func _cbdfa (_egdff _cb .Time )bool {return _cb .Now ().Sub (_egdff )>=_ceddf };

// GetFormat returns an empty string for the invalid reference context.
func (_cgce *ivr )GetFormat (cellRef string )string {return ""};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );
RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );
RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );
RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );
RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );
RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};const _cefgg =57373;var _aade ,_gfbg ,_daega ,_babg ,_gacc ,_bgaa ,_deef ,_faeg ,_gee ,_bffd ,_abfd ,_gacf ,_cgaa ,_bcgg ,_bcad *_f .Regexp ;
func _faba (_bfcbc [][]Result )float64 {if len (_bfcbc )==2{_fbcga :=_bfcbc [0][0].AsNumber ();_bgfg :=_bfcbc [0][1].AsNumber ();_fbff :=_bfcbc [1][0].AsNumber ();_bbbb :=_bfcbc [1][1].AsNumber ();if _fbcga .Type !=ResultTypeNumber ||_bgfg .Type !=ResultTypeNumber ||_fbff .Type !=ResultTypeNumber ||_bbbb .Type !=ResultTypeNumber {return _eff .NaN ();
};return _fbcga .ValueNumber *_bbbb .ValueNumber -_fbff .ValueNumber *_bgfg .ValueNumber ;};_aaead :=float64 (0);_gbed :=float64 (1);for _ebadf :=range _bfcbc {_aaead +=_gbed *_bfcbc [0][_ebadf ].ValueNumber *_faba (_gbce (_bfcbc ,_ebadf ));_gbed *=-1;
};return _aaead ;};func _egb (_bg BinOpType ,_fd ,_af [][]Result )Result {_dbg :=[][]Result {};for _fge :=range _fd {_efg :=_bc (_bg ,_fd [_fge ],_af [_fge ]);if _efg .Type ==ResultTypeError {return _efg ;};_dbg =append (_dbg ,_efg .ValueList );};return MakeArrayResult (_dbg );
};const _fggfd =57371;

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_eae :=len (args );if _eae !=2&&_eae !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_ddece ,_ccbe :=_dege (args [0],args [1],"\u0058\u0049\u0052\u0052");if _ccbe .Type ==ResultTypeError {return _ccbe ;};_bbaae :=_ddece ._egcf ;_gaaed :=_ddece ._feag ;_eced :=0.1;if _eae ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eced =args [2].ValueNumber ;if _eced <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");
};};return _gbcg (_bbaae ,_gaaed ,_eced );};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_eagbe ,_aaff ,_deca :=_cafe (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _deca .Type ==ResultTypeError {return _deca ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfec :=_aaff -_eagbe ;if _dfec > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_dgge :=args [2].ValueNumber ;if _dgge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (100*(1-_dgge *_dfec /360));};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_eage Context ,formula string )Result ;SetCache (_cggb string ,_bbg Result );GetFromCache (_gde string )(Result ,bool );LastEvalIsRef ()bool ;};var _ceeae =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};func _dbd (_gbea ,_fga ,_baea int )float64 {return float64 (_gage (_gbea ,_cb .Month (_fga ),_baea )/86400)+_abb ;
};const _fgdd =57365;

// Eval evaluates and returns a string.
func (_cbgdg String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_cbgdg ._dffec )};func (_ebgdg *noCache )SetCache (key string ,value Result ){};

// Update returns the same object as updating sheet references does not affect Number.
func (_bgdcg Number )Update (q *_cg .UpdateQuery )Expression {return _bgdcg };

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_da :=args [0];switch _da .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_ggfg :=_fa (_da .ValueNumber );return MakeNumberResult (float64 (_ggfg .Day ()));case ResultTypeString :_dae :=_ea .ToLower (_da .ValueString );if !_gge (_dae ){_ ,_ ,_ ,_ ,_gbeb ,_afa :=_beb (_dae );if _afa .Type ==ResultTypeError {_afa .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";
return _afa ;};if _gbeb {return MakeNumberResult (0);};};_ ,_ ,_ecf ,_ ,_dcbf :=_efa (_dae );if _dcbf .Type ==ResultTypeError {return _dcbf ;};return MakeNumberResult (float64 (_ecf ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");
};};var _bdff =[...]string {};

// String returns a string representation of SheetPrefixExpr.
func (_fdbe SheetPrefixExpr )String ()string {return _fdbe ._ceadg };var _fecag =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};const _ddecg =57346;

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_acab EmptyExpr )Update (q *_cg .UpdateQuery )Expression {return _acab };

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbbg :=args [0].AsNumber ();if _bbbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_eff .Pi /180.0*_bbbg .ValueNumber );};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_cdge :=len (args );if _cdge < 3||_cdge > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ddb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebcege :=args [1].ValueNumber ;if _ebcege ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ffff :=args [2].ValueNumber ;_fbcg :=0.0;if _cdge >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbcg =args [3].ValueNumber ;};_babe :=0.0;if _cdge ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_babe =args [4].ValueNumber ;if _babe !=0{_babe =1;};};var _fcee float64 ;if _ddb ==0{_fcee =(_ffff +_fbcg )/_ebcege ;}else {_adgc :=_eff .Pow (1+_ddb ,_ebcege );if _babe ==1{_fcee =(_fbcg *_ddb /(_adgc -1)+_ffff *_ddb /(1-1/_adgc ))/(1+_ddb );}else {_fcee =_fbcg *_ddb /(_adgc -1)+_ffff *_ddb /(1-1/_adgc );
};};return MakeNumberResult (-_fcee );};func _adc (_beg ,_gdf ,_cfc int )bool {if _gdf < 1||_gdf > 12{return false ;};if _cfc < 1{return false ;};return _cfc <=_gccc (_beg ,_gdf );};func _bcca (_affg []Result )Result {_abcd :=_affg [0].ValueList ;_bccgc :=len (_abcd );
switch len (_affg ){case 1:_cafc :=[]Result {};for _ ,_faedb :=range _abcd {_cafc =append (_cafc ,MakeBoolResult (_faedb .ValueNumber !=0));};return MakeListResult (_cafc );case 2:_gacce :=_affg [1];switch _gacce .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_eccd :=[]Result {};
for _ ,_efga :=range _abcd {var _edcfd Result ;if _efga .ValueNumber ==0{_edcfd =MakeBoolResult (false );}else {_edcfd =_gacce ;};_eccd =append (_eccd ,_edcfd );};return MakeListResult (_eccd );case ResultTypeList :_cgefc :=_dceb (_gacce ,_bccgc );_ebfeg :=[]Result {};
for _geaag ,_efgbe :=range _abcd {var _gcgae Result ;if _efgbe .ValueNumber ==0{_gcgae =MakeBoolResult (false );}else {_gcgae =_cgefc [_geaag ];};_ebfeg =append (_ebfeg ,_gcgae );};return MakeListResult (_ebfeg );case ResultTypeArray :_cegba :=_dddb (_gacce ,len (_gacce .ValueArray ),_bccgc );
_agbd :=[][]Result {};for _ ,_caecd :=range _cegba {_baggf :=[]Result {};for _bffcd ,_gcbe :=range _abcd {var _efdf Result ;if _gcbe .ValueNumber ==0{_efdf =MakeBoolResult (false );}else {_efdf =_caecd [_bffcd ];};_baggf =append (_baggf ,_efdf );};_agbd =append (_agbd ,_baggf );
};return MakeArrayResult (_agbd );};case 3:_eeedg :=_affg [1];_edefa :=_affg [2];_eebc :=_egcfg (_eeedg );_fefc :=_egcfg (_edefa );if _eebc &&_fefc {_gedbb :=[]Result {};for _ ,_afgd :=range _abcd {var _gdcg Result ;if _afgd .ValueNumber ==0{_gdcg =_edefa ;
}else {_gdcg =_eeedg ;};_gedbb =append (_gedbb ,_gdcg );};return MakeListResult (_gedbb );};if _eeedg .Type !=ResultTypeArray &&_edefa .Type !=ResultTypeArray {_fgaga :=_dceb (_eeedg ,_bccgc );_gcea :=_dceb (_edefa ,_bccgc );_cdfc :=[]Result {};for _dfed ,_defe :=range _abcd {var _dffe Result ;
if _defe .ValueNumber ==0{_dffe =_gcea [_dfed ];}else {_dffe =_fgaga [_dfed ];};_cdfc =append (_cdfc ,_dffe );};return MakeListResult (_cdfc );};_daca ,_fbef :=len (_eeedg .ValueArray ),len (_edefa .ValueArray );_bebc ,_dcefa :=_daca ,_fbef ;if _fbef > _bebc {_bebc ,_dcefa =_dcefa ,_bebc ;
};_effe :=_dddb (_eeedg ,_bebc ,_bccgc );_gbdd :=_dddb (_edefa ,_bebc ,_bccgc );_dbda :=[][]Result {};for _effbe :=0;_effbe < _bebc ;_effbe ++{_gegb :=[]Result {};for _agee ,_deeea :=range _abcd {var _beebc Result ;if _deeea .ValueNumber ==0{if _effbe < _fbef {_beebc =_gbdd [_effbe ][_agee ];
}else {_beebc =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _effbe < _daca {_beebc =_effe [_effbe ][_agee ];}else {_beebc =MakeErrorResultType (ErrorTypeNA ,"");};};_gegb =append (_gegb ,_beebc );};_dbda =append (_dbda ,_gegb );};return MakeArrayResult (_dbda );
};return MakeErrorResult ("");};func LexReader (r _a .Reader )chan *node {_abgb :=NewLexer ();go _abgb .lex (r );return _abgb ._fcggd };

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fdda ,_faedg ,_dbfc :=_cafe (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _dbfc .Type ==ResultTypeError {return _dbfc ;};_beea ,_dbfc :=_eaa (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _dbfc .Type ==ResultTypeError {return _dbfc ;};if _beea >=_fdda {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};_dcdc :=args [3];if _dcdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_daab :=_dcdc .ValueNumber ;if _daab < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_bffga :=args [4];if _bffga .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_accb :=_bffga .ValueNumber ;if _accb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_cbgb :=args [5];
if _cbgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_gdda :=_cbgb .ValueNumber ;if _gdda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_ffdb :=args [6];
if _ffdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eagga :=float64 (int (_ffdb .ValueNumber ));if !_dbed (_eagga ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bbdce :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_feca :=args [7];
if _feca .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bbdce =int (_feca .ValueNumber );if !_eegdf (_bbdce ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");
};};_agcc ,_dbfc :=_ggff (_beea ,_faedg ,_bbdce );if _dbfc .Type ==ResultTypeError {return _dbfc ;};_agcc *=_eagga ;_acdfa ,_dbfc :=_ggff (_fdda ,_faedg ,_bbdce );if _dbfc .Type ==ResultTypeError {return _dbfc ;};_acdfa *=_eagga ;_dbcb ,_dbfc :=_ggff (_beea ,_fdda ,_bbdce );
if _dbfc .Type ==ResultTypeError {return _dbfc ;};_dbcb *=_eagga ;_cgde :=_gdda +_agcc *100*_daab /_eagga ;_cgde /=_acdfa *_accb /_eagga +1;_cgde -=_dbcb *100*_daab /_eagga ;return MakeNumberResult (_cgde );};func _aebg (_ecbda ,_cgbc Expression )(Expression ,Expression ,error ){_abbfg ,_afdab :=_ecbda .(CellRef );
if !_afdab {return nil ,nil ,_d .New (_ef .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_ecbda .String ()));};_cfadd ,_afdab :=_cgbc .(CellRef );if !_afdab {return nil ,nil ,_d .New (_ef .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_cgbc .String ()));
};_ffag ,_acacb :=_ab .ParseCellReference (_abbfg ._eeb );if _acacb !=nil {return nil ,nil ,_acacb ;};_fbfdf ,_gdecb :=_ab .ParseCellReference (_cfadd ._eeb );if _gdecb !=nil {return nil ,nil ,_gdecb ;};_eecdef :=false ;if _ffag .RowIdx > _fbfdf .RowIdx {_eecdef =true ;
_ffag .RowIdx ,_fbfdf .RowIdx =_fbfdf .RowIdx ,_ffag .RowIdx ;};if _ffag .ColumnIdx > _fbfdf .ColumnIdx {_eecdef =true ;_ffag .ColumnIdx ,_fbfdf .ColumnIdx =_fbfdf .ColumnIdx ,_ffag .ColumnIdx ;_ffag .Column ,_fbfdf .Column =_fbfdf .Column ,_ffag .Column ;
};if _eecdef {return NewCellRef (_ffag .String ()),NewCellRef (_fbfdf .String ()),nil ;};return _ecbda ,_cgbc ,nil ;};func _acfc (_abgee []string ,_gagc int )string {return _ead .Itoa (len (_abgee [len (_abgee )-1-_gagc ]))};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_acbf :=_ddba (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _acbf .Type !=ResultTypeEmpty {return _acbf ;};_adebc :=_ffef (args [1:]);_deaa :=-_eff .MaxFloat64 ;_gedfe :=_bfacf (args [0]);for _ ,_fbgd :=range _adebc {_ecgdf :=_gedfe [_fbgd ._bageg ][_fbgd ._gdfc ].ValueNumber ;
if _deaa < _ecgdf {_deaa =_ecgdf ;};};if _deaa ==-_eff .MaxFloat64 {_deaa =0;};return MakeNumberResult (float64 (_deaa ));};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_ffa :=_ea .ToLower (args [0].ValueString );if !_gge (_ffa ){_ ,_ ,_ ,_ ,_fdcc ,_cegb :=_beb (_ffa );if _cegb .Type ==ResultTypeError {_cegb .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";
return _cegb ;};if _fdcc {return MakeNumberResult (0);};};_bbgg ,_gba ,_aaea ,_ ,_eea :=_efa (_ffa );if _eea .Type ==ResultTypeError {return _eea ;};return MakeNumberResult (_dbd (_bbgg ,_gba ,_aaea ));};func _dege (_abeb ,_ededg Result ,_aagd string )(*xargs ,Result ){if _abeb .Type !=ResultTypeList &&_abeb .Type !=ResultTypeArray {return nil ,MakeErrorResult (_aagd +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_cdeeg :=_bfacf (_abeb );_gdaa :=[]float64 {};for _ ,_dfcb :=range _cdeeg {for _ ,_baac :=range _dfcb {if _baac .Type ==ResultTypeNumber &&!_baac .IsBoolean {_gdaa =append (_gdaa ,_baac .ValueNumber );}else {return nil ,MakeErrorResult (_aagd +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");
};};};_dgfgg :=len (_gdaa );if len (_gdaa )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _ededg .Type !=ResultTypeList &&_ededg .Type !=ResultTypeArray {return nil ,MakeErrorResult (_aagd +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_fdfd :=_bfacf (_ededg );_cacg :=[]float64 {};_bdbb :=0.0;for _ ,_dcaa :=range _fdfd {for _ ,_gegf :=range _dcaa {if _gegf .Type ==ResultTypeNumber &&!_gegf .IsBoolean {_acaa :=float64 (int (_gegf .ValueNumber ));if _acaa < _bdbb {return nil ,MakeErrorResultType (ErrorTypeNum ,_aagd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");
};_cacg =append (_cacg ,_acaa );_bdbb =_acaa ;}else {return nil ,MakeErrorResult (_aagd +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_cacg )!=_dgfgg {return nil ,MakeErrorResultType (ErrorTypeNum ,"");
};return &xargs {_gdaa ,_cacg },MakeEmptyResult ();};

// LastColumn returns empty string for the invalid reference context.
func (_afeb *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};const _fcg =86400000000000;type parsedReplaceObject struct{_gfge string ;_acea int ;_ebabd int ;_abdgb string ;};

// String returns an empty string for Error.
func (_cdb Error )String ()string {return ""};

// Update updates the horizontal range references after removing a row/column.
func (_dgeee HorizontalRange )Update (q *_cg .UpdateQuery )Expression {return _dgeee };

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_fabff :=args [0].AsNumber ();if _fabff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_cfag :=10.0;if len (args )> 1{_eefg :=args [1].AsNumber ();if _eefg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");
};_cfag =args [1].ValueNumber ;};if _fabff .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");
};if _cfag ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");
};return MakeNumberResult (_eff .Log (_fabff .ValueNumber )/_eff .Log (_cfag ));};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_cbcb ,_fcf :=_babc (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _fcf .Type ==ResultTypeError {return _fcf ;};_cddd :=_cbcb ._dgcg ;_cef :=_cbcb ._aga ;_gfgcd :=_cbcb ._cdeb ;_ggad :=_cbcb ._bddf ;
_acca :=_cbcb ._aec ;_gefb :=_cbcb ._eeeg ;_aded :=_cbcb ._aacf ;_fbd ,_cfdc :=_ggff (_cef ,_gfgcd ,_aded );if _cfdc .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");
};_bgfe :=_fbd *_gefb *_cddd ;if _acca ==0{return MakeNumberResult (_bgfe );};_ffcf :=_cddd *_gefb ;_ggbf :=_cddd -_ggad ;_cbbf :=int ((_ggbf -_bgfe )/_ffcf );if _acca <=_cbbf {return MakeNumberResult (_ffcf );}else if _acca ==_cbbf +1{return MakeNumberResult (_ggbf -_ffcf *float64 (_cbbf )-_bgfe );
}else {return MakeNumberResult (0);};};func _ggcac (){_aade =_f .MustCompile ("\u005e\u0030\u002b\u0024");_daega =_f .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");
_babg =_f .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_gfbg =_f .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_gacc =_f .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");
_bgaa =_f .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_deef =_f .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");
_gee =_f .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_bffd =_f .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");
_abfd =_f .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");
_gacf =_f .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");
_cgaa =_f .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_ebdec +_ebdec +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_ebdec +_ebdec +"\u0029\u002b\u0059+\u0024");_bcgg =_f .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_ebdec +_ebdec +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_ebdec +_ebdec +"\u0029\u002b\u0059+\u0024");
_bcad =_f .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_faeg =_f .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");
};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gbbfa :=args [0].AsNumber ();if _gbbfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fecg :=float64 (1);if _gbbfa .ValueNumber < 0{_fecg =-1;};if len (args )> 1{_fddcc :=args [1].AsNumber ();if _fddcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fecg =_eff .Abs (_fddcc .ValueNumber );};if len (args )==1{return MakeNumberResult (_eff .Ceil (_gbbfa .ValueNumber ));};_aaed :=_gbbfa .ValueNumber ;_aaed ,_afedg :=_eff .Modf (_aaed /_fecg );if _afedg !=0{if _gbbfa .ValueNumber > 0{_aaed ++;};};return MakeNumberResult (_aaed *_fecg );
};func (_afe *evCache )GetFromCache (key string )(Result ,bool ){_afe ._gbf .Lock ();_cca ,_dfd :=_afe ._dde [key ];_afe ._gbf .Unlock ();return _cca ,_dfd ;};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_cgccb ,_cfagf :=_agaef (args ,false );if _cfagf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_cgccb /_cfagf );};func _cffg (_eaga ,_bgf _cb .Time ,_fac ,_ggcb int )_cb .Time {_feab :=_bgf ;_bffg :=_eaga .Year ()-_bgf .Year ();_feab =_feab .AddDate (_bffg ,0,0);if _eaga .After (_feab ){_feab =_feab .AddDate (1,0,0);};
_ece :=-12/_fac ;for _feab .After (_eaga ){_feab =_feab .AddDate (0,_ece ,0);};return _feab ;};

// String returns a string representation of a vertical range with prefix.
func (_bcdae PrefixVerticalRange )String ()string {return _ef .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_bcdae ._dagdb .String (),_bcdae ._ccga ,_bcdae ._cabf );};func _gbcg (_fabe ,_dgab []float64 ,_ebbb float64 )Result {_bbcg :=false ;
_fffd :=false ;for _eeee :=0;_eeee < len (_fabe );_eeee ++{if _fabe [_eeee ]> 0{_bbcg =true ;};if _fabe [_eeee ]< 0{_fffd =true ;};};if !_bbcg ||!_fffd {return MakeErrorResultType (ErrorTypeNum ,"");};_bgfc :=_ebbb ;_febe :=1e-10;_fag :=0;_fggf :=50;_ffe :=false ;
for {_bgdfe :=_cccg (_fabe ,_dgab ,_bgfc );_gfc :=_bgfc -_bgdfe /_dbedf (_fabe ,_dgab ,_bgfc );_gfga :=_eff .Abs (_gfc -_bgfc );_bgfc =_gfc ;_fag ++;if _gfga <=_febe ||_eff .Abs (_bgdfe )<=_febe {break ;};if _fag > _fggf {_ffe =true ;break ;};};if _ffe ||_eff .IsNaN (_bgfc )||_eff .IsInf (_bgfc ,0){return MakeErrorResultType (ErrorTypeNum ,"");
};return MakeNumberResult (_bgfc );};

// String returns a string representation of CellRef.
func (_cgg CellRef )String ()string {return _cgg ._eeb };

// Update returns the same object as updating sheet references does not affect named ranges.
func (_eedfd NamedRangeRef )Update (q *_cg .UpdateQuery )Expression {return _eedfd };func (_eaecd ResultType )String ()string {if _eaecd >=ResultType (len (_aggbe )-1){return _ef .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_eaecd );
};return _aefed [_aggbe [_eaecd ]:_aggbe [_eaecd +1]];};

// GetWidth returns 0 for the invalid reference context.
func (_ceada *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_gdaf :v }};var _cdaaa ,_aagde ,_ceaa ,_bgec ,_bdeb ,_dfdf *_f .Regexp ;

// Eval evaluates and returns the result of a sheet expression.
func (_aeee SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");
};

// Update updates references in the VerticalRange after removing a row/column.
func (_fffe VerticalRange )Update (q *_cg .UpdateQuery )Expression {if q .UpdateType ==_cg .UpdateActionRemoveColumn {_cffa :=_fffe ;if q .UpdateCurrentSheet {_cffac :=q .ColumnIdx ;_cffa ._gfcfc =_bbe (_fffe ._gfcfc ,_cffac );_cffa ._cbcge =_bbe (_fffe ._cbcge ,_cffac );
};return _cffa ;};return _fffe ;};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};
_befa :=int (args [0].ValueNumber );return MakeBoolResult (_befa ==_befa /2*2);};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _ecga ,_afea float64 ;switch args [0].Type {case ResultTypeNumber :_afea =args [0].ValueNumber ;
case ResultTypeString :_beff :=DateValue ([]Result {args [0]});if _beff .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");
};_afea =_beff .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_ecga =args [1].ValueNumber ;
if _ecga < 62&&_afea >=62{_ecga --;};case ResultTypeString :_bee :=DateValue ([]Result {args [1]});if _bee .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");
};_ecga =_bee .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_dgd :=float64 (int (_afea -_ecga ));return MakeNumberResult (_dgd );
};var _edefg =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_adgf :=args [0].AsNumber ();
_dddd :=args [1].AsNumber ();if _adgf .Type ==ResultTypeNumber &&_dddd .Type ==ResultTypeNumber {_ebdeg :=_eff .Atan2 (_dddd .ValueNumber ,_adgf .ValueNumber );if _ebdeg !=_ebdeg {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");
};return MakeNumberResult (_ebdeg );};for _ ,_ceagc :=range []ResultType {_adgf .Type ,_dddd .Type }{switch _ceagc {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
case ResultTypeError :return _adgf ;default:return MakeErrorResult (_ef .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ceagc ));
};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_ccgc :=args [0].ValueNumber ;if _ccgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};_efba :=float64 (int (args [1].ValueNumber ));if _efba < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult ((_eff .Pow (_ccgc +1,1/_efba )-1)*_efba );};func _efgg (_ebad string )bool {for _ ,_agbg :=range _efcd {_eded :=_agbg .FindStringSubmatch (_ebad );if len (_eded )> 1{return true ;};};return false ;};func _ecfg (_dfcg Context ,_ggagd ,_bcdde string )(string ,string ){_bfeb :=_ggagd +"\u0031";
_ccddc :=_dfcg .LastRow (_ggagd );_afedf :=_bcdde +_ead .Itoa (_ccddc );return _bfeb ,_afedf ;};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_cbgg .Lock ();defer _cbgg .Unlock ();if _ ,_ccdbg :=_aefga [name ];_ccdbg {_bf .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_aefga [name ]=fn ;};func (_gcgac *noCache )GetFromCache (key string )(Result ,bool ){return _bgg ,false };

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_gbffg PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_gcaec :=_gbffg ._dagdb .Reference (ctx ,ev );switch _gcaec .Type {case ReferenceTypeSheet :if _effg (_gcaec ,ctx ){return MakeErrorResultType (ErrorTypeName ,_ef .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_gcaec .Value ));
};_aaga :=_gbffg .verticalRangeReference (_gcaec .Value );if _accadc ,_afcc :=ev .GetFromCache (_aaga );_afcc {return _accadc ;};_ffbab :=ctx .Sheet (_gcaec .Value );_aegge ,_fagb :=_ecfg (_ffbab ,_gbffg ._ccga ,_gbffg ._cabf );_feeba :=_ebcab (_ffbab ,ev ,_aegge ,_fagb );
ev .SetCache (_aaga ,_feeba );return _feeba ;default:return MakeErrorResult (_ef .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gcaec .Type ));
};};func (_afgdd *plex )Lex (lval *yySymType )int {_dcfe =true ;_ebdfe :=<-_afgdd ._acbd ;if _ebdfe !=nil {lval ._fbgdc =_ebdfe ;return int (lval ._fbgdc ._badde );};return 0;};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_gdaf string };func (_fgcd PrefixVerticalRange )verticalRangeReference (_agde string )string {return _ef .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_agde ,_fgcd ._ccga ,_fgcd ._cabf );};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_abca ,_gfbbc ,_fgbe :=_aebg (from ,to );if _fgbe !=nil {_bf .Log .Debug (_fgbe .Error ());return NewError (_fgbe .Error ());};return Range {_bfbcd :_abca ,_agfcf :_gfbbc };};const _bbcca =57349;type yyLexer interface{Lex (_cafad *yySymType )int ;
Error (_dgee string );};func _afdb (_cgd ,_dfg ,_abc ,_cffe ,_fcbd float64 ,_ffaa int )Result {_ecfb ,_fde :=_ggff (_cgd ,_dfg ,_ffaa );if _fde .Type ==ResultTypeError {return _fde ;};_aeafa ,_degg :=_bdb (_cgd ,_dfg ,int (_fcbd ),_ffaa );if _degg .Type ==ResultTypeError {return _degg ;
};_gedg :=0.0;_adcge :=0.0;_abc *=100/_fcbd ;_cffe /=_fcbd ;_cffe ++;_efcf :=_ecfb *_fcbd -_aeafa ;for _fdaa :=1.0;_fdaa < _aeafa ;_fdaa ++{_fdaag :=_fdaa +_efcf ;_fbga :=_abc /_eff .Pow (_cffe ,_fdaag );_adcge +=_fbga ;_gedg +=_fdaag *_fbga ;};_eccfg :=(_abc +100)/_eff .Pow (_cffe ,_aeafa +_efcf );
_adcge +=_eccfg ;_gedg +=(_aeafa +_efcf )*_eccfg ;_gedg /=_adcge ;_gedg /=_fcbd ;return MakeNumberResult (_gedg );};func _daec (_abf ,_cfd ,_cdad float64 )float64 {return (_abf *3600+_cfd *60+_cdad )/86400};

// String returns a string representation for Bool.
func (_cbc Bool )String ()string {if _cbc ._eadc {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};var _abb float64 =25569.0;func _effg (_fcefa Reference ,_fffbb Context )bool {return _fffbb .Sheet (_fcefa .Value )==InvalidReferenceContext ;
};const (_gbbg rmode =iota ;_dbaf ;_fabee ;);

// BinaryExpr is a binary expression.
type BinaryExpr struct{_db ,_aae Expression ;_ge BinOpType ;};func (_aaad *yyParserImpl )Lookahead ()int {return _aaad ._fdfc };

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_eebg :=args [0].ValueNumber ;if _eebg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};_egae ,_fbfd :=_dege (args [1],args [2],"\u0058\u004e\u0050\u0056");if _fbfd .Type ==ResultTypeError {return _fbfd ;};_efacg :=_egae ._egcf ;_gdebc :=_egae ._feag ;_dfeg :=0.0;_aaec :=_gdebc [0];for _eeea ,_bbdg :=range _efacg {_dfeg +=_bbdg /_eff .Pow (1+_eebg ,(_gdebc [_eeea ]-_aaec )/365);
};return MakeNumberResult (_dfeg );};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bdgg :=args [0].AsNumber ();
if _bdgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bgcfg :=args [1].AsNumber ();if _bgcfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fcfd :=int (_bgcfg .ValueNumber );if _fcfd < 0||_fcfd > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");
};_dcbg :=0;if len (args )> 2{_ddca :=args [2].AsNumber ();if _ddca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dcbg =int (_ddca .ValueNumber );};_abgeb :=_ead .FormatInt (int64 (_bdgg .ValueNumber ),_fcfd );if len (_abgeb )< _dcbg {_abgeb =_ea .Repeat ("\u0030",_dcbg -len (_abgeb ))+_abgeb ;};return MakeStringResult (_abgeb );};

// Reference returns a string reference value to a sheet.
func (_cccd SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_cccd ._ceadg };};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// Eval evaluates and returns the result of a Negate expression.
func (_aecdc Negate )Eval (ctx Context ,ev Evaluator )Result {_ggeba :=_aecdc ._fdcf .Eval (ctx ,ev );if _ggeba .Type ==ResultTypeNumber {return MakeNumberResult (-_ggeba .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_ed ,_aagc :=_ead .ParseBool (v );if _aagc !=nil {_bf .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_aagc );
};return Bool {_eadc :_ed };};var _dabga []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};const _ebfg =57347;func _cga (_ceba float64 )float64 {return float64 (int (_ceba +0.5))};
func _dcbcfc (_abefg []Result ,_abdbe bool )Result {_bdgdg :="\u004d\u0049\u004e";if _abdbe {_bdgdg ="\u004d\u0049\u004e\u0041";};if len (_abefg )==0{return MakeErrorResult (_bdgdg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_febgf :=_eff .MaxFloat64 ;for _ ,_edace :=range _abefg {switch _edace .Type {case ResultTypeNumber :if (_abdbe ||!_edace .IsBoolean )&&_edace .ValueNumber < _febgf {_febgf =_edace .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_dbdd :=_dcbcfc (_edace .ListValues (),_abdbe );
if _dbdd .ValueNumber < _febgf {_febgf =_dbdd .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_geacga :=0.0;if _abdbe {_geacga =_edace .AsNumber ().ValueNumber ;};if _geacga < _febgf {_febgf =_geacga ;};default:_bf .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_bdgdg +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_edace .Type );
};};if _febgf ==_eff .MaxFloat64 {_febgf =0;};return MakeNumberResult (_febgf );};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dgdd :=args [0].AsString ();if _dgdd .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dfabf :=_eg .Buffer {};_cedb :=false ;for _ ,_bbgaf :=range _dgdd .ValueString {if !_cedb &&_dd .IsLetter (_bbgaf ){_dfabf .WriteRune (_dd .ToUpper (_bbgaf ));}else {_dfabf .WriteRune (_dd .ToLower (_bbgaf ));};_cedb =_dd .IsLetter (_bbgaf );};return MakeStringResult (_dfabf .String ());
};func _bfefg (_gcbg ,_fbda float64 )bool {return _eff .Abs (_gcbg -_fbda )< 1.0e-6};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_efaa :=args [0].AsNumber ();if _efaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _efaa .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_cgeb :=float64 (1);_fbbf :=_eff .Trunc (_efaa .ValueNumber );for _daga :=_fbbf ;_daga > 1;_daga -=2{_cgeb *=_daga ;};return MakeNumberResult (_cgeb );};func _gccc (_bdd ,_bec int )int {if _bec ==2&&_eefe (_bdd ){return 29;}else {return _fgg [_bec -1];
};};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_fbfg ,_bfbc :=_daefc ("\u0046\u0049\u004e\u0044",args );if _bfbc .Type !=ResultTypeEmpty {return _bfbc ;};_befed :=_fbfg ._bgga ;if _befed ==""{return MakeNumberResult (1.0);
};_gdea :=_fbfg ._bbaegg ;_cagg :=_fbfg ._dgga -1;_dbdeb :=1;_agcg :=0;for _afddg :=range _gdea {if _afddg !=0{_ccee :=1;if _afddg -_agcg > 1{_ccee =2;};_dbdeb +=_ccee ;};if _dbdeb > _cagg {_ecfef :=_ea .Index (_gdea [_afddg :],_befed );if _ecfef ==0{return MakeNumberResult (float64 (_dbdeb ));
};};_agcg =_afddg ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func (_cfbc *Lexer )lex (_ecgda _a .Reader ){_fdgd ,_cafac ,_abdca :=0,0,0;_fgddc :=-1;_fbfccd ,_dacd ,_deabb :=0,0,0;_ =_deabb ;_caffa :=1;
_ =_caffa ;_eabgd :=make ([]byte ,4096);_bcgd :=false ;for !_bcgd {_beab :=0;if _fbfccd > 0{_beab =_cafac -_fbfccd ;};_cafac =0;_dbece ,_gcbde :=_ecgda .Read (_eabgd [_beab :]);if _dbece ==0||_gcbde !=nil {_bcgd =true ;};_abdca =_dbece +_beab ;if _abdca < len (_eabgd ){_fgddc =_abdca ;
};{_fdgd =_begedf ;_fbfccd =0;_dacd =0;_deabb =0;};{var _ddcd int ;var _fabeb uint ;if _cafac ==_abdca {goto _debac ;};if _fdgd ==0{goto _afcbg ;};_becda :_ddcd =int (_cgbf [_fdgd ]);_fabeb =uint (_bgabc [_ddcd ]);_ddcd ++;for ;_fabeb > 0;_fabeb --{_ddcd ++;
switch _bgabc [_ddcd -1]{case 2:_fbfccd =_cafac ;};};switch _fdgd {case 30:switch _eabgd [_cafac ]{case 34:goto _fgfab ;case 35:goto _affad ;case 36:goto _cbcaf ;case 38:goto _aggdc ;case 39:goto _ccca ;case 40:goto _accad ;case 41:goto _cgfb ;case 42:goto _gcfce ;
case 43:goto _acgd ;case 44:goto _cdadf ;case 45:goto _cbbaf ;case 47:goto _abbcd ;case 58:goto _ggddg ;case 59:goto _dbgb ;case 60:goto _fdge ;case 61:goto _dgff ;case 62:goto _bdad ;case 63:goto _bffa ;case 70:goto _efea ;case 84:goto _cgfeg ;case 92:goto _ddbge ;
case 94:goto _agccf ;case 95:goto _gdcef ;case 123:goto _cebb ;case 125:goto _gddedg ;};switch {case _eabgd [_cafac ]< 65:switch {case _eabgd [_cafac ]> 37:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _adbe ;};case _eabgd [_cafac ]>=33:goto _bffa ;
};case _eabgd [_cafac ]> 90:switch {case _eabgd [_cafac ]> 93:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _eeaba ;};case _eabgd [_cafac ]>=91:goto _bffa ;};default:goto _ddgcg ;};goto _dcefbc ;case 1:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;
case 47:goto _eefef ;case 123:goto _eefef ;case 125:goto _eefef ;};switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _eefef ;};case _eabgd [_cafac ]> 45:switch {case _eabgd [_cafac ]> 63:if 91<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=94{goto _eefef ;
};case _eabgd [_cafac ]>=58:goto _eefef ;};default:goto _eefef ;};goto _dcefbc ;case 0:goto _afcbg ;case 2:if _eabgd [_cafac ]==34{goto _becg ;};goto _fgfab ;case 31:if _eabgd [_cafac ]==34{goto _fgfab ;};goto _dabe ;case 3:switch _eabgd [_cafac ]{case 78:goto _faff ;
case 82:goto _aggda ;};goto _bffa ;case 4:switch _eabgd [_cafac ]{case 47:goto _aeecc ;case 85:goto _gaee ;};goto _bffa ;case 5:if _eabgd [_cafac ]==65{goto _cfeb ;};goto _bffa ;case 6:switch _eabgd [_cafac ]{case 76:goto _afac ;case 77:goto _dbegb ;};
goto _bffa ;case 7:if _eabgd [_cafac ]==76{goto _dbegb ;};goto _bffa ;case 8:if _eabgd [_cafac ]==33{goto _cfeb ;};goto _bffa ;case 9:if _eabgd [_cafac ]==69{goto _egde ;};goto _bffa ;case 10:if _eabgd [_cafac ]==70{goto _ccbgd ;};goto _bffa ;case 11:if _eabgd [_cafac ]==33{goto _acgef ;
};goto _bffa ;case 12:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 47:goto _bffa ;case 123:goto _bffa ;case 125:goto _bffa ;};switch {case _eabgd [_cafac ]< 48:switch {case _eabgd [_cafac ]> 35:if 37<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=45{goto _bffa ;
};case _eabgd [_cafac ]>=34:goto _bffa ;};case _eabgd [_cafac ]> 57:switch {case _eabgd [_cafac ]< 65:if 58<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=63{goto _bffa ;};case _eabgd [_cafac ]> 90:if 91<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=94{goto _bffa ;};default:goto _ccdcece ;
};default:goto _efda ;};goto _dcefbc ;case 13:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 47:goto _bffa ;case 58:goto _fgdb ;case 123:goto _bffa ;case 125:goto _bffa ;};switch {case _eabgd [_cafac ]< 48:switch {case _eabgd [_cafac ]> 35:if 37<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=45{goto _bffa ;
};case _eabgd [_cafac ]>=34:goto _bffa ;};case _eabgd [_cafac ]> 57:switch {case _eabgd [_cafac ]> 63:if 91<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=94{goto _bffa ;};case _eabgd [_cafac ]>=59:goto _bffa ;};default:goto _efda ;};goto _dcefbc ;case 14:if _eabgd [_cafac ]==36{goto _eegfe ;
};if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _edfaa ;};goto _eefef ;case 15:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _edfaa ;};goto _eefef ;case 32:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _edfaa ;};goto _dcbe ;case 16:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;
case 36:goto _gebdd ;case 47:goto _bffa ;case 58:goto _fgde ;case 123:goto _bffa ;case 125:goto _bffa ;};switch {case _eabgd [_cafac ]< 59:switch {case _eabgd [_cafac ]> 45:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _eageg ;};case _eabgd [_cafac ]>=34:goto _bffa ;
};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]> 90:if 91<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=94{goto _bffa ;};case _eabgd [_cafac ]>=65:goto _ccdcece ;};default:goto _bffa ;};goto _dcefbc ;case 17:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;
case 47:goto _eefef ;case 123:goto _eefef ;case 125:goto _eefef ;};switch {case _eabgd [_cafac ]< 48:switch {case _eabgd [_cafac ]> 35:if 37<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=45{goto _eefef ;};case _eabgd [_cafac ]>=34:goto _eefef ;};case _eabgd [_cafac ]> 57:switch {case _eabgd [_cafac ]> 63:if 91<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=94{goto _eefef ;
};case _eabgd [_cafac ]>=58:goto _eefef ;};default:goto _eageg ;};goto _dcefbc ;case 33:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 47:goto _ccccd ;case 123:goto _ccccd ;case 125:goto _ccccd ;};switch {case _eabgd [_cafac ]< 48:switch {case _eabgd [_cafac ]> 35:if 37<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=45{goto _ccccd ;
};case _eabgd [_cafac ]>=34:goto _ccccd ;};case _eabgd [_cafac ]> 57:switch {case _eabgd [_cafac ]> 63:if 91<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=94{goto _ccccd ;};case _eabgd [_cafac ]>=58:goto _ccccd ;};default:goto _eageg ;};goto _dcefbc ;case 18:if _eabgd [_cafac ]==36{goto _dbea ;
};if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _aece ;};goto _eefef ;case 19:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _aece ;};goto _eefef ;case 34:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _aece ;};goto _cacf ;case 20:switch _eabgd [_cafac ]{case 39:goto _bffa ;
case 42:goto _bffa ;case 47:goto _bffa ;case 58:goto _bffa ;case 63:goto _bffa ;};if 91<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=93{goto _bffa ;};goto _abfc ;case 21:switch _eabgd [_cafac ]{case 39:goto _baaac ;case 42:goto _bffa ;case 47:goto _bffa ;case 58:goto _bffa ;
case 63:goto _bffa ;};if 91<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=93{goto _bffa ;};goto _abfc ;case 22:if _eabgd [_cafac ]==33{goto _eefgc ;};goto _bffa ;case 35:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 46:goto _agacg ;case 58:goto _fgdb ;case 101:goto _becc ;
case 123:goto _bdafe ;case 125:goto _bdafe ;};switch {case _eabgd [_cafac ]< 48:switch {case _eabgd [_cafac ]> 35:if 37<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=47{goto _bdafe ;};case _eabgd [_cafac ]>=34:goto _bdafe ;};case _eabgd [_cafac ]> 57:switch {case _eabgd [_cafac ]> 63:if 91<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=94{goto _bdafe ;
};case _eabgd [_cafac ]>=59:goto _bdafe ;};default:goto _adbe ;};goto _dcefbc ;case 36:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 47:goto _bdafe ;case 101:goto _becc ;case 123:goto _bdafe ;case 125:goto _bdafe ;};switch {case _eabgd [_cafac ]< 48:switch {case _eabgd [_cafac ]> 35:if 37<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=45{goto _bdafe ;
};case _eabgd [_cafac ]>=34:goto _bdafe ;};case _eabgd [_cafac ]> 57:switch {case _eabgd [_cafac ]> 63:if 91<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=94{goto _bdafe ;};case _eabgd [_cafac ]>=58:goto _bdafe ;};default:goto _agacg ;};goto _dcefbc ;case 23:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;
case 47:goto _cagd ;case 123:goto _cagd ;case 125:goto _cagd ;};switch {case _eabgd [_cafac ]< 48:switch {case _eabgd [_cafac ]> 35:if 37<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=45{goto _cagd ;};case _eabgd [_cafac ]>=34:goto _cagd ;};case _eabgd [_cafac ]> 57:switch {case _eabgd [_cafac ]> 63:if 91<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=94{goto _cagd ;
};case _eabgd [_cafac ]>=58:goto _cagd ;};default:goto _bbce ;};goto _dcefbc ;case 37:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 47:goto _bdafe ;case 123:goto _bdafe ;case 125:goto _bdafe ;};switch {case _eabgd [_cafac ]< 48:switch {case _eabgd [_cafac ]> 35:if 37<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=45{goto _bdafe ;
};case _eabgd [_cafac ]>=34:goto _bdafe ;};case _eabgd [_cafac ]> 57:switch {case _eabgd [_cafac ]> 63:if 91<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=94{goto _bdafe ;};case _eabgd [_cafac ]>=58:goto _bdafe ;};default:goto _bbce ;};goto _dcefbc ;case 38:switch _eabgd [_cafac ]{case 61:goto _bcafa ;
case 62:goto _fbbd ;};goto _efcdg ;case 39:if _eabgd [_cafac ]==61{goto _ebed ;};goto _dddbd ;case 24:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 36:goto _gebdd ;case 40:goto _fcccg ;case 46:goto _febeb ;case 58:goto _fgde ;case 92:goto _ebddb ;
case 95:goto _adbed ;case 123:goto _bffa ;case 125:goto _bffa ;};switch {case _eabgd [_cafac ]< 59:switch {case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _cbeag ;};case _eabgd [_cafac ]>=34:goto _bffa ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _gdef ;
};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;};default:goto _bffa ;};default:goto _bffa ;};goto _dcefbc ;case 40:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 40:goto _fcccg ;case 46:goto _febeb ;case 92:goto _ebddb ;
case 95:goto _adbed ;case 123:goto _gdcfe ;case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 58:switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _gdcfe ;};case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _febeb ;
};default:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _febeb ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;};default:goto _gdcfe ;
};default:goto _gdcfe ;};goto _dcefbc ;case 41:switch _eabgd [_cafac ]{case 46:goto _ebddb ;case 92:goto _ebddb ;case 95:goto _ebddb ;};switch {case _eabgd [_cafac ]< 65:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _ebddb ;};case _eabgd [_cafac ]> 90:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _ebddb ;
};default:goto _ebddb ;};goto _gdcfe ;case 42:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 46:goto _adbed ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _gdcfe ;case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 58:switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _gdcfe ;
};case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _adbed ;};default:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _adbed ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;
};default:goto _gdcfe ;};default:goto _gdcfe ;};goto _dcefbc ;case 43:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 40:goto _fcccg ;case 46:goto _febeb ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _ccccd ;case 125:goto _ccccd ;};switch {case _eabgd [_cafac ]< 58:switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _ccccd ;
};case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _cbeag ;};default:goto _ccccd ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _febeb ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;
};default:goto _ccccd ;};default:goto _ccccd ;};goto _dcefbc ;case 44:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 36:goto _gebdd ;case 40:goto _fcccg ;case 46:goto _febeb ;case 58:goto _fgde ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _eefef ;
case 125:goto _eefef ;};switch {case _eabgd [_cafac ]< 59:switch {case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _cbeag ;};case _eabgd [_cafac ]>=34:goto _eefef ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _gdef ;
};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;};default:goto _eefef ;};default:goto _eefef ;};goto _dcefbc ;case 25:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 36:goto _gebdd ;case 40:goto _fcccg ;case 46:goto _febeb ;
case 58:goto _fgde ;case 65:goto _ebbf ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _bffa ;case 125:goto _bffa ;};switch {case _eabgd [_cafac ]< 59:switch {case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _cbeag ;
};case _eabgd [_cafac ]>=34:goto _bffa ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 66<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _gdef ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;};default:goto _bffa ;
};default:goto _bffa ;};goto _dcefbc ;case 45:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 36:goto _gebdd ;case 40:goto _fcccg ;case 46:goto _febeb ;case 58:goto _fgde ;case 76:goto _cafed ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _gdcfe ;
case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 59:switch {case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _cbeag ;};case _eabgd [_cafac ]>=34:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _gdef ;
};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;};default:goto _gdcfe ;};default:goto _gdcfe ;};goto _dcefbc ;case 46:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 36:goto _gebdd ;case 40:goto _fcccg ;case 46:goto _febeb ;
case 58:goto _fgde ;case 83:goto _befb ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _gdcfe ;case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 59:switch {case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _cbeag ;
};case _eabgd [_cafac ]>=34:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _gdef ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;};default:goto _gdcfe ;
};default:goto _gdcfe ;};goto _dcefbc ;case 47:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 36:goto _gebdd ;case 40:goto _fcccg ;case 46:goto _febeb ;case 58:goto _fgde ;case 69:goto _efgcb ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _gdcfe ;
case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 59:switch {case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _cbeag ;};case _eabgd [_cafac ]>=34:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _gdef ;
};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;};default:goto _gdcfe ;};default:goto _gdcfe ;};goto _dcefbc ;case 26:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 36:goto _gebdd ;case 40:goto _fcccg ;case 46:goto _febeb ;
case 58:goto _fgde ;case 79:goto _cfge ;case 82:goto _bcbca ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _bffa ;case 125:goto _bffa ;};switch {case _eabgd [_cafac ]< 59:switch {case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _cbeag ;
};case _eabgd [_cafac ]>=34:goto _bffa ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _gdef ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;};default:goto _bffa ;
};default:goto _bffa ;};goto _dcefbc ;case 48:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 36:goto _gebdd ;case 40:goto _fcccg ;case 46:goto _febeb ;case 58:goto _fgde ;case 68:goto _ceac ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _gdcfe ;
case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 59:switch {case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _cbeag ;};case _eabgd [_cafac ]>=34:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _gdef ;
};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;};default:goto _gdcfe ;};default:goto _gdcfe ;};goto _dcefbc ;case 49:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 36:goto _gebdd ;case 40:goto _fcccg ;case 46:goto _febeb ;
case 58:goto _fgde ;case 79:goto _eeba ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _gdcfe ;case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 59:switch {case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _cbeag ;
};case _eabgd [_cafac ]>=34:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _gdef ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;};default:goto _gdcfe ;
};default:goto _gdcfe ;};goto _dcefbc ;case 50:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 36:goto _gebdd ;case 40:goto _fcccg ;case 46:goto _febeb ;case 58:goto _fgde ;case 85:goto _befb ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _gdcfe ;
case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 59:switch {case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _cbeag ;};case _eabgd [_cafac ]>=34:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _gdef ;
};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;};default:goto _gdcfe ;};default:goto _gdcfe ;};goto _dcefbc ;case 27:switch _eabgd [_cafac ]{case 46:goto _ebddb ;case 92:goto _ebddb ;case 95:goto _ebddb ;};switch {case _eabgd [_cafac ]< 65:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _ebddb ;
};case _eabgd [_cafac ]> 90:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _ebddb ;};default:goto _ebddb ;};goto _bffa ;case 28:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 46:goto _adbed ;case 92:goto _ebddb ;case 95:goto _adbed ;case 120:goto _cdde ;
case 123:goto _bffa ;case 125:goto _bffa ;};switch {case _eabgd [_cafac ]< 58:switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _bffa ;};case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _adbed ;
};default:goto _bffa ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _adbed ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;};default:goto _bffa ;
};default:goto _bffa ;};goto _dcefbc ;case 51:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 46:goto _adbed ;case 92:goto _ebddb ;case 95:goto _adbed ;case 108:goto _bbgd ;case 123:goto _gdcfe ;case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 58:switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _gdcfe ;
};case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _adbed ;};default:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _adbed ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;
};default:goto _gdcfe ;};default:goto _gdcfe ;};goto _dcefbc ;case 52:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 46:goto _adbed ;case 92:goto _ebddb ;case 95:goto _adbed ;case 102:goto _bafd ;case 110:goto _eeaee ;case 123:goto _gdcfe ;case 125:goto _gdcfe ;
};switch {case _eabgd [_cafac ]< 58:switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _gdcfe ;};case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _adbed ;};default:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _adbed ;
};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;};default:goto _gdcfe ;};default:goto _gdcfe ;};goto _dcefbc ;case 53:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 46:goto _adbed ;case 92:goto _ebddb ;case 95:goto _adbed ;
case 110:goto _facb ;case 123:goto _gdcfe ;case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 58:switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _gdcfe ;};case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _adbed ;
};default:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _adbed ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;};default:goto _gdcfe ;
};default:goto _gdcfe ;};goto _dcefbc ;case 54:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 46:goto _fcef ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _gdcfe ;case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 58:switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _gdcfe ;
};case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _adbed ;};default:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _adbed ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;
};default:goto _gdcfe ;};default:goto _gdcfe ;};goto _dcefbc ;case 55:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 46:goto _adbed ;case 92:goto _ebddb ;case 95:goto _ggaaa ;case 123:goto _gdcfe ;case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 58:switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _gdcfe ;
};case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _adbed ;};default:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _ggaaa ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;
};default:goto _gdcfe ;};default:goto _gdcfe ;};goto _dcefbc ;case 56:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 40:goto _gfbf ;case 46:goto _ggaaa ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _gdcfe ;case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 58:switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _gdcfe ;
};case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _ggaaa ;};default:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _ggaaa ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;
};default:goto _gdcfe ;};default:goto _gdcfe ;};goto _dcefbc ;case 57:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 46:goto _adbed ;case 92:goto _ebddb ;case 95:goto _adbed ;case 109:goto _gggee ;case 123:goto _gdcfe ;case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 58:switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _gdcfe ;
};case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _adbed ;};default:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _adbed ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;
};default:goto _gdcfe ;};default:goto _gdcfe ;};goto _dcefbc ;case 58:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 46:goto _bgeb ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _gdcfe ;case 125:goto _gdcfe ;};switch {case _eabgd [_cafac ]< 58:switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _gdcfe ;
};case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _adbed ;};default:goto _gdcfe ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _adbed ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;
};default:goto _gdcfe ;};default:goto _gdcfe ;};goto _dcefbc ;case 59:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 46:goto _adbed ;case 92:goto _ebddb ;case 95:goto _dafga ;case 123:goto _eefef ;case 125:goto _eefef ;};switch {case _eabgd [_cafac ]< 58:switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _eefef ;
};case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _adbed ;};default:goto _eefef ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _dafga ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;
};default:goto _eefef ;};default:goto _eefef ;};goto _dcefbc ;case 29:switch _eabgd [_cafac ]{case 33:goto _fcdcaa ;case 46:goto _adbed ;case 92:goto _ebddb ;case 95:goto _adbed ;case 123:goto _bffa ;case 125:goto _bffa ;};switch {case _eabgd [_cafac ]< 58:switch {case _eabgd [_cafac ]< 37:if 34<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=35{goto _bffa ;
};case _eabgd [_cafac ]> 47:if 48<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=57{goto _adbed ;};default:goto _bffa ;};case _eabgd [_cafac ]> 63:switch {case _eabgd [_cafac ]< 91:if 65<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=90{goto _adbed ;};case _eabgd [_cafac ]> 94:if 97<=_eabgd [_cafac ]&&_eabgd [_cafac ]<=122{goto _adbed ;
};default:goto _bffa ;};default:goto _bffa ;};goto _dcefbc ;};_bffa :_fdgd =0;goto _bdecf ;_dcefbc :_fdgd =1;goto _bdecf ;_fgfab :_fdgd =2;goto _bdecf ;_affad :_fdgd =3;goto _bdecf ;_faff :_fdgd =4;goto _bdecf ;_aeecc :_fdgd =5;goto _bdecf ;_gaee :_fdgd =6;
goto _bdecf ;_afac :_fdgd =7;goto _bdecf ;_dbegb :_fdgd =8;goto _bdecf ;_aggda :_fdgd =9;goto _bdecf ;_egde :_fdgd =10;goto _bdecf ;_ccbgd :_fdgd =11;goto _bdecf ;_cbcaf :_fdgd =12;goto _bdecf ;_efda :_fdgd =13;goto _bdecf ;_fgdb :_fdgd =14;goto _bdecf ;
_eegfe :_fdgd =15;goto _bdecf ;_ccdcece :_fdgd =16;goto _bdecf ;_gebdd :_fdgd =17;goto _bdecf ;_fgde :_fdgd =18;goto _bdecf ;_dbea :_fdgd =19;goto _bdecf ;_ccca :_fdgd =20;goto _bdecf ;_abfc :_fdgd =21;goto _bdecf ;_baaac :_fdgd =22;goto _bdecf ;_becc :_fdgd =23;
goto _bdecf ;_ddgcg :_fdgd =24;goto _bdecf ;_efea :_fdgd =25;goto _bdecf ;_cgfeg :_fdgd =26;goto _bdecf ;_ddbge :_fdgd =27;goto _bdecf ;_gdcef :_fdgd =28;goto _bdecf ;_eeaba :_fdgd =29;goto _bdecf ;_eefef :_fdgd =30;goto _edgbg ;_fcdcaa :_fdgd =30;goto _bfggf ;
_cfeb :_fdgd =30;goto _ddfeb ;_acgef :_fdgd =30;goto _febb ;_eefgc :_fdgd =30;goto _fbbec ;_cagd :_fdgd =30;goto _egfgg ;_fcccg :_fdgd =30;goto _ceebb ;_aggdc :_fdgd =30;goto _bbbfd ;_accad :_fdgd =30;goto _bgfgc ;_cgfb :_fdgd =30;goto _degbc ;_gcfce :_fdgd =30;
goto _dabc ;_acgd :_fdgd =30;goto _cgcdf ;_cdadf :_fdgd =30;goto _bddfe ;_cbbaf :_fdgd =30;goto _cfgda ;_abbcd :_fdgd =30;goto _bdbgg ;_ggddg :_fdgd =30;goto _cggge ;_dbgb :_fdgd =30;goto _cbgabf ;_dgff :_fdgd =30;goto _gfdfd ;_agccf :_fdgd =30;goto _gbcd ;
_cebb :_fdgd =30;goto _abbcf ;_gddedg :_fdgd =30;goto _eadb ;_dabe :_fdgd =30;goto _cefdb ;_dcbe :_fdgd =30;goto _ccde ;_ccccd :_fdgd =30;goto _feecd ;_cacf :_fdgd =30;goto _ebcd ;_bdafe :_fdgd =30;goto _dedag ;_efcdg :_fdgd =30;goto _gead ;_bcafa :_fdgd =30;
goto _efebg ;_fbbd :_fdgd =30;goto _ffbdb ;_dddbd :_fdgd =30;goto _dcad ;_ebed :_fdgd =30;goto _baeba ;_gdcfe :_fdgd =30;goto _gbeaf ;_gfbf :_fdgd =30;goto _aegg ;_becg :_fdgd =31;goto _aceg ;_edfaa :_fdgd =32;goto _bdecf ;_eageg :_fdgd =33;goto _dfbe ;
_aece :_fdgd =34;goto _bdecf ;_adbe :_fdgd =35;goto _bgdcd ;_agacg :_fdgd =36;goto _bgdcd ;_bbce :_fdgd =37;goto _bgdcd ;_fdge :_fdgd =38;goto _bdecf ;_bdad :_fdgd =39;goto _bdecf ;_febeb :_fdgd =40;goto _bagb ;_ebddb :_fdgd =41;goto _bdecf ;_adbed :_fdgd =42;
goto _bagb ;_cbeag :_fdgd =43;goto _dfbe ;_gdef :_fdgd =44;goto _bagb ;_efgcb :_fdgd =44;goto _bfcf ;_eeba :_fdgd =44;goto _fdgdc ;_ebbf :_fdgd =45;goto _bagb ;_cafed :_fdgd =46;goto _bagb ;_befb :_fdgd =47;goto _bagb ;_cfge :_fdgd =48;goto _bagb ;_ceac :_fdgd =49;
goto _bagb ;_bcbca :_fdgd =50;goto _bagb ;_cdde :_fdgd =51;goto _bagb ;_bbgd :_fdgd =52;goto _bagb ;_bafd :_fdgd =53;goto _bagb ;_facb :_fdgd =54;goto _bagb ;_fcef :_fdgd =55;goto _bagb ;_ggaaa :_fdgd =56;goto _bagb ;_eeaee :_fdgd =57;goto _bagb ;_gggee :_fdgd =58;
goto _bagb ;_bgeb :_fdgd =59;goto _bagb ;_dafga :_fdgd =59;goto _bcga ;_ddfeb :_ddcd =3;goto _agga ;_febb :_ddcd =5;goto _agga ;_bfggf :_ddcd =7;goto _agga ;_fbbec :_ddcd =9;goto _agga ;_ceebb :_ddcd =11;goto _agga ;_aegg :_ddcd =13;goto _agga ;_bbbfd :_ddcd =15;
goto _agga ;_abbcf :_ddcd =17;goto _agga ;_eadb :_ddcd =19;goto _agga ;_bgfgc :_ddcd =21;goto _agga ;_degbc :_ddcd =23;goto _agga ;_cgcdf :_ddcd =25;goto _agga ;_cfgda :_ddcd =27;goto _agga ;_dabc :_ddcd =29;goto _agga ;_bdbgg :_ddcd =31;goto _agga ;_gbcd :_ddcd =33;
goto _agga ;_gfdfd :_ddcd =35;goto _agga ;_efebg :_ddcd =37;goto _agga ;_baeba :_ddcd =39;goto _agga ;_ffbdb :_ddcd =41;goto _agga ;_cggge :_ddcd =43;goto _agga ;_cbgabf :_ddcd =45;goto _agga ;_bddfe :_ddcd =47;goto _agga ;_dedag :_ddcd =49;goto _agga ;
_feecd :_ddcd =51;goto _agga ;_ccde :_ddcd =53;goto _agga ;_ebcd :_ddcd =55;goto _agga ;_gbeaf :_ddcd =57;goto _agga ;_cefdb :_ddcd =59;goto _agga ;_gead :_ddcd =61;goto _agga ;_dcad :_ddcd =63;goto _agga ;_egfgg :_ddcd =65;goto _agga ;_edgbg :_ddcd =67;
goto _agga ;_bfcf :_ddcd =72;goto _agga ;_bgdcd :_ddcd =75;goto _agga ;_dfbe :_ddcd =78;goto _agga ;_fdgdc :_ddcd =81;goto _agga ;_bcga :_ddcd =84;goto _agga ;_bagb :_ddcd =87;goto _agga ;_aceg :_ddcd =90;goto _agga ;_agga :_fabeb =uint (_bgabc [_ddcd ]);
_ddcd ++;for ;_fabeb > 0;_fabeb --{_ddcd ++;switch _bgabc [_ddcd -1]{case 3:_dacd =_cafac +1;case 4:_deabb =1;case 5:_deabb =2;case 6:_deabb =3;case 7:_deabb =4;case 8:_deabb =11;case 9:_deabb =14;case 10:_deabb =15;case 11:_dacd =_cafac +1;{_cfbc .emit (_efce ,_eabgd [_fbfccd :_dacd ]);
};case 12:_dacd =_cafac +1;{_cfbc .emit (_baef ,_eabgd [_fbfccd :_dacd ]);};case 13:_dacd =_cafac +1;{_cfbc .emit (_ccdcc ,_eabgd [_fbfccd :_dacd -1]);};case 14:_dacd =_cafac +1;{_cfbc .emit (_ccdcc ,_eabgd [_fbfccd +1:_dacd -2]);};case 15:_dacd =_cafac +1;
{_cfbc .emit (_ebcea ,_eabgd [_fbfccd :_dacd -1]);};case 16:_dacd =_cafac +1;{_cfbc .emit (_ebcea ,_eabgd [_fbfccd :_dacd -1]);};case 17:_dacd =_cafac +1;{_cfbc .emit (_bfafd ,_eabgd [_fbfccd :_dacd ]);};case 18:_dacd =_cafac +1;{_cfbc .emit (_dfce ,_eabgd [_fbfccd :_dacd ]);
};case 19:_dacd =_cafac +1;{_cfbc .emit (_bccfa ,_eabgd [_fbfccd :_dacd ]);};case 20:_dacd =_cafac +1;{_cfbc .emit (_dgafa ,_eabgd [_fbfccd :_dacd ]);};case 21:_dacd =_cafac +1;{_cfbc .emit (_cdfcf ,_eabgd [_fbfccd :_dacd ]);};case 22:_dacd =_cafac +1;
{_cfbc .emit (_aagdb ,_eabgd [_fbfccd :_dacd ]);};case 23:_dacd =_cafac +1;{_cfbc .emit (_fgdd ,_eabgd [_fbfccd :_dacd ]);};case 24:_dacd =_cafac +1;{_cfbc .emit (_dddg ,_eabgd [_fbfccd :_dacd ]);};case 25:_dacd =_cafac +1;{_cfbc .emit (_eddd ,_eabgd [_fbfccd :_dacd ]);
};case 26:_dacd =_cafac +1;{_cfbc .emit (_acagg ,_eabgd [_fbfccd :_dacd ]);};case 27:_dacd =_cafac +1;{_cfbc .emit (_dfbb ,_eabgd [_fbfccd :_dacd ]);};case 28:_dacd =_cafac +1;{_cfbc .emit (_cffc ,_eabgd [_fbfccd :_dacd ]);};case 29:_dacd =_cafac +1;{_cfbc .emit (_cefgg ,_eabgd [_fbfccd :_dacd ]);
};case 30:_dacd =_cafac +1;{_cfbc .emit (_geffd ,_eabgd [_fbfccd :_dacd ]);};case 31:_dacd =_cafac +1;{_cfbc .emit (_cdffe ,_eabgd [_fbfccd :_dacd ]);};case 32:_dacd =_cafac +1;{_cfbc .emit (_afbdb ,_eabgd [_fbfccd :_dacd ]);};case 33:_dacd =_cafac +1;
{_cfbc .emit (_ddfea ,_eabgd [_fbfccd :_dacd ]);};case 34:_dacd =_cafac ;_cafac --;{_cfbc .emit (_fgfb ,_eabgd [_fbfccd :_dacd ]);};case 35:_dacd =_cafac ;_cafac --;{_cfbc .emit (_cbcbe ,_eabgd [_fbfccd :_dacd ]);};case 36:_dacd =_cafac ;_cafac --;{_cfbc .emit (_ddecg ,_eabgd [_fbfccd :_dacd ]);
};case 37:_dacd =_cafac ;_cafac --;{_cfbc .emit (_ebfg ,_eabgd [_fbfccd :_dacd ]);};case 38:_dacd =_cafac ;_cafac --;{_cfbc .emit (_egdgc ,_eabgd [_fbfccd :_dacd ]);};case 39:_dacd =_cafac ;_cafac --;{_cfbc .emit (_efcfc ,_eabgd [_fbfccd +1:_dacd -1]);
};case 40:_dacd =_cafac ;_cafac --;{_cfbc .emit (_cgaaa ,_eabgd [_fbfccd :_dacd ]);};case 41:_dacd =_cafac ;_cafac --;{_cfbc .emit (_fggfd ,_eabgd [_fbfccd :_dacd ]);};case 42:_cafac =(_dacd )-1;{_cfbc .emit (_fgfb ,_eabgd [_fbfccd :_dacd ]);};case 43:switch _deabb {case 0:{_fdgd =0;
goto _bdecf ;};case 1:{_cafac =(_dacd )-1;_cfbc .emit (_faggb ,_eabgd [_fbfccd :_dacd ]);};case 2:{_cafac =(_dacd )-1;_cfbc .emit (_fgfb ,_eabgd [_fbfccd :_dacd ]);};case 3:{_cafac =(_dacd )-1;_cfbc .emit (_cbcbe ,_eabgd [_fbfccd :_dacd ]);};case 4:{_cafac =(_dacd )-1;
_cfbc .emit (_bbcca ,_eabgd [_fbfccd :_dacd ]);};case 11:{_cafac =(_dacd )-1;_cfbc .emit (_aabfe ,_eabgd [_fbfccd :_dacd ]);};case 14:{_cafac =(_dacd )-1;_cfbc .emit (_egdgc ,_eabgd [_fbfccd :_dacd ]);};case 15:{_cafac =(_dacd )-1;_cfbc .emit (_efcfc ,_eabgd [_fbfccd +1:_dacd -1]);
};};};};goto _bdecf ;_bdecf :_ddcd =int (_dabga [_fdgd ]);_fabeb =uint (_bgabc [_ddcd ]);_ddcd ++;for ;_fabeb > 0;_fabeb --{_ddcd ++;switch _bgabc [_ddcd -1]{case 0:_fbfccd =0;case 1:_deabb =0;};};if _fdgd ==0{goto _afcbg ;};if _cafac ++;_cafac !=_abdca {goto _becda ;
};_debac :{};if _cafac ==_fgddc {switch _fdgd {case 1:goto _eefef ;case 2:goto _eefef ;case 31:goto _dabe ;case 14:goto _eefef ;case 15:goto _eefef ;case 32:goto _dcbe ;case 17:goto _eefef ;case 33:goto _ccccd ;case 18:goto _eefef ;case 19:goto _eefef ;
case 34:goto _cacf ;case 35:goto _bdafe ;case 36:goto _bdafe ;case 23:goto _cagd ;case 37:goto _bdafe ;case 38:goto _efcdg ;case 39:goto _dddbd ;case 40:goto _gdcfe ;case 41:goto _gdcfe ;case 42:goto _gdcfe ;case 43:goto _ccccd ;case 44:goto _eefef ;case 45:goto _gdcfe ;
case 46:goto _gdcfe ;case 47:goto _gdcfe ;case 48:goto _gdcfe ;case 49:goto _gdcfe ;case 50:goto _gdcfe ;case 51:goto _gdcfe ;case 52:goto _gdcfe ;case 53:goto _gdcfe ;case 54:goto _gdcfe ;case 55:goto _gdcfe ;case 56:goto _gdcfe ;case 57:goto _gdcfe ;
case 58:goto _gdcfe ;case 59:goto _eefef ;};};_afcbg :{};};if _fbfccd > 0{copy (_eabgd [0:],_eabgd [_fbfccd :]);};};_ =_fgddc ;if _fdgd ==_cgafb {_cfbc .emit (_bbeff ,nil );};close (_cfbc ._fcggd );};func _fa (_aff float64 )_cb .Time {_aba :=int64 ((_aff -_abb )*_fcg );
return _cb .Unix (0,_aba ).UTC ()};const _bbc ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfdf :=args [0].Ref ;if _gfdf .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .Cell (_gfdf .Value ,ev ).IsBoolean );};func (_dcb *defEval )checkLastEvalIsRef (_fbg Context ,_gec Expression ){switch _gec .(type ){case FunctionCall :switch _gec .(FunctionCall )._fdaad {case "\u0049\u0053\u0052E\u0046":for _ ,_edf :=range _gec .(FunctionCall )._ebfcg {switch _edf .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_bfa :=_edf .Eval (_fbg ,_dcb );
_dcb ._ecgd =!(_bfa .Type ==ResultTypeError &&_bfa .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_dcb ._ecgd =false ;};};};};};

// Update updates references in the Negate after removing a row/column.
func (_gdebd Negate )Update (q *_cg .UpdateQuery )Expression {return Negate {_fdcf :_gdebd ._fdcf .Update (q )};};func _dcagc (_fgfag string ,_acee _cb .Time )(_cb .Time ,error ){_cefg ,_ ,_cdca :=_c .ParseFloat (_fgfag ,10,128,_c .ToNearestEven );if _cdca !=nil {return _cb .Time {},_cdca ;
};_daeb :=new (_c .Float );_daeb .SetUint64 (uint64 (24*_cb .Hour ));_cefg .Mul (_cefg ,_daeb );_eafg ,_ :=_cefg .Uint64 ();_fgb :=_acee .Add (_cb .Duration (_eafg ));return _ggeg (_fgb ),nil ;};const _gad ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";


// Eval evaluates a vertical range returning a list of results or an error.
func (_ebaf VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_gaab :=_ebaf .verticalRangeReference ();if _bdfg ,_dfca :=ev .GetFromCache (_gaab );_dfca {return _bdfg ;};_efgd ,_cffba :=_ecfg (ctx ,_ebaf ._gfcfc ,_ebaf ._cbcge );_fcge :=_ebcab (ctx ,ev ,_efgd ,_cffba );
ev .SetCache (_gaab ,_fcge );return _fcge ;};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_befe ,_afb :=_eege (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _afb .Type ==ResultTypeError {return _afb ;};_fgfg :=_befe ._bcbd ;_cbfdb :=_befe ._cegd ;_cggd ,_afb :=_bdb (_befe ._ccff ,_befe ._eeed ,_fgfg ,_cbfdb );
if _afb .Type ==ResultTypeError {return _afb ;};return MakeNumberResult (_cggd );};

// Eval evaluates and returns a number.
func (_fbabd Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_fbabd ._bgeda )};type couponArgs struct{_ccff float64 ;_eeed float64 ;_bcbd int ;_cegd int ;};const _eaee =16;var _bgbb *_aa .Rand ;

// String returns a string representation of a horizontal range with prefix.
func (_dbgc PrefixHorizontalRange )String ()string {return _ef .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_dbgc ._fbbc .String (),_dbgc ._ggede ,_dbgc ._dcaf );};

// String returns a string representation of a named range.
func (_aeef NamedRangeRef )String ()string {return _aeef ._gdaf };

// Eval evaluates and returns the result of a constant array expression.
func (_aab ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_ccf :=[][]Result {};for _ ,_bd :=range _aab ._ceg {_geg :=[]Result {};for _ ,_fgfe :=range _bd {_geg =append (_geg ,_fgfe .Eval (ctx ,ev ));};_ccf =append (_ccf ,_geg );};return MakeArrayResult (_ccf );
};func _fcc (_afgf string ,_eaf *_cg .UpdateQuery )string {_cbf ,_deg :=_ab .ParseCellReference (_afgf );if _deg !=nil {return "\u0023\u0052\u0045F\u0021";};if _eaf .UpdateType ==_cg .UpdateActionRemoveColumn {_ecb :=_eaf .ColumnIdx ;_eedd :=_cbf .ColumnIdx ;
if _eedd < _ecb {return _afgf ;}else if _eedd ==_ecb {return "\u0023\u0052\u0045F\u0021";}else {return _cbf .Update (_cg .UpdateActionRemoveColumn ).String ();};};return _afgf ;};const _dbb ="\u0028\u0020\u0028"+_cged +"\u007c"+_gga +"\u007c"+_ggf +"\u007c"+_bbc +"\u0029\u0029\u003f\u0024";
const _ddfea =57376;

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cagae :=args [0].AsNumber ();if _cagae .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};if _cagae .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};return MakeNumberResult (_dgba (_cagae .ValueNumber ));};func _dceb (_gcde Result ,_bccc int )[]Result {_fagg :=[]Result {};switch _gcde .Type {case ResultTypeList :_cdag :=_gcde .ValueList ;_fgaa :=len (_cdag );for _fcaf :=0;_fcaf < _bccc ;_fcaf ++{if _fcaf < _fgaa {_fagg =append (_fagg ,_cdag [_fcaf ]);
}else {_fagg =append (_fagg ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _cbbfe :=0;_cbbfe < _bccc ;_cbbfe ++{_fagg =append (_fagg ,_gcde );};};return _fagg ;};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ebcc :=ctx .GetEpoch ();_gffg ,_bad :=_dcagc (args [0].Value (),_ebcc );if _bad !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (float64 (_gffg .Year ()));};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_fede ,_aebefc :=_daefc ("\u0046\u0049\u004e\u0044",args );if _aebefc .Type !=ResultTypeEmpty {return _aebefc ;};_aaabg :=_fede ._bgga ;if _aaabg ==""{return MakeNumberResult (1.0);};_babdc :=_fede ._bbaegg ;_ccegd :=_fede ._dgga ;
_fegdd :=1;for _abdga :=range _babdc {if _fegdd < _ccegd {_fegdd ++;continue ;};_acdd :=_ea .Index (_babdc [_abdga :],_aaabg );if _acdd ==0{return MakeNumberResult (float64 (_fegdd ));};_fegdd ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );
};

// ResultType is the type of the result
//
//go:generate stringer -type=ResultType
type ResultType byte ;

// IsDBCS returns false for the invalid reference context.
func (_adddg *ivr )IsDBCS ()bool {return false };const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_adcf ,_aaca ,_affag :=_agdg (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _affag .Type ==ResultTypeError {return _affag ;};if _aaca ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _adcf ==0{return MakeNumberResult (0);};_cddb :=_adcf < 0;if _cddb {_adcf =-_adcf ;};_eecdd :=float64 (int (_adcf ));_gfea :=args [0].Value ();_fade :=_ea .Split (_gfea ,"\u002e");_bfcef :=0.0;if len (_fade )> 1{var _cbgd error ;_dbgd :=_fade [1];
_bfcef ,_cbgd =_ead .ParseFloat (_dbgd ,64);if _cbgd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");
};_edcb :=float64 (len (_dbgd ));_bfcef /=_eff .Pow (10,_edcb );};_addf :=_bfcef *_aaca /_eff .Pow (10,float64 (int (_eff .Log10 (_aaca )))+1)+_eecdd ;if _cddb {_addf =-_addf ;};return MakeNumberResult (_addf );};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gdcfd :=[]float64 {};
for _ ,_cbge :=range args {switch _cbge .Type {case ResultTypeString :_gadg :=_cbge .AsNumber ();if _gadg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gdcfd =append (_gdcfd ,_gadg .ValueNumber );case ResultTypeList :_fbacc :=LCM (_cbge .ValueList );if _fbacc .Type !=ResultTypeNumber {return _fbacc ;};_gdcfd =append (_gdcfd ,_fbacc .ValueNumber );case ResultTypeNumber :_gdcfd =append (_gdcfd ,_cbge .ValueNumber );
case ResultTypeEmpty :case ResultTypeError :return _cbge ;};};if len (_gdcfd )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if _gdcfd [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_gdcfd )==1{return MakeNumberResult (_gdcfd [0]);
};_aadd :=_gdcfd [0];for _fefa :=1;_fefa < len (_gdcfd );_fefa ++{if _gdcfd [_fefa ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_aadd =_aede (_aadd ,_gdcfd [_fefa ]);};return MakeNumberResult (_aadd );};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fabd :=args [0].AsNumber ();
if _fabd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdab :=_eff .Signbit (_fabd .ValueNumber );
_fgeb ,_afedc :=_eff .Modf (_fabd .ValueNumber /2);_adgd :=_fgeb *2;if _afedc !=0{if !_gdab {_adgd +=2;}else {_adgd -=2;};};return MakeNumberResult (_adgd );};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_edag :=len (args );if _edag !=4&&_edag !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_efaba ,_gabd ,_cfad :=_cafe (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _cfad .Type ==ResultTypeError {return _cfad ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adbb :=args [2].ValueNumber ;if _adbb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ggeb :=args [3].ValueNumber ;if _ggeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_edg :=0;if _edag ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_edg =int (args [4].ValueNumber );if !_eegdf (_edg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");
};};_acac ,_cfad :=_ggff (_efaba ,_gabd ,_edg );if _cfad .Type ==ResultTypeError {return _cfad ;};return MakeNumberResult (_adbb /(1-_ggeb *_acac ));};func _gaeg (_gedgc ,_bgaf ,_caeg ,_gddea float64 ,_gaae int )float64 {var _eefee float64 ;if _gedgc ==0{_eefee =(_caeg +_gddea )/_bgaf ;
}else {_dgf :=_eff .Pow (1+_gedgc ,_bgaf );if _gaae ==1{_eefee =(_gddea *_gedgc /(_dgf -1)+_caeg *_gedgc /(1-1/_dgf ))/(1+_gedgc );}else {_eefee =_gddea *_gedgc /(_dgf -1)+_caeg *_gedgc /(1-1/_dgf );};};return -_eefee ;};var _baaag =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};


// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_gbaa :=args [0];_fddaf :=args [1];if _fddaf .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_cdcg :=args [2].AsNumber ();if _cdcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dbedg :=false ;if len (args )==4{_cfde :=args [3].AsNumber ();if _cfde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _cfde .ValueNumber ==0{_dbedg =true ;};};_cfcf :=-1;_fee :=false ;if len (_fddaf .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");
};_aafd :=_fddaf .ValueArray [0];_gfcba :for _gegfe ,_gbfd :=range _aafd {switch _fgdc (_gbfd ,_gbaa ,false ,_dbedg ){case _bdgf :_cfcf =_gegfe ;case _feaga :_cfcf =_gegfe ;_fee =true ;break _gfcba ;};};if _cfcf ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_ffde :=int (_cdcg .ValueNumber )-1;if _ffde < 0||_ffde > len (_fddaf .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_aafd =_fddaf .ValueArray [_ffde ];
if _cfcf < 0||_cfcf >=len (_aafd ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _fee ||!_dbedg {return _aafd [_cfcf ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fdfe ,_gdbe ,_adg :=_cafe (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _adg .Type ==ResultTypeError {return _adg ;};_ebag ,_adg :=_eaa (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _adg .Type ==ResultTypeError {return _adg ;};if _ebag >=_fdfe {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_aggg :=args [3].ValueNumber ;if _aggg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eagb :=args [4].ValueNumber ;if _eagb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_dgaa :=args [5].ValueNumber ;if _dgaa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_beef :=float64 (int (args [6].ValueNumber ));if !_dbed (_beef ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dec :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dec =int (args [7].ValueNumber );if !_eegdf (_dec ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");
};};_daegd ,_adg :=_ggff (_ebag ,_gdbe ,_dec );if _adg .Type ==ResultTypeError {return _adg ;};_daegd *=_beef ;_dcbda ,_adg :=_ggff (_fdfe ,_gdbe ,_dec );if _adg .Type ==ResultTypeError {return _adg ;};_dcbda *=_beef ;_ageff ,_adg :=_ggff (_ebag ,_fdfe ,_dec );
if _adg .Type ==ResultTypeError {return _adg ;};_ageff *=_beef ;_ffgc :=_dgaa +_daegd *100*_aggg /_beef ;_ffgc /=_eagb +_ageff *100*_aggg /_beef ;_ffgc --;_ffgc *=_beef /_dcbda ;return MakeNumberResult (_ffgc );};const _baef =57356;

// GetLocked returns FALSE for the invalid reference context.
func (_bagd *ivr )GetLocked (cellRef string )bool {return false };var _ffgg =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_ecad ,_ebfc ,_begd :=_agdg (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _begd .Type ==ResultTypeError {return _begd ;};if _ebfc < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");
};if _ecad ==0{return MakeNumberResult (0);};_gbdb :=_ecad < 0;if _gbdb {_ecad =-_ecad ;};_bgbe :=args [0].Value ();_cbcg :=_ea .Split (_bgbe ,"\u002e");_fbgb :=float64 (int (_ecad ));_bdf :=_cbcg [1];_effc :=len (_bdf );_cefa :=int (_eff .Log10 (_ebfc ))+1;
_cbac :=float64 (_cefa -_effc );_dfgf ,_cdbf :=_ead .ParseFloat (_bdf ,64);if _cdbf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");
};_dfgf *=_eff .Pow (10,_cbac );_fbb :=_fbgb +_dfgf /_ebfc ;if _gbdb {_fbb =-_fbb ;};return MakeNumberResult (_fbb );};

// Reference returns an invalid reference for Number.
func (_cgegc Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};for _feec :=0;_feec < len (args )-1;_feec +=2{if args [_feec ].ValueNumber ==1{return args [_feec +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};func _bdgbb (_eaac yyLexer ,_bbbba *yySymType )(_bbdgd ,_fcbf int ){_fcbf =0;_bbdgd =_eaac .Lex (_bbbba );
if _bbdgd <=0{_fcbf =_eggg [0];goto _gggfgd ;};if _bbdgd < len (_eggg ){_fcbf =_eggg [_bbdgd ];goto _gggfgd ;};if _bbdgd >=_dcaaa {if _bbdgd < _dcaaa +len (_dfbbc ){_fcbf =_dfbbc [_bbdgd -_dcaaa ];goto _gggfgd ;};};for _ccea :=0;_ccea < len (_eaeab );_ccea +=2{_fcbf =_eaeab [_ccea +0];
if _fcbf ==_bbdgd {_fcbf =_eaeab [_ccea +1];goto _gggfgd ;};};_gggfgd :if _fcbf ==0{_fcbf =_dfbbc [1];};if _bdaf >=3{_ef .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_ebagc (_fcbf ),uint (_bbdgd ));};return _bbdgd ,_fcbf ;};
const _bfafd =57377;

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_cdddf :=args [0].AsString ();if _cdddf .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};return ctx .Cell (_cdddf .ValueString ,ev );};func _dfe (_ccgd ,_fega _cb .Time ,_gadd int )_cb .Time {_bbbf :=_cb .Date (_ccgd .Year (),_fega .Month (),_fega .Day (),0,0,0,0,_cb .UTC );if _bbbf .After (_ccgd ){_bbbf =_bbbf .AddDate (-1,0,0);};for !_bbbf .After (_ccgd ){_bbbf =_bbbf .AddDate (0,12/_gadd ,0);
};return _bbbf ;};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_abdb ,_cbbgf :=_baed (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _cbbgf .Type ==ResultTypeError {return _cbbgf ;};_bebb :=_abdb ._gggf ;_cdbe :=_abdb ._gcdb ;_befd :=_abdb ._eaggc ;_ffbb :=_abdb ._gcbf ;
_gbff :=_abdb ._cbfgg ;_ffbe :=_abdb ._dagd ;return _afdb (_bebb ,_cdbe ,_befd ,_ffbb ,_gbff ,_ffbe );};func _ffc (_bfce ,_ade ,_gdbf int )int {if _bfce > _ade {return 0;};if _cac (_gdbf ){return (_ade -_bfce +1)*360;};_gdec :=0;for _gcbbc :=_bfce ;_gcbbc <=_ade ;
_gcbbc ++{_gdce :=365;if _eefe (_gcbbc ){_gdce =366;};_gdec +=_gdce ;};return _gdec ;};var _ffggb =[...]struct{_bcfag int ;_egaea int ;_bafg string ;}{};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_gabcd :=args [0].AsNumber ();if _gabcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdggd :=0;if len (args )> 1{_dcea :=args [1];if _dcea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_gdggd =int (_dcea .ValueNumber );if _gdggd < 0{_gdggd =0;}else if _gdggd > 4{_gdggd =4;};};_adgce :=_adga ;switch _gdggd {case 1:_adgce =_ddff ;case 2:_adgce =_baddf ;case 3:_adgce =_ecade ;case 4:_adgce =_dced ;};_cfca :=_eff .Trunc (_gabcd .ValueNumber );
_caab :=_eg .Buffer {};for _ ,_fgca :=range _adgce {for _cfca >=_fgca ._ffba {_caab .WriteString (_fgca ._gcaa );_cfca -=_fgca ._ffba ;};};return MakeStringResult (_caab .String ());};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_bdgd :=args [0].AsNumber ();if _bdgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_fadg :=int (_bdgd .ValueNumber );_ebbg :=make ([][]Result ,0,_fadg );for _addd :=0;_addd < _fadg ;_addd ++{_beec :=make ([]Result ,_fadg );for _gefg :=0;_gefg < _fadg ;_gefg ++{if _addd ==_gefg {_beec [_gefg ]=MakeNumberResult (1.0);}else {_beec [_gefg ]=MakeNumberResult (0.0);
};};_ebbg =append (_ebbg ,_beec );};return MakeArrayResult (_ebbg );};func (_bdde Result )AsString ()Result {switch _bdde .Type {case ResultTypeNumber :return MakeStringResult (_bdde .Value ());default:return _bdde ;};};

// CellRef is a reference to a single cell
type CellRef struct{_eeb string };func _efc ()evCache {_agb :=evCache {};_agb ._dde =make (map[string ]Result );_agb ._gbf =&_ee .Mutex {};return _agb ;};func _fdf (_gbb ,_edd float64 ,_fdbg ,_ebfe int )float64 {_eagg :=_fa (_gbb );_gcbbd :=_fa (_edd );
if _ebfe ==1{_cfdf :=_cffg (_eagg ,_gcbbd ,_fdbg ,1);_bbfdb :=_cfdf .AddDate (0,12/_fdbg ,0);return _aaa (_cfdf ,_bbfdb ,_ebfe );};return float64 (_abba (0,_ebfe ))/float64 (_fdbg );};const _acdc ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_gbfe +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";


// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _bcadg (args ,_gbbg )};type defEval struct{evCache ;_ecgd bool ;};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cacaf :=args [0].AsNumber ();_ffbd :=args [1].AsNumber ();_geff :=args [2].AsNumber ();_ccgb :=args [3].ListValues ();if _cacaf .Type !=ResultTypeNumber ||_ffbd .Type !=ResultTypeNumber ||_geff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_ggee :=float64 (0);for _dfac ,_affgd :=range _ccgb {_ggee +=_affgd .ValueNumber *_eff .Pow (_cacaf .ValueNumber ,_ffbd .ValueNumber +float64 (_dfac )*_geff .ValueNumber );};return MakeNumberResult (_ggee );};

// Eval evaluates a range returning a list of results or an error.
func (_ebffc Range )Eval (ctx Context ,ev Evaluator )Result {_adbd :=_ebffc ._bfbcd .Reference (ctx ,ev );_eccda :=_ebffc ._agfcf .Reference (ctx ,ev );_eggf :=_cdffd (_adbd ,_eccda );if _adbd .Type ==ReferenceTypeCell &&_eccda .Type ==ReferenceTypeCell {if _abfcf ,_bcfac :=ev .GetFromCache (_eggf );
_bcfac {return _abfcf ;}else {_edfdg :=_ebcab (ctx ,ev ,_adbd .Value ,_eccda .Value );ev .SetCache (_eggf ,_edfdg );return _edfdg ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_eggf );};func _dfddc (_adecd []Result ,_debca []string ,_fdaf bool )[]string {for _ ,_bfdd :=range _adecd {switch _bfdd .Type {case ResultTypeEmpty :if !_fdaf {_debca =append (_debca ,"");
};case ResultTypeString :if _bfdd .ValueString !=""||!_fdaf {_debca =append (_debca ,_bfdd .ValueString );};case ResultTypeNumber :_debca =append (_debca ,_bfdd .Value ());case ResultTypeList :_debca =_fadb (_debca ,_dfddc (_bfdd .ValueList ,[]string {},_fdaf ));
case ResultTypeArray :for _ ,_dgecd :=range _bfdd .ValueArray {_debca =_fadb (_debca ,_dfddc (_dgecd ,[]string {},_fdaf ));};};};return _debca ;};type ri struct{_ffba float64 ;_gcaa string ;};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_aaeca :=args [0].AsNumber ();if _aaeca .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_becf :=float64 (1);if _aaeca .ValueNumber < 0{_becf =-1;};if len (args )> 1{_eabe :=args [1].AsNumber ();if _eabe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_becf =_eabe .ValueNumber ;};_eeedgg :=float64 (1);if len (args )> 2{_acaae :=args [2].AsNumber ();if _acaae .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eeedgg =_acaae .ValueNumber ;};if len (args )==1{return MakeNumberResult (_eff .Floor (_aaeca .ValueNumber ));};_deab :=_aaeca .ValueNumber ;_deab ,_bfdg :=_eff .Modf (_deab /_becf );if _bfdg !=0&&_aaeca .ValueNumber < 0&&_eeedgg > 0{_deab ++;};return MakeNumberResult (_deab *_becf );
};

// Eval evaluates and returns the result of an empty expression.
func (_cae EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};func _affa (_ebcg ,_dge ,_ccdd ,_bbfb int )int {if !_cac (_bbfb ){return _ccdd ;};_fad :=_ccdd ;_ffdf :=_gccc (_ebcg ,_dge );if _fad > 30||_ccdd >=_ffdf ||_fad >=_ffdf {_fad =30;
};return _fad ;};type yyParserImpl struct{_ccdcec yySymType ;_cecgb [_eaee ]yySymType ;_fdfc int ;};

// Reference returns a string reference value to a named range.
func (_bdbgc NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_bdbgc ._gdaf };};const _cged ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";


// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_debd :=len (args );if _debd ==0||_debd > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");
};_bfef :=_bfacf (args [0]);_gcga :=[]float64 {};for _ ,_bda :=range _bfef {for _ ,_cgbg :=range _bda {if _cgbg .Type ==ResultTypeNumber &&!_cgbg .IsBoolean {_gcga =append (_gcga ,_cgbg .ValueNumber );};};};_ecgbc :=len (_gcga );if len (_gcga )< 2{return MakeErrorResultType (ErrorTypeNum ,"");
};_cfgd :=0.1;if _debd ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cfgd =args [1].ValueNumber ;if _cfgd <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");
};};_egfe :=[]float64 {};for _baba :=0;_baba < _ecgbc ;_baba ++{if _baba ==0{_egfe =append (_egfe ,0);}else {_egfe =append (_egfe ,_egfe [_baba -1]+365);};};return _gbcg (_gcga ,_egfe ,_cfgd );};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eagad :=args [0].ValueNumber ;if _eagad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_bcfc :=args [1].ValueNumber ;if _bcfc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cffb :=args [2].ValueNumber ;if _cffb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");
};return MakeNumberResult (_eff .Pow (_cffb /_bcfc ,1/_eagad )-1);};type xargs struct{_egcf []float64 ;_feag []float64 ;};func _baed (_cdd []Result ,_dcd string )(*durationArgs ,Result ){_dbe :=len (_cdd );if _dbe !=5&&_dbe !=6{return nil ,MakeErrorResult (_dcd +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bbda ,_ccfd ,_cafg :=_cafe (_cdd [0],_cdd [1],_dcd );if _cafg .Type ==ResultTypeError {return nil ,_cafg ;};_eadf :=_cdd [2];if _eadf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcd +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_beba :=_eadf .ValueNumber ;if _beba < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_aabb :=_cdd [3];if _aabb .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcd +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_bagg :=_aabb .ValueNumber ;if _bagg < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_fegg :=_cdd [4];if _fegg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcd +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fgad :=float64 (int (_fegg .ValueNumber ));if !_dbed (_fgad ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gbcf :=0;if _dbe ==6&&_cdd [5].Type !=ResultTypeEmpty {_eca :=_cdd [5];
if _eca .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gbcf =int (_eca .ValueNumber );
if !_eegdf (_gbcf ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_dcd );};};return &durationArgs {_bbda ,_ccfd ,_beba ,_bagg ,_fgad ,_gbcf },_bgg ;
};var _cbgg _ee .Mutex ;var _gg int64 =_gage (1900,_cb .January ,1);const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// String returns a string representation of a range with prefix.
func (_gddeb PrefixRangeExpr )String ()string {return _ef .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gddeb ._bfaa .String (),_gddeb ._fdged .String (),_gddeb ._cacff .String ());};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };


// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};func _cccg (_gcgdf ,_aaeb []float64 ,_affe float64 )float64 {_ggea :=_affe +1;
_adde :=_gcgdf [0];_gffbg :=len (_gcgdf );_eebf :=_aaeb [0];for _efac :=1;_efac < _gffbg ;_efac ++{_adde +=_gcgdf [_efac ]/_eff .Pow (_ggea ,(_aaeb [_efac ]-_eebf )/365);};return _adde ;};

// Update updates references in the PrefixExpr after removing a row/column.
func (_gabcb PrefixExpr )Update (q *_cg .UpdateQuery )Expression {_efed :=_gabcb ;_dbbgc :=_gabcb ._gaedb .String ();if _dbbgc ==q .SheetToUpdate {_egeg :=*q ;_egeg .UpdateCurrentSheet =true ;_efed ._bcfaga =_gabcb ._bcfaga .Update (&_egeg );};return _efed ;
};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_ea .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_dffec :v };};func (_eddb *Lexer )nextRaw ()*node {for len (_eddb ._egcd )!=0{_ecfed :=<-_eddb ._egcd [len (_eddb ._egcd )-1];if _ecfed !=nil {return _ecfed ;
};_eddb ._egcd =_eddb ._egcd [0:len (_eddb ._egcd )-1];};return <-_eddb ._fcggd ;};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_cedad ,_cdc :=_gbdg (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _cdc .Type ==ResultTypeError {return _cdc ;};_dbeg :=_cedad ._afbf ;_edfd :=_cedad ._ccac ;_ggcg :=_cedad ._bgdf ;_degc :=_cedad ._agac ;
_gdgga :=_cedad ._faea ;_gecec :=_cedad ._ddf ;_ccdb :=_gaeg (_dbeg ,_edfd ,_ggcg ,0,_gecec );_fggg :=0.0;if _degc ==1{if _gecec ==0{_fggg =_ccdb +_ggcg *_dbeg ;}else {_fggg =_ccdb ;};_degc ++;};for _eeedb :=_degc ;_eeedb <=_gdgga ;_eeedb ++{if _gecec ==1{_fggg +=_ccdb -(_bbgga (_dbeg ,_eeedb -2,_ccdb ,_ggcg ,1)-_ccdb )*_dbeg ;
}else {_fggg +=_ccdb -_bbgga (_dbeg ,_eeedb -1,_ccdb ,_ggcg ,0)*_dbeg ;};};return MakeNumberResult (_fggg );};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_eaeg :=args [0].AsNumber ();if _eaeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ffeb :=float64 (1);if _eaeg .ValueNumber < 0{_ffeb =-1;};if len (args )> 1{_gggfg :=args [1].AsNumber ();if _gggfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");
};_ffeb =_eff .Abs (_gggfg .ValueNumber );};if len (args )==1{return MakeNumberResult (_eff .Floor (_eaeg .ValueNumber ));};_bfac :=_eaeg .ValueNumber ;_bfac ,_cacb :=_eff .Modf (_bfac /_ffeb );if _cacb !=0{if _eaeg .ValueNumber < 0{_bfac --;};};return MakeNumberResult (_bfac *_ffeb );
};func _cffd (_feece string )*criteriaRegex {_dfdcg :=&criteriaRegex {};if _feece ==""{return _dfdcg ;};if _acdfd :=_cdaaa .FindStringSubmatch (_feece );len (_acdfd )> 1{_dfdcg ._eeef =_dggb ;_dfdcg ._efge =_acdfd [1];}else if _cdgb :=_aagde .FindStringSubmatch (_feece );
len (_cdgb )> 1{_dfdcg ._eeef =_dggb ;_dfdcg ._efge =_cdgb [1];}else if _gcdcf :=_dfdf .FindStringSubmatch (_feece );len (_gcdcf )> 1{_dfdcg ._eeef =_fcafb ;_dfdcg ._efge =_gcdcf [1];}else if _abbf :=_bdeb .FindStringSubmatch (_feece );len (_abbf )> 1{_dfdcg ._eeef =_eagbb ;
_dfdcg ._efge =_abbf [1];}else if _ddaa :=_bgec .FindStringSubmatch (_feece );len (_ddaa )> 1{_dfdcg ._eeef =_edfg ;_dfdcg ._efge =_ddaa [1];}else if _cggbd :=_ceaa .FindStringSubmatch (_feece );len (_cggbd )> 1{_dfdcg ._eeef =_gegd ;_dfdcg ._efge =_cggbd [1];
};return _dfdcg ;};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_bebcg :=_ea .Split (v ,"\u003a");if len (_bebcg )!=2{return nil ;};if _bebcg [0]> _bebcg [1]{_bebcg [0],_bebcg [1]=_bebcg [1],_bebcg [0];};return PrefixVerticalRange {_dagdb :pfx ,_ccga :_bebcg [0],_cabf :_bebcg [1]};
};

// Reference returns an invalid reference for Bool.
func (_fb Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _cbda =false ;

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_edbge :=false ;for _ ,_bage :=range args {switch _bage .Type {case ResultTypeList ,ResultTypeArray :_cfdcd :=Or (_bage .ListValues ());if _cfdcd .Type ==ResultTypeError {return _cfdcd ;};if _cfdcd .ValueNumber !=0{_edbge =true ;};case ResultTypeNumber :if _bage .ValueNumber !=0{_edbge =true ;
};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _bage ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");
};};return MakeBoolResult (_edbge );};func _daefc (_cafae string ,_ggaad []Result )(*parsedSearchObject ,Result ){_baf :=len (_ggaad );if _baf !=2&&_baf !=3{return nil ,MakeErrorResult (_cafae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dcfbc :=_ggaad [0];if _dcfbc .Type ==ResultTypeError {return nil ,_dcfbc ;};if _dcfbc .Type !=ResultTypeString &&_dcfbc .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_eega :=_ggaad [1];if _eega .Type ==ResultTypeError {return nil ,_eega ;};if _eega .Type !=ResultTypeString &&_eega .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");
};_gfee :=_eega .Value ();_badc :=_dcfbc .Value ();_feggc :=1;if _baf ==3&&_ggaad [2].Type !=ResultTypeEmpty {_aggd :=_ggaad [2];if _aggd .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");
};_feggc =int (_aggd .ValueNumber );if _feggc < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};if _feggc > len (_gfee ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};};return &parsedSearchObject {_badc ,_gfee ,_feggc },_bgg ;};var _gbg =map[string ]*_f .Regexp {};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_daebc ,_babcd ,_adgca :=_aebg (from ,to );if _adgca !=nil {_bf .Log .Debug (_adgca .Error ());return NewError (_adgca .Error ());};return PrefixRangeExpr {_bfaa :pfx ,_fdged :_daebc ,_cacff :_babcd };
};func _eac (_df BinOpType ,_ce []Result ,_eb Result )Result {_cd :=[]Result {};switch _eb .Type {case ResultTypeNumber :_gb :=_eb .ValueNumber ;for _ac :=range _ce {_aag :=_ce [_ac ].AsNumber ();if _aag .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _df {case BinOpTypePlus :_cd =append (_cd ,MakeNumberResult (_aag .ValueNumber +_gb ));case BinOpTypeMinus :_cd =append (_cd ,MakeNumberResult (_aag .ValueNumber -_gb ));case BinOpTypeMult :_cd =append (_cd ,MakeNumberResult (_aag .ValueNumber *_gb ));
case BinOpTypeDiv :if _gb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cd =append (_cd ,MakeNumberResult (_aag .ValueNumber /_gb ));case BinOpTypeExp :_cd =append (_cd ,MakeNumberResult (_eff .Pow (_aag .ValueNumber ,_gb )));case BinOpTypeLT :_cd =append (_cd ,MakeBoolResult (_aag .ValueNumber < _gb ));
case BinOpTypeGT :_cd =append (_cd ,MakeBoolResult (_aag .ValueNumber > _gb ));case BinOpTypeEQ :_cd =append (_cd ,MakeBoolResult (_aag .ValueNumber ==_gb ));case BinOpTypeLEQ :_cd =append (_cd ,MakeBoolResult (_aag .ValueNumber <=_gb ));case BinOpTypeGEQ :_cd =append (_cd ,MakeBoolResult (_aag .ValueNumber >=_gb ));
case BinOpTypeNE :_cd =append (_cd ,MakeBoolResult (_aag .ValueNumber !=_gb ));default:return MakeErrorResult (_ef .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_df ));
};};case ResultTypeString :_ec :=_eb .ValueString ;for _bfg :=range _ce {_cc :=_ce [_bfg ].AsString ();if _cc .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _df {case BinOpTypeLT :_cd =append (_cd ,MakeBoolResult (_cc .ValueString < _ec ));case BinOpTypeGT :_cd =append (_cd ,MakeBoolResult (_cc .ValueString > _ec ));case BinOpTypeEQ :_cd =append (_cd ,MakeBoolResult (_cc .ValueString ==_ec ));case BinOpTypeLEQ :_cd =append (_cd ,MakeBoolResult (_cc .ValueString <=_ec ));
case BinOpTypeGEQ :_cd =append (_cd ,MakeBoolResult (_cc .ValueString >=_ec ));case BinOpTypeNE :_cd =append (_cd ,MakeBoolResult (_cc .ValueString !=_ec ));default:return MakeErrorResult (_ef .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_df ));
};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");
};return MakeListResult (_cd );};func _ddba (_cfaf []Result ,_baebg bool ,_beaaf string )Result {var _gecee ,_gfbb string ;if _baebg {_gecee ="\u0074\u0068\u0072e\u0065";_gfbb ="\u006f\u0064\u0064";}else {_gecee ="\u0074\u0077\u006f";_gfbb ="\u0065\u0076\u0065\u006e";
};_fcfdf :=len (_cfaf );if (_baebg &&_fcfdf < 3)||(!_baebg &&_fcfdf < 2){return MakeErrorResult (_beaaf +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_gecee +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};if (_fcfdf /2*2==_fcfdf )==_baebg {return MakeErrorResult (_beaaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gfbb +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_eafbg :=-1;
_agbfb :=-1;for _gagbc :=0;_gagbc < _fcfdf ;_gagbc +=2{_dcae :=_cfaf [_gagbc ];if _dcae .Type !=ResultTypeArray &&_dcae .Type !=ResultTypeList {return MakeErrorResult (_beaaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");
};_ccbg :=_bfacf (_dcae );if _agbfb ==-1{_agbfb =len (_ccbg );_eafbg =len (_ccbg [0]);}else if len (_ccbg )!=_agbfb ||len (_ccbg [0])!=_eafbg {return MakeErrorResult (_beaaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");
};if _baebg &&_gagbc ==0{_gagbc --;};};return _bgg ;};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_cacad :=args [0].AsString ();if _cacad .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_daecb :=args [1].AsNumber ();if _daecb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _daecb .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");
};if _daecb .ValueNumber ==0{return MakeStringResult ("");};_eaec :=_eg .Buffer {};for _dbafc :=0;_dbafc < int (_daecb .ValueNumber );_dbafc ++{_eaec .WriteString (_cacad .ValueString );};return MakeStringResult (_eaec .String ());};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_cba :v }};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_ecec :=len (args );if _ecec !=5&&_ecec !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bgba ,_gcfc ,_dggg :=_cafe (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _dggg .Type ==ResultTypeError {return _dggg ;};_eceb ,_dggg :=_eaa (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");
if _dggg .Type ==ResultTypeError {return _dggg ;};if _eceb >=_bgba {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cbcfb :=args [3].ValueNumber ;if _cbcfb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_fbbe :=args [4].ValueNumber ;if _fbbe <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};_cdgc :=0;if _ecec ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cdgc =int (args [5].ValueNumber );if !_eegdf (_cdgc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");
};};_fdegf ,_dggg :=_ggff (_eceb ,_gcfc ,_cdgc );if _dggg .Type ==ResultTypeError {return _dggg ;};_fgaf ,_dggg :=_ggff (_eceb ,_bgba ,_cdgc );if _dggg .Type ==ResultTypeError {return _dggg ;};_bfca ,_dggg :=_ggff (_bgba ,_gcfc ,_cdgc );if _dggg .Type ==ResultTypeError {return _dggg ;
};_eagd :=1+_fdegf *_cbcfb ;_eagd /=_fbbe /100+_fgaf *_cbcfb ;_eagd --;_eagd /=_bfca ;return MakeNumberResult (_eagd );};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_abge :=args [0].Ref ;for _abge .Type ==ReferenceTypeNamedRange {_abge =ctx .NamedRange (_abge .Value );};_baga :="";switch _abge .Type {case ReferenceTypeCell :_baga =_abge .Value ;case ReferenceTypeRange :_aeed :=_ea .Split (_abge .Value ,"\u003a");
if len (_aeed )==2{_baga =_aeed [0];};default:return MakeErrorResult (_ef .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_abge .Type ));
};_daecf ,_edba :=_ab .ParseCellReference (_baga );if _edba !=nil {return MakeErrorResult (_ef .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_edba .Error ()));
};_eegde ,_cefd ,_becd :=_daecf .Column ,_daecf .RowIdx ,_daecf .SheetName ;_ddaf :=args [1].AsNumber ();if _ddaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};_fbee :=args [2].AsNumber ();if _fbee .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};var _gfbc ,_dfab Result ;if len (args )==3{_gfbc =MakeNumberResult (1);_dfab =MakeNumberResult (1);}else {_gfbc =args [3].AsNumber ();if _gfbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");
};if _gfbc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_dfab =args [4].AsNumber ();if _dfab .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");
};if _dfab .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_abff :=_ab .ColumnToIndex (_eegde );_acaff :=_cefd +uint32 (_ddaf .ValueNumber );_abag :=_abff +uint32 (_fbee .ValueNumber );_eabb :=_acaff +uint32 (_gfbc .ValueNumber );_cgad :=_abag +uint32 (_dfab .ValueNumber );
if _gfbc .ValueNumber > 0{_eabb --;}else {_eabb ++;_acaff ,_eabb =_eabb ,_acaff ;};if _dfab .ValueNumber > 0{_cgad --;}else {_cgad ++;_abag ,_cgad =_cgad ,_abag ;};_fdgc :=_ef .Sprintf ("\u0025\u0073\u0025\u0064",_ab .IndexToColumn (_abag ),_acaff );_gagb :=_ef .Sprintf ("\u0025\u0073\u0025\u0064",_ab .IndexToColumn (_cgad ),_eabb );
if _becd ==""{return _ebcab (ctx ,ev ,_fdgc ,_gagb );}else {return _ebcab (ctx .Sheet (_becd ),ev ,_fdgc ,_gagb );};};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_daefb :=1.0;for _ ,_edgb :=range args {_edgb =_edgb .AsNumber ();switch _edgb .Type {case ResultTypeNumber :_daefb *=_edgb .ValueNumber ;case ResultTypeList ,ResultTypeArray :_cebc :=Product (_edgb .ListValues ());
if _cebc .Type !=ResultTypeNumber {return _cebc ;};_daefb *=_cebc .ValueNumber ;case ResultTypeString :case ResultTypeError :return _edgb ;case ResultTypeEmpty :default:return MakeErrorResult (_ef .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_edgb .Type ));
};};return MakeNumberResult (_daefb );};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bccg :=args [0];switch _bccg .Type {case ResultTypeError :return _bccg ;
case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_bccg .ValueNumber !=0);};if _bccg .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _bcca (args );case ResultTypeArray :return _aaffg (args );
default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};
};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eebfd :=args [0];switch _eebfd .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
case ResultTypeString :_cbeg :=0.0;_ceeb :=0.0;for _ ,_faab :=range _eebfd .ValueString {_gaf :=0.0;switch _faab {case 'I':_gaf =1;case 'V':_gaf =5;case 'X':_gaf =10;case 'L':_gaf =50;case 'C':_gaf =100;case 'D':_gaf =500;case 'M':_gaf =1000;};_cbeg +=_gaf ;
switch {case _ceeb ==_gaf &&(_ceeb ==5||_ceeb ==50||_ceeb ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_ceeb ==_gaf :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");
};if _ceeb < _gaf {_cbeg -=2*_ceeb ;};_ceeb =_gaf ;};return MakeNumberResult (_cbeg );case ResultTypeError :return _eebfd ;default:return MakeErrorResult (_ef .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eebfd .Type ));
};};

// BinOpType is the binary operation operator type
//
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_deada SheetPrefixExpr )Update (q *_cg .UpdateQuery )Expression {return _deada };func _dgba (_agbf float64 )float64 {_bcaf :=float64 (1);for _cbca :=float64 (2);_cbca <=_agbf ;_cbca ++{_bcaf *=_cbca ;};return _bcaf ;};type tokenType int ;

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fcceb ,_bdfe ,_dfaa :=_cafe (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _dfaa .Type ==ResultTypeError {return _dfaa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfeb :=_bdfe -_fcceb ;if _gfeb > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");
};_edcg :=args [2].ValueNumber ;if _edcg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult ((365*_edcg )/(360-_edcg *_gfeb ));};

// Reference returns an invalid reference for EmptyExpr.
func (_fccc EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _aefed ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";
func _dcbfe (_cfdb []Result )(float64 ,float64 ,Result ){_fddb :=0.0;_gfde :=1.0;for _ ,_accac :=range _cfdb {switch _accac .Type {case ResultTypeNumber :_fddb +=_accac .ValueNumber ;_gfde *=_dgba (_accac .ValueNumber );case ResultTypeList ,ResultTypeArray :_gbdde ,_eagea ,_dcbfef :=_dcbfe (_accac .ListValues ());
_fddb +=_gbdde ;_gfde *=_dgba (_eagea );if _dcbfef .Type ==ResultTypeError {return 0,0,_dcbfef ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
case ResultTypeError :return 0,0,_accac ;};};return _fddb ,_gfde ,_bgg ;};func _babc (_aed []Result ,_faed string )(*amorArgs ,Result ){_gaa :=len (_aed );if _gaa !=6&&_gaa !=7{return nil ,MakeErrorResult (_faed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _aed [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_faed +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cfe :=_aed [0].ValueNumber ;
if _cfe < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_faed +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_edcc ,_adcb :=_eaa (_aed [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_faed );if _adcb .Type ==ResultTypeError {return nil ,_adcb ;};_bagf ,_adcb :=_eaa (_aed [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_faed );
if _adcb .Type ==ResultTypeError {return nil ,_adcb ;};if _bagf < _edcc {return nil ,MakeErrorResultType (ErrorTypeNum ,_faed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");
};if _aed [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_faed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fcfe :=_aed [3].ValueNumber ;if _fcfe < 0||_fcfe > _cfe {return nil ,MakeErrorResultType (ErrorTypeNum ,_faed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");
};if _aed [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_faed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dgac :=int (_aed [4].ValueNumber );if _dgac < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_faed +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if _aed [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_faed +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_bcea :=_aed [5].ValueNumber ;if _bcea < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_faed +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");
};_aeb :=0;if _gaa ==7&&_aed [6].Type !=ResultTypeEmpty {if _aed [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_faed +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aeb =int (_aed [6].ValueNumber );if !_eegdf (_aeb )||_aeb ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_faed );
};};return &amorArgs {_cfe ,_edcc ,_bagf ,_fcfe ,_dgac ,_bcea ,_aeb },_bgg ;};const _ceddf =_cb .Millisecond *1000;

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_aafgb :=args [0].AsNumber ();_eddf :=args [1].AsNumber ();if _aafgb .Type !=ResultTypeNumber ||_eddf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};if _eddf .ValueNumber < _aafgb .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");
};_fbaf :=int64 (_aafgb .ValueNumber );_geeb :=int64 (_eddf .ValueNumber );return MakeNumberResult (float64 (_bgbb .Int63n (_geeb -_fbaf +1)+_fbaf ));};func _cbfa (_cdbc []Result ,_gffd bool )Result {var _aacc string ;if _gffd {_aacc ="\u004c\u0041\u0052G\u0045";
}else {_aacc ="\u0053\u004d\u0041L\u004c";};if len (_cdbc )!=2{return MakeErrorResult (_aacc +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_abbad :=_cdbc [0];var _faac [][]Result ;
switch _abbad .Type {case ResultTypeArray :_faac =_abbad .ValueArray ;case ResultTypeList :_faac =[][]Result {_abbad .ValueList };default:return MakeErrorResult (_aacc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");
};if len (_faac )==0{return MakeErrorResult (_aacc +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};if _cdbc [1].Type !=ResultTypeNumber {return MakeErrorResult (_aacc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_deba :=_cdbc [1].ValueNumber ;if _deba < 1{return MakeErrorResultType (ErrorTypeNum ,_aacc +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_bbaeb :=int (_deba );if float64 (_bbaeb )!=_deba {return MakeErrorResultType (ErrorTypeNum ,_aacc +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_dcag :=[]float64 {};for _ ,_agae :=range _faac {for _ ,_acfe :=range _agae {if _acfe .Type ==ResultTypeNumber {_dcag =append (_dcag ,_acfe .ValueNumber );};};};if _bbaeb > len (_dcag ){return MakeErrorResultType (ErrorTypeNum ,_aacc +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_fbbgf :=_b .MergeSort (_dcag );if _gffd {return MakeNumberResult (_fbbgf [len (_fbbgf )-_bbaeb ]);}else {return MakeNumberResult (_fbbgf [_bbaeb -1]);};};func _gfed (_eeff ,_feaf ,_acefa ,_eeab ,_ebdg float64 ,_gaaa int )float64 {_dbcdg :=_gaeg (_eeff ,_acefa ,_eeab ,_ebdg ,_gaaa );
var _deda float64 ;if _feaf ==1{if _gaaa ==1{_deda =0;}else {_deda =-_eeab ;};}else {if _gaaa ==1{_deda =_bbgga (_eeff ,_feaf -2,_dbcdg ,_eeab ,1)-_dbcdg ;}else {_deda =_bbgga (_eeff ,_feaf -1,_dbcdg ,_eeab ,0);};};return _deda *_eeff ;};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_gcccd :=len (args );if (_gcccd !=2&&_gcccd !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dee :=0;if _gcccd ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dee =int (args [2].ValueNumber );if !_eegdf (_dee ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");
};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecge :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gae :=args [1].ValueNumber ;_aabf ,_acc :=_ggff (_ecge ,_gae ,_dee );if _acc .Type ==ResultTypeError {return _acc ;};return MakeNumberResult (_aabf );};

// Eval evaluates and returns a boolean.
func (_bcc Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_bcc ._eadc )};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_fdaad :name ,_ebfcg :args };};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_deecg :=args [0].AsString ();if _deecg .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");
};_efee :=args [1].AsNumber ();if _efee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dgdee :=_deecg .ValueString ;if len (_dgdee )> 2&&(_ea .HasPrefix (_dgdee ,"\u0030\u0078")||_ea .HasPrefix (_dgdee ,"\u0030\u0058")){_dgdee =_dgdee [2:];};_gcdgb ,_ebeab :=_ead .ParseInt (_dgdee ,int (_efee .ValueNumber ),64);if _ebeab !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");
};return MakeNumberResult (float64 (_gcdgb ));};var _caadf =[...]uint8 {0,20,37,60,78,96};const _edaga =-1000;const _acag ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";


// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeString );};var _fgg =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_fgd :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_eabf :=args [2].ValueNumber +1;if _eabf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cdfff :=_bfacf (args [0]);_dadee :=float64 (len (_cdfff ));_ecfe ,_efbd :=0.0,0.0;_cgec ,_bfaf :=1.0,1.0;_cafb ,_ceab :=false ,false ;for _ ,_bbddb :=range _cdfff {for _ ,_baaa :=range _bbddb {if _baaa .Type ==ResultTypeNumber &&!_baaa .IsBoolean {_cbcf :=_baaa .ValueNumber ;
if _cbcf ==0{continue ;}else {if _cbcf > 0{_cafb =true ;_efbd +=_baaa .ValueNumber *_bfaf ;}else {_ceab =true ;_ecfe +=_baaa .ValueNumber *_cgec ;};_cgec /=_fgd ;_bfaf /=_eabf ;};};};};if !_cafb ||!_ceab {return MakeErrorResultType (ErrorTypeDivideByZero ,"");
};_ddec :=-_efbd /_ecfe ;_ddec *=_eff .Pow (_eabf ,_dadee -1);_ddec =_eff .Pow (_ddec ,1/(_dadee -1));return MakeNumberResult (_ddec -1);};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bdc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbba :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fgeg :=args [2].ValueNumber ;if _fgeg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult ((_bdc -_cbba )/_fgeg );};func _ageeb ()yyParser {return &yyParserImpl {}};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_edgg HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_bbegc :=_edgg .horizontalRangeReference ();if _dgbab ,_gbeaa :=ev .GetFromCache (_bbegc );_gbeaa {return _dgbab ;};_ffadc ,_dbbb :=_acgfe (ctx ,_edgg ._dcfff ,_edgg ._cafade );_dbba :=_ebcab (ctx ,ev ,_ffadc ,_dbbb );
ev .SetCache (_bbegc ,_dbba );return _dbba ;};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};

// Reference returns a string reference value to a horizontal range with prefix.
func (_gecc PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_gfgce :=_gecc ._fbbc .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_gecc .horizontalRangeReference (_gfgce .Value )};};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_bbab :=MakeNumberResult (0);for _ ,_fbcee :=range args {_fbcee =_fbcee .AsNumber ();switch _fbcee .Type {case ResultTypeNumber :_bbab .ValueNumber +=_fbcee .ValueNumber ;case ResultTypeList ,ResultTypeArray :_geacg :=Sum (_fbcee .ListValues ());
if _geacg .Type !=ResultTypeNumber {return _geacg ;};_bbab .ValueNumber +=_geacg .ValueNumber ;case ResultTypeString :case ResultTypeError :return _fbcee ;case ResultTypeEmpty :default:return MakeErrorResult (_ef .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fbcee .Type ));
};};return _bbab ;};func _cafe (_cec ,_bffcb Result ,_ebcca string )(float64 ,float64 ,Result ){_aaf ,_dfde :=_eaa (_cec ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_ebcca );if _dfde .Type ==ResultTypeError {return 0,0,_dfde ;
};_bgd ,_dfde :=_eaa (_bffcb ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_ebcca );if _dfde .Type ==ResultTypeError {return 0,0,_dfde ;};if _aaf >=_bgd {return 0,0,MakeErrorResultType (ErrorTypeNum ,_ebcca +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};return _aaf ,_bgd ,_bgg ;};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cdaf :=args [0].Ref ;
if _cdaf .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");
};_egaa ,_gagd :=_ab .ParseCellReference (_cdaf .Value );if _gagd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cdaf .Value );};return MakeNumberResult (float64 (_egaa .ColumnIdx +1));
};func _dbedf (_aebe ,_cbaa []float64 ,_ggfga float64 )float64 {_cgca :=_ggfga +1;_ebdgg :=0.0;_cgfe :=len (_aebe );_eegc :=_cbaa [0];for _abab :=1;_abab < _cgfe ;_abab ++{_bebag :=(_cbaa [_abab ]-_eegc )/365;_ebdgg -=_bebag *_aebe [_abab ]/_eff .Pow (_cgca ,_bebag +1);
};return _ebdgg ;};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_gada ,_gdba :=_daefc ("\u0046\u0049\u004e\u0044",args );if _gdba .Type !=ResultTypeEmpty {return _gdba ;};_ebggc :=_ea .ToLower (_gada ._bgga );if _ebggc ==""{return MakeNumberResult (1.0);};_aabdf :=_ea .ToLower (_gada ._bbaegg );
_bgfea :=_gada ._dgga ;_ecbea :=1;for _fafc :=range _aabdf {if _ecbea < _bgfea {_ecbea ++;continue ;};_gcbbb :=_fg .Index (_ebggc ,_aabdf [_fafc :]);if _gcbbb ==0{return MakeNumberResult (float64 (_ecbea ));};_ecbea ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_cbgdf ,_gfca :=_agaef (args ,true );if _gfca ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_cbgdf /_gfca );};func (_ae BinOpType )String ()string {if _ae >=BinOpType (len (_gffb )-1){return _ef .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ae );};return _gff [_gffb [_ae ]:_gffb [_ae +1]];
};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_fbcc :=_ddba (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _fbcc .Type !=ResultTypeEmpty {return _fbcc ;};_fgagg :=_ffef (args );return MakeNumberResult (float64 (len (_fgagg )));};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_bef CellRef )Update (q *_cg .UpdateQuery )Expression {if q .UpdateCurrentSheet {_bef ._eeb =_fcc (_bef ._eeb ,q );};return _bef ;};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_decf :=args [0].AsNumber ();_fgefb :=args [1].AsNumber ();if _decf .Type !=ResultTypeNumber ||_fgefb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _fgefb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_eff .Trunc (_decf .ValueNumber /_fgefb .ValueNumber ));
};var _eaeab =[...]int {0};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_gdb ConstArrayExpr )Update (q *_cg .UpdateQuery )Expression {return _gdb };func _gfbbe (_cebge string )string {_cebge =_ea .Replace (_cebge ,"\u000a","\u005c\u006e",-1);_cebge =_ea .Replace (_cebge ,"\u000d","\u005c\u0072",-1);_cebge =_ea .Replace (_cebge ,"\u0009","\u005c\u0074",-1);
return _cebge ;};const _fcfeb =187;const _aabfe =57348;const _dfce =57360;func (_gecdb *ivr )SetOffset (col ,row uint32 ){};func _ggag (_decdc []Result )(bool ,Result ){for _ ,_ggdd :=range _decdc {if _ggdd .Type ==ResultTypeError {return true ,_ggdd ;
};};return false ,MakeEmptyResult ();};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdee :=args [0].AsString ();if _gdee .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (_gdee .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (_gdee .ValueString [0]));};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");
};_cfbdb ,_afcd ,_effff :=_dcbfe (args );if _effff .Type ==ResultTypeError {return _effff ;};return MakeNumberResult (_dgba (_cfbdb )/_afcd );};

// String returns a string representation of FunctionCall expression.
func (_gced FunctionCall )String ()string {_fcacc :=_eg .Buffer {};_fcacc .WriteString (_gced ._fdaad );_fcacc .WriteString ("\u0028");_cffdg :=len (_gced ._ebfcg )-1;for _dccgd ,_fbed :=range _gced ._ebfcg {_fcacc .WriteString (_fbed .String ());if _dccgd !=_cffdg {_fcacc .WriteString ("\u002c");
};};_fcacc .WriteString ("\u0029");return _fcacc .String ();};var _effb =map[string ]*_f .Regexp {};func _ebab (_gaaeda ,_efccc float64 )float64 {_gaaeda =_eff .Trunc (_gaaeda );_efccc =_eff .Trunc (_efccc );if _gaaeda ==0{return _efccc ;};if _efccc ==0{return _gaaeda ;
};for _gaaeda !=_efccc {if _gaaeda > _efccc {_gaaeda =_gaaeda -_efccc ;}else {_efccc =_efccc -_gaaeda ;};};return _gaaeda ;};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_dfef ,_gfeea :=_ead .ParseFloat (v ,64);if _gfeea !=nil {_bf .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_gfeea );
};return Number {_bgeda :_dfef };};func _eege (_cee []Result ,_cggdb string )(*couponArgs ,Result ){_eefeb :=len (_cee );if _eefeb !=3&&_eefeb !=4{return nil ,MakeErrorResult (_cggdb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_aeaf ,_gccg ,_bgde :=_cafe (_cee [0],_cee [1],_cggdb );if _bgde .Type ==ResultTypeError {return nil ,_bgde ;};if _cee [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cggdb +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccaf :=_cee [2].ValueNumber ;if !_dbed (_ccaf ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_cggdb );};_abe :=0;if _eefeb ==4&&_cee [3].Type !=ResultTypeEmpty {if _cee [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cggdb +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_abe =int (_cee [3].ValueNumber );if !_eegdf (_abe ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_cggdb );
};};return &couponArgs {_aeaf ,_gccg ,int (_ccaf ),_abe },_bgg ;};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};func _bdb (_cbb ,_degd float64 ,_gdde ,_gcd int )(float64 ,Result ){_bgdc ,_afc :=_fa (_cbb ),_fa (_degd );
if _afc .After (_bgdc ){_cgff :=_cffg (_bgdc ,_afc ,_gdde ,_gcd );_ggb :=(_afc .Year ()-_cgff .Year ())*12+int (_afc .Month ())-int (_cgff .Month ());return float64 (_ggb *_gdde )/12.0,_bgg ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");
};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_ebcb :=ctx .GetEpoch ();_ebdca ,_bcfb :=_dcagc (args [0].Value (),_ebcb );if _bcfb !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_fggd :=_ebdca .Year ();return MakeBoolResult (_eefe (_fggd ));};var _baddf =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};


// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_cfed :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");
};_cfed =int (args [1].ValueNumber );if _cfed < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");
};if _cfed ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_ddgcd :=args [0].Value ();
if _cfed > len (_ddgcd ){return MakeStringResult (_ddgcd );};return MakeStringResult (_ddgcd [0:_cfed ]);};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_egfga :=len (args );if _egfga !=4&&_egfga !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dafeg ,_gfcb ,_deee :=_cafe (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _deee .Type ==ResultTypeError {return _deee ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dccd :=args [2].ValueNumber ;if _dccd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_cbcgc :=args [3].ValueNumber ;if _cbcgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");
};_dfga :=0;if _egfga ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfga =int (args [4].ValueNumber );if !_eegdf (_dfga ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");
};};_cdae ,_deee :=_ggff (_dafeg ,_gfcb ,_dfga );if _deee .Type ==ResultTypeError {return _deee ;};return MakeNumberResult (_cbcgc *(1-_dccd *_cdae ));};var _bgg Result =MakeEmptyResult ();const _ccdcc =57357;func _gbdf (_fggfe string ,_cdec []Result )(*parsedReplaceObject ,Result ){if len (_cdec )!=4{return nil ,MakeErrorResult (_fggfe +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _cdec [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_fggfe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_cgedc :=_cdec [0].ValueString ;if _cdec [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fggfe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");
};_fbae :=int (_cdec [1].ValueNumber )-1;if _cdec [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fggfe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cedec :=int (_cdec [2].ValueNumber );if _cdec [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_fggfe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");
};_dfae :=_cdec [3].ValueString ;return &parsedReplaceObject {_cgedc ,_fbae ,_cedec ,_dfae },_bgg ;};type yySymType struct{_gbfag int ;_fbgdc *node ;_efdg Expression ;_egdga []Expression ;_edfcf [][]Expression ;};func _gge (_dga string )bool {for _ ,_dca :=range _bcb {_edfc :=_dca .FindStringSubmatch (_dga );
if len (_edfc )> 1{return true ;};};return false ;};const _cdffe =57375;

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_db :lhs ,_aae :rhs ,_ge :op };};const _cgaaa =57370;var _dgfeb =[...]int {-1,1,1,-1,-2,0};const _ddgd =_gbfe +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";
func _acgfe (_abecea Context ,_fbdae ,_gageg int )(string ,string ){_bbde :="\u0041"+_ead .Itoa (_fbdae );_bgcdd :=_abecea .LastColumn (_fbdae ,_gageg );_badf :=_bgcdd +_ead .Itoa (_gageg );return _bbde ,_badf ;};func _fcgf (_fcfde []Result ,_aaece bool )Result {_gecde :="\u004d\u0041\u0058";
if _aaece {_gecde ="\u004d\u0041\u0058\u0041";};if len (_fcfde )==0{return MakeErrorResult (_gecde +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dead :=-_eff .MaxFloat64 ;for _ ,_fabg :=range _fcfde {switch _fabg .Type {case ResultTypeNumber :if (_aaece ||!_fabg .IsBoolean )&&_fabg .ValueNumber > _dead {_dead =_fabg .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_dadefd :=_fcgf (_fabg .ListValues (),_aaece );
if _dadefd .ValueNumber > _dead {_dead =_dadefd .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_dcbcd :=0.0;if _aaece {_dcbcd =_fabg .AsNumber ().ValueNumber ;};if _dcbcd > _dead {_dead =_dcbcd ;};default:_bf .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_gecde +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fabg .Type );
};};if _dead ==-_eff .MaxFloat64 {_dead =0;};return MakeNumberResult (_dead );};func _aefg (_ebde ,_aggbf ,_deb ,_daeg int )int {if _aggbf > _deb {return 0;};if _cac (_daeg ){return (_deb -_aggbf +1)*30;};_gfgc :=0;for _cdff :=_aggbf ;_cdff <=_deb ;_cdff ++{_gfgc +=_gccc (_ebde ,_cdff );
};return _gfgc ;};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_ecgff PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_acfg :=_ecgff ._bfaa .Reference (ctx ,ev );_ccdac :=_ecgff ._fdged .Reference (ctx ,ev );_ccggb :=_ecgff ._cacff .Reference (ctx ,ev );switch _acfg .Type {case ReferenceTypeSheet :if _effg (_acfg ,ctx ){return MakeErrorResultType (ErrorTypeName ,_ef .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_acfg .Value ));
};_fgbf :=_befedf (_acfg ,_ccdac ,_ccggb );if _ccdac .Type ==ReferenceTypeCell &&_ccggb .Type ==ReferenceTypeCell {if _ebbgg ,_dgbae :=ev .GetFromCache (_fgbf );_dgbae {return _ebbgg ;}else {_gfbd :=_ebcab (ctx .Sheet (_acfg .Value ),ev ,_ccdac .Value ,_ccggb .Value );
ev .SetCache (_fgbf ,_gfbd );return _gfbd ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_fgbf );default:return MakeErrorResult (_ef .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_acfg .Type ));
};};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cbaac :=args [0].AsString ();if _cbaac .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};if len (_cbaac .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_cbaac .ValueString [0]));};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_eefb :=int (args [0].ValueNumber );if _eefb < 0||_eefb >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _eefb <=1899{_eefb +=1900;};_bag :=_cb .Month (args [1].ValueNumber );
_cede :=int (args [2].ValueNumber );_ffb :=_gage (_eefb ,_bag ,_cede );_daa :=_acg (_gg ,_ffb )+1;if _daa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_daa );
};var _gffb =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_ea .NewReader (s ));};func (_bgbeg *Lexer )Next ()*node {_bgbeg ._dgbad .Lock ();defer _bgbeg ._dgbad .Unlock ();if len (_bgbeg ._ecda )> 0{_abcb :=_bgbeg ._ecda [0];
_bgbeg ._ecda =_bgbeg ._ecda [1:];return _abcb ;};return _bgbeg .nextRaw ();};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_bbbe (args ,_eeegga ))};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_ceg :data }};func (_caada VerticalRange )verticalRangeReference ()string {return _ef .Sprintf ("\u0025\u0073\u003a%\u0073",_caada ._gfcfc ,_caada ._cbcge );};