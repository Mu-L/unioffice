//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_fc "bytes";_e "errors";_a "fmt";_ae "github.com/unidoc/unioffice/common/logger";_fd "github.com/unidoc/unioffice/internal/mergesort";_fb "github.com/unidoc/unioffice/internal/wildcard";_bab "github.com/unidoc/unioffice/spreadsheet/format";
_cf "github.com/unidoc/unioffice/spreadsheet/reference";_ag "github.com/unidoc/unioffice/spreadsheet/update";_b "io";_ea "math";_c "math/big";_fg "math/rand";_bb "regexp";_db "sort";_bc "strconv";_bd "strings";_dd "sync";_ba "time";_f "unicode";);

// String returns a string representation for Bool.
func (_ddb Bool )String ()string {if _ddb ._ff {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_dae CellRef )Update (q *_ag .UpdateQuery )Expression {if q .UpdateCurrentSheet {_dae ._ddge =_bed (_dae ._ddge ,q );};return _dae ;};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_gcddf ,_ebad Expression };func _da (_ce ,_ef [][]Result )bool {if len (_ce )!=len (_ef ){return false ;};for _ga :=range _ce {if len (_ce [_ga ])!=len (_ef [_ga ]){return false ;};};return true ;};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};_gcgee :=args [0].ValueNumber ;if _gcgee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");
};_efed :=float64 (int (args [1].ValueNumber ));if _efed < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult (_ea .Pow ((1+_gcgee /_efed ),_efed )-1);};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_bcbfd :=args [0];if _bcbfd .Type !=ResultTypeNumber &&_bcbfd .Type !=ResultTypeString &&_bcbfd .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");
};_bedd :=args [1].ValueString ;switch _bcbfd .Type {case ResultTypeNumber :return MakeStringResult (_bab .Number (_bcbfd .ValueNumber ,_bedd ));case ResultTypeString :return MakeStringResult (_bab .String (_bcbfd .ValueString ,_bedd ));case ResultTypeEmpty :return MakeStringResult (_bab .Number (0,_bedd ));
case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");
};};func _gdcac (_cbca []Result )[]float64 {_ebgf :=make ([]float64 ,0);for _ ,_fffed :=range _cbca {if _fffed .Type ==ResultTypeEmpty {continue ;};_fffed =_fffed .AsNumber ();switch _fffed .Type {case ResultTypeNumber :if !_fffed .IsBoolean {_ebgf =append (_ebgf ,_fffed .ValueNumber );
};case ResultTypeList ,ResultTypeArray :_ebgf =append (_ebgf ,_gdcac (_fffed .ListValues ())...);case ResultTypeString :default:_ae .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fffed .Type );
};};return _ebgf ;};type durationArgs struct{_fgff float64 ;_eed float64 ;_adc float64 ;_bbe float64 ;_cebe float64 ;_gcgec int ;};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _dbdaba (args ,false )};var _cgff =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};


// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gagdeb :=args [0];if _gagdeb .Type ==ResultTypeNumber {return _gagdeb ;};if _gagdeb .Type ==ResultTypeString {_baebdf ,_abdg :=_bc .ParseFloat (_gagdeb .Value (),64);if _abdg ==nil {return MakeNumberResult (_baebdf );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");
};const _faed =57368;func _geeeb (_beaf []Result )[]rangeIndex {_fccd :=[]rangeIndex {};_ebab :=len (_beaf );for _bgggf :=0;_bgggf < _ebab -1;_bgggf +=2{_eagg :=[]rangeIndex {};_gaeec :=_fccfe (_beaf [_bgggf ]);_cgcda :=_gcdgb (_beaf [_bgggf +1]);if _bgggf ==0{for _eefda ,_eabe :=range _gaeec {for _ccac ,_fadg :=range _eabe {if _cedc (_fadg ,_cgcda ){_eagg =append (_eagg ,rangeIndex {_eefda ,_ccac });
};};};}else {for _ ,_ffcbbf :=range _fccd {_afbe :=_gaeec [_ffcbbf ._aeaf ][_ffcbbf ._bfgca ];if _cedc (_afbe ,_cgcda ){_eagg =append (_eagg ,_ffcbbf );};};};if len (_eagg )==0{return []rangeIndex {};};_fccd =_eagg [:];};return _fccd ;};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_gbfcd :=len (args );if _gbfcd < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bgcd :=args [0].ValueNumber ;if _bgcd ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_febd :=[]float64 {};for _ ,_faba :=range args [1:]{switch _faba .Type {case ResultTypeNumber :_febd =append (_febd ,_faba .ValueNumber );case ResultTypeArray ,ResultTypeList :_edeb :=_fccfe (_faba );
for _ ,_daa :=range _edeb {for _ ,_aecf :=range _daa {if _aecf .Type ==ResultTypeNumber &&!_aecf .IsBoolean {_febd =append (_febd ,_aecf .ValueNumber );};};};};};_ggd :=0.0;for _adgb ,_dcac :=range _febd {_ggd +=_dcac /_ea .Pow (1+_bgcd ,float64 (_adgb )+1);
};return MakeNumberResult (_ggd );};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};
_baedg :=int (args [0].ValueNumber );return MakeBoolResult (_baedg ==_baedg /2*2);};func _aef (_abb ,_dega ,_cbb int )bool {if _dega < 1||_dega > 12{return false ;};if _cbb < 1{return false ;};return _cbb <=_gagd (_abb ,_dega );};func _cdcb (_ecef []Result ,_cdgd countMode )float64 {_gfgcb :=0.0;
for _ ,_gcadf :=range _ecef {switch _gcadf .Type {case ResultTypeNumber :if _cdgd ==_ddff ||(_cdgd ==_fgcb &&!_gcadf .IsBoolean ){_gfgcb ++;};case ResultTypeList ,ResultTypeArray :_gfgcb +=_cdcb (_gcadf .ListValues (),_cdgd );case ResultTypeString :if _cdgd ==_ddff {_gfgcb ++;
};case ResultTypeEmpty :if _cdgd ==_gbgbf {_gfgcb ++;};};};return _gfgcb ;};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fegf :=args [0].AsNumber ();_ggbdb :=args [1].AsNumber ();if _fegf .Type !=ResultTypeNumber ||_ggbdb .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_cedb :=_ea .Trunc (_fegf .ValueNumber );_gbdde :=_ea .Trunc (_ggbdb .ValueNumber );if _gbdde > _cedb {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");
};if _gbdde ==_cedb ||_gbdde ==0{return MakeNumberResult (1);};_gdbg :=float64 (1);for _deed :=float64 (1);_deed <=_gbdde ;_deed ++{_gdbg *=(_cedb +1-_deed )/_deed ;};return MakeNumberResult (_gdbg );};func _dgdf (_gdccb [][]Result ,_ffgb int )[][]Result {_geefg :=[][]Result {};
for _fagd :=range _gdccb {if _fagd ==0{continue ;};_abfac :=[]Result {};for _adba :=range _gdccb {if _adba ==_ffgb {continue ;};_abfac =append (_abfac ,_gdccb [_fagd ][_adba ]);};_geefg =append (_geefg ,_abfac );};return _geefg ;};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_degb PrefixRangeExpr )Update (q *_ag .UpdateQuery )Expression {_fgdd :=_degb ;_acgdc :=_degb ._eeeeg .String ();if _acgdc ==q .SheetToUpdate {_gefda :=*q ;_gefda .UpdateCurrentSheet =true ;_fgdd ._babd =_degb ._babd .Update (&_gefda );_fgdd ._cgdfg =_degb ._cgdfg .Update (&_gefda );
};return _fgdd ;};const _gfgcg =57356;var _cdcc =map[string ]*_bb .Regexp {};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_fgge :=len (args );if _fgge !=5&&_fgge !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ecdd ,_aeee ,_dade :=_gece (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _dade .Type ==ResultTypeError {return _dade ;};_adcb ,_dade :=_cbeg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");
if _dade .Type ==ResultTypeError {return _dade ;};if _adcb >=_ecdd {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gbacd :=args [3].ValueNumber ;if _gbacd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_aebaf :=args [4].ValueNumber ;if _aebaf <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};_dagg :=0;if _fgge ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dagg =int (args [5].ValueNumber );if !_agdc (_dagg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");
};};_facb ,_dade :=_ead (_adcb ,_aeee ,_dagg );if _dade .Type ==ResultTypeError {return _dade ;};_fdde ,_dade :=_ead (_adcb ,_ecdd ,_dagg );if _dade .Type ==ResultTypeError {return _dade ;};_gfcc ,_dade :=_ead (_ecdd ,_aeee ,_dagg );if _dade .Type ==ResultTypeError {return _dade ;
};_defbg :=1+_facb *_gbacd ;_defbg /=_aebaf /100+_fdde *_gbacd ;_defbg --;_defbg /=_gfcc ;return MakeNumberResult (_defbg );};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError );};const _aagb =57378;

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_aceb ,_aegg :=_fcdbe ("\u0046\u0049\u004e\u0044",args );if _aegg .Type !=ResultTypeEmpty {return _aegg ;};_dgag :=_aceb ._cagbb ;if _dgag ==""{return MakeNumberResult (1.0);
};_gabed :=_aceb ._aaeaa ;_ddgdb :=_aceb ._fdgf -1;_ddfc :=1;_gadbg :=0;for _bbda :=range _gabed {if _bbda !=0{_ffaf :=1;if _bbda -_gadbg > 1{_ffaf =2;};_ddfc +=_ffaf ;};if _ddfc > _ddgdb {_fbgacg :=_bd .Index (_gabed [_bbda :],_dgag );if _fbgacg ==0{return MakeNumberResult (float64 (_ddfc ));
};};_gadbg =_bbda ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_deg :v }};

// Eval evaluates and returns a number.
func (_ecgce Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_ecgce ._egagf )};var _fed float64 =25569.0;

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ebdf :=args [0];switch _ebdf .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
case ResultTypeString :_caba :=0.0;_gdac :=0.0;for _ ,_eaedd :=range _ebdf .ValueString {_eafba :=0.0;switch _eaedd {case 'I':_eafba =1;case 'V':_eafba =5;case 'X':_eafba =10;case 'L':_eafba =50;case 'C':_eafba =100;case 'D':_eafba =500;case 'M':_eafba =1000;
};_caba +=_eafba ;switch {case _gdac ==_eafba &&(_gdac ==5||_gdac ==50||_gdac ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_gdac ==_eafba :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");
};if _gdac < _eafba {_caba -=2*_gdac ;};_gdac =_eafba ;};return MakeNumberResult (_caba );case ResultTypeError :return _ebdf ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ebdf .Type ));
};};func _ffgg (_agedc ,_ggeb _ba .Time ,_fgg ,_ggcb int )_ba .Time {_gfac :=_ggeb ;_fcge :=_agedc .Year ()-_ggeb .Year ();_gfac =_gfac .AddDate (_fcge ,0,0);if _agedc .After (_gfac ){_gfac =_gfac .AddDate (1,0,0);};_eag :=-12/_fgg ;for _gfac .After (_agedc ){_gfac =_gfac .AddDate (0,_eag ,0);
};return _gfac ;};func _beab (){_gbca =_bb .MustCompile ("\u005e\u0030\u002b\u0024");_fbgbb =_bb .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_dccc =_bb .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");
_eacb =_bb .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_decc =_bb .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");
_gbccb =_bb .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_fdfea =_bb .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");
_cafaf =_bb .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_agab =_bb .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");
_efec =_bb .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");
_dcddf =_bb .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");
_ffddf =_bb .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_aafb +_aafb +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_aafb +_aafb +"\u0029\u002b\u0059+\u0024");_egbd =_bb .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_aafb +_aafb +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_aafb +_aafb +"\u0029\u002b\u0059+\u0024");
_fbged =_bb .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_bgade =_bb .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");
};const _cagd =57358;

// Match implements the MATCH function.
func Match (args []Result )Result {_bgad :=len (args );if _bgad !=2&&_bgad !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ddfeg :=1;if _bgad ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_fbde :=args [2].ValueNumber ;if _fbde ==-1||_fbde ==0{_ddfeg =int (_fbde );};};_feee :=args [1];var _dfbd []Result ;switch _feee .Type {case ResultTypeList :_dfbd =_feee .ValueList ;case ResultTypeArray :_ccbef :=_feee .ValueArray ;for _ ,_eead :=range _ccbef {if len (_eead )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_dfbd =append (_dfbd ,_eead [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_dfdd :=_gcdgb (args [0]);switch _ddfeg {case 0:for _dceb ,_ebfgd :=range _dfbd {if _agae (_ebfgd ,_dfdd ){return MakeNumberResult (float64 (_dceb +1));};};case -1:for _fdfd :=0;_fdfd < len (_dfbd );_fdfd ++{if _agae (_dfbd [_fdfd ],_dfdd ){return MakeNumberResult (float64 (_fdfd +1));
};if _dfdd ._afaga &&(_dfbd [_fdfd ].ValueNumber < _dfdd ._fgfg ){if _fdfd ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_fdfd ));};};case 1:for _gbdd :=0;_gbdd < len (_dfbd );_gbdd ++{if _agae (_dfbd [_gbdd ],_dfdd ){return MakeNumberResult (float64 (_gbdd +1));
};if _dfdd ._afaga &&(_dfbd [_gbdd ].ValueNumber > _dfdd ._fgfg ){if _gbdd ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_gbdd ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};type criteriaRegex struct{_abgb byte ;
_aadad string ;};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_faag :=args [0].AsNumber ();_cafg :=args [1].AsNumber ();if _faag .Type !=ResultTypeNumber ||_cafg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};if _cafg .ValueNumber < _faag .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");
};_bcdcb :=int64 (_faag .ValueNumber );_dffc :=int64 (_cafg .ValueNumber );return MakeNumberResult (float64 (_cbbe .Int63n (_dffc -_bcdcb +1)+_bcdcb ));};const _dddd ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";


// GetFormat returns an empty string for the invalid reference context.
func (_adbab *ivr )GetFormat (cellRef string )string {return ""};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_eeeeg ,_babd ,_cgdfg Expression };

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_ccfd Expression ;_fcbbf ,_gdbf string ;};func (_efgf *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };func (_caace *Lexer )lex (_daaf _b .Reader ){_fbbf ,_gcdec ,_aefa :=0,0,0;_bdgce :=-1;_gcbd ,_ffggf ,_cgfeg :=0,0,0;
_ =_cgfeg ;_ecdfd :=1;_ =_ecdfd ;_fdfebf :=make ([]byte ,4096);_cgegc :=false ;for !_cgegc {_bccg :=0;if _gcbd > 0{_bccg =_gcdec -_gcbd ;};_gcdec =0;_cdgdc ,_dffad :=_daaf .Read (_fdfebf [_bccg :]);if _cdgdc ==0||_dffad !=nil {_cgegc =true ;};_aefa =_cdgdc +_bccg ;
if _aefa < len (_fdfebf ){_bdgce =_aefa ;};{_fbbf =_cfcdb ;_gcbd =0;_ffggf =0;_cgfeg =0;};{var _eabb int ;var _ebgae uint ;if _gcdec ==_aefa {goto _daafb ;};if _fbbf ==0{goto _ebbgc ;};_bgagf :_eabb =int (_egcd [_fbbf ]);_ebgae =uint (_cdbfd [_eabb ]);
_eabb ++;for ;_ebgae > 0;_ebgae --{_eabb ++;switch _cdbfd [_eabb -1]{case 2:_gcbd =_gcdec ;};};switch _fbbf {case 30:switch _fdfebf [_gcdec ]{case 34:goto _bggc ;case 35:goto _fbfbf ;case 36:goto _fedaa ;case 38:goto _gbdg ;case 39:goto _fgbae ;case 40:goto _gdebb ;
case 41:goto _ffcf ;case 42:goto _ggacg ;case 43:goto _ddcd ;case 44:goto _agbff ;case 45:goto _adcge ;case 47:goto _agagg ;case 58:goto _gfbd ;case 59:goto _cbcb ;case 60:goto _gbdgc ;case 61:goto _bcfa ;case 62:goto _cedfe ;case 63:goto _daaag ;case 70:goto _gaafg ;
case 84:goto _fbege ;case 92:goto _ebef ;case 94:goto _gdcd ;case 95:goto _edce ;case 123:goto _bgdf ;case 125:goto _dgcca ;};switch {case _fdfebf [_gcdec ]< 65:switch {case _fdfebf [_gcdec ]> 37:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _bfbff ;
};case _fdfebf [_gcdec ]>=33:goto _daaag ;};case _fdfebf [_gcdec ]> 90:switch {case _fdfebf [_gcdec ]> 93:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ffeg ;};case _fdfebf [_gcdec ]>=91:goto _daaag ;};default:goto _gbddg ;};goto _dgfdd ;case 1:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;
case 47:goto _gecgg ;case 123:goto _gecgg ;case 125:goto _gecgg ;};switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _gecgg ;};case _fdfebf [_gcdec ]> 45:switch {case _fdfebf [_gcdec ]> 63:if 91<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=94{goto _gecgg ;
};case _fdfebf [_gcdec ]>=58:goto _gecgg ;};default:goto _gecgg ;};goto _dgfdd ;case 0:goto _ebbgc ;case 2:if _fdfebf [_gcdec ]==34{goto _fdfb ;};goto _bggc ;case 31:if _fdfebf [_gcdec ]==34{goto _bggc ;};goto _edga ;case 3:switch _fdfebf [_gcdec ]{case 78:goto _ccff ;
case 82:goto _cegaf ;};goto _daaag ;case 4:switch _fdfebf [_gcdec ]{case 47:goto _edbb ;case 85:goto _ddfa ;};goto _daaag ;case 5:if _fdfebf [_gcdec ]==65{goto _debbd ;};goto _daaag ;case 6:switch _fdfebf [_gcdec ]{case 76:goto _ebccd ;case 77:goto _deecf ;
};goto _daaag ;case 7:if _fdfebf [_gcdec ]==76{goto _deecf ;};goto _daaag ;case 8:if _fdfebf [_gcdec ]==33{goto _debbd ;};goto _daaag ;case 9:if _fdfebf [_gcdec ]==69{goto _ddbe ;};goto _daaag ;case 10:if _fdfebf [_gcdec ]==70{goto _gfdf ;};goto _daaag ;
case 11:if _fdfebf [_gcdec ]==33{goto _gafga ;};goto _daaag ;case 12:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 47:goto _daaag ;case 123:goto _daaag ;case 125:goto _daaag ;};switch {case _fdfebf [_gcdec ]< 48:switch {case _fdfebf [_gcdec ]> 35:if 37<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=45{goto _daaag ;
};case _fdfebf [_gcdec ]>=34:goto _daaag ;};case _fdfebf [_gcdec ]> 57:switch {case _fdfebf [_gcdec ]< 65:if 58<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=63{goto _daaag ;};case _fdfebf [_gcdec ]> 90:if 91<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=94{goto _daaag ;
};default:goto _badfd ;};default:goto _eggae ;};goto _dgfdd ;case 13:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 47:goto _daaag ;case 58:goto _ggbc ;case 123:goto _daaag ;case 125:goto _daaag ;};switch {case _fdfebf [_gcdec ]< 48:switch {case _fdfebf [_gcdec ]> 35:if 37<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=45{goto _daaag ;
};case _fdfebf [_gcdec ]>=34:goto _daaag ;};case _fdfebf [_gcdec ]> 57:switch {case _fdfebf [_gcdec ]> 63:if 91<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=94{goto _daaag ;};case _fdfebf [_gcdec ]>=59:goto _daaag ;};default:goto _eggae ;};goto _dgfdd ;case 14:if _fdfebf [_gcdec ]==36{goto _dgcc ;
};if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _fdfg ;};goto _gecgg ;case 15:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _fdfg ;};goto _gecgg ;case 32:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _fdfg ;};goto _aadb ;case 16:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;
case 36:goto _eceg ;case 47:goto _daaag ;case 58:goto _baec ;case 123:goto _daaag ;case 125:goto _daaag ;};switch {case _fdfebf [_gcdec ]< 59:switch {case _fdfebf [_gcdec ]> 45:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _bgggc ;};case _fdfebf [_gcdec ]>=34:goto _daaag ;
};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]> 90:if 91<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=94{goto _daaag ;};case _fdfebf [_gcdec ]>=65:goto _badfd ;};default:goto _daaag ;};goto _dgfdd ;case 17:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;
case 47:goto _gecgg ;case 123:goto _gecgg ;case 125:goto _gecgg ;};switch {case _fdfebf [_gcdec ]< 48:switch {case _fdfebf [_gcdec ]> 35:if 37<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=45{goto _gecgg ;};case _fdfebf [_gcdec ]>=34:goto _gecgg ;};case _fdfebf [_gcdec ]> 57:switch {case _fdfebf [_gcdec ]> 63:if 91<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=94{goto _gecgg ;
};case _fdfebf [_gcdec ]>=58:goto _gecgg ;};default:goto _bgggc ;};goto _dgfdd ;case 33:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 47:goto _ccece ;case 123:goto _ccece ;case 125:goto _ccece ;};switch {case _fdfebf [_gcdec ]< 48:switch {case _fdfebf [_gcdec ]> 35:if 37<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=45{goto _ccece ;
};case _fdfebf [_gcdec ]>=34:goto _ccece ;};case _fdfebf [_gcdec ]> 57:switch {case _fdfebf [_gcdec ]> 63:if 91<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=94{goto _ccece ;};case _fdfebf [_gcdec ]>=58:goto _ccece ;};default:goto _bgggc ;};goto _dgfdd ;case 18:if _fdfebf [_gcdec ]==36{goto _bcfgb ;
};if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _bdcc ;};goto _gecgg ;case 19:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _bdcc ;};goto _gecgg ;case 34:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _bdcc ;};goto _fdbdb ;case 20:switch _fdfebf [_gcdec ]{case 39:goto _daaag ;
case 42:goto _daaag ;case 47:goto _daaag ;case 58:goto _daaag ;case 63:goto _daaag ;};if 91<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=93{goto _daaag ;};goto _acbb ;case 21:switch _fdfebf [_gcdec ]{case 39:goto _bded ;case 42:goto _daaag ;case 47:goto _daaag ;
case 58:goto _daaag ;case 63:goto _daaag ;};if 91<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=93{goto _daaag ;};goto _acbb ;case 22:if _fdfebf [_gcdec ]==33{goto _geeec ;};goto _daaag ;case 35:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 46:goto _abadg ;
case 58:goto _ggbc ;case 101:goto _bgaed ;case 123:goto _efdba ;case 125:goto _efdba ;};switch {case _fdfebf [_gcdec ]< 48:switch {case _fdfebf [_gcdec ]> 35:if 37<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=47{goto _efdba ;};case _fdfebf [_gcdec ]>=34:goto _efdba ;
};case _fdfebf [_gcdec ]> 57:switch {case _fdfebf [_gcdec ]> 63:if 91<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=94{goto _efdba ;};case _fdfebf [_gcdec ]>=59:goto _efdba ;};default:goto _bfbff ;};goto _dgfdd ;case 36:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;
case 47:goto _efdba ;case 101:goto _bgaed ;case 123:goto _efdba ;case 125:goto _efdba ;};switch {case _fdfebf [_gcdec ]< 48:switch {case _fdfebf [_gcdec ]> 35:if 37<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=45{goto _efdba ;};case _fdfebf [_gcdec ]>=34:goto _efdba ;
};case _fdfebf [_gcdec ]> 57:switch {case _fdfebf [_gcdec ]> 63:if 91<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=94{goto _efdba ;};case _fdfebf [_gcdec ]>=58:goto _efdba ;};default:goto _abadg ;};goto _dgfdd ;case 23:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;
case 47:goto _dgbf ;case 123:goto _dgbf ;case 125:goto _dgbf ;};switch {case _fdfebf [_gcdec ]< 48:switch {case _fdfebf [_gcdec ]> 35:if 37<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=45{goto _dgbf ;};case _fdfebf [_gcdec ]>=34:goto _dgbf ;};case _fdfebf [_gcdec ]> 57:switch {case _fdfebf [_gcdec ]> 63:if 91<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=94{goto _dgbf ;
};case _fdfebf [_gcdec ]>=58:goto _dgbf ;};default:goto _bdagf ;};goto _dgfdd ;case 37:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 47:goto _efdba ;case 123:goto _efdba ;case 125:goto _efdba ;};switch {case _fdfebf [_gcdec ]< 48:switch {case _fdfebf [_gcdec ]> 35:if 37<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=45{goto _efdba ;
};case _fdfebf [_gcdec ]>=34:goto _efdba ;};case _fdfebf [_gcdec ]> 57:switch {case _fdfebf [_gcdec ]> 63:if 91<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=94{goto _efdba ;};case _fdfebf [_gcdec ]>=58:goto _efdba ;};default:goto _bdagf ;};goto _dgfdd ;case 38:switch _fdfebf [_gcdec ]{case 61:goto _ddaaa ;
case 62:goto _abgaa ;};goto _egcdb ;case 39:if _fdfebf [_gcdec ]==61{goto _ffaeg ;};goto _feacf ;case 24:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 36:goto _eceg ;case 40:goto _cgaab ;case 46:goto _ggaf ;case 58:goto _baec ;case 92:goto _edaa ;case 95:goto _ceda ;
case 123:goto _daaag ;case 125:goto _daaag ;};switch {case _fdfebf [_gcdec ]< 59:switch {case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _cafbf ;};case _fdfebf [_gcdec ]>=34:goto _daaag ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _cgaaa ;
};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;};default:goto _daaag ;};default:goto _daaag ;};goto _dgfdd ;case 40:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 40:goto _cgaab ;case 46:goto _ggaf ;case 92:goto _edaa ;
case 95:goto _ceda ;case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 58:switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _dfgec ;};case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _ggaf ;
};default:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _ggaf ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;};default:goto _dfgec ;
};default:goto _dfgec ;};goto _dgfdd ;case 41:switch _fdfebf [_gcdec ]{case 46:goto _edaa ;case 92:goto _edaa ;case 95:goto _edaa ;};switch {case _fdfebf [_gcdec ]< 65:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _edaa ;};case _fdfebf [_gcdec ]> 90:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _edaa ;
};default:goto _edaa ;};goto _dfgec ;case 42:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 46:goto _ceda ;case 92:goto _edaa ;case 95:goto _ceda ;case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 58:switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _dfgec ;
};case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _ceda ;};default:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _ceda ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;
};default:goto _dfgec ;};default:goto _dfgec ;};goto _dgfdd ;case 43:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 40:goto _cgaab ;case 46:goto _ggaf ;case 92:goto _edaa ;case 95:goto _ceda ;case 123:goto _ccece ;case 125:goto _ccece ;};switch {case _fdfebf [_gcdec ]< 58:switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _ccece ;
};case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _cafbf ;};default:goto _ccece ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _ggaf ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;
};default:goto _ccece ;};default:goto _ccece ;};goto _dgfdd ;case 44:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 36:goto _eceg ;case 40:goto _cgaab ;case 46:goto _ggaf ;case 58:goto _baec ;case 92:goto _edaa ;case 95:goto _ceda ;case 123:goto _gecgg ;
case 125:goto _gecgg ;};switch {case _fdfebf [_gcdec ]< 59:switch {case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _cafbf ;};case _fdfebf [_gcdec ]>=34:goto _gecgg ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _cgaaa ;
};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;};default:goto _gecgg ;};default:goto _gecgg ;};goto _dgfdd ;case 25:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 36:goto _eceg ;case 40:goto _cgaab ;case 46:goto _ggaf ;
case 58:goto _baec ;case 65:goto _adad ;case 92:goto _edaa ;case 95:goto _ceda ;case 123:goto _daaag ;case 125:goto _daaag ;};switch {case _fdfebf [_gcdec ]< 59:switch {case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _cafbf ;
};case _fdfebf [_gcdec ]>=34:goto _daaag ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 66<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _cgaaa ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;
};default:goto _daaag ;};default:goto _daaag ;};goto _dgfdd ;case 45:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 36:goto _eceg ;case 40:goto _cgaab ;case 46:goto _ggaf ;case 58:goto _baec ;case 76:goto _afdd ;case 92:goto _edaa ;case 95:goto _ceda ;
case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 59:switch {case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _cafbf ;};case _fdfebf [_gcdec ]>=34:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _cgaaa ;
};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;};default:goto _dfgec ;};default:goto _dfgec ;};goto _dgfdd ;case 46:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 36:goto _eceg ;case 40:goto _cgaab ;case 46:goto _ggaf ;
case 58:goto _baec ;case 83:goto _cdee ;case 92:goto _edaa ;case 95:goto _ceda ;case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 59:switch {case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _cafbf ;
};case _fdfebf [_gcdec ]>=34:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _cgaaa ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;
};default:goto _dfgec ;};default:goto _dfgec ;};goto _dgfdd ;case 47:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 36:goto _eceg ;case 40:goto _cgaab ;case 46:goto _ggaf ;case 58:goto _baec ;case 69:goto _ffac ;case 92:goto _edaa ;case 95:goto _ceda ;
case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 59:switch {case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _cafbf ;};case _fdfebf [_gcdec ]>=34:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _cgaaa ;
};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;};default:goto _dfgec ;};default:goto _dfgec ;};goto _dgfdd ;case 26:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 36:goto _eceg ;case 40:goto _cgaab ;case 46:goto _ggaf ;
case 58:goto _baec ;case 79:goto _aeec ;case 82:goto _dcdbd ;case 92:goto _edaa ;case 95:goto _ceda ;case 123:goto _daaag ;case 125:goto _daaag ;};switch {case _fdfebf [_gcdec ]< 59:switch {case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _cafbf ;
};case _fdfebf [_gcdec ]>=34:goto _daaag ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _cgaaa ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;
};default:goto _daaag ;};default:goto _daaag ;};goto _dgfdd ;case 48:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 36:goto _eceg ;case 40:goto _cgaab ;case 46:goto _ggaf ;case 58:goto _baec ;case 68:goto _edafg ;case 92:goto _edaa ;case 95:goto _ceda ;
case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 59:switch {case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _cafbf ;};case _fdfebf [_gcdec ]>=34:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _cgaaa ;
};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;};default:goto _dfgec ;};default:goto _dfgec ;};goto _dgfdd ;case 49:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 36:goto _eceg ;case 40:goto _cgaab ;case 46:goto _ggaf ;
case 58:goto _baec ;case 79:goto _bgcag ;case 92:goto _edaa ;case 95:goto _ceda ;case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 59:switch {case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _cafbf ;
};case _fdfebf [_gcdec ]>=34:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _cgaaa ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;
};default:goto _dfgec ;};default:goto _dfgec ;};goto _dgfdd ;case 50:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 36:goto _eceg ;case 40:goto _cgaab ;case 46:goto _ggaf ;case 58:goto _baec ;case 85:goto _cdee ;case 92:goto _edaa ;case 95:goto _ceda ;
case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 59:switch {case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _cafbf ;};case _fdfebf [_gcdec ]>=34:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _cgaaa ;
};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;};default:goto _dfgec ;};default:goto _dfgec ;};goto _dgfdd ;case 27:switch _fdfebf [_gcdec ]{case 46:goto _edaa ;case 92:goto _edaa ;case 95:goto _edaa ;};switch {case _fdfebf [_gcdec ]< 65:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _edaa ;
};case _fdfebf [_gcdec ]> 90:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _edaa ;};default:goto _edaa ;};goto _daaag ;case 28:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 46:goto _ceda ;case 92:goto _edaa ;case 95:goto _ceda ;case 120:goto _fbgea ;
case 123:goto _daaag ;case 125:goto _daaag ;};switch {case _fdfebf [_gcdec ]< 58:switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _daaag ;};case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _ceda ;
};default:goto _daaag ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _ceda ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;};default:goto _daaag ;
};default:goto _daaag ;};goto _dgfdd ;case 51:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 46:goto _ceda ;case 92:goto _edaa ;case 95:goto _ceda ;case 108:goto _eaff ;case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 58:switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _dfgec ;
};case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _ceda ;};default:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _ceda ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;
};default:goto _dfgec ;};default:goto _dfgec ;};goto _dgfdd ;case 52:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 46:goto _ceda ;case 92:goto _edaa ;case 95:goto _ceda ;case 102:goto _dffcf ;case 110:goto _edgef ;case 123:goto _dfgec ;case 125:goto _dfgec ;
};switch {case _fdfebf [_gcdec ]< 58:switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _dfgec ;};case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _ceda ;};default:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _ceda ;
};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;};default:goto _dfgec ;};default:goto _dfgec ;};goto _dgfdd ;case 53:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 46:goto _ceda ;case 92:goto _edaa ;case 95:goto _ceda ;
case 110:goto _cegg ;case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 58:switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _dfgec ;};case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _ceda ;
};default:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _ceda ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;};default:goto _dfgec ;
};default:goto _dfgec ;};goto _dgfdd ;case 54:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 46:goto _edgab ;case 92:goto _edaa ;case 95:goto _ceda ;case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 58:switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _dfgec ;
};case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _ceda ;};default:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _ceda ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;
};default:goto _dfgec ;};default:goto _dfgec ;};goto _dgfdd ;case 55:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 46:goto _ceda ;case 92:goto _edaa ;case 95:goto _dfea ;case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 58:switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _dfgec ;
};case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _ceda ;};default:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _dfea ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;
};default:goto _dfgec ;};default:goto _dfgec ;};goto _dgfdd ;case 56:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 40:goto _deecbg ;case 46:goto _dfea ;case 92:goto _edaa ;case 95:goto _ceda ;case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 58:switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _dfgec ;
};case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _dfea ;};default:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _dfea ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;
};default:goto _dfgec ;};default:goto _dfgec ;};goto _dgfdd ;case 57:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 46:goto _ceda ;case 92:goto _edaa ;case 95:goto _ceda ;case 109:goto _gbacb ;case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 58:switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _dfgec ;
};case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _ceda ;};default:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _ceda ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;
};default:goto _dfgec ;};default:goto _dfgec ;};goto _dgfdd ;case 58:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 46:goto _ceff ;case 92:goto _edaa ;case 95:goto _ceda ;case 123:goto _dfgec ;case 125:goto _dfgec ;};switch {case _fdfebf [_gcdec ]< 58:switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _dfgec ;
};case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _ceda ;};default:goto _dfgec ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _ceda ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;
};default:goto _dfgec ;};default:goto _dfgec ;};goto _dgfdd ;case 59:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 46:goto _ceda ;case 92:goto _edaa ;case 95:goto _dgbfe ;case 123:goto _gecgg ;case 125:goto _gecgg ;};switch {case _fdfebf [_gcdec ]< 58:switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _gecgg ;
};case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _ceda ;};default:goto _gecgg ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _dgbfe ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;
};default:goto _gecgg ;};default:goto _gecgg ;};goto _dgfdd ;case 29:switch _fdfebf [_gcdec ]{case 33:goto _ggbb ;case 46:goto _ceda ;case 92:goto _edaa ;case 95:goto _ceda ;case 123:goto _daaag ;case 125:goto _daaag ;};switch {case _fdfebf [_gcdec ]< 58:switch {case _fdfebf [_gcdec ]< 37:if 34<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=35{goto _daaag ;
};case _fdfebf [_gcdec ]> 47:if 48<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=57{goto _ceda ;};default:goto _daaag ;};case _fdfebf [_gcdec ]> 63:switch {case _fdfebf [_gcdec ]< 91:if 65<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=90{goto _ceda ;};case _fdfebf [_gcdec ]> 94:if 97<=_fdfebf [_gcdec ]&&_fdfebf [_gcdec ]<=122{goto _ceda ;
};default:goto _daaag ;};default:goto _daaag ;};goto _dgfdd ;};_daaag :_fbbf =0;goto _bfadb ;_dgfdd :_fbbf =1;goto _bfadb ;_bggc :_fbbf =2;goto _bfadb ;_fbfbf :_fbbf =3;goto _bfadb ;_ccff :_fbbf =4;goto _bfadb ;_edbb :_fbbf =5;goto _bfadb ;_ddfa :_fbbf =6;
goto _bfadb ;_ebccd :_fbbf =7;goto _bfadb ;_deecf :_fbbf =8;goto _bfadb ;_cegaf :_fbbf =9;goto _bfadb ;_ddbe :_fbbf =10;goto _bfadb ;_gfdf :_fbbf =11;goto _bfadb ;_fedaa :_fbbf =12;goto _bfadb ;_eggae :_fbbf =13;goto _bfadb ;_ggbc :_fbbf =14;goto _bfadb ;
_dgcc :_fbbf =15;goto _bfadb ;_badfd :_fbbf =16;goto _bfadb ;_eceg :_fbbf =17;goto _bfadb ;_baec :_fbbf =18;goto _bfadb ;_bcfgb :_fbbf =19;goto _bfadb ;_fgbae :_fbbf =20;goto _bfadb ;_acbb :_fbbf =21;goto _bfadb ;_bded :_fbbf =22;goto _bfadb ;_bgaed :_fbbf =23;
goto _bfadb ;_gbddg :_fbbf =24;goto _bfadb ;_gaafg :_fbbf =25;goto _bfadb ;_fbege :_fbbf =26;goto _bfadb ;_ebef :_fbbf =27;goto _bfadb ;_edce :_fbbf =28;goto _bfadb ;_ffeg :_fbbf =29;goto _bfadb ;_gecgg :_fbbf =30;goto _bffd ;_ggbb :_fbbf =30;goto _ddccg ;
_debbd :_fbbf =30;goto _ccacf ;_gafga :_fbbf =30;goto _bffbb ;_geeec :_fbbf =30;goto _cfce ;_dgbf :_fbbf =30;goto _acfbg ;_cgaab :_fbbf =30;goto _cgcfb ;_gbdg :_fbbf =30;goto _dadg ;_gdebb :_fbbf =30;goto _eafdd ;_ffcf :_fbbf =30;goto _fdfdb ;_ggacg :_fbbf =30;
goto _gaef ;_ddcd :_fbbf =30;goto _cacab ;_agbff :_fbbf =30;goto _abef ;_adcge :_fbbf =30;goto _agfcg ;_agagg :_fbbf =30;goto _bbcbe ;_gfbd :_fbbf =30;goto _agfdda ;_cbcb :_fbbf =30;goto _dbbb ;_bcfa :_fbbf =30;goto _ggeg ;_gdcd :_fbbf =30;goto _fbff ;
_bgdf :_fbbf =30;goto _eccge ;_dgcca :_fbbf =30;goto _ccbg ;_edga :_fbbf =30;goto _fdcf ;_aadb :_fbbf =30;goto _gbda ;_ccece :_fbbf =30;goto _cefed ;_fdbdb :_fbbf =30;goto _adccg ;_efdba :_fbbf =30;goto _agcfb ;_egcdb :_fbbf =30;goto _bdac ;_ddaaa :_fbbf =30;
goto _eaca ;_abgaa :_fbbf =30;goto _efadb ;_feacf :_fbbf =30;goto _beda ;_ffaeg :_fbbf =30;goto _adcad ;_dfgec :_fbbf =30;goto _bdbg ;_deecbg :_fbbf =30;goto _bbffe ;_fdfb :_fbbf =31;goto _ffdc ;_fdfg :_fbbf =32;goto _bfadb ;_bgggc :_fbbf =33;goto _fdeb ;
_bdcc :_fbbf =34;goto _bfadb ;_bfbff :_fbbf =35;goto _ggcc ;_abadg :_fbbf =36;goto _ggcc ;_bdagf :_fbbf =37;goto _ggcc ;_gbdgc :_fbbf =38;goto _bfadb ;_cedfe :_fbbf =39;goto _bfadb ;_ggaf :_fbbf =40;goto _cceb ;_edaa :_fbbf =41;goto _bfadb ;_ceda :_fbbf =42;
goto _cceb ;_cafbf :_fbbf =43;goto _fdeb ;_cgaaa :_fbbf =44;goto _cceb ;_ffac :_fbbf =44;goto _fcdda ;_bgcag :_fbbf =44;goto _ccdg ;_adad :_fbbf =45;goto _cceb ;_afdd :_fbbf =46;goto _cceb ;_cdee :_fbbf =47;goto _cceb ;_aeec :_fbbf =48;goto _cceb ;_edafg :_fbbf =49;
goto _cceb ;_dcdbd :_fbbf =50;goto _cceb ;_fbgea :_fbbf =51;goto _cceb ;_eaff :_fbbf =52;goto _cceb ;_dffcf :_fbbf =53;goto _cceb ;_cegg :_fbbf =54;goto _cceb ;_edgab :_fbbf =55;goto _cceb ;_dfea :_fbbf =56;goto _cceb ;_edgef :_fbbf =57;goto _cceb ;_gbacb :_fbbf =58;
goto _cceb ;_ceff :_fbbf =59;goto _cceb ;_dgbfe :_fbbf =59;goto _gcafe ;_ccacf :_eabb =3;goto _bdaea ;_bffbb :_eabb =5;goto _bdaea ;_ddccg :_eabb =7;goto _bdaea ;_cfce :_eabb =9;goto _bdaea ;_cgcfb :_eabb =11;goto _bdaea ;_bbffe :_eabb =13;goto _bdaea ;
_dadg :_eabb =15;goto _bdaea ;_eccge :_eabb =17;goto _bdaea ;_ccbg :_eabb =19;goto _bdaea ;_eafdd :_eabb =21;goto _bdaea ;_fdfdb :_eabb =23;goto _bdaea ;_cacab :_eabb =25;goto _bdaea ;_agfcg :_eabb =27;goto _bdaea ;_gaef :_eabb =29;goto _bdaea ;_bbcbe :_eabb =31;
goto _bdaea ;_fbff :_eabb =33;goto _bdaea ;_ggeg :_eabb =35;goto _bdaea ;_eaca :_eabb =37;goto _bdaea ;_adcad :_eabb =39;goto _bdaea ;_efadb :_eabb =41;goto _bdaea ;_agfdda :_eabb =43;goto _bdaea ;_dbbb :_eabb =45;goto _bdaea ;_abef :_eabb =47;goto _bdaea ;
_agcfb :_eabb =49;goto _bdaea ;_cefed :_eabb =51;goto _bdaea ;_gbda :_eabb =53;goto _bdaea ;_adccg :_eabb =55;goto _bdaea ;_bdbg :_eabb =57;goto _bdaea ;_fdcf :_eabb =59;goto _bdaea ;_bdac :_eabb =61;goto _bdaea ;_beda :_eabb =63;goto _bdaea ;_acfbg :_eabb =65;
goto _bdaea ;_bffd :_eabb =67;goto _bdaea ;_fcdda :_eabb =72;goto _bdaea ;_ggcc :_eabb =75;goto _bdaea ;_fdeb :_eabb =78;goto _bdaea ;_ccdg :_eabb =81;goto _bdaea ;_gcafe :_eabb =84;goto _bdaea ;_cceb :_eabb =87;goto _bdaea ;_ffdc :_eabb =90;goto _bdaea ;
_bdaea :_ebgae =uint (_cdbfd [_eabb ]);_eabb ++;for ;_ebgae > 0;_ebgae --{_eabb ++;switch _cdbfd [_eabb -1]{case 3:_ffggf =_gcdec +1;case 4:_cgfeg =1;case 5:_cgfeg =2;case 6:_cgfeg =3;case 7:_cgfeg =4;case 8:_cgfeg =11;case 9:_cgfeg =14;case 10:_cgfeg =15;
case 11:_ffggf =_gcdec +1;{_caace .emit (_ggef ,_fdfebf [_gcbd :_ffggf ]);};case 12:_ffggf =_gcdec +1;{_caace .emit (_gfgcg ,_fdfebf [_gcbd :_ffggf ]);};case 13:_ffggf =_gcdec +1;{_caace .emit (_fdaa ,_fdfebf [_gcbd :_ffggf -1]);};case 14:_ffggf =_gcdec +1;
{_caace .emit (_fdaa ,_fdfebf [_gcbd +1:_ffggf -2]);};case 15:_ffggf =_gcdec +1;{_caace .emit (_dfcd ,_fdfebf [_gcbd :_ffggf -1]);};case 16:_ffggf =_gcdec +1;{_caace .emit (_dfcd ,_fdfebf [_gcbd :_ffggf -1]);};case 17:_ffggf =_gcdec +1;{_caace .emit (_bcdaa ,_fdfebf [_gcbd :_ffggf ]);
};case 18:_ffggf =_gcdec +1;{_caace .emit (_cafca ,_fdfebf [_gcbd :_ffggf ]);};case 19:_ffggf =_gcdec +1;{_caace .emit (_fgdf ,_fdfebf [_gcbd :_ffggf ]);};case 20:_ffggf =_gcdec +1;{_caace .emit (_dbadd ,_fdfebf [_gcbd :_ffggf ]);};case 21:_ffggf =_gcdec +1;
{_caace .emit (_edbd ,_fdfebf [_gcbd :_ffggf ]);};case 22:_ffggf =_gcdec +1;{_caace .emit (_cgaff ,_fdfebf [_gcbd :_ffggf ]);};case 23:_ffggf =_gcdec +1;{_caace .emit (_dbeeb ,_fdfebf [_gcbd :_ffggf ]);};case 24:_ffggf =_gcdec +1;{_caace .emit (_bbcb ,_fdfebf [_gcbd :_ffggf ]);
};case 25:_ffggf =_gcdec +1;{_caace .emit (_acebd ,_fdfebf [_gcbd :_ffggf ]);};case 26:_ffggf =_gcdec +1;{_caace .emit (_faed ,_fdfebf [_gcbd :_ffggf ]);};case 27:_ffggf =_gcdec +1;{_caace .emit (_cdcfg ,_fdfebf [_gcbd :_ffggf ]);};case 28:_ffggf =_gcdec +1;
{_caace .emit (_gebc ,_fdfebf [_gcbd :_ffggf ]);};case 29:_ffggf =_gcdec +1;{_caace .emit (_fadfb ,_fdfebf [_gcbd :_ffggf ]);};case 30:_ffggf =_gcdec +1;{_caace .emit (_affff ,_fdfebf [_gcbd :_ffggf ]);};case 31:_ffggf =_gcdec +1;{_caace .emit (_eceba ,_fdfebf [_gcbd :_ffggf ]);
};case 32:_ffggf =_gcdec +1;{_caace .emit (_aagb ,_fdfebf [_gcbd :_ffggf ]);};case 33:_ffggf =_gcdec +1;{_caace .emit (_cedbd ,_fdfebf [_gcbd :_ffggf ]);};case 34:_ffggf =_gcdec ;_gcdec --;{_caace .emit (_aebf ,_fdfebf [_gcbd :_ffggf ]);};case 35:_ffggf =_gcdec ;
_gcdec --;{_caace .emit (_cagd ,_fdfebf [_gcbd :_ffggf ]);};case 36:_ffggf =_gcdec ;_gcdec --;{_caace .emit (_afeb ,_fdfebf [_gcbd :_ffggf ]);};case 37:_ffggf =_gcdec ;_gcdec --;{_caace .emit (_bagcd ,_fdfebf [_gcbd :_ffggf ]);};case 38:_ffggf =_gcdec ;
_gcdec --;{_caace .emit (_beeg ,_fdfebf [_gcbd :_ffggf ]);};case 39:_ffggf =_gcdec ;_gcdec --;{_caace .emit (_adcf ,_fdfebf [_gcbd +1:_ffggf -1]);};case 40:_ffggf =_gcdec ;_gcdec --;{_caace .emit (_dbbc ,_fdfebf [_gcbd :_ffggf ]);};case 41:_ffggf =_gcdec ;
_gcdec --;{_caace .emit (_bacc ,_fdfebf [_gcbd :_ffggf ]);};case 42:_gcdec =(_ffggf )-1;{_caace .emit (_aebf ,_fdfebf [_gcbd :_ffggf ]);};case 43:switch _cgfeg {case 0:{_fbbf =0;goto _bfadb ;};case 1:{_gcdec =(_ffggf )-1;_caace .emit (_dgdg ,_fdfebf [_gcbd :_ffggf ]);
};case 2:{_gcdec =(_ffggf )-1;_caace .emit (_aebf ,_fdfebf [_gcbd :_ffggf ]);};case 3:{_gcdec =(_ffggf )-1;_caace .emit (_cagd ,_fdfebf [_gcbd :_ffggf ]);};case 4:{_gcdec =(_ffggf )-1;_caace .emit (_fdcb ,_fdfebf [_gcbd :_ffggf ]);};case 11:{_gcdec =(_ffggf )-1;
_caace .emit (_ccfbb ,_fdfebf [_gcbd :_ffggf ]);};case 14:{_gcdec =(_ffggf )-1;_caace .emit (_beeg ,_fdfebf [_gcbd :_ffggf ]);};case 15:{_gcdec =(_ffggf )-1;_caace .emit (_adcf ,_fdfebf [_gcbd +1:_ffggf -1]);};};};};goto _bfadb ;_bfadb :_eabb =int (_gdfgcc [_fbbf ]);
_ebgae =uint (_cdbfd [_eabb ]);_eabb ++;for ;_ebgae > 0;_ebgae --{_eabb ++;switch _cdbfd [_eabb -1]{case 0:_gcbd =0;case 1:_cgfeg =0;};};if _fbbf ==0{goto _ebbgc ;};if _gcdec ++;_gcdec !=_aefa {goto _bgagf ;};_daafb :{};if _gcdec ==_bdgce {switch _fbbf {case 1:goto _gecgg ;
case 2:goto _gecgg ;case 31:goto _edga ;case 14:goto _gecgg ;case 15:goto _gecgg ;case 32:goto _aadb ;case 17:goto _gecgg ;case 33:goto _ccece ;case 18:goto _gecgg ;case 19:goto _gecgg ;case 34:goto _fdbdb ;case 35:goto _efdba ;case 36:goto _efdba ;case 23:goto _dgbf ;
case 37:goto _efdba ;case 38:goto _egcdb ;case 39:goto _feacf ;case 40:goto _dfgec ;case 41:goto _dfgec ;case 42:goto _dfgec ;case 43:goto _ccece ;case 44:goto _gecgg ;case 45:goto _dfgec ;case 46:goto _dfgec ;case 47:goto _dfgec ;case 48:goto _dfgec ;
case 49:goto _dfgec ;case 50:goto _dfgec ;case 51:goto _dfgec ;case 52:goto _dfgec ;case 53:goto _dfgec ;case 54:goto _dfgec ;case 55:goto _dfgec ;case 56:goto _dfgec ;case 57:goto _dfgec ;case 58:goto _dfgec ;case 59:goto _gecgg ;};};_ebbgc :{};};if _gcbd > 0{copy (_fdfebf [0:],_fdfebf [_gcbd :]);
};};_ =_bdgce ;if _fbbf ==_dgda {_caace .emit (_fdgcb ,nil );};close (_caace ._defdf );};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_fbge :=len (args );if _fbge ==0||_fbge > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");
};_fbea :=_fccfe (args [0]);_adfae :=[]float64 {};for _ ,_beed :=range _fbea {for _ ,_fcdba :=range _beed {if _fcdba .Type ==ResultTypeNumber &&!_fcdba .IsBoolean {_adfae =append (_adfae ,_fcdba .ValueNumber );};};};_fbd :=len (_adfae );if len (_adfae )< 2{return MakeErrorResultType (ErrorTypeNum ,"");
};_eagd :=0.1;if _fbge ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_eagd =args [1].ValueNumber ;if _eagd <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");
};};_deb :=[]float64 {};for _bdcd :=0;_bdcd < _fbd ;_bdcd ++{if _bdcd ==0{_deb =append (_deb ,0);}else {_deb =append (_deb ,_deb [_bdcd -1]+365);};};return _ccaa (_adfae ,_deb ,_eagd );};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_agac :=len (args );if _agac < 3||_agac > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ffgc :=args [0].ValueNumber ;if _ffgc !=float64 (int (_ffgc )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfca :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_aeacg :=args [2].ValueNumber ;_ddaa :=0.0;if _agac >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ddaa =args [3].ValueNumber ;};_ccf :=0.0;if _agac >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ccf =args [4].ValueNumber ;if _ccf !=0{_ccf =1;};};_aaddb :=0.1;if _agac >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aaddb =args [5].ValueNumber ;};_cagf :=100;_afff :=0;_bedba :=false ;_dfef :=1e-6;_cbgd :=_aaddb ;for _afff < _cagf &&!_bedba {_gab :=_ea .Pow (_cbgd +1,_ffgc );_fccf :=_ea .Pow (_cbgd +1,_ffgc -1);_bacb :=_cbgd *_ccf +1;_dce :=_dfca *(_gab -1);_ccgg :=_ddaa +_gab *_aeacg +_dce *_bacb /_cbgd ;
_cdega :=_ffgc *_fccf *_aeacg -_dce *_bacb /_ea .Pow (_cbgd ,2);_edfc :=(_ffgc *_dfca *_fccf *_bacb +_dce *_ccf )/_cbgd ;_dcfe :=_ccgg /(_cdega +_edfc );if _ea .Abs (_dcfe )< _dfef {_bedba =true ;};_afff ++;_cbgd -=_dcfe ;};return MakeNumberResult (_cbgd );
};var _cdbfd []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_bdaac ,_fbcf :=_fcdbe ("\u0046\u0049\u004e\u0044",args );if _fbcf .Type !=ResultTypeEmpty {return _fbcf ;};_feccb :=_bdaac ._cagbb ;if _feccb ==""{return MakeNumberResult (1.0);};_cfe :=_bdaac ._aaeaa ;_fbgef :=_bdaac ._fdgf ;
_ccdfe :=1;for _bbfb :=range _cfe {if _ccdfe < _fbgef {_ccdfe ++;continue ;};_cdbc :=_bd .Index (_cfe [_bbfb :],_feccb );if _cdbc ==0{return MakeNumberResult (float64 (_ccdfe ));};_ccdfe ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};func _bbab (_acfb int )string {if _acfb >=1&&_acfb -1< len (_efedd ){if _efedd [_acfb -1]!=""{return _efedd [_acfb -1];};};return _a .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_acfb );};

// Reference returns an invalid reference for FunctionCall.
func (_bgecf FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _bcdaa =57377;

// GetLocked returns FALSE for the invalid reference context.
func (_gffcef *ivr )GetLocked (cellRef string )bool {return false };const _gaeb =_ba .Millisecond *1000;

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_febf :=args [0].ValueNumber ;_eba :=args [1].ValueNumber ;if _eba < _febf {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");
};if _eba ==_febf {return MakeNumberResult (0);};_gbg :=_bd .ToLower (args [2].ValueString );if _gbg =="\u0064"{return MakeNumberResult (_eba -_febf );};_ggf :=_aecd (_febf );_acd :=_aecd (_eba );_abdf ,_gdc ,_fag :=_ggf .Date ();_gbe ,_eac ,_dga :=_acd .Date ();
_def :=int (_gdc );_dfde :=int (_eac );var _adf float64 ;switch _gbg {case "\u0079":_adf =float64 (_gbe -_abdf );if _dfde < _def ||(_dfde ==_def &&_dga < _fag ){_adf --;};case "\u006d":_cbg :=_gbe -_abdf ;_afb :=_dfde -_def ;if _dga < _fag {_afb --;};if _afb < 0{_cbg --;
_afb +=12;};_adf =float64 (_cbg *12+_afb );case "\u006d\u0064":_edde :=_dfde ;if _dga < _fag {_edde --;};_adf =float64 (int (_eba -_bad (_gbe ,_edde ,_fag )));case "\u0079\u006d":_adf =float64 (_dfde -_def );if _dga < _fag {_adf --;};if _adf < 0{_adf +=12;
};case "\u0079\u0064":_gcgf :=_gbe ;if _dfde < _def ||(_dfde ==_def &&_dga < _fag ){_gcgf --;};_adf =float64 (int (_eba -_bad (_gcgf ,_def ,_fag )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");
};return MakeNumberResult (_adf );};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_bca ,_debe :=_acab (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _debe .Type ==ResultTypeError {return _debe ;};_fbgbd :=_bca ._fgff ;_ccdc :=_bca ._eed ;_afaa :=_bca ._adc ;_baeab :=_bca ._bbe ;_cef :=_bca ._cebe ;
_cefe :=_bca ._gcgec ;_cdba :=_fdce (_fbgbd ,_ccdc ,_afaa ,_baeab ,_cef ,_cefe );if _cdba .Type ==ResultTypeError {return _cdba ;};_fcfd :=_cdba .ValueNumber /(1.0+_baeab /_cef );return MakeNumberResult (_fcfd );};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_gagdf ,_bfba :=_egagb (args ,true );if _bfba ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_gagdf /_bfba );};func _bcdcc (_bbge int )string {if _bbge >=0&&_bbge < len (_bcgd ){if _bcgd [_bbge ]!=""{return _bcgd [_bbge ];};};return _a .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_bbge );};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_geba :=args [0].AsNumber ();if _geba .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_baba :=float64 (1);if _geba .ValueNumber < 0{_baba =-1;};if len (args )> 1{_cdcge :=args [1].AsNumber ();if _cdcge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_baba =_cdcge .ValueNumber ;};_ffga :=float64 (1);if len (args )> 2{_edbfb :=args [2].AsNumber ();if _edbfb .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ffga =_edbfb .ValueNumber ;};if len (args )==1{return MakeNumberResult (_ea .Floor (_geba .ValueNumber ));};_dadde :=_geba .ValueNumber ;_dadde ,_aecca :=_ea .Modf (_dadde /_baba );if _aecca !=0&&_geba .ValueNumber < 0&&_ffga > 0{_dadde ++;};return MakeNumberResult (_dadde *_baba );
};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_gegf :=MakeNumberResult (0);for _ ,_cgdgg :=range args {_cgdgg =_cgdgg .AsNumber ();switch _cgdgg .Type {case ResultTypeNumber :_gegf .ValueNumber +=_cgdgg .ValueNumber ;case ResultTypeList ,ResultTypeArray :_bebag :=Sum (_cgdgg .ListValues ());
if _bebag .Type !=ResultTypeNumber {return _bebag ;};_gegf .ValueNumber +=_bebag .ValueNumber ;case ResultTypeString :case ResultTypeError :return _cgdgg ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cgdgg .Type ));
};};return _gegf ;};func _eeb ()evCache {_cdc :=evCache {};_cdc ._acg =make (map[string ]Result );_cdc ._gca =&_dd .Mutex {};return _cdc ;};var _dgeef =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func _fcdbe (_geff string ,_afgg []Result )(*parsedSearchObject ,Result ){_bagfe :=len (_afgg );if _bagfe !=2&&_bagfe !=3{return nil ,MakeErrorResult (_geff +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eace :=_afgg [0];if _eace .Type ==ResultTypeError {return nil ,_eace ;};if _eace .Type !=ResultTypeString &&_eace .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_gedd :=_afgg [1];if _gedd .Type ==ResultTypeError {return nil ,_gedd ;};if _gedd .Type !=ResultTypeString &&_gedd .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");
};_aecg :=_gedd .Value ();_dccf :=_eace .Value ();_fbab :=1;if _bagfe ==3&&_afgg [2].Type !=ResultTypeEmpty {_ccbf :=_afgg [2];if _ccbf .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");
};_fbab =int (_ccbf .ValueNumber );if _fbab < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};if _fbab > len (_aecg ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};};return &parsedSearchObject {_dccf ,_aecg ,_fbab },_cff ;};func _agae (_bgbgg Result ,_gabc *criteriaParsed )bool {if _bgbgg .Type ==ResultTypeEmpty {return false ;};if _gabc ._afaga {return _bgbgg .ValueNumber ==_gabc ._fgfg ;}else {_fcdbcd :=_bd .ToLower (_bgbgg .ValueString );
return _gabc ._ecdf ==_fcdbcd ||_fb .Match (_gabc ._ecdf ,_fcdbcd );};};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_dbgd :=len (args );if _dbgd !=4&&_dbgd !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gcgd ,_gdgd ,_gdgg :=_gece (args [0],args [1],"\u0044\u0049\u0053\u0043");if _gdgg .Type ==ResultTypeError {return _gdgg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cae :=args [2].ValueNumber ;if _cae <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eafd :=args [3].ValueNumber ;if _eafd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egbe :=0;if _dbgd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egbe =int (args [4].ValueNumber );if !_agdc (_egbe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");
};};_dddaf ,_gdgg :=_ead (_gcgd ,_gdgd ,_egbe );if _gdgg .Type ==ResultTypeError {return _gdgg ;};return MakeNumberResult ((_eafd -_cae )/_eafd /_dddaf );};func init (){_ccg ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );
RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );
RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );
RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );
};

// Eval evaluates and returns the result of a function call.
func (_bacga FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_gfcbae :=LookupFunction (_bacga ._ggbg );if _gfcbae !=nil {_bdbc :=make ([]Result ,len (_bacga ._bgfdd ));for _dcdbf ,_cgfe :=range _bacga ._bgfdd {_bdbc [_dcdbf ]=_cgfe .Eval (ctx ,ev );
_bdbc [_dcdbf ].Ref =_cgfe .Reference (ctx ,ev );};if _ ,_bgcg :=_becdd [_bacga ._ggbg ];!_bgcg {if _eefgb ,_gffca :=_eabdf (_bdbc );_eefgb {return _gffca ;};};return _gfcbae (_bdbc );};_defcg :=LookupFunctionComplex (_bacga ._ggbg );if _defcg !=nil {_dfgfg :=make ([]Result ,len (_bacga ._bgfdd ));
for _fdda ,_cgge :=range _bacga ._bgfdd {_dfgfg [_fdda ]=_cgge .Eval (ctx ,ev );_dfgfg [_fdda ].Ref =_cgge .Reference (ctx ,ev );};if _ ,_cegd :=_becdd [_bacga ._ggbg ];!_cegd {if _fabf ,_fbacg :=_eabdf (_dfgfg );_fabf {return _fbacg ;};};return _defcg (ctx ,ev ,_dfgfg );
};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_bacga ._ggbg );};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_gfcg ,_efae :=_fbfb (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _efae .Type ==ResultTypeError {return _efae ;};return MakeNumberResult (_bfcg (_gfcg ._ebg ,_gfcg ._ffad ,_gfcg ._gadg ,_gfcg ._agcg ));
};func _gece (_cfgb ,_dfeb Result ,_geaa string )(float64 ,float64 ,Result ){_fdba ,_cbeb :=_cbeg (_cfgb ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_geaa );if _cbeb .Type ==ResultTypeError {return 0,0,_cbeb ;};_eeab ,_cbeb :=_cbeg (_dfeb ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_geaa );
if _cbeb .Type ==ResultTypeError {return 0,0,_cbeb ;};if _fdba >=_eeab {return 0,0,MakeErrorResultType (ErrorTypeNum ,_geaa +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};return _fdba ,_eeab ,_cff ;};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bcga :=args [0].AsNumber ();if _bcga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_agbaf :=args [1].AsNumber ();if _agbaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};return MakeNumberResult (_ea .Pow (_bcga .ValueNumber ,_agbaf .ValueNumber ));};

// HasFormula returns FALSE for the invalid reference context.
func (_fcfda *ivr )HasFormula (cellRef string )bool {return false };var _daggd =[...]uint8 {0,17,33,49,63,78,93,108};func _acaa (_adg ,_bagf ,_gcde float64 )float64 {return (_adg *3600+_bagf *60+_gcde )/86400};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_ggag HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_bcgaa :=_ggag .horizontalRangeReference ();if _bdbae ,_cdfc :=ev .GetFromCache (_bcgaa );_cdfc {return _bdbae ;};_deecb ,_bggaf :=_babb (ctx ,_ggag ._fgba ,_ggag ._deeb );_bcbdg :=_adge (ctx ,ev ,_deecb ,_bggaf );
ev .SetCache (_bcgaa ,_bcbdg );return _bcbdg ;};type node struct{_cgbda tokenType ;_dacf string ;};const _cfcdb int =30;

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_ddbg :=len (args );if _ddbg < 3||_ddbg > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ffcbb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_eafe :=args [1].ValueNumber ;if _eafe !=float64 (int (_eafe )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acdf :=args [2].ValueNumber ;_eadc :=0.0;if _ddbg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eadc =args [3].ValueNumber ;};_aagd :=0;if _ddbg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aagd =int (args [4].ValueNumber );if _aagd !=0{_aagd =1;};};return MakeNumberResult (_bgaa (_ffcbb ,_eafe ,_acdf ,_eadc ,_aagd ));};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_bd .NewReader (s ));};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fadf :=args [0];if _fadf .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bfccg :=len (_fadf .ValueArray );for _ ,_cabg :=range _fadf .ValueArray {if len (_cabg )!=_bfccg {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");
};};return MakeNumberResult (_fbccg (_fadf .ValueArray ));};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ggcf ,_bdde ,_eaacd :=_gece (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _eaacd .Type ==ResultTypeError {return _eaacd ;};_fcgb ,_eaacd :=_cbeg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _eaacd .Type ==ResultTypeError {return _eaacd ;};if _fcgb >=_ggcf {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};_bgcca :=args [3];if _bgcca .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_beba :=_bgcca .ValueNumber ;if _beba < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_fbcgf :=args [4];if _fbcgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_adb :=_fbcgf .ValueNumber ;if _adb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_fcga :=args [5];
if _fcga .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_bbdf :=_fcga .ValueNumber ;if _bbdf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gegbb :=args [6];
if _gegbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fffb :=float64 (int (_gegbb .ValueNumber ));if !_ece (_fffb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gbfcc :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_febfa :=args [7];
if _febfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_gbfcc =int (_febfa .ValueNumber );if !_agdc (_gbfcc ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");
};};_abee ,_eaacd :=_ead (_fcgb ,_bdde ,_gbfcc );if _eaacd .Type ==ResultTypeError {return _eaacd ;};_abee *=_fffb ;_dcdc ,_eaacd :=_ead (_ggcf ,_bdde ,_gbfcc );if _eaacd .Type ==ResultTypeError {return _eaacd ;};_dcdc *=_fffb ;_fgdc ,_eaacd :=_ead (_fcgb ,_ggcf ,_gbfcc );
if _eaacd .Type ==ResultTypeError {return _eaacd ;};_fgdc *=_fffb ;_cfdf :=_bbdf +_abee *100*_beba /_fffb ;_cfdf /=_dcdc *_adb /_fffb +1;_cfdf -=_fgdc *100*_beba /_fffb ;return MakeNumberResult (_cfdf );};type noCache struct{};

// Eval evaluates and returns the result of a Negate expression.
func (_faagg Negate )Eval (ctx Context ,ev Evaluator )Result {_beggc :=_faagg ._ffabb .Eval (ctx ,ev );if _beggc .Type ==ResultTypeNumber {return MakeNumberResult (-_beggc .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eeadg :=args [0].AsString ();if _eeadg .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ccaaa :=args [1].AsNumber ();if _ccaaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfgcd :=_eeadg .ValueString ;if len (_gfgcd )> 2&&(_bd .HasPrefix (_gfgcd ,"\u0030\u0078")||_bd .HasPrefix (_gfgcd ,"\u0030\u0058")){_gfgcd =_gfgcd [2:];};_fbcae ,_deeg :=_bc .ParseInt (_gfgcd ,int (_ccaaa .ValueNumber ),64);if _deeg !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");
};return MakeNumberResult (float64 (_fbcae ));};func _dbdaba (_abbg []Result ,_dfcef bool )Result {_gdfgcg :="\u004d\u0041\u0058";if _dfcef {_gdfgcg ="\u004d\u0041\u0058\u0041";};if len (_abbg )==0{return MakeErrorResult (_gdfgcg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfcd :=-_ea .MaxFloat64 ;for _ ,_ecbbc :=range _abbg {switch _ecbbc .Type {case ResultTypeNumber :if (_dfcef ||!_ecbbc .IsBoolean )&&_ecbbc .ValueNumber > _gfcd {_gfcd =_ecbbc .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_fbbd :=_dbdaba (_ecbbc .ListValues (),_dfcef );
if _fbbd .ValueNumber > _gfcd {_gfcd =_fbbd .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_cecfc :=0.0;if _dfcef {_cecfc =_ecbbc .AsNumber ().ValueNumber ;};if _cecfc > _gfcd {_gfcd =_cecfc ;};default:_ae .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_gdfgcg +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ecbbc .Type );
};};if _gfcd ==-_ea .MaxFloat64 {_gfcd =0;};return MakeNumberResult (_gfcd );};func _cdeb (_afa []Result ,_fffe string )(*amorArgs ,Result ){_eca :=len (_afa );if _eca !=6&&_eca !=7{return nil ,MakeErrorResult (_fffe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _afa [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fffe +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_egf :=_afa [0].ValueNumber ;
if _egf < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fffe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_gadb ,_acfc :=_cbeg (_afa [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_fffe );if _acfc .Type ==ResultTypeError {return nil ,_acfc ;};_effc ,_acfc :=_cbeg (_afa [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_fffe );
if _acfc .Type ==ResultTypeError {return nil ,_acfc ;};if _effc < _gadb {return nil ,MakeErrorResultType (ErrorTypeNum ,_fffe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");
};if _afa [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fffe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cbbfc :=_afa [3].ValueNumber ;if _cbbfc < 0||_cbbfc > _egf {return nil ,MakeErrorResultType (ErrorTypeNum ,_fffe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");
};if _afa [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fffe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cdef :=int (_afa [4].ValueNumber );if _cdef < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fffe +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if _afa [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fffe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_eaeb :=_afa [5].ValueNumber ;if _eaeb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fffe +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");
};_bbec :=0;if _eca ==7&&_afa [6].Type !=ResultTypeEmpty {if _afa [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fffe +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bbec =int (_afa [6].ValueNumber );if !_agdc (_bbec )||_bbec ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_fffe );
};};return &amorArgs {_egf ,_gadb ,_effc ,_cbbfc ,_cdef ,_eaeb ,_bbec },_cff ;};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};for _agfdg :=0;_agfdg < len (args )-1;_agfdg +=2{if args [_agfdg ].ValueNumber ==1{return args [_agfdg +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};type cumulArgs struct{_bac float64 ;_afbd float64 ;_dgea float64 ;_ebf float64 ;_abbc float64 ;
_bccd int ;};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_gccg :=args [0];if _gccg .Type !=ResultTypeArray &&_gccg .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_egbec :=_fccfe (_gccg );_aaca :=args [2];if _aaca .Type !=ResultTypeArray &&_aaca .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_dfcee :=_fccfe (_aaca );_fbacb :=_gcdgb (args [1]);_bdaf :=0.0;for _gabb ,_bgaaa :=range _egbec {for _cgaea ,_gbgbd :=range _bgaaa {if _cedc (_gbgbd ,_fbacb ){_bdaf +=_dfcee [_gabb ][_cgaea ].ValueNumber ;};};};return MakeNumberResult (_bdaf );};var _cgbb =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};
var _abea =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
type rangeIndex struct{_aeaf int ;_bfgca int ;};func (_debba *ivr )SetOffset (col ,row uint32 ){};

// Eval evaluates a range returning a list of results or an error.
func (_cdag Range )Eval (ctx Context ,ev Evaluator )Result {_gdfgd :=_cdag ._gcddf .Reference (ctx ,ev );_afcgg :=_cdag ._ebad .Reference (ctx ,ev );_dfebb :=_dgbage (_gdfgd ,_afcgg );if _gdfgd .Type ==ReferenceTypeCell &&_afcgg .Type ==ReferenceTypeCell {if _gbad ,_degfg :=ev .GetFromCache (_dfebb );
_degfg {return _gbad ;}else {_ceeb :=_adge (ctx ,ev ,_gdfgd .Value ,_afcgg .Value );ev .SetCache (_dfebb ,_ceeb );return _ceeb ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_dfebb );};var _ge =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};


// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_fcgfgf ,_fafb :=_fcdbe ("\u0046\u0049\u004e\u0044",args );if _fafb .Type !=ResultTypeEmpty {return _fafb ;};_agdd :=_bd .ToLower (_fcgfgf ._cagbb );if _agdd ==""{return MakeNumberResult (1.0);};_aebe :=_bd .ToLower (_fcgfgf ._aaeaa );
_egcb :=_fcgfgf ._fdgf ;_bgafe :=1;for _efbc :=range _aebe {if _bgafe < _egcb {_bgafe ++;continue ;};_gagf :=_fb .Index (_agdd ,_aebe [_efbc :]);if _gagf ==0{return MakeNumberResult (float64 (_bgafe ));};_bgafe ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aaebe :=args [0].AsNumber ();_cfbea :=args [1].AsNumber ();if _aaebe .Type !=ResultTypeNumber ||_cfbea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_cbcf :=_ea .Trunc (_aaebe .ValueNumber );_fedg :=_ea .Trunc (_cfbea .ValueNumber );if _cbcf < _fedg {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");
};if _cbcf ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_cbcf +_fedg -1);args [1]=MakeNumberResult (_cbcf -1);return Combin (args );};func (_egeg *evCache )SetCache (key string ,value Result ){_egeg ._gca .Lock ();_egeg ._acg [key ]=value ;
_egeg ._gca .Unlock ();};type yySymType struct{_dfed int ;_aggcf *node ;_ccaca Expression ;_gcgde []Expression ;_febcd [][]Expression ;};func _dcc (_cgdd string )(int ,int ,float64 ,bool ,bool ,Result ){_bgd :="";_ced :=[]string {};for _bffb ,_fbg :=range _cdcc {_ced =_fbg .FindStringSubmatch (_cgdd );
if len (_ced )> 1{_bgd =_bffb ;break ;};};if _bgd ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_feacc );};_cdbd :=_ced [1]=="";_ced =_ced [49:];_aad :=len (_ced );_ecd :=_ced [_aad -1];_abag :=_ecd =="\u0061\u006d";_dee :=_ecd =="\u0070\u006d";
var _fbbg ,_eff int ;var _cgf float64 ;var _aegb error ;switch _bgd {case "\u0068\u0068":_fbbg ,_aegb =_bc .Atoi (_ced [0]);if _aegb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_feacc );};_eff =0;_cgf =0;case "\u0068\u0068\u003am\u006d":_fbbg ,_aegb =_bc .Atoi (_ced [0]);
if _aegb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_feacc );};_eff ,_aegb =_bc .Atoi (_ced [2]);if _aegb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_feacc );};_cgf =0;case "\u006d\u006d\u003as\u0073":_fbbg =0;
_eff ,_aegb =_bc .Atoi (_ced [0]);if _aegb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_feacc );};_cgf ,_aegb =_bc .ParseFloat (_ced [2],64);if _aegb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_feacc );
};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_fbbg ,_aegb =_bc .Atoi (_ced [0]);if _aegb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_feacc );};_eff ,_aegb =_bc .Atoi (_ced [2]);if _aegb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_feacc );
};_cgf ,_aegb =_bc .ParseFloat (_ced [4],64);if _aegb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_feacc );};};if _eff >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_feacc );};if _abag ||_dee {if _fbbg > 12||_cgf >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_feacc );
}else if _fbbg ==12{_fbbg =0;};}else if _fbbg >=24||_cgf >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_feacc );};return _fbbg ,_eff ,_cgf ,_dee ,_cdbd ,_cff ;};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_agad :=args [0].AsNumber ();if _agad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_bdgfd :=float64 (1);if _agad .ValueNumber < 0{_bdgfd =-1;};if len (args )> 1{_gfced :=args [1].AsNumber ();if _gfced .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bdgfd =_gfced .ValueNumber ;};if _bdgfd < 0&&_agad .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};if len (args )==1{return MakeNumberResult (_ea .Ceil (_agad .ValueNumber ));};_cgdff :=_agad .ValueNumber ;_cgdff ,_agaef :=_ea .Modf (_cgdff /_bdgfd );if _agaef > 0{_cgdff ++;};return MakeNumberResult (_cgdff *_bdgfd );};

// Value returns a string version of the result.
func (_fggae Result )Value ()string {switch _fggae .Type {case ResultTypeNumber :_facag :=_bc .FormatFloat (_fggae .ValueNumber ,'f',-1,64);if len (_facag )> 12{_aecbg :=12;for _dagb :=_aecbg ;_dagb > 0&&_facag [_dagb ]=='0';_dagb --{_aecbg --;};_facag =_facag [0:_aecbg +1];
};return _facag ;case ResultTypeError :return _fggae .ValueString ;case ResultTypeString :return _fggae .ValueString ;case ResultTypeList :if len (_fggae .ValueList )==0{return "";};return _fggae .ValueList [0].Value ();case ResultTypeArray :if len (_fggae .ValueArray )==0||len (_fggae .ValueArray [0])==0{return "";
};return _fggae .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_bgc :=_ba .Now ();
_ ,_ddf :=_bgc .Zone ();_dbce :=_fed +float64 (_bgc .Unix ()+int64 (_ddf ))/86400;return MakeNumberResult (_dbce );};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_ecff :=_fc .Buffer {};for _ ,_daddgc :=range args {switch _daddgc .Type {case ResultTypeString :_ecff .WriteString (_daddgc .ValueString );case ResultTypeNumber :var _aacd string ;if _daddgc .IsBoolean {if _daddgc .ValueNumber ==0{_aacd ="\u0046\u0041\u004cS\u0045";
}else {_aacd ="\u0054\u0052\u0055\u0045";};}else {_aacd =_daddgc .AsString ().ValueString ;};_ecff .WriteString (_aacd );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
};};return MakeStringResult (_ecff .String ());};var _bcfgd =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
const _cedbd =57376;type Reference struct{Type ReferenceType ;Value string ;};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_faead :=args [0].AsNumber ();if _faead .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bfab :=float64 (1);if _faead .ValueNumber < 0{_bfab =-1;};if len (args )> 1{_fggcg :=args [1].AsNumber ();if _fggcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bfab =_ea .Abs (_fggcg .ValueNumber );};if len (args )==1{return MakeNumberResult (_ea .Ceil (_faead .ValueNumber ));};_fcce :=_faead .ValueNumber ;_fcce ,_fefe :=_ea .Modf (_fcce /_bfab );if _fefe !=0{if _faead .ValueNumber > 0{_fcce ++;};};return MakeNumberResult (_fcce *_bfab );
};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_dfcff :=args [0];if _dfcff .Type !=ResultTypeArray &&_dfcff .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_caeba :=_dfcff .ValueArray ;if len (_caeba )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};return MakeNumberResult (float64 (len (_caeba )));};var (_eded =0;_eefec =false ;);func _ceee (_bdgc string ,_eegb func (_gefd float64 )float64 )Function {return func (_eecec []Result )Result {if len (_eecec )!=1{return MakeErrorResult (_bdgc +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_geab :=_eecec [0].AsNumber ();switch _geab .Type {case ResultTypeNumber :_gbffg :=_eegb (_geab .ValueNumber );if _ea .IsNaN (_gbffg ){return MakeErrorResult (_bdgc +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};
if _ea .IsInf (_gbffg ,0){return MakeErrorResult (_bdgc +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_gbffg );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_bdgc +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _geab ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bdgc ,_geab .Type ));
};};};

// SetLocked does nothing for the invalid reference context.
func (_fbage *ivr )SetLocked (cellRef string ,locked bool ){};func _dfce (_fdaf []Result )(float64 ,float64 ,Result ){_badf :=0.0;_aabd :=1.0;for _ ,_abeed :=range _fdaf {switch _abeed .Type {case ResultTypeNumber :_badf +=_abeed .ValueNumber ;_aabd *=_fcaf (_abeed .ValueNumber );
case ResultTypeList ,ResultTypeArray :_eccb ,_fabae ,_agfc :=_dfce (_abeed .ListValues ());_badf +=_eccb ;_aabd *=_fcaf (_fabae );if _agfc .Type ==ResultTypeError {return 0,0,_agfc ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
case ResultTypeError :return 0,0,_abeed ;};};return _badf ,_aabd ,_cff ;};var _acgbe =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_cdcb (args ,_fgcb ))};

// Bool is a boolean expression.
type Bool struct{_ff bool };

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_cfba :=len (args );if _cfba < 3||_cfba > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gcee :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_afe :=args [1].ValueNumber ;if _afe !=float64 (int (_afe )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdae :=args [2].ValueNumber ;_ebfbb :=0.0;if _cfba >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebfbb =args [3].ValueNumber ;};_egcf :=0.0;if _cfba ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_egcf =args [4].ValueNumber ;if _egcf !=0{_egcf =1;};};if _gcee ==0{return MakeNumberResult (-_fdae *_afe -_ebfbb );}else {return MakeNumberResult ((((1-_ea .Pow (1+_gcee ,_afe ))/_gcee )*_fdae *(1+_gcee *_egcf )-_ebfbb )/_ea .Pow (1+_gcee ,_afe ));};
};type ri struct{_dfgc float64 ;_dbdg string ;};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_dcda ,_ace :=_fbfb (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _ace .Type ==ResultTypeError {return _ace ;};return MakeNumberResult (_egef (_dcda ._ebg ,_dcda ._ffad ,_dcda ._gadg ,_dcda ._agcg ));
};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_cfcc :=args [0];if _cfcc .Type ==ResultTypeList {_baca :=[][]Result {};for _ ,_gbba :=range _cfcc .ValueList {_baca =append (_baca ,[]Result {_gbba });};return MakeArrayResult (_baca );};_eebf :=make ([][]Result ,len (_cfcc .ValueArray [0]));for _ ,_gcdd :=range _cfcc .ValueArray {for _eebbc ,_bgde :=range _gcdd {_eebf [_eebbc ]=append (_eebf [_eebbc ],_bgde );
};};return MakeArrayResult (_eebf );};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbda :=args [0].Type ;for _ ,_dedgd :=range args {if _dedgd .Type !=_fbda {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");
};};switch _fbda {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_dede :=len (args [0].ListValues ());_gagdb :=make ([]float64 ,_dede );for _fbcac :=range _gagdb {_gagdb [_fbcac ]=1.0;};for _ ,_edcf :=range args {if len (_edcf .ListValues ())!=_dede {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");
};for _bbeaf ,_gdccbc :=range _edcf .ListValues (){_gdccbc =_gdccbc .AsNumber ();if _gdccbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");
};_gagdb [_bbeaf ]=_gagdb [_bbeaf ]*_gdccbc .ValueNumber ;};};_acgbd :=0.0;for _ ,_fdbca :=range _gagdb {_acgbd +=_fdbca ;};return MakeNumberResult (_acgbd );};return MakeNumberResult (1.0);};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_cdafa :=args [0].AsNumber ();if _cdafa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gaff :=float64 (1);if _cdafa .ValueNumber < 0{_gaff =-1;};if len (args )> 1{_bcdf :=args [1].AsNumber ();if _bcdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");
};_gaff =_ea .Abs (_bcdf .ValueNumber );};if len (args )==1{return MakeNumberResult (_ea .Floor (_cdafa .ValueNumber ));};_ccbac :=_cdafa .ValueNumber ;_ccbac ,_bgbc :=_ea .Modf (_ccbac /_gaff );if _bgbc !=0{if _cdafa .ValueNumber < 0{_ccbac --;};};return MakeNumberResult (_ccbac *_gaff );
};

// String returns a string representation of a horizontal range.
func (_caea HorizontalRange )String ()string {return _caea .horizontalRangeReference ()};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_ddc ConstArrayExpr )Update (q *_ag .UpdateQuery )Expression {return _ddc };

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_cggba :=args [0];_becg :=args [1];if _becg .Type !=ResultTypeArray &&_becg .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_ffdd :=_fgfe (_becg );_dfaab :=-1;for _ddcbf ,_aggc :=range _ffdd {if _ggdc (_cggba ,_aggc ,false ,false )==_gbaf {_dfaab =_ddcbf ;};};if _dfaab ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};_dafgd :=_ffdd ;if len (args )==3{_dafgd =_fgfe (args [2]);};if _dfaab < 0||_dfaab >=len (_dafgd ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};return _dafgd [_dfaab ];};func _fef (_gef string ,_ee uint32 )string {_gag :=_cf .ColumnToIndex (_gef );if _gag ==_ee {return "\u0023\u0052\u0045F\u0021";}else if _gag > _ee {return _cf .IndexToColumn (_gag -1);}else {return _gef ;};};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_ceceb :=args [0].AsNumber ();if _ceceb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecba :=_ea .Signbit (_ceceb .ValueNumber );_affa ,_egbea :=_ea .Modf ((_ceceb .ValueNumber -1)/2);_dgbd :=_affa *2+1;if _egbea !=0{if !_ecba {_dgbd +=2;}else {_dgbd -=2;};};return MakeNumberResult (_dgbd );};func _afeae (_fbcef ,_dgaga Expression )(Expression ,Expression ,error ){_daag ,_cbccg :=_fbcef .(CellRef );
if !_cbccg {return nil ,nil ,_e .New (_a .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fbcef .String ()));};_bfge ,_cbccg :=_dgaga .(CellRef );if !_cbccg {return nil ,nil ,_e .New (_a .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_dgaga .String ()));
};_cfgd ,_dfgee :=_cf .ParseCellReference (_daag ._ddge );if _dfgee !=nil {return nil ,nil ,_dfgee ;};_feab ,_dfcgc :=_cf .ParseCellReference (_bfge ._ddge );if _dfcgc !=nil {return nil ,nil ,_dfcgc ;};_eeeaa :=false ;if _cfgd .RowIdx > _feab .RowIdx {_eeeaa =true ;
_cfgd .RowIdx ,_feab .RowIdx =_feab .RowIdx ,_cfgd .RowIdx ;};if _cfgd .ColumnIdx > _feab .ColumnIdx {_eeeaa =true ;_cfgd .ColumnIdx ,_feab .ColumnIdx =_feab .ColumnIdx ,_cfgd .ColumnIdx ;_cfgd .Column ,_feab .Column =_feab .Column ,_cfgd .Column ;};if _eeeaa {return NewCellRef (_cfgd .String ()),NewCellRef (_feab .String ()),nil ;
};return _fbcef ,_dgaga ,nil ;};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );
RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );
RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );
RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );
RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );
RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );
RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );
RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );
RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );
RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );
RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );
RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );
RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// Reference returns a string reference value to a range with prefix.
func (_caee PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_bgadd :=_caee ._eeeeg .Reference (ctx ,ev );_cafbb :=_caee ._babd .Reference (ctx ,ev );_gdee :=_caee ._cgdfg .Reference (ctx ,ev );if _bgadd .Type ==ReferenceTypeSheet &&_cafbb .Type ==ReferenceTypeCell &&_gdee .Type ==ReferenceTypeCell {return MakeRangeReference (_gbaff (_bgadd ,_cafbb ,_gdee ));
};return ReferenceInvalid ;};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbbfd :=args [0].Ref ;if _cbbfd .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .Cell (_cbbfd .Value ,ev ).IsBoolean );};

// Reference returns an invalid reference for ConstArrayExpr.
func (_ac ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_cgfg :=args [0];
if _cgfg .Type !=ResultTypeArray &&_cgfg .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_cacc :=_cgfg .ValueArray ;if len (_cacc )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");
};return MakeNumberResult (float64 (len (_cacc [0])));};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_bdgg Context ,_cgcbg Evaluator ,_dgce []Result )Result ;

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_eada :=_dfgf (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _eada .Type !=ResultTypeEmpty {return _eada ;};_debc :=_geeeb (args [1:]);_ggca :=0.0;_cbced :=_fccfe (args [0]);for _ ,_ggec :=range _debc {_ggca +=_cbced [_ggec ._aeaf ][_ggec ._bfgca ].ValueNumber ;
};return MakeNumberResult (float64 (_ggca ));};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_fafgg Result )ListValues ()[]Result {if _fafgg .Type ==ResultTypeArray {_dfdgd :=[]Result {};for _ ,_eaecf :=range _fafgg .ValueArray {for _ ,_gbaab :=range _eaecf {_dfdgd =append (_dfdgd ,_gbaab );};};return _dfdgd ;};if _fafgg .Type ==ResultTypeList {return _fafgg .ValueList ;
};return nil ;};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_gdcc :=len (args );if _gdcc < 3||_gdcc > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bcac :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbcg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cbaad :=args [2].ValueNumber ;_afcf :=0.0;if _gdcc >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_afcf =args [3].ValueNumber ;};_gbef :=0.0;if _gdcc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gbef =args [4].ValueNumber ;if _gbef !=0{_gbef =1;};};_fcdde :=_dbcg *(1+_bcac *_gbef )-_afcf *_bcac ;_gege :=(_cbaad *_bcac +_dbcg *(1+_bcac *_gbef ));return MakeNumberResult (_ea .Log (_fcdde /_gege )/_ea .Log (1+_bcac ));};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_bbd :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_bbd *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_fceeg :=_fccfe (args [1]);for _ ,_ddga :=range _fceeg {for _ ,_eecee :=range _ddga {if _eecee .Type !=ResultTypeNumber ||_eecee .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");
};_bbd *=1.0+_eecee .ValueNumber ;};};return MakeNumberResult (_bbd );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");
};};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);

// BinOpType is the binary operation operator type
//
//go:generate stringer -type=BinOpType
type BinOpType byte ;type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _cafe (args ,true )};const _edbd =57363;type xargs struct{_bfdf []float64 ;_cegf []float64 ;};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_agfe :=len (args );if _agfe !=6&&_agfe !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bbee ,_bedea ,_efff :=_gece (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _efff .Type ==ResultTypeError {return _efff ;};_accg :=args [2];if _accg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cefeb :=_accg .ValueNumber ;if _cefeb < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_dfaa :=args [3];if _dfaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_efd :=_dfaa .ValueNumber ;if _efd <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_dedg :=args [4];if _dedg .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_aggb :=_dedg .ValueNumber ;if _aggb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_bgbg :=args [5];
if _bgbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cfbc :=float64 (int (_bgbg .ValueNumber ));if !_ece (_cfbc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_faae :=0;if _agfe ==7&&args [6].Type !=ResultTypeEmpty {_gbac :=args [6];
if _gbac .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_faae =int (_gbac .ValueNumber );
if !_agdc (_faae ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_cgbg :=0.0;
_debeg :=0.0;_eefca :=1.0;_gfdc ,_efff :=_gbcc (_bbee ,_bedea ,_cefeb ,_debeg ,_aggb ,_cfbc ,_faae );if _efff .Type ==ResultTypeError {return _efff ;};_fegb ,_efff :=_gbcc (_bbee ,_bedea ,_cefeb ,_eefca ,_aggb ,_cfbc ,_faae );if _efff .Type ==ResultTypeError {return _efff ;
};_eabga :=(_eefca -_debeg )*0.5;for _fbba :=0;_fbba < 100&&_cgbg !=_efd ;_fbba ++{_cgbg ,_efff =_gbcc (_bbee ,_bedea ,_cefeb ,_eabga ,_aggb ,_cfbc ,_faae );if _efff .Type ==ResultTypeError {return _efff ;};if _efd ==_gfdc {return MakeNumberResult (_debeg );
}else if _efd ==_fegb {return MakeNumberResult (_eefca );}else if _efd ==_cgbg {return MakeNumberResult (_eabga );}else if _efd < _fegb {_eefca *=2.0;_fegb ,_efff =_gbcc (_bbee ,_bedea ,_cefeb ,_eefca ,_aggb ,_cfbc ,_faae );if _efff .Type ==ResultTypeError {return _efff ;
};_eabga =(_eefca -_debeg )*0.5;}else {if _efd < _cgbg {_debeg =_eabga ;_gfdc =_cgbg ;}else {_eefca =_eabga ;_fegb =_cgbg ;};_eabga =_eefca -(_eefca -_debeg )*((_efd -_fegb )/(_gfdc -_fegb ));};};return MakeNumberResult (_eabga );};

// Update updates the FunctionCall references after removing a row/column.
func (_aeaa FunctionCall )Update (q *_ag .UpdateQuery )Expression {_cbafe :=[]Expression {};for _ ,_ccfbc :=range _aeaa ._bgfdd {_ebddf :=_ccfbc .Update (q );_cbafe =append (_cbafe ,_ebddf );};return FunctionCall {_ggbg :_aeaa ._ggbg ,_bgfdd :_cbafe };
};

// Reference returns an invalid reference for Number.
func (_eecgc Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_fecc :=len (args );if _fecc < 3||_fecc > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gdfe :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eefd :=args [1].ValueNumber ;if _eefd ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_febc :=args [2].ValueNumber ;_ccgf :=0.0;if _fecc >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccgf =args [3].ValueNumber ;};_cbdf :=0.0;if _fecc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cbdf =args [4].ValueNumber ;if _cbdf !=0{_cbdf =1;};};var _ddcb float64 ;if _gdfe ==0{_ddcb =(_febc +_ccgf )/_eefd ;}else {_bede :=_ea .Pow (1+_gdfe ,_eefd );if _cbdf ==1{_ddcb =(_ccgf *_gdfe /(_bede -1)+_febc *_gdfe /(1-1/_bede ))/(1+_gdfe );}else {_ddcb =_ccgf *_gdfe /(_bede -1)+_febc *_gdfe /(1-1/_bede );
};};return MakeNumberResult (-_ddcb );};const _egeb ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_ecbg :=args [0].AsNumber ();
_agefc :=args [1].AsNumber ();if _ecbg .Type ==ResultTypeNumber &&_agefc .Type ==ResultTypeNumber {_dgedb :=_ea .Atan2 (_agefc .ValueNumber ,_ecbg .ValueNumber );if _dgedb !=_dgedb {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");
};return MakeNumberResult (_dgedb );};for _ ,_abbaa :=range []ResultType {_ecbg .Type ,_agefc .Type }{switch _abbaa {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
case ResultTypeError :return _ecbg ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_abbaa ));
};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bbdg :=args [0].AsString ();if _bbdg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};if len (_bbdg .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_bbdg .ValueString [0]));};func (_bbfc tokenType )String ()string {return _bbab (int (_bbfc ))};func _fbfb (_edbg []Result ,_faca string )(*couponArgs ,Result ){_gbfa :=len (_edbg );
if _gbfa !=3&&_gbfa !=4{return nil ,MakeErrorResult (_faca +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_badd ,_ebea ,_dbag :=_gece (_edbg [0],_edbg [1],_faca );
if _dbag .Type ==ResultTypeError {return nil ,_dbag ;};if _edbg [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_faca +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aafd :=_edbg [2].ValueNumber ;if !_ece (_aafd ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_faca );};_dgdc :=0;if _gbfa ==4&&_edbg [3].Type !=ResultTypeEmpty {if _edbg [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_faca +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dgdc =int (_edbg [3].ValueNumber );if !_agdc (_dgdc ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_faca );
};};return &couponArgs {_badd ,_ebea ,int (_aafd ),_dgdc },_cff ;};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dcdb :=args [0].AsNumber ();
if _dcdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_abeb :=args [1].AsNumber ();if _abeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ebgaf :=int (_abeb .ValueNumber );if _ebgaf < 0||_ebgaf > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");
};_eddg :=0;if len (args )> 2{_bcbf :=args [2].AsNumber ();if _bcbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eddg =int (_bcbf .ValueNumber );};_ecfb :=_bc .FormatInt (int64 (_dcdb .ValueNumber ),_ebgaf );if len (_ecfb )< _eddg {_ecfb =_bd .Repeat ("\u0030",_eddg -len (_ecfb ))+_ecfb ;};return MakeStringResult (_ecfb );};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_ea .Pi );};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _fggb (args ,_ggcbc )};func (_bggbb *ivr )Sheet (name string )Context {return _bggbb };

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_baebb :=len (args );if _baebb !=3&&_baebb !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ffdf ,_cefa :=_feba (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _cefa .Type ==ResultTypeError {return _cefa ;};_cddc ,_cefa :=_feba (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");
if _cefa .Type ==ResultTypeError {return _cefa ;};_edebb ,_cefa :=_feba (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _cefa .Type ==ResultTypeError {return _cefa ;};_dafa :=0;
if _baebb ==3{return MakeStringResult (_bd .Replace (_ffdf ,_cddc ,_edebb ,-1));}else {_efdb ,_fcca :=_ddcc (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");
if _fcca .Type ==ResultTypeError {return _fcca ;};_dafa =int (_efdb );if _dafa < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");
};_dcag :=_ffdf ;_cega :=_dafa ;_bddae :=-1;_dcfc :=len (_cddc );_gdcce :=0;for {_cega --;_ffge :=_bd .Index (_dcag ,_cddc );if _ffge ==-1{_bddae =-1;break ;}else {_bddae =_ffge +_gdcce ;if _cega ==0{break ;};_fffa :=_dcfc +_ffge ;_gdcce +=_fffa ;_dcag =_dcag [_fffa :];
};};if _bddae ==-1{return MakeStringResult (_ffdf );}else {_bdee :=_ffdf [:_bddae ];_gdfeb :=_ffdf [_bddae +_dcfc :];return MakeStringResult (_bdee +_edebb +_gdfeb );};};};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];
case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));
default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_ceb :=args [1].ValueNumber ;
_efg :=args [0];var _dge float64 ;switch _efg .Type {case ResultTypeEmpty :_dge =0;case ResultTypeNumber :_dge =_efg .ValueNumber ;case ResultTypeString :_gbc :=DateValue ([]Result {args [0]});if _gbc .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};_dge =_gbc .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_bee :=_aecd (_dge );
_ddca :=_bee .AddDate (0,int (_ceb +1),0);_bce ,_ggbd ,_ :=_ddca .Date ();_faa :=_bad (_bce ,int (_ggbd ),0);if _faa < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};if _bce ==1900&&_ggbd ==3{_faa --;};return MakeNumberResult (_faa );};func _cbeg (_gcdcf Result ,_gaab ,_cbaae string )(float64 ,Result ){var _edge float64 ;switch _gcdcf .Type {case ResultTypeNumber :_edge =float64 (int (_gcdcf .ValueNumber ));case ResultTypeString :_cdcce :=DateValue ([]Result {_gcdcf });
if _cdcce .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_gaab +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_cbaae );};_edge =_cdcce .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_cbaae );
};if _edge < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_gaab +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _edge ,_cff ;};

// Error is called in the case of parsing error and saves an error to a plex.
func (_bbfd *plex )Error (s string ){_ae .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_bbfd ._cffg =s ;};

// Reference returns a string reference value to a named range.
func (_fgaa NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_fgaa ._afggg };};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };
case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };
case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };
default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};func _bdcf (_dcea string ,_aecaa _ba .Time )(_ba .Time ,error ){_fgac ,_ ,_ggaee :=_c .ParseFloat (_dcea ,10,128,_c .ToNearestEven );
if _ggaee !=nil {return _ba .Time {},_ggaee ;};_dfdc :=new (_c .Float );_dfdc .SetUint64 (uint64 (24*_ba .Hour ));_fgac .Mul (_fgac ,_dfdc );_bfeb ,_ :=_fgac .Uint64 ();_efef :=_aecaa .Add (_ba .Duration (_bfeb ));return _baebd (_efef ),nil ;};func _ggce (_bfcd ,_aefgb []string )[]string {for _ ,_fbdg :=range _aefgb {_bfcd =append (_bfcd ,_fbdg );
};return _bfcd ;};

// ResultType is the type of the result
//
//go:generate stringer -type=ResultType
type ResultType byte ;const _acebd =57367;

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_gcccgf :s }};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_ddge :v }};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;
BinOpTypeConcat ;);

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_ageg :=1.0;for _ ,_bdaa :=range args {_bdaa =_bdaa .AsNumber ();switch _bdaa .Type {case ResultTypeNumber :_ageg *=_bdaa .ValueNumber ;case ResultTypeList ,ResultTypeArray :_ffe :=Product (_bdaa .ListValues ());if _ffe .Type !=ResultTypeNumber {return _ffe ;
};_ageg *=_ffe .ValueNumber ;case ResultTypeString :case ResultTypeError :return _bdaa ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_bdaa .Type ));
};};return MakeNumberResult (_ageg );};const _bacc =57371;const _dggf ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";


// GetEpoch returns a null time object for the invalid reference context.
func (_dcbcfd *ivr )GetEpoch ()_ba .Time {return _ba .Time {}};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fdca :=args [0];switch _fdca .Type {case ResultTypeError :return _fdca ;
case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_fdca .ValueNumber !=0);};if _fdca .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _bcfd (args );case ResultTypeArray :return _gfad (args );
default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};
};var _becdd =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };


// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_edeaf :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_gdcb :=args [2].ValueNumber +1;if _gdcb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_aafe :=_fccfe (args [0]);_badc :=float64 (len (_aafe ));_fbcc ,_gaabb :=0.0,0.0;_gbeag ,_bdcg :=1.0,1.0;_cdbbb ,_ade :=false ,false ;for _ ,_agfd :=range _aafe {for _ ,_geca :=range _agfd {if _geca .Type ==ResultTypeNumber &&!_geca .IsBoolean {_deecg :=_geca .ValueNumber ;
if _deecg ==0{continue ;}else {if _deecg > 0{_cdbbb =true ;_gaabb +=_geca .ValueNumber *_bdcg ;}else {_ade =true ;_fbcc +=_geca .ValueNumber *_gbeag ;};_gbeag /=_edeaf ;_bdcg /=_gdcb ;};};};};if !_cdbbb ||!_ade {return MakeErrorResultType (ErrorTypeDivideByZero ,"");
};_bebg :=-_gaabb /_fbcc ;_bebg *=_ea .Pow (_gdcb ,_badc -1);_bebg =_ea .Pow (_bebg ,1/(_badc -1));return MakeNumberResult (_bebg -1);};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_gce :=len (args );if _gce !=5&&_gce !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bgaf ,_eeec ,_cbebf :=_gece (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _cbebf .Type ==ResultTypeError {return _cbebf ;};_ebfg ,_cbebf :=_cbeg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");
if _cbebf .Type ==ResultTypeError {return _cbebf ;};if _ebfg >=_bgaf {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dcab :=args [3].ValueNumber ;if _dcab < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dbab :=args [4].ValueNumber ;if _dbab < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_caca :=0;if _gce ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_caca =int (args [5].ValueNumber );if !_agdc (_caca ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");
};};_bcb ,_cbebf :=_ead (_bgaf ,_eeec ,_caca );if _cbebf .Type ==ResultTypeError {return _cbebf ;};_ggbef ,_cbebf :=_ead (_ebfg ,_eeec ,_caca );if _cbebf .Type ==ResultTypeError {return _cbebf ;};_fffc ,_cbebf :=_ead (_ebfg ,_bgaf ,_caca );if _cbebf .Type ==ResultTypeError {return _cbebf ;
};_eeggb :=1+_ggbef *_dcab ;_cbag :=1+_bcb *_dbab ;return MakeNumberResult ((_eeggb /_cbag -_fffc *_dcab )*100);};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_fde :=args [0].AsNumber ();if _fde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _fde .ValueNumber < 0{return MakeNumberResult (-1);}else if _fde .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};func _dbabf (_ggfgd Result )bool {_dddf :=_ggfgd .Type ;return _dddf !=ResultTypeArray &&_dddf !=ResultTypeList ;
};func _bgcc (_egba ,_cgdf ,_bfaec int )int {if _egba > _cgdf {return 0;};if _cfb (_bfaec ){return (_cgdf -_egba +1)*360;};_ede :=0;for _cgaf :=_egba ;_cgaf <=_cgdf ;_cgaf ++{_dab :=365;if _bfc (_cgaf ){_dab =366;};_ede +=_dab ;};return _ede ;};func _egagb (_geae []Result ,_dfec bool )(float64 ,float64 ){_aabf :=0.0;
_acbf :=0.0;for _ ,_aabb :=range _geae {switch _aabb .Type {case ResultTypeNumber :if _dfec ||!_aabb .IsBoolean {_acbf +=_aabb .ValueNumber ;_aabf ++;};case ResultTypeList ,ResultTypeArray :_edaf ,_febb :=_egagb (_aabb .ListValues (),_dfec );_acbf +=_edaf ;
_aabf +=_febb ;case ResultTypeString :if _dfec {_aabf ++;};case ResultTypeEmpty :};};return _acbf ,_aabf ;};func _geeb (_fceaf []Result ,_acdfd []string ,_bbbca bool )[]string {for _ ,_ebgdc :=range _fceaf {switch _ebgdc .Type {case ResultTypeEmpty :if !_bbbca {_acdfd =append (_acdfd ,"");
};case ResultTypeString :if _ebgdc .ValueString !=""||!_bbbca {_acdfd =append (_acdfd ,_ebgdc .ValueString );};case ResultTypeNumber :_acdfd =append (_acdfd ,_ebgdc .Value ());case ResultTypeList :_acdfd =_ggce (_acdfd ,_geeb (_ebgdc .ValueList ,[]string {},_bbbca ));
case ResultTypeArray :for _ ,_aggbg :=range _ebgdc .ValueArray {_acdfd =_ggce (_acdfd ,_geeb (_aggbg ,[]string {},_bbbca ));};};};return _acdfd ;};func _fdbg (_bddeg ,_cecc float64 )bool {return _ea .Abs (_bddeg -_cecc )< 1.0e-6};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );
};func _cedc (_ffadd Result ,_gaec *criteriaParsed )bool {if _ffadd .IsBoolean {return false ;};_bdagb :=_ffadd .Type ;if _gaec ._afaga {return _bdagb ==ResultTypeNumber &&_ffadd .ValueNumber ==_gaec ._fgfg ;}else if _bdagb ==ResultTypeNumber {return _cbdc (_ffadd .ValueNumber ,_gaec ._gcgda );
};return _dccce (_ffadd ,_gaec );};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_eeafc :=_dfgf (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _eeafc .Type !=ResultTypeEmpty {return _eeafc ;};_fddb :=_geeeb (args [1:]);_ffae :=_ea .MaxFloat64 ;_dbcgc :=_fccfe (args [0]);for _ ,_dbgee :=range _fddb {_cbbea :=_dbcgc [_dbgee ._aeaf ][_dbgee ._bfgca ].ValueNumber ;
if _ffae > _cbbea {_ffae =_cbbea ;};};if _ffae ==_ea .MaxFloat64 {_ffae =0;};return MakeNumberResult (float64 (_ffae ));};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fbegb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdaec :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cgdfe :=args [2].ValueNumber ;if _cgdfe ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult ((_fbegb -_fdaec )/_cgdfe );};func _gcdgb (_dcgbf Result )*criteriaParsed {_gbaa :=_dcgbf .Type ==ResultTypeNumber ;_acff :=_dcgbf .ValueNumber ;_agbg :=_bd .ToLower (_dcgbf .ValueString );_gagc :=_abae (_agbg );return &criteriaParsed {_gbaa ,_acff ,_agbg ,_gagc };
};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_afcg :=args [0].AsString ();if _afcg .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeStringResult (_bd .ToUpper (_afcg .ValueString ));};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_afggg string };func _eadf (_gffc ,_dbaba ,_agace ,_ebdb ,_fffcf float64 )float64 {var _bgda float64 ;_adef :=_fffcf /_agace ;if _adef >=1{_adef =1;if _ebdb ==1{_bgda =_gffc ;}else {_bgda =0;};}else {_bgda =_gffc *_ea .Pow (1-_adef ,_ebdb -1);
};_ccfa :=_gffc *_ea .Pow (1-_adef ,_ebdb );var _beae float64 ;if _ccfa < _dbaba {_beae =_bgda -_dbaba ;}else {_beae =_bgda -_ccfa ;};if _beae < 0{_beae =0;};return _beae ;};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_decf :=len (args );if _decf !=6&&_decf !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fcaae ,_faea ,_cded :=_gece (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _cded .Type ==ResultTypeError {return _cded ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cefb :=args [2].ValueNumber ;if _cefb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_eacg :=args [3].ValueNumber ;if _eacg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_agcc :=args [4].ValueNumber ;if _agcc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eaeg :=args [5];if _eaeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_eede :=_eaeg .ValueNumber ;if !_ece (_eede ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dcbcf :=0;if _decf ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dcbcf =int (args [6].ValueNumber );if !_agdc (_dcbcf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");
};};_gcgdd ,_cded :=_gbcc (_fcaae ,_faea ,_cefb ,_eacg ,_agcc ,_eede ,_dcbcf );if _cded .Type ==ResultTypeError {return _cded ;};return MakeNumberResult (_gcgdd );};type cmpResult int8 ;const _dbeeb =57365;var _aafb string =string ([]byte {92});func _gefcf (){_bggg =_bb .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");
_fadd =_bb .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_efdg =_bb .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_adca =_bb .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_cdaaa =_bb .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");
_bcecf =_bb .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};

// Error is an error expression.
type Error struct{_deg string };func _cacba (_gbed []string ,_dcbd int )string {return _bc .Itoa (len (_gbed [len (_gbed )-1-_dcbd ]))};func (_gfbfa VerticalRange )verticalRangeReference ()string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_gfbfa ._dbbac ,_gfbfa ._gabga );
};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_ggbg :name ,_bgfdd :args };};func _fcaf (_begg float64 )float64 {_ecead :=float64 (1);for _bfbf :=float64 (2);_bfbf <=_begg ;_bfbf ++{_ecead *=_bfbf ;};return _ecead ;};


// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_fccda :=_bd .Split (v ,"\u003a");if len (_fccda )!=2{return nil ;};_fade ,_ :=_bc .Atoi (_fccda [0]);_gdeb ,_ :=_bc .Atoi (_fccda [1]);if _fade > _gdeb {_fade ,_gdeb =_gdeb ,_fade ;};return HorizontalRange {_fgba :_fade ,_deeb :_gdeb };
};

// Eval evaluates and returns the result of an error expression.
func (_fga Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_fga ._deg )};type defEval struct{evCache ;_cgc bool ;};func _bfcg (_dgff ,_bba float64 ,_bcf ,_edc int )float64 {_dcfa :=_aecd (_dgff );_fcee :=_aecd (_bba );_fcdd :=_ffgg (_dcfa ,_fcee ,_bcf ,_edc );
return _bgga (_fcdd ,_dcfa ,_edc );};const _fdaa =57357;

// Eval evaluates and returns the result of the cell reference.
func (_ggg CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_ggg ._ddge ,ev )};const _adcf =57354;func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );
RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );
RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );
RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};


// Reference returns a string reference value to an expression with prefix.
func (_dbbaf PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_eabeb :=_dbbaf ._gfceg .Reference (ctx ,ev );_eged :=_dbbaf ._edab .Reference (ctx ,ev );if _eabeb .Type ==ReferenceTypeSheet &&_eged .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_eabeb .Value +"\u0021"+_eged .Value };
};return ReferenceInvalid ;};var _caa =[]int {31,28,31,30,31,30,31,31,30,31,30,31};const _ccfbb =57348;var _eedfd =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};


// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_affed Expression ;_ebag ,_gecgf int ;};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_aff :=args [1].ValueNumber ;_gegb :=args [0];var _aga float64 ;switch _gegb .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
case ResultTypeNumber :_aga =_gegb .ValueNumber ;case ResultTypeString :_dbg :=DateValue ([]Result {args [0]});if _dbg .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_aga =_dbg .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_dea :=_aecd (_aga );_eae :=_dea .AddDate (0,int (_aff ),0);
_ggc ,_fad ,_deaa :=_eae .Date ();_cac :=_bad (_ggc ,int (_fad ),_deaa );if _cac < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};return MakeNumberResult (_cac );};func _gfad (_agaag []Result )Result {_fcbd :=_agaag [0].ValueArray ;if len (_agaag )==1{_bfaa :=[][]Result {};for _ ,_degf :=range _fcbd {_bfaa =append (_bfaa ,_bcfd ([]Result {MakeListResult (_degf )}).ValueList );};
return MakeArrayResult (_bfaa );}else if len (_agaag )==2{_bcee :=len (_fcbd );_cfdc :=len (_fcbd [0]);_cggc :=_feeb (_agaag [1],_bcee ,_cfdc );_efde :=len (_cggc );_fcba :=[][]Result {};var _ddcbd []Result ;for _eedf ,_ebbc :=range _fcbd {if _eedf < _efde {_ddcbd =_cggc [_eedf ];
}else {_ddcbd =_cgdfc (MakeErrorResultType (ErrorTypeNA ,""),_cfdc );};_fcba =append (_fcba ,_bcfd ([]Result {MakeListResult (_ebbc ),MakeListResult (_ddcbd )}).ValueList );};return MakeArrayResult (_fcba );}else if len (_agaag )==3{_dbaae :=len (_fcbd );
_cgafg :=len (_fcbd [0]);_dacd :=_feeb (_agaag [1],_dbaae ,_cgafg );_abcb :=_feeb (_agaag [2],_dbaae ,_cgafg );_eaabe :=len (_dacd );_aaa :=len (_abcb );_gbec :=[][]Result {};var _defcb ,_gcce []Result ;for _bebaa ,_eabgbd :=range _fcbd {if _bebaa < _eaabe {_defcb =_dacd [_bebaa ];
}else {_defcb =_cgdfc (MakeErrorResultType (ErrorTypeNA ,""),_cgafg );};if _bebaa < _aaa {_gcce =_abcb [_bebaa ];}else {_gcce =_cgdfc (MakeErrorResultType (ErrorTypeNA ,""),_cgafg );};_gbec =append (_gbec ,_bcfd ([]Result {MakeListResult (_eabgbd ),MakeListResult (_defcb ),MakeListResult (_gcce )}).ValueList );
};return MakeArrayResult (_gbec );};return MakeErrorResultType (ErrorTypeValue ,"");};func _bcfd (_bfce []Result )Result {_accb :=_bfce [0].ValueList ;_fdac :=len (_accb );switch len (_bfce ){case 1:_eggg :=[]Result {};for _ ,_ccbd :=range _accb {_eggg =append (_eggg ,MakeBoolResult (_ccbd .ValueNumber !=0));
};return MakeListResult (_eggg );case 2:_ccab :=_bfce [1];switch _ccab .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_cdac :=[]Result {};for _ ,_dbcc :=range _accb {var _gedg Result ;if _dbcc .ValueNumber ==0{_gedg =MakeBoolResult (false );
}else {_gedg =_ccab ;};_cdac =append (_cdac ,_gedg );};return MakeListResult (_cdac );case ResultTypeList :_edbf :=_cgdfc (_ccab ,_fdac );_bedga :=[]Result {};for _caag ,_gcga :=range _accb {var _eeee Result ;if _gcga .ValueNumber ==0{_eeee =MakeBoolResult (false );
}else {_eeee =_edbf [_caag ];};_bedga =append (_bedga ,_eeee );};return MakeListResult (_bedga );case ResultTypeArray :_cdbg :=_feeb (_ccab ,len (_ccab .ValueArray ),_fdac );_bagdd :=[][]Result {};for _ ,_fcbc :=range _cdbg {_ceagg :=[]Result {};for _adcd ,_fgffb :=range _accb {var _bggeb Result ;
if _fgffb .ValueNumber ==0{_bggeb =MakeBoolResult (false );}else {_bggeb =_fcbc [_adcd ];};_ceagg =append (_ceagg ,_bggeb );};_bagdd =append (_bagdd ,_ceagg );};return MakeArrayResult (_bagdd );};case 3:_eabfc :=_bfce [1];_fefa :=_bfce [2];_affe :=_dbabf (_eabfc );
_fada :=_dbabf (_fefa );if _affe &&_fada {_acgcd :=[]Result {};for _ ,_egfg :=range _accb {var _efdee Result ;if _egfg .ValueNumber ==0{_efdee =_fefa ;}else {_efdee =_eabfc ;};_acgcd =append (_acgcd ,_efdee );};return MakeListResult (_acgcd );};if _eabfc .Type !=ResultTypeArray &&_fefa .Type !=ResultTypeArray {_ggfde :=_cgdfc (_eabfc ,_fdac );
_bgfc :=_cgdfc (_fefa ,_fdac );_fbed :=[]Result {};for _ddad ,_eege :=range _accb {var _acac Result ;if _eege .ValueNumber ==0{_acac =_bgfc [_ddad ];}else {_acac =_ggfde [_ddad ];};_fbed =append (_fbed ,_acac );};return MakeListResult (_fbed );};_bcef ,_ecdc :=len (_eabfc .ValueArray ),len (_fefa .ValueArray );
_bbfa ,_ggff :=_bcef ,_ecdc ;if _ecdc > _bbfa {_bbfa ,_ggff =_ggff ,_bbfa ;};_cfae :=_feeb (_eabfc ,_bbfa ,_fdac );_cedg :=_feeb (_fefa ,_bbfa ,_fdac );_acabde :=[][]Result {};for _bcfg :=0;_bcfg < _bbfa ;_bcfg ++{_aac :=[]Result {};for _ddbb ,_egbc :=range _accb {var _gdae Result ;
if _egbc .ValueNumber ==0{if _bcfg < _ecdc {_gdae =_cedg [_bcfg ][_ddbb ];}else {_gdae =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _bcfg < _bcef {_gdae =_cfae [_bcfg ][_ddbb ];}else {_gdae =MakeErrorResultType (ErrorTypeNA ,"");};};_aac =append (_aac ,_gdae );
};_acabde =append (_acabde ,_aac );};return MakeArrayResult (_acabde );};return MakeErrorResult ("");};const _cbf ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";


// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};func _gggg (_fgcab yyLexer ,_cbbc *yySymType )(_ddee ,_bdgff int ){_bdgff =0;
_ddee =_fgcab .Lex (_cbbc );if _ddee <=0{_bdgff =_cafgf [0];goto _dfff ;};if _ddee < len (_cafgf ){_bdgff =_cafgf [_ddee ];goto _dfff ;};if _ddee >=_aaeg {if _ddee < _aaeg +len (_acgbe ){_bdgff =_acgbe [_ddee -_aaeg ];goto _dfff ;};};for _fgce :=0;_fgce < len (_adfce );
_fgce +=2{_bdgff =_adfce [_fgce +0];if _bdgff ==_ddee {_bdgff =_adfce [_fgce +1];goto _dfff ;};};_dfff :if _bdgff ==0{_bdgff =_acgbe [1];};if _eded >=3{_a .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_bbab (_bdgff ),uint (_ddee ));
};return _ddee ,_bdgff ;};

// FunctionCall is a function call expression.
type FunctionCall struct{_ggbg string ;_bgfdd []Expression ;};

// Eval evaluates and returns the result of a constant array expression.
func (_aec ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_eab :=[][]Result {};for _ ,_cgg :=range _aec ._gfc {_ged :=[]Result {};for _ ,_ggga :=range _cgg {_ged =append (_ged ,_ggga .Eval (ctx ,ev ));};_eab =append (_eab ,_ged );};return MakeArrayResult (_eab );
};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_ccd ,_dgc ,_cdbb :=_gfgb (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _cdbb .Type ==ResultTypeError {return _cdbb ;};if _dgc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _ccd ==0{return MakeNumberResult (0);};_gefa :=_ccd < 0;if _gefa {_ccd =-_ccd ;};_degaa :=float64 (int (_ccd ));_ebcg :=args [0].Value ();_gdfa :=_bd .Split (_ebcg ,"\u002e");_caac :=0.0;if len (_gdfa )> 1{var _geb error ;_afcb :=_gdfa [1];_caac ,_geb =_bc .ParseFloat (_afcb ,64);
if _geb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");
};_gbgbg :=float64 (len (_afcb ));_caac /=_ea .Pow (10,_gbgbg );};_bbac :=_caac *_dgc /_ea .Pow (10,float64 (int (_ea .Log10 (_dgc )))+1)+_degaa ;if _gefa {_bbac =-_bbac ;};return MakeNumberResult (_bbac );};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_cdcb (args ,_ddff ))};

// String returns a string representation for Negate.
func (_ccdcd Negate )String ()string {return "\u002d"+_ccdcd ._ffabb .String ()};

// Eval evaluates and returns a boolean.
func (_dfd Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_dfd ._ff )};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_bgag :=args [0].AsNumber ();if _bgag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};var _dgba float64 ;_cbgf :=args [1].AsNumber ();if _cbgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dgba =_cbgf .ValueNumber ;if _dgba < 0&&_bgag .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");
};_eeaf :=_bgag .ValueNumber ;_eeaf ,_cadfe :=_ea .Modf (_eeaf /_dgba );if _cadfe !=0{if _bgag .ValueNumber < 0&&_cadfe < 0{_eeaf --;};};return MakeNumberResult (_eeaf *_dgba );};

// Reference returns an invalid reference for Bool.
func (_eaa Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _fdcb =57349;

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_dfbcg :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");
};_dfbcg =int (args [1].ValueNumber );if _dfbcg < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");
};if _dfbcg ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_bbebb :=args [0].Value ();
if _dfbcg > len (_bbebb ){return MakeStringResult (_bbebb );};return MakeStringResult (_bbebb [0:_dfbcg ]);};func init (){_beab ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );
RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );
RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );
RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );
RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// Update updates references in the Range after removing a row/column.
func (_caccd Range )Update (q *_ag .UpdateQuery )Expression {_abeab :=_caccd ;if q .UpdateCurrentSheet {_abeab ._gcddf =_caccd ._gcddf .Update (q );_abeab ._ebad =_caccd ._ebad .Update (q );};return _abeab ;};func (_edcc *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");
};

// Reference returns a string reference value to a vertical range with prefix.
func (_fcbg PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_fccdc :=_fcbg ._ccfd .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_fcbg .verticalRangeReference (_fccdc .Value )};};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_faedc .Lock ();defer _faedc .Unlock ();if _ ,_bgaee :=_cbbd [name ];_bgaee {_ae .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_cbbd [name ]=fn ;};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _ccabb (args ,false )};func LexReader (r _b .Reader )chan *node {_egbg :=NewLexer ();go _egbg .lex (r );return _egbg ._defdf };

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bcaf :=args [0].AsNumber ();if _bcaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ddgae :=0;if len (args )> 1{_beagc :=args [1];if _beagc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_ddgae =int (_beagc .ValueNumber );if _ddgae < 0{_ddgae =0;}else if _ddgae > 4{_ddgae =4;};};_cbbff :=_bcfgd ;switch _ddgae {case 1:_cbbff =_abea ;case 2:_cbbff =_dgeef ;case 3:_cbbff =_cada ;case 4:_cbbff =_gdfd ;};_eaef :=_ea .Trunc (_bcaf .ValueNumber );
_egag :=_fc .Buffer {};for _ ,_bbagc :=range _cbbff {for _eaef >=_bbagc ._dfgc {_egag .WriteString (_bbagc ._dbdg );_eaef -=_bbagc ._dfgc ;};};return MakeStringResult (_egag .String ());};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_afda :=args [0].AsString ();if _afda .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_faadf :=_fc .Buffer {};_eegbc :=false ;_gffce :=false ;_bcfgf :=0;for _ ,_adae :=range _afda .ValueString {_dbfd :=_adae ==' ';if _dbfd {if !_eegbc {continue ;};if !_gffce {_bcfgf ++;_faadf .WriteRune (_adae );};}else {_bcfgf =0;_eegbc =true ;_faadf .WriteRune (_adae );
};_gffce =_dbfd ;};_faadf .Truncate (_faadf .Len ()-_bcfgf );return MakeStringResult (_faadf .String ());};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bcefg :=args [0].AsString ();if _bcefg .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gabcb :=_fc .Buffer {};_bgadf :=false ;for _ ,_beagd :=range _bcefg .ValueString {if !_bgadf &&_f .IsLetter (_beagd ){_gabcb .WriteRune (_f .ToUpper (_beagd ));}else {_gabcb .WriteRune (_f .ToLower (_beagd ));};_bgadf =_f .IsLetter (_beagd );};return MakeStringResult (_gabcb .String ());
};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};_efbb :=args [0];if _efbb .Type !=ResultTypeArray &&_efbb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_fbfa :=_gcdgb (args [1]);_ffagf :=0;for _ ,_gecgb :=range _fccfe (_efbb ){for _ ,_eddf :=range _gecgb {if _cedc (_eddf ,_fbfa ){_ffagf ++;};};};return MakeNumberResult (float64 (_ffagf ));};

// Update returns the same object as updating sheet references does not affect Number.
func (_gadc Number )Update (q *_ag .UpdateQuery )Expression {return _gadc };

// CellRef is a reference to a single cell
type CellRef struct{_ddge string };const (_ byte =iota ;_ccda ;_bbff ;_ebed ;_adga ;_egggg ;);

// Reference returns an invalid reference for String.
func (_gcfgg String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _fggb (_aaaag []Result ,_gfbea rmode )Result {if len (_aaaag )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_cefg :=_aaaag [0].AsNumber ();if _cefg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_edcd :=_aaaag [1].AsNumber ();if _edcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fcac :=_edcd .ValueNumber ;_gccf :=_cefg .ValueNumber ;_fcgd :=1.0;if _fcac > 0{_fcgd =_ea .Pow (1/10.0,_fcac );}else {_fcgd =_ea .Pow (10.0,-_fcac );};_gccf ,_bdab :=_ea .Modf (_gccf /_fcgd );switch _gfbea {case _ggcbc :const _acad =0.499999999;if _bdab >=_acad {_gccf ++;
}else if _bdab <=-_acad {_gccf --;};case _aedd :case _beage :if _bdab > 0{_gccf ++;}else if _bdab < 0{_gccf --;};};return MakeNumberResult (_gccf *_fcgd );};const _bagcd =57347;

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbbe :=args [0].AsNumber ();if _dbbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_ea .Pi /180.0*_dbbe .ValueNumber );};

// Reference returns an invalid reference for Negate.
func (_aadg Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _efedd =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};
func _bgaa (_fafg ,_geecf ,_caff ,_gbbea float64 ,_bdba int )float64 {var _bgb float64 ;if _fafg ==0{_bgb =_gbbea +_caff *_geecf ;}else {_ggfdf :=_ea .Pow (1+_fafg ,_geecf );if _bdba ==1{_bgb =_gbbea *_ggfdf +_caff *(1+_fafg )*(_ggfdf -1)/_fafg ;}else {_bgb =_gbbea *_ggfdf +_caff *(_ggfdf -1)/_fafg ;
};};return -_bgb ;};func _gagd (_cffd ,_cdca int )int {if _cdca ==2&&_bfc (_cffd ){return 29;}else {return _caa [_cdca -1];};};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );
RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );
RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_dfdg ,_abad :=_fbfb (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _abad .Type ==ResultTypeError {return _abad ;};_gcae :=_aecd (_dfdg ._ebg );_faf :=_aecd (_dfdg ._ffad );_dadb :=_dfdg ._gadg ;_cbaaed :=_dfdg ._agcg ;
_fedd :=_ffgg (_gcae ,_faf ,_dadb ,_cbaaed );_eaec ,_bfbd ,_aegf :=_fedd .Date ();return MakeNumberResult (_bad (_eaec ,int (_bfbd ),_aegf ));};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_aaaa :=[]float64 {};
for _ ,_facg :=range args {switch _facg .Type {case ResultTypeString :_fgacd :=_facg .AsNumber ();if _fgacd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_aaaa =append (_aaaa ,_fgacd .ValueNumber );case ResultTypeList ,ResultTypeArray :_bfcc :=GCD (_facg .ListValues ());if _bfcc .Type !=ResultTypeNumber {return _bfcc ;};_aaaa =append (_aaaa ,_bfcc .ValueNumber );case ResultTypeNumber :_aaaa =append (_aaaa ,_facg .ValueNumber );
case ResultTypeError :return _facg ;default:return MakeErrorResult (_a .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_facg .Type ));
};};if _aaaa [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_aaaa )==1{return MakeNumberResult (_aaaa [0]);
};_abga :=_aaaa [0];for _eecga :=1;_eecga < len (_aaaa );_eecga ++{if _aaaa [_eecga ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_abga =_efad (_abga ,_aaaa [_eecga ]);};return MakeNumberResult (_abga );};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};var _cdaa int64 =_gad (1900,_ba .January ,1);const _dgdg =57352;

// Db implements the Excel DB function.
func Db (args []Result )Result {_effg :=len (args );if _effg !=4&&_effg !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cagg :=args [0].ValueNumber ;if _cagg < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adda :=args [1].ValueNumber ;if _adda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cfad :=args [2].ValueNumber ;if _cfad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_agaa :=args [3].ValueNumber ;if _agaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};if _agaa -_cfad > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_ceaa :=12.0;if _effg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ceaa =args [4].ValueNumber ;if _ceaa < 1||_ceaa > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");
};};if _ceaa ==12&&_agaa > _cfad {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _adda >=_cagg {return MakeNumberResult (0);
};_gbfb :=1-_ea .Pow (_adda /_cagg ,1/_cfad );_gbfb =float64 (int (_gbfb *1000+0.5))/1000;_fcef :=_cagg *_gbfb *_ceaa /12;if _agaa ==1{return MakeNumberResult (_fcef );};_gaacg :=_fcef ;_fgaf :=0.0;_cede :=_cfad ;if _cede > _agaa {_cede =_agaa ;};for _gda :=2.0;
_gda <=_cede ;_gda ++{_fgaf =(_cagg -_gaacg )*_gbfb ;_gaacg +=_fgaf ;};if _agaa > _cfad {return MakeNumberResult ((_cagg -_gaacg )*_gbfb *(12-_ceaa )/12);};return MakeNumberResult (_fgaf );};func (_cfafb Result )String ()string {return _cfafb .Value ()};
func (_aacf *Lexer )emit (_bgbe tokenType ,_eadfd []byte ){if _cacae {_a .Println ("\u0065\u006d\u0069\u0074",_bgbe ,_fbfc (string (_eadfd )));};_aacf ._defdf <-&node {_bgbe ,string (_eadfd )};};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _fggb (args ,_beage )};

// Update updates references in the PrefixExpr after removing a row/column.
func (_cfaa PrefixExpr )Update (q *_ag .UpdateQuery )Expression {_cbdd :=_cfaa ;_aedaa :=_cfaa ._gfceg .String ();if _aedaa ==q .SheetToUpdate {_babe :=*q ;_babe .UpdateCurrentSheet =true ;_cbdd ._edab =_cfaa ._edab .Update (&_babe );};return _cbdd ;};
func _feedf (_agfbg ,_defd float64 )float64 {_agfbg =_ea .Trunc (_agfbg );_defd =_ea .Trunc (_defd );if _agfbg ==0&&_defd ==0{return 0;};return _agfbg *_defd /_efad (_agfbg ,_defd );};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_baf :=args [0].ValueNumber ;if _baf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};_ddce ,_gfbf :=_gcfc (args [1],args [2],"\u0058\u004e\u0050\u0056");if _gfbf .Type ==ResultTypeError {return _gfbf ;};_cage :=_ddce ._bfdf ;_ebcb :=_ddce ._cegf ;_cecd :=0.0;_fggg :=_ebcb [0];for _facd ,_bgdb :=range _cage {_cecd +=_bgdb /_ea .Pow (1+_baf ,(_ebcb [_facd ]-_fggg )/365);
};return MakeNumberResult (_cecd );};const _bdd ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_ebb +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_ffab :=len (args );if _ffab !=4&&_ffab !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dcfec ,_badca ,_adggg :=_gece (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _adggg .Type ==ResultTypeError {return _adggg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbag :=args [2].ValueNumber ;if _fbag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_bdgf :=args [3].ValueNumber ;if _bdgf <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_cddbe :=0;if _ffab ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cddbe =int (args [4].ValueNumber );if !_agdc (_cddbe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");
};};_ebac ,_adggg :=_ead (_dcfec ,_badca ,_cddbe );if _adggg .Type ==ResultTypeError {return _adggg ;};return MakeNumberResult ((_bdgf /_fbag -1)/_ebac );};func _gbcc (_dddag ,_abfa ,_gbff ,_ebcf ,_acfe ,_ageda float64 ,_fedae int )(float64 ,Result ){_fbgge :=int (_ageda );
_fbfe :=_egef (_dddag ,_abfa ,_fbgge ,_fedae );_cab :=_bdg (_dddag ,_abfa ,_fbgge ,_fedae )/_fbfe ;_fceb ,_gcbc :=_gfbe (_dddag ,_abfa ,_fbgge ,_fedae );if _gcbc .Type ==ResultTypeError {return 0,_gcbc ;};_ddddf :=_bfcg (_dddag ,_abfa ,_fbgge ,_fedae );
_fcgab :=_acfe /_ea .Pow (1+_ebcf /_ageda ,_fceb -1+_cab );_fcgab -=100*_gbff /_ageda *_ddddf /_fbfe ;_gccd :=100*_gbff /_ageda ;_caebf :=1+_ebcf /_ageda ;for _cfcd :=0.0;_cfcd < _fceb ;_cfcd ++{_fcgab +=_gccd /_ea .Pow (_caebf ,_cfcd +_cab );};return _fcgab ,MakeEmptyResult ();
};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_cbfg :=len (args );if _cbfg < 5||_cbfg > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gedab :=args [0].ValueNumber ;if _gedab < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gecaf :=args [1].ValueNumber ;if _gecaf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ebcfa :=args [2].ValueNumber ;if _ebcfa ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _ebcfa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdfe :=args [3].ValueNumber ;if _fdfe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbdeg :=args [4].ValueNumber ;if _fdfe > _cbdeg {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");
};if _cbdeg > _ebcfa {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_deagg :=2.0;if _cbfg > 5{if args [5].Type ==ResultTypeEmpty {_deagg =0.0;
}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_deagg =args [5].ValueNumber ;if _deagg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};};_abfca :=false ;if _cbfg > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_abfca =args [6].ValueNumber !=0;};_deacc :=0.0;_adbd :=_ea .Floor (_fdfe );_ebebe :=_ea .Ceil (_cbdeg );if _abfca {for _fcdg :=_adbd +1;_fcdg <=_ebebe ;_fcdg ++{_afce :=_eadf (_gedab ,_gecaf ,_ebcfa ,_fcdg ,_deagg );if _fcdg ==_adbd +1{_afce *=_ea .Min (_cbdeg ,_adbd +1)-_fdfe ;
}else if _fcdg ==_ebebe {_afce *=_cbdeg +1-_ebebe ;};_deacc +=_afce ;};}else {_ffbc :=_ebcfa ;var _cbfa float64 ;if !_fdbg (_fdfe ,_ea .Floor (_fdfe )){if _deagg ==1{_cfbe :=_ebcfa /2;if _fdfe > _cfbe ||_fdbg (_fdfe ,_cfbe ){_cbfa =_fdfe -_cfbe ;_fdfe =_cfbe ;
_cbdeg -=_cbfa ;_ffbc ++;};};};if _deagg !=0{_gedab -=_aaeb (_gedab ,_gecaf ,_ebcfa ,_ffbc ,_fdfe ,_deagg );};_deacc =_aaeb (_gedab ,_gecaf ,_ebcfa ,_ebcfa -_fdfe ,_cbdeg -_fdfe ,_deagg );};return MakeNumberResult (_deacc );};func init (){_cbbe =_fg .New (_fg .NewSource (_ba .Now ().UnixNano ()));
RegisterFunction ("\u0041\u0042\u0053",_ceee ("\u0041\u0053\u0049\u004e",_ea .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_ceee ("\u0041\u0053\u0049\u004e",_ea .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_ceee ("\u0041\u0053\u0049\u004e",_ea .Acosh ));
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_ceee ("\u0041\u0043\u004f\u0054",func (_aagae float64 )float64 {return _ea .Pi /2-_ea .Atan (_aagae )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_ceee ("\u0041\u0043\u004fT\u0048",func (_gfbgg float64 )float64 {return _ea .Atanh (1/_gfbgg )}));
RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_ceee ("\u0041\u0053\u0049\u004e",_ea .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_ceee ("\u0041\u0053\u0049N\u0048",_ea .Asinh ));
RegisterFunction ("\u0041\u0054\u0041\u004e",_ceee ("\u0041\u0054\u0041\u004e",_ea .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_ceee ("\u0041\u0054\u0041N\u0048",_ea .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );
RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );
RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_ceee ("\u0043\u004f\u0053",_ea .Cos ));
RegisterFunction ("\u0043\u004f\u0053\u0048",_ceee ("\u0043\u004f\u0053\u0048",_ea .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_gdfgc ("\u0043\u004f\u0054",_ea .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_gdfgc ("\u0043\u004f\u0054\u0048",_ea .Tanh ));
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_gdfgc ("\u0043\u0053\u0043",_ea .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_gdfgc ("\u0043\u0053\u0043",_ea .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );
RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_ceee ("\u0045\u0058\u0050",_ea .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );
RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );
RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_ceee ("\u004c\u004e",_ea .Log ));
RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_ceee ("\u004c\u004f\u00471\u0030",_ea .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );
RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );
RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );
RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );
RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_gdfgc ("\u0053\u0045\u0043",_ea .Cos ));
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_gdfgc ("\u0053\u0045\u0043\u0048",_ea .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );
RegisterFunction ("\u0053\u0049\u004e",_ceee ("\u0053\u0049\u004e",_ea .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_ceee ("\u0053\u0049\u004e\u0048",_ea .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_ceee ("\u0053\u0051\u0052\u0054",_ea .Sqrt ));
RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_ceee ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_bbced float64 )float64 {return _ea .Sqrt (_bbced *_ea .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );
RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_ceee ("\u0054\u0041\u004e",_ea .Tan ));
RegisterFunction ("\u0054\u0041\u004e\u0048",_ceee ("\u0054\u0041\u004e\u0048",_ea .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};const _badce =187;

// String returns a string representation of Number.
func (_ffbd Number )String ()string {return _bc .FormatFloat (_ffbd ._egagf ,'f',-1,64)};func _gdca (_cgdc ,_ceag ,_cdg ,_dfcf int )int {if _ceag > _cdg {return 0;};if _cfb (_dfcf ){return (_cdg -_ceag +1)*30;};_abfe :=0;for _gga :=_ceag ;_gga <=_cdg ;
_gga ++{_abfe +=_gagd (_cgdc ,_gga );};return _abfe ;};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_bfg string ,_gde Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_geg string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_ba .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_dbf int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_aabg string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_gge string )string ;

// GetFormat returns if cell is protected.
GetLocked (_dbc string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_add string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_beb string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_dc ,_fbbe int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_ffc string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_cc string ,_egec bool );

// NamedRange returns a named range.
NamedRange (_dca string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_cge ,_cee uint32 );};const _cdcfg =57369;

// Eval evaluates a vertical range returning a list of results or an error.
func (_fagbd VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_faeac :=_fagbd .verticalRangeReference ();if _cdfdg ,_gbcf :=ev .GetFromCache (_faeac );_gbcf {return _cdfdg ;};_bbbcf ,_bagdf :=_afeba (ctx ,_fagbd ._dbbac ,_fagbd ._gabga );_beece :=_adge (ctx ,ev ,_bbbcf ,_bagdf );
ev .SetCache (_faeac ,_beece );return _beece ;};const _ggef =57355;func _gbbg (_affg ,_cbee []float64 ,_ddbc float64 )float64 {_fbcb :=_ddbc +1;_gecg :=0.0;_bgcf :=len (_affg );_gade :=_cbee [0];for _eadcf :=1;_eadcf < _bgcf ;_eadcf ++{_fgda :=(_cbee [_eadcf ]-_gade )/365;
_gecg -=_fgda *_affg [_eadcf ]/_ea .Pow (_fbcb ,_fgda +1);};return _gecg ;};

// Update returns the same object as updating sheet references does not affect Bool.
func (_cdd Bool )Update (q *_ag .UpdateQuery )Expression {return _cdd };

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_bfgcd ,_fdc :=_fbfb (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _fdc .Type ==ResultTypeError {return _fdc ;};_eafb :=_bfgcd ._gadg ;_daff :=_bfgcd ._agcg ;_bgfb ,_fdc :=_gfbe (_bfgcd ._ebg ,_bfgcd ._ffad ,_eafb ,_daff );
if _fdc .Type ==ResultTypeError {return _fdc ;};return MakeNumberResult (_bgfb );};const _dda ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";
var _cafgf =[...]int {1};func (_fadcf node )String ()string {return _a .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_fadcf ._cgbda ,_fbfc (string (_fadcf ._dacf )));};

// Reference returns a string reference value to a range.
func (_ebeac Range )Reference (ctx Context ,ev Evaluator )Reference {_beegd :=_ebeac ._gcddf .Reference (ctx ,ev );_dcebcd :=_ebeac ._ebad .Reference (ctx ,ev );if _beegd .Type ==ReferenceTypeCell &&_dcebcd .Type ==ReferenceTypeCell {return MakeRangeReference (_dgbage (_beegd ,_dcebcd ));
};return ReferenceInvalid ;};func _dfgf (_fggbg []Result ,_egebg bool ,_degd string )Result {var _cfff ,_gfdcd string ;if _egebg {_cfff ="\u0074\u0068\u0072e\u0065";_gfdcd ="\u006f\u0064\u0064";}else {_cfff ="\u0074\u0077\u006f";_gfdcd ="\u0065\u0076\u0065\u006e";
};_ffea :=len (_fggbg );if (_egebg &&_ffea < 3)||(!_egebg &&_ffea < 2){return MakeErrorResult (_degd +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_cfff +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};if (_ffea /2*2==_ffea )==_egebg {return MakeErrorResult (_degd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gfdcd +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_dcec :=-1;_gfbgb :=-1;
for _cedf :=0;_cedf < _ffea ;_cedf +=2{_bbeb :=_fggbg [_cedf ];if _bbeb .Type !=ResultTypeArray &&_bbeb .Type !=ResultTypeList {return MakeErrorResult (_degd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");
};_cgabb :=_fccfe (_bbeb );if _gfbgb ==-1{_gfbgb =len (_cgabb );_dcec =len (_cgabb [0]);}else if len (_cgabb )!=_gfbgb ||len (_cgabb [0])!=_dcec {return MakeErrorResult (_degd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");
};if _egebg &&_cedf ==0{_cedf --;};};return _cff ;};func _eabdf (_bageg []Result )(bool ,Result ){for _ ,_fdgc :=range _bageg {if _fdgc .Type ==ResultTypeError {return true ,_fdgc ;};};return false ,MakeEmptyResult ();};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_gcfe :=len (args );if _gcfe < 4||_gcfe > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gafec :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dcbf :=args [1].ValueNumber ;if _dcbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbce :=args [2].ValueNumber ;if _bbce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_ccge :=args [3].ValueNumber ;_gcfg :=0.0;if _gcfe > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gcfg =args [4].ValueNumber ;};_eddb :=0;if _gcfe ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_eddb =int (args [5].ValueNumber );if _eddb !=0{_eddb =1;};};return MakeNumberResult (_dgfgb (_gafec ,_dcbf ,_bbce ,_ccge ,_gcfg ,_eddb ));};func _cfb (_bfd int )bool {return _bfd ==0||_bfd ==4};func (_fdbd *yyParserImpl )Lookahead ()int {return _fdbd ._dfbf };


// Update returns the same object as updating sheet references does not affect Error.
func (_gdf Error )Update (q *_ag .UpdateQuery )Expression {return _gdf };

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bcedb :=args [0].Ref ;
if _bcedb .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");
};_cadf ,_ecdg :=_cf .ParseCellReference (_bcedb .Value );if _ecdg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bcedb .Value );};return MakeNumberResult (float64 (_cadf .ColumnIdx +1));
};

// Reference returns an invalid reference for EmptyExpr.
func (_gee EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _geeca (_dbeg Reference ,_fggf Context )bool {return _fggf .Sheet (_dbeg .Value )==InvalidReferenceContext ;};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_geaf SheetPrefixExpr )Update (q *_ag .UpdateQuery )Expression {return _geaf };func _afc (_gdb ,_gcbf int )int {switch _gcbf {case 1:if _bfc (_gdb ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// Reference returns an invalid reference for BinaryExpr.
func (_ddg BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bebf :=args [0].AsString ();if _bebf .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (len (_bebf .ValueString )));};const _eaab ="\u005e\u0028\u0028"+_cbf +"\u007c"+_fda +"\u007c"+_dda +"\u007c"+_bdd +"\u0029\u0020\u0029\u003f";

// Reference returns an invalid reference for Error.
func (_fbbc Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _cbdc (_ebaa float64 ,_agda *criteriaRegex )bool {_gfgd ,_fbef :=_bc .ParseFloat (_agda ._aadad ,64);if _fbef !=nil {return false ;};switch _agda ._abgb {case _ccda :return _ebaa ==_gfgd ;
case _bbff :return _ebaa <=_gfgd ;case _ebed :return _ebaa >=_gfgd ;case _adga :return _ebaa < _gfgd ;case _egggg :return _ebaa > _gfgd ;};return false ;};func _agdc (_aade int )bool {return _aade >=0&&_aade <=4};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_gfc :data }};type countMode byte ;

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_gfceg Expression ;_edab Expression ;};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_faedc .Lock ();defer _faedc .Unlock ();if _dcade ,_cgbgb :=_cbbd [name ];_cgbgb {return _dcade ;};return nil ;};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_eedd ,_gedb :=_agbee (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _gedb .Type ==ResultTypeError {return _gedb ;};_aecb :=_eedd ._bac ;_fbgb :=_eedd ._afbd ;_adfe :=_eedd ._dgea ;_ebbg :=_eedd ._ebf ;_efcg :=_eedd ._abbc ;
_cedd :=_eedd ._bccd ;_bddd :=_geec (_aecb ,_fbgb ,_adfe ,0,_cedd );_ecg :=0.0;if _ebbg ==1{if _cedd ==0{_ecg =-_adfe ;_ebbg ++;};};for _feddb :=_ebbg ;_feddb <=_efcg ;_feddb ++{if _cedd ==1{_ecg +=_bgaa (_aecb ,_feddb -2,_bddd ,_adfe ,1)-_bddd ;}else {_ecg +=_bgaa (_aecb ,_feddb -1,_bddd ,_adfe ,0);
};};_ecg *=_aecb ;return MakeNumberResult (_ecg );};var _fggd =[...]int {-1,1,1,-1,-2,0};var _cdbf =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};var _agde =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};


// GetFilename returns an empty string for the invalid reference context.
func (_eaeca *ivr )GetFilename ()string {return ""};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdadf :=args [0].ValueNumber ;if _fdadf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbcf :=args [1].ValueNumber ;if _dbcf <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ddgef :=args [2].ValueNumber ;if _ddgef <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");
};return MakeNumberResult ((_ea .Log10 (_ddgef )-_ea .Log10 (_dbcf ))/_ea .Log10 (1+_fdadf ));};const _ceab ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";


// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_afagb ,_fbcee ,_gfbca :=_afeae (from ,to );if _gfbca !=nil {_ae .Log .Debug (_gfbca .Error ());return NewError (_gfbca .Error ());};return PrefixRangeExpr {_eeeeg :pfx ,_babd :_afagb ,_cgdfg :_fbcee };
};func _fgeb (_fcf ,_gbb int64 )float64 {return float64 (int (0.5+float64 ((_gbb -_fcf )/86400)))};var _cff Result =MakeEmptyResult ();const _fgdf =57361;

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_gbgag :=_bd .Split (v ,"\u003a");if len (_gbgag )!=2{return nil ;};if _gbgag [0]> _gbgag [1]{_gbgag [0],_gbgag [1]=_gbgag [1],_gbgag [0];};return VerticalRange {_dbbac :_gbgag [0],_gabga :_gbgag [1]};};const _dfcd =57359;


// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_ecfc :=[]string {};for _eccbd :=range _baegb {_ecfc =append (_ecfc ,_eccbd );};for _gbeagg :=range _cbbd {_ecfc =append (_ecfc ,_gbeagg );};_db .Strings (_ecfc );return _ecfc ;};const _dbbc =57370;

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ffa :=_ba .Now ();_ ,_bfgc :=_ffa .Zone ();_cebg :=_fgeb (_cdaa ,_ffa .Unix ()+int64 (_bfgc ))+1;return MakeNumberResult (_cebg );};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dcge :=args [0].Ref ;if _dcge .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .HasFormula (_dcge .Value ));};type parsedReplaceObject struct{_babce string ;_agcdd int ;_ebdgce int ;_dfge string ;};var _adfce =[...]int {0};var _cbbe *_fg .Rand ;

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_ebce :=args [0].AsString ();if _ebce .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_gcgc :=args [1].AsNumber ();if _gcgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _gcgc .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");
};if _gcgc .ValueNumber ==0{return MakeStringResult ("");};_fceac :=_fc .Buffer {};for _fecb :=0;_fecb < int (_gcgc .ValueNumber );_fecb ++{_fceac .WriteString (_ebce .ValueString );};return MakeStringResult (_fceac .String ());};

// Negate is a negate expression like -A1.
type Negate struct{_ffabb Expression };

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (ev .LastEvalIsRef ());};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aedb :=args [0].AsNumber ();if _aedb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eacbg :=int (_aedb .ValueNumber );if _eacbg < 0||_eacbg > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");
};return MakeStringResult (_a .Sprintf ("\u0025\u0063",_eacbg ));};func _efad (_cbdb ,_fccg float64 )float64 {_cbdb =_ea .Trunc (_cbdb );_fccg =_ea .Trunc (_fccg );if _cbdb ==0{return _fccg ;};if _fccg ==0{return _cbdb ;};for _cbdb !=_fccg {if _cbdb > _fccg {_cbdb =_cbdb -_fccg ;
}else {_fccg =_fccg -_cbdb ;};};return _cbdb ;};var _gaag =[]*_bb .Regexp {};const _cad ="\u0028\u0020\u0028"+_aeg +"\u007c"+_egeb +"\u007c"+_dfc +"\u007c"+_dad +"\u0029\u0029\u003f\u0024";func init (){_gefcf ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );
RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );
RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );
RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );
RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};func _dabbc ()yyParser {return &yyParserImpl {}};


// IsBool returns false for the invalid reference context.
func (_ccdfd *ivr )IsBool (cellRef string )bool {return false };

// String returns a string representation of a range with prefix.
func (_ebaf PrefixRangeExpr )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_ebaf ._eeeeg .String (),_ebaf ._babd .String (),_ebaf ._cgdfg .String ());};type Expression interface{Eval (_bbg Context ,_gdge Evaluator )Result ;
Reference (_cdab Context ,_bdb Evaluator )Reference ;String ()string ;Update (_ec *_ag .UpdateQuery )Expression ;};func _fccfe (_fagc Result )[][]Result {switch _fagc .Type {case ResultTypeArray :return _fagc .ValueArray ;case ResultTypeList :return [][]Result {_fagc .ValueList };
default:return [][]Result {};};};

// String returns a string representation of a horizontal range with prefix.
func (_fddgb PrefixHorizontalRange )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_fddgb ._affed .String (),_fddgb ._ebag ,_fddgb ._gecgf );};

// String returns a string representation of ConstArrayExpr.
func (_gcf ConstArrayExpr )String ()string {return ""};func _ggdc (_fged ,_dddaga Result ,_dbaa ,_ceca bool )cmpResult {_fged =_fged .AsNumber ();_dddaga =_dddaga .AsNumber ();if _fged .Type !=_dddaga .Type {return _ecfa ;};if _fged .Type ==ResultTypeNumber {if _fged .ValueNumber ==_dddaga .ValueNumber {return _gbaf ;
};if _fged .ValueNumber < _dddaga .ValueNumber {return _bbdea ;};return _afcee ;};if _fged .Type ==ResultTypeString {_dbgb :=_fged .ValueString ;_bgge :=_dddaga .ValueString ;if !_dbaa {_dbgb =_bd .ToLower (_dbgb );_bgge =_bd .ToLower (_bgge );};if _ceca {_adccf :=_fb .Match (_bgge ,_dbgb );
if _adccf {return _gbaf ;}else {return _afcee ;};};return cmpResult (_bd .Compare (_dbgb ,_bgge ));};if _fged .Type ==ResultTypeEmpty {return _gbaf ;};if _fged .Type ==ResultTypeList {if len (_fged .ValueList )< len (_dddaga .ValueList ){return _bbdea ;
};if len (_fged .ValueList )> len (_dddaga .ValueList ){return _afcee ;};for _dbad :=range _fged .ValueList {_fbfed :=_ggdc (_fged .ValueList [_dbad ],_dddaga .ValueList [_dbad ],_dbaa ,_ceca );if _fbfed !=_gbaf {return _fbfed ;};};return _gbaf ;};if _fged .Type ==ResultTypeList {if len (_fged .ValueArray )< len (_dddaga .ValueArray ){return _bbdea ;
};if len (_fged .ValueArray )> len (_dddaga .ValueArray ){return _afcee ;};for _afceeb :=range _fged .ValueArray {_egcc :=_fged .ValueArray [_afceeb ];_afcd :=_fged .ValueArray [_afceeb ];if len (_egcc )< len (_afcd ){return _bbdea ;};if len (_egcc )> len (_afcd ){return _afcee ;
};for _acabd :=range _egcc {_dcgb :=_ggdc (_egcc [_acabd ],_afcd [_acabd ],_dbaa ,_ceca );if _dcgb !=_gbaf {return _dcgb ;};};};return _gbaf ;};return _ecfa ;};

// Eval evaluates and returns the result of a formula.
func (_gcc *defEval )Eval (ctx Context ,formula string )Result {_gefe :=ParseString (formula );_gaa :=make (chan Result );go func (){if _gefe ==nil {_gaa <-MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));
}else {_gcc .checkLastEvalIsRef (ctx ,_gefe );_gaa <-_gefe .Eval (ctx ,_gcc );};}();select{case _eb :=<-_gaa :return _eb ;case <-_ba .After (_gcdf ):_ae .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");
return MakeNumberResult (0);};};func _aecd (_cead float64 )_ba .Time {_cgd :=int64 ((_cead -_fed )*_eee );return _ba .Unix (0,_cgd ).UTC ();};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_eda ,_dfda :=_agbee (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _dfda .Type ==ResultTypeError {return _dfda ;};_ddaga :=_eda ._bac ;_acdea :=_eda ._afbd ;_eeag :=_eda ._dgea ;_ggbe :=_eda ._ebf ;
_edac :=_eda ._abbc ;_efb :=_eda ._bccd ;_ebdd :=_geec (_ddaga ,_acdea ,_eeag ,0,_efb );_fddf :=0.0;if _ggbe ==1{if _efb ==0{_fddf =_ebdd +_eeag *_ddaga ;}else {_fddf =_ebdd ;};_ggbe ++;};for _baee :=_ggbe ;_baee <=_edac ;_baee ++{if _efb ==1{_fddf +=_ebdd -(_bgaa (_ddaga ,_baee -2,_ebdd ,_eeag ,1)-_ebdd )*_ddaga ;
}else {_fddf +=_ebdd -_bgaa (_ddaga ,_baee -1,_ebdd ,_eeag ,0)*_ddaga ;};};return MakeNumberResult (_fddf );};func _geec (_ebga ,_ccb ,_fbga ,_bcca float64 ,_ebae int )float64 {var _ccbe float64 ;if _ebga ==0{_ccbe =(_fbga +_bcca )/_ccb ;}else {_ecf :=_ea .Pow (1+_ebga ,_ccb );
if _ebae ==1{_ccbe =(_bcca *_ebga /(_ecf -1)+_fbga *_ebga /(1-1/_ecf ))/(1+_ebga );}else {_ccbe =_bcca *_ebga /(_ecf -1)+_fbga *_ebga /(1-1/_ecf );};};return -_ccbe ;};func _babb (_cfbaf Context ,_bcab ,_ecgc int )(string ,string ){_agea :="\u0041"+_bc .Itoa (_bcab );
_fafge :=_cfbaf .LastColumn (_bcab ,_ecgc );_dgcf :=_fafge +_bc .Itoa (_ecgc );return _agea ,_dgcf ;};

// LastRow returns 0 for the invalid reference context.
func (_dcfg *ivr )LastRow (colFrom string )int {return 0};func _feeb (_ffgf Result ,_dabd ,_bacdf int )[][]Result {_ccce :=[][]Result {};switch _ffgf .Type {case ResultTypeArray :for _fbead ,_dafd :=range _ffgf .ValueArray {if _fbead < _dabd {_ccce =append (_ccce ,_cgdfc (MakeListResult (_dafd ),_bacdf ));
}else {_ccce =append (_ccce ,_cgdfc (MakeErrorResultType (ErrorTypeNA ,""),_bacdf ));};};case ResultTypeList :_bge :=_cgdfc (_ffgf ,_bacdf );for _egaa :=0;_egaa < _dabd ;_egaa ++{_ccce =append (_ccce ,_bge );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _edbce :=0;
_edbce < _dabd ;_edbce ++{_bccdg :=_cgdfc (_ffgf ,_bacdf );_ccce =append (_ccce ,_bccdg );};};return _ccce ;};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_fgc *defEval )LastEvalIsRef ()bool {return _fgc ._cgc };

// Eval evaluates a range with prefix returning a list of results or an error.
func (_dgca PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_ddbgg :=_dgca ._eeeeg .Reference (ctx ,ev );_efbg :=_dgca ._babd .Reference (ctx ,ev );_ccdgg :=_dgca ._cgdfg .Reference (ctx ,ev );switch _ddbgg .Type {case ReferenceTypeSheet :if _geeca (_ddbgg ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ddbgg .Value ));
};_cdfb :=_gbaff (_ddbgg ,_efbg ,_ccdgg );if _efbg .Type ==ReferenceTypeCell &&_ccdgg .Type ==ReferenceTypeCell {if _fccdaa ,_bgee :=ev .GetFromCache (_cdfb );_bgee {return _fccdaa ;}else {_acfcb :=_adge (ctx .Sheet (_ddbgg .Value ),ev ,_efbg .Value ,_ccdgg .Value );
ev .SetCache (_cdfb ,_acfcb );return _acfcb ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_cdfb );default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ddbgg .Type ));
};};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_ddba *ivr )GetLabelPrefix (cellRef string )string {return ""};func _aag (_ddd BinOpType ,_cec ,_cg [][]Result )Result {_fe :=[][]Result {};for _gg :=range _cec {_bag :=_bf (_ddd ,_cec [_gg ],_cg [_gg ]);if _bag .Type ==ResultTypeError {return _bag ;
};_fe =append (_fe ,_bag .ValueList );};return MakeArrayResult (_fe );};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aadd :=ctx .GetEpoch ();_fce ,_dgfgc :=_bdcf (args [0].Value (),_aadd );if _dgfgc !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (float64 (_fce .Year ()));};const _dbadd =57362;

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fcec :=args [0].ValueNumber ;if _fcec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_dccg :=args [1].ValueNumber ;if _dccg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eeef :=args [2].ValueNumber ;if _eeef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");
};return MakeNumberResult (_ea .Pow (_eeef /_dccg ,1/_fcec )-1);};const _aaeg =57344;

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ddbd :=args [0].AsString ();if _ddbd .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};return ctx .Cell (_ddbd .ValueString ,ev );};func _gdfgc (_acaf string ,_cgce func (_cgdb float64 )float64 )Function {return func (_cddf []Result )Result {if len (_cddf )!=1{return MakeErrorResult (_acaf +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_bbeg :=_cddf [0].AsNumber ();switch _bbeg .Type {case ResultTypeNumber :_cece :=_cgce (_bbeg .ValueNumber );if _ea .IsNaN (_cece ){return MakeErrorResult (_acaf +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _ea .IsInf (_cece ,0){return MakeErrorResult (_acaf +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");
};if _cece ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_acaf +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_cece );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_acaf +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _bbeg ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_acaf ,_bbeg .Type ));
};};};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_cba Context ,formula string )Result ;SetCache (_gaee string ,_gefc Result );GetFromCache (_dgg string )(Result ,bool );LastEvalIsRef ()bool ;};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_abebg :=args [0].AsNumber ();if _abebg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _abebg .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_ebff :=float64 (1);_cdda :=_ea .Trunc (_abebg .ValueNumber );for _dgeg :=_cdda ;_dgeg > 1;_dgeg -=2{_ebff *=_dgeg ;};return MakeNumberResult (_ebff );};const _eceba =57375;

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_ddda ,_ggfd :=_cdeb (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _ggfd .Type ==ResultTypeError {return _ggfd ;};_afbgf :=_ddda ._gbbe ;_efe :=_ddda ._egeea ;_abg :=_ddda ._abge ;_fbca :=_ddda ._dffd ;
_daef :=_ddda ._adff ;_efeb :=_ddda ._defb ;if _efeb >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");
};_fbac :=_ddda ._dgae ;_ccc :=1.0/_efeb ;_dabb :=2.5;if _ccc < 3{_dabb =1;}else if _ccc < 5{_dabb =1.5;}else if _ccc <=6{_dabb =2;};_efeb *=_dabb ;_eadg ,_cgcd :=_ead (_efe ,_abg ,_fbac );if _cgcd .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");
};_abfc :=_fbaf (_eadg *_efeb *_afbgf );_afbgf -=_abfc ;_cca :=_afbgf -_fbca ;for _fdg :=0;_fdg < _daef ;_fdg ++{_abfc =_fbaf (_efeb *_afbgf );_cca -=_abfc ;if _cca < 0{switch _daef -_fdg {case 0:case 1:return MakeNumberResult (_fbaf (_afbgf *0.5));default:return MakeNumberResult (0);
};};_afbgf -=_abfc ;};return MakeNumberResult (_abfc );};func _feba (_afacf Result ,_dagdc ,_gdbbg string )(string ,Result ){switch _afacf .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _afacf .Value (),_cff ;default:return "",MakeErrorResult (_dagdc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gdbbg +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");
};};func _fbccg (_gdfad [][]Result )float64 {if len (_gdfad )==2{_bedeg :=_gdfad [0][0].AsNumber ();_ggba :=_gdfad [0][1].AsNumber ();_bcgc :=_gdfad [1][0].AsNumber ();_bgabd :=_gdfad [1][1].AsNumber ();if _bedeg .Type !=ResultTypeNumber ||_ggba .Type !=ResultTypeNumber ||_bcgc .Type !=ResultTypeNumber ||_bgabd .Type !=ResultTypeNumber {return _ea .NaN ();
};return _bedeg .ValueNumber *_bgabd .ValueNumber -_bcgc .ValueNumber *_ggba .ValueNumber ;};_fdag :=float64 (0);_ebge :=float64 (1);for _decb :=range _gdfad {_fdag +=_ebge *_gdfad [0][_decb ].ValueNumber *_fbccg (_dgdf (_gdfad ,_decb ));_ebge *=-1;};return _fdag ;
};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_baaa :=len (args );if _baaa !=4&&_baaa !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dgbe ,_bcdd ,_dbdab :=_gece (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _dbdab .Type ==ResultTypeError {return _dbdab ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bada :=args [2].ValueNumber ;if _bada <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_ecbb :=args [3].ValueNumber ;if _ecbb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");
};_gdba :=0;if _baaa ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdba =int (args [4].ValueNumber );if !_agdc (_gdba ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");
};};_egbf ,_dbdab :=_ead (_dgbe ,_bcdd ,_gdba );if _dbdab .Type ==ResultTypeError {return _dbdab ;};return MakeNumberResult (_ecbb *(1-_bada *_egbf ));};

// String returns an empty string for Error.
func (_gae Error )String ()string {return ""};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );
RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );
RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );
RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );
RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );
RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_fff ,_eece :=_fbfb (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _eece .Type ==ResultTypeError {return _eece ;};_fdf :=_aecd (_fff ._ebg );_cfc :=_aecd (_fff ._ffad );_bcea :=_fff ._gadg ;_dfae :=_bedb (_fdf ,_cfc ,_bcea );
_cggb ,_aeff ,_bfe :=_dfae .Date ();return MakeNumberResult (_bad (_cggb ,int (_aeff ),_bfe ));};const (_fgcb countMode =iota ;_ddff ;_gbgbf ;);

// Eval evaluates and returns an expression with prefix.
func (_eebe PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_efaeg :=_eebe ._gfceg .Reference (ctx ,ev );switch _efaeg .Type {case ReferenceTypeSheet :if _geeca (_efaeg ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_efaeg .Value ));
};_eedgc :=ctx .Sheet (_efaeg .Value );return _eebe ._edab .Eval (_eedgc ,ev );default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_efaeg .Type ));
};};func NewLexer ()*Lexer {return &Lexer {_defdf :make (chan *node )}};func _afeba (_efdgg Context ,_bfbcf ,_dedgdb string )(string ,string ){_bbeag :=_bfbcf +"\u0031";_eagf :=_efdgg .LastRow (_bfbcf );_eecb :=_dedgdb +_bc .Itoa (_eagf );return _bbeag ,_eecb ;
};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_gbefb :=len (args );if _gbefb !=4&&_gbefb !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_acgd ,_eabf ,_bgcfc :=_gece (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _bgcfc .Type ==ResultTypeError {return _bgcfc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ceegg :=args [2].ValueNumber ;if _ceegg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_bbbdb :=args [3].ValueNumber ;if _bbbdb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cebb :=0;if _gbefb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cebb =int (args [4].ValueNumber );if !_agdc (_cebb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");
};};_baga ,_bgcfc :=_ead (_acgd ,_eabf ,_cebb );if _bgcfc .Type ==ResultTypeError {return _bgcfc ;};return MakeNumberResult (_ceegg /(1-_bbbdb *_baga ));};func _eabfe (_dfgfb string ,_bfbg []Result )(*parsedReplaceObject ,Result ){if len (_bfbg )!=4{return nil ,MakeErrorResult (_dfgfb +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _bfbg [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_dfgfb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_afcba :=_bfbg [0].ValueString ;if _bfbg [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dfgfb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");
};_bedec :=int (_bfbg [1].ValueNumber )-1;if _bfbg [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dfgfb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_fdff :=int (_bfbg [2].ValueNumber );if _bfbg [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_dfgfb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");
};_cfbb :=_bfbg [3].ValueString ;return &parsedReplaceObject {_afcba ,_bedec ,_fdff ,_cfbb },_cff ;};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bbea :=args [0].AsNumber ();if _bbea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eadcg :=float64 (1);_ceagd :=args [1].AsNumber ();if _ceagd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_eadcg =_ceagd .ValueNumber ;if _eadcg < 0&&_bbea .ValueNumber > 0||_eadcg > 0&&_bbea .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");
};_adgbd :=_bbea .ValueNumber ;_adgbd ,_addc :=_ea .Modf (_adgbd /_eadcg );if _ea .Trunc (_addc +0.5)> 0{_adgbd ++;};return MakeNumberResult (_adgbd *_eadcg );};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_defdf chan *node ;_bacac _dd .Mutex ;_eafga []chan *node ;_dabe []*node ;};

// String returns a string representation of CellRef.
func (_cgb CellRef )String ()string {return _cgb ._ddge };func (_efcc *Lexer )Next ()*node {_efcc ._bacac .Lock ();defer _efcc ._bacac .Unlock ();if len (_efcc ._dabe )> 0{_agcff :=_efcc ._dabe [0];_efcc ._dabe =_efcc ._dabe [1:];return _agcff ;};return _efcc .nextRaw ();
};

// String returns an empty string for EmptyExpr.
func (_de EmptyExpr )String ()string {return ""};const _gcdf =_ba .Second *1;func _afdc (_bbbcb yyLexer )int {return _dabbc ().Parse (_bbbcb )};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_daddg :=len (args );if _daddg !=4&&_daddg !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_bfgb ,_cdcg :=_cbeg (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _cdcg .Type ==ResultTypeError {return _cdcg ;};_eefc ,_cdcg :=_cbeg (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");
if _cdcg .Type ==ResultTypeError {return _cdcg ;};if _bfgb >=_eefc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_gfaa :=args [2].ValueNumber ;if _gfaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ffcee :=args [3].ValueNumber ;if _ffcee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acef :=0;if _daddg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_acef =int (args [4].ValueNumber );if !_agdc (_acef ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");
};};_bgae ,_cdcg :=_ead (_bfgb ,_eefc ,_acef );if _cdcg .Type ==ResultTypeError {return _cdcg ;};return MakeNumberResult (_ffcee *_gfaa *_bgae );};func (_bddee ResultType )String ()string {if _bddee >=ResultType (len (_daggd )-1){return _a .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_bddee );
};return _ceab [_daggd [_bddee ]:_daggd [_bddee +1]];};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_feg :=args [0];switch _feg .Type {case ResultTypeEmpty :return MakeNumberResult (1);
case ResultTypeNumber :_feda :=_aecd (_feg .ValueNumber );return MakeNumberResult (float64 (_feda .Month ()));case ResultTypeString :_gbce :=_bd .ToLower (_feg .ValueString );if !_ffce (_gbce ){_ ,_ ,_ ,_ ,_deag ,_cfg :=_dcc (_gbce );if _cfg .Type ==ResultTypeError {_cfg .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";
return _cfg ;};if _deag {return MakeNumberResult (1);};};_ ,_fcdb ,_ ,_ ,_bea :=_gfcf (_gbce );if _bea .Type ==ResultTypeError {return _bea ;};return MakeNumberResult (float64 (_fcdb ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");
};};

// Eval evaluates the binary expression using the context given.
func (_ab BinaryExpr )String ()string {_gdg :="";switch _ab ._agc {case BinOpTypePlus :_gdg ="\u002b";case BinOpTypeMinus :_gdg ="\u002d";case BinOpTypeMult :_gdg ="\u002a";case BinOpTypeDiv :_gdg ="\u002f";case BinOpTypeExp :_gdg ="\u005e";case BinOpTypeLT :_gdg ="\u003c";
case BinOpTypeGT :_gdg ="\u003e";case BinOpTypeEQ :_gdg ="\u003d";case BinOpTypeLEQ :_gdg ="\u003c\u003d";case BinOpTypeGEQ :_gdg ="\u003e\u003d";case BinOpTypeNE :_gdg ="\u003c\u003e";case BinOpTypeConcat :_gdg ="\u0026";};return _ab ._bda .String ()+_gdg +_ab ._aa .String ();
};func _dgbage (_abggd ,_ddeee Reference )string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_abggd .Value ,_ddeee .Value );};func _ca (_eg Result )bool {if _eg .Type ==ResultTypeString {return _eg .ValueString =="";};return _eg .ValueNumber ==0;};
func (_gb BinOpType )String ()string {if _gb >=BinOpType (len (_ge )-1){return _a .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_gb );};return _dddd [_ge [_gb ]:_ge [_gb +1]];};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_eddc :=args [0];
if _eddc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_aegd :=int (_eddc .ValueNumber );if _aegd < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");
};if len (args )<=_aegd {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");
};return args [_aegd ];};func (_aacb HorizontalRange )horizontalRangeReference ()string {return _a .Sprintf ("\u0025\u0064\u003a%\u0064",_aacb ._fgba ,_aacb ._deeb );};type amorArgs struct{_gbbe float64 ;_egeea float64 ;_abge float64 ;_dffd float64 ;_adff int ;
_defb float64 ;_dgae int ;};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_dcae :=args [0].AsNumber ();if _dcae .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_fdgd :=10.0;if len (args )> 1{_bdgd :=args [1].AsNumber ();if _bdgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");
};_fdgd =args [1].ValueNumber ;};if _dcae .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");
};if _fdgd ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");
};return MakeNumberResult (_ea .Log (_dcae .ValueNumber )/_ea .Log (_fdgd ));};const _feacc ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";
func _ccaa (_eceb ,_afab []float64 ,_dbgdf float64 )Result {_dbda :=false ;_gafeg :=false ;for _gcac :=0;_gcac < len (_eceb );_gcac ++{if _eceb [_gcac ]> 0{_dbda =true ;};if _eceb [_gcac ]< 0{_gafeg =true ;};};if !_dbda ||!_gafeg {return MakeErrorResultType (ErrorTypeNum ,"");
};_cggad :=_dbgdf ;_bcg :=1e-10;_fcfg :=0;_eeff :=50;_fagf :=false ;for {_eabgb :=_eddba (_eceb ,_afab ,_cggad );_dfbc :=_cggad -_eabgb /_gbbg (_eceb ,_afab ,_cggad );_dagcc :=_ea .Abs (_dfbc -_cggad );_cggad =_dfbc ;_fcfg ++;if _dagcc <=_bcg ||_ea .Abs (_eabgb )<=_bcg {break ;
};if _fcfg > _eeff {_fagf =true ;break ;};};if _fagf ||_ea .IsNaN (_cggad )||_ea .IsInf (_cggad ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_cggad );};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _b .Reader )Expression {_ggfab :=&plex {_bbcfg :LexReader (r )};_afdc (_ggfab );if _ggfab ._cffg !=""{return nil ;};return _ggfab ._dbba ;};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fbfbb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gabg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bffa :=args [2].ValueNumber ;if _bffa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aaea :=args [3].ValueNumber ;if _aaea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _aaea > _bffa {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");
};_dffg :=(_fbfbb -_gabg )*(_bffa -_aaea +1)*2;_cgfb :=_bffa *(_bffa +1);return MakeNumberResult (_dffg /_cgfb );};

// ReferenceType is a type of reference
//
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _dgf ,_fbcg float64 ;switch args [0].Type {case ResultTypeNumber :_fbcg =args [0].ValueNumber ;
case ResultTypeString :_aeb :=DateValue ([]Result {args [0]});if _aeb .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");
};_fbcg =_aeb .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_dgf =args [1].ValueNumber ;
if _dgf < 62&&_fbcg >=62{_dgf --;};case ResultTypeString :_dfb :=DateValue ([]Result {args [1]});if _dfb .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");
};_dgf =_dfb .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_gfb :=float64 (int (_fbcg -_dgf ));return MakeNumberResult (_gfb );
};type yyParserImpl struct{_afbff yySymType ;_bgdd [_eedg ]yySymType ;_dfbf int ;};

// Reference returns a string reference value to a cell.
func (_ed CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_ed ._ddge };};

// Update updates references in the BinaryExpr after removing a row/column.
func (_dgd BinaryExpr )Update (q *_ag .UpdateQuery )Expression {_aaf :=_dgd ;_aaf ._bda =_dgd ._bda .Update (q );_aaf ._aa =_dgd ._aa .Update (q );return _aaf ;};func _ebc (_ebe string )bool {for _ ,_fedc :=range _aea {_gaac :=_fedc .FindStringSubmatch (_ebe );
if len (_gaac )> 1{return true ;};};return false ;};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _ccabb (args ,true )};

// LastColumn returns empty string for the invalid reference context.
func (_agdda *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_gfea :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");
};_fdee :=args [1].ValueNumber !=0;_ggedf :=_geeb (args [2:],[]string {},_fdee );return MakeStringResult (_bd .Join (_ggedf ,_gfea ));};func _eddba (_faad ,_ebfb []float64 ,_eaed float64 )float64 {_deac :=_eaed +1;_fggca :=_faad [0];_geda :=len (_faad );
_efcf :=_ebfb [0];for _fcdbc :=1;_fcdbc < _geda ;_fcdbc ++{_fggca +=_faad [_fcdbc ]/_ea .Pow (_deac ,(_ebfb [_fcdbc ]-_efcf )/365);};return _fggca ;};var _baegb =map[string ]Function {};const _bbcb =57366;type yyLexer interface{Lex (_fgffe *yySymType )int ;
Error (_ecbba string );};

// String returns a string representation of FunctionCall expression.
func (_fceeb FunctionCall )String ()string {_aacc :=_fc .Buffer {};_aacc .WriteString (_fceeb ._ggbg );_aacc .WriteString ("\u0028");_aagc :=len (_fceeb ._bgfdd )-1;for _effe ,_agbd :=range _fceeb ._bgfdd {_aacc .WriteString (_agbd .String ());if _effe !=_aagc {_aacc .WriteString ("\u002c");
};};_aacc .WriteString ("\u0029");return _aacc .String ();};

// Update updates the horizontal range references after removing a row/column.
func (_efbbd HorizontalRange )Update (q *_ag .UpdateQuery )Expression {return _efbbd };

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_acec :=_dfgf (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _acec .Type !=ResultTypeEmpty {return _acec ;};_afd :=_geeeb (args );return MakeNumberResult (float64 (len (_afd )));};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_aega ,_eddef :=_egagb (args ,false );if _eddef ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_aega /_eddef );};var _gdfgcc []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_cdb :=_bd .ToLower (args [0].ValueString );if !_ebc (_cdb ){_ ,_ ,_ ,_cdcac ,_bfb :=_gfcf (_cdb );if _bfb .Type ==ResultTypeError {_bfb .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";
return _bfb ;};if _cdcac {return MakeNumberResult (0);};};_aaba ,_bage ,_fcdc ,_bbbd ,_ ,_dff :=_dcc (_cdb );if _dff .Type ==ResultTypeError {return _dff ;};_cfa :=_acaa (float64 (_aaba ),float64 (_bage ),_fcdc );if _bbbd {_cfa +=0.5;}else if _cfa >=1{_cfa -=float64 (int (_cfa ));
};return MakeNumberResult (_cfa );};const _gacf int =30;

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_gcccgf string };

// BinaryExpr is a binary expression.
type BinaryExpr struct{_bda ,_aa Expression ;_agc BinOpType ;};func _bdg (_dfcg ,_cggaa float64 ,_cggab ,_dbaf int )float64 {_febg :=_aecd (_dfcg );_gaga :=_aecd (_cggaa );_gbea :=_bedb (_febg ,_gaga ,_cggab );return _bgga (_febg ,_gbea ,_dbaf );};

// Reference returns a string reference value to a horizontal range with prefix.
func (_fece PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_aacg :=_fece ._affed .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_fece .horizontalRangeReference (_aacg .Value )};};func _bed (_aab string ,_bec *_ag .UpdateQuery )string {_gaf ,_abd :=_cf .ParseCellReference (_aab );
if _abd !=nil {return "\u0023\u0052\u0045F\u0021";};if _bec .UpdateType ==_ag .UpdateActionRemoveColumn {_cga :=_bec .ColumnIdx ;_gec :=_gaf .ColumnIdx ;if _gec < _cga {return _aab ;}else if _gec ==_cga {return "\u0023\u0052\u0045F\u0021";}else {return _gaf .Update (_ag .UpdateActionRemoveColumn ).String ();
};};return _aab ;};var _fbccgc =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};func _bad (_gcb ,_fea ,_fdd int )float64 {return float64 (_gad (_gcb ,_ba .Month (_fea ),_fdd )/86400)+_fed ;
};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };var _cada =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func _ead (_daf ,_acda float64 ,_cbga int )(float64 ,Result ){_gbfe ,_cbbf :=_aecd (_daf ),_aecd (_acda );_cgeg :=_gbfe .Unix ();_cbde :=_cbbf .Unix ();if _cgeg ==_cbde {return 0,_cff ;};_fadc ,_ebdg ,_ceaf :=_gbfe .Date ();_fgb ,_bef ,_fbgg :=_cbbf .Date ();
_agec ,_dcf :=int (_ebdg ),int (_bef );var _ded ,_aae float64 ;switch _cbga {case 0:if _ceaf ==31{_ceaf --;};if _ceaf ==30&&_fbgg ==31{_fbgg --;}else if _edb :=_bfc (_fadc );_agec ==2&&((_edb &&_ceaf ==29)||(!_edb &&_ceaf ==28)){_ceaf =30;if _cgga :=_bfc (_fgb );
_dcf ==2&&((_cgga &&_fbgg ==29)||(!_cgga &&_fbgg ==28)){_fbgg =30;};};_ded =float64 ((_fgb -_fadc )*360+(_dcf -_agec )*30+(_fbgg -_ceaf ));_aae =360;case 1:_ded =_acda -_daf ;_gfcba :=_fadc !=_fgb ;if _gfcba &&(_fgb !=_fadc +1||_agec < _dcf ||(_agec ==_dcf &&_ceaf < _fbgg )){_bdag :=0;
for _efaf :=_fadc ;_efaf <=_fgb ;_efaf ++{_bdag +=_afc (_efaf ,1);};_aae =float64 (_bdag )/float64 (_fgb -_fadc +1);}else {if !_gfcba &&_bfc (_fadc ){_aae =366;}else {if _gfcba &&((_bfc (_fadc )&&(_agec < 2||(_agec ==2&&_ceaf <=29)))||(_bfc (_fgb )&&(_dcf > 2||(_dcf ==2&&_fbgg ==29)))){_aae =366;
}else {_aae =365;};};};case 2:_ded =_acda -_daf ;_aae =360;case 3:_ded =_acda -_daf ;_aae =365;case 4:if _ceaf ==31{_ceaf --;};if _fbgg ==31{_fbgg --;};_ded =float64 ((_fgb -_fadc )*360+(_dcf -_agec )*30+(_fbgg -_ceaf ));_aae =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");
};return _ded /_aae ,_cff ;};type plex struct{_bbcfg chan *node ;_dbba Expression ;_cffg string ;};const _fdcc =1;var _cbebc =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};
const _dfc ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_gcda :=len (args );if _gcda < 4||_gcda > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_caeb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bcaca :=args [1].ValueNumber ;if _bcaca <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bagc :=args [2].ValueNumber ;if _bagc < _bcaca {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_gebb :=args [3].ValueNumber ;_aeba :=0.0;if _gcda >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_aeba =args [4].ValueNumber ;};_gdcbb :=0;if _gcda ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_gdcbb =int (args [5].ValueNumber );if _gdcbb !=0{_gdcbb =1;};};return MakeNumberResult (_geec (_caeb ,_bagc ,_gebb ,_aeba ,_gdcbb )-_dgfgb (_caeb ,_bcaca ,_bagc ,_gebb ,_aeba ,_gdcbb ));};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_dfga ,_dfeg :=_fcdbe ("\u0046\u0049\u004e\u0044",args );if _dfeg .Type !=ResultTypeEmpty {return _dfeg ;};_fdbb :=_bd .ToLower (_dfga ._cagbb );
_deged :=_bd .ToLower (_dfga ._aaeaa );if _fdbb ==""{return MakeNumberResult (1.0);};_bbdga :=_dfga ._fdgf -1;_ecee :=1;_eggac :=0;for _cgbff :=range _deged {if _cgbff !=0{_ffff :=1;if _cgbff -_eggac > 1{_ffff =2;};_ecee +=_ffff ;};if _ecee > _bbdga {_eeda :=_fb .Index (_fdbb ,_deged [_cgbff :]);
if _eeda ==0{return MakeNumberResult (float64 (_ecee ));};};_eggac =_cgbff ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _cafe (args ,false )};func _ddcc (_adbc Result ,_ffgee ,_cggag string )(float64 ,Result ){switch _adbc .Type {case ResultTypeEmpty :return 0,_cff ;case ResultTypeNumber :return _adbc .ValueNumber ,_cff ;case ResultTypeString :_dgfb ,_aaag :=_bc .ParseFloat (_adbc .ValueString ,64);
if _aaag !=nil {return 0,MakeErrorResult (_cggag +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_ffgee );};return _dgfb ,_cff ;default:return 0,MakeErrorResult (_ffgee +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_cggag +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");
};};func _feb (_gc BinOpType ,_fbe [][]Result ,_cd Result )Result {_fbb :=[][]Result {};for _fge :=range _fbe {_dbd :=_gd (_gc ,_fbe [_fge ],_cd );if _dbd .Type ==ResultTypeError {return _dbd ;};_fbb =append (_fbb ,_dbd .ValueList );};return MakeArrayResult (_fbb );
};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_afggg :v }};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_cdeg ,_ebcc :=_fbfb (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _ebcc .Type ==ResultTypeError {return _ebcc ;};return MakeNumberResult (_bdg (_cdeg ._ebg ,_cdeg ._ffad ,_cdeg ._gadg ,_cdeg ._agcg ));
};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbggc :=true ;for _ ,_debd :=range args {_debd =_debd .AsNumber ();switch _debd .Type {case ResultTypeList ,ResultTypeArray :_dcbff :=And (_debd .ListValues ());if _dcbff .Type ==ResultTypeError {return _dcbff ;};if _dcbff .ValueNumber ==0{_fbggc =false ;
};case ResultTypeNumber :if _debd .ValueNumber ==0{_fbggc =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
case ResultTypeError :return _debd ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");
};};return MakeBoolResult (_fbggc );};func _acab (_fbeg []Result ,_edgb string )(*durationArgs ,Result ){_dbea :=len (_fbeg );if _dbea !=5&&_dbea !=6{return nil ,MakeErrorResult (_edgb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eeae ,_ceeg ,_dffa :=_gece (_fbeg [0],_fbeg [1],_edgb );if _dffa .Type ==ResultTypeError {return nil ,_dffa ;};_ebgd :=_fbeg [2];if _ebgd .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_edgb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_cgab :=_ebgd .ValueNumber ;if _cgab < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_afbf :=_fbeg [3];if _afbf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_edgb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_ecc :=_afbf .ValueNumber ;if _ecc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_cdaf :=_fbeg [4];if _cdaf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_edgb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cacg :=float64 (int (_cdaf .ValueNumber ));if !_ece (_cacg ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ega :=0;if _dbea ==6&&_fbeg [5].Type !=ResultTypeEmpty {_aada :=_fbeg [5];
if _aada .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_edgb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ega =int (_aada .ValueNumber );
if !_agdc (_ega ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_edgb );};};return &durationArgs {_eeae ,_ceeg ,_cgab ,_ecc ,_cacg ,_ega },_cff ;
};const _afeb =57346;

// Function is a standard function whose result only depends on its arguments.
type Function func (_gceg []Result )Result ;func _fgfe (_cafb Result )[]Result {_defc :=_cafb .ValueList ;if _cafb .Type ==ResultTypeArray {_defc =nil ;for _ ,_cbce :=range _cafb .ValueArray {if len (_cbce )> 0{_defc =append (_defc ,_cbce [0]);}else {_defc =append (_defc ,_cff );
};};};return _defc ;};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};const _gdfdf int =30;const _cgaff =57364;

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_gdbgg ,_ceacd :=_bc .ParseFloat (v ,64);if _ceacd !=nil {_ae .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_ceacd );
};return Number {_egagf :_gdbgg };};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);var _faedc _dd .Mutex ;
var _cbbd =map[string ]FunctionComplex {};const _eedg =16;

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_dgdb :=len (args );if _dgdb !=2&&_dgdb !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_dbca ,_agaga :=_gcfc (args [0],args [1],"\u0058\u0049\u0052\u0052");if _agaga .Type ==ResultTypeError {return _agaga ;};_dbagc :=_dbca ._bfdf ;_dagdg :=_dbca ._cegf ;_decg :=0.1;if _dgdb ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_decg =args [2].ValueNumber ;if _decg <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");
};};return _ccaa (_dbagc ,_dagdg ,_decg );};var _gbca ,_eacb ,_fbgbb ,_dccc ,_decc ,_gbccb ,_fdfea ,_bgade ,_cafaf ,_agab ,_efec ,_dcddf ,_ffddf ,_egbd ,_fbged *_bb .Regexp ;var _gdga =map[string ]*_bb .Regexp {};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cagc :=args [0].AsNumber ();if _cagc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_bdca :=float64 (1);if _cagc .ValueNumber < 0{_bdca =-1;};if len (args )> 1{_bece :=args [1].AsNumber ();if _bece .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bdca =_bece .ValueNumber ;};_dgbb :=float64 (1);if len (args )> 2{_gagde :=args [2].AsNumber ();if _gagde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_dgbb =_gagde .ValueNumber ;};if len (args )==1{return MakeNumberResult (_ea .Ceil (_cagc .ValueNumber ));};_ddea :=_cagc .ValueNumber ;_ddea ,_cdce :=_ea .Modf (_ddea /_bdca );if _cdce !=0{if _cagc .ValueNumber > 0{_ddea ++;}else if _dgbb < 0{_ddea --;
};};return MakeNumberResult (_ddea *_bdca );};var _egcd []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};const _bgcdf =2;func _ccabb (_afeg []Result ,_aeeee bool )Result {_acgdf :="\u004d\u0049\u004e";
if _aeeee {_acgdf ="\u004d\u0049\u004e\u0041";};if len (_afeg )==0{return MakeErrorResult (_acgdf +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dddb :=_ea .MaxFloat64 ;for _ ,_aadde :=range _afeg {switch _aadde .Type {case ResultTypeNumber :if (_aeeee ||!_aadde .IsBoolean )&&_aadde .ValueNumber < _dddb {_dddb =_aadde .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_bffbd :=_ccabb (_aadde .ListValues (),_aeeee );
if _bffbd .ValueNumber < _dddb {_dddb =_bffbd .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_adcac :=0.0;if _aeeee {_adcac =_aadde .AsNumber ().ValueNumber ;};if _adcac < _dddb {_dddb =_adcac ;};default:_ae .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_acgdf +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_aadde .Type );
};};if _dddb ==_ea .MaxFloat64 {_dddb =0;};return MakeNumberResult (_dddb );};func _gbaff (_cfec ,_bfbfe ,_bddde Reference )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_cfec .Value ,_bfbfe .Value ,_bddde .Value );};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_bfa ,_fcg :=_bc .ParseBool (v );if _fcg !=nil {_ae .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_fcg );
};return Bool {_ff :_bfa };};

// Reference returns a string reference value to a horizontal range.
func (_bggd HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_bggd .horizontalRangeReference ()};};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_cadd ,_cacb ,_befa :=_gece (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _befa .Type ==ResultTypeError {return _befa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cafc :=_cacb -_cadd ;if _cafc > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_daaa :=args [2].ValueNumber ;if _daaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (100*(1-_daaa *_cafc /360));};var _aea =[]*_bb .Regexp {};const (_ggcbc rmode =iota ;_aedd ;_beage ;);const _affff =57374;

// Eval evaluates the binary expression using the context given.
func (_bg BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_g :=_bg ._bda .Eval (ctx ,ev );if _g .Type ==ResultTypeError {return _g ;};_bgg :=_bg ._aa .Eval (ctx ,ev );if _bgg .Type ==ResultTypeError {return _bgg ;};if _g .Type ==_bgg .Type {if _g .Type ==ResultTypeArray {if !_da (_g .ValueArray ,_bgg .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _aag (_bg ._agc ,_g .ValueArray ,_bgg .ValueArray );}else if _g .Type ==ResultTypeList {if len (_g .ValueList )!=len (_bgg .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _bf (_bg ._agc ,_g .ValueList ,_bgg .ValueList );};}else if _g .Type ==ResultTypeArray &&(_bgg .Type ==ResultTypeNumber ||_bgg .Type ==ResultTypeString ){return _feb (_bg ._agc ,_g .ValueArray ,_bgg );}else if _g .Type ==ResultTypeList &&(_bgg .Type ==ResultTypeNumber ||_bgg .Type ==ResultTypeString ){return _gd (_bg ._agc ,_g .ValueList ,_bgg );
};switch _bg ._agc {case BinOpTypePlus :if _g .Type ==_bgg .Type {if _g .Type ==ResultTypeNumber {return MakeNumberResult (_g .ValueNumber +_bgg .ValueNumber );};};case BinOpTypeMinus :if _g .Type ==_bgg .Type {if _g .Type ==ResultTypeNumber {return MakeNumberResult (_g .ValueNumber -_bgg .ValueNumber );
};};case BinOpTypeMult :if _g .Type ==_bgg .Type {if _g .Type ==ResultTypeNumber {return MakeNumberResult (_g .ValueNumber *_bgg .ValueNumber );};};case BinOpTypeDiv :if _g .Type ==_bgg .Type {if _g .Type ==ResultTypeNumber {if _bgg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");
};return MakeNumberResult (_g .ValueNumber /_bgg .ValueNumber );};};case BinOpTypeExp :if _g .Type ==_bgg .Type {if _g .Type ==ResultTypeNumber {return MakeNumberResult (_ea .Pow (_g .ValueNumber ,_bgg .ValueNumber ));};};case BinOpTypeLT :if _g .Type ==_bgg .Type {if _g .Type ==ResultTypeNumber {return MakeBoolResult (_g .ValueNumber < _bgg .ValueNumber );
};if _g .Type ==ResultTypeString {return MakeBoolResult (_g .ValueString < _bgg .ValueString );};if _g .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _g .Type ==ResultTypeString &&_bgg .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _g .Type ==ResultTypeNumber &&_bgg .Type ==ResultTypeString {return MakeBoolResult (true );}else if _g .Type ==ResultTypeEmpty &&(_bgg .Type ==ResultTypeNumber ||_bgg .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_g .Type ==ResultTypeNumber ||_g .Type ==ResultTypeString )&&_bgg .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};case BinOpTypeGT :if _g .Type ==_bgg .Type {if _g .Type ==ResultTypeNumber {return MakeBoolResult (_g .ValueNumber > _bgg .ValueNumber );};if _g .Type ==ResultTypeString {return MakeBoolResult (_g .ValueString > _bgg .ValueString );};if _g .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if _g .Type ==ResultTypeString &&_bgg .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _g .Type ==ResultTypeNumber &&_bgg .Type ==ResultTypeString {return MakeBoolResult (false );}else if _g .Type ==ResultTypeEmpty &&(_bgg .Type ==ResultTypeNumber ||_bgg .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if (_g .Type ==ResultTypeNumber ||_g .Type ==ResultTypeString )&&_bgg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _g .Type ==_bgg .Type {if _g .Type ==ResultTypeNumber {return MakeBoolResult (_g .ValueNumber ==_bgg .ValueNumber );
};if _g .Type ==ResultTypeString {return MakeBoolResult (_g .ValueString ==_bgg .ValueString );};if _g .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_g .Type ==ResultTypeString &&_bgg .Type ==ResultTypeNumber )||(_g .Type ==ResultTypeNumber &&_bgg .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if _g .Type ==ResultTypeEmpty &&(_bgg .Type ==ResultTypeNumber ||_bgg .Type ==ResultTypeString ){return MakeBoolResult (_ca (_bgg ));}else if (_g .Type ==ResultTypeNumber ||_g .Type ==ResultTypeString )&&_bgg .Type ==ResultTypeEmpty {return MakeBoolResult (_ca (_g ));
};case BinOpTypeNE :if _g .Type ==_bgg .Type {if _g .Type ==ResultTypeNumber {return MakeBoolResult (_g .ValueNumber !=_bgg .ValueNumber );};if _g .Type ==ResultTypeString {return MakeBoolResult (_g .ValueString !=_bgg .ValueString );};if _g .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if (_g .Type ==ResultTypeString &&_bgg .Type ==ResultTypeNumber )||(_g .Type ==ResultTypeNumber &&_bgg .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _g .Type ==ResultTypeEmpty &&(_bgg .Type ==ResultTypeNumber ||_bgg .Type ==ResultTypeString ){return MakeBoolResult (!_ca (_bgg ));
}else if (_g .Type ==ResultTypeNumber ||_g .Type ==ResultTypeString )&&_bgg .Type ==ResultTypeEmpty {return MakeBoolResult (!_ca (_g ));};case BinOpTypeLEQ :if _g .Type ==_bgg .Type {if _g .Type ==ResultTypeNumber {return MakeBoolResult (_g .ValueNumber <=_bgg .ValueNumber );
};if _g .Type ==ResultTypeString {return MakeBoolResult (_g .ValueString <=_bgg .ValueString );};if _g .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _g .Type ==ResultTypeString &&_bgg .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _g .Type ==ResultTypeNumber &&_bgg .Type ==ResultTypeString {return MakeBoolResult (true );}else if _g .Type ==ResultTypeEmpty &&(_bgg .Type ==ResultTypeNumber ||_bgg .Type ==ResultTypeString ){return MakeBoolResult (_ca (_bgg ));}else if (_g .Type ==ResultTypeNumber ||_g .Type ==ResultTypeString )&&_bgg .Type ==ResultTypeEmpty {return MakeBoolResult (_ca (_g ));
};case BinOpTypeGEQ :if _g .Type ==_bgg .Type {if _g .Type ==ResultTypeNumber {return MakeBoolResult (_g .ValueNumber >=_bgg .ValueNumber );};if _g .Type ==ResultTypeString {return MakeBoolResult (_g .ValueString >=_bgg .ValueString );};if _g .Type ==ResultTypeEmpty {return MakeBoolResult (true );
};}else if _g .Type ==ResultTypeString &&_bgg .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _g .Type ==ResultTypeNumber &&_bgg .Type ==ResultTypeString {return MakeBoolResult (false );}else if _g .Type ==ResultTypeEmpty &&(_bgg .Type ==ResultTypeNumber ||_bgg .Type ==ResultTypeString ){return MakeBoolResult (_ca (_bgg ));
}else if (_g .Type ==ResultTypeNumber ||_g .Type ==ResultTypeString )&&_bgg .Type ==ResultTypeEmpty {return MakeBoolResult (_ca (_g ));};case BinOpTypeConcat :return MakeStringResult (_g .Value ()+_bgg .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");
};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_gbf :=&defEval {};_gbf .evCache =_eeb ();return _gbf };

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bcaa :=args [0].AsNumber ();
_acgb :=args [1].AsNumber ();if _bcaa .Type !=ResultTypeNumber ||_acgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};if _acgb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_gfdb ,_adcg :=_ea .Modf (_bcaa .ValueNumber /_acgb .ValueNumber );if _adcg < 0{_gfdb --;
};return MakeNumberResult (_bcaa .ValueNumber -_acgb .ValueNumber *_gfdb );};func (_cccc *noCache )GetFromCache (key string )(Result ,bool ){return _cff ,false };const (_gbaf cmpResult =0;_bbdea cmpResult =-1;_afcee cmpResult =1;_ecfa cmpResult =2;);func _bedb (_agf ,_acae _ba .Time ,_cgead int )_ba .Time {_ffg :=_ba .Date (_agf .Year (),_acae .Month (),_acae .Day (),0,0,0,0,_ba .UTC );
if _ffg .After (_agf ){_ffg =_ffg .AddDate (-1,0,0);};for !_ffg .After (_agf ){_ffg =_ffg .AddDate (0,12/_cgead ,0);};return _ffg ;};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_afcea :=args [0];_fcb :=args [1];if _fcb .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_agee :=args [2].AsNumber ();if _agee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bafg :=false ;if len (args )==4{_gbeg :=args [3].AsNumber ();if _gbeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _gbeg .ValueNumber ==0{_bafg =true ;};};_cafa :=-1;_beg :=false ;if len (_fcb .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");
};_afae :=_fcb .ValueArray [0];_bgab :for _gcgeea ,_eadd :=range _afae {switch _ggdc (_eadd ,_afcea ,false ,_bafg ){case _bbdea :_cafa =_gcgeea ;case _gbaf :_cafa =_gcgeea ;_beg =true ;break _bgab ;};};if _cafa ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_fbbb :=int (_agee .ValueNumber )-1;if _fbbb < 0||_fbbb > len (_fcb .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_afae =_fcb .ValueArray [_fbbb ];
if _cafa < 0||_cafa >=len (_afae ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _beg ||!_bafg {return _afae [_cafa ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};func _fbfc (_ecfbg string )string {_ecfbg =_bd .Replace (_ecfbg ,"\u000a","\u005c\u006e",-1);_ecfbg =_bd .Replace (_ecfbg ,"\u000d","\u005c\u0072",-1);_ecfbg =_bd .Replace (_ecfbg ,"\u0009","\u005c\u0074",-1);
return _ecfbg ;};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_baaeg NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_aacce :=ctx .NamedRange (_baaeg ._afggg );_bfbc :=_aacce .Value ;if _geacd ,_defcf :=ev .GetFromCache (_bfbc );_defcf {return _geacd ;};_ddgde :=_bd .Split (_bfbc ,"\u0021");if len (_ddgde )!=2{return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_bfbc ));
};_bggbc :=ctx .Sheet (_ddgde [0]);_agdb :=_bd .Split (_ddgde [1],"\u003a");switch len (_agdb ){case 1:_deaaa :=ev .Eval (_bggbc ,_agdb [0]);ev .SetCache (_bfbc ,_deaaa );return _deaaa ;case 2:_eeceg :=_adge (_bggbc ,ev ,_agdb [0],_agdb [1]);ev .SetCache (_bfbc ,_eeceg );
return _eeceg ;};return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_aacce .Type ));};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_aead PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_efaa :=_aead ._ccfd .Reference (ctx ,ev );switch _efaa .Type {case ReferenceTypeSheet :if _geeca (_efaa ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_efaa .Value ));
};_fgcbf :=_aead .verticalRangeReference (_efaa .Value );if _bdeb ,_cbcc :=ev .GetFromCache (_fgcbf );_cbcc {return _bdeb ;};_ddbcbb :=ctx .Sheet (_efaa .Value );_bafb ,_bbdge :=_afeba (_ddbcbb ,_aead ._fcbbf ,_aead ._gdbf );_fafbg :=_adge (_ddbcbb ,ev ,_bafb ,_bbdge );
ev .SetCache (_fgcbf ,_fafbg );return _fafbg ;default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_efaa .Type ));
};};

// Update updates references in the Negate after removing a row/column.
func (_fded Negate )Update (q *_ag .UpdateQuery )Expression {return Negate {_ffabb :_fded ._ffabb .Update (q )};};type ivr struct{};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");
};_eeca ,_dgcdc ,_cdbec :=_dfce (args );if _cdbec .Type ==ResultTypeError {return _cdbec ;};return MakeNumberResult (_fcaf (_eeca )/_dgcdc );};const _dad ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeString );};type rmode byte ;

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_fgba ,_deeb int };func _baebd (_facac _ba .Time )_ba .Time {_facac =_facac .UTC ();return _ba .Date (_facac .Year (),_facac .Month (),_facac .Day (),_facac .Hour (),_facac .Minute (),_facac .Second (),_facac .Nanosecond (),_ba .Local );
};const _ggbf ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";
var _bcgd =[...]string {};

// IsDBCS returns false for the invalid reference context.
func (_bgaac *ivr )IsDBCS ()bool {return false };var _gdfd =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func _fdce (_abc ,_dadba ,_edf ,_efce ,_cdad float64 ,_ecbe int )Result {_ggac ,_dbafd :=_ead (_abc ,_dadba ,_ecbe );if _dbafd .Type ==ResultTypeError {return _dbafd ;};_ffcd ,_cdgaf :=_gfbe (_abc ,_dadba ,int (_cdad ),_ecbe );if _cdgaf .Type ==ResultTypeError {return _cdgaf ;
};_dbge :=0.0;_fcaa :=0.0;_edf *=100/_cdad ;_efce /=_cdad ;_efce ++;_gbgb :=_ggac *_cdad -_ffcd ;for _eaac :=1.0;_eaac < _ffcd ;_eaac ++{_aed :=_eaac +_gbgb ;_adfc :=_edf /_ea .Pow (_efce ,_aed );_fcaa +=_adfc ;_dbge +=_aed *_adfc ;};_aagf :=(_edf +100)/_ea .Pow (_efce ,_ffcd +_gbgb );
_fcaa +=_aagf ;_dbge +=(_ffcd +_gbgb )*_aagf ;_dbge /=_fcaa ;_dbge /=_cdad ;return MakeNumberResult (_dbge );};func _bgga (_feff ,_fbce _ba .Time ,_cag int )float64 {if _feff .After (_fbce ){_feff ,_fbce =_fbce ,_feff ;};_cgea :=0;_eea ,_dcbc ,_edg :=_feff .Date ();
_agd ,_acf ,_agce :=_fbce .Date ();_bfae ,_adfa :=int (_dcbc ),int (_acf );_aafca ,_gbgf :=_fac (_eea ,_bfae ,_edg ,_cag ),_fac (_agd ,_adfa ,_agce ,_cag );if !_cfb (_cag ){return _bad (_agd ,_adfa ,_gbgf )-_bad (_eea ,_bfae ,_aafca );};if _cag ==0{if (_bfae ==2||_aafca < 30)&&_agce ==31{_gbgf =31;
}else if _adfa ==2&&_gbgf ==_gagd (_agd ,_adfa ){_gbgf =_gagd (_agd ,2);};}else {if _bfae ==2&&_aafca ==30{_aafca =_gagd (_eea ,2);};if _adfa ==2&&_gbgf ==30{_gbgf =_gagd (_agd ,2);};};if _eea < _agd ||(_eea ==_agd &&_bfae < _adfa ){_cgea =30-_aafca +1;
_edg =1;_aafca =1;_eef :=_ba .Date (_eea ,_ba .Month (_bfae ),_edg ,0,0,0,0,_ba .UTC ).AddDate (0,1,0);if _eef .Year ()< _agd {_cgea +=_gdca (_eef .Year (),int (_eef .Month ()),12,_cag );_eef =_eef .AddDate (0,13-int (_eef .Month ()),0);_cgea +=_bgcc (_eef .Year (),_agd -1,_cag );
};_cgea +=_gdca (_agd ,int (_eef .Month ()),_adfa -1,_cag );_eef =_eef .AddDate (0,_adfa -int (_eef .Month ()),0);_bfae =_eef .Day ();};_cgea +=_gbgf -_aafca ;if _cgea > 0{return float64 (_cgea );}else {return 0;};};

// String returns a string representation of a named range.
func (_dacdd NamedRangeRef )String ()string {return _dacdd ._afggg };var InvalidReferenceContext =&ivr {};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_afef :=len (args );if _afef < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _afef > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bdcb :=args [0];_eefe :=args [1];if _eefe .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_dbgdd :=args [2].AsNumber ();if _dbgdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bggb :=false ;if _afef ==4&&args [3].Type !=ResultTypeEmpty {_bcbd :=args [3].AsNumber ();if _bcbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _bcbd .ValueNumber ==0{_bggb =true ;};};_baeg :=int (_dbgdd .ValueNumber )-1;_aedg :=-1;_fcgg :=false ;_bacd :for _abaa ,_abgg :=range _eefe .ValueArray {if len (_abgg )==0{continue ;};_bade :=_abgg [0];switch _ggdc (_bade ,_bdcb ,false ,_bggb ){case _bbdea :_aedg =_abaa ;
case _gbaf :_aedg =_abaa ;_fcgg =true ;break _bacd ;};};if _aedg ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_effff :=_eefe .ValueArray [_aedg ];
if _baeg < 0||_baeg >=len (_effff ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _fcgg ||!_bggb {return _effff [_baeg ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_ebddd :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebddd =int (args [1].ValueNumber );if _ebddd < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");
};if _ebddd ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_gcgg :=args [0].Value ();
_fegd :=len (_gcgg );if _ebddd > _fegd {return MakeStringResult (_gcgg );};return MakeStringResult (_gcgg [_fegd -_ebddd :_fegd ]);};var _aedgd =[...]uint8 {0,20,37,60,78,96};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_eaaa :=args [0];if _eaaa .Type ==ResultTypeError {return _eaaa ;
};if _eaaa .Type !=ResultTypeString &&_eaaa .Type !=ResultTypeNumber &&_eaaa .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_ageb :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_agegb :=int (args [1].ValueNumber );if _agegb < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_ddbcb :=int (args [2].ValueNumber );if _ddbcb < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_bffab :=len (_ageb );if _agegb > _bffab {return MakeStringResult ("");};_agegb --;_gbacda :=_agegb +_ddbcb ;if _gbacda > _bffab {return MakeStringResult (_ageb [_agegb :]);}else {return MakeStringResult (_ageb [_agegb :_gbacda ]);};};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// String returns a string representation of SheetPrefixExpr.
func (_ggad SheetPrefixExpr )String ()string {return _ggad ._gcccgf };func _abae (_adeb string )*criteriaRegex {_cfdbd :=&criteriaRegex {};if _adeb ==""{return _cfdbd ;};if _adcab :=_bggg .FindStringSubmatch (_adeb );len (_adcab )> 1{_cfdbd ._abgb =_ccda ;
_cfdbd ._aadad =_adcab [1];}else if _dfbeb :=_fadd .FindStringSubmatch (_adeb );len (_dfbeb )> 1{_cfdbd ._abgb =_ccda ;_cfdbd ._aadad =_dfbeb [1];}else if _beca :=_cdaaa .FindStringSubmatch (_adeb );len (_beca )> 1{_cfdbd ._abgb =_bbff ;_cfdbd ._aadad =_beca [1];
}else if _dabbb :=_bcecf .FindStringSubmatch (_adeb );len (_dabbb )> 1{_cfdbd ._abgb =_ebed ;_cfdbd ._aadad =_dabbb [1];}else if _aeed :=_efdg .FindStringSubmatch (_adeb );len (_aeed )> 1{_cfdbd ._abgb =_adga ;_cfdbd ._aadad =_aeed [1];}else if _gcfgd :=_adca .FindStringSubmatch (_adeb );
len (_gcfgd )> 1{_cfdbd ._abgb =_egggg ;_cfdbd ._aadad =_gcfgd [1];};return _cfdbd ;};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_feae :=args [0].AsNumber ();if _feae .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};if _feae .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};return MakeNumberResult (_fcaf (_feae .ValueNumber ));};func (_bbcg PrefixVerticalRange )verticalRangeReference (_begf string )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_begf ,_bbcg ._fcbbf ,_bbcg ._gdbf );};func _dgb (_ddgd ,_ebde _ba .Time )bool {_geef :=_ddgd .Unix ();
_cfd :=_ebde .Unix ();_caf :=_ddgd .Year ();_dfe :=_gad (_caf ,_ba .March ,1);if _bfc (_caf )&&_geef < _dfe &&_cfd >=_dfe {return true ;};var _dagc =_ebde .Year ();var _agba =_gad (_dagc ,_ba .March ,1);return (_bfc (_dagc )&&_cfd >=_agba &&_geef < _agba );
};var _cacae =false ;type evCache struct{_acg map[string ]Result ;_gca *_dd .Mutex ;};func (_bbad *yyParserImpl )Parse (yylex yyLexer )int {_eaba :=_ba .Now ();var _eedfe int ;var _ebcgc yySymType ;var _cfbeb []yySymType ;_ =_cfbeb ;_ddcg :=_bbad ._bgdd [:];
Nerrs :=0;Errflag :=0;_deef :=0;_bbad ._dfbf =-1;_debgc :=-1;defer func (){_deef =-1;_bbad ._dfbf =-1;_debgc =-1}();_debb :=-1;goto _fbcbe ;_afgge :return 0;_bcff :return 1;_fbcbe :if _gbbb (_eaba ){_ae .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");
goto _bcff ;};if _eded >=4{_a .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_bbab (_debgc ),_bcdcc (_deef ));};_debb ++;if _debb >=len (_ddcg ){_cfcdg :=make ([]yySymType ,len (_ddcg )*2);copy (_cfcdg ,_ddcg );
_ddcg =_cfcdg ;};_ddcg [_debb ]=_ebcgc ;_ddcg [_debb ]._dfed =_deef ;_cacgd :if _gbbb (_eaba ){_ae .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _bcff ;};_eedfe =_cbebc [_deef ];if _eedfe <=_gbedf {goto _dedac ;
};if _bbad ._dfbf < 0{_bbad ._dfbf ,_debgc =_gggg (yylex ,&_bbad ._afbff );};_eedfe +=_debgc ;if _eedfe < 0||_eedfe >=_badce {goto _dedac ;};_eedfe =_eedfd [_eedfe ];if _cgff [_eedfe ]==_debgc {_bbad ._dfbf =-1;_debgc =-1;_ebcgc =_bbad ._afbff ;_deef =_eedfe ;
if Errflag > 0{Errflag --;};goto _fbcbe ;};_dedac :if _gbbb (_eaba ){_ae .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _bcff ;};_eedfe =_agde [_deef ];if _eedfe ==-2{if _bbad ._dfbf < 0{_bbad ._dfbf ,_debgc =_gggg (yylex ,&_bbad ._afbff );
};_ccag :=0;for {if _fggd [_ccag +0]==-1&&_fggd [_ccag +1]==_deef {break ;};_ccag +=2;};for _ccag +=2;;_ccag +=2{_eedfe =_fggd [_ccag +0];if _eedfe < 0||_eedfe ==_debgc {break ;};};_eedfe =_fggd [_ccag +1];if _eedfe < 0{goto _afgge ;};};if _eedfe ==0{switch Errflag {case 0:yylex .Error (_geag (_deef ,_debgc ));
Nerrs ++;if _eded >=1{_a .Printf ("\u0025\u0073",_bcdcc (_deef ));_a .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_bbab (_debgc ));};fallthrough;case 1,2:Errflag =3;for _debb >=0{_eedfe =_cbebc [_ddcg [_debb ]._dfed ]+_bgcdf ;if _eedfe >=0&&_eedfe < _badce {_deef =_eedfd [_eedfe ];
if _cgff [_deef ]==_bgcdf {goto _fbcbe ;};};if _eded >=2{_a .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_ddcg [_debb ]._dfed );
};_debb --;};goto _bcff ;case 3:if _eded >=2{_a .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_bbab (_debgc ));};if _debgc ==_fdcc {goto _bcff ;};_bbad ._dfbf =-1;
_debgc =-1;goto _cacgd ;};};if _eded >=2{_a .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_eedfe ,_bcdcc (_deef ));};_fbbbf :=_eedfe ;_aedag :=_debb ;_ =_aedag ;_debb -=_fbccgc [_eedfe ];if _debb +1>=len (_ddcg ){_dcebc :=make ([]yySymType ,len (_ddcg )*2);
copy (_dcebc ,_ddcg );_ddcg =_dcebc ;};_ebcgc =_ddcg [_debb +1];_eedfe =_cdbf [_eedfe ];_abcbg :=_cgbb [_eedfe ];_ggbgc :=_abcbg +_ddcg [_debb ]._dfed +1;if _ggbgc >=_badce {_deef =_eedfd [_abcbg ];}else {_deef =_eedfd [_ggbgc ];if _cgff [_deef ]!=-_eedfe {_deef =_eedfd [_abcbg ];
};};switch _fbbbf {case 1:_cfbeb =_ddcg [_aedag -1:_aedag +1];{yylex .(*plex )._dbba =_ebcgc ._ccaca ;};case 3:_cfbeb =_ddcg [_aedag -2:_aedag +1];{_ebcgc ._ccaca =_cfbeb [2]._ccaca ;};case 4:_cfbeb =_ddcg [_aedag -4:_aedag +1];{};case 5:_cfbeb =_ddcg [_aedag -1:_aedag +1];
{_ebcgc ._ccaca =NewBool (_cfbeb [1]._aggcf ._dacf );};case 6:_cfbeb =_ddcg [_aedag -1:_aedag +1];{_ebcgc ._ccaca =NewNumber (_cfbeb [1]._aggcf ._dacf );};case 7:_cfbeb =_ddcg [_aedag -1:_aedag +1];{_ebcgc ._ccaca =NewString (_cfbeb [1]._aggcf ._dacf );
};case 8:_cfbeb =_ddcg [_aedag -1:_aedag +1];{_ebcgc ._ccaca =NewError (_cfbeb [1]._aggcf ._dacf );};case 9:_cfbeb =_ddcg [_aedag -2:_aedag +1];{_ebcgc ._ccaca =_cfbeb [2]._ccaca ;};case 10:_cfbeb =_ddcg [_aedag -2:_aedag +1];{_ebcgc ._ccaca =NewNegate (_cfbeb [2]._ccaca );
};case 15:_cfbeb =_ddcg [_aedag -3:_aedag +1];{_ebcgc ._ccaca =_cfbeb [2]._ccaca ;};case 17:_cfbeb =_ddcg [_aedag -3:_aedag +1];{_ebcgc ._ccaca =NewConstArrayExpr (_cfbeb [2]._febcd );};case 18:_cfbeb =_ddcg [_aedag -1:_aedag +1];{_ebcgc ._febcd =append (_ebcgc ._febcd ,_cfbeb [1]._gcgde );
};case 19:_cfbeb =_ddcg [_aedag -3:_aedag +1];{_ebcgc ._febcd =append (_cfbeb [1]._febcd ,_cfbeb [3]._gcgde );};case 20:_cfbeb =_ddcg [_aedag -1:_aedag +1];{_ebcgc ._gcgde =append (_ebcgc ._gcgde ,_cfbeb [1]._ccaca );};case 21:_cfbeb =_ddcg [_aedag -3:_aedag +1];
{_ebcgc ._gcgde =append (_cfbeb [1]._gcgde ,_cfbeb [3]._ccaca );};case 23:_cfbeb =_ddcg [_aedag -2:_aedag +1];{_ebcgc ._ccaca =NewPrefixExpr (_cfbeb [1]._ccaca ,_cfbeb [2]._ccaca );};case 25:_cfbeb =_ddcg [_aedag -1:_aedag +1];{_ebcgc ._ccaca =NewSheetPrefixExpr (_cfbeb [1]._aggcf ._dacf );
};case 26:_cfbeb =_ddcg [_aedag -1:_aedag +1];{_ebcgc ._ccaca =NewCellRef (_cfbeb [1]._aggcf ._dacf );};case 27:_cfbeb =_ddcg [_aedag -3:_aedag +1];{_ebcgc ._ccaca =NewRange (_cfbeb [1]._ccaca ,_cfbeb [3]._ccaca );};case 28:_cfbeb =_ddcg [_aedag -4:_aedag +1];
{_ebcgc ._ccaca =NewPrefixRangeExpr (_cfbeb [1]._ccaca ,_cfbeb [2]._ccaca ,_cfbeb [4]._ccaca );};case 29:_cfbeb =_ddcg [_aedag -1:_aedag +1];{_ebcgc ._ccaca =NewNamedRangeRef (_cfbeb [1]._aggcf ._dacf );};case 30:_cfbeb =_ddcg [_aedag -1:_aedag +1];{_ebcgc ._ccaca =NewHorizontalRange (_cfbeb [1]._aggcf ._dacf );
};case 31:_cfbeb =_ddcg [_aedag -1:_aedag +1];{_ebcgc ._ccaca =NewVerticalRange (_cfbeb [1]._aggcf ._dacf );};case 32:_cfbeb =_ddcg [_aedag -2:_aedag +1];{_ebcgc ._ccaca =NewPrefixHorizontalRange (_cfbeb [1]._ccaca ,_cfbeb [2]._aggcf ._dacf );};case 33:_cfbeb =_ddcg [_aedag -2:_aedag +1];
{_ebcgc ._ccaca =NewPrefixVerticalRange (_cfbeb [1]._ccaca ,_cfbeb [2]._aggcf ._dacf );};case 34:_cfbeb =_ddcg [_aedag -3:_aedag +1];{_ebcgc ._ccaca =NewBinaryExpr (_cfbeb [1]._ccaca ,BinOpTypePlus ,_cfbeb [3]._ccaca );};case 35:_cfbeb =_ddcg [_aedag -3:_aedag +1];
{_ebcgc ._ccaca =NewBinaryExpr (_cfbeb [1]._ccaca ,BinOpTypeMinus ,_cfbeb [3]._ccaca );};case 36:_cfbeb =_ddcg [_aedag -3:_aedag +1];{_ebcgc ._ccaca =NewBinaryExpr (_cfbeb [1]._ccaca ,BinOpTypeMult ,_cfbeb [3]._ccaca );};case 37:_cfbeb =_ddcg [_aedag -3:_aedag +1];
{_ebcgc ._ccaca =NewBinaryExpr (_cfbeb [1]._ccaca ,BinOpTypeDiv ,_cfbeb [3]._ccaca );};case 38:_cfbeb =_ddcg [_aedag -3:_aedag +1];{_ebcgc ._ccaca =NewBinaryExpr (_cfbeb [1]._ccaca ,BinOpTypeExp ,_cfbeb [3]._ccaca );};case 39:_cfbeb =_ddcg [_aedag -3:_aedag +1];
{_ebcgc ._ccaca =NewBinaryExpr (_cfbeb [1]._ccaca ,BinOpTypeLT ,_cfbeb [3]._ccaca );};case 40:_cfbeb =_ddcg [_aedag -3:_aedag +1];{_ebcgc ._ccaca =NewBinaryExpr (_cfbeb [1]._ccaca ,BinOpTypeGT ,_cfbeb [3]._ccaca );};case 41:_cfbeb =_ddcg [_aedag -3:_aedag +1];
{_ebcgc ._ccaca =NewBinaryExpr (_cfbeb [1]._ccaca ,BinOpTypeLEQ ,_cfbeb [3]._ccaca );};case 42:_cfbeb =_ddcg [_aedag -3:_aedag +1];{_ebcgc ._ccaca =NewBinaryExpr (_cfbeb [1]._ccaca ,BinOpTypeGEQ ,_cfbeb [3]._ccaca );};case 43:_cfbeb =_ddcg [_aedag -3:_aedag +1];
{_ebcgc ._ccaca =NewBinaryExpr (_cfbeb [1]._ccaca ,BinOpTypeEQ ,_cfbeb [3]._ccaca );};case 44:_cfbeb =_ddcg [_aedag -3:_aedag +1];{_ebcgc ._ccaca =NewBinaryExpr (_cfbeb [1]._ccaca ,BinOpTypeNE ,_cfbeb [3]._ccaca );};case 45:_cfbeb =_ddcg [_aedag -3:_aedag +1];
{_ebcgc ._ccaca =NewBinaryExpr (_cfbeb [1]._ccaca ,BinOpTypeConcat ,_cfbeb [3]._ccaca );};case 47:_cfbeb =_ddcg [_aedag -2:_aedag +1];{_ebcgc ._ccaca =NewFunction (_cfbeb [1]._aggcf ._dacf ,nil );};case 48:_cfbeb =_ddcg [_aedag -3:_aedag +1];{_ebcgc ._ccaca =NewFunction (_cfbeb [1]._aggcf ._dacf ,_cfbeb [2]._gcgde );
};case 49:_cfbeb =_ddcg [_aedag -1:_aedag +1];{_ebcgc ._gcgde =append (_ebcgc ._gcgde ,_cfbeb [1]._ccaca );};case 50:_cfbeb =_ddcg [_aedag -3:_aedag +1];{_ebcgc ._gcgde =append (_cfbeb [1]._gcgde ,_cfbeb [3]._ccaca );};case 53:_cfbeb =_ddcg [_aedag -0:_aedag +1];
{_ebcgc ._ccaca =NewEmptyExpr ();};};goto _fbcbe ;};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_dfcfb :=args [0].ValueNumber ;if _dfcfb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};_adgg :=float64 (int (args [1].ValueNumber ));if _adgg < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult ((_ea .Pow (_dfcfb +1,1/_adgg )-1)*_adgg );};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_cdccc :=ctx .GetEpoch ();_bbf ,_fcgfg :=_bdcf (args [0].Value (),_cdccc );if _fcgfg !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_fffce :=_bbf .Year ();return MakeBoolResult (_bfc (_fffce ));};func _gbbb (_cdcea _ba .Time )bool {return _ba .Now ().Sub (_cdcea )>=_gaeb };func _aeac (_fabe int )int {if _fabe < 1900{if _fabe < 30{_fabe +=2000;}else {_fabe +=1900;};};return _fabe ;
};func (_adgaf ReferenceType )String ()string {if _adgaf >=ReferenceType (len (_aedgd )-1){return _a .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_adgaf );};return _ggbf [_aedgd [_adgaf ]:_aedgd [_adgaf +1]];
};type tokenType int ;func _dgfgb (_ffd ,_cfdb ,_abca ,_ebdgc ,_ddgdd float64 ,_eegg int )float64 {_gafc :=_geec (_ffd ,_abca ,_ebdgc ,_ddgdd ,_eegg );var _fcgf float64 ;if _cfdb ==1{if _eegg ==1{_fcgf =0;}else {_fcgf =-_ebdgc ;};}else {if _eegg ==1{_fcgf =_bgaa (_ffd ,_cfdb -2,_gafc ,_ebdgc ,1)-_gafc ;
}else {_fcgf =_bgaa (_ffd ,_cfdb -1,_gafc ,_ebdgc ,0);};};return _fcgf *_ffd ;};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_bccc :=len (args );if _bccc !=4&&_bccc !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_cbc ,_dfdee ,_gbfc :=_gece (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _gbfc .Type ==ResultTypeError {return _gbfc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_ccee :=args [2].ValueNumber ;if _ccee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_babf :=args [3].ValueNumber ;if _babf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};_gafe :=0;if _bccc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_gafe =int (args [4].ValueNumber );if !_agdc (_gafe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");
};};_febgf ,_gbfc :=_ead (_cbc ,_dfdee ,_gafe );if _gbfc .Type ==ResultTypeError {return _gbfc ;};return MakeNumberResult ((_babf -_ccee )/_ccee /_febgf );};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");
};func _afea (_bgfe Result )Result {if _bgfe .Type ==ResultTypeEmpty {return _bgfe ;};_fdgfb :=_bgfe .AsString ();if _fdgfb .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _bgfe .IsBoolean {if _fdgfb .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _fdgfb .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};}else {return MakeStringResult (_bd .ToLower (_fdgfb .ValueString ));};};const _beeg =57351;

// String returns a string of a range.
func (_efaae Range )String ()string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_efaae ._gcddf .String (),_efaae ._ebad .String ());};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_bcdc ,_dfbe :=_cdeb (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _dfbe .Type ==ResultTypeError {return _dfbe ;};_dbfc :=_bcdc ._gbbe ;_beaa :=_bcdc ._egeea ;_gba :=_bcdc ._abge ;_eeg :=_bcdc ._dffd ;
_bbbg :=_bcdc ._adff ;_ceac :=_bcdc ._defb ;_gcad :=_bcdc ._dgae ;_affb ,_bfda :=_ead (_beaa ,_gba ,_gcad );if _bfda .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");
};_fggc :=_affb *_ceac *_dbfc ;if _bbbg ==0{return MakeNumberResult (_fggc );};_caab :=_dbfc *_ceac ;_fddg :=_dbfc -_eeg ;_cecb :=int ((_fddg -_fggc )/_caab );if _bbbg <=_cecb {return MakeNumberResult (_caab );}else if _bbbg ==_cecb +1{return MakeNumberResult (_fddg -_caab *float64 (_cecb )-_fggc );
}else {return MakeNumberResult (0);};};const _aeg ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bffg :=args [0].AsString ();if _bffg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_aecdc :=_fc .Buffer {};for _ ,_eebbf :=range _bffg .ValueString {if _f .IsPrint (_eebbf ){_aecdc .WriteRune (_eebbf );};};return MakeStringResult (_aecdc .String ());};func (_adac PrefixHorizontalRange )horizontalRangeReference (_fgeg string )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_fgeg ,_adac ._ebag ,_adac ._gecgf );
};

// String returns a string representation of PrefixExpr.
func (_dbaad PrefixExpr )String ()string {return _a .Sprintf ("\u0025\u0073\u0021%\u0073",_dbaad ._gfceg .String (),_dbaad ._edab .String ());};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_cbbe .Float64 ());
};var _ecb =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};
func _ffce (_ggea string )bool {for _ ,_dag :=range _gaag {_feac :=_dag .FindStringSubmatch (_ggea );if len (_feac )> 1{return true ;};};return false ;};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_cdcb (args ,_gbgbf ));};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cfcda :=args [0].Ref ;if _cfcda .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");
};_cbaac ,_fbee :=_cf .ParseCellReference (_cfcda .Value );if _fbee !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cfcda .Value );};return MakeNumberResult (float64 (_cbaac .RowIdx ));
};func _gfgb (_bfed []Result ,_gfbg string )(float64 ,float64 ,Result ){if len (_bfed )!=2{return 0,0,MakeErrorResult (_gfbg +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _bfed [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_gfbg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_caga :=_bfed [0].ValueNumber ;if _bfed [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_gfbg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bgca :=float64 (int (_bfed [1].ValueNumber ));if _bgca < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_gfbg +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");
};return _caga ,_bgca ,_cff ;};func _adge (_gabbg Context ,_ffgeg Evaluator ,_cfbeg ,_gbga string )Result {_adea ,_aegeb :=_cf .ParseCellReference (_cfbeg );if _aegeb !=nil {return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_cfbeg ,_aegeb .Error ()));
};_fdadc ,_dadbae :=_adea .ColumnIdx ,_adea .RowIdx ;_fafc ,_fdea :=_cf .ParseCellReference (_gbga );if _fdea !=nil {return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gbga ,_fdea .Error ()));
};_dadf ,_acfd :=_fafc .ColumnIdx ,_fafc .RowIdx ;_gfbcc :=[][]Result {};for _ebgda :=_dadbae ;_ebgda <=_acfd ;_ebgda ++{_affda :=[]Result {};for _dgeaf :=_fdadc ;_dgeaf <=_dadf ;_dgeaf ++{_fgbb :=_gabbg .Cell (_a .Sprintf ("\u0025\u0073\u0025\u0064",_cf .IndexToColumn (_dgeaf ),_ebgda ),_ffgeg );
_affda =append (_affda ,_fgbb );};_gfbcc =append (_gfbcc ,_affda );};if len (_gfbcc )==1{if len (_gfbcc [0])==1{return _gfbcc [0][0];};return MakeListResult (_gfbcc [0]);};return MakeArrayResult (_gfbcc );};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ecgf :=args [0].Ref ;for _ecgf .Type ==ReferenceTypeNamedRange {_ecgf =ctx .NamedRange (_ecgf .Value );};_gaaf :="";switch _ecgf .Type {case ReferenceTypeCell :_gaaf =_ecgf .Value ;case ReferenceTypeRange :_eedee :=_bd .Split (_ecgf .Value ,"\u003a");
if len (_eedee )==2{_gaaf =_eedee [0];};default:return MakeErrorResult (_a .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_ecgf .Type ));
};_aecfb ,_ccba :=_cf .ParseCellReference (_gaaf );if _ccba !=nil {return MakeErrorResult (_a .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_ccba .Error ()));
};_gdfc ,_fgfff ,_dgfd :=_aecfb .Column ,_aecfb .RowIdx ,_aecfb .SheetName ;_fdbc :=args [1].AsNumber ();if _fdbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};_cgfbg :=args [2].AsNumber ();if _cgfbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};var _eggd ,_dgbc Result ;if len (args )==3{_eggd =MakeNumberResult (1);_dgbc =MakeNumberResult (1);}else {_eggd =args [3].AsNumber ();if _eggd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");
};if _eggd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_dgbc =args [4].AsNumber ();if _dgbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");
};if _dgbc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_aefg :=_cf .ColumnToIndex (_gdfc );_bbde :=_fgfff +uint32 (_fdbc .ValueNumber );_agcd :=_aefg +uint32 (_cgfbg .ValueNumber );_eebd :=_bbde +uint32 (_eggd .ValueNumber );_fgae :=_agcd +uint32 (_dgbc .ValueNumber );
if _eggd .ValueNumber > 0{_eebd --;}else {_eebd ++;_bbde ,_eebd =_eebd ,_bbde ;};if _dgbc .ValueNumber > 0{_fgae --;}else {_fgae ++;_agcd ,_fgae =_fgae ,_agcd ;};_fbbad :=_a .Sprintf ("\u0025\u0073\u0025\u0064",_cf .IndexToColumn (_agcd ),_bbde );_gdfef :=_a .Sprintf ("\u0025\u0073\u0025\u0064",_cf .IndexToColumn (_fgae ),_eebd );
if _dgfd ==""{return _adge (ctx ,ev ,_fbbad ,_gdfef );}else {return _adge (ctx .Sheet (_dgfd ),ev ,_fbbad ,_gdfef );};};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbgf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dged :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fbeac :=args [2].ValueNumber ;if _fbeac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dafc :=args [3].ValueNumber ;return MakeNumberResult (_dafc *_fbgf *(_dged /_fbeac -1));};var _bggg ,_fadd ,_adca ,_efdg ,_bcecf ,_cdaaa *_bb .Regexp ;func _cgdfc (_ecce Result ,_fcbb int )[]Result {_feca :=[]Result {};switch _ecce .Type {case ResultTypeList :_eaea :=_ecce .ValueList ;
_aded :=len (_eaea );for _bfeg :=0;_bfeg < _fcbb ;_bfeg ++{if _bfeg < _aded {_feca =append (_feca ,_eaea [_bfeg ]);}else {_feca =append (_feca ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _acga :=0;
_acga < _fcbb ;_acga ++{_feca =append (_feca ,_ecce );};};return _feca ;};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_abe :=args [0];switch _abe .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_dfa :=_aecd (_abe .ValueNumber );return MakeNumberResult (float64 (_dfa .Day ()));case ResultTypeString :_gfa :=_bd .ToLower (_abe .ValueString );if !_ffce (_gfa ){_ ,_ ,_ ,_ ,_dac ,_cea :=_dcc (_gfa );if _cea .Type ==ResultTypeError {_cea .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";
return _cea ;};if _dac {return MakeNumberResult (0);};};_ ,_ ,_cbda ,_ ,_af :=_gfcf (_gfa );if _af .Type ==ResultTypeError {return _af ;};return MakeNumberResult (float64 (_cbda ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");
};};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_dedb ,_ccfb ,_cbfb :=_gece (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _cbfb .Type ==ResultTypeError {return _cbfb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aecc :=_ccfb -_dedb ;if _aecc > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_aecfe :=args [2].ValueNumber ;if _aecfe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgcg :=(100-_aecfe )/_aecfe ;_gabe :=360/_aecc ;return MakeNumberResult (_fgcg *_gabe );};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_aeca :=len (args );if _aeca !=4&&_aeca !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fgca :=args [0].ValueNumber ;if _fgca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egfa :=args [1].ValueNumber ;if _egfa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bfad :=args [2].ValueNumber ;if _bfad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bacg :=args [3].ValueNumber ;if _bacg < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");
};if _bacg > _bfad {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_bced :=2.0;if _aeca ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bced =args [4].ValueNumber ;if _bced < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};return MakeNumberResult (_eadf (_fgca ,_egfa ,_bfad ,_bacg ,_bced ));};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_ffb :=args [0].ValueNumber ;_aecdd :=args [1].ValueNumber ;_daea :=args [2].ValueNumber ;_aafc :=_acaa (_ffb ,_aecdd ,_daea );if _aafc >=0{return MakeNumberResult (_aafc );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fcfdd :=false ;for _ ,_bcda :=range args {switch _bcda .Type {case ResultTypeList ,ResultTypeArray :_gbbed :=Or (_bcda .ListValues ());if _gbbed .Type ==ResultTypeError {return _gbbed ;};if _gbbed .ValueNumber !=0{_fcfdd =true ;};case ResultTypeNumber :if _bcda .ValueNumber !=0{_fcfdd =true ;
};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _bcda ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");
};};return MakeBoolResult (_fcfdd );};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gfceb :=args [0].AsString ();if _gfceb .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (_gfceb .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (_gfceb .ValueString [0]));};

// Update returns the same object as updating sheet references does not affect String.
func (_ggdcb String )Update (q *_ag .UpdateQuery )Expression {return _ggdcb };

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abba :=int (args [0].ValueNumber );
return MakeBoolResult (_abba !=_abba /2*2);};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_dbbac ,_gabga string };

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_ebffc :=_dfgf (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _ebffc .Type !=ResultTypeEmpty {return _ebffc ;};_cdfdc :=_geeeb (args [1:]);_dgfa :=-_ea .MaxFloat64 ;_cceca :=_fccfe (args [0]);for _ ,_cccf :=range _cdfdc {_eced :=_cceca [_cccf ._aeaf ][_cccf ._bfgca ].ValueNumber ;
if _dgfa < _eced {_dgfa =_eced ;};};if _dgfa ==-_ea .MaxFloat64 {_dgfa =0;};return MakeNumberResult (float64 (_dgfa ));};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fgga :=args [0].AsNumber ();
if _fgga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gafcc :=_ea .Signbit (_fgga .ValueNumber );
_ddcbe ,_ecec :=_ea .Modf (_fgga .ValueNumber /2);_ggda :=_ddcbe *2;if _ecec !=0{if !_gafcc {_ggda +=2;}else {_ggda -=2;};};return MakeNumberResult (_ggda );};

// String returns a string representation of String.
func (_adggb String )String ()string {return "\u0022"+_adggb ._fdfebb +"\u0022"};func _bf (_bde BinOpType ,_fbf ,_df []Result )Result {_gf :=[]Result {};for _egc :=range _fbf {_agb :=_fbf [_egc ].AsNumber ();_ege :=_df [_egc ].AsNumber ();if _agb .Type !=ResultTypeNumber ||_ege .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _bde {case BinOpTypePlus :_gf =append (_gf ,MakeNumberResult (_agb .ValueNumber +_ege .ValueNumber ));case BinOpTypeMinus :_gf =append (_gf ,MakeNumberResult (_agb .ValueNumber -_ege .ValueNumber ));case BinOpTypeMult :_gf =append (_gf ,MakeNumberResult (_agb .ValueNumber *_ege .ValueNumber ));
case BinOpTypeDiv :if _ege .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gf =append (_gf ,MakeNumberResult (_agb .ValueNumber /_ege .ValueNumber ));case BinOpTypeExp :_gf =append (_gf ,MakeNumberResult (_ea .Pow (_agb .ValueNumber ,_ege .ValueNumber )));
case BinOpTypeLT :_gf =append (_gf ,MakeBoolResult (_agb .ValueNumber < _ege .ValueNumber ));case BinOpTypeGT :_gf =append (_gf ,MakeBoolResult (_agb .ValueNumber > _ege .ValueNumber ));case BinOpTypeEQ :_gf =append (_gf ,MakeBoolResult (_agb .ValueNumber ==_ege .ValueNumber ));
case BinOpTypeLEQ :_gf =append (_gf ,MakeBoolResult (_agb .ValueNumber <=_ege .ValueNumber ));case BinOpTypeGEQ :_gf =append (_gf ,MakeBoolResult (_agb .ValueNumber >=_ege .ValueNumber ));case BinOpTypeNE :_gf =append (_gf ,MakeBoolResult (_agb .ValueNumber !=_ege .ValueNumber ));
default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_bde ));};};return MakeListResult (_gf );};

// String returns a string representation of a vertical range with prefix.
func (_agcfbc PrefixVerticalRange )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_agcfbc ._ccfd .String (),_agcfbc ._fcbbf ,_agcfbc ._gdbf );};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eccg :=args [0].AsString ();_affbc :=args [1].AsString ();if _eccg .Type !=ResultTypeString ||_affbc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};return MakeBoolResult (_eccg .ValueString ==_affbc .ValueString );};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_dffe PrefixVerticalRange )Update (q *_ag .UpdateQuery )Expression {if q .UpdateType ==_ag .UpdateActionRemoveColumn {_gafb :=_dffe ;_cgceb :=_dffe ._ccfd .String ();if _cgceb ==q .SheetToUpdate {_gadec :=q .ColumnIdx ;_gafb ._fcbbf =_fef (_dffe ._fcbbf ,_gadec );
_gafb ._gdbf =_fef (_dffe ._gdbf ,_gadec );};return _gafb ;};return _dffe ;};func _fbaf (_dcaa float64 )float64 {return float64 (int (_dcaa +0.5))};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_ceagf PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_afcfb :=_ceagf ._affed .Reference (ctx ,ev );switch _afcfb .Type {case ReferenceTypeSheet :if _geeca (_afcfb ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_afcfb .Value ));
};_bffdf :=_ceagf .horizontalRangeReference (_afcfb .Value );if _efba ,_fbafg :=ev .GetFromCache (_bffdf );_fbafg {return _efba ;};_dcfd :=ctx .Sheet (_afcfb .Value );_edcdb ,_ccgee :=_babb (_dcfd ,_ceagf ._ebag ,_ceagf ._gecgf );_afegb :=_adge (_dcfd ,ev ,_edcdb ,_ccgee );
ev .SetCache (_bffdf ,_afegb );return _afegb ;default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_afcfb .Type ));
};};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_ffabb :e }};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ccgc :=args [0].AsNumber ();_cfaf :=args [1].AsNumber ();_ddcf :=args [2].AsNumber ();_ceead :=args [3].ListValues ();if _ccgc .Type !=ResultTypeNumber ||_cfaf .Type !=ResultTypeNumber ||_ddcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_acb :=float64 (0);for _edebc ,_fcdac :=range _ceead {_acb +=_fcdac .ValueNumber *_ea .Pow (_ccgc .ValueNumber ,_cfaf .ValueNumber +float64 (_edebc )*_ddcf .ValueNumber );};return MakeNumberResult (_acb );};func (_baedb *noCache )SetCache (key string ,value Result ){};
func _gfcf (_fec string )(int ,int ,int ,bool ,Result ){_baa :="";_efa :=[]string {};for _gdgaf ,_fab :=range _gdga {_efa =_fab .FindStringSubmatch (_fec );if len (_efa )> 1{_baa =_gdgaf ;break ;};};if _baa ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );
};_ada :=false ;var _fca ,_acgc ,_aca int ;var _eaf error ;switch _baa {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_acgc ,_eaf =_bc .Atoi (_efa [1]);if _eaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );};_aca ,_eaf =_bc .Atoi (_efa [3]);
if _eaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );};_fca ,_eaf =_bc .Atoi (_efa [5]);if _eaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );};if _fca < 0||_fca > 9999||(_fca > 99&&_fca < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );
};_fca =_aeac (_fca );_ada =_efa [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_acgc =_ecb [_efa [1]];_aca ,_eaf =_bc .Atoi (_efa [14]);if _eaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );};_fca ,_eaf =_bc .Atoi (_efa [16]);
if _eaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );};if _fca < 0||_fca > 9999||(_fca > 99&&_fca < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );};_fca =_aeac (_fca );_ada =_efa [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_addef ,_cgbd :=_bc .Atoi (_efa [1]);
if _cgbd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );};_eebc ,_cgbd :=_bc .Atoi (_efa [3]);if _cgbd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );};_fdad ,_cgbd :=_bc .Atoi (_efa [5]);if _cgbd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );
};if _addef >=1900&&_addef < 10000{_fca =_addef ;_acgc =_eebc ;_aca =_fdad ;}else if _addef > 0&&_addef < 13{_acgc =_addef ;_aca =_eebc ;_fca =_fdad ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );};_ada =_efa [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_fca ,_eaf =_bc .Atoi (_efa [16]);
if _eaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );};_acgc =_ecb [_efa [3]];_aca ,_eaf =_bc .Atoi (_efa [1]);if _eaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );};_ada =_efa [19]=="";};if !_aef (_fca ,_acgc ,_aca ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dggf );
};return _fca ,_acgc ,_aca ,_ada ,_cff ;};func _bfc (_cddb int )bool {if _cddb ==_cddb /400*400{return true ;};if _cddb ==_cddb /100*100{return false ;};return _cddb ==_cddb /4*4;};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bfdb :=args [0].AsNumber ();if _bfdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cgbf :=float64 (0);if len (args )> 1{_dcfae :=args [1].AsNumber ();if _dcfae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cgbf =_dcfae .ValueNumber ;};_fceef :=_bfdb .ValueNumber ;_fbad :=1.0;if _cgbf >=0{_fbad =_ea .Pow (1/10.0,_cgbf );}else {return MakeNumberResult (0);};_fceef ,_addb :=_ea .Modf (_fceef /_fbad );_agdcg :=0.99999;if _addb > _agdcg {_fceef ++;}else if _addb < -_agdcg {_fceef --;
};_ =_addb ;return MakeNumberResult (_fceef *_fbad );};const _gbedf =-1000;const _fadfb =57373;

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_dbgf :=len (args );if _dbgf < 2||_dbgf > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ecgd :=args [0];if _ecgd .Type !=ResultTypeArray &&_ecgd .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_feed :=args [1].AsNumber ();if _feed .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_geac :=int (_feed .ValueNumber )-1;_eafg :=-1;if _dbgf ==3&&args [2].Type !=ResultTypeEmpty {_acabg :=args [2].AsNumber ();if _acabg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_eafg =int (_acabg .ValueNumber )-1;};if _geac ==-1&&_eafg ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};var _agef []Result ;if _ecgd .Type ==ResultTypeArray {_gffe :=_ecgd .ValueArray ;if _geac < -1||_geac >=len (_gffe ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _geac ==-1{if _eafg >=len (_gffe [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_dcgg :=[][]Result {};for _ ,_addfg :=range _gffe {_beag :=_addfg [_eafg ];
if _beag .Type ==ResultTypeEmpty {_beag =MakeNumberResult (0);};_dcgg =append (_dcgg ,[]Result {_beag });};return MakeArrayResult (_dcgg );};_agef =_gffe [_geac ];}else {_cfag :=_ecgd .ValueList ;if _geac < -1||_geac >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _geac ==-1{if _eafg >=len (_cfag ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_ffag :=_cfag [_eafg ];if _ffag .Type ==ResultTypeEmpty {_ffag =MakeNumberResult (0);
};return _ffag ;};_agef =_cfag ;};if _eafg < -1||_eafg > len (_agef ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _eafg ==-1{_bfec :=[]Result {};
for _ ,_fdge :=range _agef {if _fdge .Type ==ResultTypeEmpty {_bfec =append (_bfec ,MakeNumberResult (0));}else {_bfec =append (_bfec ,_fdge );};};return MakeArrayResult ([][]Result {_bfec });};_fddfe :=_agef [_eafg ];if _fddfe .Type ==ResultTypeEmpty {return MakeNumberResult (0);
};return _fddfe ;};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;const _eee =86400000000000;func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};type parsedSearchObject struct{_cagbb string ;_aaeaa string ;_fdgf int ;};

// Eval evaluates and returns the result of an empty expression.
func (_gbd EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ceef :=args [0].AsNumber ();if _ceef .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ddgbe ,_dgee :=_ea .Modf (_ceef .ValueNumber );if _dgee < 0{_ddgbe --;};return MakeNumberResult (_ddgbe );};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_fbgac :=args [0].AsNumber ();if _fbgac .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_ddef :=int (_fbgac .ValueNumber );_acdd :=make ([][]Result ,0,_ddef );for _dgde :=0;_dgde < _ddef ;_dgde ++{_gcddb :=make ([]Result ,_ddef );for _ggfa :=0;_ggfa < _ddef ;_ggfa ++{if _dgde ==_ggfa {_gcddb [_ggfa ]=MakeNumberResult (1.0);}else {_gcddb [_ggfa ]=MakeNumberResult (0.0);
};};_acdd =append (_acdd ,_gcddb );};return MakeArrayResult (_acdd );};func _gad (_ecbf int ,_bdc _ba .Month ,_abf int )int64 {if _ecbf ==1900&&int (_bdc )<=2{_abf --;};_dcfb :=_ba .Date (_ecbf ,_bdc ,_abf ,0,0,0,0,_ba .UTC );return _dcfb .Unix ();};func (_eabd *defEval )checkLastEvalIsRef (_gcge Context ,_fbc Expression ){switch _fbc .(type ){case FunctionCall :switch _fbc .(FunctionCall )._ggbg {case "\u0049\u0053\u0052E\u0046":for _ ,_dbe :=range _fbc .(FunctionCall )._bgfdd {switch _dbe .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_age :=_dbe .Eval (_gcge ,_eabd );
_eabd ._cgc =!(_age .Type ==ResultTypeError &&_age .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_eabd ._cgc =false ;};};};};};func _dccce (_gdbb Result ,_eafa *criteriaParsed )bool {_edef :=_bd .ToLower (_gdbb .ValueString );_ebcgd :=_eafa ._gcgda ._abgb ;
_gfaae :=_eafa ._gcgda ._aadad ;if _ebcgd ==_ccda {return _edef ==_gfaae ||_fb .Match (_gfaae ,_edef );};if _gdbb .Type !=ResultTypeEmpty {if _edef ==_eafa ._ecdf ||_fb .Match (_eafa ._ecdf ,_edef ){return true ;};if _ ,_dgfgbb :=_bc .ParseFloat (_gfaae ,64);
_dgfgbb ==nil {return false ;};switch _ebcgd {case _bbff :return _edef <=_gfaae ;case _ebed :return _edef >=_gfaae ;case _adga :return _edef < _gfaae ;case _egggg :return _edef > _gfaae ;};};return false ;};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_dgfg :=_bd .ToLower (args [0].ValueString );if !_ffce (_dgfg ){_ ,_ ,_ ,_ ,_fgd ,_gdfg :=_dcc (_dgfg );if _gdfg .Type ==ResultTypeError {_gdfg .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";
return _gdfg ;};if _fgd {return MakeNumberResult (0);};};_dba ,_bdae ,_adde ,_ ,_acde :=_gfcf (_dgfg );if _acde .Type ==ResultTypeError {return _acde ;};return MakeNumberResult (_bad (_dba ,_bdae ,_adde ));};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fbafc :=args [0];switch _fbafc .Type {case ResultTypeError :return _fbafc ;case ResultTypeNumber ,ResultTypeString :return _afea (args [0]);case ResultTypeList :_afec :=_fbafc .ValueList ;_dcad :=[]Result {};for _ ,_beec :=range _afec {_bcdb :=_afea (_beec );
if _bcdb .Type ==ResultTypeError {return _bcdb ;};_dcad =append (_dcad ,_bcdb );};return MakeListResult (_dcad );case ResultTypeArray :_bbegc :=_fbafc .ValueArray ;_ceega :=[][]Result {};for _ ,_feec :=range _bbegc {_acea :=[]Result {};for _ ,_dagge :=range _feec {_cegfa :=_afea (_dagge );
if _cegfa .Type ==ResultTypeError {return _cegfa ;};_acea =append (_acea ,_cegfa );};_ceega =append (_ceega ,_acea );};return MakeArrayResult (_ceega );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_bggea PrefixHorizontalRange )Update (q *_ag .UpdateQuery )Expression {return _bggea };

// String is a string expression.
type String struct{_fdfebb string };

// Update updates references in the VerticalRange after removing a row/column.
func (_fgfa VerticalRange )Update (q *_ag .UpdateQuery )Expression {if q .UpdateType ==_ag .UpdateActionRemoveColumn {_ccfae :=_fgfa ;if q .UpdateCurrentSheet {_ggfgc :=q .ColumnIdx ;_ccfae ._dbbac =_fef (_fgfa ._dbbac ,_ggfgc );_ccfae ._gabga =_fef (_fgfa ._gabga ,_ggfgc );
};return _ccfae ;};return _fgfa ;};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_defa :=_bd .Split (v ,"\u003a");if len (_defa )!=2{return nil ;};_ecada ,_ :=_bc .Atoi (_defa [0]);_cfbcb ,_ :=_bc .Atoi (_defa [1]);if _ecada > _cfbcb {_ecada ,_cfbcb =_cfbcb ,_ecada ;
};return PrefixHorizontalRange {_affed :pfx ,_ebag :_ecada ,_gecgf :_cfbcb };};func (_aba *evCache )GetFromCache (key string )(Result ,bool ){_aba ._gca .Lock ();_cbd ,_bbb :=_aba ._acg [key ];_aba ._gca .Unlock ();return _cbd ,_bbb ;};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_ea .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bbag :=args [0].AsNumber ();_bgba :=args [1].AsNumber ();if _bbag .Type !=ResultTypeNumber ||_bgba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _bgba .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_ea .Trunc (_bbag .ValueNumber /_bgba .ValueNumber ));
};

// Reference returns a string reference value to a vertical range.
func (_effgd VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_effgd .verticalRangeReference ()};};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_faedc .Lock ();defer _faedc .Unlock ();if _ ,_fgfba :=_baegb [name ];_fgfba {_ae .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_baegb [name ]=fn ;};func _gcfc (_bgbd ,_agbf Result ,_cagb string )(*xargs ,Result ){if _bgbd .Type !=ResultTypeList &&_bgbd .Type !=ResultTypeArray {return nil ,MakeErrorResult (_cagb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_ddafb :=_fccfe (_bgbd );_accc :=[]float64 {};for _ ,_egga :=range _ddafb {for _ ,_baabe :=range _egga {if _baabe .Type ==ResultTypeNumber &&!_baabe .IsBoolean {_accc =append (_accc ,_baabe .ValueNumber );}else {return nil ,MakeErrorResult (_cagb +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");
};};};_bfef :=len (_accc );if len (_accc )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _agbf .Type !=ResultTypeList &&_agbf .Type !=ResultTypeArray {return nil ,MakeErrorResult (_cagb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_dbeeg :=_fccfe (_agbf );_dafg :=[]float64 {};_cecf :=0.0;for _ ,_cbega :=range _dbeeg {for _ ,_fdgb :=range _cbega {if _fdgb .Type ==ResultTypeNumber &&!_fdgb .IsBoolean {_fead :=float64 (int (_fdgb .ValueNumber ));if _fead < _cecf {return nil ,MakeErrorResultType (ErrorTypeNum ,_cagb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");
};_dafg =append (_dafg ,_fead );_cecf =_fead ;}else {return nil ,MakeErrorResult (_cagb +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_dafg )!=_bfef {return nil ,MakeErrorResultType (ErrorTypeNum ,"");
};return &xargs {_accc ,_dafg },MakeEmptyResult ();};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_gfc [][]Expression };

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};const _fdgcb =57350;

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fcda :=args [0].AsString ();if _fcda .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");
};_bgfg :="\u0041\u0031";if len (args )==2{_abaad :=args [1].Ref ;if _abaad .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};_bgfg =_abaad .Value ;};switch _fcda .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_gbag ,_fgec :=_cf .ParseCellReference (_bgfg );if _fgec !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bgfg );
};_badg :="\u0024"+_gbag .Column +"\u0024"+_bc .Itoa (int (_gbag .RowIdx ));if _gbag .SheetName !=""{_badg =_gbag .SheetName +"\u0021"+_badg ;};return MakeStringResult (_badg );case "\u0063\u006f\u006c":_cdfd ,_afg :=_cf .ParseCellReference (_bgfg );if _afg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bgfg );
};return MakeNumberResult (float64 (_cdfd .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_ecea :=_bd .Contains (ctx .GetFormat (_bgfg ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_ecea );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];
case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_dcbfc :="\u0047";_ffaa :=ctx .GetFormat (_bgfg );if _ffaa =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_gbca .MatchString (_ffaa ){_dcbfc ="\u0046\u0030";
}else if _ffaa =="\u0030\u0025"{_dcbfc ="\u0050\u0030";}else if _ffaa =="\u004d\u004d\u004d\u0020\u0044\u0044"{_dcbfc ="\u0044\u0032";}else if _ffaa =="\u004d\u004d\u002fY\u0059"{_dcbfc ="\u0044\u0033";}else if _ffaa =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_ffaa =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_dcbfc ="\u0044\u0034";
}else if _ffaa =="\u004d\u004d\u005c\u002d\u0044\u0044"{_dcbfc ="\u0044\u0035";}else if _ffaa =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_dcbfc ="\u0044\u0036";}else if _ffaa =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_dcbfc ="\u0044\u0037";
}else if _ffaa =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_dcbfc ="\u0044\u0038";}else if _ffaa =="\u0048\u0048\u003aM\u004d"{_dcbfc ="\u0044\u0039";}else if _fbgbb .MatchString (_ffaa ){_dcbfc ="\u002e\u0030";}else if _dccc .MatchString (_ffaa ){_dcbfc ="\u002e\u0030\u0028\u0029";
}else if _agab .MatchString (_ffaa ){_dcbfc ="\u0043\u0030";}else if _ffddf .MatchString (_ffaa )||_egbd .MatchString (_ffaa ){_dcbfc ="\u0044\u0031";}else if _geee :=_eacb .FindStringSubmatch (_ffaa );len (_geee )> 1{_dcbfc ="\u0046"+_bc .Itoa (len (_geee [1]));
}else if _ccec :=_gbccb .FindStringSubmatch (_ffaa );len (_ccec )> 1{_dcbfc ="\u002e"+_bc .Itoa (len (_ccec [2]));}else if _bgfd :=_cafaf .FindStringSubmatch (_ffaa );len (_bgfd )> 1{_dcbfc ="\u0050"+_bc .Itoa (len (_bgfd [2]));}else if _dcggg :=_efec .FindStringSubmatch (_ffaa );
len (_dcggg )> 1{_dcbfc ="\u0043"+_cacba (_dcggg ,1);}else if _befb :=_dcddf .FindStringSubmatch (_ffaa );len (_befb )> 1{_dcbfc ="\u0043"+_cacba (_befb ,1);}else if _gcdg :=_fdfea .FindStringSubmatch (_ffaa );len (_gcdg )> 1{_dcbfc ="\u002e"+_cacba (_gcdg ,1)+"\u0028\u0029";
}else if _gcfb :=_decc .FindStringSubmatch (_ffaa );len (_gcfb )> 1{_dcbfc ="\u002e"+_cacba (_gcfb ,1);}else if _dege :=_fbged .FindStringSubmatch (_ffaa );len (_dege )> 1{_dcbfc ="\u0053"+_cacba (_dege ,3);};if _dcbfc !="\u0047"&&_bd .Contains (_ffaa ,"\u005b\u0052\u0045D\u005d"){_dcbfc +="\u002d";
};return MakeStringResult (_dcbfc );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_eafc :=ctx .GetFormat (_bgfg );if _bgade .MatchString (_eafc ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_bgfg ));
case "\u0070r\u006f\u0074\u0065\u0063\u0074":_gebg :=0.0;if ctx .GetLocked (_bgfg ){_gebg =1.0;};return MakeNumberResult (_gebg );case "\u0072\u006f\u0077":_dbdd ,_agbfg :=_cf .ParseCellReference (_bgfg );if _agbfg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bgfg );
};return MakeNumberResult (float64 (_dbdd .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");
};case "\u0077\u0069\u0064t\u0068":_eecg ,_dfgb :=_cf .ParseCellReference (_bgfg );if _dfgb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bgfg );};if _eecg .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_eecg .ColumnIdx )));
}else {return MakeNumberResult (ctx .Sheet (_eecg .SheetName ).GetWidth (int (_eecg .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_fcda .ValueString );
};func _aaeb (_eacc ,_dggc ,_gbbc ,_adcc ,_eade ,_fdab float64 )float64 {var _eecf ,_cgaa float64 ;_ecad :=0.0;_dcg :=_ea .Ceil (_eade );_gfce :=_eacc -_dggc ;_dbee :=false ;_bfdd :=0.0;for _degc :=1.0;_degc <=_dcg ;_degc ++{if !_dbee {_eecf =_eadf (_eacc ,_dggc ,_gbbc ,_degc ,_fdab );
_bfdd =_gfce /(_gbbc -_degc +1);if _bfdd > _eecf {_cgaa =_bfdd ;_dbee =true ;}else {_cgaa =_eecf ;_gfce -=_eecf ;};}else {_cgaa =_bfdd ;};if _degc ==_dcg {_cgaa *=_eade +1-_dcg ;};_ecad +=_cgaa ;};return _ecad ;};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_caed ,_deagc ,_gedba :=_afeae (from ,to );if _gedba !=nil {_ae .Log .Debug (_gedba .Error ());return NewError (_gedba .Error ());};return Range {_gcddf :_caed ,_ebad :_deagc };};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_gfceg :pfx ,_edab :exp }};type couponArgs struct{_ebg float64 ;_ffad float64 ;_gadg int ;_agcg int ;};func _cafe (_fgbde []Result ,_bedbf bool )Result {var _cgef string ;if _bedbf {_cgef ="\u004c\u0041\u0052G\u0045";
}else {_cgef ="\u0053\u004d\u0041L\u004c";};if len (_fgbde )!=2{return MakeErrorResult (_cgef +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fafdb :=_fgbde [0];var _acdfe [][]Result ;
switch _fafdb .Type {case ResultTypeArray :_acdfe =_fafdb .ValueArray ;case ResultTypeList :_acdfe =[][]Result {_fafdb .ValueList };default:return MakeErrorResult (_cgef +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");
};if len (_acdfe )==0{return MakeErrorResult (_cgef +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};if _fgbde [1].Type !=ResultTypeNumber {return MakeErrorResult (_cgef +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_cacd :=_fgbde [1].ValueNumber ;if _cacd < 1{return MakeErrorResultType (ErrorTypeNum ,_cgef +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_efdd :=int (_cacd );if float64 (_efdd )!=_cacd {return MakeErrorResultType (ErrorTypeNum ,_cgef +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_eefg :=[]float64 {};for _ ,_fdfeb :=range _acdfe {for _ ,_gfcbc :=range _fdfeb {if _gfcbc .Type ==ResultTypeNumber {_eefg =append (_eefg ,_gfcbc .ValueNumber );};};};if _efdd > len (_eefg ){return MakeErrorResultType (ErrorTypeNum ,_cgef +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_befae :=_fd .MergeSort (_eefg );if _bedbf {return MakeNumberResult (_befae [len (_befae )-_efdd ]);}else {return MakeNumberResult (_befae [_efdd -1]);};};func _egef (_ddfe ,_agag float64 ,_dace ,_edea int )float64 {_fcea :=_aecd (_ddfe );_aefda :=_aecd (_agag );
if _edea ==1{_ddag :=_ffgg (_fcea ,_aefda ,_dace ,1);_bgf :=_ddag .AddDate (0,12/_dace ,0);return _bgga (_ddag ,_bgf ,_edea );};return float64 (_afc (0,_edea ))/float64 (_dace );};func _ece (_fafd float64 )bool {return _fafd ==1||_fafd ==2||_fafd ==4};
var _facbg =[...]struct{_begga int ;_cbef int ;_dcaeg string ;}{};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _dbdaba (args ,true )};func _geag (_edda ,_afbcg int )string {const TOKSTART =4;if !_eefec {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_fbec :=range _facbg {if _fbec ._begga ==_edda &&_fbec ._cbef ==_afbcg {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_fbec ._dcaeg ;
};};_ddbf :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_bbab (_afbcg );_ffffb :=make ([]int ,0,4);_gdgab :=_cbebc [_edda ];for _agbb :=TOKSTART ;_agbb -1< len (_efedd );_agbb ++{if _aecfbd :=_gdgab +_agbb ;
_aecfbd >=0&&_aecfbd < _badce &&_cgff [_eedfd [_aecfbd ]]==_agbb {if len (_ffffb )==cap (_ffffb ){return _ddbf ;};_ffffb =append (_ffffb ,_agbb );};};if _agde [_edda ]==-2{_gbbf :=0;for _fggd [_gbbf ]!=-1||_fggd [_gbbf +1]!=_edda {_gbbf +=2;};for _gbbf +=2;
_fggd [_gbbf ]>=0;_gbbf +=2{_egfad :=_fggd [_gbbf ];if _egfad < TOKSTART ||_fggd [_gbbf +1]==0{continue ;};if len (_ffffb )==cap (_ffffb ){return _ddbf ;};_ffffb =append (_ffffb ,_egfad );};if _fggd [_gbbf +1]!=0{return _ddbf ;};};for _babca ,_adbae :=range _ffffb {if _babca ==0{_ddbf +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";
}else {_ddbf +="\u0020\u006f\u0072\u0020";};_ddbf +=_bbab (_adbae );};return _ddbf ;};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_fbdf :=_bd .Split (v ,"\u003a");if len (_fbdf )!=2{return nil ;};if _fbdf [0]> _fbdf [1]{_fbdf [0],_fbdf [1]=_fbdf [1],_fbdf [0];};return PrefixVerticalRange {_ccfd :pfx ,_fcbbf :_fbdf [0],_gdbf :_fbdf [1]};
};func _gfbe (_dfgg ,_ddgb float64 ,_cdga ,_gdbd int )(float64 ,Result ){_eecd ,_bbc :=_aecd (_dfgg ),_aecd (_ddgb );if _bbc .After (_eecd ){_dcdf :=_ffgg (_eecd ,_bbc ,_cdga ,_gdbd );_dafe :=(_bbc .Year ()-_dcdf .Year ())*12+int (_bbc .Month ())-int (_dcdf .Month ());
return float64 (_dafe *_cdga )/12.0,_cff ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");
};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_gceb :=args [0];if _gceb .Type ==ResultTypeError ||_gceb .Type ==ResultTypeString {return _gceb ;};return _cff ;};const _aebf =57353;

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cdcf :=[]float64 {};
for _ ,_cfgf :=range args {switch _cfgf .Type {case ResultTypeString :_eeeeb :=_cfgf .AsNumber ();if _eeeeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_cdcf =append (_cdcf ,_eeeeb .ValueNumber );case ResultTypeList :_efea :=LCM (_cfgf .ValueList );if _efea .Type !=ResultTypeNumber {return _efea ;};_cdcf =append (_cdcf ,_efea .ValueNumber );case ResultTypeNumber :_cdcf =append (_cdcf ,_cfgf .ValueNumber );
case ResultTypeEmpty :case ResultTypeError :return _cfgf ;};};if len (_cdcf )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if _cdcf [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_cdcf )==1{return MakeNumberResult (_cdcf [0]);
};_ddeb :=_cdcf [0];for _caaf :=1;_caaf < len (_cdcf );_caaf ++{if _cdcf [_caaf ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ddeb =_feedf (_ddeb ,_cdcf [_caaf ]);};return MakeNumberResult (_ddeb );};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _fggb (args ,_aedd )};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_bgdag Result )AsNumber ()Result {if _bgdag .Type ==ResultTypeString {_egccg ,_gcbe :=_bc .ParseFloat (_bgdag .ValueString ,64);if _gcbe ==nil {return MakeNumberResult (_egccg );};};if _bgdag .Type ==ResultTypeEmpty {return MakeNumberResult (0);};
return _bgdag ;};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bdaba :=_gdcac (args );_db .Float64s (_bdaba );var _cafgd float64 ;if len (_bdaba )%2==0{_cafgd =(_bdaba [len (_bdaba )/2-1]+_bdaba [len (_bdaba )/2])/2;}else {_cafgd =_bdaba [len (_bdaba )/2];};return MakeNumberResult (_cafgd );};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bdgfc :=0;_bedeb :=false ;for _ ,_gafg :=range args {switch _gafg .Type {case ResultTypeList ,ResultTypeArray :_becd :=Xor (_gafg .ListValues ());if _becd .Type ==ResultTypeError {return _becd ;};if _becd .ValueNumber !=0{_bdgfc ++;};_bedeb =true ;case ResultTypeNumber :if _gafg .ValueNumber !=0{_bdgfc ++;
};_bedeb =true ;case ResultTypeString :case ResultTypeError :return _gafg ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");
};};if !_bedeb {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_bdgfc %2!=0);};type criteriaParsed struct{_afaga bool ;
_fgfg float64 ;_ecdf string ;_gcgda *criteriaRegex ;};const _gebc =57372;

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cdcgc ,_fbgfb ,_ceg :=_gece (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _ceg .Type ==ResultTypeError {return _ceg ;};_baae ,_ceg :=_cbeg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _ceg .Type ==ResultTypeError {return _ceg ;};if _baae >=_cdcgc {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_afca :=args [3].ValueNumber ;if _afca < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_baab :=args [4].ValueNumber ;if _baab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_feef :=args [5].ValueNumber ;if _feef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_egae :=float64 (int (args [6].ValueNumber ));if !_ece (_egae ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_eebb :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_eebb =int (args [7].ValueNumber );if !_agdc (_eebb ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");
};};_bccae ,_ceg :=_ead (_baae ,_fbgfb ,_eebb );if _ceg .Type ==ResultTypeError {return _ceg ;};_bccae *=_egae ;_egcg ,_ceg :=_ead (_cdcgc ,_fbgfb ,_eebb );if _ceg .Type ==ResultTypeError {return _ceg ;};_egcg *=_egae ;_ddfed ,_ceg :=_ead (_baae ,_cdcgc ,_eebb );
if _ceg .Type ==ResultTypeError {return _ceg ;};_ddfed *=_egae ;_gcfee :=_feef +_bccae *100*_afca /_egae ;_gcfee /=_baab +_ddfed *100*_afca /_egae ;_gcfee --;_gcfee *=_egae /_egcg ;return MakeNumberResult (_gcfee );};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];
};return args [0];};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_gcccg ,_cdade :=_acab (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _cdade .Type ==ResultTypeError {return _cdade ;};_dgcd :=_gcccg ._fgff ;_deec :=_gcccg ._eed ;_egg :=_gcccg ._adc ;_dbb :=_gcccg ._bbe ;
_edbc :=_gcccg ._cebe ;_babc :=_gcccg ._gcgec ;return _fdce (_dgcd ,_deec ,_egg ,_dbb ,_edbc ,_babc );};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_cdec :=MakeNumberResult (0);for _ ,_ceafd :=range args {_ceafd =_ceafd .AsNumber ();switch _ceafd .Type {case ResultTypeNumber :_cdec .ValueNumber +=_ceafd .ValueNumber *_ceafd .ValueNumber ;case ResultTypeList ,ResultTypeArray :_afbc :=SumSquares (_ceafd .ListValues ());
if _afbc .Type !=ResultTypeNumber {return _afbc ;};_cdec .ValueNumber +=_afbc .ValueNumber ;case ResultTypeString :case ResultTypeError :return _ceafd ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_ceafd .Type ));
};};return _cdec ;};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_ddade NamedRangeRef )Update (q *_ag .UpdateQuery )Expression {return _ddade };const _fda =_ebb +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdfac :=args [0].AsNumber ();if _gdfac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (180.0/_ea .Pi *_gdfac .ValueNumber );};func (_abdc *plex )Lex (lval *yySymType )int {_eefec =true ;_bfecb :=<-_abdc ._bbcfg ;if _bfecb !=nil {lval ._aggcf =_bfecb ;return int (lval ._aggcf ._cgbda );};return 0;};

// Number is a nubmer expression.
type Number struct{_egagf float64 };

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_egb EmptyExpr )Update (q *_ag .UpdateQuery )Expression {return _egb };

// Reference returns a string reference value to a sheet.
func (_gbadd SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_gbadd ._gcccgf };};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_eeea ,_cffa :=_eabfe ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _cffa .Type !=ResultTypeEmpty {return _cffa ;};_fbagg :=_eeea ._babce ;_gdea :=_eeea ._agcdd ;_gaabd :=_eeea ._ebdgce ;_cabf :=_eeea ._dfge ;_dgaa :=len (_fbagg );
if _gdea > _dgaa {_gdea =_dgaa ;};_agcge :=_gdea +_gaabd ;if _agcge > _dgaa {_agcge =_dgaa ;};_egaab :=_fbagg [0:_gdea ]+_cabf +_fbagg [_agcge :];return MakeStringResult (_egaab );};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aaga :=args [0];switch _aaga .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_bae :=_aecd (_aaga .ValueNumber );return MakeNumberResult (float64 (_bae .Minute ()));case ResultTypeString :_fcc :=_bd .ToLower (_aaga .ValueString );if !_ebc (_fcc ){_ ,_ ,_ ,_acdc ,_baed :=_gfcf (_fcc );if _baed .Type ==ResultTypeError {_baed .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";
return _baed ;};if _acdc {return MakeNumberResult (0);};};_ ,_gfcb ,_ ,_ ,_ ,_aged :=_dcc (_fcc );if _aged .Type ==ResultTypeError {return _aged ;};return MakeNumberResult (float64 (_gfcb ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");
};};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_adfd ,_agfb ,_cce :=_gfgb (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _cce .Type ==ResultTypeError {return _cce ;};if _agfb < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");
};if _adfd ==0{return MakeNumberResult (0);};_cdf :=_adfd < 0;if _cdf {_adfd =-_adfd ;};_ggfg :=args [0].Value ();_cgdg :=_bd .Split (_ggfg ,"\u002e");_cdbe :=float64 (int (_adfd ));_cdde :=_cgdg [1];_bcec :=len (_cdde );_fae :=int (_ea .Log10 (_agfb ))+1;
_ebeb :=float64 (_fae -_bcec );_ceea ,_fgfb :=_bc .ParseFloat (_cdde ,64);if _fgfb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");
};_ceea *=_ea .Pow (10,_ebeb );_effd :=_cdbe +_ceea /_agfb ;if _cdf {_effd =-_effd ;};return MakeNumberResult (_effd );};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};

// Eval evaluates and returns a string.
func (_fccfc String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_fccfc ._fdfebb )};func (_dadbd *Lexer )nextRaw ()*node {for len (_dadbd ._eafga )!=0{_abebe :=<-_dadbd ._eafga [len (_dadbd ._eafga )-1];if _abebe !=nil {return _abebe ;
};_dadbd ._eafga =_dadbd ._eafga [0:len (_dadbd ._eafga )-1];};return <-_dadbd ._defdf ;};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_bd .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_fdfebb :v };};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_agbe :=int (args [0].ValueNumber );if _agbe < 0||_agbe >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _agbe <=1899{_agbe +=1900;};_fba :=_ba .Month (args [1].ValueNumber );
_gged :=int (args [2].ValueNumber );_aege :=_gad (_agbe ,_fba ,_gged );_cbaa :=_fgeb (_cdaa ,_aege )+1;if _cbaa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_cbaa );
};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_fgf :=len (args );if (_fgf !=2&&_fgf !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cde :=0;if _fgf ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cde =int (args [2].ValueNumber );if !_agdc (_cde ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");
};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aefd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gcba :=args [1].ValueNumber ;_gac ,_fagb :=_ead (_aefd ,_gcba ,_cde );if _fagb .Type ==ResultTypeError {return _fagb ;};return MakeNumberResult (_gac );};func _agbee (_eecdb []Result ,_cged string )(*cumulArgs ,Result ){if len (_eecdb )!=6{return nil ,MakeErrorResult (_cged +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _eecdb [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cged +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ggae :=_eecdb [0].ValueNumber ;
if _ggae <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cged +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _eecdb [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cged +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_aeda :=_eecdb [1].ValueNumber ;if _aeda <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cged +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if _eecdb [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cged +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_affd :=_eecdb [2].ValueNumber ;if _affd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cged +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _eecdb [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cged +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_aaed :=_eecdb [3].ValueNumber ;if _aaed <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cged +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _eecdb [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cged +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gbcb :=_eecdb [4].ValueNumber ;if _gbcb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cged +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if _gbcb < _aaed {return nil ,MakeErrorResultType (ErrorTypeNum ,_cged +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");
};if _gbcb > _aeda {return nil ,MakeErrorResultType (ErrorTypeNum ,_cged +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");
};_bbecf :=int (_eecdb [5].ValueNumber );if _bbecf !=0&&_bbecf !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_cged +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");
};return &cumulArgs {_ggae ,_aeda ,_affd ,_aaed ,_gbcb ,_bbecf },_cff ;};func _gd (_dg BinOpType ,_dfg []Result ,_bcd Result )Result {_fcd :=[]Result {};switch _bcd .Type {case ResultTypeNumber :_cda :=_bcd .ValueNumber ;for _fdb :=range _dfg {_egee :=_dfg [_fdb ].AsNumber ();
if _egee .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _dg {case BinOpTypePlus :_fcd =append (_fcd ,MakeNumberResult (_egee .ValueNumber +_cda ));case BinOpTypeMinus :_fcd =append (_fcd ,MakeNumberResult (_egee .ValueNumber -_cda ));case BinOpTypeMult :_fcd =append (_fcd ,MakeNumberResult (_egee .ValueNumber *_cda ));
case BinOpTypeDiv :if _cda ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fcd =append (_fcd ,MakeNumberResult (_egee .ValueNumber /_cda ));case BinOpTypeExp :_fcd =append (_fcd ,MakeNumberResult (_ea .Pow (_egee .ValueNumber ,_cda )));case BinOpTypeLT :_fcd =append (_fcd ,MakeBoolResult (_egee .ValueNumber < _cda ));
case BinOpTypeGT :_fcd =append (_fcd ,MakeBoolResult (_egee .ValueNumber > _cda ));case BinOpTypeEQ :_fcd =append (_fcd ,MakeBoolResult (_egee .ValueNumber ==_cda ));case BinOpTypeLEQ :_fcd =append (_fcd ,MakeBoolResult (_egee .ValueNumber <=_cda ));case BinOpTypeGEQ :_fcd =append (_fcd ,MakeBoolResult (_egee .ValueNumber >=_cda ));
case BinOpTypeNE :_fcd =append (_fcd ,MakeBoolResult (_egee .ValueNumber !=_cda ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_dg ));
};};case ResultTypeString :_gcg :=_bcd .ValueString ;for _agg :=range _dfg {_be :=_dfg [_agg ].AsString ();if _be .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _dg {case BinOpTypeLT :_fcd =append (_fcd ,MakeBoolResult (_be .ValueString < _gcg ));case BinOpTypeGT :_fcd =append (_fcd ,MakeBoolResult (_be .ValueString > _gcg ));case BinOpTypeEQ :_fcd =append (_fcd ,MakeBoolResult (_be .ValueString ==_gcg ));
case BinOpTypeLEQ :_fcd =append (_fcd ,MakeBoolResult (_be .ValueString <=_gcg ));case BinOpTypeGEQ :_fcd =append (_fcd ,MakeBoolResult (_be .ValueString >=_gcg ));case BinOpTypeNE :_fcd =append (_fcd ,MakeBoolResult (_be .ValueString !=_gcg ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_dg ));
};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");
};return MakeListResult (_fcd );};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dagd ,_dgaf ,_deda :=_gece (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _deda .Type ==ResultTypeError {return _deda ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afaf :=_dgaf -_dagd ;if _afaf > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");
};_cgae :=args [2].ValueNumber ;if _cgae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult ((365*_cgae )/(360-_cgae *_afaf ));};

// GetWidth returns 0 for the invalid reference context.
func (_cbbg *ivr )GetWidth (colIdx int )float64 {return float64 (0)};const _ebb ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";
const _cafca =57360;

// String returns a string representation of a vertical range.
func (_cbge VerticalRange )String ()string {return _cbge .verticalRangeReference ()};const _dgda int =0;

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_faedc .Lock ();defer _faedc .Unlock ();if _bggba ,_befba :=_baegb [name ];_befba {return _bggba ;};return nil ;};func _ccg (){_gdga ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_bb .MustCompile ("\u005e"+_cbf +_cad );
_gdga ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_bb .MustCompile ("\u005e"+_fda +_cad );_gdga ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_bb .MustCompile ("\u005e"+_dda +_cad );_gdga ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_bb .MustCompile ("\u005e"+_bdd +_cad );
_cdcc ["\u0068\u0068"]=_bb .MustCompile (_eaab +_aeg +"\u0024");_cdcc ["\u0068\u0068\u003am\u006d"]=_bb .MustCompile (_eaab +_egeb +"\u0024");_cdcc ["\u006d\u006d\u003as\u0073"]=_bb .MustCompile (_eaab +_dfc +"\u0024");_cdcc ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_bb .MustCompile (_eaab +_dad +"\u0024");
_gaag =[]*_bb .Regexp {_bb .MustCompile ("\u005e"+_cbf +"\u0024"),_bb .MustCompile ("\u005e"+_fda +"\u0024"),_bb .MustCompile ("\u005e"+_dda +"\u0024"),_bb .MustCompile ("\u005e"+_bdd +"\u0024")};_aea =[]*_bb .Regexp {_bb .MustCompile ("\u005e"+_aeg +"\u0024"),_bb .MustCompile ("\u005e"+_egeb +"\u0024"),_bb .MustCompile ("\u005e"+_dfc +"\u0024"),_bb .MustCompile ("\u005e"+_dad +"\u0024")};
};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_bda :lhs ,_aa :rhs ,_agc :op };};func _fac (_gfd ,_cbaf ,_baeb ,_gea int )int {if !_cfb (_gea ){return _baeb ;};_gfgc :=_baeb ;_feag :=_gagd (_gfd ,_cbaf );
if _gfgc > 30||_baeb >=_feag ||_gfgc >=_feag {_gfgc =30;};return _gfgc ;};

// Eval evaluates and returns the result of a sheet expression.
func (_agaaga SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");
};func (_eabaf Result )AsString ()Result {switch _eabaf .Type {case ResultTypeNumber :return MakeStringResult (_eabaf .Value ());default:return _eabaf ;};};