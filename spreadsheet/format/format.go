//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_f "bytes";_a "fmt";_gf "github.com/unidoc/unioffice/common/logger";_d "io";_bf "math";_g "strconv";_b "strings";_cc "time";);

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_dd bool ;_gbg bool ;_bg bool ;_fd bool ;_ffd bool ;_e bool ;_df int64 ;_ccb int ;};const _ae =1e-10;func _gfd (_acg []byte )[]byte {for _bfa :=0;_bfa < len (_acg )/2;
_bfa ++{_aee :=len (_acg )-1-_bfa ;_acg [_bfa ],_acg [_aee ]=_acg [_aee ],_acg [_bfa ];};return _acg ;};var _ff =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};const _gde int =34;func _cfc (_ded _cc .Time ,_baf string )[]byte {_gfde :=[]byte {};
_aff :=0;for _fdaf :=0;_fdaf < len (_baf );_fdaf ++{var _gaa string ;if _baf [_fdaf ]=='/'{_gaa =string (_baf [_aff :_fdaf ]);_aff =_fdaf +1;}else if _fdaf ==len (_baf )-1{_gaa =string (_baf [_aff :_fdaf +1]);}else {continue ;};switch _gaa {case "\u0079\u0079":_gfde =_ded .AppendFormat (_gfde ,"\u0030\u0036");
case "\u0079\u0079\u0079\u0079":_gfde =_ded .AppendFormat (_gfde ,"\u0032\u0030\u0030\u0036");case "\u006d":_gfde =_ded .AppendFormat (_gfde ,"\u0031");case "\u006d\u006d":_gfde =_ded .AppendFormat (_gfde ,"\u0030\u0031");case "\u006d\u006d\u006d":_gfde =_ded .AppendFormat (_gfde ,"\u004a\u0061\u006e");
case "\u006d\u006d\u006d\u006d":_gfde =_ded .AppendFormat (_gfde ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _ded .Month (){case _cc .January ,_cc .July ,_cc .June :_gfde =append (_gfde ,'J');case _cc .February :_gfde =append (_gfde ,'M');
case _cc .March ,_cc .May :_gfde =append (_gfde ,'M');case _cc .April ,_cc .August :_gfde =append (_gfde ,'A');case _cc .September :_gfde =append (_gfde ,'S');case _cc .October :_gfde =append (_gfde ,'O');case _cc .November :_gfde =append (_gfde ,'N');
case _cc .December :_gfde =append (_gfde ,'D');};case "\u0064":_gfde =_ded .AppendFormat (_gfde ,"\u0032");case "\u0064\u0064":_gfde =_ded .AppendFormat (_gfde ,"\u0030\u0032");case "\u0064\u0064\u0064":_gfde =_ded .AppendFormat (_gfde ,"\u004d\u006f\u006e");
case "\u0064\u0064\u0064\u0064":_gfde =_ded .AppendFormat (_gfde ,"\u004d\u006f\u006e\u0064\u0061\u0079");default:_gf .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_gaa );
};if _baf [_fdaf ]=='/'{_gfde =append (_gfde ,'/');};};return _gfde ;};const _fgdc int =0;

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_fc ,_ :=_g .ParseFloat (v ,64);return Number (_fc ,f );};return String (v ,f );};const _fgg int =34;const _dcb int =-1;const _ggcg int =-1;func _bb (_efd _cc .Time ,_fag float64 ,_gae string )[]byte {_cg :=[]byte {};
_bdc :=0;for _cbg :=0;_cbg < len (_gae );_cbg ++{var _gga string ;if _gae [_cbg ]==':'{_gga =string (_gae [_bdc :_cbg ]);_bdc =_cbg +1;}else if _cbg ==len (_gae )-1{_gga =string (_gae [_bdc :_cbg +1]);}else {continue ;};switch _gga {case "\u0064":_cg =_efd .AppendFormat (_cg ,"\u0032");
case "\u0068":_cg =_efd .AppendFormat (_cg ,"\u0033");case "\u0068\u0068":_cg =_efd .AppendFormat (_cg ,"\u0031\u0035");case "\u006d":_cg =_efd .AppendFormat (_cg ,"\u0034");case "\u006d\u006d":_cg =_efd .AppendFormat (_cg ,"\u0030\u0034");case "\u0073":_cg =_efd .Round (_cc .Second ).AppendFormat (_cg ,"\u0035");
case "\u0073\u002e\u0030":_cg =_efd .Round (_cc .Second /10).AppendFormat (_cg ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_cg =_efd .Round (_cc .Second /100).AppendFormat (_cg ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_cg =_efd .Round (_cc .Second /1000).AppendFormat (_cg ,"\u0035\u002e\u00300\u0030");
case "\u0073\u0073":_cg =_efd .Round (_cc .Second ).AppendFormat (_cg ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_cg =_efd .Round (_cc .Second /10).AppendFormat (_cg ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_cg =_efd .Round (_cc .Second /100).AppendFormat (_cg ,"\u0030\u0035\u002e0\u0030");
case "\u0073\u0073\u002e\u0030\u0030\u0030":_cg =_efd .Round (_cc .Second /1000).AppendFormat (_cg ,"\u0030\u0035\u002e\u0030\u0030\u0030");case "\u0041\u004d\u002fP\u004d":_cg =_efd .AppendFormat (_cg ,"\u0050\u004d");case "\u005b\u0068\u005d":_cg =_g .AppendInt (_cg ,int64 (_fag *24),10);
case "\u005b\u006d\u005d":_cg =_g .AppendInt (_cg ,int64 (_fag *24*60),10);case "\u005b\u0073\u005d":_cg =_g .AppendInt (_cg ,int64 (_fag *24*60*60),10);case "":default:_gf .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_gga );
};if _gae [_cbg ]==':'{_cg =append (_cg ,':');};};return _cg ;};func IsNumber (data string )(_bge bool ){_dcc ,_cebf ,_ccga :=0,0,len (data );_afg :=len (data );_gag ,_bda ,_gaad :=0,0,0;_ =_bda ;_ =_gaad ;_ =_gag ;{_dcc =_fgdc ;_gag =0;_bda =0;_gaad =0;
};{if _cebf ==_ccga {goto _ffba ;};switch _dcc {case 0:goto _cab ;case 1:goto _cga ;case 2:goto _afd ;case 3:goto _gaaf ;case 4:goto _edb ;case 5:goto _cgg ;case 6:goto _cgf ;case 7:goto _ddeb ;};goto _fdcf ;_ceg :_bda =_cebf ;_cebf --;{_bge =false ;};
goto _acaa ;_fbaf :_bda =_cebf ;_cebf --;{_bge =_bda ==len (data );};goto _acaa ;_afa :_bda =_cebf ;_cebf --;{_bge =_bda ==len (data );};goto _acaa ;_cgd :switch _gaad {case 2:{_cebf =(_bda )-1;_bge =_bda ==len (data );};case 3:{_cebf =(_bda )-1;_bge =false ;
};};goto _acaa ;_acaa :_gag =0;if _cebf ++;_cebf ==_ccga {goto _bab ;};_cab :_gag =_cebf ;switch data [_cebf ]{case 43:goto _bgeb ;case 45:goto _bgeb ;};if 48<=data [_cebf ]&&data [_cebf ]<=57{goto _eg ;};goto _fdd ;_fdd :if _cebf ++;_cebf ==_ccga {goto _bbb ;
};_cga :goto _fdd ;_bgeb :if _cebf ++;_cebf ==_ccga {goto _gfa ;};_afd :if 48<=data [_cebf ]&&data [_cebf ]<=57{goto _eg ;};goto _fdd ;_eg :if _cebf ++;_cebf ==_ccga {goto _fdab ;};_gaaf :if data [_cebf ]==46{goto _gff ;};if 48<=data [_cebf ]&&data [_cebf ]<=57{goto _eg ;
};goto _fdd ;_gff :if _cebf ++;_cebf ==_ccga {goto _aga ;};_edb :if 48<=data [_cebf ]&&data [_cebf ]<=57{goto _gba ;};goto _fdd ;_gba :if _cebf ++;_cebf ==_ccga {goto _fdaa ;};_cgg :if data [_cebf ]==69{goto _cfg ;};if 48<=data [_cebf ]&&data [_cebf ]<=57{goto _gba ;
};goto _fdd ;_cfg :if _cebf ++;_cebf ==_ccga {goto _egf ;};_cgf :switch data [_cebf ]{case 43:goto _ffdf ;case 45:goto _ffdf ;};goto _fdd ;_ffdf :_bda =_cebf +1;_gaad =3;goto _ega ;_gcd :_bda =_cebf +1;_gaad =2;goto _ega ;_ega :if _cebf ++;_cebf ==_ccga {goto _dfgc ;
};_ddeb :if 48<=data [_cebf ]&&data [_cebf ]<=57{goto _gcd ;};goto _fdd ;_fdcf :_bab :_dcc =0;goto _ffba ;_bbb :_dcc =1;goto _ffba ;_gfa :_dcc =2;goto _ffba ;_fdab :_dcc =3;goto _ffba ;_aga :_dcc =4;goto _ffba ;_fdaa :_dcc =5;goto _ffba ;_egf :_dcc =6;
goto _ffba ;_dfgc :_dcc =7;goto _ffba ;_ffba :{};if _cebf ==_afg {switch _dcc {case 1:goto _ceg ;case 2:goto _ceg ;case 3:goto _fbaf ;case 4:goto _ceg ;case 5:goto _afa ;case 6:goto _ceg ;case 7:goto _cgd ;};};};if _dcc ==_ggcg {return false ;};return ;
};const _fb ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";
const _fcb int =0;func _ddc (_bae float64 )string {_bgg :=_g .FormatFloat (_bae ,'E',-1,64);_fba :=_g .FormatFloat (_bae ,'E',5,64);if len (_bgg )< len (_fba ){return _g .FormatFloat (_bae ,'E',2,64);};return _fba ;};func Parse (s string )[]Format {_ddcb :=Lexer {};
_ddcb .Lex (_b .NewReader (s ));_ddcb ._gdf =append (_ddcb ._gdf ,_ddcb ._fbe );return _ddcb ._gdf ;};func _fec (_dfd []byte )[]byte {_acgb :=len (_dfd );_edg :=false ;_aab :=false ;for _cba :=len (_dfd )-1;_cba >=0;_cba --{if _dfd [_cba ]=='0'&&!_aab &&!_edg {_acgb =_cba ;
}else if _dfd [_cba ]=='.'{_edg =true ;}else {_aab =true ;};};if _edg &&_aab {if _dfd [_acgb -1]=='.'{_acgb --;};return _dfd [0:_acgb ];};return _dfd ;};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_gd :=Parse (f );if len (_gd )==1{return _de (v ,_gd [0],false );}else if len (_gd )> 1&&v < 0{return _de (v ,_gd [1],true );
}else if len (_gd )> 2&&v ==0{return _de (v ,_gd [2],false );};return _de (v ,_gd [0],false );};

// AddToken adds a format token to the format.
func (_ga *Format )AddToken (t FmtType ,l []byte ){if _ga ._ffd {_ga ._ffd =false ;return ;};switch t {case FmtTypeDecimal :_ga ._e =true ;case FmtTypeUnderscore :_ga ._ffd =true ;case FmtTypeText :_ga .Whole =append (_ga .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_ga .Whole =append (_ga .Whole ,Token {Type :t ,DateTime :string (l )});
case FmtTypePercent :_ga ._gbg =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_ccg :=range l {if _ga .IsExponential {_ga .Exponent =append (_ga .Exponent ,Token {Type :t ,Literal :_ccg });
}else if !_ga ._e {_ga .Whole =append (_ga .Whole ,Token {Type :t ,Literal :_ccg });}else {_ga .Fractional =append (_ga .Fractional ,Token {Type :t ,Literal :_ccg });};};case FmtTypeDigitOptThousands :_ga ._fd =true ;case FmtTypeFraction :_cd :=_b .Split (string (l ),"\u002f");
if len (_cd )==2{_ga ._dd =true ;_ga ._df ,_ =_g .ParseInt (_cd [1],10,64);for _ ,_ac :=range _cd [1]{if _ac =='?'||_ac =='0'{_ga ._ccb ++;};};};default:_gf .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );
};};func _dc (_ccgg ,_aa float64 ,_dce Format )[]byte {if len (_dce .Whole )==0{return nil ;};_fadc :=_cc .Date (1899,12,30,0,0,0,0,_cc .UTC );_cca :=_fadc .Add (_cc .Duration (_aa *float64 (24*_cc .Hour )));_cca =_bbd (_cca );_aca :=_g .AppendFloat (nil ,_ccgg ,'f',-1,64);
_fe :=make ([]byte ,0,len (_aca ));_bgd :=0;_ade :=1;_ab :for _dcf :=len (_dce .Whole )-1;_dcf >=0;_dcf --{_cec :=len (_aca )-1-_bgd ;_dae :=_dce .Whole [_dcf ];switch _dae .Type {case FmtTypeDigit :if _cec >=0{_fe =append (_fe ,_aca [_cec ]);_bgd ++;_ade =_dcf ;
}else {_fe =append (_fe ,'0');};case FmtTypeDigitOpt :if _cec >=0{_fe =append (_fe ,_aca [_cec ]);_bgd ++;_ade =_dcf ;}else {for _cf :=_dcf ;_cf >=0;_cf --{_cda :=_dce .Whole [_cf ];if _cda .Type ==FmtTypeLiteral {_fe =append (_fe ,_cda .Literal );};};
break _ab ;};case FmtTypeDollar :for _eed :=_bgd ;_eed < len (_aca );_eed ++{_fe =append (_fe ,_aca [len (_aca )-1-_eed ]);_bgd ++;};_fe =append (_fe ,'$');case FmtTypeComma :if !_dce ._fd {_fe =append (_fe ,',');};case FmtTypeLiteral :_fe =append (_fe ,_dae .Literal );
case FmtTypeDate :_fe =append (_fe ,_gfd (_cfc (_cca ,_dae .DateTime ))...);case FmtTypeTime :_fe =append (_fe ,_gfd (_bb (_cca ,_aa ,_dae .DateTime ))...);default:_gf .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_dae );
};};_bce :=_gfd (_fe );if _bgd < len (_aca )&&(_bgd !=0||_dce ._e ){_aeg :=len (_aca )-_bgd ;_dfc :=make ([]byte ,len (_bce )+_aeg );copy (_dfc ,_bce [0:_ade ]);copy (_dfc [_ade :],_aca [0:]);copy (_dfc [_ade +_aeg :],_bce [_ade :]);_bce =_dfc ;};if _dce ._fd {_ccag :=_f .Buffer {};
_bcf :=0;for _eba :=len (_bce )-1;_eba >=0;_eba --{if !(_bce [_eba ]>='0'&&_bce [_eba ]<='9'){_bcf ++;}else {break ;};};for _gac :=0;_gac < len (_bce );_gac ++{_fab :=(len (_bce )-_gac -_bcf );if _fab %3==0&&_fab !=0&&_gac !=0{_ccag .WriteByte (',');};
_ccag .WriteByte (_bce [_gac ]);};_bce =_ccag .Bytes ();};return _bce ;};func _ceb (_cae []byte )[]byte {for _ddb :=len (_cae )-1;_ddb > 0;_ddb --{if _cae [_ddb ]=='9'+1{_cae [_ddb ]='0';if _cae [_ddb -1]=='.'{_ddb --;};_cae [_ddb -1]++;};};if _cae [0]=='9'+1{_cae [0]='0';
copy (_cae [1:],_cae [0:]);_cae [0]='1';};return _cae ;};func (_gcdb *Lexer )nextFmt (){_gcdb ._gdf =append (_gcdb ._gdf ,_gcdb ._fbe );_gcdb ._fbe =Format {}};const _ggc int =0;func (_gee *Lexer )Lex (r _d .Reader ){_ddda ,_bdae ,_fbd :=0,0,0;_dg :=-1;
_gfdb ,_cebc ,_abe :=0,0,0;_ =_cebc ;_ =_abe ;_adcg :=1;_ =_adcg ;_dbg :=make ([]byte ,4096);_cecge :=false ;for !_cecge {_fdce :=0;if _gfdb > 0{_fdce =_bdae -_gfdb ;};_bdae =0;_geee ,_faeb :=r .Read (_dbg [_fdce :]);if _geee ==0||_faeb !=nil {_cecge =true ;
};_fbd =_geee +_fdce ;if _fbd < len (_dbg ){_dg =_fbd ;};{_ddda =_fgg ;_gfdb =0;_cebc =0;_abe =0;};{if _bdae ==_fbd {goto _bbee ;};switch _ddda {case 34:goto _egac ;case 35:goto _dga ;case 0:goto _gdb ;case 36:goto _ccf ;case 37:goto _ceaf ;case 1:goto _gffg ;
case 2:goto _dagf ;case 38:goto _fbed ;case 3:goto _dec ;case 4:goto _ccee ;case 39:goto _adeg ;case 5:goto _def ;case 6:goto _faf ;case 7:goto _gdc ;case 8:goto _edgb ;case 40:goto _gad ;case 9:goto _dgb ;case 41:goto _cad ;case 10:goto _aae ;case 42:goto _bee ;
case 11:goto _dfb ;case 43:goto _beg ;case 44:goto _dgc ;case 45:goto _agg ;case 12:goto _bcc ;case 46:goto _gfc ;case 13:goto _afgb ;case 14:goto _ffdff ;case 15:goto _caae ;case 16:goto _bgea ;case 47:goto _caag ;case 17:goto _gce ;case 48:goto _acad ;
case 18:goto _fbdb ;case 19:goto _fbf ;case 20:goto _eac ;case 49:goto _dgbd ;case 50:goto _dfde ;case 21:goto _gge ;case 22:goto _eede ;case 23:goto _aeed ;case 24:goto _eda ;case 25:goto _ffce ;case 51:goto _gbgc ;case 26:goto _fga ;case 52:goto _efb ;
case 53:goto _ffa ;case 54:goto _bgf ;case 55:goto _bec ;case 56:goto _dfab ;case 57:goto _fea ;case 27:goto _ceff ;case 28:goto _fcbc ;case 29:goto _dcbf ;case 30:goto _ebgb ;case 31:goto _acce ;case 58:goto _dab ;case 32:goto _dfe ;case 59:goto _gbaf ;
case 33:goto _bea ;case 60:goto _dgcc ;case 61:goto _aegb ;case 62:goto _gdcb ;};goto _gbfg ;_gcc :switch _abe {case 2:{_bdae =(_cebc )-1;_gee ._fbe .AddToken (FmtTypeDigit ,nil );};case 3:{_bdae =(_cebc )-1;_gee ._fbe .AddToken (FmtTypeDigitOpt ,nil );
};case 5:{_bdae =(_cebc )-1;};case 8:{_bdae =(_cebc )-1;_gee ._fbe .AddToken (FmtTypePercent ,nil );};case 13:{_bdae =(_cebc )-1;_gee ._fbe .AddToken (FmtTypeFraction ,_dbg [_gfdb :_cebc ]);};case 14:{_bdae =(_cebc )-1;_gee ._fbe .AddToken (FmtTypeDate ,_dbg [_gfdb :_cebc ]);
};case 15:{_bdae =(_cebc )-1;_gee ._fbe .AddToken (FmtTypeTime ,_dbg [_gfdb :_cebc ]);};case 16:{_bdae =(_cebc )-1;_gee ._fbe .AddToken (FmtTypeTime ,_dbg [_gfdb :_cebc ]);};case 18:{_bdae =(_cebc )-1;};case 20:{_bdae =(_cebc )-1;_gee ._fbe .AddToken (FmtTypeLiteral ,_dbg [_gfdb :_cebc ]);
};case 21:{_bdae =(_cebc )-1;_gee ._fbe .AddToken (FmtTypeLiteral ,_dbg [_gfdb +1:_cebc -1]);};};goto _aea ;_ccc :_bdae =(_cebc )-1;{_gee ._fbe .AddToken (FmtTypeFraction ,_dbg [_gfdb :_cebc ]);};goto _aea ;_agd :_bdae =(_cebc )-1;{_gee ._fbe .AddToken (FmtTypeDigitOpt ,nil );
};goto _aea ;_cdg :_cebc =_bdae +1;{_gee ._fbe .AddToken (FmtTypeDigitOptThousands ,nil );};goto _aea ;_dege :_bdae =(_cebc )-1;{_gee ._fbe .AddToken (FmtTypePercent ,nil );};goto _aea ;_fca :_bdae =(_cebc )-1;{_gee ._fbe .AddToken (FmtTypeDate ,_dbg [_gfdb :_cebc ]);
};goto _aea ;_ede :_bdae =(_cebc )-1;{_gee ._fbe .AddToken (FmtTypeDigit ,nil );};goto _aea ;_bfe :_bdae =(_cebc )-1;{_gee ._fbe .AddToken (FmtTypeTime ,_dbg [_gfdb :_cebc ]);};goto _aea ;_ggf :_bdae =(_cebc )-1;{_gee ._fbe .AddToken (FmtTypeLiteral ,_dbg [_gfdb :_cebc ]);
};goto _aea ;_eaed :_cebc =_bdae +1;{_gee ._fbe ._bg =true ;};goto _aea ;_aec :_cebc =_bdae +1;{_gee ._fbe .AddToken (FmtTypeLiteral ,_dbg [_gfdb :_cebc ]);};goto _aea ;_dca :_cebc =_bdae +1;{_gee ._fbe .AddToken (FmtTypeDollar ,nil );};goto _aea ;_eee :_cebc =_bdae +1;
{_gee ._fbe .AddToken (FmtTypeComma ,nil );};goto _aea ;_fcf :_cebc =_bdae +1;{_gee ._fbe .AddToken (FmtTypeDecimal ,nil );};goto _aea ;_ggda :_cebc =_bdae +1;{_gee .nextFmt ();};goto _aea ;_cefe :_cebc =_bdae +1;{_gee ._fbe .AddToken (FmtTypeText ,nil );
};goto _aea ;_gbgf :_cebc =_bdae +1;{_gee ._fbe .AddToken (FmtTypeUnderscore ,nil );};goto _aea ;_dddb :_cebc =_bdae ;_bdae --;{_gee ._fbe .AddToken (FmtTypeLiteral ,_dbg [_gfdb :_cebc ]);};goto _aea ;_ddba :_cebc =_bdae ;_bdae --;{_gee ._fbe .AddToken (FmtTypeLiteral ,_dbg [_gfdb +1:_cebc -1]);
};goto _aea ;_dag :_cebc =_bdae ;_bdae --;{_gee ._fbe .AddToken (FmtTypeDigitOpt ,nil );};goto _aea ;_ebd :_cebc =_bdae ;_bdae --;{_gee ._fbe .AddToken (FmtTypeFraction ,_dbg [_gfdb :_cebc ]);};goto _aea ;_bbbg :_cebc =_bdae ;_bdae --;{_gee ._fbe .AddToken (FmtTypePercent ,nil );
};goto _aea ;_gdg :_cebc =_bdae ;_bdae --;{_gee ._fbe .AddToken (FmtTypeDate ,_dbg [_gfdb :_cebc ]);};goto _aea ;_cegg :_cebc =_bdae ;_bdae --;{_gee ._fbe .AddToken (FmtTypeDigit ,nil );};goto _aea ;_bbg :_cebc =_bdae ;_bdae --;{_gee ._fbe .AddToken (FmtTypeTime ,_dbg [_gfdb :_cebc ]);
};goto _aea ;_aegca :_cebc =_bdae ;_bdae --;{};goto _aea ;_abd :_cebc =_bdae +1;{_gee ._fbe .IsExponential =true ;};goto _aea ;_ddcf :_cebc =_bdae +1;{_gee ._fbe .AddToken (FmtTypeLiteral ,_dbg [_gfdb +1:_cebc ]);};goto _aea ;_aea :_gfdb =0;if _bdae ++;
_bdae ==_fbd {goto _ebdb ;};_egac :_gfdb =_bdae ;switch _dbg [_bdae ]{case 34:goto _efc ;case 35:goto _fdf ;case 36:goto _dca ;case 37:goto _dge ;case 44:goto _eee ;case 46:goto _fcf ;case 47:goto _ffc ;case 48:goto _ebf ;case 58:goto _aaf ;case 59:goto _ggda ;
case 63:goto _ggg ;case 64:goto _cefe ;case 65:goto _abc ;case 69:goto _fdff ;case 71:goto _dcae ;case 91:goto _feb ;case 92:goto _gfac ;case 95:goto _gbgf ;case 100:goto _ffc ;case 104:goto _aaf ;case 109:goto _gdba ;case 115:goto _bbf ;case 121:goto _aaed ;
};if 49<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _gfce ;};goto _aec ;_efc :_cebc =_bdae +1;_abe =20;goto _ddf ;_ddf :if _bdae ++;_bdae ==_fbd {goto _afba ;};_dga :if _dbg [_bdae ]==34{goto _gdfg ;};goto _dfa ;_dfa :if _bdae ++;_bdae ==_fbd {goto _gaf ;};
_gdb :if _dbg [_bdae ]==34{goto _gdfg ;};goto _dfa ;_gdfg :_cebc =_bdae +1;_abe =21;goto _gbe ;_gbe :if _bdae ++;_bdae ==_fbd {goto _abb ;};_ccf :if _dbg [_bdae ]==34{goto _dfa ;};goto _ddba ;_fdf :_cebc =_bdae +1;_abe =3;goto _cce ;_cce :if _bdae ++;_bdae ==_fbd {goto _bga ;
};_ceaf :switch _dbg [_bdae ]{case 35:goto _gabc ;case 37:goto _gabc ;case 44:goto _gbfe ;case 47:goto _edd ;case 48:goto _gabc ;case 63:goto _gabc ;};goto _dag ;_gabc :if _bdae ++;_bdae ==_fbd {goto _dgd ;};_gffg :switch _dbg [_bdae ]{case 35:goto _gabc ;
case 37:goto _gabc ;case 47:goto _edd ;case 48:goto _gabc ;case 63:goto _gabc ;};goto _gcc ;_edd :if _bdae ++;_bdae ==_fbd {goto _babb ;};_dagf :switch _dbg [_bdae ]{case 35:goto _bcef ;case 37:goto _ecd ;case 48:goto _bfd ;case 63:goto _bcef ;};if 49<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _eaa ;
};goto _gcc ;_bcef :_cebc =_bdae +1;goto _dfgb ;_dfgb :if _bdae ++;_bdae ==_fbd {goto _dcbe ;};_fbed :switch _dbg [_bdae ]{case 35:goto _bcef ;case 37:goto _bcef ;case 44:goto _bcef ;case 46:goto _bcef ;case 48:goto _bcef ;case 63:goto _bcef ;case 65:goto _cbfd ;
};goto _ebd ;_cbfd :if _bdae ++;_bdae ==_fbd {goto _debd ;};_dec :switch _dbg [_bdae ]{case 47:goto _bcfc ;case 77:goto _dbge ;};goto _ccc ;_bcfc :if _bdae ++;_bdae ==_fbd {goto _afga ;};_ccee :if _dbg [_bdae ]==80{goto _abg ;};goto _ccc ;_abg :_cebc =_bdae +1;
goto _gfb ;_gfb :if _bdae ++;_bdae ==_fbd {goto _cde ;};_adeg :if _dbg [_bdae ]==65{goto _cbfd ;};goto _ebd ;_dbge :if _bdae ++;_bdae ==_fbd {goto _bcd ;};_def :if _dbg [_bdae ]==47{goto _gea ;};goto _ccc ;_gea :if _bdae ++;_bdae ==_fbd {goto _dagb ;};
_faf :if _dbg [_bdae ]==80{goto _eec ;};goto _ccc ;_eec :if _bdae ++;_bdae ==_fbd {goto _bead ;};_gdc :if _dbg [_bdae ]==77{goto _abg ;};goto _ccc ;_ecd :if _bdae ++;_bdae ==_fbd {goto _gbfa ;};_edgb :switch _dbg [_bdae ]{case 35:goto _aba ;case 37:goto _bff ;
case 63:goto _aba ;};if 48<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _gcb ;};goto _gcc ;_aba :_cebc =_bdae +1;goto _acaad ;_acaad :if _bdae ++;_bdae ==_fbd {goto _egc ;};_gad :switch _dbg [_bdae ]{case 35:goto _bcef ;case 37:goto _gdfgd ;case 44:goto _bcef ;
case 46:goto _bcef ;case 48:goto _bcef ;case 63:goto _bcef ;case 65:goto _cbfd ;};goto _ebd ;_gdfgd :if _bdae ++;_bdae ==_fbd {goto _gdfa ;};_dgb :switch _dbg [_bdae ]{case 35:goto _fbg ;case 44:goto _fbg ;case 46:goto _fbg ;case 48:goto _fbg ;case 63:goto _fbg ;
};goto _ccc ;_fbg :_cebc =_bdae +1;goto _efa ;_efa :if _bdae ++;_bdae ==_fbd {goto _afc ;};_cad :switch _dbg [_bdae ]{case 35:goto _fbg ;case 44:goto _fbg ;case 46:goto _fbg ;case 48:goto _fbg ;case 63:goto _fbg ;case 65:goto _cbfd ;};goto _ebd ;_bff :if _bdae ++;
_bdae ==_fbd {goto _ccbf ;};_aae :if _dbg [_bdae ]==37{goto _bff ;};if 48<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _gcb ;};goto _gcc ;_gcb :_cebc =_bdae +1;_abe =13;goto _afb ;_afb :if _bdae ++;_bdae ==_fbd {goto _dceca ;};_bee :switch _dbg [_bdae ]{case 35:goto _bcef ;
case 37:goto _cge ;case 44:goto _bcef ;case 46:goto _bcef ;case 48:goto _bgde ;case 63:goto _bcef ;case 65:goto _cbfd ;};if 49<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _gcb ;};goto _ebd ;_cge :if _bdae ++;_bdae ==_fbd {goto _dbbc ;};_dfb :switch _dbg [_bdae ]{case 35:goto _fbg ;
case 37:goto _bff ;case 44:goto _fbg ;case 46:goto _fbg ;case 63:goto _fbg ;};if 48<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _gcb ;};goto _ccc ;_bgde :_cebc =_bdae +1;goto _bcg ;_bcg :if _bdae ++;_bdae ==_fbd {goto _egg ;};_beg :switch _dbg [_bdae ]{case 35:goto _bcef ;
case 37:goto _bgde ;case 44:goto _bcef ;case 46:goto _bcef ;case 48:goto _bgde ;case 63:goto _bcef ;case 65:goto _cbfd ;};if 49<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _gcb ;};goto _ebd ;_bfd :_cebc =_bdae +1;goto _edf ;_edf :if _bdae ++;_bdae ==_fbd {goto _aegg ;
};_dgc :switch _dbg [_bdae ]{case 35:goto _bcef ;case 37:goto _bgde ;case 44:goto _bcef ;case 46:goto _bcef ;case 48:goto _bfd ;case 63:goto _bcef ;case 65:goto _cbfd ;};if 49<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _eaa ;};goto _ebd ;_eaa :_cebc =_bdae +1;
goto _beee ;_beee :if _bdae ++;_bdae ==_fbd {goto _fdg ;};_agg :switch _dbg [_bdae ]{case 35:goto _bcef ;case 37:goto _gcb ;case 44:goto _bcef ;case 46:goto _bcef ;case 48:goto _bfd ;case 63:goto _bcef ;case 65:goto _cbfd ;};if 49<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _eaa ;
};goto _ebd ;_gbfe :if _bdae ++;_bdae ==_fbd {goto _fagf ;};_bcc :if _dbg [_bdae ]==35{goto _cdg ;};goto _agd ;_dge :_cebc =_bdae +1;_abe =8;goto _dcec ;_dcec :if _bdae ++;_bdae ==_fbd {goto _cdaf ;};_gfc :switch _dbg [_bdae ]{case 35:goto _acc ;case 37:goto _ddeg ;
case 48:goto _geb ;case 63:goto _acc ;};if 49<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _ccbd ;};goto _bbbg ;_acc :if _bdae ++;_bdae ==_fbd {goto _cff ;};_afgb :switch _dbg [_bdae ]{case 35:goto _acc ;case 47:goto _edd ;case 48:goto _acc ;case 63:goto _acc ;
};goto _dege ;_ddeg :if _bdae ++;_bdae ==_fbd {goto _dgee ;};_ffdff :if _dbg [_bdae ]==37{goto _ddeg ;};if 48<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _ccbd ;};goto _gcc ;_ccbd :if _bdae ++;_bdae ==_fbd {goto _acade ;};_caae :switch _dbg [_bdae ]{case 37:goto _ddeg ;
case 47:goto _edd ;};if 48<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _ccbd ;};goto _gcc ;_geb :if _bdae ++;_bdae ==_fbd {goto _afab ;};_bgea :switch _dbg [_bdae ]{case 35:goto _acc ;case 37:goto _ddeg ;case 47:goto _edd ;case 48:goto _geb ;case 63:goto _acc ;
};if 49<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _ccbd ;};goto _dege ;_ffc :_cebc =_bdae +1;goto _agf ;_agf :if _bdae ++;_bdae ==_fbd {goto _cfe ;};_caag :switch _dbg [_bdae ]{case 47:goto _ffc ;case 100:goto _ffc ;case 109:goto _ffc ;case 121:goto _fafb ;
};goto _gdg ;_fafb :if _bdae ++;_bdae ==_fbd {goto _eccg ;};_gce :if _dbg [_bdae ]==121{goto _ffc ;};goto _fca ;_ebf :_cebc =_bdae +1;_abe =2;goto _ggag ;_ggag :if _bdae ++;_bdae ==_fbd {goto _fbb ;};_acad :switch _dbg [_bdae ]{case 35:goto _gabc ;case 37:goto _acd ;
case 47:goto _edd ;case 48:goto _afe ;case 63:goto _gabc ;};if 49<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _ggfg ;};goto _cegg ;_acd :if _bdae ++;_bdae ==_fbd {goto _abcc ;};_fbdb :switch _dbg [_bdae ]{case 35:goto _gabc ;case 37:goto _acd ;case 47:goto _edd ;
case 48:goto _acd ;case 63:goto _gabc ;};if 49<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _ccbd ;};goto _ede ;_afe :if _bdae ++;_bdae ==_fbd {goto _fgf ;};_fbf :switch _dbg [_bdae ]{case 35:goto _gabc ;case 37:goto _acd ;case 47:goto _edd ;case 48:goto _afe ;
case 63:goto _gabc ;};if 49<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _ggfg ;};goto _ede ;_ggfg :if _bdae ++;_bdae ==_fbd {goto _aeegd ;};_eac :switch _dbg [_bdae ]{case 37:goto _ccbd ;case 47:goto _edd ;};if 48<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _ggfg ;
};goto _gcc ;_gfce :_cebc =_bdae +1;_abe =20;goto _fge ;_fge :if _bdae ++;_bdae ==_fbd {goto _egag ;};_dgbd :switch _dbg [_bdae ]{case 37:goto _ccbd ;case 47:goto _edd ;};if 48<=_dbg [_bdae ]&&_dbg [_bdae ]<=57{goto _ggfg ;};goto _dddb ;_aaf :_cebc =_bdae +1;
_abe =15;goto _abdc ;_abdc :if _bdae ++;_bdae ==_fbd {goto _bgeg ;};_dfde :switch _dbg [_bdae ]{case 58:goto _aaf ;case 65:goto _dfbc ;case 104:goto _aaf ;case 109:goto _aaf ;case 115:goto _bbf ;};goto _bbg ;_dfbc :if _bdae ++;_bdae ==_fbd {goto _bgb ;
};_gge :switch _dbg [_bdae ]{case 47:goto _ccd ;case 77:goto _ecc ;};goto _gcc ;_ccd :if _bdae ++;_bdae ==_fbd {goto _gbd ;};_eede :if _dbg [_bdae ]==80{goto _aaf ;};goto _gcc ;_ecc :if _bdae ++;_bdae ==_fbd {goto _ggb ;};_aeed :if _dbg [_bdae ]==47{goto _ebbd ;
};goto _gcc ;_ebbd :if _bdae ++;_bdae ==_fbd {goto _fbba ;};_eda :if _dbg [_bdae ]==80{goto _afbb ;};goto _gcc ;_afbb :if _bdae ++;_bdae ==_fbd {goto _ggfa ;};_ffce :if _dbg [_bdae ]==77{goto _aaf ;};goto _gcc ;_bbf :_cebc =_bdae +1;_abe =15;goto _bbe ;
_bbe :if _bdae ++;_bdae ==_fbd {goto _ffg ;};_gbgc :switch _dbg [_bdae ]{case 46:goto _bbeb ;case 58:goto _aaf ;case 65:goto _dfbc ;case 104:goto _aaf ;case 109:goto _aaf ;case 115:goto _bbf ;};goto _bbg ;_bbeb :if _bdae ++;_bdae ==_fbd {goto _dccc ;};
_fga :if _dbg [_bdae ]==48{goto _deb ;};goto _bfe ;_deb :_cebc =_bdae +1;_abe =15;goto _aecb ;_aecb :if _bdae ++;_bdae ==_fbd {goto _debdg ;};_efb :switch _dbg [_bdae ]{case 48:goto _agc ;case 58:goto _aaf ;case 65:goto _dfbc ;case 104:goto _aaf ;case 109:goto _aaf ;
case 115:goto _bbf ;};goto _bbg ;_agc :_cebc =_bdae +1;_abe =15;goto _ccef ;_ccef :if _bdae ++;_bdae ==_fbd {goto _afde ;};_ffa :switch _dbg [_bdae ]{case 48:goto _aaf ;case 58:goto _aaf ;case 65:goto _dfbc ;case 104:goto _aaf ;case 109:goto _aaf ;case 115:goto _bbf ;
};goto _bbg ;_ggg :_cebc =_bdae +1;_abe =5;goto _babg ;_babg :if _bdae ++;_bdae ==_fbd {goto _gbag ;};_bgf :switch _dbg [_bdae ]{case 35:goto _gabc ;case 37:goto _gabc ;case 47:goto _edd ;case 48:goto _gabc ;case 63:goto _gabc ;};goto _aegca ;_abc :_cebc =_bdae +1;
_abe =20;goto _ada ;_ada :if _bdae ++;_bdae ==_fbd {goto _abac ;};_bec :switch _dbg [_bdae ]{case 47:goto _ccd ;case 77:goto _ecc ;};goto _dddb ;_fdff :if _bdae ++;_bdae ==_fbd {goto _fcc ;};_dfab :switch _dbg [_bdae ]{case 43:goto _abd ;case 45:goto _abd ;
};goto _dddb ;_dcae :_cebc =_bdae +1;goto _dbb ;_dbb :if _bdae ++;_bdae ==_fbd {goto _gbgfd ;};_fea :if _dbg [_bdae ]==101{goto _fdb ;};goto _dddb ;_fdb :if _bdae ++;_bdae ==_fbd {goto _cfa ;};_ceff :if _dbg [_bdae ]==110{goto _faeg ;};goto _ggf ;_faeg :if _bdae ++;
_bdae ==_fbd {goto _caaf ;};_fcbc :if _dbg [_bdae ]==101{goto _dgf ;};goto _ggf ;_dgf :if _bdae ++;_bdae ==_fbd {goto _gdbc ;};_dcbf :if _dbg [_bdae ]==114{goto _fgee ;};goto _ggf ;_fgee :if _bdae ++;_bdae ==_fbd {goto _gcf ;};_ebgb :if _dbg [_bdae ]==97{goto _egaf ;
};goto _ggf ;_egaf :if _bdae ++;_bdae ==_fbd {goto _gfbd ;};_acce :if _dbg [_bdae ]==108{goto _eaed ;};goto _ggf ;_feb :_cebc =_bdae +1;_abe =20;goto _dbac ;_dbac :if _bdae ++;_bdae ==_fbd {goto _bbfd ;};_dab :switch _dbg [_bdae ]{case 104:goto _dcecf ;
case 109:goto _dcecf ;case 115:goto _dcecf ;};goto _dcaf ;_dcaf :if _bdae ++;_bdae ==_fbd {goto _gccd ;};_dfe :if _dbg [_bdae ]==93{goto _egaa ;};goto _dcaf ;_egaa :_cebc =_bdae +1;_abe =18;goto _eecf ;_bgga :_cebc =_bdae +1;_abe =16;goto _eecf ;_eecf :if _bdae ++;
_bdae ==_fbd {goto _fcff ;};_gbaf :if _dbg [_bdae ]==93{goto _egaa ;};goto _dcaf ;_dcecf :if _bdae ++;_bdae ==_fbd {goto _debg ;};_bea :if _dbg [_bdae ]==93{goto _bgga ;};goto _dcaf ;_gfac :if _bdae ++;_bdae ==_fbd {goto _dfae ;};_dgcc :goto _ddcf ;_gdba :_cebc =_bdae +1;
_abe =14;goto _fac ;_fac :if _bdae ++;_bdae ==_fbd {goto _abgd ;};_aegb :switch _dbg [_bdae ]{case 47:goto _ffc ;case 58:goto _aaf ;case 65:goto _dfbc ;case 100:goto _ffc ;case 104:goto _aaf ;case 109:goto _gdba ;case 115:goto _bbf ;case 121:goto _fafb ;
};goto _gdg ;_aaed :if _bdae ++;_bdae ==_fbd {goto _cbe ;};_gdcb :if _dbg [_bdae ]==121{goto _ffc ;};goto _dddb ;_gbfg :_ebdb :_ddda =34;goto _bbee ;_afba :_ddda =35;goto _bbee ;_gaf :_ddda =0;goto _bbee ;_abb :_ddda =36;goto _bbee ;_bga :_ddda =37;goto _bbee ;
_dgd :_ddda =1;goto _bbee ;_babb :_ddda =2;goto _bbee ;_dcbe :_ddda =38;goto _bbee ;_debd :_ddda =3;goto _bbee ;_afga :_ddda =4;goto _bbee ;_cde :_ddda =39;goto _bbee ;_bcd :_ddda =5;goto _bbee ;_dagb :_ddda =6;goto _bbee ;_bead :_ddda =7;goto _bbee ;_gbfa :_ddda =8;
goto _bbee ;_egc :_ddda =40;goto _bbee ;_gdfa :_ddda =9;goto _bbee ;_afc :_ddda =41;goto _bbee ;_ccbf :_ddda =10;goto _bbee ;_dceca :_ddda =42;goto _bbee ;_dbbc :_ddda =11;goto _bbee ;_egg :_ddda =43;goto _bbee ;_aegg :_ddda =44;goto _bbee ;_fdg :_ddda =45;
goto _bbee ;_fagf :_ddda =12;goto _bbee ;_cdaf :_ddda =46;goto _bbee ;_cff :_ddda =13;goto _bbee ;_dgee :_ddda =14;goto _bbee ;_acade :_ddda =15;goto _bbee ;_afab :_ddda =16;goto _bbee ;_cfe :_ddda =47;goto _bbee ;_eccg :_ddda =17;goto _bbee ;_fbb :_ddda =48;
goto _bbee ;_abcc :_ddda =18;goto _bbee ;_fgf :_ddda =19;goto _bbee ;_aeegd :_ddda =20;goto _bbee ;_egag :_ddda =49;goto _bbee ;_bgeg :_ddda =50;goto _bbee ;_bgb :_ddda =21;goto _bbee ;_gbd :_ddda =22;goto _bbee ;_ggb :_ddda =23;goto _bbee ;_fbba :_ddda =24;
goto _bbee ;_ggfa :_ddda =25;goto _bbee ;_ffg :_ddda =51;goto _bbee ;_dccc :_ddda =26;goto _bbee ;_debdg :_ddda =52;goto _bbee ;_afde :_ddda =53;goto _bbee ;_gbag :_ddda =54;goto _bbee ;_abac :_ddda =55;goto _bbee ;_fcc :_ddda =56;goto _bbee ;_gbgfd :_ddda =57;
goto _bbee ;_cfa :_ddda =27;goto _bbee ;_caaf :_ddda =28;goto _bbee ;_gdbc :_ddda =29;goto _bbee ;_gcf :_ddda =30;goto _bbee ;_gfbd :_ddda =31;goto _bbee ;_bbfd :_ddda =58;goto _bbee ;_gccd :_ddda =32;goto _bbee ;_fcff :_ddda =59;goto _bbee ;_debg :_ddda =33;
goto _bbee ;_dfae :_ddda =60;goto _bbee ;_abgd :_ddda =61;goto _bbee ;_cbe :_ddda =62;goto _bbee ;_bbee :{};if _bdae ==_dg {switch _ddda {case 35:goto _dddb ;case 0:goto _gcc ;case 36:goto _ddba ;case 37:goto _dag ;case 1:goto _gcc ;case 2:goto _gcc ;case 38:goto _ebd ;
case 3:goto _ccc ;case 4:goto _ccc ;case 39:goto _ebd ;case 5:goto _ccc ;case 6:goto _ccc ;case 7:goto _ccc ;case 8:goto _gcc ;case 40:goto _ebd ;case 9:goto _ccc ;case 41:goto _ebd ;case 10:goto _gcc ;case 42:goto _ebd ;case 11:goto _ccc ;case 43:goto _ebd ;
case 44:goto _ebd ;case 45:goto _ebd ;case 12:goto _agd ;case 46:goto _bbbg ;case 13:goto _dege ;case 14:goto _gcc ;case 15:goto _gcc ;case 16:goto _dege ;case 47:goto _gdg ;case 17:goto _fca ;case 48:goto _cegg ;case 18:goto _ede ;case 19:goto _ede ;case 20:goto _gcc ;
case 49:goto _dddb ;case 50:goto _bbg ;case 21:goto _gcc ;case 22:goto _gcc ;case 23:goto _gcc ;case 24:goto _gcc ;case 25:goto _gcc ;case 51:goto _bbg ;case 26:goto _bfe ;case 52:goto _bbg ;case 53:goto _bbg ;case 54:goto _aegca ;case 55:goto _dddb ;case 56:goto _dddb ;
case 57:goto _dddb ;case 27:goto _ggf ;case 28:goto _ggf ;case 29:goto _ggf ;case 30:goto _ggf ;case 31:goto _ggf ;case 58:goto _dddb ;case 32:goto _gcc ;case 59:goto _gcc ;case 33:goto _ggf ;case 60:goto _dddb ;case 61:goto _gdg ;case 62:goto _dddb ;};
};};if _gfdb > 0{copy (_dbg [0:],_dbg [_gfdb :]);};};_ =_dg ;if _ddda ==_ggcg {_gf .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");};};func _fef (_baa ,_cbf float64 ,_fg Format )[]byte {if len (_fg .Fractional )==0{return nil ;
};_ebb :=_g .AppendFloat (nil ,_baa ,'f',-1,64);if len (_ebb )> 2{_ebb =_ebb [2:];}else {_ebb =nil ;};_db :=make ([]byte ,0,len (_ebb ));_db =append (_db ,'.');_gab :=0;_aeeg :for _bfc :=0;_bfc < len (_fg .Fractional );_bfc ++{_deg :=_bfc ;_fabe :=_fg .Fractional [_bfc ];
switch _fabe .Type {case FmtTypeDigit :if _deg < len (_ebb ){_db =append (_db ,_ebb [_deg ]);_gab ++;}else {_db =append (_db ,'0');};case FmtTypeDigitOpt :if _deg >=0{_db =append (_db ,_ebb [_deg ]);_gab ++;}else {break _aeeg ;};case FmtTypeLiteral :_db =append (_db ,_fabe .Literal );
default:_gf .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_fabe );};};return _db ;};

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _bf .Abs (v )>=_ce ||_bf .Abs (v )<=_ae &&v !=0{return _ddc (v );};_cecg :=make ([]byte ,0,15);_cecg =_g .AppendFloat (_cecg ,v ,'f',-1,64);if len (_cecg )> 11{_fgd :=_cecg [11]-'0';if _fgd >=5&&_fgd <=9{_cecg [10]++;
_cecg =_cecg [0:11];_cecg =_ceb (_cecg );};_cecg =_cecg [0:11];}else if len (_cecg )==11{if _cecg [len (_cecg )-1]=='9'{_cecg [len (_cecg )-1]++;_cecg =_ceb (_cecg );};};_cecg =_fec (_cecg );return string (_cecg );};

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_fda :=Parse (f );var _bd Format ;if len (_fda )==1{_bd =_fda [0];}else if len (_fda )==4{_bd =_fda [3];};_caa :=false ;for _ ,_ffb :=range _bd .Whole {if _ffb .Type ==FmtTypeText {_caa =true ;};};if !_caa {return v ;
};_ee :=_f .Buffer {};for _ ,_eb :=range _bd .Whole {switch _eb .Type {case FmtTypeLiteral :_ee .WriteByte (_eb .Literal );case FmtTypeText :_ee .WriteString (v );};};return _ee .String ();};func _bbd (_dbgb _cc .Time )_cc .Time {_dbgb =_dbgb .UTC ();return _cc .Date (_dbgb .Year (),_dbgb .Month (),_dbgb .Day (),_dbgb .Hour (),_dbgb .Minute (),_dbgb .Second (),_dbgb .Nanosecond (),_cc .Local );
};

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};func _de (_bfg float64 ,_ec Format ,_ace bool )string {if _ec ._bg {return NumberGeneric (_bfg );};_eea :=make ([]byte ,0,20);_ea :=_bf .Signbit (_bfg );_ba :=_bf .Abs (_bfg );_bed :=int64 (0);
_bc :=int64 (0);if _ec .IsExponential {for _ba >=10{_bc ++;_ba /=10;};for _ba < 1{_bc --;_ba *=10;};}else if _ec ._gbg {_ba *=100;}else if _ec ._dd {if _ec ._df ==0{_fa :=_bf .Pow (10,float64 (_ec ._ccb ));_gc ,_eae :=1.0,1.0;_ =_gc ;for _fad :=1.0;_fad < _fa ;
_fad ++{_ ,_ed :=_bf .Modf (_ba *float64 (_fad ));if _ed < _eae {_eae =_ed ;_gc =_fad ;if _ed ==0{break ;};};};_ec ._df =int64 (_gc );};_bed =int64 (_ba *float64 (_ec ._df )+0.5);if len (_ec .Whole )> 0&&_bed > _ec ._df {_bed =int64 (_ba *float64 (_ec ._df ))%_ec ._df ;
_ba -=float64 (_bed )/float64 (_ec ._df );}else {_ba -=float64 (_bed )/float64 (_ec ._df );if _bf .Abs (_ba )< 1{_cea :=true ;for _ ,_cb :=range _ec .Whole {if _cb .Type ==FmtTypeDigitOpt {continue ;};if _cb .Type ==FmtTypeLiteral &&_cb .Literal ==' '{continue ;
};_cea =false ;};if _cea {_ec .Whole =nil ;};};};};_eag :=1;for _ ,_gbf :=range _ec .Fractional {if _gbf .Type ==FmtTypeDigit ||_gbf .Type ==FmtTypeDigitOpt {_eag ++;};};_ba +=5*_bf .Pow10 (-_eag );_fdc ,_eaef :=_bf .Modf (_ba );_eea =append (_eea ,_dc (_fdc ,_bfg ,_ec )...);
_eea =append (_eea ,_fef (_eaef ,_bfg ,_ec )...);_eea =append (_eea ,_aegc (_bc ,_ec )...);if _ec ._dd {_eea =_g .AppendInt (_eea ,_bed ,10);_eea =append (_eea ,'/');_eea =_g .AppendInt (_eea ,_ec ._df ,10);};if !_ace &&_ea {return "\u002d"+string (_eea );
};return string (_eea );};const _ce =1e11;func (_gb FmtType )String ()string {if _gb >=FmtType (len (_ff )-1){return _a .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_gb );};return _fb [_ff [_gb ]:_ff [_gb +1]];};const _acge int =34;
type Lexer struct{_fbe Format ;_gdf []Format ;};const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;
FmtTypeText ;);func _adc (_ccad int64 )int64 {if _ccad < 0{return -_ccad ;};return _ccad ;};

// FmtType is the type of a format token.
//
//go:generate stringer -type=FmtType
type FmtType byte ;func _aegc (_cef int64 ,_beb Format )[]byte {if !_beb .IsExponential ||len (_beb .Exponent )==0{return nil ;};_af :=_g .AppendInt (nil ,_adc (_cef ),10);_ge :=make ([]byte ,0,len (_af )+2);_ge =append (_ge ,'E');if _cef >=0{_ge =append (_ge ,'+');
}else {_ge =append (_ge ,'-');_cef *=-1;};_aaa :=0;_ef :for _dba :=len (_beb .Exponent )-1;_dba >=0;_dba --{_cdd :=len (_af )-1-_aaa ;_ggd :=_beb .Exponent [_dba ];switch _ggd .Type {case FmtTypeDigit :if _cdd >=0{_ge =append (_ge ,_af [_cdd ]);_aaa ++;
}else {_ge =append (_ge ,'0');};case FmtTypeDigitOpt :if _cdd >=0{_ge =append (_ge ,_af [_cdd ]);_aaa ++;}else {for _fcd :=_dba ;_fcd >=0;_fcd --{_fae :=_beb .Exponent [_fcd ];if _fae .Type ==FmtTypeLiteral {_ge =append (_ge ,_fae .Literal );};};break _ef ;
};case FmtTypeLiteral :_ge =append (_ge ,_ggd .Literal );default:_gf .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_ggd );};};if _aaa < len (_af ){_ge =append (_ge ,_af [len (_af )-_aaa -1:_aaa -1]...);
};_gfd (_ge [2:]);return _ge ;};