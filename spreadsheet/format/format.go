//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_d "bytes";_g "fmt";_ag "github.com/unidoc/unioffice/common/logger";_f "io";_a "math";_c "strconv";_fe "strings";_bc "time";);func _agfg (_ded _bc .Time )_bc .Time {_ded =_ded .UTC ();return _bc .Date (_ded .Year (),_ded .Month (),_ded .Day (),_ded .Hour (),_ded .Minute (),_ded .Second (),_ded .Nanosecond (),_bc .Local );
};func _bfb (_gc float64 ,_ac Format ,_fac bool )string {if _ac ._fg {return NumberGeneric (_gc );};_ec :=make ([]byte ,0,20);_bge :=_a .Signbit (_gc );_agd :=_a .Abs (_gc );_bdg :=int64 (0);_feb :=int64 (0);if _ac .IsExponential {for _agd >=10{_feb ++;
_agd /=10;};for _agd < 1{_feb --;_agd *=10;};}else if _ac ._dd {_agd *=100;}else if _ac ._fa {if _ac ._fd ==0{_acg :=_a .Pow (10,float64 (_ac ._be ));_bb ,_ge :=1.0,1.0;_ =_bb ;for _gce :=1.0;_gce < _acg ;_gce ++{_ ,_dgb :=_a .Modf (_agd *float64 (_gce ));
if _dgb < _ge {_ge =_dgb ;_bb =_gce ;if _dgb ==0{break ;};};};_ac ._fd =int64 (_bb );};_bdg =int64 (_agd *float64 (_ac ._fd )+0.5);if len (_ac .Whole )> 0&&_bdg > _ac ._fd {_bdg =int64 (_agd *float64 (_ac ._fd ))%_ac ._fd ;_agd -=float64 (_bdg )/float64 (_ac ._fd );
}else {_agd -=float64 (_bdg )/float64 (_ac ._fd );if _a .Abs (_agd )< 1{_dbd :=true ;for _ ,_fbd :=range _ac .Whole {if _fbd .Type ==FmtTypeDigitOpt {continue ;};if _fbd .Type ==FmtTypeLiteral &&_fbd .Literal ==' '{continue ;};_dbd =false ;};if _dbd {_ac .Whole =nil ;
};};};};_ddd :=1;for _ ,_fbg :=range _ac .Fractional {if _fbg .Type ==FmtTypeDigit ||_fbg .Type ==FmtTypeDigitOpt {_ddd ++;};};_agd +=5*_a .Pow10 (-_ddd );_da ,_eb :=_a .Modf (_agd );_ec =append (_ec ,_dc (_da ,_gc ,_ac )...);_ec =append (_ec ,_gde (_eb ,_gc ,_ac )...);
_ec =append (_ec ,_ga (_feb ,_ac )...);if _ac ._fa {_ec =_c .AppendInt (_ec ,_bdg ,10);_ec =append (_ec ,'/');_ec =_c .AppendInt (_ec ,_ac ._fd ,10);};if !_fac &&_bge {return "\u002d"+string (_ec );};return string (_ec );};func _dc (_ecf ,_dgbe float64 ,_bgd Format )[]byte {if len (_bgd .Whole )==0{return nil ;
};_dgbd :=_bc .Date (1899,12,30,0,0,0,0,_bc .UTC );_dcg :=_dgbd .Add (_bc .Duration (_dgbe *float64 (24*_bc .Hour )));_dcg =_agfg (_dcg );_cgf :=_c .AppendFloat (nil ,_ecf ,'f',-1,64);_aag :=make ([]byte ,0,len (_cgf ));_dae :=0;_ebb :=1;_ff :for _ffe :=len (_bgd .Whole )-1;
_ffe >=0;_ffe --{_af :=len (_cgf )-1-_dae ;_ad :=_bgd .Whole [_ffe ];switch _ad .Type {case FmtTypeDigit :if _af >=0{_aag =append (_aag ,_cgf [_af ]);_dae ++;_ebb =_ffe ;}else {_aag =append (_aag ,'0');};case FmtTypeDigitOpt :if _af >=0{_aag =append (_aag ,_cgf [_af ]);
_dae ++;_ebb =_ffe ;}else {for _fdc :=_ffe ;_fdc >=0;_fdc --{_fbdc :=_bgd .Whole [_fdc ];if _fbdc .Type ==FmtTypeLiteral {_aag =append (_aag ,_fbdc .Literal );};};break _ff ;};case FmtTypeDollar :for _ecg :=_dae ;_ecg < len (_cgf );_ecg ++{_aag =append (_aag ,_cgf [len (_cgf )-1-_ecg ]);
_dae ++;};_aag =append (_aag ,'$');case FmtTypeComma :if !_bgd ._gg {_aag =append (_aag ,',');};case FmtTypeLiteral :_aag =append (_aag ,_ad .Literal );case FmtTypeDate :_aag =append (_aag ,_bd (_bed (_dcg ,_ad .DateTime ))...);case FmtTypeTime :_aag =append (_aag ,_bd (_cgeb (_dcg ,_dgbe ,_ad .DateTime ))...);
default:_ag .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_ad );};};_eag :=_bd (_aag );if _dae < len (_cgf )&&(_dae !=0||_bgd ._e ){_cef :=len (_cgf )-_dae ;
_ebe :=make ([]byte ,len (_eag )+_cef );copy (_ebe ,_eag [0:_ebb ]);copy (_ebe [_ebb :],_cgf [0:]);copy (_ebe [_ebb +_cef :],_eag [_ebb :]);_eag =_ebe ;};if _bgd ._gg {_gga :=_d .Buffer {};_ede :=0;for _fca :=len (_eag )-1;_fca >=0;_fca --{if !(_eag [_fca ]>='0'&&_eag [_fca ]<='9'){_ede ++;
}else {break ;};};for _fag :=0;_fag < len (_eag );_fag ++{_bgb :=(len (_eag )-_fag -_ede );if _bgb %3==0&&_bgb !=0&&_fag !=0{_gga .WriteByte (',');};_gga .WriteByte (_eag [_fag ]);};_eag =_gga .Bytes ();};return _eag ;};

// AddToken adds a format token to the format.
func (_fc *Format )AddToken (t FmtType ,l []byte ){if _fc ._ggb {_fc ._ggb =false ;return ;};switch t {case FmtTypeDecimal :_fc ._e =true ;case FmtTypeUnderscore :_fc ._ggb =true ;case FmtTypeText :_fc .Whole =append (_fc .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_fc .Whole =append (_fc .Whole ,Token {Type :t ,DateTime :string (l )});
case FmtTypePercent :_fc ._dd =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_db :=range l {if _fc .IsExponential {_fc .Exponent =append (_fc .Exponent ,Token {Type :t ,Literal :_db });
}else if !_fc ._e {_fc .Whole =append (_fc .Whole ,Token {Type :t ,Literal :_db });}else {_fc .Fractional =append (_fc .Fractional ,Token {Type :t ,Literal :_db });};};case FmtTypeDigitOptThousands :_fc ._gg =true ;case FmtTypeFraction :_ab :=_fe .Split (string (l ),"\u002f");
if len (_ab )==2{_fc ._fa =true ;_fc ._fd ,_ =_c .ParseInt (_ab [1],10,64);for _ ,_ed :=range _ab [1]{if _ed =='?'||_ed =='0'{_fc ._be ++;};};};default:_ag .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );
};};func _cgeb (_efe _bc .Time ,_ecab float64 ,_dbf string )[]byte {_bde :=[]byte {};_baf :=0;for _aad :=0;_aad < len (_dbf );_aad ++{var _acc string ;if _dbf [_aad ]==':'{_acc =string (_dbf [_baf :_aad ]);_baf =_aad +1;}else if _aad ==len (_dbf )-1{_acc =string (_dbf [_baf :_aad +1]);
}else {continue ;};switch _acc {case "\u0064":_bde =_efe .AppendFormat (_bde ,"\u0032");case "\u0068":_bde =_efe .AppendFormat (_bde ,"\u0033");case "\u0068\u0068":_bde =_efe .AppendFormat (_bde ,"\u0031\u0035");case "\u006d":_bde =_efe .AppendFormat (_bde ,"\u0034");
case "\u006d\u006d":_bde =_efe .AppendFormat (_bde ,"\u0030\u0034");case "\u0073":_bde =_efe .Round (_bc .Second ).AppendFormat (_bde ,"\u0035");case "\u0073\u002e\u0030":_bde =_efe .Round (_bc .Second /10).AppendFormat (_bde ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_bde =_efe .Round (_bc .Second /100).AppendFormat (_bde ,"\u0035\u002e\u0030\u0030");
case "\u0073\u002e\u00300\u0030":_bde =_efe .Round (_bc .Second /1000).AppendFormat (_bde ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_bde =_efe .Round (_bc .Second ).AppendFormat (_bde ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_bde =_efe .Round (_bc .Second /10).AppendFormat (_bde ,"\u0030\u0035\u002e\u0030");
case "\u0073\u0073\u002e0\u0030":_bde =_efe .Round (_bc .Second /100).AppendFormat (_bde ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_bde =_efe .Round (_bc .Second /1000).AppendFormat (_bde ,"\u0030\u0035\u002e\u0030\u0030\u0030");
case "\u0041\u004d\u002fP\u004d":_bde =_efe .AppendFormat (_bde ,"\u0050\u004d");case "\u005b\u0068\u005d":_bde =_c .AppendInt (_bde ,int64 (_ecab *24),10);case "\u005b\u006d\u005d":_bde =_c .AppendInt (_bde ,int64 (_ecab *24*60),10);case "\u005b\u0073\u005d":_bde =_c .AppendInt (_bde ,int64 (_ecab *24*60*60),10);
case "":default:_ag .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_acc );};if _dbf [_aad ]==':'{_bde =append (_bde ,':');};};return _bde ;
};

// FmtType is the type of a format token.
//
//go:generate stringer -type=FmtType
type FmtType byte ;

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_fb :=Parse (f );if len (_fb )==1{return _bfb (v ,_fb [0],false );}else if len (_fb )> 1&&v < 0{return _bfb (v ,_fb [1],true );
}else if len (_fb )> 2&&v ==0{return _bfb (v ,_fb [2],false );};return _bfb (v ,_fb [0],false );};

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_dbg ,_ :=_c .ParseFloat (v ,64);return Number (_dbg ,f );};return String (v ,f );};

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_bg :=Parse (f );var _ea Format ;if len (_bg )==1{_ea =_bg [0];}else if len (_bg )==4{_ea =_bg [3];};_cd :=false ;for _ ,_def :=range _ea .Whole {if _def .Type ==FmtTypeText {_cd =true ;};};if !_cd {return v ;};
_gb :=_d .Buffer {};for _ ,_cge :=range _ea .Whole {switch _cge .Type {case FmtTypeLiteral :_gb .WriteByte (_cge .Literal );case FmtTypeText :_gb .WriteString (v );};};return _gb .String ();};

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};func _ga (_age int64 ,_cf Format )[]byte {if !_cf .IsExponential ||len (_cf .Exponent )==0{return nil ;};_beg :=_c .AppendInt (nil ,_fde (_age ),10);_bfg :=make ([]byte ,0,len (_beg )+2);
_bfg =append (_bfg ,'E');if _age >=0{_bfg =append (_bfg ,'+');}else {_bfg =append (_bfg ,'-');_age *=-1;};_ggg :=0;_bcc :for _fgg :=len (_cf .Exponent )-1;_fgg >=0;_fgg --{_fdec :=len (_beg )-1-_ggg ;_bad :=_cf .Exponent [_fgg ];switch _bad .Type {case FmtTypeDigit :if _fdec >=0{_bfg =append (_bfg ,_beg [_fdec ]);
_ggg ++;}else {_bfg =append (_bfg ,'0');};case FmtTypeDigitOpt :if _fdec >=0{_bfg =append (_bfg ,_beg [_fdec ]);_ggg ++;}else {for _ee :=_fgg ;_ee >=0;_ee --{_aea :=_cf .Exponent [_ee ];if _aea .Type ==FmtTypeLiteral {_bfg =append (_bfg ,_aea .Literal );
};};break _bcc ;};case FmtTypeLiteral :_bfg =append (_bfg ,_bad .Literal );default:_ag .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_bad );
};};if _ggg < len (_beg ){_bfg =append (_bfg ,_beg [len (_beg )-_ggg -1:_ggg -1]...);};_bd (_bfg [2:]);return _bfg ;};const _ba =1e11;const _egg int =-1;const _gac int =0;func _ceb (_ef float64 )string {_agb :=_c .FormatFloat (_ef ,'E',-1,64);_bfa :=_c .FormatFloat (_ef ,'E',5,64);
if len (_agb )< len (_bfa ){return _c .FormatFloat (_ef ,'E',2,64);};return _bfa ;};const _ce =1e-10;func (_cg FmtType )String ()string {if _cg >=FmtType (len (_gd )-1){return _g .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_cg );
};return _de [_gd [_cg ]:_gd [_cg +1]];};const _dfe int =34;const _bfd int =0;const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;
FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);const _aca int =0;var _gd =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};func IsNumber (data string )(_faf bool ){_ccb ,_ca ,_bfe :=0,0,len (data );_bbba :=len (data );_df ,_bbg ,_eec :=0,0,0;
_ =_bbg ;_ =_eec ;_ =_df ;{_ccb =_gac ;_df =0;_bbg =0;_eec =0;};{if _ca ==_bfe {goto _ade ;};switch _ccb {case 0:goto _ada ;case 1:goto _ecb ;case 2:goto _ddc ;case 3:goto _febg ;case 4:goto _cab ;case 5:goto _cdd ;case 6:goto _cbg ;case 7:goto _gfd ;};
goto _cad ;_aec :_bbg =_ca ;_ca --;{_faf =false ;};goto _cae ;_ccf :_bbg =_ca ;_ca --;{_faf =_bbg ==len (data );};goto _cae ;_ccd :_bbg =_ca ;_ca --;{_faf =_bbg ==len (data );};goto _cae ;_bgf :switch _eec {case 2:{_ca =(_bbg )-1;_faf =_bbg ==len (data );
};case 3:{_ca =(_bbg )-1;_faf =false ;};};goto _cae ;_cae :_df =0;if _ca ++;_ca ==_bfe {goto _ecbc ;};_ada :_df =_ca ;switch data [_ca ]{case 43:goto _dfg ;case 45:goto _dfg ;};if 48<=data [_ca ]&&data [_ca ]<=57{goto _gf ;};goto _aecd ;_aecd :if _ca ++;
_ca ==_bfe {goto _edf ;};_ecb :goto _aecd ;_dfg :if _ca ++;_ca ==_bfe {goto _eg ;};_ddc :if 48<=data [_ca ]&&data [_ca ]<=57{goto _gf ;};goto _aecd ;_gf :if _ca ++;_ca ==_bfe {goto _aba ;};_febg :if data [_ca ]==46{goto _aecb ;};if 48<=data [_ca ]&&data [_ca ]<=57{goto _gf ;
};goto _aecd ;_aecb :if _ca ++;_ca ==_bfe {goto _dfc ;};_cab :if 48<=data [_ca ]&&data [_ca ]<=57{goto _faca ;};goto _aecd ;_faca :if _ca ++;_ca ==_bfe {goto _febb ;};_cdd :if data [_ca ]==69{goto _cda ;};if 48<=data [_ca ]&&data [_ca ]<=57{goto _faca ;
};goto _aecd ;_cda :if _ca ++;_ca ==_bfe {goto _bba ;};_cbg :switch data [_ca ]{case 43:goto _cgd ;case 45:goto _cgd ;};goto _aecd ;_cgd :_bbg =_ca +1;_eec =3;goto _cgfa ;_adb :_bbg =_ca +1;_eec =2;goto _cgfa ;_cgfa :if _ca ++;_ca ==_bfe {goto _fgb ;};
_gfd :if 48<=data [_ca ]&&data [_ca ]<=57{goto _adb ;};goto _aecd ;_cad :_ecbc :_ccb =0;goto _ade ;_edf :_ccb =1;goto _ade ;_eg :_ccb =2;goto _ade ;_aba :_ccb =3;goto _ade ;_dfc :_ccb =4;goto _ade ;_febb :_ccb =5;goto _ade ;_bba :_ccb =6;goto _ade ;_fgb :_ccb =7;
goto _ade ;_ade :{};if _ca ==_bbba {switch _ccb {case 1:goto _aec ;case 2:goto _aec ;case 3:goto _ccf ;case 4:goto _aec ;case 5:goto _ccd ;case 6:goto _aec ;case 7:goto _bgf ;};};};if _ccb ==_egg {return false ;};return ;};func _gde (_bae ,_bcf float64 ,_eca Format )[]byte {if len (_eca .Fractional )==0{return nil ;
};_dce :=_c .AppendFloat (nil ,_bae ,'f',-1,64);if len (_dce )> 2{_dce =_dce [2:];}else {_dce =nil ;};_fdb :=make ([]byte ,0,len (_dce ));_fdb =append (_fdb ,'.');_geb :=0;_ebd :for _aab :=0;_aab < len (_eca .Fractional );_aab ++{_gdg :=_aab ;_ffd :=_eca .Fractional [_aab ];
switch _ffd .Type {case FmtTypeDigit :if _gdg < len (_dce ){_fdb =append (_fdb ,_dce [_gdg ]);_geb ++;}else {_fdb =append (_fdb ,'0');};case FmtTypeDigitOpt :if _gdg >=0{_fdb =append (_fdb ,_dce [_gdg ]);_geb ++;}else {break _ebd ;};case FmtTypeLiteral :_fdb =append (_fdb ,_ffd .Literal );
default:_ag .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_ffd );};};return _fdb ;};const _cbb int =-1;
func _bed (_gcc _bc .Time ,_fdcg string )[]byte {_bbe :=[]byte {};_agdb :=0;for _bea :=0;_bea < len (_fdcg );_bea ++{var _gggg string ;if _fdcg [_bea ]=='/'{_gggg =string (_fdcg [_agdb :_bea ]);_agdb =_bea +1;}else if _bea ==len (_fdcg )-1{_gggg =string (_fdcg [_agdb :_bea +1]);
}else {continue ;};switch _gggg {case "\u0079\u0079":_bbe =_gcc .AppendFormat (_bbe ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_bbe =_gcc .AppendFormat (_bbe ,"\u0032\u0030\u0030\u0036");case "\u006d":_bbe =_gcc .AppendFormat (_bbe ,"\u0031");case "\u006d\u006d":_bbe =_gcc .AppendFormat (_bbe ,"\u0030\u0031");
case "\u006d\u006d\u006d":_bbe =_gcc .AppendFormat (_bbe ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_bbe =_gcc .AppendFormat (_bbe ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _gcc .Month (){case _bc .January ,_bc .July ,_bc .June :_bbe =append (_bbe ,'J');
case _bc .February :_bbe =append (_bbe ,'M');case _bc .March ,_bc .May :_bbe =append (_bbe ,'M');case _bc .April ,_bc .August :_bbe =append (_bbe ,'A');case _bc .September :_bbe =append (_bbe ,'S');case _bc .October :_bbe =append (_bbe ,'O');case _bc .November :_bbe =append (_bbe ,'N');
case _bc .December :_bbe =append (_bbe ,'D');};case "\u0064":_bbe =_gcc .AppendFormat (_bbe ,"\u0032");case "\u0064\u0064":_bbe =_gcc .AppendFormat (_bbe ,"\u0030\u0032");case "\u0064\u0064\u0064":_bbe =_gcc .AppendFormat (_bbe ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_bbe =_gcc .AppendFormat (_bbe ,"\u004d\u006f\u006e\u0064\u0061\u0079");
default:_ag .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_gggg );};if _fdcg [_bea ]=='/'{_bbe =append (_bbe ,'/');};};return _bbe ;};func _eadg (_aff []byte )[]byte {for _aae :=len (_aff )-1;
_aae > 0;_aae --{if _aff [_aae ]=='9'+1{_aff [_aae ]='0';if _aff [_aae -1]=='.'{_aae --;};_aff [_aae -1]++;};};if _aff [0]=='9'+1{_aff [0]='0';copy (_aff [1:],_aff [0:]);_aff [0]='1';};return _aff ;};func _bd (_cea []byte )[]byte {for _fgf :=0;_fgf < len (_cea )/2;
_fgf ++{_fcf :=len (_cea )-1-_fgf ;_cea [_fgf ],_cea [_fcf ]=_cea [_fcf ],_cea [_fgf ];};return _cea ;};func _acb (_daed []byte )[]byte {_bgbg :=len (_daed );_bbb :=false ;_ggc :=false ;for _ead :=len (_daed )-1;_ead >=0;_ead --{if _daed [_ead ]=='0'&&!_ggc &&!_bbb {_bgbg =_ead ;
}else if _daed [_ead ]=='.'{_bbb =true ;}else {_ggc =true ;};};if _bbb &&_ggc {if _daed [_bgbg -1]=='.'{_bgbg --;};return _daed [0:_bgbg ];};return _daed ;};const _fga int =34;func (_fgfa *Lexer )nextFmt (){_fgfa ._afff =append (_fgfa ._afff ,_fgfa ._gfb );
_fgfa ._gfb =Format {}};const _cbbe int =34;func (_bccd *Lexer )Lex (r _f .Reader ){_ggf ,_edfb ,_add :=0,0,0;_dcb :=-1;_deb ,_aaeg ,_cgfg :=0,0,0;_ =_aaeg ;_ =_cgfg ;_bgbc :=1;_ =_bgbc ;_gaa :=make ([]byte ,4096);_bef :=false ;for !_bef {_eaa :=0;if _deb > 0{_eaa =_edfb -_deb ;
};_edfb =0;_gdf ,_cdgf :=r .Read (_gaa [_eaa :]);if _gdf ==0||_cdgf !=nil {_bef =true ;};_add =_gdf +_eaa ;if _add < len (_gaa ){_dcb =_add ;};{_ggf =_fga ;_deb =0;_aaeg =0;_cgfg =0;};{if _edfb ==_add {goto _aedd ;};switch _ggf {case 34:goto _bfdb ;case 35:goto _gdc ;
case 0:goto _gbf ;case 36:goto _cba ;case 37:goto _cggb ;case 1:goto _agcf ;case 2:goto _gda ;case 38:goto _dbe ;case 3:goto _ebf ;case 4:goto _cecd ;case 39:goto _dcc ;case 5:goto _dfab ;case 6:goto _gcb ;case 7:goto _eff ;case 8:goto _dbbc ;case 40:goto _ffcd ;
case 9:goto _eddf ;case 41:goto _dceb ;case 10:goto _bdga ;case 42:goto _caa ;case 11:goto _dbbf ;case 43:goto _affg ;case 44:goto _beab ;case 45:goto _fcc ;case 12:goto _eaf ;case 46:goto _gfca ;case 13:goto _cfg ;case 14:goto _feg ;case 15:goto _gcbf ;
case 16:goto _bce ;case 47:goto _ccdd ;case 17:goto _ddcc ;case 48:goto _baed ;case 18:goto _gggd ;case 19:goto _cagb ;case 20:goto _ebbb ;case 49:goto _fega ;case 50:goto _cdgg ;case 21:goto _bag ;case 22:goto _fed ;case 23:goto _baea ;case 24:goto _gbg ;
case 25:goto _fdcd ;case 51:goto _dab ;case 26:goto _abg ;case 52:goto _fge ;case 53:goto _cfa ;case 54:goto _ddf ;case 55:goto _cdaa ;case 56:goto _abgc ;case 57:goto _bbeb ;case 27:goto _ccg ;case 28:goto _gfdg ;case 29:goto _gea ;case 30:goto _cce ;
case 31:goto _gba ;case 58:goto _egf ;case 32:goto _accg ;case 59:goto _abaa ;case 33:goto _aggf ;case 60:goto _cdaf ;case 61:goto _dbc ;case 62:goto _dda ;};goto _afac ;_bee :switch _cgfg {case 2:{_edfb =(_aaeg )-1;_bccd ._gfb .AddToken (FmtTypeDigit ,nil );
};case 3:{_edfb =(_aaeg )-1;_bccd ._gfb .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_edfb =(_aaeg )-1;};case 8:{_edfb =(_aaeg )-1;_bccd ._gfb .AddToken (FmtTypePercent ,nil );};case 13:{_edfb =(_aaeg )-1;_bccd ._gfb .AddToken (FmtTypeFraction ,_gaa [_deb :_aaeg ]);
};case 14:{_edfb =(_aaeg )-1;_bccd ._gfb .AddToken (FmtTypeDate ,_gaa [_deb :_aaeg ]);};case 15:{_edfb =(_aaeg )-1;_bccd ._gfb .AddToken (FmtTypeTime ,_gaa [_deb :_aaeg ]);};case 16:{_edfb =(_aaeg )-1;_bccd ._gfb .AddToken (FmtTypeTime ,_gaa [_deb :_aaeg ]);
};case 18:{_edfb =(_aaeg )-1;};case 20:{_edfb =(_aaeg )-1;_bccd ._gfb .AddToken (FmtTypeLiteral ,_gaa [_deb :_aaeg ]);};case 21:{_edfb =(_aaeg )-1;_bccd ._gfb .AddToken (FmtTypeLiteral ,_gaa [_deb +1:_aaeg -1]);};};goto _bbed ;_fbe :_edfb =(_aaeg )-1;{_bccd ._gfb .AddToken (FmtTypeFraction ,_gaa [_deb :_aaeg ]);
};goto _bbed ;_ddb :_edfb =(_aaeg )-1;{_bccd ._gfb .AddToken (FmtTypeDigitOpt ,nil );};goto _bbed ;_ffc :_aaeg =_edfb +1;{_bccd ._gfb .AddToken (FmtTypeDigitOptThousands ,nil );};goto _bbed ;_eba :_edfb =(_aaeg )-1;{_bccd ._gfb .AddToken (FmtTypePercent ,nil );
};goto _bbed ;_eaaf :_edfb =(_aaeg )-1;{_bccd ._gfb .AddToken (FmtTypeDate ,_gaa [_deb :_aaeg ]);};goto _bbed ;_bafd :_edfb =(_aaeg )-1;{_bccd ._gfb .AddToken (FmtTypeDigit ,nil );};goto _bbed ;_ggbd :_edfb =(_aaeg )-1;{_bccd ._gfb .AddToken (FmtTypeTime ,_gaa [_deb :_aaeg ]);
};goto _bbed ;_gfc :_edfb =(_aaeg )-1;{_bccd ._gfb .AddToken (FmtTypeLiteral ,_gaa [_deb :_aaeg ]);};goto _bbed ;_cgg :_aaeg =_edfb +1;{_bccd ._gfb ._fg =true ;};goto _bbed ;_ecc :_aaeg =_edfb +1;{_bccd ._gfb .AddToken (FmtTypeLiteral ,_gaa [_deb :_aaeg ]);
};goto _bbed ;_aaf :_aaeg =_edfb +1;{_bccd ._gfb .AddToken (FmtTypeDollar ,nil );};goto _bbed ;_faba :_aaeg =_edfb +1;{_bccd ._gfb .AddToken (FmtTypeComma ,nil );};goto _bbed ;_dcge :_aaeg =_edfb +1;{_bccd ._gfb .AddToken (FmtTypeDecimal ,nil );};goto _bbed ;
_dbb :_aaeg =_edfb +1;{_bccd .nextFmt ();};goto _bbed ;_bbgd :_aaeg =_edfb +1;{_bccd ._gfb .AddToken (FmtTypeText ,nil );};goto _bbed ;_edfd :_aaeg =_edfb +1;{_bccd ._gfb .AddToken (FmtTypeUnderscore ,nil );};goto _bbed ;_febd :_aaeg =_edfb ;_edfb --;{_bccd ._gfb .AddToken (FmtTypeLiteral ,_gaa [_deb :_aaeg ]);
};goto _bbed ;_fec :_aaeg =_edfb ;_edfb --;{_bccd ._gfb .AddToken (FmtTypeLiteral ,_gaa [_deb +1:_aaeg -1]);};goto _bbed ;_dfa :_aaeg =_edfb ;_edfb --;{_bccd ._gfb .AddToken (FmtTypeDigitOpt ,nil );};goto _bbed ;_ffde :_aaeg =_edfb ;_edfb --;{_bccd ._gfb .AddToken (FmtTypeFraction ,_gaa [_deb :_aaeg ]);
};goto _bbed ;_agc :_aaeg =_edfb ;_edfb --;{_bccd ._gfb .AddToken (FmtTypePercent ,nil );};goto _bbed ;_fcaa :_aaeg =_edfb ;_edfb --;{_bccd ._gfb .AddToken (FmtTypeDate ,_gaa [_deb :_aaeg ]);};goto _bbed ;_dgf :_aaeg =_edfb ;_edfb --;{_bccd ._gfb .AddToken (FmtTypeDigit ,nil );
};goto _bbed ;_dea :_aaeg =_edfb ;_edfb --;{_bccd ._gfb .AddToken (FmtTypeTime ,_gaa [_deb :_aaeg ]);};goto _bbed ;_bcda :_aaeg =_edfb ;_edfb --;{};goto _bbed ;_edfc :_aaeg =_edfb +1;{_bccd ._gfb .IsExponential =true ;};goto _bbed ;_becg :_aaeg =_edfb +1;
{_bccd ._gfb .AddToken (FmtTypeLiteral ,_gaa [_deb +1:_aaeg ]);};goto _bbed ;_bbed :_deb =0;if _edfb ++;_edfb ==_add {goto _cceg ;};_bfdb :_deb =_edfb ;switch _gaa [_edfb ]{case 34:goto _cdc ;case 35:goto _adbe ;case 36:goto _aaf ;case 37:goto _begc ;case 44:goto _faba ;
case 46:goto _dcge ;case 47:goto _gaca ;case 48:goto _cgb ;case 58:goto _dgfea ;case 59:goto _dbb ;case 63:goto _dde ;case 64:goto _bbgd ;case 65:goto _fece ;case 69:goto _adf ;case 71:goto _abgf ;case 91:goto _bcdaa ;case 92:goto _gdb ;case 95:goto _edfd ;
case 100:goto _gaca ;case 104:goto _dgfea ;case 109:goto _cabd ;case 115:goto _aefb ;case 121:goto _bafdg ;};if 49<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _edfa ;};goto _ecc ;_cdc :_aaeg =_edfb +1;_cgfg =20;goto _gfda ;_gfda :if _edfb ++;_edfb ==_add {goto _bfbb ;
};_gdc :if _gaa [_edfb ]==34{goto _ddg ;};goto _aed ;_aed :if _edfb ++;_edfb ==_add {goto _gbfd ;};_gbf :if _gaa [_edfb ]==34{goto _ddg ;};goto _aed ;_ddg :_aaeg =_edfb +1;_cgfg =21;goto _bfdc ;_bfdc :if _edfb ++;_edfb ==_add {goto _agf ;};_cba :if _gaa [_edfb ]==34{goto _aed ;
};goto _fec ;_adbe :_aaeg =_edfb +1;_cgfg =3;goto _fgd ;_fgd :if _edfb ++;_edfb ==_add {goto _cfgd ;};_cggb :switch _gaa [_edfb ]{case 35:goto _dfca ;case 37:goto _dfca ;case 44:goto _cag ;case 47:goto _dgfe ;case 48:goto _dfca ;case 63:goto _dfca ;};goto _dfa ;
_dfca :if _edfb ++;_edfb ==_add {goto _ffec ;};_agcf :switch _gaa [_edfb ]{case 35:goto _dfca ;case 37:goto _dfca ;case 47:goto _dgfe ;case 48:goto _dfca ;case 63:goto _dfca ;};goto _bee ;_dgfe :if _edfb ++;_edfb ==_add {goto _fgac ;};_gda :switch _gaa [_edfb ]{case 35:goto _ceaa ;
case 37:goto _afa ;case 48:goto _gff ;case 63:goto _ceaa ;};if 49<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _aee ;};goto _bee ;_ceaa :_aaeg =_edfb +1;goto _cdcb ;_cdcb :if _edfb ++;_edfb ==_add {goto _edg ;};_dbe :switch _gaa [_edfb ]{case 35:goto _ceaa ;
case 37:goto _ceaa ;case 44:goto _ceaa ;case 46:goto _ceaa ;case 48:goto _ceaa ;case 63:goto _ceaa ;case 65:goto _aga ;};goto _ffde ;_aga :if _edfb ++;_edfb ==_add {goto _cac ;};_ebf :switch _gaa [_edfb ]{case 47:goto _bcde ;case 77:goto _feca ;};goto _fbe ;
_bcde :if _edfb ++;_edfb ==_add {goto _dccd ;};_cecd :if _gaa [_edfb ]==80{goto _bbag ;};goto _fbe ;_bbag :_aaeg =_edfb +1;goto _bfc ;_bfc :if _edfb ++;_edfb ==_add {goto _cbab ;};_dcc :if _gaa [_edfb ]==65{goto _aga ;};goto _ffde ;_feca :if _edfb ++;_edfb ==_add {goto _bdeb ;
};_dfab :if _gaa [_edfb ]==47{goto _cfd ;};goto _fbe ;_cfd :if _edfb ++;_edfb ==_add {goto _gggb ;};_gcb :if _gaa [_edfb ]==80{goto _abag ;};goto _fbe ;_abag :if _edfb ++;_edfb ==_add {goto _facf ;};_eff :if _gaa [_edfb ]==77{goto _bbag ;};goto _fbe ;_afa :if _edfb ++;
_edfb ==_add {goto _cbe ;};_dbbc :switch _gaa [_edfb ]{case 35:goto _aaega ;case 37:goto _aecdd ;case 63:goto _aaega ;};if 48<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _gdaf ;};goto _bee ;_aaega :_aaeg =_edfb +1;goto _eea ;_eea :if _edfb ++;_edfb ==_add {goto _ecfa ;
};_ffcd :switch _gaa [_edfb ]{case 35:goto _ceaa ;case 37:goto _dad ;case 44:goto _ceaa ;case 46:goto _ceaa ;case 48:goto _ceaa ;case 63:goto _ceaa ;case 65:goto _aga ;};goto _ffde ;_dad :if _edfb ++;_edfb ==_add {goto _dcdc ;};_eddf :switch _gaa [_edfb ]{case 35:goto _ccba ;
case 44:goto _ccba ;case 46:goto _ccba ;case 48:goto _ccba ;case 63:goto _ccba ;};goto _fbe ;_ccba :_aaeg =_edfb +1;goto _bedb ;_bedb :if _edfb ++;_edfb ==_add {goto _abe ;};_dceb :switch _gaa [_edfb ]{case 35:goto _ccba ;case 44:goto _ccba ;case 46:goto _ccba ;
case 48:goto _ccba ;case 63:goto _ccba ;case 65:goto _aga ;};goto _ffde ;_aecdd :if _edfb ++;_edfb ==_add {goto _bga ;};_bdga :if _gaa [_edfb ]==37{goto _aecdd ;};if 48<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _gdaf ;};goto _bee ;_gdaf :_aaeg =_edfb +1;_cgfg =13;
goto _dfd ;_dfd :if _edfb ++;_edfb ==_add {goto _dgbef ;};_caa :switch _gaa [_edfb ]{case 35:goto _ceaa ;case 37:goto _efg ;case 44:goto _ceaa ;case 46:goto _ceaa ;case 48:goto _gca ;case 63:goto _ceaa ;case 65:goto _aga ;};if 49<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _gdaf ;
};goto _ffde ;_efg :if _edfb ++;_edfb ==_add {goto _dag ;};_dbbf :switch _gaa [_edfb ]{case 35:goto _ccba ;case 37:goto _aecdd ;case 44:goto _ccba ;case 46:goto _ccba ;case 63:goto _ccba ;};if 48<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _gdaf ;};goto _fbe ;
_gca :_aaeg =_edfb +1;goto _ecba ;_ecba :if _edfb ++;_edfb ==_add {goto _ffea ;};_affg :switch _gaa [_edfb ]{case 35:goto _ceaa ;case 37:goto _gca ;case 44:goto _ceaa ;case 46:goto _ceaa ;case 48:goto _gca ;case 63:goto _ceaa ;case 65:goto _aga ;};if 49<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _gdaf ;
};goto _ffde ;_gff :_aaeg =_edfb +1;goto _dba ;_dba :if _edfb ++;_edfb ==_add {goto _edfbf ;};_beab :switch _gaa [_edfb ]{case 35:goto _ceaa ;case 37:goto _gca ;case 44:goto _ceaa ;case 46:goto _ceaa ;case 48:goto _gff ;case 63:goto _ceaa ;case 65:goto _aga ;
};if 49<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _aee ;};goto _ffde ;_aee :_aaeg =_edfb +1;goto _bdef ;_bdef :if _edfb ++;_edfb ==_add {goto _ffg ;};_fcc :switch _gaa [_edfb ]{case 35:goto _ceaa ;case 37:goto _gdaf ;case 44:goto _ceaa ;case 46:goto _ceaa ;
case 48:goto _gff ;case 63:goto _ceaa ;case 65:goto _aga ;};if 49<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _aee ;};goto _ffde ;_cag :if _edfb ++;_edfb ==_add {goto _eccg ;};_eaf :if _gaa [_edfb ]==35{goto _ffc ;};goto _ddb ;_begc :_aaeg =_edfb +1;_cgfg =8;
goto _abd ;_abd :if _edfb ++;_edfb ==_add {goto _fgef ;};_gfca :switch _gaa [_edfb ]{case 35:goto _bfae ;case 37:goto _dcgf ;case 48:goto _fae ;case 63:goto _bfae ;};if 49<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _dgg ;};goto _agc ;_bfae :if _edfb ++;_edfb ==_add {goto _gfe ;
};_cfg :switch _gaa [_edfb ]{case 35:goto _bfae ;case 47:goto _dgfe ;case 48:goto _bfae ;case 63:goto _bfae ;};goto _eba ;_dcgf :if _edfb ++;_edfb ==_add {goto _abac ;};_feg :if _gaa [_edfb ]==37{goto _dcgf ;};if 48<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _dgg ;
};goto _bee ;_dgg :if _edfb ++;_edfb ==_add {goto _gaae ;};_gcbf :switch _gaa [_edfb ]{case 37:goto _dcgf ;case 47:goto _dgfe ;};if 48<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _dgg ;};goto _bee ;_fae :if _edfb ++;_edfb ==_add {goto _adec ;};_bce :switch _gaa [_edfb ]{case 35:goto _bfae ;
case 37:goto _dcgf ;case 47:goto _dgfe ;case 48:goto _fae ;case 63:goto _bfae ;};if 49<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _dgg ;};goto _eba ;_gaca :_aaeg =_edfb +1;goto _afc ;_afc :if _edfb ++;_edfb ==_add {goto _cbec ;};_ccdd :switch _gaa [_edfb ]{case 47:goto _gaca ;
case 100:goto _gaca ;case 109:goto _gaca ;case 121:goto _aef ;};goto _fcaa ;_aef :if _edfb ++;_edfb ==_add {goto _cdba ;};_ddcc :if _gaa [_edfb ]==121{goto _gaca ;};goto _eaaf ;_cgb :_aaeg =_edfb +1;_cgfg =2;goto _cdb ;_cdb :if _edfb ++;_edfb ==_add {goto _dfgee ;
};_baed :switch _gaa [_edfb ]{case 35:goto _dfca ;case 37:goto _dfge ;case 47:goto _dgfe ;case 48:goto _dcgb ;case 63:goto _dfca ;};if 49<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _afd ;};goto _dgf ;_dfge :if _edfb ++;_edfb ==_add {goto _aeb ;};_gggd :switch _gaa [_edfb ]{case 35:goto _dfca ;
case 37:goto _dfge ;case 47:goto _dgfe ;case 48:goto _dfge ;case 63:goto _dfca ;};if 49<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _dgg ;};goto _bafd ;_dcgb :if _edfb ++;_edfb ==_add {goto _ccfc ;};_cagb :switch _gaa [_edfb ]{case 35:goto _dfca ;case 37:goto _dfge ;
case 47:goto _dgfe ;case 48:goto _dcgb ;case 63:goto _dfca ;};if 49<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _afd ;};goto _bafd ;_afd :if _edfb ++;_edfb ==_add {goto _cbba ;};_ebbb :switch _gaa [_edfb ]{case 37:goto _dgg ;case 47:goto _dgfe ;};if 48<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _afd ;
};goto _bee ;_edfa :_aaeg =_edfb +1;_cgfg =20;goto _cdeg ;_cdeg :if _edfb ++;_edfb ==_add {goto _cbc ;};_fega :switch _gaa [_edfb ]{case 37:goto _dgg ;case 47:goto _dgfe ;};if 48<=_gaa [_edfb ]&&_gaa [_edfb ]<=57{goto _afd ;};goto _febd ;_dgfea :_aaeg =_edfb +1;
_cgfg =15;goto _eeae ;_eeae :if _edfb ++;_edfb ==_add {goto _ffda ;};_cdgg :switch _gaa [_edfb ]{case 58:goto _dgfea ;case 65:goto _fbgc ;case 104:goto _dgfea ;case 109:goto _dgfea ;case 115:goto _aefb ;};goto _dea ;_fbgc :if _edfb ++;_edfb ==_add {goto _cggbg ;
};_bag :switch _gaa [_edfb ]{case 47:goto _cdbc ;case 77:goto _edfe ;};goto _bee ;_cdbc :if _edfb ++;_edfb ==_add {goto _bbf ;};_fed :if _gaa [_edfb ]==80{goto _dgfea ;};goto _bee ;_edfe :if _edfb ++;_edfb ==_add {goto _edff ;};_baea :if _gaa [_edfb ]==47{goto _agcg ;
};goto _bee ;_agcg :if _edfb ++;_edfb ==_add {goto _dfbc ;};_gbg :if _gaa [_edfb ]==80{goto _fbb ;};goto _bee ;_fbb :if _edfb ++;_edfb ==_add {goto _efa ;};_fdcd :if _gaa [_edfb ]==77{goto _dgfea ;};goto _bee ;_aefb :_aaeg =_edfb +1;_cgfg =15;goto _dgga ;
_dgga :if _edfb ++;_edfb ==_add {goto _eeac ;};_dab :switch _gaa [_edfb ]{case 46:goto _fdf ;case 58:goto _dgfea ;case 65:goto _fbgc ;case 104:goto _dgfea ;case 109:goto _dgfea ;case 115:goto _aefb ;};goto _dea ;_fdf :if _edfb ++;_edfb ==_add {goto _cbgb ;
};_abg :if _gaa [_edfb ]==48{goto _dggd ;};goto _ggbd ;_dggd :_aaeg =_edfb +1;_cgfg =15;goto _daf ;_daf :if _edfb ++;_edfb ==_add {goto _fea ;};_fge :switch _gaa [_edfb ]{case 48:goto _cfc ;case 58:goto _dgfea ;case 65:goto _fbgc ;case 104:goto _dgfea ;
case 109:goto _dgfea ;case 115:goto _aefb ;};goto _dea ;_cfc :_aaeg =_edfb +1;_cgfg =15;goto _dfb ;_dfb :if _edfb ++;_edfb ==_add {goto _gbaa ;};_cfa :switch _gaa [_edfb ]{case 48:goto _dgfea ;case 58:goto _dgfea ;case 65:goto _fbgc ;case 104:goto _dgfea ;
case 109:goto _dgfea ;case 115:goto _aefb ;};goto _dea ;_dde :_aaeg =_edfb +1;_cgfg =5;goto _defe ;_defe :if _edfb ++;_edfb ==_add {goto _ggd ;};_ddf :switch _gaa [_edfb ]{case 35:goto _dfca ;case 37:goto _dfca ;case 47:goto _dgfe ;case 48:goto _dfca ;
case 63:goto _dfca ;};goto _bcda ;_fece :_aaeg =_edfb +1;_cgfg =20;goto _befd ;_befd :if _edfb ++;_edfb ==_add {goto _fff ;};_cdaa :switch _gaa [_edfb ]{case 47:goto _cdbc ;case 77:goto _edfe ;};goto _febd ;_adf :if _edfb ++;_edfb ==_add {goto _bfcd ;};
_abgc :switch _gaa [_edfb ]{case 43:goto _edfc ;case 45:goto _edfc ;};goto _febd ;_abgf :_aaeg =_edfb +1;goto _bcfc ;_bcfc :if _edfb ++;_edfb ==_add {goto _fagg ;};_bbeb :if _gaa [_edfb ]==101{goto _dcd ;};goto _febd ;_dcd :if _edfb ++;_edfb ==_add {goto _bgc ;
};_ccg :if _gaa [_edfb ]==110{goto _gbgg ;};goto _gfc ;_gbgg :if _edfb ++;_edfb ==_add {goto _abde ;};_gfdg :if _gaa [_edfb ]==101{goto _ebg ;};goto _gfc ;_ebg :if _edfb ++;_edfb ==_add {goto _dca ;};_gea :if _gaa [_edfb ]==114{goto _dgbee ;};goto _gfc ;
_dgbee :if _edfb ++;_edfb ==_add {goto _fcd ;};_cce :if _gaa [_edfb ]==97{goto _agg ;};goto _gfc ;_agg :if _edfb ++;_edfb ==_add {goto _dadd ;};_gba :if _gaa [_edfb ]==108{goto _cgg ;};goto _gfc ;_bcdaa :_aaeg =_edfb +1;_cgfg =20;goto _deag ;_deag :if _edfb ++;
_edfb ==_add {goto _ffdd ;};_egf :switch _gaa [_edfb ]{case 104:goto _dabd ;case 109:goto _dabd ;case 115:goto _dabd ;};goto _aade ;_aade :if _edfb ++;_edfb ==_add {goto _dff ;};_accg :if _gaa [_edfb ]==93{goto _cadg ;};goto _aade ;_cadg :_aaeg =_edfb +1;
_cgfg =18;goto _bgba ;_eeb :_aaeg =_edfb +1;_cgfg =16;goto _bgba ;_bgba :if _edfb ++;_edfb ==_add {goto _dgbf ;};_abaa :if _gaa [_edfb ]==93{goto _cadg ;};goto _aade ;_dabd :if _edfb ++;_edfb ==_add {goto _efb ;};_aggf :if _gaa [_edfb ]==93{goto _eeb ;
};goto _aade ;_gdb :if _edfb ++;_edfb ==_add {goto _cbabg ;};_cdaf :goto _becg ;_cabd :_aaeg =_edfb +1;_cgfg =14;goto _eecb ;_eecb :if _edfb ++;_edfb ==_add {goto _efd ;};_dbc :switch _gaa [_edfb ]{case 47:goto _gaca ;case 58:goto _dgfea ;case 65:goto _fbgc ;
case 100:goto _gaca ;case 104:goto _dgfea ;case 109:goto _cabd ;case 115:goto _aefb ;case 121:goto _aef ;};goto _fcaa ;_bafdg :if _edfb ++;_edfb ==_add {goto _acca ;};_dda :if _gaa [_edfb ]==121{goto _gaca ;};goto _febd ;_afac :_cceg :_ggf =34;goto _aedd ;
_bfbb :_ggf =35;goto _aedd ;_gbfd :_ggf =0;goto _aedd ;_agf :_ggf =36;goto _aedd ;_cfgd :_ggf =37;goto _aedd ;_ffec :_ggf =1;goto _aedd ;_fgac :_ggf =2;goto _aedd ;_edg :_ggf =38;goto _aedd ;_cac :_ggf =3;goto _aedd ;_dccd :_ggf =4;goto _aedd ;_cbab :_ggf =39;
goto _aedd ;_bdeb :_ggf =5;goto _aedd ;_gggb :_ggf =6;goto _aedd ;_facf :_ggf =7;goto _aedd ;_cbe :_ggf =8;goto _aedd ;_ecfa :_ggf =40;goto _aedd ;_dcdc :_ggf =9;goto _aedd ;_abe :_ggf =41;goto _aedd ;_bga :_ggf =10;goto _aedd ;_dgbef :_ggf =42;goto _aedd ;
_dag :_ggf =11;goto _aedd ;_ffea :_ggf =43;goto _aedd ;_edfbf :_ggf =44;goto _aedd ;_ffg :_ggf =45;goto _aedd ;_eccg :_ggf =12;goto _aedd ;_fgef :_ggf =46;goto _aedd ;_gfe :_ggf =13;goto _aedd ;_abac :_ggf =14;goto _aedd ;_gaae :_ggf =15;goto _aedd ;_adec :_ggf =16;
goto _aedd ;_cbec :_ggf =47;goto _aedd ;_cdba :_ggf =17;goto _aedd ;_dfgee :_ggf =48;goto _aedd ;_aeb :_ggf =18;goto _aedd ;_ccfc :_ggf =19;goto _aedd ;_cbba :_ggf =20;goto _aedd ;_cbc :_ggf =49;goto _aedd ;_ffda :_ggf =50;goto _aedd ;_cggbg :_ggf =21;
goto _aedd ;_bbf :_ggf =22;goto _aedd ;_edff :_ggf =23;goto _aedd ;_dfbc :_ggf =24;goto _aedd ;_efa :_ggf =25;goto _aedd ;_eeac :_ggf =51;goto _aedd ;_cbgb :_ggf =26;goto _aedd ;_fea :_ggf =52;goto _aedd ;_gbaa :_ggf =53;goto _aedd ;_ggd :_ggf =54;goto _aedd ;
_fff :_ggf =55;goto _aedd ;_bfcd :_ggf =56;goto _aedd ;_fagg :_ggf =57;goto _aedd ;_bgc :_ggf =27;goto _aedd ;_abde :_ggf =28;goto _aedd ;_dca :_ggf =29;goto _aedd ;_fcd :_ggf =30;goto _aedd ;_dadd :_ggf =31;goto _aedd ;_ffdd :_ggf =58;goto _aedd ;_dff :_ggf =32;
goto _aedd ;_dgbf :_ggf =59;goto _aedd ;_efb :_ggf =33;goto _aedd ;_cbabg :_ggf =60;goto _aedd ;_efd :_ggf =61;goto _aedd ;_acca :_ggf =62;goto _aedd ;_aedd :{};if _edfb ==_dcb {switch _ggf {case 35:goto _febd ;case 0:goto _bee ;case 36:goto _fec ;case 37:goto _dfa ;
case 1:goto _bee ;case 2:goto _bee ;case 38:goto _ffde ;case 3:goto _fbe ;case 4:goto _fbe ;case 39:goto _ffde ;case 5:goto _fbe ;case 6:goto _fbe ;case 7:goto _fbe ;case 8:goto _bee ;case 40:goto _ffde ;case 9:goto _fbe ;case 41:goto _ffde ;case 10:goto _bee ;
case 42:goto _ffde ;case 11:goto _fbe ;case 43:goto _ffde ;case 44:goto _ffde ;case 45:goto _ffde ;case 12:goto _ddb ;case 46:goto _agc ;case 13:goto _eba ;case 14:goto _bee ;case 15:goto _bee ;case 16:goto _eba ;case 47:goto _fcaa ;case 17:goto _eaaf ;
case 48:goto _dgf ;case 18:goto _bafd ;case 19:goto _bafd ;case 20:goto _bee ;case 49:goto _febd ;case 50:goto _dea ;case 21:goto _bee ;case 22:goto _bee ;case 23:goto _bee ;case 24:goto _bee ;case 25:goto _bee ;case 51:goto _dea ;case 26:goto _ggbd ;case 52:goto _dea ;
case 53:goto _dea ;case 54:goto _bcda ;case 55:goto _febd ;case 56:goto _febd ;case 57:goto _febd ;case 27:goto _gfc ;case 28:goto _gfc ;case 29:goto _gfc ;case 30:goto _gfc ;case 31:goto _gfc ;case 58:goto _febd ;case 32:goto _bee ;case 59:goto _bee ;
case 33:goto _gfc ;case 60:goto _febd ;case 61:goto _fcaa ;case 62:goto _febd ;};};};if _deb > 0{copy (_gaa [0:],_gaa [_deb :]);};};_ =_dcb ;if _ggf ==_egg {_ag .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");
};};type Lexer struct{_gfb Format ;_afff []Format ;};func Parse (s string )[]Format {_abf :=Lexer {};_abf .Lex (_fe .NewReader (s ));_abf ._afff =append (_abf ._afff ,_abf ._gfb );return _abf ._afff ;};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_fa bool ;_dd bool ;_fg bool ;_gg bool ;_ggb bool ;_e bool ;_fd int64 ;_be int ;};const _de ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";


// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _a .Abs (v )>=_ba ||_a .Abs (v )<=_ce &&v !=0{return _ceb (v );};_edd :=make ([]byte ,0,15);_edd =_c .AppendFloat (_edd ,v ,'f',-1,64);if len (_edd )> 11{_cdg :=_edd [11]-'0';if _cdg >=5&&_cdg <=9{_edd [10]++;_edd =_edd [0:11];
_edd =_eadg (_edd );};_edd =_edd [0:11];}else if len (_edd )==11{if _edd [len (_edd )-1]=='9'{_edd [len (_edd )-1]++;_edd =_eadg (_edd );};};_edd =_acb (_edd );return string (_edd );};func _fde (_bbc int64 )int64 {if _bbc < 0{return -_bbc ;};return _bbc ;
};