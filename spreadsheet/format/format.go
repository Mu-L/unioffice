//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_f "bytes";_b "fmt";_eb "github.com/unidoc/unioffice/v2/common/logger";_g "io";_d "math";_cd "strconv";_c "strings";_e "time";);const _dgb int =34;func _ged (_fcd float64 )string {_dgg :=_cd .FormatFloat (_fcd ,'E',-1,64);_dda :=_cd .FormatFloat (_fcd ,'E',5,64);
if len (_dgg )< len (_dda ){return _cd .FormatFloat (_fcd ,'E',2,64);};return _dda ;};const _gde int =0;func _fcf (_cbg float64 ,_ga Format ,_ggf bool )string {if _ga ._ea {return NumberGeneric (_cbg );};_eaf :=make ([]byte ,0,20);_ca :=_d .Signbit (_cbg );
_beg :=_d .Abs (_cbg );_fe :=int64 (0);_feg :=int64 (0);if _ga .IsExponential {for _beg >=10{_feg ++;_beg /=10;};for _beg < 1{_feg --;_beg *=10;};}else if _ga ._gb {_beg *=100;}else if _ga ._da {if _ga ._dag ==0{_bf :=_d .Pow (10,float64 (_ga ._fc ));_gbb ,_eafb :=1.0,1.0;
_ =_gbb ;for _cbac :=1.0;_cbac < _bf ;_cbac ++{_ ,_baa :=_d .Modf (_beg *float64 (_cbac ));if _baa < _eafb {_eafb =_baa ;_gbb =_cbac ;if _baa ==0{break ;};};};_ga ._dag =int64 (_gbb );};_fe =int64 (_beg *float64 (_ga ._dag )+0.5);if len (_ga .Whole )> 0&&_fe > _ga ._dag {_fe =int64 (_beg *float64 (_ga ._dag ))%_ga ._dag ;
_beg -=float64 (_fe )/float64 (_ga ._dag );}else {_beg -=float64 (_fe )/float64 (_ga ._dag );if _d .Abs (_beg )< 1{_bb :=true ;for _ ,_eg :=range _ga .Whole {if _eg .Type ==FmtTypeDigitOpt {continue ;};if _eg .Type ==FmtTypeLiteral &&_eg .Literal ==' '{continue ;
};_bb =false ;};if _bb {_ga .Whole =nil ;};};};};_gfd :=1;for _ ,_gge :=range _ga .Fractional {if _gge .Type ==FmtTypeDigit ||_gge .Type ==FmtTypeDigitOpt {_gfd ++;};};_beg +=5*_d .Pow10 (-_gfd );_bfd ,_ab :=_d .Modf (_beg );_eaf =append (_eaf ,_bfe (_bfd ,_cbg ,_ga )...);
_eaf =append (_eaf ,_cf (_ab ,_cbg ,_ga )...);_eaf =append (_eaf ,_ggc (_feg ,_ga )...);if _ga ._da {_eaf =_cd .AppendInt (_eaf ,_fe ,10);_eaf =append (_eaf ,'/');_eaf =_cd .AppendInt (_eaf ,_ga ._dag ,10);};if !_ggf &&_ca {return "\u002d"+string (_eaf );
};return string (_eaf );};func _bdb (_aac _e .Time ,_abf float64 ,_fbb string )[]byte {_fdb :=[]byte {};_efe :=0;for _bda :=0;_bda < len (_fbb );_bda ++{var _ccf string ;if _fbb [_bda ]==':'{_ccf =string (_fbb [_efe :_bda ]);_efe =_bda +1;}else if _bda ==len (_fbb )-1{_ccf =string (_fbb [_efe :_bda +1]);
}else {continue ;};switch _ccf {case "\u0064":_fdb =_aac .AppendFormat (_fdb ,"\u0032");case "\u0068":_fdb =_aac .AppendFormat (_fdb ,"\u0033");case "\u0068\u0068":_fdb =_aac .AppendFormat (_fdb ,"\u0031\u0035");case "\u006d":_fdb =_aac .AppendFormat (_fdb ,"\u0034");
case "\u006d\u006d":_fdb =_aac .AppendFormat (_fdb ,"\u0030\u0034");case "\u0073":_fdb =_aac .Round (_e .Second ).AppendFormat (_fdb ,"\u0035");case "\u0073\u002e\u0030":_fdb =_aac .Round (_e .Second /10).AppendFormat (_fdb ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_fdb =_aac .Round (_e .Second /100).AppendFormat (_fdb ,"\u0035\u002e\u0030\u0030");
case "\u0073\u002e\u00300\u0030":_fdb =_aac .Round (_e .Second /1000).AppendFormat (_fdb ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_fdb =_aac .Round (_e .Second ).AppendFormat (_fdb ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_fdb =_aac .Round (_e .Second /10).AppendFormat (_fdb ,"\u0030\u0035\u002e\u0030");
case "\u0073\u0073\u002e0\u0030":_fdb =_aac .Round (_e .Second /100).AppendFormat (_fdb ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_fdb =_aac .Round (_e .Second /1000).AppendFormat (_fdb ,"\u0030\u0035\u002e\u0030\u0030\u0030");
case "\u0041\u004d\u002fP\u004d":_fdb =_aac .AppendFormat (_fdb ,"\u0050\u004d");case "\u005b\u0068\u005d":_fdb =_cd .AppendInt (_fdb ,int64 (_abf *24),10);case "\u005b\u006d\u005d":_fdb =_cd .AppendInt (_fdb ,int64 (_abf *24*60),10);case "\u005b\u0073\u005d":_fdb =_cd .AppendInt (_fdb ,int64 (_abf *24*60*60),10);
case "":default:_eb .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_ccf );};if _fbb [_bda ]==':'{_fdb =append (_fdb ,':');};};return _fdb ;
};const _fb ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";


// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_da bool ;_gb bool ;_ea bool ;_ebc bool ;_be bool ;_gd bool ;_dag int64 ;_fc int ;};

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};const _ccff int =34;func _cba (_bee []byte )[]byte {for _ebcf :=0;_ebcf < len (_bee )/2;_ebcf ++{_afc :=len (_bee )-1-_ebcf ;_bee [_ebcf ],_bee [_afc ]=_bee [_afc ],_bee [_ebcf ];};return _bee ;
};const _cdg int =-1;

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_ae :=Parse (f );var _gg Format ;if len (_ae )==1{_gg =_ae [0];}else if len (_ae )==4{_gg =_ae [3];};_af :=false ;for _ ,_fg :=range _gg .Whole {if _fg .Type ==FmtTypeText {_af =true ;};};if !_af {return v ;};_cg :=_f .Buffer {};
for _ ,_cb :=range _gg .Whole {switch _cb .Type {case FmtTypeLiteral :_cg .WriteByte (_cb .Literal );case FmtTypeText :_cg .WriteString (v );};};return _cg .String ();};type Lexer struct{_bab Format ;_ebf []Format ;};func _agb (_fcfe []byte )[]byte {for _afd :=len (_fcfe )-1;
_afd > 0;_afd --{if _fcfe [_afd ]=='9'+1{_fcfe [_afd ]='0';if _fcfe [_afd -1]=='.'{_afd --;};_fcfe [_afd -1]++;};};if _fcfe [0]=='9'+1{_fcfe [0]='0';copy (_fcfe [1:],_fcfe [0:]);_fcfe [0]='1';};return _fcfe ;};func _dfa (_fge []byte )[]byte {_egb :=len (_fge );
_efa :=false ;_eae :=false ;for _fba :=len (_fge )-1;_fba >=0;_fba --{if _fge [_fba ]=='0'&&!_eae &&!_efa {_egb =_fba ;}else if _fge [_fba ]=='.'{_efa =true ;}else {_eae =true ;};};if _efa &&_eae {if _fge [_egb -1]=='.'{_egb --;};return _fge [0:_egb ];
};return _fge ;};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_aa :=Parse (f );if len (_aa )==1{return _fcf (v ,_aa [0],false );}else if len (_aa )> 1&&v < 0{return _fcf (v ,_aa [1],true );
}else if len (_aa )> 2&&v ==0{return _fcf (v ,_aa [2],false );};return _fcf (v ,_aa [0],false );};const _fd =1e-10;func _dgc (_bef int64 )int64 {if _bef < 0{return -_bef ;};return _bef ;};func (_db FmtType )String ()string {if _db >=FmtType (len (_ba )-1){return _b .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_db );
};return _fb [_ba [_db ]:_ba [_db +1]];};

// FmtType is the type of a format token.
//
//go:generate stringer -type=FmtType
type FmtType byte ;func _cf (_gc ,_afb float64 ,_dac Format )[]byte {if len (_dac .Fractional )==0{return nil ;};_gaf :=_cd .AppendFloat (nil ,_gc ,'f',-1,64);if len (_gaf )> 2{_gaf =_gaf [2:];}else {_gaf =nil ;};_bde :=make ([]byte ,0,len (_gaf ));_bde =append (_bde ,'.');
_daaa :=0;_gfdd :for _eee :=0;_eee < len (_dac .Fractional );_eee ++{_cae :=_eee ;_agf :=_dac .Fractional [_eee ];switch _agf .Type {case FmtTypeDigit :if _cae < len (_gaf ){_bde =append (_bde ,_gaf [_cae ]);_daaa ++;}else {_bde =append (_bde ,'0');};case FmtTypeDigitOpt :if _cae >=0{_bde =append (_bde ,_gaf [_cae ]);
_daaa ++;}else {break _gfdd ;};case FmtTypeLiteral :_bde =append (_bde ,_agf .Literal );default:_eb .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_agf );
};};return _bde ;};

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_eff ,_ :=_cd .ParseFloat (v ,64);return Number (_eff ,f );};return String (v ,f );};

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _d .Abs (v )>=_dc ||_d .Abs (v )<=_fd &&v !=0{return _ged (v );};_fcb :=make ([]byte ,0,15);_fcb =_cd .AppendFloat (_fcb ,v ,'f',-1,64);if len (_fcb )> 11{_cbgad :=_fcb [11]-'0';if _cbgad >=5&&_cbgad <=9{_fcb [10]++;
_fcb =_fcb [0:11];_fcb =_agb (_fcb );};_fcb =_fcb [0:11];}else if len (_fcb )==11{if _fcb [len (_fcb )-1]=='9'{_fcb [len (_fcb )-1]++;_fcb =_agb (_fcb );};};_fcb =_dfa (_fcb );return string (_fcb );};func Parse (s string )[]Format {_ded :=Lexer {};_ded .Lex (_c .NewReader (s ));
_ded ._ebf =append (_ded ._ebf ,_ded ._bab );return _ded ._ebf ;};func _gbga (_fgd _e .Time )_e .Time {_fgd =_fgd .UTC ();return _e .Date (_fgd .Year (),_fgd .Month (),_fgd .Day (),_fgd .Hour (),_fgd .Minute (),_fgd .Second (),_fgd .Nanosecond (),_e .Local );
};const _aca int =-1;func _ggc (_fa int64 ,_dfc Format )[]byte {if !_dfc .IsExponential ||len (_dfc .Exponent )==0{return nil ;};_baad :=_cd .AppendInt (nil ,_dgc (_fa ),10);_ebb :=make ([]byte ,0,len (_baad )+2);_ebb =append (_ebb ,'E');if _fa >=0{_ebb =append (_ebb ,'+');
}else {_ebb =append (_ebb ,'-');_fa *=-1;};_dd :=0;_abc :for _bba :=len (_dfc .Exponent )-1;_bba >=0;_bba --{_cgf :=len (_baad )-1-_dd ;_dbd :=_dfc .Exponent [_bba ];switch _dbd .Type {case FmtTypeDigit :if _cgf >=0{_ebb =append (_ebb ,_baad [_cgf ]);_dd ++;
}else {_ebb =append (_ebb ,'0');};case FmtTypeDigitOpt :if _cgf >=0{_ebb =append (_ebb ,_baad [_cgf ]);_dd ++;}else {for _faf :=_bba ;_faf >=0;_faf --{_eec :=_dfc .Exponent [_faf ];if _eec .Type ==FmtTypeLiteral {_ebb =append (_ebb ,_eec .Literal );};};
break _abc ;};case FmtTypeLiteral :_ebb =append (_ebb ,_dbd .Literal );default:_eb .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_dbd );
};};if _dd < len (_baad ){_ebb =append (_ebb ,_baad [len (_baad )-_dd -1:_dd -1]...);};_cba (_ebb [2:]);return _ebb ;};

// AddToken adds a format token to the format.
func (_bc *Format )AddToken (t FmtType ,l []byte ){if _bc ._be {_bc ._be =false ;return ;};switch t {case FmtTypeDecimal :_bc ._gd =true ;case FmtTypeUnderscore :_bc ._be =true ;case FmtTypeText :_bc .Whole =append (_bc .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_bc .Whole =append (_bc .Whole ,Token {Type :t ,DateTime :string (l )});
case FmtTypePercent :_bc ._gb =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_bed :=range l {if _bc .IsExponential {_bc .Exponent =append (_bc .Exponent ,Token {Type :t ,Literal :_bed });
}else if !_bc ._gd {_bc .Whole =append (_bc .Whole ,Token {Type :t ,Literal :_bed });}else {_bc .Fractional =append (_bc .Fractional ,Token {Type :t ,Literal :_bed });};};case FmtTypeDigitOptThousands :_bc ._ebc =true ;case FmtTypeFraction :_dbg :=_c .Split (string (l ),"\u002f");
if len (_dbg )==2{_bc ._da =true ;_bc ._dag ,_ =_cd .ParseInt (_dbg [1],10,64);for _ ,_de :=range _dbg [1]{if _de =='?'||_de =='0'{_bc ._fc ++;};};};default:_eb .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );
};};func _bfe (_bcg ,_bgf float64 ,_ed Format )[]byte {if len (_ed .Whole )==0{return nil ;};_cga :=_e .Date (1899,12,30,0,0,0,0,_e .UTC );_bd :=_cga .Add (_e .Duration (_bgf *float64 (24*_e .Hour )));_bd =_gbga (_bd );_ebe :=_cd .AppendFloat (nil ,_bcg ,'f',-1,64);
_dbgc :=make ([]byte ,0,len (_ebe ));_ag :=0;_gbf :=1;_gfc :for _cde :=len (_ed .Whole )-1;_cde >=0;_cde --{_edb :=len (_ebe )-1-_ag ;_aec :=_ed .Whole [_cde ];switch _aec .Type {case FmtTypeDigit :if _edb >=0{_dbgc =append (_dbgc ,_ebe [_edb ]);_ag ++;
_gbf =_cde ;}else {_dbgc =append (_dbgc ,'0');};case FmtTypeDigitOpt :if _edb >=0{_dbgc =append (_dbgc ,_ebe [_edb ]);_ag ++;_gbf =_cde ;}else {for _ee :=_cde ;_ee >=0;_ee --{_dbb :=_ed .Whole [_ee ];if _dbb .Type ==FmtTypeLiteral {_dbgc =append (_dbgc ,_dbb .Literal );
};};break _gfc ;};case FmtTypeDollar :for _gec :=_ag ;_gec < len (_ebe );_gec ++{_dbgc =append (_dbgc ,_ebe [len (_ebe )-1-_gec ]);_ag ++;};_dbgc =append (_dbgc ,'$');case FmtTypeComma :if !_ed ._ebc {_dbgc =append (_dbgc ,',');};case FmtTypeLiteral :_dbgc =append (_dbgc ,_aec .Literal );
case FmtTypeDate :_dbgc =append (_dbgc ,_cba (_egf (_bd ,_aec .DateTime ))...);case FmtTypeTime :_dbgc =append (_dbgc ,_cba (_bdb (_bd ,_bgf ,_aec .DateTime ))...);default:_eb .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_aec );
};};_cdd :=_cba (_dbgc );if _ag < len (_ebe )&&(_ag !=0||_ed ._gd ){_df :=len (_ebe )-_ag ;_deb :=make ([]byte ,len (_cdd )+_df );copy (_deb ,_cdd [0:_gbf ]);copy (_deb [_gbf :],_ebe [0:]);copy (_deb [_gbf +_df :],_cdd [_gbf :]);_cdd =_deb ;};if _ed ._ebc {_fde :=_f .Buffer {};
_gba :=0;for _daa :=len (_cdd )-1;_daa >=0;_daa --{if !(_cdd [_daa ]>='0'&&_cdd [_daa ]<='9'){_gba ++;}else {break ;};};for _dg :=0;_dg < len (_cdd );_dg ++{_fbe :=(len (_cdd )-_dg -_gba );if _fbe %3==0&&_fbe !=0&&_dg !=0{_fde .WriteByte (',');};_fde .WriteByte (_cdd [_dg ]);
};_cdd =_fde .Bytes ();};return _cdd ;};func (_eccb *Lexer )nextFmt (){_eccb ._ebf =append (_eccb ._ebf ,_eccb ._bab );_eccb ._bab =Format {}};func (_ce *Lexer )Lex (r _g .Reader ){_effd ,_ebfc ,_cca :=0,0,0;_fadc :=-1;_ffe ,_acb ,_dbgf :=0,0,0;_ =_acb ;
_ =_dbgf ;_fcbd :=1;_ =_fcbd ;_aad :=make ([]byte ,4096);_ccd :=false ;for !_ccd {_bdg :=0;if _ffe > 0{_bdg =_ebfc -_ffe ;};_ebfc =0;_gbg ,_gdf :=r .Read (_aad [_bdg :]);if _gbg ==0||_gdf !=nil {_ccd =true ;};_cca =_gbg +_bdg ;if _cca < len (_aad ){_fadc =_cca ;
};{_effd =_ddd ;_ffe =0;_acb =0;_dbgf =0;};{if _ebfc ==_cca {goto _ebcg ;};switch _effd {case 34:goto _aag ;case 35:goto _bdc ;case 0:goto _eecg ;case 36:goto _afba ;case 37:goto _cfa ;case 1:goto _gcg ;case 2:goto _fcdd ;case 38:goto _cef ;case 3:goto _abb ;
case 4:goto _edf ;case 39:goto _cff ;case 5:goto _gcdg ;case 6:goto _dcae ;case 7:goto _bdf ;case 8:goto _aef ;case 40:goto _ecb ;case 9:goto _gcdf ;case 41:goto _fbbb ;case 10:goto _bbb ;case 42:goto _ggce ;case 11:goto _gbfe ;case 43:goto _cce ;case 44:goto _befc ;
case 45:goto _eeb ;case 12:goto _ffb ;case 46:goto _egbc ;case 13:goto _caf ;case 14:goto _cac ;case 15:goto _ebbe ;case 16:goto _acd ;case 47:goto _bgcc ;case 17:goto _fbd ;case 48:goto _begc ;case 18:goto _eba ;case 19:goto _eac ;case 20:goto _egff ;
case 49:goto _ebg ;case 50:goto _cggb ;case 21:goto _cafe ;case 22:goto _dfg ;case 23:goto _degg ;case 24:goto _bbfe ;case 25:goto _cgb ;case 51:goto _aefe ;case 26:goto _dcb ;case 52:goto _gae ;case 53:goto _afe ;case 54:goto _gfb ;case 55:goto _dea ;
case 56:goto _caa ;case 57:goto _ecdc ;case 27:goto _bagb ;case 28:goto _dbef ;case 29:goto _fbeb ;case 30:goto _bade ;case 31:goto _abg ;case 58:goto _fec ;case 32:goto _eea ;case 59:goto _aea ;case 33:goto _bgb ;case 60:goto _abgb ;case 61:goto _gbgb ;
case 62:goto _dace ;};goto _ggcee ;_edgc :switch _dbgf {case 2:{_ebfc =(_acb )-1;_ce ._bab .AddToken (FmtTypeDigit ,nil );};case 3:{_ebfc =(_acb )-1;_ce ._bab .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_ebfc =(_acb )-1;};case 8:{_ebfc =(_acb )-1;_ce ._bab .AddToken (FmtTypePercent ,nil );
};case 13:{_ebfc =(_acb )-1;_ce ._bab .AddToken (FmtTypeFraction ,_aad [_ffe :_acb ]);};case 14:{_ebfc =(_acb )-1;_ce ._bab .AddToken (FmtTypeDate ,_aad [_ffe :_acb ]);};case 15:{_ebfc =(_acb )-1;_ce ._bab .AddToken (FmtTypeTime ,_aad [_ffe :_acb ]);};
case 16:{_ebfc =(_acb )-1;_ce ._bab .AddToken (FmtTypeTime ,_aad [_ffe :_acb ]);};case 18:{_ebfc =(_acb )-1;};case 20:{_ebfc =(_acb )-1;_ce ._bab .AddToken (FmtTypeLiteral ,_aad [_ffe :_acb ]);};case 21:{_ebfc =(_acb )-1;_ce ._bab .AddToken (FmtTypeLiteral ,_aad [_ffe +1:_acb -1]);
};};goto _bbc ;_deg :_ebfc =(_acb )-1;{_ce ._bab .AddToken (FmtTypeFraction ,_aad [_ffe :_acb ]);};goto _bbc ;_debg :_ebfc =(_acb )-1;{_ce ._bab .AddToken (FmtTypeDigitOpt ,nil );};goto _bbc ;_geea :_acb =_ebfc +1;{_ce ._bab .AddToken (FmtTypeDigitOptThousands ,nil );
};goto _bbc ;_gfaa :_ebfc =(_acb )-1;{_ce ._bab .AddToken (FmtTypePercent ,nil );};goto _bbc ;_afbg :_ebfc =(_acb )-1;{_ce ._bab .AddToken (FmtTypeDate ,_aad [_ffe :_acb ]);};goto _bbc ;_bgc :_ebfc =(_acb )-1;{_ce ._bab .AddToken (FmtTypeDigit ,nil );};
goto _bbc ;_gce :_ebfc =(_acb )-1;{_ce ._bab .AddToken (FmtTypeTime ,_aad [_ffe :_acb ]);};goto _bbc ;_fdc :_ebfc =(_acb )-1;{_ce ._bab .AddToken (FmtTypeLiteral ,_aad [_ffe :_acb ]);};goto _bbc ;_aadc :_acb =_ebfc +1;{_ce ._bab ._ea =true ;};goto _bbc ;
_bfc :_acb =_ebfc +1;{_ce ._bab .AddToken (FmtTypeLiteral ,_aad [_ffe :_acb ]);};goto _bbc ;_ddac :_acb =_ebfc +1;{_ce ._bab .AddToken (FmtTypeDollar ,nil );};goto _bbc ;_bega :_acb =_ebfc +1;{_ce ._bab .AddToken (FmtTypeComma ,nil );};goto _bbc ;_cab :_acb =_ebfc +1;
{_ce ._bab .AddToken (FmtTypeDecimal ,nil );};goto _bbc ;_ddgg :_acb =_ebfc +1;{_ce .nextFmt ();};goto _bbc ;_feed :_acb =_ebfc +1;{_ce ._bab .AddToken (FmtTypeText ,nil );};goto _bbc ;_ffg :_acb =_ebfc +1;{_ce ._bab .AddToken (FmtTypeUnderscore ,nil );
};goto _bbc ;_caeb :_acb =_ebfc ;_ebfc --;{_ce ._bab .AddToken (FmtTypeLiteral ,_aad [_ffe :_acb ]);};goto _bbc ;_dgcb :_acb =_ebfc ;_ebfc --;{_ce ._bab .AddToken (FmtTypeLiteral ,_aad [_ffe +1:_acb -1]);};goto _bbc ;_dbea :_acb =_ebfc ;_ebfc --;{_ce ._bab .AddToken (FmtTypeDigitOpt ,nil );
};goto _bbc ;_ecd :_acb =_ebfc ;_ebfc --;{_ce ._bab .AddToken (FmtTypeFraction ,_aad [_ffe :_acb ]);};goto _bbc ;_eaef :_acb =_ebfc ;_ebfc --;{_ce ._bab .AddToken (FmtTypePercent ,nil );};goto _bbc ;_bdba :_acb =_ebfc ;_ebfc --;{_ce ._bab .AddToken (FmtTypeDate ,_aad [_ffe :_acb ]);
};goto _bbc ;_dga :_acb =_ebfc ;_ebfc --;{_ce ._bab .AddToken (FmtTypeDigit ,nil );};goto _bbc ;_efg :_acb =_ebfc ;_ebfc --;{_ce ._bab .AddToken (FmtTypeTime ,_aad [_ffe :_acb ]);};goto _bbc ;_dbbe :_acb =_ebfc ;_ebfc --;{};goto _bbc ;_baf :_acb =_ebfc +1;
{_ce ._bab .IsExponential =true ;};goto _bbc ;_geccf :_acb =_ebfc +1;{_ce ._bab .AddToken (FmtTypeLiteral ,_aad [_ffe +1:_acb ]);};goto _bbc ;_bbc :_ffe =0;if _ebfc ++;_ebfc ==_cca {goto _cfb ;};_aag :_ffe =_ebfc ;switch _aad [_ebfc ]{case 34:goto _agbf ;
case 35:goto _gda ;case 36:goto _ddac ;case 37:goto _edc ;case 44:goto _bega ;case 46:goto _cab ;case 47:goto _egbf ;case 48:goto _dfab ;case 58:goto _egd ;case 59:goto _ddgg ;case 63:goto _dec ;case 64:goto _feed ;case 65:goto _afee ;case 69:goto _eaed ;
case 71:goto _ccc ;case 91:goto _dgag ;case 92:goto _agbd ;case 95:goto _ffg ;case 100:goto _egbf ;case 104:goto _egd ;case 109:goto _ada ;case 115:goto _dedc ;case 121:goto _cffg ;};if 49<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _cegd ;};goto _bfc ;_agbf :_acb =_ebfc +1;
_dbgf =20;goto _bec ;_bec :if _ebfc ++;_ebfc ==_cca {goto _baada ;};_bdc :if _aad [_ebfc ]==34{goto _bcc ;};goto _dad ;_dad :if _ebfc ++;_ebfc ==_cca {goto _aadb ;};_eecg :if _aad [_ebfc ]==34{goto _bcc ;};goto _dad ;_bcc :_acb =_ebfc +1;_dbgf =21;goto _gdb ;
_gdb :if _ebfc ++;_ebfc ==_cca {goto _gdeg ;};_afba :if _aad [_ebfc ]==34{goto _dad ;};goto _dgcb ;_gda :_acb =_ebfc +1;_dbgf =3;goto _bea ;_bea :if _ebfc ++;_ebfc ==_cca {goto _gafb ;};_cfa :switch _aad [_ebfc ]{case 35:goto _fdd ;case 37:goto _fdd ;case 44:goto _egg ;
case 47:goto _gcgb ;case 48:goto _fdd ;case 63:goto _fdd ;};goto _dbea ;_fdd :if _ebfc ++;_ebfc ==_cca {goto _bgbg ;};_gcg :switch _aad [_ebfc ]{case 35:goto _fdd ;case 37:goto _fdd ;case 47:goto _gcgb ;case 48:goto _fdd ;case 63:goto _fdd ;};goto _edgc ;
_gcgb :if _ebfc ++;_ebfc ==_cca {goto _cggd ;};_fcdd :switch _aad [_ebfc ]{case 35:goto _acaa ;case 37:goto _cbd ;case 48:goto _daad ;case 63:goto _acaa ;};if 49<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _gdg ;};goto _edgc ;_acaa :_acb =_ebfc +1;goto _ccdd ;
_ccdd :if _ebfc ++;_ebfc ==_cca {goto _cabc ;};_cef :switch _aad [_ebfc ]{case 35:goto _acaa ;case 37:goto _acaa ;case 44:goto _acaa ;case 46:goto _acaa ;case 48:goto _acaa ;case 63:goto _acaa ;case 65:goto _daf ;};goto _ecd ;_daf :if _ebfc ++;_ebfc ==_cca {goto _bge ;
};_abb :switch _aad [_ebfc ]{case 47:goto _gea ;case 77:goto _cfe ;};goto _deg ;_gea :if _ebfc ++;_ebfc ==_cca {goto _faca ;};_edf :if _aad [_ebfc ]==80{goto _ddad ;};goto _deg ;_ddad :_acb =_ebfc +1;goto _bbe ;_bbe :if _ebfc ++;_ebfc ==_cca {goto _aff ;
};_cff :if _aad [_ebfc ]==65{goto _daf ;};goto _ecd ;_cfe :if _ebfc ++;_ebfc ==_cca {goto _cabf ;};_gcdg :if _aad [_ebfc ]==47{goto _gbd ;};goto _deg ;_gbd :if _ebfc ++;_ebfc ==_cca {goto _acbc ;};_dcae :if _aad [_ebfc ]==80{goto _adb ;};goto _deg ;_adb :if _ebfc ++;
_ebfc ==_cca {goto _deda ;};_bdf :if _aad [_ebfc ]==77{goto _ddad ;};goto _deg ;_cbd :if _ebfc ++;_ebfc ==_cca {goto _cbcb ;};_aef :switch _aad [_ebfc ]{case 35:goto _bag ;case 37:goto _gbae ;case 63:goto _bag ;};if 48<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _ebec ;
};goto _edgc ;_bag :_acb =_ebfc +1;goto _fbg ;_fbg :if _ebfc ++;_ebfc ==_cca {goto _gdec ;};_ecb :switch _aad [_ebfc ]{case 35:goto _acaa ;case 37:goto _dgd ;case 44:goto _acaa ;case 46:goto _acaa ;case 48:goto _acaa ;case 63:goto _acaa ;case 65:goto _daf ;
};goto _ecd ;_dgd :if _ebfc ++;_ebfc ==_cca {goto _dde ;};_gcdf :switch _aad [_ebfc ]{case 35:goto _gcdd ;case 44:goto _gcdd ;case 46:goto _gcdd ;case 48:goto _gcdd ;case 63:goto _gcdd ;};goto _deg ;_gcdd :_acb =_ebfc +1;goto _dedb ;_dedb :if _ebfc ++;
_ebfc ==_cca {goto _faa ;};_fbbb :switch _aad [_ebfc ]{case 35:goto _gcdd ;case 44:goto _gcdd ;case 46:goto _gcdd ;case 48:goto _gcdd ;case 63:goto _gcdd ;case 65:goto _daf ;};goto _ecd ;_gbae :if _ebfc ++;_ebfc ==_cca {goto _afca ;};_bbb :if _aad [_ebfc ]==37{goto _gbae ;
};if 48<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _ebec ;};goto _edgc ;_ebec :_acb =_ebfc +1;_dbgf =13;goto _dgcg ;_dgcg :if _ebfc ++;_ebfc ==_cca {goto _egc ;};_ggce :switch _aad [_ebfc ]{case 35:goto _acaa ;case 37:goto _eeg ;case 44:goto _acaa ;case 46:goto _acaa ;
case 48:goto _aefb ;case 63:goto _acaa ;case 65:goto _daf ;};if 49<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _ebec ;};goto _ecd ;_eeg :if _ebfc ++;_ebfc ==_cca {goto _ace ;};_gbfe :switch _aad [_ebfc ]{case 35:goto _gcdd ;case 37:goto _gbae ;case 44:goto _gcdd ;
case 46:goto _gcdd ;case 63:goto _gcdd ;};if 48<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _ebec ;};goto _deg ;_aefb :_acb =_ebfc +1;goto _fafa ;_fafa :if _ebfc ++;_ebfc ==_cca {goto _babe ;};_cce :switch _aad [_ebfc ]{case 35:goto _acaa ;case 37:goto _aefb ;
case 44:goto _acaa ;case 46:goto _acaa ;case 48:goto _aefb ;case 63:goto _acaa ;case 65:goto _daf ;};if 49<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _ebec ;};goto _ecd ;_daad :_acb =_ebfc +1;goto _fcg ;_fcg :if _ebfc ++;_ebfc ==_cca {goto _eafc ;};_befc :switch _aad [_ebfc ]{case 35:goto _acaa ;
case 37:goto _aefb ;case 44:goto _acaa ;case 46:goto _acaa ;case 48:goto _daad ;case 63:goto _acaa ;case 65:goto _daf ;};if 49<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _gdg ;};goto _ecd ;_gdg :_acb =_ebfc +1;goto _fdg ;_fdg :if _ebfc ++;_ebfc ==_cca {goto _cdf ;
};_eeb :switch _aad [_ebfc ]{case 35:goto _acaa ;case 37:goto _ebec ;case 44:goto _acaa ;case 46:goto _acaa ;case 48:goto _daad ;case 63:goto _acaa ;case 65:goto _daf ;};if 49<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _gdg ;};goto _ecd ;_egg :if _ebfc ++;
_ebfc ==_cca {goto _dgbd ;};_ffb :if _aad [_ebfc ]==35{goto _geea ;};goto _debg ;_edc :_acb =_ebfc +1;_dbgf =8;goto _cbc ;_cbc :if _ebfc ++;_ebfc ==_cca {goto _dcbd ;};_egbc :switch _aad [_ebfc ]{case 35:goto _afbe ;case 37:goto _gcba ;case 48:goto _gacf ;
case 63:goto _afbe ;};if 49<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _fgf ;};goto _eaef ;_afbe :if _ebfc ++;_ebfc ==_cca {goto _dcag ;};_caf :switch _aad [_ebfc ]{case 35:goto _afbe ;case 47:goto _gcgb ;case 48:goto _afbe ;case 63:goto _afbe ;};goto _gfaa ;
_gcba :if _ebfc ++;_ebfc ==_cca {goto _dfae ;};_cac :if _aad [_ebfc ]==37{goto _gcba ;};if 48<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _fgf ;};goto _edgc ;_fgf :if _ebfc ++;_ebfc ==_cca {goto _acba ;};_ebbe :switch _aad [_ebfc ]{case 37:goto _gcba ;case 47:goto _gcgb ;
};if 48<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _fgf ;};goto _edgc ;_gacf :if _ebfc ++;_ebfc ==_cca {goto _cbaa ;};_acd :switch _aad [_ebfc ]{case 35:goto _afbe ;case 37:goto _gcba ;case 47:goto _gcgb ;case 48:goto _gacf ;case 63:goto _afbe ;};if 49<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _fgf ;
};goto _gfaa ;_egbf :_acb =_ebfc +1;goto _cfd ;_cfd :if _ebfc ++;_ebfc ==_cca {goto _adaa ;};_bgcc :switch _aad [_ebfc ]{case 47:goto _egbf ;case 100:goto _egbf ;case 109:goto _egbf ;case 121:goto _acc ;};goto _bdba ;_acc :if _ebfc ++;_ebfc ==_cca {goto _gfgc ;
};_fbd :if _aad [_ebfc ]==121{goto _egbf ;};goto _afbg ;_dfab :_acb =_ebfc +1;_dbgf =2;goto _def ;_def :if _ebfc ++;_ebfc ==_cca {goto _abcd ;};_begc :switch _aad [_ebfc ]{case 35:goto _fdd ;case 37:goto _gefe ;case 47:goto _gcgb ;case 48:goto _fbc ;case 63:goto _fdd ;
};if 49<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _ceg ;};goto _dga ;_gefe :if _ebfc ++;_ebfc ==_cca {goto _ege ;};_eba :switch _aad [_ebfc ]{case 35:goto _fdd ;case 37:goto _gefe ;case 47:goto _gcgb ;case 48:goto _gefe ;case 63:goto _fdd ;};if 49<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _fgf ;
};goto _bgc ;_fbc :if _ebfc ++;_ebfc ==_cca {goto _aeg ;};_eac :switch _aad [_ebfc ]{case 35:goto _fdd ;case 37:goto _gefe ;case 47:goto _gcgb ;case 48:goto _fbc ;case 63:goto _fdd ;};if 49<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _ceg ;};goto _bgc ;_ceg :if _ebfc ++;
_ebfc ==_cca {goto _bce ;};_egff :switch _aad [_ebfc ]{case 37:goto _fgf ;case 47:goto _gcgb ;};if 48<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _ceg ;};goto _edgc ;_cegd :_acb =_ebfc +1;_dbgf =20;goto _agbe ;_agbe :if _ebfc ++;_ebfc ==_cca {goto _cabb ;};
_ebg :switch _aad [_ebfc ]{case 37:goto _fgf ;case 47:goto _gcgb ;};if 48<=_aad [_ebfc ]&&_aad [_ebfc ]<=57{goto _ceg ;};goto _caeb ;_egd :_acb =_ebfc +1;_dbgf =15;goto _cfee ;_cfee :if _ebfc ++;_ebfc ==_cca {goto _fbca ;};_cggb :switch _aad [_ebfc ]{case 58:goto _egd ;
case 65:goto _gdga ;case 104:goto _egd ;case 109:goto _egd ;case 115:goto _dedc ;};goto _efg ;_gdga :if _ebfc ++;_ebfc ==_cca {goto _babf ;};_cafe :switch _aad [_ebfc ]{case 47:goto _gdd ;case 77:goto _adc ;};goto _edgc ;_gdd :if _ebfc ++;_ebfc ==_cca {goto _ffgc ;
};_dfg :if _aad [_ebfc ]==80{goto _egd ;};goto _edgc ;_adc :if _ebfc ++;_ebfc ==_cca {goto _aaf ;};_degg :if _aad [_ebfc ]==47{goto _dcc ;};goto _edgc ;_dcc :if _ebfc ++;_ebfc ==_cca {goto _feede ;};_bbfe :if _aad [_ebfc ]==80{goto _fade ;};goto _edgc ;
_fade :if _ebfc ++;_ebfc ==_cca {goto _bdd ;};_cgb :if _aad [_ebfc ]==77{goto _egd ;};goto _edgc ;_dedc :_acb =_ebfc +1;_dbgf =15;goto _egbfb ;_egbfb :if _ebfc ++;_ebfc ==_cca {goto _gede ;};_aefe :switch _aad [_ebfc ]{case 46:goto _gddd ;case 58:goto _egd ;
case 65:goto _gdga ;case 104:goto _egd ;case 109:goto _egd ;case 115:goto _dedc ;};goto _efg ;_gddd :if _ebfc ++;_ebfc ==_cca {goto _gedb ;};_dcb :if _aad [_ebfc ]==48{goto _bae ;};goto _gce ;_bae :_acb =_ebfc +1;_dbgf =15;goto _ade ;_ade :if _ebfc ++;
_ebfc ==_cca {goto _feb ;};_gae :switch _aad [_ebfc ]{case 48:goto _ffac ;case 58:goto _egd ;case 65:goto _gdga ;case 104:goto _egd ;case 109:goto _egd ;case 115:goto _dedc ;};goto _efg ;_ffac :_acb =_ebfc +1;_dbgf =15;goto _cag ;_cag :if _ebfc ++;_ebfc ==_cca {goto _bbd ;
};_afe :switch _aad [_ebfc ]{case 48:goto _egd ;case 58:goto _egd ;case 65:goto _gdga ;case 104:goto _egd ;case 109:goto _egd ;case 115:goto _dedc ;};goto _efg ;_dec :_acb =_ebfc +1;_dbgf =5;goto _adca ;_adca :if _ebfc ++;_ebfc ==_cca {goto _feeb ;};_gfb :switch _aad [_ebfc ]{case 35:goto _fdd ;
case 37:goto _fdd ;case 47:goto _gcgb ;case 48:goto _fdd ;case 63:goto _fdd ;};goto _dbbe ;_afee :_acb =_ebfc +1;_dbgf =20;goto _gff ;_gff :if _ebfc ++;_ebfc ==_cca {goto _fdfa ;};_dea :switch _aad [_ebfc ]{case 47:goto _gdd ;case 77:goto _adc ;};goto _caeb ;
_eaed :if _ebfc ++;_ebfc ==_cca {goto _gdff ;};_caa :switch _aad [_ebfc ]{case 43:goto _baf ;case 45:goto _baf ;};goto _caeb ;_ccc :_acb =_ebfc +1;goto _egfb ;_egfb :if _ebfc ++;_ebfc ==_cca {goto _ffba ;};_ecdc :if _aad [_ebfc ]==101{goto _egba ;};goto _caeb ;
_egba :if _ebfc ++;_ebfc ==_cca {goto _cee ;};_bagb :if _aad [_ebfc ]==110{goto _fgb ;};goto _fdc ;_fgb :if _ebfc ++;_ebfc ==_cca {goto _cdgg ;};_dbef :if _aad [_ebfc ]==101{goto _edd ;};goto _fdc ;_edd :if _ebfc ++;_ebfc ==_cca {goto _fcgf ;};_fbeb :if _aad [_ebfc ]==114{goto _ebeg ;
};goto _fdc ;_ebeg :if _ebfc ++;_ebfc ==_cca {goto _dgcd ;};_bade :if _aad [_ebfc ]==97{goto _fef ;};goto _fdc ;_fef :if _ebfc ++;_ebfc ==_cca {goto _dcd ;};_abg :if _aad [_ebfc ]==108{goto _aadc ;};goto _fdc ;_dgag :_acb =_ebfc +1;_dbgf =20;goto _bcgd ;
_bcgd :if _ebfc ++;_ebfc ==_cca {goto _dfcb ;};_fec :switch _aad [_ebfc ]{case 104:goto _bgg ;case 109:goto _bgg ;case 115:goto _bgg ;};goto _abfd ;_abfd :if _ebfc ++;_ebfc ==_cca {goto _edcf ;};_eea :if _aad [_ebfc ]==93{goto _edge ;};goto _abfd ;_edge :_acb =_ebfc +1;
_dbgf =18;goto _dbefg ;_ega :_acb =_ebfc +1;_dbgf =16;goto _dbefg ;_dbefg :if _ebfc ++;_ebfc ==_cca {goto _fbdg ;};_aea :if _aad [_ebfc ]==93{goto _edge ;};goto _abfd ;_bgg :if _ebfc ++;_ebfc ==_cca {goto _ccb ;};_bgb :if _aad [_ebfc ]==93{goto _ega ;};
goto _abfd ;_agbd :if _ebfc ++;_ebfc ==_cca {goto _ggfe ;};_abgb :goto _geccf ;_ada :_acb =_ebfc +1;_dbgf =14;goto _fac ;_fac :if _ebfc ++;_ebfc ==_cca {goto _ffeb ;};_gbgb :switch _aad [_ebfc ]{case 47:goto _egbf ;case 58:goto _egd ;case 65:goto _gdga ;
case 100:goto _egbf ;case 104:goto _egd ;case 109:goto _ada ;case 115:goto _dedc ;case 121:goto _acc ;};goto _bdba ;_cffg :if _ebfc ++;_ebfc ==_cca {goto _gfbc ;};_dace :if _aad [_ebfc ]==121{goto _egbf ;};goto _caeb ;_ggcee :_cfb :_effd =34;goto _ebcg ;
_baada :_effd =35;goto _ebcg ;_aadb :_effd =0;goto _ebcg ;_gdeg :_effd =36;goto _ebcg ;_gafb :_effd =37;goto _ebcg ;_bgbg :_effd =1;goto _ebcg ;_cggd :_effd =2;goto _ebcg ;_cabc :_effd =38;goto _ebcg ;_bge :_effd =3;goto _ebcg ;_faca :_effd =4;goto _ebcg ;
_aff :_effd =39;goto _ebcg ;_cabf :_effd =5;goto _ebcg ;_acbc :_effd =6;goto _ebcg ;_deda :_effd =7;goto _ebcg ;_cbcb :_effd =8;goto _ebcg ;_gdec :_effd =40;goto _ebcg ;_dde :_effd =9;goto _ebcg ;_faa :_effd =41;goto _ebcg ;_afca :_effd =10;goto _ebcg ;
_egc :_effd =42;goto _ebcg ;_ace :_effd =11;goto _ebcg ;_babe :_effd =43;goto _ebcg ;_eafc :_effd =44;goto _ebcg ;_cdf :_effd =45;goto _ebcg ;_dgbd :_effd =12;goto _ebcg ;_dcbd :_effd =46;goto _ebcg ;_dcag :_effd =13;goto _ebcg ;_dfae :_effd =14;goto _ebcg ;
_acba :_effd =15;goto _ebcg ;_cbaa :_effd =16;goto _ebcg ;_adaa :_effd =47;goto _ebcg ;_gfgc :_effd =17;goto _ebcg ;_abcd :_effd =48;goto _ebcg ;_ege :_effd =18;goto _ebcg ;_aeg :_effd =19;goto _ebcg ;_bce :_effd =20;goto _ebcg ;_cabb :_effd =49;goto _ebcg ;
_fbca :_effd =50;goto _ebcg ;_babf :_effd =21;goto _ebcg ;_ffgc :_effd =22;goto _ebcg ;_aaf :_effd =23;goto _ebcg ;_feede :_effd =24;goto _ebcg ;_bdd :_effd =25;goto _ebcg ;_gede :_effd =51;goto _ebcg ;_gedb :_effd =26;goto _ebcg ;_feb :_effd =52;goto _ebcg ;
_bbd :_effd =53;goto _ebcg ;_feeb :_effd =54;goto _ebcg ;_fdfa :_effd =55;goto _ebcg ;_gdff :_effd =56;goto _ebcg ;_ffba :_effd =57;goto _ebcg ;_cee :_effd =27;goto _ebcg ;_cdgg :_effd =28;goto _ebcg ;_fcgf :_effd =29;goto _ebcg ;_dgcd :_effd =30;goto _ebcg ;
_dcd :_effd =31;goto _ebcg ;_dfcb :_effd =58;goto _ebcg ;_edcf :_effd =32;goto _ebcg ;_fbdg :_effd =59;goto _ebcg ;_ccb :_effd =33;goto _ebcg ;_ggfe :_effd =60;goto _ebcg ;_ffeb :_effd =61;goto _ebcg ;_gfbc :_effd =62;goto _ebcg ;_ebcg :{};if _ebfc ==_fadc {switch _effd {case 35:goto _caeb ;
case 0:goto _edgc ;case 36:goto _dgcb ;case 37:goto _dbea ;case 1:goto _edgc ;case 2:goto _edgc ;case 38:goto _ecd ;case 3:goto _deg ;case 4:goto _deg ;case 39:goto _ecd ;case 5:goto _deg ;case 6:goto _deg ;case 7:goto _deg ;case 8:goto _edgc ;case 40:goto _ecd ;
case 9:goto _deg ;case 41:goto _ecd ;case 10:goto _edgc ;case 42:goto _ecd ;case 11:goto _deg ;case 43:goto _ecd ;case 44:goto _ecd ;case 45:goto _ecd ;case 12:goto _debg ;case 46:goto _eaef ;case 13:goto _gfaa ;case 14:goto _edgc ;case 15:goto _edgc ;
case 16:goto _gfaa ;case 47:goto _bdba ;case 17:goto _afbg ;case 48:goto _dga ;case 18:goto _bgc ;case 19:goto _bgc ;case 20:goto _edgc ;case 49:goto _caeb ;case 50:goto _efg ;case 21:goto _edgc ;case 22:goto _edgc ;case 23:goto _edgc ;case 24:goto _edgc ;
case 25:goto _edgc ;case 51:goto _efg ;case 26:goto _gce ;case 52:goto _efg ;case 53:goto _efg ;case 54:goto _dbbe ;case 55:goto _caeb ;case 56:goto _caeb ;case 57:goto _caeb ;case 27:goto _fdc ;case 28:goto _fdc ;case 29:goto _fdc ;case 30:goto _fdc ;
case 31:goto _fdc ;case 58:goto _caeb ;case 32:goto _edgc ;case 59:goto _edgc ;case 33:goto _fdc ;case 60:goto _caeb ;case 61:goto _bdba ;case 62:goto _caeb ;};};};if _ffe > 0{copy (_aad [0:],_aad [_ffe :]);};};_ =_fadc ;if _effd ==_aca {_eb .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");
};};func _egf (_dbc _e .Time ,_ddf string )[]byte {_gcb :=[]byte {};_gac :=0;for _fgc :=0;_fgc < len (_ddf );_fgc ++{var _afa string ;if _ddf [_fgc ]=='/'{_afa =string (_ddf [_gac :_fgc ]);_gac =_fgc +1;}else if _fgc ==len (_ddf )-1{_afa =string (_ddf [_gac :_fgc +1]);
}else {continue ;};switch _afa {case "\u0079\u0079":_gcb =_dbc .AppendFormat (_gcb ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_gcb =_dbc .AppendFormat (_gcb ,"\u0032\u0030\u0030\u0036");case "\u006d":_gcb =_dbc .AppendFormat (_gcb ,"\u0031");case "\u006d\u006d":_gcb =_dbc .AppendFormat (_gcb ,"\u0030\u0031");
case "\u006d\u006d\u006d":_gcb =_dbc .AppendFormat (_gcb ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_gcb =_dbc .AppendFormat (_gcb ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _dbc .Month (){case _e .January ,_e .July ,_e .June :_gcb =append (_gcb ,'J');
case _e .February :_gcb =append (_gcb ,'M');case _e .March ,_e .May :_gcb =append (_gcb ,'M');case _e .April ,_e .August :_gcb =append (_gcb ,'A');case _e .September :_gcb =append (_gcb ,'S');case _e .October :_gcb =append (_gcb ,'O');case _e .November :_gcb =append (_gcb ,'N');
case _e .December :_gcb =append (_gcb ,'D');};case "\u0064":_gcb =_dbc .AppendFormat (_gcb ,"\u0032");case "\u0064\u0064":_gcb =_dbc .AppendFormat (_gcb ,"\u0030\u0032");case "\u0064\u0064\u0064":_gcb =_dbc .AppendFormat (_gcb ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_gcb =_dbc .AppendFormat (_gcb ,"\u004d\u006f\u006e\u0064\u0061\u0079");
default:_eb .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_afa );};if _ddf [_fgc ]=='/'{_gcb =append (_gcb ,'/');};};return _gcb ;};const (FmtTypeLiteral FmtType =iota ;
FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);const _bcb int =0;var _ba =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};
const _ddd int =34;func IsNumber (data string )(_geb bool ){_edbc ,_ad ,_ead :=0,0,len (data );_fbf :=len (data );_fea ,_gga ,_ff :=0,0,0;_ =_gga ;_ =_ff ;_ =_fea ;{_edbc =_gde ;_fea =0;_gga =0;_ff =0;};{if _ad ==_ead {goto _bca ;};switch _edbc {case 0:goto _ddg ;
case 1:goto _fce ;case 2:goto _ddb ;case 3:goto _gfag ;case 4:goto _dbf ;case 5:goto _gbab ;case 6:goto _gcd ;case 7:goto _gbad ;};goto _efd ;_gfa :_gga =_ad ;_ad --;{_geb =false ;};goto _ecc ;_gef :_gga =_ad ;_ad --;{_geb =_gga ==len (data );};goto _ecc ;
_fee :_gga =_ad ;_ad --;{_geb =_gga ==len (data );};goto _ecc ;_fdf :switch _ff {case 2:{_ad =(_gga )-1;_geb =_gga ==len (data );};case 3:{_ad =(_gga )-1;_geb =false ;};};goto _ecc ;_ecc :_fea =0;if _ad ++;_ad ==_ead {goto _bcd ;};_ddg :_fea =_ad ;switch data [_ad ]{case 43:goto _cbb ;
case 45:goto _cbb ;};if 48<=data [_ad ]&&data [_ad ]<=57{goto _bad ;};goto _gfce ;_gfce :if _ad ++;_ad ==_ead {goto _ffa ;};_fce :goto _gfce ;_cbb :if _ad ++;_ad ==_ead {goto _cdeb ;};_ddb :if 48<=data [_ad ]&&data [_ad ]<=57{goto _bad ;};goto _gfce ;_bad :if _ad ++;
_ad ==_ead {goto _fbbc ;};_gfag :if data [_ad ]==46{goto _gecc ;};if 48<=data [_ad ]&&data [_ad ]<=57{goto _bad ;};goto _gfce ;_gecc :if _ad ++;_ad ==_ead {goto _dfce ;};_dbf :if 48<=data [_ad ]&&data [_ad ]<=57{goto _fab ;};goto _gfce ;_fab :if _ad ++;
_ad ==_ead {goto _bcdg ;};_gbab :if data [_ad ]==69{goto _cgd ;};if 48<=data [_ad ]&&data [_ad ]<=57{goto _fab ;};goto _gfce ;_cgd :if _ad ++;_ad ==_ead {goto _fad ;};_gcd :switch data [_ad ]{case 43:goto _dca ;case 45:goto _dca ;};goto _gfce ;_dca :_gga =_ad +1;
_ff =3;goto _fabc ;_gee :_gga =_ad +1;_ff =2;goto _fabc ;_fabc :if _ad ++;_ad ==_ead {goto _afdg ;};_gbad :if 48<=data [_ad ]&&data [_ad ]<=57{goto _gee ;};goto _gfce ;_efd :_bcd :_edbc =0;goto _bca ;_ffa :_edbc =1;goto _bca ;_cdeb :_edbc =2;goto _bca ;
_fbbc :_edbc =3;goto _bca ;_dfce :_edbc =4;goto _bca ;_bcdg :_edbc =5;goto _bca ;_fad :_edbc =6;goto _bca ;_afdg :_edbc =7;goto _bca ;_bca :{};if _ad ==_fbf {switch _edbc {case 1:goto _gfa ;case 2:goto _gfa ;case 3:goto _gef ;case 4:goto _gfa ;case 5:goto _fee ;
case 6:goto _gfa ;case 7:goto _fdf ;};};};if _edbc ==_aca {return false ;};return ;};const _dc =1e11;const _dbe int =0;