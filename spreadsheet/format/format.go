//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_e "bytes";_d "fmt";_bd "github.com/unidoc/unioffice/v2/common/logger";_cb "io";_a "math";_f "strconv";_df "strings";_b "time";);const _fd =1e-10;

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_af :=Parse (f );if len (_af )==1{return _cbg (v ,_af [0],false );}else if len (_af )> 1&&v < 0{return _cbg (v ,_af [1],true );
}else if len (_af )> 2&&v ==0{return _cbg (v ,_af [2],false );};return _cbg (v ,_af [0],false );};const _bf ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";
const _caf int =0;const _febd int =34;const _bge int =-1;func _gb (_ddd ,_gff float64 ,_fce Format )[]byte {if len (_fce .Fractional )==0{return nil ;};_eea :=_f .AppendFloat (nil ,_ddd ,'f',-1,64);if len (_eea )> 2{_eea =_eea [2:];}else {_eea =nil ;};
_cfa :=make ([]byte ,0,len (_eea ));_cfa =append (_cfa ,'.');_aa :=0;_cc :for _dgc :=0;_dgc < len (_fce .Fractional );_dgc ++{_bg :=_dgc ;_cbed :=_fce .Fractional [_dgc ];switch _cbed .Type {case FmtTypeDigit :if _bg < len (_eea ){_cfa =append (_cfa ,_eea [_bg ]);
_aa ++;}else {_cfa =append (_cfa ,'0');};case FmtTypeDigitOpt :if _bg >=0{_cfa =append (_cfa ,_eea [_bg ]);_aa ++;}else {break _cc ;};case FmtTypeLiteral :_cfa =append (_cfa ,_cbed .Literal );default:_bd .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_cbed );
};};return _cfa ;};func _gda (_aed []byte )[]byte {_cfd :=len (_aed );_dee :=false ;_ca :=false ;for _dda :=len (_aed )-1;_dda >=0;_dda --{if _aed [_dda ]=='0'&&!_ca &&!_dee {_cfd =_dda ;}else if _aed [_dda ]=='.'{_dee =true ;}else {_ca =true ;};};if _dee &&_ca {if _aed [_cfd -1]=='.'{_cfd --;
};return _aed [0:_cfd ];};return _aed ;};func _gcg (_cf []byte )[]byte {for _acff :=0;_acff < len (_cf )/2;_acff ++{_fdf :=len (_cf )-1-_acff ;_cf [_acff ],_cf [_fdf ]=_cf [_fdf ],_cf [_acff ];};return _cf ;};func _de (_ged int64 )int64 {if _ged < 0{return -_ged ;
};return _ged ;};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_ac bool ;_dad bool ;_bb bool ;_g bool ;_be bool ;_acd bool ;_bfa int64 ;_ga int ;};func _bga (_ffe _b .Time ,_adff float64 ,_gfa string )[]byte {_bded :=[]byte {};
_bcd :=0;for _cbc :=0;_cbc < len (_gfa );_cbc ++{var _cea string ;if _gfa [_cbc ]==':'{_cea =string (_gfa [_bcd :_cbc ]);_bcd =_cbc +1;}else if _cbc ==len (_gfa )-1{_cea =string (_gfa [_bcd :_cbc +1]);}else {continue ;};switch _cea {case "\u0064":_bded =_ffe .AppendFormat (_bded ,"\u0032");
case "\u0068":_bded =_ffe .AppendFormat (_bded ,"\u0033");case "\u0068\u0068":_bded =_ffe .AppendFormat (_bded ,"\u0031\u0035");case "\u006d":_bded =_ffe .AppendFormat (_bded ,"\u0034");case "\u006d\u006d":_bded =_ffe .AppendFormat (_bded ,"\u0030\u0034");
case "\u0073":_bded =_ffe .Round (_b .Second ).AppendFormat (_bded ,"\u0035");case "\u0073\u002e\u0030":_bded =_ffe .Round (_b .Second /10).AppendFormat (_bded ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_bded =_ffe .Round (_b .Second /100).AppendFormat (_bded ,"\u0035\u002e\u0030\u0030");
case "\u0073\u002e\u00300\u0030":_bded =_ffe .Round (_b .Second /1000).AppendFormat (_bded ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_bded =_ffe .Round (_b .Second ).AppendFormat (_bded ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_bded =_ffe .Round (_b .Second /10).AppendFormat (_bded ,"\u0030\u0035\u002e\u0030");
case "\u0073\u0073\u002e0\u0030":_bded =_ffe .Round (_b .Second /100).AppendFormat (_bded ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_bded =_ffe .Round (_b .Second /1000).AppendFormat (_bded ,"\u0030\u0035\u002e\u0030\u0030\u0030");
case "\u0041\u004d\u002fP\u004d":_bded =_ffe .AppendFormat (_bded ,"\u0050\u004d");case "\u005b\u0068\u005d":_bded =_f .AppendInt (_bded ,int64 (_adff *24),10);case "\u005b\u006d\u005d":_bded =_f .AppendInt (_bded ,int64 (_adff *24*60),10);case "\u005b\u0073\u005d":_bded =_f .AppendInt (_bded ,int64 (_adff *24*60*60),10);
case "":default:_bd .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_cea );};if _gfa [_cbc ]==':'{_bded =append (_bded ,':');};};return _bded ;
};var _da =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _a .Abs (v )>=_ea ||_a .Abs (v )<=_fd &&v !=0{return _dca (v );};_eff :=make ([]byte ,0,15);_eff =_f .AppendFloat (_eff ,v ,'f',-1,64);if len (_eff )> 11{_cfb :=_eff [11]-'0';if _cfb >=5&&_cfb <=9{_eff [10]++;_eff =_eff [0:11];
_eff =_gag (_eff );};_eff =_eff [0:11];}else if len (_eff )==11{if _eff [len (_eff )-1]=='9'{_eff [len (_eff )-1]++;_eff =_gag (_eff );};};_eff =_gda (_eff );return string (_eff );};func (_ec FmtType )String ()string {if _ec >=FmtType (len (_da )-1){return _d .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ec );
};return _bf [_da [_ec ]:_da [_ec +1]];};func _aaf (_dgg int64 ,_dbb Format )[]byte {if !_dbb .IsExponential ||len (_dbb .Exponent )==0{return nil ;};_fbb :=_f .AppendInt (nil ,_de (_dgg ),10);_adb :=make ([]byte ,0,len (_fbb )+2);_adb =append (_adb ,'E');
if _dgg >=0{_adb =append (_adb ,'+');}else {_adb =append (_adb ,'-');_dgg *=-1;};_dcff :=0;_ebg :for _acb :=len (_dbb .Exponent )-1;_acb >=0;_acb --{_fg :=len (_fbb )-1-_dcff ;_fe :=_dbb .Exponent [_acb ];switch _fe .Type {case FmtTypeDigit :if _fg >=0{_adb =append (_adb ,_fbb [_fg ]);
_dcff ++;}else {_adb =append (_adb ,'0');};case FmtTypeDigitOpt :if _fg >=0{_adb =append (_adb ,_fbb [_fg ]);_dcff ++;}else {for _dada :=_acb ;_dada >=0;_dada --{_eae :=_dbb .Exponent [_dada ];if _eae .Type ==FmtTypeLiteral {_adb =append (_adb ,_eae .Literal );
};};break _ebg ;};case FmtTypeLiteral :_adb =append (_adb ,_fe .Literal );default:_bd .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_fe );
};};if _dcff < len (_fbb ){_adb =append (_adb ,_fbb [len (_fbb )-_dcff -1:_dcff -1]...);};_gcg (_adb [2:]);return _adb ;};func _gag (_aga []byte )[]byte {for _gdb :=len (_aga )-1;_gdb > 0;_gdb --{if _aga [_gdb ]=='9'+1{_aga [_gdb ]='0';if _aga [_gdb -1]=='.'{_gdb --;
};_aga [_gdb -1]++;};};if _aga [0]=='9'+1{_aga [0]='0';copy (_aga [1:],_aga [0:]);_aga [0]='1';};return _aga ;};func _dca (_fcee float64 )string {_agf :=_f .FormatFloat (_fcee ,'E',-1,64);_cgc :=_f .FormatFloat (_fcee ,'E',5,64);if len (_agf )< len (_cgc ){return _f .FormatFloat (_fcee ,'E',2,64);
};return _cgc ;};const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);func _cbgc (_bde _b .Time ,_dddd string )[]byte {_agad :=[]byte {};
_efc :=0;for _egb :=0;_egb < len (_dddd );_egb ++{var _bea string ;if _dddd [_egb ]=='/'{_bea =string (_dddd [_efc :_egb ]);_efc =_egb +1;}else if _egb ==len (_dddd )-1{_bea =string (_dddd [_efc :_egb +1]);}else {continue ;};switch _bea {case "\u0079\u0079":_agad =_bde .AppendFormat (_agad ,"\u0030\u0036");
case "\u0079\u0079\u0079\u0079":_agad =_bde .AppendFormat (_agad ,"\u0032\u0030\u0030\u0036");case "\u006d":_agad =_bde .AppendFormat (_agad ,"\u0031");case "\u006d\u006d":_agad =_bde .AppendFormat (_agad ,"\u0030\u0031");case "\u006d\u006d\u006d":_agad =_bde .AppendFormat (_agad ,"\u004a\u0061\u006e");
case "\u006d\u006d\u006d\u006d":_agad =_bde .AppendFormat (_agad ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _bde .Month (){case _b .January ,_b .July ,_b .June :_agad =append (_agad ,'J');case _b .February :_agad =append (_agad ,'M');
case _b .March ,_b .May :_agad =append (_agad ,'M');case _b .April ,_b .August :_agad =append (_agad ,'A');case _b .September :_agad =append (_agad ,'S');case _b .October :_agad =append (_agad ,'O');case _b .November :_agad =append (_agad ,'N');case _b .December :_agad =append (_agad ,'D');
};case "\u0064":_agad =_bde .AppendFormat (_agad ,"\u0032");case "\u0064\u0064":_agad =_bde .AppendFormat (_agad ,"\u0030\u0032");case "\u0064\u0064\u0064":_agad =_bde .AppendFormat (_agad ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_agad =_bde .AppendFormat (_agad ,"\u004d\u006f\u006e\u0064\u0061\u0079");
default:_bd .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_bea );};if _dddd [_egb ]=='/'{_agad =append (_agad ,'/');};};return _agad ;};
func _dac (_dgcg _b .Time )_b .Time {_dgcg =_dgcg .UTC ();return _b .Date (_dgcg .Year (),_dgcg .Month (),_dgcg .Day (),_dgcg .Hour (),_dgcg .Minute (),_dgcg .Second (),_dgcg .Nanosecond (),_b .Local );};func (_fcb *Lexer )nextFmt (){_fcb ._eac =append (_fcb ._eac ,_fcb ._bfc );
_fcb ._bfc =Format {}};const _ggcd int =34;const _dfc int =0;const _abg int =34;func _bbe (_dge ,_gae float64 ,_fbd Format )[]byte {if len (_fbd .Whole )==0{return nil ;};_bfg :=_b .Date (1899,12,30,0,0,0,0,_b .UTC );_fbg :=_bfg .Add (_b .Duration (_gae *float64 (24*_b .Hour )));
_fbg =_dac (_fbg );_gde :=_f .AppendFloat (nil ,_dge ,'f',-1,64);_ecf :=make ([]byte ,0,len (_gde ));_ge :=0;_ff :=1;_gf :for _fa :=len (_fbd .Whole )-1;_fa >=0;_fa --{_geg :=len (_gde )-1-_ge ;_dfe :=_fbd .Whole [_fa ];switch _dfe .Type {case FmtTypeDigit :if _geg >=0{_ecf =append (_ecf ,_gde [_geg ]);
_ge ++;_ff =_fa ;}else {_ecf =append (_ecf ,'0');};case FmtTypeDigitOpt :if _geg >=0{_ecf =append (_ecf ,_gde [_geg ]);_ge ++;_ff =_fa ;}else {for _eef :=_fa ;_eef >=0;_eef --{_fbc :=_fbd .Whole [_eef ];if _fbc .Type ==FmtTypeLiteral {_ecf =append (_ecf ,_fbc .Literal );
};};break _gf ;};case FmtTypeDollar :for _bdc :=_ge ;_bdc < len (_gde );_bdc ++{_ecf =append (_ecf ,_gde [len (_gde )-1-_bdc ]);_ge ++;};_ecf =append (_ecf ,'$');case FmtTypeComma :if !_fbd ._g {_ecf =append (_ecf ,',');};case FmtTypeLiteral :_ecf =append (_ecf ,_dfe .Literal );
case FmtTypeDate :_ecf =append (_ecf ,_gcg (_cbgc (_fbg ,_dfe .DateTime ))...);case FmtTypeTime :_ecf =append (_ecf ,_gcg (_bga (_fbg ,_gae ,_dfe .DateTime ))...);default:_bd .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_dfe );
};};_dgf :=_gcg (_ecf );if _ge < len (_gde )&&(_ge !=0||_fbd ._acd ){_fc :=len (_gde )-_ge ;_adf :=make ([]byte ,len (_dgf )+_fc );copy (_adf ,_dgf [0:_ff ]);copy (_adf [_ff :],_gde [0:]);copy (_adf [_ff +_fc :],_dgf [_ff :]);_dgf =_adf ;};if _fbd ._g {_dcg :=_e .Buffer {};
_cgae :=0;for _dcb :=len (_dgf )-1;_dcb >=0;_dcb --{if !(_dgf [_dcb ]>='0'&&_dgf [_dcb ]<='9'){_cgae ++;}else {break ;};};for _ceb :=0;_ceb < len (_dgf );_ceb ++{_dd :=(len (_dgf )-_ceb -_cgae );if _dd %3==0&&_dd !=0&&_ceb !=0{_dcg .WriteByte (',');};_dcg .WriteByte (_dgf [_ceb ]);
};_dgf =_dcg .Bytes ();};return _dgf ;};func Parse (s string )[]Format {_feb :=Lexer {};_feb .Lex (_df .NewReader (s ));_feb ._eac =append (_feb ._eac ,_feb ._bfc );return _feb ._eac ;};

// FmtType is the type of a format token.
//
//go:generate stringer -type=FmtType
type FmtType byte ;const _fab int =-1;type Lexer struct{_bfc Format ;_eac []Format ;};

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_eb ,_ :=_f .ParseFloat (v ,64);return Number (_eb ,f );};return String (v ,f );};const _cef int =0;

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_acdd :=Parse (f );var _bfb Format ;if len (_acdd )==1{_bfb =_acdd [0];}else if len (_acdd )==4{_bfb =_acdd [3];};_bc :=false ;for _ ,_ce :=range _bfb .Whole {if _ce .Type ==FmtTypeText {_bc =true ;};};if !_bc {return v ;
};_ae :=_e .Buffer {};for _ ,_eaf :=range _bfb .Whole {switch _eaf .Type {case FmtTypeLiteral :_ae .WriteByte (_eaf .Literal );case FmtTypeText :_ae .WriteString (v );};};return _ae .String ();};func IsNumber (data string )(_fgf bool ){_dab ,_dcd ,_eed :=0,0,len (data );
_ebc :=len (data );_fdd ,_fbf ,_fcd :=0,0,0;_ =_fbf ;_ =_fcd ;_ =_fdd ;{_dab =_dfc ;_fdd =0;_fbf =0;_fcd =0;};{if _dcd ==_eed {goto _aae ;};switch _dab {case 0:goto _bfac ;case 1:goto _afb ;case 2:goto _fag ;case 3:goto _cfg ;case 4:goto _bfacb ;case 5:goto _gcgg ;
case 6:goto _fad ;case 7:goto _afg ;};goto _fgc ;_bff :_fbf =_dcd ;_dcd --;{_fgf =false ;};goto _abe ;_fff :_fbf =_dcd ;_dcd --;{_fgf =_fbf ==len (data );};goto _abe ;_ab :_fbf =_dcd ;_dcd --;{_fgf =_fbf ==len (data );};goto _abe ;_dgd :switch _fcd {case 2:{_dcd =(_fbf )-1;
_fgf =_fbf ==len (data );};case 3:{_dcd =(_fbf )-1;_fgf =false ;};};goto _abe ;_abe :_fdd =0;if _dcd ++;_dcd ==_eed {goto _gba ;};_bfac :_fdd =_dcd ;switch data [_dcd ]{case 43:goto _gdeg ;case 45:goto _gdeg ;};if 48<=data [_dcd ]&&data [_dcd ]<=57{goto _acg ;
};goto _gcgc ;_gcgc :if _dcd ++;_dcd ==_eed {goto _ffc ;};_afb :goto _gcgc ;_gdeg :if _dcd ++;_dcd ==_eed {goto _fcf ;};_fag :if 48<=data [_dcd ]&&data [_dcd ]<=57{goto _acg ;};goto _gcgc ;_acg :if _dcd ++;_dcd ==_eed {goto _ddc ;};_cfg :if data [_dcd ]==46{goto _ccg ;
};if 48<=data [_dcd ]&&data [_dcd ]<=57{goto _acg ;};goto _gcgc ;_ccg :if _dcd ++;_dcd ==_eed {goto _dcc ;};_bfacb :if 48<=data [_dcd ]&&data [_dcd ]<=57{goto _bdeg ;};goto _gcgc ;_bdeg :if _dcd ++;_dcd ==_eed {goto _ced ;};_gcgg :if data [_dcd ]==69{goto _acdde ;
};if 48<=data [_dcd ]&&data [_dcd ]<=57{goto _bdeg ;};goto _gcgc ;_acdde :if _dcd ++;_dcd ==_eed {goto _cd ;};_fad :switch data [_dcd ]{case 43:goto _cce ;case 45:goto _cce ;};goto _gcgc ;_cce :_fbf =_dcd +1;_fcd =3;goto _bfacg ;_dfb :_fbf =_dcd +1;_fcd =2;
goto _bfacg ;_bfacg :if _dcd ++;_dcd ==_eed {goto _aafc ;};_afg :if 48<=data [_dcd ]&&data [_dcd ]<=57{goto _dfb ;};goto _gcgc ;_fgc :_gba :_dab =0;goto _aae ;_ffc :_dab =1;goto _aae ;_fcf :_dab =2;goto _aae ;_ddc :_dab =3;goto _aae ;_dcc :_dab =4;goto _aae ;
_ced :_dab =5;goto _aae ;_cd :_dab =6;goto _aae ;_aafc :_dab =7;goto _aae ;_aae :{};if _dcd ==_ebc {switch _dab {case 1:goto _bff ;case 2:goto _bff ;case 3:goto _fff ;case 4:goto _bff ;case 5:goto _ab ;case 6:goto _bff ;case 7:goto _dgd ;};};};if _dab ==_bge {return false ;
};return ;};func (_cbd *Lexer )Lex (r _cb .Reader ){_dcaf ,_fde ,_agae :=0,0,0;_eebc :=-1;_ega ,_fec ,_ddad :=0,0,0;_ =_fec ;_ =_ddad ;_agg :=1;_ =_agg ;_fcfd :=make ([]byte ,4096);_egbb :=false ;for !_egbb {_edb :=0;if _ega > 0{_edb =_fde -_ega ;};_fde =0;
_cbeb ,_ada :=r .Read (_fcfd [_edb :]);if _cbeb ==0||_ada !=nil {_egbb =true ;};_agae =_cbeb +_edb ;if _agae < len (_fcfd ){_eebc =_agae ;};{_dcaf =_ggcd ;_ega =0;_fec =0;_ddad =0;};{if _fde ==_agae {goto _gedd ;};switch _dcaf {case 34:goto _fdb ;case 35:goto _afaa ;
case 0:goto _ccc ;case 36:goto _aba ;case 37:goto _cefb ;case 1:goto _fga ;case 2:goto _aab ;case 38:goto _ccd ;case 3:goto _gffe ;case 4:goto _efa ;case 39:goto _defa ;case 5:goto _aeb ;case 6:goto _gcf ;case 7:goto _fcba ;case 8:goto _acc ;case 40:goto _aggc ;
case 9:goto _abb ;case 41:goto _deg ;case 10:goto _adffg ;case 42:goto _caa ;case 11:goto _bcf ;case 43:goto _edge ;case 44:goto _gadb ;case 45:goto _ggb ;case 12:goto _edc ;case 46:goto _daa ;case 13:goto _gcaa ;case 14:goto _gdcb ;case 15:goto _egag ;
case 16:goto _dcad ;case 47:goto _fgd ;case 17:goto _affd ;case 48:goto _agd ;case 18:goto _egbg ;case 19:goto _effb ;case 20:goto _ddg ;case 49:goto _ba ;case 50:goto _gfb ;case 21:goto _eeba ;case 22:goto _agc ;case 23:goto _cdd ;case 24:goto _ddgb ;
case 25:goto _bcbd ;case 51:goto _gafd ;case 26:goto _gaad ;case 52:goto _dgga ;case 53:goto _gfc ;case 54:goto _cccd ;case 55:goto _fade ;case 56:goto _ccaf ;case 57:goto _aafd ;case 27:goto _gdab ;case 28:goto _fbbg ;case 29:goto _eag ;case 30:goto _efd ;
case 31:goto _cff ;case 58:goto _ccga ;case 32:goto _cffb ;case 59:goto _daac ;case 33:goto _bgdg ;case 60:goto _gfd ;case 61:goto _eggg ;case 62:goto _aede ;};goto _ceab ;_adab :switch _ddad {case 2:{_fde =(_fec )-1;_cbd ._bfc .AddToken (FmtTypeDigit ,nil );
};case 3:{_fde =(_fec )-1;_cbd ._bfc .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_fde =(_fec )-1;};case 8:{_fde =(_fec )-1;_cbd ._bfc .AddToken (FmtTypePercent ,nil );};case 13:{_fde =(_fec )-1;_cbd ._bfc .AddToken (FmtTypeFraction ,_fcfd [_ega :_fec ]);
};case 14:{_fde =(_fec )-1;_cbd ._bfc .AddToken (FmtTypeDate ,_fcfd [_ega :_fec ]);};case 15:{_fde =(_fec )-1;_cbd ._bfc .AddToken (FmtTypeTime ,_fcfd [_ega :_fec ]);};case 16:{_fde =(_fec )-1;_cbd ._bfc .AddToken (FmtTypeTime ,_fcfd [_ega :_fec ]);};case 18:{_fde =(_fec )-1;
};case 20:{_fde =(_fec )-1;_cbd ._bfc .AddToken (FmtTypeLiteral ,_fcfd [_ega :_fec ]);};case 21:{_fde =(_fec )-1;_cbd ._bfc .AddToken (FmtTypeLiteral ,_fcfd [_ega +1:_fec -1]);};};goto _fabe ;_edg :_fde =(_fec )-1;{_cbd ._bfc .AddToken (FmtTypeFraction ,_fcfd [_ega :_fec ]);
};goto _fabe ;_dbc :_fde =(_fec )-1;{_cbd ._bfc .AddToken (FmtTypeDigitOpt ,nil );};goto _fabe ;_fae :_fec =_fde +1;{_cbd ._bfc .AddToken (FmtTypeDigitOptThousands ,nil );};goto _fabe ;_gdc :_fde =(_fec )-1;{_cbd ._bfc .AddToken (FmtTypePercent ,nil );
};goto _fabe ;_dccg :_fde =(_fec )-1;{_cbd ._bfc .AddToken (FmtTypeDate ,_fcfd [_ega :_fec ]);};goto _fabe ;_aff :_fde =(_fec )-1;{_cbd ._bfc .AddToken (FmtTypeDigit ,nil );};goto _fabe ;_afa :_fde =(_fec )-1;{_cbd ._bfc .AddToken (FmtTypeTime ,_fcfd [_ega :_fec ]);
};goto _fabe ;_fcdc :_fde =(_fec )-1;{_cbd ._bfc .AddToken (FmtTypeLiteral ,_fcfd [_ega :_fec ]);};goto _fabe ;_dbg :_fec =_fde +1;{_cbd ._bfc ._bb =true ;};goto _fabe ;_adea :_fec =_fde +1;{_cbd ._bfc .AddToken (FmtTypeLiteral ,_fcfd [_ega :_fec ]);};
goto _fabe ;_ede :_fec =_fde +1;{_cbd ._bfc .AddToken (FmtTypeDollar ,nil );};goto _fabe ;_beea :_fec =_fde +1;{_cbd ._bfc .AddToken (FmtTypeComma ,nil );};goto _fabe ;_cdg :_fec =_fde +1;{_cbd ._bfc .AddToken (FmtTypeDecimal ,nil );};goto _fabe ;_agadd :_fec =_fde +1;
{_cbd .nextFmt ();};goto _fabe ;_ffcd :_fec =_fde +1;{_cbd ._bfc .AddToken (FmtTypeText ,nil );};goto _fabe ;_gfaa :_fec =_fde +1;{_cbd ._bfc .AddToken (FmtTypeUnderscore ,nil );};goto _fabe ;_faee :_fec =_fde ;_fde --;{_cbd ._bfc .AddToken (FmtTypeLiteral ,_fcfd [_ega :_fec ]);
};goto _fabe ;_bgd :_fec =_fde ;_fde --;{_cbd ._bfc .AddToken (FmtTypeLiteral ,_fcfd [_ega +1:_fec -1]);};goto _fabe ;_gbb :_fec =_fde ;_fde --;{_cbd ._bfc .AddToken (FmtTypeDigitOpt ,nil );};goto _fabe ;_afbe :_fec =_fde ;_fde --;{_cbd ._bfc .AddToken (FmtTypeFraction ,_fcfd [_ega :_fec ]);
};goto _fabe ;_defc :_fec =_fde ;_fde --;{_cbd ._bfc .AddToken (FmtTypePercent ,nil );};goto _fabe ;_gbaf :_fec =_fde ;_fde --;{_cbd ._bfc .AddToken (FmtTypeDate ,_fcfd [_ega :_fec ]);};goto _fabe ;_dfg :_fec =_fde ;_fde --;{_cbd ._bfc .AddToken (FmtTypeDigit ,nil );
};goto _fabe ;_eda :_fec =_fde ;_fde --;{_cbd ._bfc .AddToken (FmtTypeTime ,_fcfd [_ega :_fec ]);};goto _fabe ;_egg :_fec =_fde ;_fde --;{};goto _fabe ;_effd :_fec =_fde +1;{_cbd ._bfc .IsExponential =true ;};goto _fabe ;_fecg :_fec =_fde +1;{_cbd ._bfc .AddToken (FmtTypeLiteral ,_fcfd [_ega +1:_fec ]);
};goto _fabe ;_fabe :_ega =0;if _fde ++;_fde ==_agae {goto _fgb ;};_fdb :_ega =_fde ;switch _fcfd [_fde ]{case 34:goto _gaa ;case 35:goto _cca ;case 36:goto _ede ;case 37:goto _ffb ;case 44:goto _beea ;case 46:goto _cdg ;case 47:goto _daf ;case 48:goto _fbfd ;
case 58:goto _ace ;case 59:goto _agadd ;case 63:goto _fccg ;case 64:goto _ffcd ;case 65:goto _bcfg ;case 69:goto _bdca ;case 71:goto _ddf ;case 91:goto _ffbc ;case 92:goto _dfa ;case 95:goto _gfaa ;case 100:goto _daf ;case 104:goto _ace ;case 109:goto _edcd ;
case 115:goto _edade ;case 121:goto _ded ;};if 49<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _dgcf ;};goto _adea ;_gaa :_fec =_fde +1;_ddad =20;goto _fed ;_fed :if _fde ++;_fde ==_agae {goto _gcd ;};_afaa :if _fcfd [_fde ]==34{goto _fbga ;};goto _dff ;_dff :if _fde ++;
_fde ==_agae {goto _bfd ;};_ccc :if _fcfd [_fde ]==34{goto _fbga ;};goto _dff ;_fbga :_fec =_fde +1;_ddad =21;goto _fcc ;_fcc :if _fde ++;_fde ==_agae {goto _aca ;};_aba :if _fcfd [_fde ]==34{goto _dff ;};goto _bgd ;_cca :_fec =_fde +1;_ddad =3;goto _gaed ;
_gaed :if _fde ++;_fde ==_agae {goto _fdde ;};_cefb :switch _fcfd [_fde ]{case 35:goto _fcfdc ;case 37:goto _fcfdc ;case 44:goto _aebb ;case 47:goto _fadd ;case 48:goto _fcfdc ;case 63:goto _fcfdc ;};goto _gbb ;_fcfdc :if _fde ++;_fde ==_agae {goto _bffb ;
};_fga :switch _fcfd [_fde ]{case 35:goto _fcfdc ;case 37:goto _fcfdc ;case 47:goto _fadd ;case 48:goto _fcfdc ;case 63:goto _fcfdc ;};goto _adab ;_fadd :if _fde ++;_fde ==_agae {goto _fdfd ;};_aab :switch _fcfd [_fde ]{case 35:goto _gad ;case 37:goto _beeab ;
case 48:goto _fda ;case 63:goto _gad ;};if 49<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _adfg ;};goto _adab ;_gad :_fec =_fde +1;goto _fac ;_fac :if _fde ++;_fde ==_agae {goto _ceg ;};_ccd :switch _fcfd [_fde ]{case 35:goto _gad ;case 37:goto _gad ;case 44:goto _gad ;
case 46:goto _gad ;case 48:goto _gad ;case 63:goto _gad ;case 65:goto _gca ;};goto _afbe ;_gca :if _fde ++;_fde ==_agae {goto _adfgc ;};_gffe :switch _fcfd [_fde ]{case 47:goto _fbeg ;case 77:goto _fdbd ;};goto _edg ;_fbeg :if _fde ++;_fde ==_agae {goto _fcbg ;
};_efa :if _fcfd [_fde ]==80{goto _edad ;};goto _edg ;_edad :_fec =_fde +1;goto _bdf ;_bdf :if _fde ++;_fde ==_agae {goto _bgc ;};_defa :if _fcfd [_fde ]==65{goto _gca ;};goto _afbe ;_fdbd :if _fde ++;_fde ==_agae {goto _gcff ;};_aeb :if _fcfd [_fde ]==47{goto _bcb ;
};goto _edg ;_bcb :if _fde ++;_fde ==_agae {goto _gdcc ;};_gcf :if _fcfd [_fde ]==80{goto _gcb ;};goto _edg ;_gcb :if _fde ++;_fde ==_agae {goto _cgdb ;};_fcba :if _fcfd [_fde ]==77{goto _edad ;};goto _edg ;_beeab :if _fde ++;_fde ==_agae {goto _cgaa ;
};_acc :switch _fcfd [_fde ]{case 35:goto _dde ;case 37:goto _edga ;case 63:goto _dde ;};if 48<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _fbbd ;};goto _adab ;_dde :_fec =_fde +1;goto _dcbb ;_dcbb :if _fde ++;_fde ==_agae {goto _aef ;};_aggc :switch _fcfd [_fde ]{case 35:goto _gad ;
case 37:goto _ebe ;case 44:goto _gad ;case 46:goto _gad ;case 48:goto _gad ;case 63:goto _gad ;case 65:goto _gca ;};goto _afbe ;_ebe :if _fde ++;_fde ==_agae {goto _ggf ;};_abb :switch _fcfd [_fde ]{case 35:goto _beae ;case 44:goto _beae ;case 46:goto _beae ;
case 48:goto _beae ;case 63:goto _beae ;};goto _edg ;_beae :_fec =_fde +1;goto _gaf ;_gaf :if _fde ++;_fde ==_agae {goto _ffg ;};_deg :switch _fcfd [_fde ]{case 35:goto _beae ;case 44:goto _beae ;case 46:goto _beae ;case 48:goto _beae ;case 63:goto _beae ;
case 65:goto _gca ;};goto _afbe ;_edga :if _fde ++;_fde ==_agae {goto _gce ;};_adffg :if _fcfd [_fde ]==37{goto _edga ;};if 48<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _fbbd ;};goto _adab ;_fbbd :_fec =_fde +1;_ddad =13;goto _fcdg ;_fcdg :if _fde ++;_fde ==_agae {goto _beac ;
};_caa :switch _fcfd [_fde ]{case 35:goto _gad ;case 37:goto _ebce ;case 44:goto _gad ;case 46:goto _gad ;case 48:goto _gdad ;case 63:goto _gad ;case 65:goto _gca ;};if 49<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _fbbd ;};goto _afbe ;_ebce :if _fde ++;_fde ==_agae {goto _faeab ;
};_bcf :switch _fcfd [_fde ]{case 35:goto _beae ;case 37:goto _edga ;case 44:goto _beae ;case 46:goto _beae ;case 63:goto _beae ;};if 48<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _fbbd ;};goto _edg ;_gdad :_fec =_fde +1;goto _fef ;_fef :if _fde ++;_fde ==_agae {goto _cba ;
};_edge :switch _fcfd [_fde ]{case 35:goto _gad ;case 37:goto _gdad ;case 44:goto _gad ;case 46:goto _gad ;case 48:goto _gdad ;case 63:goto _gad ;case 65:goto _gca ;};if 49<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _fbbd ;};goto _afbe ;_fda :_fec =_fde +1;
goto _ccgd ;_ccgd :if _fde ++;_fde ==_agae {goto _bfad ;};_gadb :switch _fcfd [_fde ]{case 35:goto _gad ;case 37:goto _gdad ;case 44:goto _gad ;case 46:goto _gad ;case 48:goto _fda ;case 63:goto _gad ;case 65:goto _gca ;};if 49<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _adfg ;
};goto _afbe ;_adfg :_fec =_fde +1;goto _egd ;_egd :if _fde ++;_fde ==_agae {goto _fdg ;};_ggb :switch _fcfd [_fde ]{case 35:goto _gad ;case 37:goto _fbbd ;case 44:goto _gad ;case 46:goto _gad ;case 48:goto _fda ;case 63:goto _gad ;case 65:goto _gca ;};
if 49<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _adfg ;};goto _afbe ;_aebb :if _fde ++;_fde ==_agae {goto _edf ;};_edc :if _fcfd [_fde ]==35{goto _fae ;};goto _dbc ;_ffb :_fec =_fde +1;_ddad =8;goto _faea ;_faea :if _fde ++;_fde ==_agae {goto _cdf ;};_daa :switch _fcfd [_fde ]{case 35:goto _ddadg ;
case 37:goto _afc ;case 48:goto _cbcd ;case 63:goto _ddadg ;};if 49<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _abd ;};goto _defc ;_ddadg :if _fde ++;_fde ==_agae {goto _bgdb ;};_gcaa :switch _fcfd [_fde ]{case 35:goto _ddadg ;case 47:goto _fadd ;case 48:goto _ddadg ;
case 63:goto _ddadg ;};goto _gdc ;_afc :if _fde ++;_fde ==_agae {goto _gade ;};_gdcb :if _fcfd [_fde ]==37{goto _afc ;};if 48<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _abd ;};goto _adab ;_abd :if _fde ++;_fde ==_agae {goto _adee ;};_egag :switch _fcfd [_fde ]{case 37:goto _afc ;
case 47:goto _fadd ;};if 48<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _abd ;};goto _adab ;_cbcd :if _fde ++;_fde ==_agae {goto _ecg ;};_dcad :switch _fcfd [_fde ]{case 35:goto _ddadg ;case 37:goto _afc ;case 47:goto _fadd ;case 48:goto _cbcd ;case 63:goto _ddadg ;
};if 49<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _abd ;};goto _gdc ;_daf :_fec =_fde +1;goto _fffd ;_fffd :if _fde ++;_fde ==_agae {goto _gcba ;};_fgd :switch _fcfd [_fde ]{case 47:goto _daf ;case 100:goto _daf ;case 109:goto _daf ;case 121:goto _agff ;};
goto _gbaf ;_agff :if _fde ++;_fde ==_agae {goto _ffa ;};_affd :if _fcfd [_fde ]==121{goto _daf ;};goto _dccg ;_fbfd :_fec =_fde +1;_ddad =2;goto _ccb ;_ccb :if _fde ++;_fde ==_agae {goto _fceb ;};_agd :switch _fcfd [_fde ]{case 35:goto _fcfdc ;case 37:goto _dbgd ;
case 47:goto _fadd ;case 48:goto _bba ;case 63:goto _fcfdc ;};if 49<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _fecf ;};goto _dfg ;_dbgd :if _fde ++;_fde ==_agae {goto _afe ;};_egbg :switch _fcfd [_fde ]{case 35:goto _fcfdc ;case 37:goto _dbgd ;case 47:goto _fadd ;
case 48:goto _dbgd ;case 63:goto _fcfdc ;};if 49<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _abd ;};goto _aff ;_bba :if _fde ++;_fde ==_agae {goto _fcebf ;};_effb :switch _fcfd [_fde ]{case 35:goto _fcfdc ;case 37:goto _dbgd ;case 47:goto _fadd ;case 48:goto _bba ;
case 63:goto _fcfdc ;};if 49<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _fecf ;};goto _aff ;_fecf :if _fde ++;_fde ==_agae {goto _cbge ;};_ddg :switch _fcfd [_fde ]{case 37:goto _abd ;case 47:goto _fadd ;};if 48<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _fecf ;
};goto _adab ;_dgcf :_fec =_fde +1;_ddad =20;goto _ddcg ;_ddcg :if _fde ++;_fde ==_agae {goto _efae ;};_ba :switch _fcfd [_fde ]{case 37:goto _abd ;case 47:goto _fadd ;};if 48<=_fcfd [_fde ]&&_fcfd [_fde ]<=57{goto _fecf ;};goto _faee ;_ace :_fec =_fde +1;
_ddad =15;goto _aeg ;_aeg :if _fde ++;_fde ==_agae {goto _gfdb ;};_gfb :switch _fcfd [_fde ]{case 58:goto _ace ;case 65:goto _dfeb ;case 104:goto _ace ;case 109:goto _ace ;case 115:goto _edade ;};goto _eda ;_dfeb :if _fde ++;_fde ==_agae {goto _ffeg ;};
_eeba :switch _fcfd [_fde ]{case 47:goto _eca ;case 77:goto _cbedf ;};goto _adab ;_eca :if _fde ++;_fde ==_agae {goto _efe ;};_agc :if _fcfd [_fde ]==80{goto _ace ;};goto _adab ;_cbedf :if _fde ++;_fde ==_agae {goto _gfcg ;};_cdd :if _fcfd [_fde ]==47{goto _gee ;
};goto _adab ;_gee :if _fde ++;_fde ==_agae {goto _afca ;};_ddgb :if _fcfd [_fde ]==80{goto _ccgc ;};goto _adab ;_ccgc :if _fde ++;_fde ==_agae {goto _efdd ;};_bcbd :if _fcfd [_fde ]==77{goto _ace ;};goto _adab ;_edade :_fec =_fde +1;_ddad =15;goto _cfac ;
_cfac :if _fde ++;_fde ==_agae {goto _fbef ;};_gafd :switch _fcfd [_fde ]{case 46:goto _gaaf ;case 58:goto _ace ;case 65:goto _dfeb ;case 104:goto _ace ;case 109:goto _ace ;case 115:goto _edade ;};goto _eda ;_gaaf :if _fde ++;_fde ==_agae {goto _cdac ;
};_gaad :if _fcfd [_fde ]==48{goto _cda ;};goto _afa ;_cda :_fec =_fde +1;_ddad =15;goto _faa ;_faa :if _fde ++;_fde ==_agae {goto _feg ;};_dgga :switch _fcfd [_fde ]{case 48:goto _gbg ;case 58:goto _ace ;case 65:goto _dfeb ;case 104:goto _ace ;case 109:goto _ace ;
case 115:goto _edade ;};goto _eda ;_gbg :_fec =_fde +1;_ddad =15;goto _cgd ;_cgd :if _fde ++;_fde ==_agae {goto _adcf ;};_gfc :switch _fcfd [_fde ]{case 48:goto _ace ;case 58:goto _ace ;case 65:goto _dfeb ;case 104:goto _ace ;case 109:goto _ace ;case 115:goto _edade ;
};goto _eda ;_fccg :_fec =_fde +1;_ddad =5;goto _fea ;_fea :if _fde ++;_fde ==_agae {goto _cad ;};_cccd :switch _fcfd [_fde ]{case 35:goto _fcfdc ;case 37:goto _fcfdc ;case 47:goto _fadd ;case 48:goto _fcfdc ;case 63:goto _fcfdc ;};goto _egg ;_bcfg :_fec =_fde +1;
_ddad =20;goto _aedc ;_aedc :if _fde ++;_fde ==_agae {goto _gab ;};_fade :switch _fcfd [_fde ]{case 47:goto _eca ;case 77:goto _cbedf ;};goto _faee ;_bdca :if _fde ++;_fde ==_agae {goto _ggd ;};_ccaf :switch _fcfd [_fde ]{case 43:goto _effd ;case 45:goto _effd ;
};goto _faee ;_ddf :_fec =_fde +1;goto _adc ;_adc :if _fde ++;_fde ==_agae {goto _ddea ;};_aafd :if _fcfd [_fde ]==101{goto _gea ;};goto _faee ;_gea :if _fde ++;_fde ==_agae {goto _fdea ;};_gdab :if _fcfd [_fde ]==110{goto _cbgf ;};goto _fcdc ;_cbgf :if _fde ++;
_fde ==_agae {goto _gfg ;};_fbbg :if _fcfd [_fde ]==101{goto _beeb ;};goto _fcdc ;_beeb :if _fde ++;_fde ==_agae {goto _ggbd ;};_eag :if _fcfd [_fde ]==114{goto _gdcg ;};goto _fcdc ;_gdcg :if _fde ++;_fde ==_agae {goto _fgaf ;};_efd :if _fcfd [_fde ]==97{goto _ggce ;
};goto _fcdc ;_ggce :if _fde ++;_fde ==_agae {goto _dec ;};_cff :if _fcfd [_fde ]==108{goto _dbg ;};goto _fcdc ;_ffbc :_fec =_fde +1;_ddad =20;goto _egc ;_egc :if _fde ++;_fde ==_agae {goto _fba ;};_ccga :switch _fcfd [_fde ]{case 104:goto _cge ;case 109:goto _cge ;
case 115:goto _cge ;};goto _eeaa ;_eeaa :if _fde ++;_fde ==_agae {goto _daab ;};_cffb :if _fcfd [_fde ]==93{goto _ebd ;};goto _eeaa ;_ebd :_fec =_fde +1;_ddad =18;goto _fcbc ;_cag :_fec =_fde +1;_ddad =16;goto _fcbc ;_fcbc :if _fde ++;_fde ==_agae {goto _cbaa ;
};_daac :if _fcfd [_fde ]==93{goto _ebd ;};goto _eeaa ;_cge :if _fde ++;_fde ==_agae {goto _fddf ;};_bgdg :if _fcfd [_fde ]==93{goto _cag ;};goto _eeaa ;_dfa :if _fde ++;_fde ==_agae {goto _abac ;};_gfd :goto _fecg ;_edcd :_fec =_fde +1;_ddad =14;goto _dgef ;
_dgef :if _fde ++;_fde ==_agae {goto _bgf ;};_eggg :switch _fcfd [_fde ]{case 47:goto _daf ;case 58:goto _ace ;case 65:goto _dfeb ;case 100:goto _daf ;case 104:goto _ace ;case 109:goto _edcd ;case 115:goto _edade ;case 121:goto _agff ;};goto _gbaf ;_ded :if _fde ++;
_fde ==_agae {goto _gbgb ;};_aede :if _fcfd [_fde ]==121{goto _daf ;};goto _faee ;_ceab :_fgb :_dcaf =34;goto _gedd ;_gcd :_dcaf =35;goto _gedd ;_bfd :_dcaf =0;goto _gedd ;_aca :_dcaf =36;goto _gedd ;_fdde :_dcaf =37;goto _gedd ;_bffb :_dcaf =1;goto _gedd ;
_fdfd :_dcaf =2;goto _gedd ;_ceg :_dcaf =38;goto _gedd ;_adfgc :_dcaf =3;goto _gedd ;_fcbg :_dcaf =4;goto _gedd ;_bgc :_dcaf =39;goto _gedd ;_gcff :_dcaf =5;goto _gedd ;_gdcc :_dcaf =6;goto _gedd ;_cgdb :_dcaf =7;goto _gedd ;_cgaa :_dcaf =8;goto _gedd ;
_aef :_dcaf =40;goto _gedd ;_ggf :_dcaf =9;goto _gedd ;_ffg :_dcaf =41;goto _gedd ;_gce :_dcaf =10;goto _gedd ;_beac :_dcaf =42;goto _gedd ;_faeab :_dcaf =11;goto _gedd ;_cba :_dcaf =43;goto _gedd ;_bfad :_dcaf =44;goto _gedd ;_fdg :_dcaf =45;goto _gedd ;
_edf :_dcaf =12;goto _gedd ;_cdf :_dcaf =46;goto _gedd ;_bgdb :_dcaf =13;goto _gedd ;_gade :_dcaf =14;goto _gedd ;_adee :_dcaf =15;goto _gedd ;_ecg :_dcaf =16;goto _gedd ;_gcba :_dcaf =47;goto _gedd ;_ffa :_dcaf =17;goto _gedd ;_fceb :_dcaf =48;goto _gedd ;
_afe :_dcaf =18;goto _gedd ;_fcebf :_dcaf =19;goto _gedd ;_cbge :_dcaf =20;goto _gedd ;_efae :_dcaf =49;goto _gedd ;_gfdb :_dcaf =50;goto _gedd ;_ffeg :_dcaf =21;goto _gedd ;_efe :_dcaf =22;goto _gedd ;_gfcg :_dcaf =23;goto _gedd ;_afca :_dcaf =24;goto _gedd ;
_efdd :_dcaf =25;goto _gedd ;_fbef :_dcaf =51;goto _gedd ;_cdac :_dcaf =26;goto _gedd ;_feg :_dcaf =52;goto _gedd ;_adcf :_dcaf =53;goto _gedd ;_cad :_dcaf =54;goto _gedd ;_gab :_dcaf =55;goto _gedd ;_ggd :_dcaf =56;goto _gedd ;_ddea :_dcaf =57;goto _gedd ;
_fdea :_dcaf =27;goto _gedd ;_gfg :_dcaf =28;goto _gedd ;_ggbd :_dcaf =29;goto _gedd ;_fgaf :_dcaf =30;goto _gedd ;_dec :_dcaf =31;goto _gedd ;_fba :_dcaf =58;goto _gedd ;_daab :_dcaf =32;goto _gedd ;_cbaa :_dcaf =59;goto _gedd ;_fddf :_dcaf =33;goto _gedd ;
_abac :_dcaf =60;goto _gedd ;_bgf :_dcaf =61;goto _gedd ;_gbgb :_dcaf =62;goto _gedd ;_gedd :{};if _fde ==_eebc {switch _dcaf {case 35:goto _faee ;case 0:goto _adab ;case 36:goto _bgd ;case 37:goto _gbb ;case 1:goto _adab ;case 2:goto _adab ;case 38:goto _afbe ;
case 3:goto _edg ;case 4:goto _edg ;case 39:goto _afbe ;case 5:goto _edg ;case 6:goto _edg ;case 7:goto _edg ;case 8:goto _adab ;case 40:goto _afbe ;case 9:goto _edg ;case 41:goto _afbe ;case 10:goto _adab ;case 42:goto _afbe ;case 11:goto _edg ;case 43:goto _afbe ;
case 44:goto _afbe ;case 45:goto _afbe ;case 12:goto _dbc ;case 46:goto _defc ;case 13:goto _gdc ;case 14:goto _adab ;case 15:goto _adab ;case 16:goto _gdc ;case 47:goto _gbaf ;case 17:goto _dccg ;case 48:goto _dfg ;case 18:goto _aff ;case 19:goto _aff ;
case 20:goto _adab ;case 49:goto _faee ;case 50:goto _eda ;case 21:goto _adab ;case 22:goto _adab ;case 23:goto _adab ;case 24:goto _adab ;case 25:goto _adab ;case 51:goto _eda ;case 26:goto _afa ;case 52:goto _eda ;case 53:goto _eda ;case 54:goto _egg ;
case 55:goto _faee ;case 56:goto _faee ;case 57:goto _faee ;case 27:goto _fcdc ;case 28:goto _fcdc ;case 29:goto _fcdc ;case 30:goto _fcdc ;case 31:goto _fcdc ;case 58:goto _faee ;case 32:goto _adab ;case 59:goto _adab ;case 33:goto _fcdc ;case 60:goto _faee ;
case 61:goto _gbaf ;case 62:goto _faee ;};};};if _ega > 0{copy (_fcfd [0:],_fcfd [_ega :]);};};_ =_eebc ;if _dcaf ==_bge {_bd .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");};};

// AddToken adds a format token to the format.
func (_gg *Format )AddToken (t FmtType ,l []byte ){if _gg ._be {_gg ._be =false ;return ;};switch t {case FmtTypeDecimal :_gg ._acd =true ;case FmtTypeUnderscore :_gg ._be =true ;case FmtTypeText :_gg .Whole =append (_gg .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_gg .Whole =append (_gg .Whole ,Token {Type :t ,DateTime :string (l )});
case FmtTypePercent :_gg ._dad =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_gd :=range l {if _gg .IsExponential {_gg .Exponent =append (_gg .Exponent ,Token {Type :t ,Literal :_gd });
}else if !_gg ._acd {_gg .Whole =append (_gg .Whole ,Token {Type :t ,Literal :_gd });}else {_gg .Fractional =append (_gg .Fractional ,Token {Type :t ,Literal :_gd });};};case FmtTypeDigitOptThousands :_gg ._g =true ;case FmtTypeFraction :_cbe :=_df .Split (string (l ),"\u002f");
if len (_cbe )==2{_gg ._ac =true ;_gg ._bfa ,_ =_f .ParseInt (_cbe [1],10,64);for _ ,_gc :=range _cbe [1]{if _gc =='?'||_gc =='0'{_gg ._ga ++;};};};default:_bd .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );
};};const _ea =1e11;func _cbg (_ad float64 ,_cgg Format ,_fb bool )string {if _cgg ._bb {return NumberGeneric (_ad );};_eab :=make ([]byte ,0,20);_ag :=_a .Signbit (_ad );_eg :=_a .Abs (_ad );_cfc :=int64 (0);_dg :=int64 (0);if _cgg .IsExponential {for _eg >=10{_dg ++;
_eg /=10;};for _eg < 1{_dg --;_eg *=10;};}else if _cgg ._dad {_eg *=100;}else if _cgg ._ac {if _cgg ._bfa ==0{_fbe :=_a .Pow (10,float64 (_cgg ._ga ));_bee ,_afd :=1.0,1.0;_ =_bee ;for _eaa :=1.0;_eaa < _fbe ;_eaa ++{_ ,_gcc :=_a .Modf (_eg *float64 (_eaa ));
if _gcc < _afd {_afd =_gcc ;_bee =_eaa ;if _gcc ==0{break ;};};};_cgg ._bfa =int64 (_bee );};_cfc =int64 (_eg *float64 (_cgg ._bfa )+0.5);if len (_cgg .Whole )> 0&&_cfc > _cgg ._bfa {_cfc =int64 (_eg *float64 (_cgg ._bfa ))%_cgg ._bfa ;_eg -=float64 (_cfc )/float64 (_cgg ._bfa );
}else {_eg -=float64 (_cfc )/float64 (_cgg ._bfa );if _a .Abs (_eg )< 1{_ef :=true ;for _ ,_ggc :=range _cgg .Whole {if _ggc .Type ==FmtTypeDigitOpt {continue ;};if _ggc .Type ==FmtTypeLiteral &&_ggc .Literal ==' '{continue ;};_ef =false ;};if _ef {_cgg .Whole =nil ;
};};};};_ade :=1;for _ ,_ebb :=range _cgg .Fractional {if _ebb .Type ==FmtTypeDigit ||_ebb .Type ==FmtTypeDigitOpt {_ade ++;};};_eg +=5*_a .Pow10 (-_ade );_dc ,_dcf :=_a .Modf (_eg );_eab =append (_eab ,_bbe (_dc ,_ad ,_cgg )...);_eab =append (_eab ,_gb (_dcf ,_ad ,_cgg )...);
_eab =append (_eab ,_aaf (_dg ,_cgg )...);if _cgg ._ac {_eab =_f .AppendInt (_eab ,_cfc ,10);_eab =append (_eab ,'/');_eab =_f .AppendInt (_eab ,_cgg ._bfa ,10);};if !_fb &&_ag {return "\u002d"+string (_eab );};return string (_eab );};

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};