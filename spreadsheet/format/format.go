//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_gd "bytes";_e "fmt";_b "github.com/unidoc/unioffice/common/logger";_c "io";_f "math";_g "strconv";_cd "strings";_ea "time";);const _ec =1e11;

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _f .Abs (v )>=_ec ||_f .Abs (v )<=_cgd &&v !=0{return _ee (v );};_ge :=make ([]byte ,0,15);_ge =_g .AppendFloat (_ge ,v ,'f',-1,64);if len (_ge )> 11{_cfce :=_ge [11]-'0';if _cfce >=5&&_cfce <=9{_ge [10]++;_ge =_ge [0:11];
_ge =_adf (_ge );};_ge =_ge [0:11];}else if len (_ge )==11{if _ge [len (_ge )-1]=='9'{_ge [len (_ge )-1]++;_ge =_adf (_ge );};};_ge =_acb (_ge );return string (_ge );};const _cgd =1e-10;

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_cee ,_ :=_g .ParseFloat (v ,64);return Number (_cee ,f );};return String (v ,f );};

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_fd :=Parse (f );var _gdc Format ;if len (_fd )==1{_gdc =_fd [0];}else if len (_fd )==4{_gdc =_fd [3];};_ecb :=false ;for _ ,_ca :=range _gdc .Whole {if _ca .Type ==FmtTypeText {_ecb =true ;};};if !_ecb {return v ;
};_dc :=_gd .Buffer {};for _ ,_dcc :=range _gdc .Whole {switch _dcc .Type {case FmtTypeLiteral :_dc .WriteByte (_dcc .Literal );case FmtTypeText :_dc .WriteString (v );};};return _dc .String ();};const _bff int =-1;func (_cg FmtType )String ()string {if _cg >=FmtType (len (_ba )-1){return _e .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_cg );
};return _dg [_ba [_cg ]:_ba [_cg +1]];};const _gac int =0;func Parse (s string )[]Format {_dgce :=Lexer {};_dgce .Lex (_cd .NewReader (s ));_dgce ._gff =append (_dgce ._gff ,_dgce ._dfee );return _dgce ._gff ;};

// AddToken adds a format token to the format.
func (_cb *Format )AddToken (t FmtType ,l []byte ){if _cb ._gf {_cb ._gf =false ;return ;};switch t {case FmtTypeDecimal :_cb ._ef =true ;case FmtTypeUnderscore :_cb ._gf =true ;case FmtTypeText :_cb .Whole =append (_cb .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_cb .Whole =append (_cb .Whole ,Token {Type :t ,DateTime :string (l )});
case FmtTypePercent :_cb ._ce =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_bc :=range l {if _cb .IsExponential {_cb .Exponent =append (_cb .Exponent ,Token {Type :t ,Literal :_bc });
}else if !_cb ._ef {_cb .Whole =append (_cb .Whole ,Token {Type :t ,Literal :_bc });}else {_cb .Fractional =append (_cb .Fractional ,Token {Type :t ,Literal :_bc });};};case FmtTypeDigitOptThousands :_cb ._de =true ;case FmtTypeFraction :_gb :=_cd .Split (string (l ),"\u002f");
if len (_gb )==2{_cb ._db =true ;_cb ._gc ,_ =_g .ParseInt (_gb [1],10,64);for _ ,_ga :=range _gb [1]{if _ga =='?'||_ga =='0'{_cb ._fc ++;};};};default:_b .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );
};};func _cfc (_fdgd ,_bac float64 ,_cdf Format )[]byte {if len (_cdf .Fractional )==0{return nil ;};_aagf :=_g .AppendFloat (nil ,_fdgd ,'f',-1,64);if len (_aagf )> 2{_aagf =_aagf [2:];}else {_aagf =nil ;};_ega :=make ([]byte ,0,len (_aagf ));_ega =append (_ega ,'.');
_gce :=0;_bcf :for _dad :=0;_dad < len (_cdf .Fractional );_dad ++{_fafg :=_dad ;_ece :=_cdf .Fractional [_dad ];switch _ece .Type {case FmtTypeDigit :if _fafg < len (_aagf ){_ega =append (_ega ,_aagf [_fafg ]);_gce ++;}else {_ega =append (_ega ,'0');};
case FmtTypeDigitOpt :if _fafg >=0{_ega =append (_ega ,_aagf [_fafg ]);_gce ++;}else {break _bcf ;};case FmtTypeLiteral :_ega =append (_ega ,_ece .Literal );default:_b .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_ece );
};};return _ega ;};func _feg (_fega int64 )int64 {if _fega < 0{return -_fega ;};return _fega ;};func _fec (_fbg _ea .Time ,_afb string )[]byte {_aagb :=[]byte {};_gae :=0;for _gfe :=0;_gfe < len (_afb );_gfe ++{var _bcc string ;if _afb [_gfe ]=='/'{_bcc =string (_afb [_gae :_gfe ]);
_gae =_gfe +1;}else if _gfe ==len (_afb )-1{_bcc =string (_afb [_gae :_gfe +1]);}else {continue ;};switch _bcc {case "\u0079\u0079":_aagb =_fbg .AppendFormat (_aagb ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_aagb =_fbg .AppendFormat (_aagb ,"\u0032\u0030\u0030\u0036");
case "\u006d":_aagb =_fbg .AppendFormat (_aagb ,"\u0031");case "\u006d\u006d":_aagb =_fbg .AppendFormat (_aagb ,"\u0030\u0031");case "\u006d\u006d\u006d":_aagb =_fbg .AppendFormat (_aagb ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_aagb =_fbg .AppendFormat (_aagb ,"\u004aa\u006e\u0075\u0061\u0072\u0079");
case "\u006d\u006d\u006dm\u006d":switch _fbg .Month (){case _ea .January ,_ea .July ,_ea .June :_aagb =append (_aagb ,'J');case _ea .February :_aagb =append (_aagb ,'M');case _ea .March ,_ea .May :_aagb =append (_aagb ,'M');case _ea .April ,_ea .August :_aagb =append (_aagb ,'A');
case _ea .September :_aagb =append (_aagb ,'S');case _ea .October :_aagb =append (_aagb ,'O');case _ea .November :_aagb =append (_aagb ,'N');case _ea .December :_aagb =append (_aagb ,'D');};case "\u0064":_aagb =_fbg .AppendFormat (_aagb ,"\u0032");case "\u0064\u0064":_aagb =_fbg .AppendFormat (_aagb ,"\u0030\u0032");
case "\u0064\u0064\u0064":_aagb =_fbg .AppendFormat (_aagb ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_aagb =_fbg .AppendFormat (_aagb ,"\u004d\u006f\u006e\u0064\u0061\u0079");default:_b .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_bcc );
};if _afb [_gfe ]=='/'{_aagb =append (_aagb ,'/');};};return _aagb ;};func _ccb (_aag ,_fb float64 ,_cbd Format )[]byte {if len (_cbd .Whole )==0{return nil ;};_ebd :=_ea .Date (1899,12,30,0,0,0,0,_ea .UTC );_fab :=_ebd .Add (_ea .Duration (_fb *float64 (24*_ea .Hour )));
_fab =_acf (_fab );_fgc :=_g .AppendFloat (nil ,_aag ,'f',-1,64);_da :=make ([]byte ,0,len (_fgc ));_age :=0;_gcf :=1;_gbe :for _gcb :=len (_cbd .Whole )-1;_gcb >=0;_gcb --{_aaad :=len (_fgc )-1-_age ;_dgc :=_cbd .Whole [_gcb ];switch _dgc .Type {case FmtTypeDigit :if _aaad >=0{_da =append (_da ,_fgc [_aaad ]);
_age ++;_gcf =_gcb ;}else {_da =append (_da ,'0');};case FmtTypeDigitOpt :if _aaad >=0{_da =append (_da ,_fgc [_aaad ]);_age ++;_gcf =_gcb ;}else {for _cge :=_gcb ;_cge >=0;_cge --{_adc :=_cbd .Whole [_cge ];if _adc .Type ==FmtTypeLiteral {_da =append (_da ,_adc .Literal );
};};break _gbe ;};case FmtTypeDollar :for _fdg :=_age ;_fdg < len (_fgc );_fdg ++{_da =append (_da ,_fgc [len (_fgc )-1-_fdg ]);_age ++;};_da =append (_da ,'$');case FmtTypeComma :if !_cbd ._de {_da =append (_da ,',');};case FmtTypeLiteral :_da =append (_da ,_dgc .Literal );
case FmtTypeDate :_da =append (_da ,_ccg (_fec (_fab ,_dgc .DateTime ))...);case FmtTypeTime :_da =append (_da ,_ccg (_fbac (_fab ,_fb ,_dgc .DateTime ))...);default:_b .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_dgc );
};};_cga :=_ccg (_da );if _age < len (_fgc )&&(_age !=0||_cbd ._ef ){_df :=len (_fgc )-_age ;_efg :=make ([]byte ,len (_cga )+_df );copy (_efg ,_cga [0:_gcf ]);copy (_efg [_gcf :],_fgc [0:]);copy (_efg [_gcf +_df :],_cga [_gcf :]);_cga =_efg ;};if _cbd ._de {_fe :=_gd .Buffer {};
_fgga :=0;for _gbc :=len (_cga )-1;_gbc >=0;_gbc --{if !(_cga [_gbc ]>='0'&&_cga [_gbc ]<='9'){_fgga ++;}else {break ;};};for _cgaf :=0;_cgaf < len (_cga );_cgaf ++{_fadg :=(len (_cga )-_cgaf -_fgga );if _fadg %3==0&&_fadg !=0&&_cgaf !=0{_fe .WriteByte (',');
};_fe .WriteByte (_cga [_cgaf ]);};_cga =_fe .Bytes ();};return _cga ;};const _cfgf int =34;const _fabg int =0;func _afd (_fbc int64 ,_aeb Format )[]byte {if !_aeb .IsExponential ||len (_aeb .Exponent )==0{return nil ;};_afg :=_g .AppendInt (nil ,_feg (_fbc ),10);
_fba :=make ([]byte ,0,len (_afg )+2);_fba =append (_fba ,'E');if _fbc >=0{_fba =append (_fba ,'+');}else {_fba =append (_fba ,'-');_fbc *=-1;};_cba :=0;_aab :for _efd :=len (_aeb .Exponent )-1;_efd >=0;_efd --{_egg :=len (_afg )-1-_cba ;_bf :=_aeb .Exponent [_efd ];
switch _bf .Type {case FmtTypeDigit :if _egg >=0{_fba =append (_fba ,_afg [_egg ]);_cba ++;}else {_fba =append (_fba ,'0');};case FmtTypeDigitOpt :if _egg >=0{_fba =append (_fba ,_afg [_egg ]);_cba ++;}else {for _fff :=_efd ;_fff >=0;_fff --{_fade :=_aeb .Exponent [_fff ];
if _fade .Type ==FmtTypeLiteral {_fba =append (_fba ,_fade .Literal );};};break _aab ;};case FmtTypeLiteral :_fba =append (_fba ,_bf .Literal );default:_b .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_bf );
};};if _cba < len (_afg ){_fba =append (_fba ,_afg [len (_afg )-_cba -1:_cba -1]...);};_ccg (_fba [2:]);return _fba ;};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_db bool ;_ce bool ;_cf bool ;_de bool ;_gf bool ;_ef bool ;_gc int64 ;_fc int ;};const _aef int =-1;type Lexer struct{_dfee Format ;_gff []Format ;};func IsNumber (data string )(_acg bool ){_edef ,_ada ,_faba :=0,0,len (data );
_gaeb :=len (data );_ggc ,_cbf ,_aaba :=0,0,0;_ =_cbf ;_ =_aaba ;_ =_ggc ;{_edef =_fabg ;_ggc =0;_cbf =0;_aaba =0;};{if _ada ==_faba {goto _cfg ;};switch _edef {case 0:goto _cdb ;case 1:goto _cdbd ;case 2:goto _ceb ;case 3:goto _bad ;case 4:goto _ebe ;
case 5:goto _eea ;case 6:goto _fga ;case 7:goto _ebc ;};goto _afbf ;_edeg :_cbf =_ada ;_ada --;{_acg =false ;};goto _ddb ;_dfe :_cbf =_ada ;_ada --;{_acg =_cbf ==len (data );};goto _ddb ;_edc :_cbf =_ada ;_ada --;{_acg =_cbf ==len (data );};goto _ddb ;
_bgf :switch _aaba {case 2:{_ada =(_cbf )-1;_acg =_cbf ==len (data );};case 3:{_ada =(_cbf )-1;_acg =false ;};};goto _ddb ;_ddb :_ggc =0;if _ada ++;_ada ==_faba {goto _ceee ;};_cdb :_ggc =_ada ;switch data [_ada ]{case 43:goto _edf ;case 45:goto _edf ;
};if 48<=data [_ada ]&&data [_ada ]<=57{goto _edb ;};goto _bd ;_bd :if _ada ++;_ada ==_faba {goto _dgead ;};_cdbd :goto _bd ;_edf :if _ada ++;_ada ==_faba {goto _adab ;};_ceb :if 48<=data [_ada ]&&data [_ada ]<=57{goto _edb ;};goto _bd ;_edb :if _ada ++;
_ada ==_faba {goto _cbag ;};_bad :if data [_ada ]==46{goto _cff ;};if 48<=data [_ada ]&&data [_ada ]<=57{goto _edb ;};goto _bd ;_cff :if _ada ++;_ada ==_faba {goto _egaf ;};_ebe :if 48<=data [_ada ]&&data [_ada ]<=57{goto _dfb ;};goto _bd ;_dfb :if _ada ++;
_ada ==_faba {goto _ecg ;};_eea :if data [_ada ]==69{goto _bbe ;};if 48<=data [_ada ]&&data [_ada ]<=57{goto _dfb ;};goto _bd ;_bbe :if _ada ++;_ada ==_faba {goto _cad ;};_fga :switch data [_ada ]{case 43:goto _ceba ;case 45:goto _ceba ;};goto _bd ;_ceba :_cbf =_ada +1;
_aaba =3;goto _efb ;_eeb :_cbf =_ada +1;_aaba =2;goto _efb ;_efb :if _ada ++;_ada ==_faba {goto _ccc ;};_ebc :if 48<=data [_ada ]&&data [_ada ]<=57{goto _eeb ;};goto _bd ;_afbf :_ceee :_edef =0;goto _cfg ;_dgead :_edef =1;goto _cfg ;_adab :_edef =2;goto _cfg ;
_cbag :_edef =3;goto _cfg ;_egaf :_edef =4;goto _cfg ;_ecg :_edef =5;goto _cfg ;_cad :_edef =6;goto _cfg ;_ccc :_edef =7;goto _cfg ;_cfg :{};if _ada ==_gaeb {switch _edef {case 1:goto _edeg ;case 2:goto _edeg ;case 3:goto _dfe ;case 4:goto _edeg ;case 5:goto _edc ;
case 6:goto _edeg ;case 7:goto _bgf ;};};};if _edef ==_bff {return false ;};return ;};func _ee (_dgea float64 )string {_eec :=_g .FormatFloat (_dgea ,'E',-1,64);_bef :=_g .FormatFloat (_dgea ,'E',5,64);if len (_eec )< len (_bef ){return _g .FormatFloat (_dgea ,'E',2,64);
};return _bef ;};func (_ccf *Lexer )nextFmt (){_ccf ._gff =append (_ccf ._gff ,_ccf ._dfee );_ccf ._dfee =Format {}};

// FmtType is the type of a format token.
//
//go:generate stringer -type=FmtType
type FmtType byte ;const _bg int =0;const _dg ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";


// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};func _acf (_fegb _ea .Time )_ea .Time {_fegb =_fegb .UTC ();return _ea .Date (_fegb .Year (),_fegb .Month (),_fegb .Day (),_fegb .Hour (),_fegb .Minute (),_fegb .Second (),_fegb .Nanosecond (),_ea .Local );
};func _ccg (_ff []byte )[]byte {for _fcg :=0;_fcg < len (_ff )/2;_fcg ++{_ecd :=len (_ff )-1-_fcg ;_ff [_fcg ],_ff [_ecd ]=_ff [_ecd ],_ff [_fcg ];};return _ff ;};const _fac int =34;const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;
FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);func _acb (_cdd []byte )[]byte {_fbf :=len (_cdd );_fea :=false ;_ab :=false ;for _bag :=len (_cdd )-1;
_bag >=0;_bag --{if _cdd [_bag ]=='0'&&!_ab &&!_fea {_fbf =_bag ;}else if _cdd [_bag ]=='.'{_fea =true ;}else {_ab =true ;};};if _fea &&_ab {if _cdd [_fbf -1]=='.'{_fbf --;};return _cdd [0:_fbf ];};return _cdd ;};const _eeg int =34;func _adf (_aad []byte )[]byte {for _ede :=len (_aad )-1;
_ede > 0;_ede --{if _aad [_ede ]=='9'+1{_aad [_ede ]='0';if _aad [_ede -1]=='.'{_ede --;};_aad [_ede -1]++;};};if _aad [0]=='9'+1{_aad [0]='0';copy (_aad [1:],_aad [0:]);_aad [0]='1';};return _aad ;};func _fbac (_ecff _ea .Time ,_ceed float64 ,_dd string )[]byte {_dgcf :=[]byte {};
_eaa :=0;for _fbe :=0;_fbe < len (_dd );_fbe ++{var _caf string ;if _dd [_fbe ]==':'{_caf =string (_dd [_eaa :_fbe ]);_eaa =_fbe +1;}else if _fbe ==len (_dd )-1{_caf =string (_dd [_eaa :_fbe +1]);}else {continue ;};switch _caf {case "\u0064":_dgcf =_ecff .AppendFormat (_dgcf ,"\u0032");
case "\u0068":_dgcf =_ecff .AppendFormat (_dgcf ,"\u0033");case "\u0068\u0068":_dgcf =_ecff .AppendFormat (_dgcf ,"\u0031\u0035");case "\u006d":_dgcf =_ecff .AppendFormat (_dgcf ,"\u0034");case "\u006d\u006d":_dgcf =_ecff .AppendFormat (_dgcf ,"\u0030\u0034");
case "\u0073":_dgcf =_ecff .Round (_ea .Second ).AppendFormat (_dgcf ,"\u0035");case "\u0073\u002e\u0030":_dgcf =_ecff .Round (_ea .Second /10).AppendFormat (_dgcf ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_dgcf =_ecff .Round (_ea .Second /100).AppendFormat (_dgcf ,"\u0035\u002e\u0030\u0030");
case "\u0073\u002e\u00300\u0030":_dgcf =_ecff .Round (_ea .Second /1000).AppendFormat (_dgcf ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_dgcf =_ecff .Round (_ea .Second ).AppendFormat (_dgcf ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_dgcf =_ecff .Round (_ea .Second /10).AppendFormat (_dgcf ,"\u0030\u0035\u002e\u0030");
case "\u0073\u0073\u002e0\u0030":_dgcf =_ecff .Round (_ea .Second /100).AppendFormat (_dgcf ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_dgcf =_ecff .Round (_ea .Second /1000).AppendFormat (_dgcf ,"\u0030\u0035\u002e\u0030\u0030\u0030");
case "\u0041\u004d\u002fP\u004d":_dgcf =_ecff .AppendFormat (_dgcf ,"\u0050\u004d");case "\u005b\u0068\u005d":_dgcf =_g .AppendInt (_dgcf ,int64 (_ceed *24),10);case "\u005b\u006d\u005d":_dgcf =_g .AppendInt (_dgcf ,int64 (_ceed *24*60),10);case "\u005b\u0073\u005d":_dgcf =_g .AppendInt (_dgcf ,int64 (_ceed *24*60*60),10);
case "":default:_b .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_caf );};if _dd [_fbe ]==':'{_dgcf =append (_dgcf ,':');};};return _dgcf ;
};var _ba =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_ed :=Parse (f );if len (_ed )==1{return _ceg (v ,_ed [0],false );}else if len (_ed )> 1&&v < 0{return _ceg (v ,_ed [1],true );
}else if len (_ed )> 2&&v ==0{return _ceg (v ,_ed [2],false );};return _ceg (v ,_ed [0],false );};func _ceg (_eb float64 ,_ceef Format ,_ag bool )string {if _ceef ._cf {return NumberGeneric (_eb );};_aa :=make ([]byte ,0,20);_aaf :=_f .Signbit (_eb );_fg :=_f .Abs (_eb );
_gcc :=int64 (0);_ad :=int64 (0);if _ceef .IsExponential {for _fg >=10{_ad ++;_fg /=10;};for _fg < 1{_ad --;_fg *=10;};}else if _ceef ._ce {_fg *=100;}else if _ceef ._db {if _ceef ._gc ==0{_gg :=_f .Pow (10,float64 (_ceef ._fc ));_be ,_cbe :=1.0,1.0;_ =_be ;
for _agd :=1.0;_agd < _gg ;_agd ++{_ ,_aeg :=_f .Modf (_fg *float64 (_agd ));if _aeg < _cbe {_cbe =_aeg ;_be =_agd ;if _aeg ==0{break ;};};};_ceef ._gc =int64 (_be );};_gcc =int64 (_fg *float64 (_ceef ._gc )+0.5);if len (_ceef .Whole )> 0&&_gcc > _ceef ._gc {_gcc =int64 (_fg *float64 (_ceef ._gc ))%_ceef ._gc ;
_fg -=float64 (_gcc )/float64 (_ceef ._gc );}else {_fg -=float64 (_gcc )/float64 (_ceef ._gc );if _f .Abs (_fg )< 1{_dea :=true ;for _ ,_aaa :=range _ceef .Whole {if _aaa .Type ==FmtTypeDigitOpt {continue ;};if _aaa .Type ==FmtTypeLiteral &&_aaa .Literal ==' '{continue ;
};_dea =false ;};if _dea {_ceef .Whole =nil ;};};};};_fad :=1;for _ ,_eg :=range _ceef .Fractional {if _eg .Type ==FmtTypeDigit ||_eg .Type ==FmtTypeDigitOpt {_fad ++;};};_fg +=5*_f .Pow10 (-_fad );_ecf ,_faf :=_f .Modf (_fg );_aa =append (_aa ,_ccb (_ecf ,_eb ,_ceef )...);
_aa =append (_aa ,_cfc (_faf ,_eb ,_ceef )...);_aa =append (_aa ,_afd (_ad ,_ceef )...);if _ceef ._db {_aa =_g .AppendInt (_aa ,_gcc ,10);_aa =append (_aa ,'/');_aa =_g .AppendInt (_aa ,_ceef ._gc ,10);};if !_ag &&_aaf {return "\u002d"+string (_aa );};
return string (_aa );};func (_cfa *Lexer )Lex (r _c .Reader ){_fgb ,_acc ,_ddg :=0,0,0;_ddd :=-1;_cbeg ,_cbc ,_cea :=0,0,0;_ =_cbc ;_ =_cea ;_abg :=1;_ =_abg ;_eegd :=make ([]byte ,4096);_bbb :=false ;for !_bbb {_dgcec :=0;if _cbeg > 0{_dgcec =_acc -_cbeg ;
};_acc =0;_ecc ,_eae :=r .Read (_eegd [_dgcec :]);if _ecc ==0||_eae !=nil {_bbb =true ;};_ddg =_ecc +_dgcec ;if _ddg < len (_eegd ){_ddd =_ddg ;};{_fgb =_eeg ;_cbeg =0;_cbc =0;_cea =0;};{if _acc ==_ddg {goto _befg ;};switch _fgb {case 34:goto _dbg ;case 35:goto _gcff ;
case 0:goto _bec ;case 36:goto _gacf ;case 37:goto _dff ;case 1:goto _cged ;case 2:goto _baab ;case 38:goto _gec ;case 3:goto _ccbf ;case 4:goto _eegda ;case 39:goto _ggd ;case 5:goto _fbff ;case 6:goto _gecf ;case 7:goto _dbc ;case 8:goto _dec ;case 40:goto _bce ;
case 9:goto _gfc ;case 41:goto _decf ;case 10:goto _baga ;case 42:goto _ecfb ;case 11:goto _gbb ;case 43:goto _fge ;case 44:goto _dcg ;case 45:goto _abd ;case 12:goto _efdc ;case 46:goto _gfd ;case 13:goto _ffa ;case 14:goto _agfa ;case 15:goto _gcfg ;
case 16:goto _eca ;case 47:goto _edfg ;case 17:goto _fcdb ;case 48:goto _fgf ;case 18:goto _edefa ;case 19:goto _ade ;case 20:goto _afgd ;case 49:goto _bee ;case 50:goto _cae ;case 21:goto _ebf ;case 22:goto _eebc ;case 23:goto _aae ;case 24:goto _ffaa ;
case 25:goto _baae ;case 51:goto _dggg ;case 26:goto _gbaa ;case 52:goto _fgbd ;case 53:goto _fdf ;case 54:goto _gdd ;case 55:goto _aebb ;case 56:goto _dcd ;case 57:goto _fgbe ;case 27:goto _cfceb ;case 28:goto _agge ;case 29:goto _dac ;case 30:goto _cegc ;
case 31:goto _dcb ;case 58:goto _dfaa ;case 32:goto _afbd ;case 59:goto _acgc ;case 33:goto _fbcg ;case 60:goto _ddda ;case 61:goto _ccga ;case 62:goto _ggdc ;};goto _ecae ;_bed :switch _cea {case 2:{_acc =(_cbc )-1;_cfa ._dfee .AddToken (FmtTypeDigit ,nil );
};case 3:{_acc =(_cbc )-1;_cfa ._dfee .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_acc =(_cbc )-1;};case 8:{_acc =(_cbc )-1;_cfa ._dfee .AddToken (FmtTypePercent ,nil );};case 13:{_acc =(_cbc )-1;_cfa ._dfee .AddToken (FmtTypeFraction ,_eegd [_cbeg :_cbc ]);
};case 14:{_acc =(_cbc )-1;_cfa ._dfee .AddToken (FmtTypeDate ,_eegd [_cbeg :_cbc ]);};case 15:{_acc =(_cbc )-1;_cfa ._dfee .AddToken (FmtTypeTime ,_eegd [_cbeg :_cbc ]);};case 16:{_acc =(_cbc )-1;_cfa ._dfee .AddToken (FmtTypeTime ,_eegd [_cbeg :_cbc ]);
};case 18:{_acc =(_cbc )-1;};case 20:{_acc =(_cbc )-1;_cfa ._dfee .AddToken (FmtTypeLiteral ,_eegd [_cbeg :_cbc ]);};case 21:{_acc =(_cbc )-1;_cfa ._dfee .AddToken (FmtTypeLiteral ,_eegd [_cbeg +1:_cbc -1]);};};goto _dae ;_beg :_acc =(_cbc )-1;{_cfa ._dfee .AddToken (FmtTypeFraction ,_eegd [_cbeg :_cbc ]);
};goto _dae ;_cdde :_acc =(_cbc )-1;{_cfa ._dfee .AddToken (FmtTypeDigitOpt ,nil );};goto _dae ;_eded :_cbc =_acc +1;{_cfa ._dfee .AddToken (FmtTypeDigitOptThousands ,nil );};goto _dae ;_edbb :_acc =(_cbc )-1;{_cfa ._dfee .AddToken (FmtTypePercent ,nil );
};goto _dae ;_aabf :_acc =(_cbc )-1;{_cfa ._dfee .AddToken (FmtTypeDate ,_eegd [_cbeg :_cbc ]);};goto _dae ;_aabfc :_acc =(_cbc )-1;{_cfa ._dfee .AddToken (FmtTypeDigit ,nil );};goto _dae ;_baf :_acc =(_cbc )-1;{_cfa ._dfee .AddToken (FmtTypeTime ,_eegd [_cbeg :_cbc ]);
};goto _dae ;_ege :_acc =(_cbc )-1;{_cfa ._dfee .AddToken (FmtTypeLiteral ,_eegd [_cbeg :_cbc ]);};goto _dae ;_gga :_cbc =_acc +1;{_cfa ._dfee ._cf =true ;};goto _dae ;_fde :_cbc =_acc +1;{_cfa ._dfee .AddToken (FmtTypeLiteral ,_eegd [_cbeg :_cbc ]);};
goto _dae ;_faa :_cbc =_acc +1;{_cfa ._dfee .AddToken (FmtTypeDollar ,nil );};goto _dae ;_bccf :_cbc =_acc +1;{_cfa ._dfee .AddToken (FmtTypeComma ,nil );};goto _dae ;_fcc :_cbc =_acc +1;{_cfa ._dfee .AddToken (FmtTypeDecimal ,nil );};goto _dae ;_dga :_cbc =_acc +1;
{_cfa .nextFmt ();};goto _dae ;_abc :_cbc =_acc +1;{_cfa ._dfee .AddToken (FmtTypeText ,nil );};goto _dae ;_begd :_cbc =_acc +1;{_cfa ._dfee .AddToken (FmtTypeUnderscore ,nil );};goto _dae ;_agf :_cbc =_acc ;_acc --;{_cfa ._dfee .AddToken (FmtTypeLiteral ,_eegd [_cbeg :_cbc ]);
};goto _dae ;_dfa :_cbc =_acc ;_acc --;{_cfa ._dfee .AddToken (FmtTypeLiteral ,_eegd [_cbeg +1:_cbc -1]);};goto _dae ;_cgf :_cbc =_acc ;_acc --;{_cfa ._dfee .AddToken (FmtTypeDigitOpt ,nil );};goto _dae ;_gba :_cbc =_acc ;_acc --;{_cfa ._dfee .AddToken (FmtTypeFraction ,_eegd [_cbeg :_cbc ]);
};goto _dae ;_dab :_cbc =_acc ;_acc --;{_cfa ._dfee .AddToken (FmtTypePercent ,nil );};goto _dae ;_cac :_cbc =_acc ;_acc --;{_cfa ._dfee .AddToken (FmtTypeDate ,_eegd [_cbeg :_cbc ]);};goto _dae ;_cbbg :_cbc =_acc ;_acc --;{_cfa ._dfee .AddToken (FmtTypeDigit ,nil );
};goto _dae ;_aega :_cbc =_acc ;_acc --;{_cfa ._dfee .AddToken (FmtTypeTime ,_eegd [_cbeg :_cbc ]);};goto _dae ;_cgfe :_cbc =_acc ;_acc --;{};goto _dae ;_eab :_cbc =_acc +1;{_cfa ._dfee .IsExponential =true ;};goto _dae ;_baa :_cbc =_acc +1;{_cfa ._dfee .AddToken (FmtTypeLiteral ,_eegd [_cbeg +1:_cbc ]);
};goto _dae ;_dae :_cbeg =0;if _acc ++;_acc ==_ddg {goto _ccgc ;};_dbg :_cbeg =_acc ;switch _eegd [_acc ]{case 34:goto _bedd ;case 35:goto _aabad ;case 36:goto _faa ;case 37:goto _agg ;case 44:goto _bccf ;case 46:goto _fcc ;case 47:goto _gcd ;case 48:goto _eed ;
case 58:goto _ggcb ;case 59:goto _dga ;case 63:goto _cded ;case 64:goto _abc ;case 65:goto _gea ;case 69:goto _dgf ;case 71:goto _fag ;case 91:goto _gab ;case 92:goto _gge ;case 95:goto _begd ;case 100:goto _gcd ;case 104:goto _ggcb ;case 109:goto _egcb ;
case 115:goto _gfa ;case 121:goto _gbeb ;};if 49<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _befd ;};goto _fde ;_bedd :_cbc =_acc +1;_cea =20;goto _bge ;_bge :if _acc ++;_acc ==_ddg {goto _fdec ;};_gcff :if _eegd [_acc ]==34{goto _egc ;};goto _eee ;_eee :if _acc ++;
_acc ==_ddg {goto _fgfgb ;};_bec :if _eegd [_acc ]==34{goto _egc ;};goto _eee ;_egc :_cbc =_acc +1;_cea =21;goto _aec ;_aec :if _acc ++;_acc ==_ddg {goto _dacd ;};_gacf :if _eegd [_acc ]==34{goto _eee ;};goto _dfa ;_aabad :_cbc =_acc +1;_cea =3;goto _gfg ;
_gfg :if _acc ++;_acc ==_ddg {goto _cda ;};_dff :switch _eegd [_acc ]{case 35:goto _fabc ;case 37:goto _fabc ;case 44:goto _geg ;case 47:goto _aed ;case 48:goto _fabc ;case 63:goto _fabc ;};goto _cgf ;_fabc :if _acc ++;_acc ==_ddg {goto _eafb ;};_cged :switch _eegd [_acc ]{case 35:goto _fabc ;
case 37:goto _fabc ;case 47:goto _aed ;case 48:goto _fabc ;case 63:goto _fabc ;};goto _bed ;_aed :if _acc ++;_acc ==_ddg {goto _cggg ;};_baab :switch _eegd [_acc ]{case 35:goto _gbg ;case 37:goto _eeeg ;case 48:goto _eaf ;case 63:goto _gbg ;};if 49<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _ecea ;
};goto _bed ;_gbg :_cbc =_acc +1;goto _gee ;_gee :if _acc ++;_acc ==_ddg {goto _cgea ;};_gec :switch _eegd [_acc ]{case 35:goto _gbg ;case 37:goto _gbg ;case 44:goto _gbg ;case 46:goto _gbg ;case 48:goto _gbg ;case 63:goto _gbg ;case 65:goto _ecfg ;};goto _gba ;
_ecfg :if _acc ++;_acc ==_ddg {goto _dccc ;};_ccbf :switch _eegd [_acc ]{case 47:goto _egce ;case 77:goto _bcfd ;};goto _beg ;_egce :if _acc ++;_acc ==_ddg {goto _ccgd ;};_eegda :if _eegd [_acc ]==80{goto _abb ;};goto _beg ;_abb :_cbc =_acc +1;goto _cde ;
_cde :if _acc ++;_acc ==_ddg {goto _ffb ;};_ggd :if _eegd [_acc ]==65{goto _ecfg ;};goto _gba ;_bcfd :if _acc ++;_acc ==_ddg {goto _gda ;};_fbff :if _eegd [_acc ]==47{goto _egd ;};goto _beg ;_egd :if _acc ++;_acc ==_ddg {goto _fbda ;};_gecf :if _eegd [_acc ]==80{goto _bgg ;
};goto _beg ;_bgg :if _acc ++;_acc ==_ddg {goto _agb ;};_dbc :if _eegd [_acc ]==77{goto _abb ;};goto _beg ;_eeeg :if _acc ++;_acc ==_ddg {goto _deaa ;};_dec :switch _eegd [_acc ]{case 35:goto _cbce ;case 37:goto _ggde ;case 63:goto _cbce ;};if 48<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _cfcef ;
};goto _bed ;_cbce :_cbc =_acc +1;goto _gfb ;_gfb :if _acc ++;_acc ==_ddg {goto _ebee ;};_bce :switch _eegd [_acc ]{case 35:goto _gbg ;case 37:goto _ggg ;case 44:goto _gbg ;case 46:goto _gbg ;case 48:goto _gbg ;case 63:goto _gbg ;case 65:goto _ecfg ;};
goto _gba ;_ggg :if _acc ++;_acc ==_ddg {goto _cbdb ;};_gfc :switch _eegd [_acc ]{case 35:goto _dgg ;case 44:goto _dgg ;case 46:goto _dgg ;case 48:goto _dgg ;case 63:goto _dgg ;};goto _beg ;_dgg :_cbc =_acc +1;goto _bab ;_bab :if _acc ++;_acc ==_ddg {goto _eag ;
};_decf :switch _eegd [_acc ]{case 35:goto _dgg ;case 44:goto _dgg ;case 46:goto _dgg ;case 48:goto _dgg ;case 63:goto _dgg ;case 65:goto _ecfg ;};goto _gba ;_ggde :if _acc ++;_acc ==_ddg {goto _abe ;};_baga :if _eegd [_acc ]==37{goto _ggde ;};if 48<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _cfcef ;
};goto _bed ;_cfcef :_cbc =_acc +1;_cea =13;goto _dba ;_dba :if _acc ++;_acc ==_ddg {goto _bacd ;};_ecfb :switch _eegd [_acc ]{case 35:goto _gbg ;case 37:goto _eda ;case 44:goto _gbg ;case 46:goto _gbg ;case 48:goto _fee ;case 63:goto _gbg ;case 65:goto _ecfg ;
};if 49<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _cfcef ;};goto _gba ;_eda :if _acc ++;_acc ==_ddg {goto _bgc ;};_gbb :switch _eegd [_acc ]{case 35:goto _dgg ;case 37:goto _ggde ;case 44:goto _dgg ;case 46:goto _dgg ;case 63:goto _dgg ;};if 48<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _cfcef ;
};goto _beg ;_fee :_cbc =_acc +1;goto _gaa ;_gaa :if _acc ++;_acc ==_ddg {goto _cbbd ;};_fge :switch _eegd [_acc ]{case 35:goto _gbg ;case 37:goto _fee ;case 44:goto _gbg ;case 46:goto _gbg ;case 48:goto _fee ;case 63:goto _gbg ;case 65:goto _ecfg ;};if 49<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _cfcef ;
};goto _gba ;_eaf :_cbc =_acc +1;goto _gcg ;_gcg :if _acc ++;_acc ==_ddg {goto _cef ;};_dcg :switch _eegd [_acc ]{case 35:goto _gbg ;case 37:goto _fee ;case 44:goto _gbg ;case 46:goto _gbg ;case 48:goto _eaf ;case 63:goto _gbg ;case 65:goto _ecfg ;};if 49<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _ecea ;
};goto _gba ;_ecea :_cbc =_acc +1;goto _fbd ;_fbd :if _acc ++;_acc ==_ddg {goto _cbdg ;};_abd :switch _eegd [_acc ]{case 35:goto _gbg ;case 37:goto _cfcef ;case 44:goto _gbg ;case 46:goto _gbg ;case 48:goto _eaf ;case 63:goto _gbg ;case 65:goto _ecfg ;
};if 49<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _ecea ;};goto _gba ;_geg :if _acc ++;_acc ==_ddg {goto _dfab ;};_efdc :if _eegd [_acc ]==35{goto _eded ;};goto _cdde ;_agg :_cbc =_acc +1;_cea =8;goto _dag ;_dag :if _acc ++;_acc ==_ddg {goto _gfdb ;};_gfd :switch _eegd [_acc ]{case 35:goto _dcf ;
case 37:goto _fgd ;case 48:goto _bagd ;case 63:goto _dcf ;};if 49<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _baad ;};goto _dab ;_dcf :if _acc ++;_acc ==_ddg {goto _eccf ;};_ffa :switch _eegd [_acc ]{case 35:goto _dcf ;case 47:goto _aed ;case 48:goto _dcf ;
case 63:goto _dcf ;};goto _edbb ;_fgd :if _acc ++;_acc ==_ddg {goto _cgc ;};_agfa :if _eegd [_acc ]==37{goto _fgd ;};if 48<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _baad ;};goto _bed ;_baad :if _acc ++;_acc ==_ddg {goto _ggag ;};_gcfg :switch _eegd [_acc ]{case 37:goto _fgd ;
case 47:goto _aed ;};if 48<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _baad ;};goto _bed ;_bagd :if _acc ++;_acc ==_ddg {goto _dddc ;};_eca :switch _eegd [_acc ]{case 35:goto _dcf ;case 37:goto _fgd ;case 47:goto _aed ;case 48:goto _bagd ;case 63:goto _dcf ;
};if 49<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _baad ;};goto _edbb ;_gcd :_cbc =_acc +1;goto _efe ;_efe :if _acc ++;_acc ==_ddg {goto _gdb ;};_edfg :switch _eegd [_acc ]{case 47:goto _gcd ;case 100:goto _gcd ;case 109:goto _gcd ;case 121:goto _ccbg ;};
goto _cac ;_ccbg :if _acc ++;_acc ==_ddg {goto _dgfe ;};_fcdb :if _eegd [_acc ]==121{goto _gcd ;};goto _aabf ;_eed :_cbc =_acc +1;_cea =2;goto _bda ;_bda :if _acc ++;_acc ==_ddg {goto _ddc ;};_fgf :switch _eegd [_acc ]{case 35:goto _fabc ;case 37:goto _cfd ;
case 47:goto _aed ;case 48:goto _cdc ;case 63:goto _fabc ;};if 49<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _fbee ;};goto _cbbg ;_cfd :if _acc ++;_acc ==_ddg {goto _fecd ;};_edefa :switch _eegd [_acc ]{case 35:goto _fabc ;case 37:goto _cfd ;case 47:goto _aed ;
case 48:goto _cfd ;case 63:goto _fabc ;};if 49<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _baad ;};goto _aabfc ;_cdc :if _acc ++;_acc ==_ddg {goto _eaed ;};_ade :switch _eegd [_acc ]{case 35:goto _fabc ;case 37:goto _cfd ;case 47:goto _aed ;case 48:goto _cdc ;
case 63:goto _fabc ;};if 49<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _fbee ;};goto _aabfc ;_fbee :if _acc ++;_acc ==_ddg {goto _cccd ;};_afgd :switch _eegd [_acc ]{case 37:goto _baad ;case 47:goto _aed ;};if 48<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _fbee ;
};goto _bed ;_befd :_cbc =_acc +1;_cea =20;goto _dfbg ;_dfbg :if _acc ++;_acc ==_ddg {goto _ggb ;};_bee :switch _eegd [_acc ]{case 37:goto _baad ;case 47:goto _aed ;};if 48<=_eegd [_acc ]&&_eegd [_acc ]<=57{goto _fbee ;};goto _agf ;_ggcb :_cbc =_acc +1;
_cea =15;goto _bagf ;_bagf :if _acc ++;_acc ==_ddg {goto _afdb ;};_cae :switch _eegd [_acc ]{case 58:goto _ggcb ;case 65:goto _abgf ;case 104:goto _ggcb ;case 109:goto _ggcb ;case 115:goto _gfa ;};goto _aega ;_abgf :if _acc ++;_acc ==_ddg {goto _dgcd ;
};_ebf :switch _eegd [_acc ]{case 47:goto _fgfg ;case 77:goto _bbf ;};goto _bed ;_fgfg :if _acc ++;_acc ==_ddg {goto _fgcc ;};_eebc :if _eegd [_acc ]==80{goto _ggcb ;};goto _bed ;_bbf :if _acc ++;_acc ==_ddg {goto _abed ;};_aae :if _eegd [_acc ]==47{goto _bfe ;
};goto _bed ;_bfe :if _acc ++;_acc ==_ddg {goto _aada ;};_ffaa :if _eegd [_acc ]==80{goto _egec ;};goto _bed ;_egec :if _acc ++;_acc ==_ddg {goto _bbfd ;};_baae :if _eegd [_acc ]==77{goto _ggcb ;};goto _bed ;_gfa :_cbc =_acc +1;_cea =15;goto _dfd ;_dfd :if _acc ++;
_acc ==_ddg {goto _egb ;};_dggg :switch _eegd [_acc ]{case 46:goto _eba ;case 58:goto _ggcb ;case 65:goto _abgf ;case 104:goto _ggcb ;case 109:goto _ggcb ;case 115:goto _gfa ;};goto _aega ;_eba :if _acc ++;_acc ==_ddg {goto _gdae ;};_gbaa :if _eegd [_acc ]==48{goto _bfd ;
};goto _baf ;_bfd :_cbc =_acc +1;_cea =15;goto _bdc ;_bdc :if _acc ++;_acc ==_ddg {goto _caa ;};_fgbd :switch _eegd [_acc ]{case 48:goto _cag ;case 58:goto _ggcb ;case 65:goto _abgf ;case 104:goto _ggcb ;case 109:goto _ggcb ;case 115:goto _gfa ;};goto _aega ;
_cag :_cbc =_acc +1;_cea =15;goto _gbbd ;_gbbd :if _acc ++;_acc ==_ddg {goto _fed ;};_fdf :switch _eegd [_acc ]{case 48:goto _ggcb ;case 58:goto _ggcb ;case 65:goto _abgf ;case 104:goto _ggcb ;case 109:goto _ggcb ;case 115:goto _gfa ;};goto _aega ;_cded :_cbc =_acc +1;
_cea =5;goto _dfda ;_dfda :if _acc ++;_acc ==_ddg {goto _fce ;};_gdd :switch _eegd [_acc ]{case 35:goto _fabc ;case 37:goto _fabc ;case 47:goto _aed ;case 48:goto _fabc ;case 63:goto _fabc ;};goto _cgfe ;_gea :_cbc =_acc +1;_cea =20;goto _agfc ;_agfc :if _acc ++;
_acc ==_ddg {goto _fbef ;};_aebb :switch _eegd [_acc ]{case 47:goto _fgfg ;case 77:goto _bbf ;};goto _agf ;_dgf :if _acc ++;_acc ==_ddg {goto _add ;};_dcd :switch _eegd [_acc ]{case 43:goto _eab ;case 45:goto _eab ;};goto _agf ;_fag :_cbc =_acc +1;goto _cagg ;
_cagg :if _acc ++;_acc ==_ddg {goto _ggef ;};_fgbe :if _eegd [_acc ]==101{goto _adcb ;};goto _agf ;_adcb :if _acc ++;_acc ==_ddg {goto _ddf ;};_cfceb :if _eegd [_acc ]==110{goto _bgd ;};goto _ege ;_bgd :if _acc ++;_acc ==_ddg {goto _fedb ;};_agge :if _eegd [_acc ]==101{goto _aba ;
};goto _ege ;_aba :if _acc ++;_acc ==_ddg {goto _fffc ;};_dac :if _eegd [_acc ]==114{goto _egca ;};goto _ege ;_egca :if _acc ++;_acc ==_ddg {goto _fdeb ;};_cegc :if _eegd [_acc ]==97{goto _abgg ;};goto _ege ;_abgg :if _acc ++;_acc ==_ddg {goto _fedbb ;
};_dcb :if _eegd [_acc ]==108{goto _gga ;};goto _ege ;_gab :_cbc =_acc +1;_cea =20;goto _gaaf ;_gaaf :if _acc ++;_acc ==_ddg {goto _egf ;};_dfaa :switch _eegd [_acc ]{case 104:goto _cbdc ;case 109:goto _cbdc ;case 115:goto _cbdc ;};goto _bfff ;_bfff :if _acc ++;
_acc ==_ddg {goto _cadf ;};_afbd :if _eegd [_acc ]==93{goto _gegb ;};goto _bfff ;_gegb :_cbc =_acc +1;_cea =18;goto _fadd ;_cgg :_cbc =_acc +1;_cea =16;goto _fadd ;_fadd :if _acc ++;_acc ==_ddg {goto _def ;};_acgc :if _eegd [_acc ]==93{goto _gegb ;};goto _bfff ;
_cbdc :if _acc ++;_acc ==_ddg {goto _fdd ;};_fbcg :if _eegd [_acc ]==93{goto _cgg ;};goto _bfff ;_gge :if _acc ++;_acc ==_ddg {goto _gbd ;};_ddda :goto _baa ;_egcb :_cbc =_acc +1;_cea =14;goto _cffa ;_cffa :if _acc ++;_acc ==_ddg {goto _bcg ;};_ccga :switch _eegd [_acc ]{case 47:goto _gcd ;
case 58:goto _ggcb ;case 65:goto _abgf ;case 100:goto _gcd ;case 104:goto _ggcb ;case 109:goto _egcb ;case 115:goto _gfa ;case 121:goto _ccbg ;};goto _cac ;_gbeb :if _acc ++;_acc ==_ddg {goto _dgaa ;};_ggdc :if _eegd [_acc ]==121{goto _gcd ;};goto _agf ;
_ecae :_ccgc :_fgb =34;goto _befg ;_fdec :_fgb =35;goto _befg ;_fgfgb :_fgb =0;goto _befg ;_dacd :_fgb =36;goto _befg ;_cda :_fgb =37;goto _befg ;_eafb :_fgb =1;goto _befg ;_cggg :_fgb =2;goto _befg ;_cgea :_fgb =38;goto _befg ;_dccc :_fgb =3;goto _befg ;
_ccgd :_fgb =4;goto _befg ;_ffb :_fgb =39;goto _befg ;_gda :_fgb =5;goto _befg ;_fbda :_fgb =6;goto _befg ;_agb :_fgb =7;goto _befg ;_deaa :_fgb =8;goto _befg ;_ebee :_fgb =40;goto _befg ;_cbdb :_fgb =9;goto _befg ;_eag :_fgb =41;goto _befg ;_abe :_fgb =10;
goto _befg ;_bacd :_fgb =42;goto _befg ;_bgc :_fgb =11;goto _befg ;_cbbd :_fgb =43;goto _befg ;_cef :_fgb =44;goto _befg ;_cbdg :_fgb =45;goto _befg ;_dfab :_fgb =12;goto _befg ;_gfdb :_fgb =46;goto _befg ;_eccf :_fgb =13;goto _befg ;_cgc :_fgb =14;goto _befg ;
_ggag :_fgb =15;goto _befg ;_dddc :_fgb =16;goto _befg ;_gdb :_fgb =47;goto _befg ;_dgfe :_fgb =17;goto _befg ;_ddc :_fgb =48;goto _befg ;_fecd :_fgb =18;goto _befg ;_eaed :_fgb =19;goto _befg ;_cccd :_fgb =20;goto _befg ;_ggb :_fgb =49;goto _befg ;_afdb :_fgb =50;
goto _befg ;_dgcd :_fgb =21;goto _befg ;_fgcc :_fgb =22;goto _befg ;_abed :_fgb =23;goto _befg ;_aada :_fgb =24;goto _befg ;_bbfd :_fgb =25;goto _befg ;_egb :_fgb =51;goto _befg ;_gdae :_fgb =26;goto _befg ;_caa :_fgb =52;goto _befg ;_fed :_fgb =53;goto _befg ;
_fce :_fgb =54;goto _befg ;_fbef :_fgb =55;goto _befg ;_add :_fgb =56;goto _befg ;_ggef :_fgb =57;goto _befg ;_ddf :_fgb =27;goto _befg ;_fedb :_fgb =28;goto _befg ;_fffc :_fgb =29;goto _befg ;_fdeb :_fgb =30;goto _befg ;_fedbb :_fgb =31;goto _befg ;_egf :_fgb =58;
goto _befg ;_cadf :_fgb =32;goto _befg ;_def :_fgb =59;goto _befg ;_fdd :_fgb =33;goto _befg ;_gbd :_fgb =60;goto _befg ;_bcg :_fgb =61;goto _befg ;_dgaa :_fgb =62;goto _befg ;_befg :{};if _acc ==_ddd {switch _fgb {case 35:goto _agf ;case 0:goto _bed ;
case 36:goto _dfa ;case 37:goto _cgf ;case 1:goto _bed ;case 2:goto _bed ;case 38:goto _gba ;case 3:goto _beg ;case 4:goto _beg ;case 39:goto _gba ;case 5:goto _beg ;case 6:goto _beg ;case 7:goto _beg ;case 8:goto _bed ;case 40:goto _gba ;case 9:goto _beg ;
case 41:goto _gba ;case 10:goto _bed ;case 42:goto _gba ;case 11:goto _beg ;case 43:goto _gba ;case 44:goto _gba ;case 45:goto _gba ;case 12:goto _cdde ;case 46:goto _dab ;case 13:goto _edbb ;case 14:goto _bed ;case 15:goto _bed ;case 16:goto _edbb ;case 47:goto _cac ;
case 17:goto _aabf ;case 48:goto _cbbg ;case 18:goto _aabfc ;case 19:goto _aabfc ;case 20:goto _bed ;case 49:goto _agf ;case 50:goto _aega ;case 21:goto _bed ;case 22:goto _bed ;case 23:goto _bed ;case 24:goto _bed ;case 25:goto _bed ;case 51:goto _aega ;
case 26:goto _baf ;case 52:goto _aega ;case 53:goto _aega ;case 54:goto _cgfe ;case 55:goto _agf ;case 56:goto _agf ;case 57:goto _agf ;case 27:goto _ege ;case 28:goto _ege ;case 29:goto _ege ;case 30:goto _ege ;case 31:goto _ege ;case 58:goto _agf ;case 32:goto _bed ;
case 59:goto _bed ;case 33:goto _ege ;case 60:goto _agf ;case 61:goto _cac ;case 62:goto _agf ;};};};if _cbeg > 0{copy (_eegd [0:],_eegd [_cbeg :]);};};_ =_ddd ;if _fgb ==_bff {_b .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");
};};