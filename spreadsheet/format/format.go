//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_ff "bytes";_d "fmt";_dg "github.com/unidoc/unioffice/common/logger";_fg "io";_ge "math";_g "strconv";_e "strings";_b "time";);const _ceb int =34;const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;
FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);func _egf (_dab float64 ,_be Format ,_de bool )string {if _be ._ec {return NumberGeneric (_dab );};_ggg :=make ([]byte ,0,20);
_bc :=_ge .Signbit (_dab );_ffe :=_ge .Abs (_dab );_abe :=int64 (0);_dc :=int64 (0);if _be .IsExponential {for _ffe >=10{_dc ++;_ffe /=10;};for _ffe < 1{_dc --;_ffe *=10;};}else if _be ._gc {_ffe *=100;}else if _be ._ca {if _be ._ce ==0{_agf :=_ge .Pow (10,float64 (_be ._af ));
_egb ,_fadd :=1.0,1.0;_ =_egb ;for _ad :=1.0;_ad < _agf ;_ad ++{_ ,_bg :=_ge .Modf (_ffe *float64 (_ad ));if _bg < _fadd {_fadd =_bg ;_egb =_ad ;if _bg ==0{break ;};};};_be ._ce =int64 (_egb );};_abe =int64 (_ffe *float64 (_be ._ce )+0.5);if len (_be .Whole )> 0&&_abe > _be ._ce {_abe =int64 (_ffe *float64 (_be ._ce ))%_be ._ce ;
_ffe -=float64 (_abe )/float64 (_be ._ce );}else {_ffe -=float64 (_abe )/float64 (_be ._ce );if _ge .Abs (_ffe )< 1{_deb :=true ;for _ ,_dfa :=range _be .Whole {if _dfa .Type ==FmtTypeDigitOpt {continue ;};if _dfa .Type ==FmtTypeLiteral &&_dfa .Literal ==' '{continue ;
};_deb =false ;};if _deb {_be .Whole =nil ;};};};};_egc :=1;for _ ,_aee :=range _be .Fractional {if _aee .Type ==FmtTypeDigit ||_aee .Type ==FmtTypeDigitOpt {_egc ++;};};_ffe +=5*_ge .Pow10 (-_egc );_ed ,_cb :=_ge .Modf (_ffe );_ggg =append (_ggg ,_ea (_ed ,_dab ,_be )...);
_ggg =append (_ggg ,_gef (_cb ,_dab ,_be )...);_ggg =append (_ggg ,_ade (_dc ,_be )...);if _be ._ca {_ggg =_g .AppendInt (_ggg ,_abe ,10);_ggg =append (_ggg ,'/');_ggg =_g .AppendInt (_ggg ,_be ._ce ,10);};if !_de &&_bc {return "\u002d"+string (_ggg );
};return string (_ggg );};const _gee =1e-10;const _db int =0;func _fddc (_aeba _b .Time )_b .Time {_aeba =_aeba .UTC ();return _b .Date (_aeba .Year (),_aeba .Month (),_aeba .Day (),_aeba .Hour (),_aeba .Minute (),_aeba .Second (),_aeba .Nanosecond (),_b .Local );
};func _gef (_bb ,_afe float64 ,_gea Format )[]byte {if len (_gea .Fractional )==0{return nil ;};_gegb :=_g .AppendFloat (nil ,_bb ,'f',-1,64);if len (_gegb )> 2{_gegb =_gegb [2:];}else {_gegb =nil ;};_acb :=make ([]byte ,0,len (_gegb ));_acb =append (_acb ,'.');
_bgf :=0;_dfb :for _dgc :=0;_dgc < len (_gea .Fractional );_dgc ++{_bef :=_dgc ;_agg :=_gea .Fractional [_dgc ];switch _agg .Type {case FmtTypeDigit :if _bef < len (_gegb ){_acb =append (_acb ,_gegb [_bef ]);_bgf ++;}else {_acb =append (_acb ,'0');};case FmtTypeDigitOpt :if _bef >=0{_acb =append (_acb ,_gegb [_bef ]);
_bgf ++;}else {break _dfb ;};case FmtTypeLiteral :_acb =append (_acb ,_agg .Literal );default:_dg .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_agg );
};};return _acb ;};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_bdd :=Parse (f );if len (_bdd )==1{return _egf (v ,_bdd [0],false );}else if len (_bdd )> 1&&v < 0{return _egf (v ,_bdd [1],true );
}else if len (_bdd )> 2&&v ==0{return _egf (v ,_bdd [2],false );};return _egf (v ,_bdd [0],false );};

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_ag ,_ :=_g .ParseFloat (v ,64);return Number (_ag ,f );};return String (v ,f );};func Parse (s string )[]Format {_bee :=Lexer {};_bee .Lex (_e .NewReader (s ));_bee ._dcg =append (_bee ._dcg ,_bee ._egce );
return _bee ._dcg ;};const _eg ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";
func (_dff *Lexer )Lex (r _fg .Reader ){_bce ,_bced ,_gddd :=0,0,0;_gbd :=-1;_eda ,_cbca ,_befc :=0,0,0;_ =_cbca ;_ =_befc ;_dcd :=1;_ =_dcd ;_affc :=make ([]byte ,4096);_egg :=false ;for !_egg {_gbg :=0;if _eda > 0{_gbg =_bced -_eda ;};_bced =0;_fga ,_ccd :=r .Read (_affc [_gbg :]);
if _fga ==0||_ccd !=nil {_egg =true ;};_gddd =_fga +_gbg ;if _gddd < len (_affc ){_gbd =_gddd ;};{_bce =_dbf ;_eda =0;_cbca =0;_befc =0;};{if _bced ==_gddd {goto _cgfe ;};switch _bce {case 34:goto _bbfb ;case 35:goto _cag ;case 0:goto _bbce ;case 36:goto _cgf ;
case 37:goto _ffc ;case 1:goto _daaf ;case 2:goto _bbg ;case 38:goto _fgc ;case 3:goto _adea ;case 4:goto _cbe ;case 39:goto _aeb ;case 5:goto _ddc ;case 6:goto _cege ;case 7:goto _egfc ;case 8:goto _dfd ;case 40:goto _dfcd ;case 9:goto _ddca ;case 41:goto _fgaf ;
case 10:goto _efgg ;case 42:goto _abf ;case 11:goto _dfda ;case 43:goto _cfa ;case 44:goto _bga ;case 45:goto _eebc ;case 12:goto _bca ;case 46:goto _dgef ;case 13:goto _ggaf ;case 14:goto _gfd ;case 15:goto _cbfb ;case 16:goto _gaf ;case 47:goto _afeb ;
case 17:goto _geeba ;case 48:goto _acf ;case 18:goto _cfc ;case 19:goto _fdf ;case 20:goto _bdgb ;case 49:goto _eab ;case 50:goto _defa ;case 21:goto _eac ;case 22:goto _fge ;case 23:goto _dcda ;case 24:goto _gfg ;case 25:goto _cfad ;case 51:goto _ggdc ;
case 26:goto _gdc ;case 52:goto _ebf ;case 53:goto _ecc ;case 54:goto _dgff ;case 55:goto _gcdd ;case 56:goto _eafg ;case 57:goto _geebc ;case 27:goto _cbfd ;case 28:goto _ddg ;case 29:goto _fba ;case 30:goto _gaac ;case 31:goto _ebdf ;case 58:goto _fcc ;
case 32:goto _cdbd ;case 59:goto _gdad ;case 33:goto _ecag ;case 60:goto _ccb ;case 61:goto _dga ;case 62:goto _gefc ;};goto _cab ;_gaa :switch _befc {case 2:{_bced =(_cbca )-1;_dff ._egce .AddToken (FmtTypeDigit ,nil );};case 3:{_bced =(_cbca )-1;_dff ._egce .AddToken (FmtTypeDigitOpt ,nil );
};case 5:{_bced =(_cbca )-1;};case 8:{_bced =(_cbca )-1;_dff ._egce .AddToken (FmtTypePercent ,nil );};case 13:{_bced =(_cbca )-1;_dff ._egce .AddToken (FmtTypeFraction ,_affc [_eda :_cbca ]);};case 14:{_bced =(_cbca )-1;_dff ._egce .AddToken (FmtTypeDate ,_affc [_eda :_cbca ]);
};case 15:{_bced =(_cbca )-1;_dff ._egce .AddToken (FmtTypeTime ,_affc [_eda :_cbca ]);};case 16:{_bced =(_cbca )-1;_dff ._egce .AddToken (FmtTypeTime ,_affc [_eda :_cbca ]);};case 18:{_bced =(_cbca )-1;};case 20:{_bced =(_cbca )-1;_dff ._egce .AddToken (FmtTypeLiteral ,_affc [_eda :_cbca ]);
};case 21:{_bced =(_cbca )-1;_dff ._egce .AddToken (FmtTypeLiteral ,_affc [_eda +1:_cbca -1]);};};goto _edfd ;_eafd :_bced =(_cbca )-1;{_dff ._egce .AddToken (FmtTypeFraction ,_affc [_eda :_cbca ]);};goto _edfd ;_efca :_bced =(_cbca )-1;{_dff ._egce .AddToken (FmtTypeDigitOpt ,nil );
};goto _edfd ;_dce :_cbca =_bced +1;{_dff ._egce .AddToken (FmtTypeDigitOptThousands ,nil );};goto _edfd ;_ggab :_bced =(_cbca )-1;{_dff ._egce .AddToken (FmtTypePercent ,nil );};goto _edfd ;_gaag :_bced =(_cbca )-1;{_dff ._egce .AddToken (FmtTypeDate ,_affc [_eda :_cbca ]);
};goto _edfd ;_bdg :_bced =(_cbca )-1;{_dff ._egce .AddToken (FmtTypeDigit ,nil );};goto _edfd ;_fbg :_bced =(_cbca )-1;{_dff ._egce .AddToken (FmtTypeTime ,_affc [_eda :_cbca ]);};goto _edfd ;_bfa :_bced =(_cbca )-1;{_dff ._egce .AddToken (FmtTypeLiteral ,_affc [_eda :_cbca ]);
};goto _edfd ;_bcg :_cbca =_bced +1;{_dff ._egce ._ec =true ;};goto _edfd ;_gdg :_cbca =_bced +1;{_dff ._egce .AddToken (FmtTypeLiteral ,_affc [_eda :_cbca ]);};goto _edfd ;_geee :_cbca =_bced +1;{_dff ._egce .AddToken (FmtTypeDollar ,nil );};goto _edfd ;
_agfe :_cbca =_bced +1;{_dff ._egce .AddToken (FmtTypeComma ,nil );};goto _edfd ;_ccdc :_cbca =_bced +1;{_dff ._egce .AddToken (FmtTypeDecimal ,nil );};goto _edfd ;_dgeea :_cbca =_bced +1;{_dff .nextFmt ();};goto _edfd ;_cga :_cbca =_bced +1;{_dff ._egce .AddToken (FmtTypeText ,nil );
};goto _edfd ;_ggb :_cbca =_bced +1;{_dff ._egce .AddToken (FmtTypeUnderscore ,nil );};goto _edfd ;_aab :_cbca =_bced ;_bced --;{_dff ._egce .AddToken (FmtTypeLiteral ,_affc [_eda :_cbca ]);};goto _edfd ;_befg :_cbca =_bced ;_bced --;{_dff ._egce .AddToken (FmtTypeLiteral ,_affc [_eda +1:_cbca -1]);
};goto _edfd ;_eag :_cbca =_bced ;_bced --;{_dff ._egce .AddToken (FmtTypeDigitOpt ,nil );};goto _edfd ;_aed :_cbca =_bced ;_bced --;{_dff ._egce .AddToken (FmtTypeFraction ,_affc [_eda :_cbca ]);};goto _edfd ;_cdb :_cbca =_bced ;_bced --;{_dff ._egce .AddToken (FmtTypePercent ,nil );
};goto _edfd ;_bff :_cbca =_bced ;_bced --;{_dff ._egce .AddToken (FmtTypeDate ,_affc [_eda :_cbca ]);};goto _edfd ;_gfee :_cbca =_bced ;_bced --;{_dff ._egce .AddToken (FmtTypeDigit ,nil );};goto _edfd ;_bad :_cbca =_bced ;_bced --;{_dff ._egce .AddToken (FmtTypeTime ,_affc [_eda :_cbca ]);
};goto _edfd ;_cdg :_cbca =_bced ;_bced --;{};goto _edfd ;_bfad :_cbca =_bced +1;{_dff ._egce .IsExponential =true ;};goto _edfd ;_fcg :_cbca =_bced +1;{_dff ._egce .AddToken (FmtTypeLiteral ,_affc [_eda +1:_cbca ]);};goto _edfd ;_edfd :_eda =0;if _bced ++;
_bced ==_gddd {goto _bgcc ;};_bbfb :_eda =_bced ;switch _affc [_bced ]{case 34:goto _egff ;case 35:goto _fdee ;case 36:goto _geee ;case 37:goto _bgfa ;case 44:goto _agfe ;case 46:goto _ccdc ;case 47:goto _fcb ;case 48:goto _ecac ;case 58:goto _bcc ;case 59:goto _dgeea ;
case 63:goto _gde ;case 64:goto _cga ;case 65:goto _aae ;case 69:goto _acbc ;case 71:goto _ebc ;case 91:goto _effa ;case 92:goto _dee ;case 95:goto _ggb ;case 100:goto _fcb ;case 104:goto _bcc ;case 109:goto _cbce ;case 115:goto _dbdg ;case 121:goto _ggga ;
};if 49<=_affc [_bced ]&&_affc [_bced ]<=57{goto _fec ;};goto _gdg ;_egff :_cbca =_bced +1;_befc =20;goto _aaa ;_aaa :if _bced ++;_bced ==_gddd {goto _gabg ;};_cag :if _affc [_bced ]==34{goto _bdge ;};goto _eeae ;_eeae :if _bced ++;_bced ==_gddd {goto _badf ;
};_bbce :if _affc [_bced ]==34{goto _bdge ;};goto _eeae ;_bdge :_cbca =_bced +1;_befc =21;goto _daf ;_daf :if _bced ++;_bced ==_gddd {goto _cafa ;};_cgf :if _affc [_bced ]==34{goto _eeae ;};goto _befg ;_fdee :_cbca =_bced +1;_befc =3;goto _beb ;_beb :if _bced ++;
_bced ==_gddd {goto _dea ;};_ffc :switch _affc [_bced ]{case 35:goto _fegb ;case 37:goto _fegb ;case 44:goto _cbf ;case 47:goto _fcgg ;case 48:goto _fegb ;case 63:goto _fegb ;};goto _eag ;_fegb :if _bced ++;_bced ==_gddd {goto _ffef ;};_daaf :switch _affc [_bced ]{case 35:goto _fegb ;
case 37:goto _fegb ;case 47:goto _fcgg ;case 48:goto _fegb ;case 63:goto _fegb ;};goto _gaa ;_fcgg :if _bced ++;_bced ==_gddd {goto _ddcb ;};_bbg :switch _affc [_bced ]{case 35:goto _edac ;case 37:goto _bba ;case 48:goto _ggbg ;case 63:goto _edac ;};if 49<=_affc [_bced ]&&_affc [_bced ]<=57{goto _bbcec ;
};goto _gaa ;_edac :_cbca =_bced +1;goto _aeg ;_aeg :if _bced ++;_bced ==_gddd {goto _bea ;};_fgc :switch _affc [_bced ]{case 35:goto _edac ;case 37:goto _edac ;case 44:goto _edac ;case 46:goto _edac ;case 48:goto _edac ;case 63:goto _edac ;case 65:goto _cedb ;
};goto _aed ;_cedb :if _bced ++;_bced ==_gddd {goto _bac ;};_adea :switch _affc [_bced ]{case 47:goto _fef ;case 77:goto _gbb ;};goto _eafd ;_fef :if _bced ++;_bced ==_gddd {goto _gba ;};_cbe :if _affc [_bced ]==80{goto _geeb ;};goto _eafd ;_geeb :_cbca =_bced +1;
goto _bgc ;_bgc :if _bced ++;_bced ==_gddd {goto _efdf ;};_aeb :if _affc [_bced ]==65{goto _cedb ;};goto _aed ;_gbb :if _bced ++;_bced ==_gddd {goto _ddcd ;};_ddc :if _affc [_bced ]==47{goto _cdgf ;};goto _eafd ;_cdgf :if _bced ++;_bced ==_gddd {goto _egbc ;
};_cege :if _affc [_bced ]==80{goto _fdd ;};goto _eafd ;_fdd :if _bced ++;_bced ==_gddd {goto _gcg ;};_egfc :if _affc [_bced ]==77{goto _geeb ;};goto _eafd ;_bba :if _bced ++;_bced ==_gddd {goto _agc ;};_dfd :switch _affc [_bced ]{case 35:goto _fac ;case 37:goto _gff ;
case 63:goto _fac ;};if 48<=_affc [_bced ]&&_affc [_bced ]<=57{goto _aeda ;};goto _gaa ;_fac :_cbca =_bced +1;goto _bfg ;_bfg :if _bced ++;_bced ==_gddd {goto _bdga ;};_dfcd :switch _affc [_bced ]{case 35:goto _edac ;case 37:goto _dceg ;case 44:goto _edac ;
case 46:goto _edac ;case 48:goto _edac ;case 63:goto _edac ;case 65:goto _cedb ;};goto _aed ;_dceg :if _bced ++;_bced ==_gddd {goto _affg ;};_ddca :switch _affc [_bced ]{case 35:goto _abc ;case 44:goto _abc ;case 46:goto _abc ;case 48:goto _abc ;case 63:goto _abc ;
};goto _eafd ;_abc :_cbca =_bced +1;goto _gcbf ;_gcbf :if _bced ++;_bced ==_gddd {goto _gbc ;};_fgaf :switch _affc [_bced ]{case 35:goto _abc ;case 44:goto _abc ;case 46:goto _abc ;case 48:goto _abc ;case 63:goto _abc ;case 65:goto _cedb ;};goto _aed ;
_gff :if _bced ++;_bced ==_gddd {goto _eded ;};_efgg :if _affc [_bced ]==37{goto _gff ;};if 48<=_affc [_bced ]&&_affc [_bced ]<=57{goto _aeda ;};goto _gaa ;_aeda :_cbca =_bced +1;_befc =13;goto _dbc ;_dbc :if _bced ++;_bced ==_gddd {goto _aedg ;};_abf :switch _affc [_bced ]{case 35:goto _edac ;
case 37:goto _cdc ;case 44:goto _edac ;case 46:goto _edac ;case 48:goto _adc ;case 63:goto _edac ;case 65:goto _cedb ;};if 49<=_affc [_bced ]&&_affc [_bced ]<=57{goto _aeda ;};goto _aed ;_cdc :if _bced ++;_bced ==_gddd {goto _fcf ;};_dfda :switch _affc [_bced ]{case 35:goto _abc ;
case 37:goto _gff ;case 44:goto _abc ;case 46:goto _abc ;case 63:goto _abc ;};if 48<=_affc [_bced ]&&_affc [_bced ]<=57{goto _aeda ;};goto _eafd ;_adc :_cbca =_bced +1;goto _ace ;_ace :if _bced ++;_bced ==_gddd {goto _daff ;};_cfa :switch _affc [_bced ]{case 35:goto _edac ;
case 37:goto _adc ;case 44:goto _edac ;case 46:goto _edac ;case 48:goto _adc ;case 63:goto _edac ;case 65:goto _cedb ;};if 49<=_affc [_bced ]&&_affc [_bced ]<=57{goto _aeda ;};goto _aed ;_ggbg :_cbca =_bced +1;goto _aac ;_aac :if _bced ++;_bced ==_gddd {goto _gceg ;
};_bga :switch _affc [_bced ]{case 35:goto _edac ;case 37:goto _adc ;case 44:goto _edac ;case 46:goto _edac ;case 48:goto _ggbg ;case 63:goto _edac ;case 65:goto _cedb ;};if 49<=_affc [_bced ]&&_affc [_bced ]<=57{goto _bbcec ;};goto _aed ;_bbcec :_cbca =_bced +1;
goto _aeee ;_aeee :if _bced ++;_bced ==_gddd {goto _cde ;};_eebc :switch _affc [_bced ]{case 35:goto _edac ;case 37:goto _aeda ;case 44:goto _edac ;case 46:goto _edac ;case 48:goto _ggbg ;case 63:goto _edac ;case 65:goto _cedb ;};if 49<=_affc [_bced ]&&_affc [_bced ]<=57{goto _bbcec ;
};goto _aed ;_cbf :if _bced ++;_bced ==_gddd {goto _cgaf ;};_bca :if _affc [_bced ]==35{goto _dce ;};goto _efca ;_bgfa :_cbca =_bced +1;_befc =8;goto _cff ;_cff :if _bced ++;_bced ==_gddd {goto _ecd ;};_dgef :switch _affc [_bced ]{case 35:goto _cgg ;case 37:goto _ggcc ;
case 48:goto _ggac ;case 63:goto _cgg ;};if 49<=_affc [_bced ]&&_affc [_bced ]<=57{goto _ede ;};goto _cdb ;_cgg :if _bced ++;_bced ==_gddd {goto _ebdc ;};_ggaf :switch _affc [_bced ]{case 35:goto _cgg ;case 47:goto _fcgg ;case 48:goto _cgg ;case 63:goto _cgg ;
};goto _ggab ;_ggcc :if _bced ++;_bced ==_gddd {goto _dca ;};_gfd :if _affc [_bced ]==37{goto _ggcc ;};if 48<=_affc [_bced ]&&_affc [_bced ]<=57{goto _ede ;};goto _gaa ;_ede :if _bced ++;_bced ==_gddd {goto _eacgd ;};_cbfb :switch _affc [_bced ]{case 37:goto _ggcc ;
case 47:goto _fcgg ;};if 48<=_affc [_bced ]&&_affc [_bced ]<=57{goto _ede ;};goto _gaa ;_ggac :if _bced ++;_bced ==_gddd {goto _beee ;};_gaf :switch _affc [_bced ]{case 35:goto _cgg ;case 37:goto _ggcc ;case 47:goto _fcgg ;case 48:goto _ggac ;case 63:goto _cgg ;
};if 49<=_affc [_bced ]&&_affc [_bced ]<=57{goto _ede ;};goto _ggab ;_fcb :_cbca =_bced +1;goto _gefg ;_gefg :if _bced ++;_bced ==_gddd {goto _cffe ;};_afeb :switch _affc [_bced ]{case 47:goto _fcb ;case 100:goto _fcb ;case 109:goto _fcb ;case 121:goto _bae ;
};goto _bff ;_bae :if _bced ++;_bced ==_gddd {goto _acd ;};_geeba :if _affc [_bced ]==121{goto _fcb ;};goto _gaag ;_ecac :_cbca =_bced +1;_befc =2;goto _aegb ;_aegb :if _bced ++;_bced ==_gddd {goto _degb ;};_acf :switch _affc [_bced ]{case 35:goto _fegb ;
case 37:goto _dba ;case 47:goto _fcgg ;case 48:goto _acc ;case 63:goto _fegb ;};if 49<=_affc [_bced ]&&_affc [_bced ]<=57{goto _fdda ;};goto _gfee ;_dba :if _bced ++;_bced ==_gddd {goto _dbg ;};_cfc :switch _affc [_bced ]{case 35:goto _fegb ;case 37:goto _dba ;
case 47:goto _fcgg ;case 48:goto _dba ;case 63:goto _fegb ;};if 49<=_affc [_bced ]&&_affc [_bced ]<=57{goto _ede ;};goto _bdg ;_acc :if _bced ++;_bced ==_gddd {goto _abfc ;};_fdf :switch _affc [_bced ]{case 35:goto _fegb ;case 37:goto _dba ;case 47:goto _fcgg ;
case 48:goto _acc ;case 63:goto _fegb ;};if 49<=_affc [_bced ]&&_affc [_bced ]<=57{goto _fdda ;};goto _bdg ;_fdda :if _bced ++;_bced ==_gddd {goto _cfac ;};_bdgb :switch _affc [_bced ]{case 37:goto _ede ;case 47:goto _fcgg ;};if 48<=_affc [_bced ]&&_affc [_bced ]<=57{goto _fdda ;
};goto _gaa ;_fec :_cbca =_bced +1;_befc =20;goto _dbe ;_dbe :if _bced ++;_bced ==_gddd {goto _ebb ;};_eab :switch _affc [_bced ]{case 37:goto _ede ;case 47:goto _fcgg ;};if 48<=_affc [_bced ]&&_affc [_bced ]<=57{goto _fdda ;};goto _aab ;_bcc :_cbca =_bced +1;
_befc =15;goto _dabe ;_dabe :if _bced ++;_bced ==_gddd {goto _ddd ;};_defa :switch _affc [_bced ]{case 58:goto _bcc ;case 65:goto _bcag ;case 104:goto _bcc ;case 109:goto _bcc ;case 115:goto _dbdg ;};goto _bad ;_bcag :if _bced ++;_bced ==_gddd {goto _fab ;
};_eac :switch _affc [_bced ]{case 47:goto _cda ;case 77:goto _bbgf ;};goto _gaa ;_cda :if _bced ++;_bced ==_gddd {goto _bfaa ;};_fge :if _affc [_bced ]==80{goto _bcc ;};goto _gaa ;_bbgf :if _bced ++;_bced ==_gddd {goto _ggeg ;};_dcda :if _affc [_bced ]==47{goto _agd ;
};goto _gaa ;_agd :if _bced ++;_bced ==_gddd {goto _ecagf ;};_gfg :if _affc [_bced ]==80{goto _eacg ;};goto _gaa ;_eacg :if _bced ++;_bced ==_gddd {goto _aca ;};_cfad :if _affc [_bced ]==77{goto _bcc ;};goto _gaa ;_dbdg :_cbca =_bced +1;_befc =15;goto _eeg ;
_eeg :if _bced ++;_bced ==_gddd {goto _abbc ;};_ggdc :switch _affc [_bced ]{case 46:goto _fgff ;case 58:goto _bcc ;case 65:goto _bcag ;case 104:goto _bcc ;case 109:goto _bcc ;case 115:goto _dbdg ;};goto _bad ;_fgff :if _bced ++;_bced ==_gddd {goto _cfgd ;
};_gdc :if _affc [_bced ]==48{goto _ebe ;};goto _fbg ;_ebe :_cbca =_bced +1;_befc =15;goto _gbf ;_gbf :if _bced ++;_bced ==_gddd {goto _ffa ;};_ebf :switch _affc [_bced ]{case 48:goto _cad ;case 58:goto _bcc ;case 65:goto _bcag ;case 104:goto _bcc ;case 109:goto _bcc ;
case 115:goto _dbdg ;};goto _bad ;_cad :_cbca =_bced +1;_befc =15;goto _eedc ;_eedc :if _bced ++;_bced ==_gddd {goto _gffa ;};_ecc :switch _affc [_bced ]{case 48:goto _bcc ;case 58:goto _bcc ;case 65:goto _bcag ;case 104:goto _bcc ;case 109:goto _bcc ;
case 115:goto _dbdg ;};goto _bad ;_gde :_cbca =_bced +1;_befc =5;goto _ggdcc ;_ggdcc :if _bced ++;_bced ==_gddd {goto _fce ;};_dgff :switch _affc [_bced ]{case 35:goto _fegb ;case 37:goto _fegb ;case 47:goto _fcgg ;case 48:goto _fegb ;case 63:goto _fegb ;
};goto _cdg ;_aae :_cbca =_bced +1;_befc =20;goto _aggc ;_aggc :if _bced ++;_bced ==_gddd {goto _gcfe ;};_gcdd :switch _affc [_bced ]{case 47:goto _cda ;case 77:goto _bbgf ;};goto _aab ;_acbc :if _bced ++;_bced ==_gddd {goto _fced ;};_eafg :switch _affc [_bced ]{case 43:goto _bfad ;
case 45:goto _bfad ;};goto _aab ;_ebc :_cbca =_bced +1;goto _aebd ;_aebd :if _bced ++;_bced ==_gddd {goto _eacgb ;};_geebc :if _affc [_bced ]==101{goto _bbfbg ;};goto _aab ;_bbfbg :if _bced ++;_bced ==_gddd {goto _fgb ;};_cbfd :if _affc [_bced ]==110{goto _cdgd ;
};goto _bfa ;_cdgd :if _bced ++;_bced ==_gddd {goto _gdae ;};_ddg :if _affc [_bced ]==101{goto _bge ;};goto _bfa ;_bge :if _bced ++;_bced ==_gddd {goto _dgdb ;};_fba :if _affc [_bced ]==114{goto _dbdf ;};goto _bfa ;_dbdf :if _bced ++;_bced ==_gddd {goto _baeb ;
};_gaac :if _affc [_bced ]==97{goto _dbda ;};goto _bfa ;_dbda :if _bced ++;_bced ==_gddd {goto _fgbc ;};_ebdf :if _affc [_bced ]==108{goto _bcg ;};goto _bfa ;_effa :_cbca =_bced +1;_befc =20;goto _eaca ;_eaca :if _bced ++;_bced ==_gddd {goto _cge ;};_fcc :switch _affc [_bced ]{case 104:goto _cffd ;
case 109:goto _cffd ;case 115:goto _cffd ;};goto _gad ;_gad :if _bced ++;_bced ==_gddd {goto _gada ;};_cdbd :if _affc [_bced ]==93{goto _cecb ;};goto _gad ;_cecb :_cbca =_bced +1;_befc =18;goto _edfe ;_fcd :_cbca =_bced +1;_befc =16;goto _edfe ;_edfe :if _bced ++;
_bced ==_gddd {goto _gcfa ;};_gdad :if _affc [_bced ]==93{goto _cecb ;};goto _gad ;_cffd :if _bced ++;_bced ==_gddd {goto _adb ;};_ecag :if _affc [_bced ]==93{goto _fcd ;};goto _gad ;_dee :if _bced ++;_bced ==_gddd {goto _defc ;};_ccb :goto _fcg ;_cbce :_cbca =_bced +1;
_befc =14;goto _cbgc ;_cbgc :if _bced ++;_bced ==_gddd {goto _fecd ;};_dga :switch _affc [_bced ]{case 47:goto _fcb ;case 58:goto _bcc ;case 65:goto _bcag ;case 100:goto _fcb ;case 104:goto _bcc ;case 109:goto _cbce ;case 115:goto _dbdg ;case 121:goto _bae ;
};goto _bff ;_ggga :if _bced ++;_bced ==_gddd {goto _fabb ;};_gefc :if _affc [_bced ]==121{goto _fcb ;};goto _aab ;_cab :_bgcc :_bce =34;goto _cgfe ;_gabg :_bce =35;goto _cgfe ;_badf :_bce =0;goto _cgfe ;_cafa :_bce =36;goto _cgfe ;_dea :_bce =37;goto _cgfe ;
_ffef :_bce =1;goto _cgfe ;_ddcb :_bce =2;goto _cgfe ;_bea :_bce =38;goto _cgfe ;_bac :_bce =3;goto _cgfe ;_gba :_bce =4;goto _cgfe ;_efdf :_bce =39;goto _cgfe ;_ddcd :_bce =5;goto _cgfe ;_egbc :_bce =6;goto _cgfe ;_gcg :_bce =7;goto _cgfe ;_agc :_bce =8;
goto _cgfe ;_bdga :_bce =40;goto _cgfe ;_affg :_bce =9;goto _cgfe ;_gbc :_bce =41;goto _cgfe ;_eded :_bce =10;goto _cgfe ;_aedg :_bce =42;goto _cgfe ;_fcf :_bce =11;goto _cgfe ;_daff :_bce =43;goto _cgfe ;_gceg :_bce =44;goto _cgfe ;_cde :_bce =45;goto _cgfe ;
_cgaf :_bce =12;goto _cgfe ;_ecd :_bce =46;goto _cgfe ;_ebdc :_bce =13;goto _cgfe ;_dca :_bce =14;goto _cgfe ;_eacgd :_bce =15;goto _cgfe ;_beee :_bce =16;goto _cgfe ;_cffe :_bce =47;goto _cgfe ;_acd :_bce =17;goto _cgfe ;_degb :_bce =48;goto _cgfe ;_dbg :_bce =18;
goto _cgfe ;_abfc :_bce =19;goto _cgfe ;_cfac :_bce =20;goto _cgfe ;_ebb :_bce =49;goto _cgfe ;_ddd :_bce =50;goto _cgfe ;_fab :_bce =21;goto _cgfe ;_bfaa :_bce =22;goto _cgfe ;_ggeg :_bce =23;goto _cgfe ;_ecagf :_bce =24;goto _cgfe ;_aca :_bce =25;goto _cgfe ;
_abbc :_bce =51;goto _cgfe ;_cfgd :_bce =26;goto _cgfe ;_ffa :_bce =52;goto _cgfe ;_gffa :_bce =53;goto _cgfe ;_fce :_bce =54;goto _cgfe ;_gcfe :_bce =55;goto _cgfe ;_fced :_bce =56;goto _cgfe ;_eacgb :_bce =57;goto _cgfe ;_fgb :_bce =27;goto _cgfe ;_gdae :_bce =28;
goto _cgfe ;_dgdb :_bce =29;goto _cgfe ;_baeb :_bce =30;goto _cgfe ;_fgbc :_bce =31;goto _cgfe ;_cge :_bce =58;goto _cgfe ;_gada :_bce =32;goto _cgfe ;_gcfa :_bce =59;goto _cgfe ;_adb :_bce =33;goto _cgfe ;_defc :_bce =60;goto _cgfe ;_fecd :_bce =61;goto _cgfe ;
_fabb :_bce =62;goto _cgfe ;_cgfe :{};if _bced ==_gbd {switch _bce {case 35:goto _aab ;case 0:goto _gaa ;case 36:goto _befg ;case 37:goto _eag ;case 1:goto _gaa ;case 2:goto _gaa ;case 38:goto _aed ;case 3:goto _eafd ;case 4:goto _eafd ;case 39:goto _aed ;
case 5:goto _eafd ;case 6:goto _eafd ;case 7:goto _eafd ;case 8:goto _gaa ;case 40:goto _aed ;case 9:goto _eafd ;case 41:goto _aed ;case 10:goto _gaa ;case 42:goto _aed ;case 11:goto _eafd ;case 43:goto _aed ;case 44:goto _aed ;case 45:goto _aed ;case 12:goto _efca ;
case 46:goto _cdb ;case 13:goto _ggab ;case 14:goto _gaa ;case 15:goto _gaa ;case 16:goto _ggab ;case 47:goto _bff ;case 17:goto _gaag ;case 48:goto _gfee ;case 18:goto _bdg ;case 19:goto _bdg ;case 20:goto _gaa ;case 49:goto _aab ;case 50:goto _bad ;case 21:goto _gaa ;
case 22:goto _gaa ;case 23:goto _gaa ;case 24:goto _gaa ;case 25:goto _gaa ;case 51:goto _bad ;case 26:goto _fbg ;case 52:goto _bad ;case 53:goto _bad ;case 54:goto _cdg ;case 55:goto _aab ;case 56:goto _aab ;case 57:goto _aab ;case 27:goto _bfa ;case 28:goto _bfa ;
case 29:goto _bfa ;case 30:goto _bfa ;case 31:goto _bfa ;case 58:goto _aab ;case 32:goto _gaa ;case 59:goto _gaa ;case 33:goto _bfa ;case 60:goto _aab ;case 61:goto _bff ;case 62:goto _aab ;};};};if _eda > 0{copy (_affc [0:],_affc [_eda :]);};};_ =_gbd ;
if _bce ==_caad {_dg .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");};};func (_edg *Lexer )nextFmt (){_edg ._dcg =append (_edg ._dcg ,_edg ._egce );_edg ._egce =Format {}};var _ef =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};


// AddToken adds a format token to the format.
func (_cd *Format )AddToken (t FmtType ,l []byte ){if _cd ._a {_cd ._a =false ;return ;};switch t {case FmtTypeDecimal :_cd ._fa =true ;case FmtTypeUnderscore :_cd ._a =true ;case FmtTypeText :_cd .Whole =append (_cd .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_cd .Whole =append (_cd .Whole ,Token {Type :t ,DateTime :string (l )});
case FmtTypePercent :_cd ._gc =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_ae :=range l {if _cd .IsExponential {_cd .Exponent =append (_cd .Exponent ,Token {Type :t ,Literal :_ae });
}else if !_cd ._fa {_cd .Whole =append (_cd .Whole ,Token {Type :t ,Literal :_ae });}else {_cd .Fractional =append (_cd .Fractional ,Token {Type :t ,Literal :_ae });};};case FmtTypeDigitOptThousands :_cd ._geg =true ;case FmtTypeFraction :_afd :=_e .Split (string (l ),"\u002f");
if len (_afd )==2{_cd ._ca =true ;_cd ._ce ,_ =_g .ParseInt (_afd [1],10,64);for _ ,_bd :=range _afd [1]{if _bd =='?'||_bd =='0'{_cd ._af ++;};};};default:_dg .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );
};};func _fae (_gfb float64 )string {_ga :=_g .FormatFloat (_gfb ,'E',-1,64);_adee :=_g .FormatFloat (_gfb ,'E',5,64);if len (_ga )< len (_adee ){return _g .FormatFloat (_gfb ,'E',2,64);};return _adee ;};

// FmtType is the type of a format token.
//
//go:generate stringer -type=FmtType
type FmtType byte ;const _c =1e11;func _ggcb (_gdf int64 )int64 {if _gdf < 0{return -_gdf ;};return _gdf ;};func _fc (_gd []byte )[]byte {for _df :=0;_df < len (_gd )/2;_df ++{_fad :=len (_gd )-1-_df ;_gd [_df ],_gd [_fad ]=_gd [_fad ],_gd [_df ];};return _gd ;
};func (_dd FmtType )String ()string {if _dd >=FmtType (len (_ef )-1){return _d .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_dd );};return _eg [_ef [_dd ]:_ef [_dd +1]];};const _eaeb int =0;

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_ab :=Parse (f );var _dgf Format ;if len (_ab )==1{_dgf =_ab [0];}else if len (_ab )==4{_dgf =_ab [3];};_aa :=false ;for _ ,_gg :=range _dgf .Whole {if _gg .Type ==FmtTypeText {_aa =true ;};};if !_aa {return v ;
};_eb :=_ff .Buffer {};for _ ,_abb :=range _dgf .Whole {switch _abb .Type {case FmtTypeLiteral :_eb .WriteByte (_abb .Literal );case FmtTypeText :_eb .WriteString (v );};};return _eb .String ();};const _dbf int =34;type Lexer struct{_egce Format ;_dcg []Format ;
};func _gga (_abbe []byte )[]byte {for _fe :=len (_abbe )-1;_fe > 0;_fe --{if _abbe [_fe ]=='9'+1{_abbe [_fe ]='0';if _abbe [_fe -1]=='.'{_fe --;};_abbe [_fe -1]++;};};if _abbe [0]=='9'+1{_abbe [0]='0';copy (_abbe [1:],_abbe [0:]);_abbe [0]='1';};return _abbe ;
};const _cfg int =34;

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _ge .Abs (v )>=_c ||_ge .Abs (v )<=_gee &&v !=0{return _fae (v );};_eae :=make ([]byte ,0,15);_eae =_g .AppendFloat (_eae ,v ,'f',-1,64);if len (_eae )> 11{_cc :=_eae [11]-'0';if _cc >=5&&_cc <=9{_eae [10]++;_eae =_eae [0:11];
_eae =_gga (_eae );};_eae =_eae [0:11];}else if len (_eae )==11{if _eae [len (_eae )-1]=='9'{_eae [len (_eae )-1]++;_eae =_gga (_eae );};};_eae =_cgd (_eae );return string (_eae );};func _ade (_eed int64 ,_abec Format )[]byte {if !_abec .IsExponential ||len (_abec .Exponent )==0{return nil ;
};_gce :=_g .AppendInt (nil ,_ggcb (_eed ),10);_bdb :=make ([]byte ,0,len (_gce )+2);_bdb =append (_bdb ,'E');if _eed >=0{_bdb =append (_bdb ,'+');}else {_bdb =append (_bdb ,'-');_eed *=-1;};_gcb :=0;_fd :for _gf :=len (_abec .Exponent )-1;_gf >=0;_gf --{_efg :=len (_gce )-1-_gcb ;
_aea :=_abec .Exponent [_gf ];switch _aea .Type {case FmtTypeDigit :if _efg >=0{_bdb =append (_bdb ,_gce [_efg ]);_gcb ++;}else {_bdb =append (_bdb ,'0');};case FmtTypeDigitOpt :if _efg >=0{_bdb =append (_bdb ,_gce [_efg ]);_gcb ++;}else {for _abd :=_gf ;
_abd >=0;_abd --{_acg :=_abec .Exponent [_abd ];if _acg .Type ==FmtTypeLiteral {_bdb =append (_bdb ,_acg .Literal );};};break _fd ;};case FmtTypeLiteral :_bdb =append (_bdb ,_aea .Literal );default:_dg .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_aea );
};};if _gcb < len (_gce ){_bdb =append (_bdb ,_gce [len (_gce )-_gcb -1:_gcb -1]...);};_fc (_bdb [2:]);return _bdb ;};

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};func _fde (_efde _b .Time ,_ceg float64 ,_dfg string )[]byte {_feg :=[]byte {};_gge :=0;for _gfe :=0;_gfe < len (_dfg );_gfe ++{var _cbc string ;if _dfg [_gfe ]==':'{_cbc =string (_dfg [_gge :_gfe ]);
_gge =_gfe +1;}else if _gfe ==len (_dfg )-1{_cbc =string (_dfg [_gge :_gfe +1]);}else {continue ;};switch _cbc {case "\u0064":_feg =_efde .AppendFormat (_feg ,"\u0032");case "\u0068":_feg =_efde .AppendFormat (_feg ,"\u0033");case "\u0068\u0068":_feg =_efde .AppendFormat (_feg ,"\u0031\u0035");
case "\u006d":_feg =_efde .AppendFormat (_feg ,"\u0034");case "\u006d\u006d":_feg =_efde .AppendFormat (_feg ,"\u0030\u0034");case "\u0073":_feg =_efde .Round (_b .Second ).AppendFormat (_feg ,"\u0035");case "\u0073\u002e\u0030":_feg =_efde .Round (_b .Second /10).AppendFormat (_feg ,"\u0035\u002e\u0030");
case "\u0073\u002e\u0030\u0030":_feg =_efde .Round (_b .Second /100).AppendFormat (_feg ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_feg =_efde .Round (_b .Second /1000).AppendFormat (_feg ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_feg =_efde .Round (_b .Second ).AppendFormat (_feg ,"\u0030\u0035");
case "\u0073\u0073\u002e\u0030":_feg =_efde .Round (_b .Second /10).AppendFormat (_feg ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_feg =_efde .Round (_b .Second /100).AppendFormat (_feg ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_feg =_efde .Round (_b .Second /1000).AppendFormat (_feg ,"\u0030\u0035\u002e\u0030\u0030\u0030");
case "\u0041\u004d\u002fP\u004d":_feg =_efde .AppendFormat (_feg ,"\u0050\u004d");case "\u005b\u0068\u005d":_feg =_g .AppendInt (_feg ,int64 (_ceg *24),10);case "\u005b\u006d\u005d":_feg =_g .AppendInt (_feg ,int64 (_ceg *24*60),10);case "\u005b\u0073\u005d":_feg =_g .AppendInt (_feg ,int64 (_ceg *24*60*60),10);
case "":default:_dg .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_cbc );};if _dfg [_gfe ]==':'{_feg =append (_feg ,':');};};return _feg ;
};func _cgd (_efd []byte )[]byte {_ece :=len (_efd );_eaf :=false ;_bdfb :=false ;for _gcd :=len (_efd )-1;_gcd >=0;_gcd --{if _efd [_gcd ]=='0'&&!_bdfb &&!_eaf {_ece =_gcd ;}else if _efd [_gcd ]=='.'{_eaf =true ;}else {_bdfb =true ;};};if _eaf &&_bdfb {if _efd [_ece -1]=='.'{_ece --;
};return _efd [0:_ece ];};return _efd ;};func _ecb (_deg _b .Time ,_gcf string )[]byte {_cedf :=[]byte {};_cea :=0;for _dge :=0;_dge < len (_gcf );_dge ++{var _gab string ;if _gcf [_dge ]=='/'{_gab =string (_gcf [_cea :_dge ]);_cea =_dge +1;}else if _dge ==len (_gcf )-1{_gab =string (_gcf [_cea :_dge +1]);
}else {continue ;};switch _gab {case "\u0079\u0079":_cedf =_deg .AppendFormat (_cedf ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_cedf =_deg .AppendFormat (_cedf ,"\u0032\u0030\u0030\u0036");case "\u006d":_cedf =_deg .AppendFormat (_cedf ,"\u0031");
case "\u006d\u006d":_cedf =_deg .AppendFormat (_cedf ,"\u0030\u0031");case "\u006d\u006d\u006d":_cedf =_deg .AppendFormat (_cedf ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_cedf =_deg .AppendFormat (_cedf ,"\u004aa\u006e\u0075\u0061\u0072\u0079");
case "\u006d\u006d\u006dm\u006d":switch _deg .Month (){case _b .January ,_b .July ,_b .June :_cedf =append (_cedf ,'J');case _b .February :_cedf =append (_cedf ,'M');case _b .March ,_b .May :_cedf =append (_cedf ,'M');case _b .April ,_b .August :_cedf =append (_cedf ,'A');
case _b .September :_cedf =append (_cedf ,'S');case _b .October :_cedf =append (_cedf ,'O');case _b .November :_cedf =append (_cedf ,'N');case _b .December :_cedf =append (_cedf ,'D');};case "\u0064":_cedf =_deg .AppendFormat (_cedf ,"\u0032");case "\u0064\u0064":_cedf =_deg .AppendFormat (_cedf ,"\u0030\u0032");
case "\u0064\u0064\u0064":_cedf =_deg .AppendFormat (_cedf ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_cedf =_deg .AppendFormat (_cedf ,"\u004d\u006f\u006e\u0064\u0061\u0079");default:_dg .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_gab );
};if _gcf [_dge ]=='/'{_cedf =append (_cedf ,'/');};};return _cedf ;};func IsNumber (data string )(_gb bool ){_ged ,_cbg ,_ddb :=0,0,len (data );_gfc :=len (data );_eba ,_ccf ,_faa :=0,0,0;_ =_ccf ;_ =_faa ;_ =_eba ;{_ged =_db ;_eba =0;_ccf =0;_faa =0;
};{if _cbg ==_ddb {goto _bbde ;};switch _ged {case 0:goto _cgdf ;case 1:goto _ecg ;case 2:goto _bddd ;case 3:goto _gda ;case 4:goto _eea ;case 5:goto _bbf ;case 6:goto _daa ;case 7:goto _bdbb ;};goto _fag ;_cf :_ccf =_cbg ;_cbg --;{_gb =false ;};goto _ggfb ;
_aag :_ccf =_cbg ;_cbg --;{_gb =_ccf ==len (data );};goto _ggfb ;_baba :_ccf =_cbg ;_cbg --;{_gb =_ccf ==len (data );};goto _ggfb ;_bbd :switch _faa {case 2:{_cbg =(_ccf )-1;_gb =_ccf ==len (data );};case 3:{_cbg =(_ccf )-1;_gb =false ;};};goto _ggfb ;
_ggfb :_eba =0;if _cbg ++;_cbg ==_ddb {goto _dgee ;};_cgdf :_eba =_cbg ;switch data [_cbg ]{case 43:goto _dgdd ;case 45:goto _dgdd ;};if 48<=data [_cbg ]&&data [_cbg ]<=57{goto _dfc ;};goto _gbe ;_gbe :if _cbg ++;_cbg ==_ddb {goto _aff ;};_ecg :goto _gbe ;
_dgdd :if _cbg ++;_cbg ==_ddb {goto _faee ;};_bddd :if 48<=data [_cbg ]&&data [_cbg ]<=57{goto _dfc ;};goto _gbe ;_dfc :if _cbg ++;_cbg ==_ddb {goto _eff ;};_gda :if data [_cbg ]==46{goto _ebd ;};if 48<=data [_cbg ]&&data [_cbg ]<=57{goto _dfc ;};goto _gbe ;
_ebd :if _cbg ++;_cbg ==_ddb {goto _ggfd ;};_eea :if 48<=data [_cbg ]&&data [_cbg ]<=57{goto _fgf ;};goto _gbe ;_fgf :if _cbg ++;_cbg ==_ddb {goto _efcb ;};_bbf :if data [_cbg ]==69{goto _def ;};if 48<=data [_cbg ]&&data [_cbg ]<=57{goto _fgf ;};goto _gbe ;
_def :if _cbg ++;_cbg ==_ddb {goto _gabc ;};_daa :switch data [_cbg ]{case 43:goto _dbd ;case 45:goto _dbd ;};goto _gbe ;_dbd :_ccf =_cbg +1;_faa =3;goto _bgdf ;_ggae :_ccf =_cbg +1;_faa =2;goto _bgdf ;_bgdf :if _cbg ++;_cbg ==_ddb {goto _faaa ;};_bdbb :if 48<=data [_cbg ]&&data [_cbg ]<=57{goto _ggae ;
};goto _gbe ;_fag :_dgee :_ged =0;goto _bbde ;_aff :_ged =1;goto _bbde ;_faee :_ged =2;goto _bbde ;_eff :_ged =3;goto _bbde ;_ggfd :_ged =4;goto _bbde ;_efcb :_ged =5;goto _bbde ;_gabc :_ged =6;goto _bbde ;_faaa :_ged =7;goto _bbde ;_bbde :{};if _cbg ==_gfc {switch _ged {case 1:goto _cf ;
case 2:goto _cf ;case 3:goto _aag ;case 4:goto _cf ;case 5:goto _baba ;case 6:goto _cf ;case 7:goto _bbd ;};};};if _ged ==_caad {return false ;};return ;};const _gcde int =0;

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_ca bool ;_gc bool ;_ec bool ;_geg bool ;_a bool ;_fa bool ;_ce int64 ;_af int ;};const _caad int =-1;func _ea (_bf ,_ac float64 ,_adf Format )[]byte {if len (_adf .Whole )==0{return nil ;
};_edf :=_b .Date (1899,12,30,0,0,0,0,_b .UTC );_bgd :=_edf .Add (_b .Duration (_ac *float64 (24*_b .Hour )));_bgd =_fddc (_bgd );_gdd :=_g .AppendFloat (nil ,_bf ,'f',-1,64);_bfe :=make ([]byte ,0,len (_gdd ));_aga :=0;_ced :=1;_ggd :for _eca :=len (_adf .Whole )-1;
_eca >=0;_eca --{_ba :=len (_gdd )-1-_aga ;_caa :=_adf .Whole [_eca ];switch _caa .Type {case FmtTypeDigit :if _ba >=0{_bfe =append (_bfe ,_gdd [_ba ]);_aga ++;_ced =_eca ;}else {_bfe =append (_bfe ,'0');};case FmtTypeDigitOpt :if _ba >=0{_bfe =append (_bfe ,_gdd [_ba ]);
_aga ++;_ced =_eca ;}else {for _bab :=_eca ;_bab >=0;_bab --{_cec :=_adf .Whole [_bab ];if _cec .Type ==FmtTypeLiteral {_bfe =append (_bfe ,_cec .Literal );};};break _ggd ;};case FmtTypeDollar :for _dae :=_aga ;_dae < len (_gdd );_dae ++{_bfe =append (_bfe ,_gdd [len (_gdd )-1-_dae ]);
_aga ++;};_bfe =append (_bfe ,'$');case FmtTypeComma :if !_adf ._geg {_bfe =append (_bfe ,',');};case FmtTypeLiteral :_bfe =append (_bfe ,_caa .Literal );case FmtTypeDate :_bfe =append (_bfe ,_fc (_ecb (_bgd ,_caa .DateTime ))...);case FmtTypeTime :_bfe =append (_bfe ,_fc (_fde (_bgd ,_ac ,_caa .DateTime ))...);
default:_dg .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_caa );};};_efc :=_fc (_bfe );if _aga < len (_gdd )&&(_aga !=0||_adf ._fa ){_cdf :=len (_gdd )-_aga ;
_dabg :=make ([]byte ,len (_efc )+_cdf );copy (_dabg ,_efc [0:_ced ]);copy (_dabg [_ced :],_gdd [0:]);copy (_dabg [_ced +_cdf :],_efc [_ced :]);_efc =_dabg ;};if _adf ._geg {_bec :=_ff .Buffer {};_ggf :=0;for _ggc :=len (_efc )-1;_ggc >=0;_ggc --{if !(_efc [_ggc ]>='0'&&_efc [_ggc ]<='9'){_ggf ++;
}else {break ;};};for _eec :=0;_eec < len (_efc );_eec ++{_aef :=(len (_efc )-_eec -_ggf );if _aef %3==0&&_aef !=0&&_eec !=0{_bec .WriteByte (',');};_bec .WriteByte (_efc [_eec ]);};_efc =_bec .Bytes ();};return _efc ;};const _bbc int =-1;