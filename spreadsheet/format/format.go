//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_ead "bytes";_ea "fmt";_ba "github.com/unidoc/unioffice/common/logger";_b "io";_g "math";_c "strconv";_ae "strings";_a "time";);const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;
FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);

// AddToken adds a format token to the format.
func (_fg *Format )AddToken (t FmtType ,l []byte ){if _fg ._ada {_fg ._ada =false ;return ;};switch t {case FmtTypeDecimal :_fg ._ac =true ;case FmtTypeUnderscore :_fg ._ada =true ;case FmtTypeText :_fg .Whole =append (_fg .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_fg .Whole =append (_fg .Whole ,Token {Type :t ,DateTime :string (l )});
case FmtTypePercent :_fg ._ce =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_adaa :=range l {if _fg .IsExponential {_fg .Exponent =append (_fg .Exponent ,Token {Type :t ,Literal :_adaa });
}else if !_fg ._ac {_fg .Whole =append (_fg .Whole ,Token {Type :t ,Literal :_adaa });}else {_fg .Fractional =append (_fg .Fractional ,Token {Type :t ,Literal :_adaa });};};case FmtTypeDigitOptThousands :_fg ._fd =true ;case FmtTypeFraction :_bd :=_ae .Split (string (l ),"\u002f");
if len (_bd )==2{_fg ._ff =true ;_fg ._cef ,_ =_c .ParseInt (_bd [1],10,64);for _ ,_cb :=range _bd [1]{if _cb =='?'||_cb =='0'{_fg ._aee ++;};};};default:_ba .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );
};};

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};const _af =1e-10;

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_gff :=Parse (f );if len (_gff )==1{return _adb (v ,_gff [0],false );}else if len (_gff )> 1&&v < 0{return _adb (v ,_gff [1],true );
}else if len (_gff )> 2&&v ==0{return _adb (v ,_gff [2],false );};return _adb (v ,_gff [0],false );};const _f =1e11;func _dfea (_agf []byte )[]byte {_bbd :=len (_agf );_bde :=false ;_ebb :=false ;for _bfa :=len (_agf )-1;_bfa >=0;_bfa --{if _agf [_bfa ]=='0'&&!_ebb &&!_bde {_bbd =_bfa ;
}else if _agf [_bfa ]=='.'{_bde =true ;}else {_ebb =true ;};};if _bde &&_ebb {if _agf [_bbd -1]=='.'{_bbd --;};return _agf [0:_bbd ];};return _agf ;};const _adac int =34;func _ed (_fee []byte )[]byte {for _feg :=0;_feg < len (_fee )/2;_feg ++{_acb :=len (_fee )-1-_feg ;
_fee [_feg ],_fee [_acb ]=_fee [_acb ],_fee [_feg ];};return _fee ;};type Lexer struct{_eadc Format ;_gbg []Format ;};func IsNumber (data string )(_aa bool ){_aebae ,_bfc ,_gcfc :=0,0,len (data );_ecge :=len (data );_dgad ,_cgf ,_fge :=0,0,0;_ =_cgf ;_ =_fge ;
_ =_dgad ;{_aebae =_cfe ;_dgad =0;_cgf =0;_fge =0;};{if _bfc ==_gcfc {goto _cd ;};switch _aebae {case 0:goto _dge ;case 1:goto _bge ;case 2:goto _dggc ;case 3:goto _dag ;case 4:goto _aec ;case 5:goto _fea ;case 6:goto _fbe ;case 7:goto _aef ;};goto _fdc ;
_cbb :_cgf =_bfc ;_bfc --;{_aa =false ;};goto _fedg ;_cgcg :_cgf =_bfc ;_bfc --;{_aa =_cgf ==len (data );};goto _fedg ;_bgf :_cgf =_bfc ;_bfc --;{_aa =_cgf ==len (data );};goto _fedg ;_ede :switch _fge {case 2:{_bfc =(_cgf )-1;_aa =_cgf ==len (data );};
case 3:{_bfc =(_cgf )-1;_aa =false ;};};goto _fedg ;_fedg :_dgad =0;if _bfc ++;_bfc ==_gcfc {goto _ggc ;};_dge :_dgad =_bfc ;switch data [_bfc ]{case 43:goto _dbdc ;case 45:goto _dbdc ;};if 48<=data [_bfc ]&&data [_bfc ]<=57{goto _agfd ;};goto _egaf ;_egaf :if _bfc ++;
_bfc ==_gcfc {goto _dcc ;};_bge :goto _egaf ;_dbdc :if _bfc ++;_bfc ==_gcfc {goto _eed ;};_dggc :if 48<=data [_bfc ]&&data [_bfc ]<=57{goto _agfd ;};goto _egaf ;_agfd :if _bfc ++;_bfc ==_gcfc {goto _bag ;};_dag :if data [_bfc ]==46{goto _bda ;};if 48<=data [_bfc ]&&data [_bfc ]<=57{goto _agfd ;
};goto _egaf ;_bda :if _bfc ++;_bfc ==_gcfc {goto _dage ;};_aec :if 48<=data [_bfc ]&&data [_bfc ]<=57{goto _dbgg ;};goto _egaf ;_dbgg :if _bfc ++;_bfc ==_gcfc {goto _fgdc ;};_fea :if data [_bfc ]==69{goto _egg ;};if 48<=data [_bfc ]&&data [_bfc ]<=57{goto _dbgg ;
};goto _egaf ;_egg :if _bfc ++;_bfc ==_gcfc {goto _faf ;};_fbe :switch data [_bfc ]{case 43:goto _dfg ;case 45:goto _dfg ;};goto _egaf ;_dfg :_cgf =_bfc +1;_fge =3;goto _dgb ;_bgga :_cgf =_bfc +1;_fge =2;goto _dgb ;_dgb :if _bfc ++;_bfc ==_gcfc {goto _bdf ;
};_aef :if 48<=data [_bfc ]&&data [_bfc ]<=57{goto _bgga ;};goto _egaf ;_fdc :_ggc :_aebae =0;goto _cd ;_dcc :_aebae =1;goto _cd ;_eed :_aebae =2;goto _cd ;_bag :_aebae =3;goto _cd ;_dage :_aebae =4;goto _cd ;_fgdc :_aebae =5;goto _cd ;_faf :_aebae =6;
goto _cd ;_bdf :_aebae =7;goto _cd ;_cd :{};if _bfc ==_ecge {switch _aebae {case 1:goto _cbb ;case 2:goto _cbb ;case 3:goto _cgcg ;case 4:goto _cbb ;case 5:goto _bgf ;case 6:goto _cbb ;case 7:goto _ede ;};};};if _aebae ==_cccc {return false ;};return ;
};const _afc int =-1;func _dbg (_fed _a .Time ,_deb string )[]byte {_cfb :=[]byte {};_cgg :=0;for _dbcf :=0;_dbcf < len (_deb );_dbcf ++{var _dbfe string ;if _deb [_dbcf ]=='/'{_dbfe =string (_deb [_cgg :_dbcf ]);_cgg =_dbcf +1;}else if _dbcf ==len (_deb )-1{_dbfe =string (_deb [_cgg :_dbcf +1]);
}else {continue ;};switch _dbfe {case "\u0079\u0079":_cfb =_fed .AppendFormat (_cfb ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_cfb =_fed .AppendFormat (_cfb ,"\u0032\u0030\u0030\u0036");case "\u006d":_cfb =_fed .AppendFormat (_cfb ,"\u0031");case "\u006d\u006d":_cfb =_fed .AppendFormat (_cfb ,"\u0030\u0031");
case "\u006d\u006d\u006d":_cfb =_fed .AppendFormat (_cfb ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_cfb =_fed .AppendFormat (_cfb ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _fed .Month (){case _a .January ,_a .July ,_a .June :_cfb =append (_cfb ,'J');
case _a .February :_cfb =append (_cfb ,'M');case _a .March ,_a .May :_cfb =append (_cfb ,'M');case _a .April ,_a .August :_cfb =append (_cfb ,'A');case _a .September :_cfb =append (_cfb ,'S');case _a .October :_cfb =append (_cfb ,'O');case _a .November :_cfb =append (_cfb ,'N');
case _a .December :_cfb =append (_cfb ,'D');};case "\u0064":_cfb =_fed .AppendFormat (_cfb ,"\u0032");case "\u0064\u0064":_cfb =_fed .AppendFormat (_cfb ,"\u0030\u0032");case "\u0064\u0064\u0064":_cfb =_fed .AppendFormat (_cfb ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_cfb =_fed .AppendFormat (_cfb ,"\u004d\u006f\u006e\u0064\u0061\u0079");
default:_ba .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_dbfe );};if _deb [_dbcf ]=='/'{_cfb =append (_cfb ,'/');};};return _cfb ;};

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_df ,_ :=_c .ParseFloat (v ,64);return Number (_df ,f );};return String (v ,f );};const _cfe int =0;func (_affb *Lexer )nextFmt (){_affb ._gbg =append (_affb ._gbg ,_affb ._eadc );_affb ._eadc =Format {}};


// FmtType is the type of a format token.
//
//go:generate stringer -type=FmtType
type FmtType byte ;

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_dba :=Parse (f );var _dbb Format ;if len (_dba )==1{_dbb =_dba [0];}else if len (_dba )==4{_dbb =_dba [3];};_ggf :=false ;for _ ,_be :=range _dbb .Whole {if _be .Type ==FmtTypeText {_ggf =true ;};};if !_ggf {return v ;
};_fef :=_ead .Buffer {};for _ ,_ecc :=range _dbb .Whole {switch _ecc .Type {case FmtTypeLiteral :_fef .WriteByte (_ecc .Literal );case FmtTypeText :_fef .WriteString (v );};};return _fef .String ();};var _ec =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};
const _ga int =34;

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_ff bool ;_ce bool ;_ad bool ;_fd bool ;_ada bool ;_ac bool ;_cef int64 ;_aee int ;};

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _g .Abs (v )>=_f ||_g .Abs (v )<=_af &&v !=0{return _dc (v );};_bdb :=make ([]byte ,0,15);_bdb =_c .AppendFloat (_bdb ,v ,'f',-1,64);if len (_bdb )> 11{_cgb :=_bdb [11]-'0';if _cgb >=5&&_cgb <=9{_bdb [10]++;_bdb =_bdb [0:11];
_bdb =_fdf (_bdb );};_bdb =_bdb [0:11];}else if len (_bdb )==11{if _bdb [len (_bdb )-1]=='9'{_bdb [len (_bdb )-1]++;_bdb =_fdf (_bdb );};};_bdb =_dfea (_bdb );return string (_bdb );};func _dc (_ag float64 )string {_gfga :=_c .FormatFloat (_ag ,'E',-1,64);
_dbaa :=_c .FormatFloat (_ag ,'E',5,64);if len (_gfga )< len (_dbaa ){return _c .FormatFloat (_ag ,'E',2,64);};return _dbaa ;};func Parse (s string )[]Format {_dfc :=Lexer {};_dfc .Lex (_ae .NewReader (s ));_dfc ._gbg =append (_dfc ._gbg ,_dfc ._eadc );
return _dfc ._gbg ;};func _bgd (_gdf _a .Time ,_cad float64 ,_abb string )[]byte {_gdde :=[]byte {};_ecad :=0;for _aga :=0;_aga < len (_abb );_aga ++{var _dga string ;if _abb [_aga ]==':'{_dga =string (_abb [_ecad :_aga ]);_ecad =_aga +1;}else if _aga ==len (_abb )-1{_dga =string (_abb [_ecad :_aga +1]);
}else {continue ;};switch _dga {case "\u0064":_gdde =_gdf .AppendFormat (_gdde ,"\u0032");case "\u0068":_gdde =_gdf .AppendFormat (_gdde ,"\u0033");case "\u0068\u0068":_gdde =_gdf .AppendFormat (_gdde ,"\u0031\u0035");case "\u006d":_gdde =_gdf .AppendFormat (_gdde ,"\u0034");
case "\u006d\u006d":_gdde =_gdf .AppendFormat (_gdde ,"\u0030\u0034");case "\u0073":_gdde =_gdf .Round (_a .Second ).AppendFormat (_gdde ,"\u0035");case "\u0073\u002e\u0030":_gdde =_gdf .Round (_a .Second /10).AppendFormat (_gdde ,"\u0035\u002e\u0030");
case "\u0073\u002e\u0030\u0030":_gdde =_gdf .Round (_a .Second /100).AppendFormat (_gdde ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_gdde =_gdf .Round (_a .Second /1000).AppendFormat (_gdde ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_gdde =_gdf .Round (_a .Second ).AppendFormat (_gdde ,"\u0030\u0035");
case "\u0073\u0073\u002e\u0030":_gdde =_gdf .Round (_a .Second /10).AppendFormat (_gdde ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_gdde =_gdf .Round (_a .Second /100).AppendFormat (_gdde ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_gdde =_gdf .Round (_a .Second /1000).AppendFormat (_gdde ,"\u0030\u0035\u002e\u0030\u0030\u0030");
case "\u0041\u004d\u002fP\u004d":_gdde =_gdf .AppendFormat (_gdde ,"\u0050\u004d");case "\u005b\u0068\u005d":_gdde =_c .AppendInt (_gdde ,int64 (_cad *24),10);case "\u005b\u006d\u005d":_gdde =_c .AppendInt (_gdde ,int64 (_cad *24*60),10);case "\u005b\u0073\u005d":_gdde =_c .AppendInt (_gdde ,int64 (_cad *24*60*60),10);
case "":default:_ba .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_dga );};if _abb [_aga ]==':'{_gdde =append (_gdde ,':');};};return _gdde ;
};func _fabc (_dgc int64 ,_bab Format )[]byte {if !_bab .IsExponential ||len (_bab .Exponent )==0{return nil ;};_gdd :=_c .AppendInt (nil ,_de (_dgc ),10);_dgg :=make ([]byte ,0,len (_gdd )+2);_dgg =append (_dgg ,'E');if _dgc >=0{_dgg =append (_dgg ,'+');
}else {_dgg =append (_dgg ,'-');_dgc *=-1;};_aebab :=0;_ddfa :for _fgde :=len (_bab .Exponent )-1;_fgde >=0;_fgde --{_gda :=len (_gdd )-1-_aebab ;_ccc :=_bab .Exponent [_fgde ];switch _ccc .Type {case FmtTypeDigit :if _gda >=0{_dgg =append (_dgg ,_gdd [_gda ]);
_aebab ++;}else {_dgg =append (_dgg ,'0');};case FmtTypeDigitOpt :if _gda >=0{_dgg =append (_dgg ,_gdd [_gda ]);_aebab ++;}else {for _aff :=_fgde ;_aff >=0;_aff --{_ege :=_bab .Exponent [_aff ];if _ege .Type ==FmtTypeLiteral {_dgg =append (_dgg ,_ege .Literal );
};};break _ddfa ;};case FmtTypeLiteral :_dgg =append (_dgg ,_ccc .Literal );default:_ba .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_ccc );
};};if _aebab < len (_gdd ){_dgg =append (_dgg ,_gdd [len (_gdd )-_aebab -1:_aebab -1]...);};_ed (_dgg [2:]);return _dgg ;};func (_gf FmtType )String ()string {if _gf >=FmtType (len (_ec )-1){return _ea .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_gf );
};return _eb [_ec [_gf ]:_ec [_gf +1]];};const _cccc int =-1;const _eb ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";
func _fdf (_bfd []byte )[]byte {for _agg :=len (_bfd )-1;_agg > 0;_agg --{if _bfd [_agg ]=='9'+1{_bfd [_agg ]='0';if _bfd [_agg -1]=='.'{_agg --;};_bfd [_agg -1]++;};};if _bfd [0]=='9'+1{_bfd [0]='0';copy (_bfd [1:],_bfd [0:]);_bfd [0]='1';};return _bfd ;
};const _efb int =0;func _adb (_dbd float64 ,_dbf Format ,_dfb bool )string {if _dbf ._ad {return NumberGeneric (_dbd );};_fc :=make ([]byte ,0,20);_eca :=_g .Signbit (_dbd );_cg :=_g .Abs (_dbd );_da :=int64 (0);_eg :=int64 (0);if _dbf .IsExponential {for _cg >=10{_eg ++;
_cg /=10;};for _cg < 1{_eg --;_cg *=10;};}else if _dbf ._ce {_cg *=100;}else if _dbf ._ff {if _dbf ._cef ==0{_cf :=_g .Pow (10,float64 (_dbf ._aee ));_ab ,_dd :=1.0,1.0;_ =_ab ;for _bc :=1.0;_bc < _cf ;_bc ++{_ ,_cgc :=_g .Modf (_cg *float64 (_bc ));if _cgc < _dd {_dd =_cgc ;
_ab =_bc ;if _cgc ==0{break ;};};};_dbf ._cef =int64 (_ab );};_da =int64 (_cg *float64 (_dbf ._cef )+0.5);if len (_dbf .Whole )> 0&&_da > _dbf ._cef {_da =int64 (_cg *float64 (_dbf ._cef ))%_dbf ._cef ;_cg -=float64 (_da )/float64 (_dbf ._cef );}else {_cg -=float64 (_da )/float64 (_dbf ._cef );
if _g .Abs (_cg )< 1{_ebe :=true ;for _ ,_dbc :=range _dbf .Whole {if _dbc .Type ==FmtTypeDigitOpt {continue ;};if _dbc .Type ==FmtTypeLiteral &&_dbc .Literal ==' '{continue ;};_ebe =false ;};if _ebe {_dbf .Whole =nil ;};};};};_fgd :=1;for _ ,_fb :=range _dbf .Fractional {if _fb .Type ==FmtTypeDigit ||_fb .Type ==FmtTypeDigitOpt {_fgd ++;
};};_cg +=5*_g .Pow10 (-_fgd );_cc ,_aeba :=_g .Modf (_cg );_fc =append (_fc ,_ega (_cc ,_dbd ,_dbf )...);_fc =append (_fc ,_adf (_aeba ,_dbd ,_dbf )...);_fc =append (_fc ,_fabc (_eg ,_dbf )...);if _dbf ._ff {_fc =_c .AppendInt (_fc ,_da ,10);_fc =append (_fc ,'/');
_fc =_c .AppendInt (_fc ,_dbf ._cef ,10);};if !_dfb &&_eca {return "\u002d"+string (_fc );};return string (_fc );};func _de (_dfe int64 )int64 {if _dfe < 0{return -_dfe ;};return _dfe ;};const _cea int =34;func _aegg (_cccgf _a .Time )_a .Time {_cccgf =_cccgf .UTC ();
return _a .Date (_cccgf .Year (),_cccgf .Month (),_cccgf .Day (),_cccgf .Hour (),_cccgf .Minute (),_cccgf .Second (),_cccgf .Nanosecond (),_a .Local );};const _ccb int =0;func (_adc *Lexer )Lex (r _b .Reader ){_eea ,_feb ,_afa :=0,0,0;_bbc :=-1;_fdd ,_cbe ,_bfg :=0,0,0;
_ =_cbe ;_ =_bfg ;_cde :=1;_ =_cde ;_dfd :=make ([]byte ,4096);_cdc :=false ;for !_cdc {_aebc :=0;if _fdd > 0{_aebc =_feb -_fdd ;};_feb =0;_bdc ,_bfcc :=r .Read (_dfd [_aebc :]);if _bdc ==0||_bfcc !=nil {_cdc =true ;};_afa =_bdc +_aebc ;if _afa < len (_dfd ){_bbc =_afa ;
};{_eea =_cea ;_fdd =0;_cbe =0;_bfg =0;};{if _feb ==_afa {goto _fdcg ;};switch _eea {case 34:goto _gee ;case 35:goto _adcg ;case 0:goto _egb ;case 36:goto _dbaae ;case 37:goto _cccg ;case 1:goto _ffc ;case 2:goto _cfa ;case 38:goto _gea ;case 3:goto _ecgf ;
case 4:goto _ggg ;case 39:goto _aeg ;case 5:goto _gcb ;case 6:goto _fafc ;case 7:goto _afe ;case 8:goto _dgcd ;case 40:goto _cbde ;case 9:goto _bdeg ;case 41:goto _gcd ;case 10:goto _gbeb ;case 42:goto _bea ;case 11:goto _eaa ;case 43:goto _gce ;case 44:goto _fac ;
case 45:goto _eebf ;case 12:goto _gded ;case 46:goto _aag ;case 13:goto _cbbe ;case 14:goto _afee ;case 15:goto _eadd ;case 16:goto _ebc ;case 47:goto _adad ;case 17:goto _dgbc ;case 48:goto _dbcb ;case 18:goto _gega ;case 19:goto _ggfd ;case 20:goto _gfc ;
case 49:goto _cabg ;case 50:goto _ebbg ;case 21:goto _gdeb ;case 22:goto _ece ;case 23:goto _agfe ;case 24:goto _beac ;case 25:goto _eedb ;case 51:goto _bcac ;case 26:goto _gfd ;case 52:goto _aaca ;case 53:goto _fecc ;case 54:goto _caac ;case 55:goto _egge ;
case 56:goto _ccbf ;case 57:goto _eda ;case 27:goto _dggce ;case 28:goto _acdb ;case 29:goto _ffaf ;case 30:goto _dgde ;case 31:goto _face ;case 58:goto _dfgd ;case 32:goto _bed ;case 59:goto _dea ;case 33:goto _gfeb ;case 60:goto _eff ;case 61:goto _bede ;
case 62:goto _fdfe ;};goto _ged ;_bagb :switch _bfg {case 2:{_feb =(_cbe )-1;_adc ._eadc .AddToken (FmtTypeDigit ,nil );};case 3:{_feb =(_cbe )-1;_adc ._eadc .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_feb =(_cbe )-1;};case 8:{_feb =(_cbe )-1;_adc ._eadc .AddToken (FmtTypePercent ,nil );
};case 13:{_feb =(_cbe )-1;_adc ._eadc .AddToken (FmtTypeFraction ,_dfd [_fdd :_cbe ]);};case 14:{_feb =(_cbe )-1;_adc ._eadc .AddToken (FmtTypeDate ,_dfd [_fdd :_cbe ]);};case 15:{_feb =(_cbe )-1;_adc ._eadc .AddToken (FmtTypeTime ,_dfd [_fdd :_cbe ]);
};case 16:{_feb =(_cbe )-1;_adc ._eadc .AddToken (FmtTypeTime ,_dfd [_fdd :_cbe ]);};case 18:{_feb =(_cbe )-1;};case 20:{_feb =(_cbe )-1;_adc ._eadc .AddToken (FmtTypeLiteral ,_dfd [_fdd :_cbe ]);};case 21:{_feb =(_cbe )-1;_adc ._eadc .AddToken (FmtTypeLiteral ,_dfd [_fdd +1:_cbe -1]);
};};goto _fedf ;_ddbg :_feb =(_cbe )-1;{_adc ._eadc .AddToken (FmtTypeFraction ,_dfd [_fdd :_cbe ]);};goto _fedf ;_caa :_feb =(_cbe )-1;{_adc ._eadc .AddToken (FmtTypeDigitOpt ,nil );};goto _fedf ;_fgc :_cbe =_feb +1;{_adc ._eadc .AddToken (FmtTypeDigitOptThousands ,nil );
};goto _fedf ;_dda :_feb =(_cbe )-1;{_adc ._eadc .AddToken (FmtTypePercent ,nil );};goto _fedf ;_dgd :_feb =(_cbe )-1;{_adc ._eadc .AddToken (FmtTypeDate ,_dfd [_fdd :_cbe ]);};goto _fedf ;_dcd :_feb =(_cbe )-1;{_adc ._eadc .AddToken (FmtTypeDigit ,nil );
};goto _fedf ;_gfe :_feb =(_cbe )-1;{_adc ._eadc .AddToken (FmtTypeTime ,_dfd [_fdd :_cbe ]);};goto _fedf ;_ccf :_feb =(_cbe )-1;{_adc ._eadc .AddToken (FmtTypeLiteral ,_dfd [_fdd :_cbe ]);};goto _fedf ;_eggb :_cbe =_feb +1;{_adc ._eadc ._ad =true ;};goto _fedf ;
_ddad :_cbe =_feb +1;{_adc ._eadc .AddToken (FmtTypeLiteral ,_dfd [_fdd :_cbe ]);};goto _fedf ;_efbe :_cbe =_feb +1;{_adc ._eadc .AddToken (FmtTypeDollar ,nil );};goto _fedf ;_dgbb :_cbe =_feb +1;{_adc ._eadc .AddToken (FmtTypeComma ,nil );};goto _fedf ;
_dagd :_cbe =_feb +1;{_adc ._eadc .AddToken (FmtTypeDecimal ,nil );};goto _fedf ;_daff :_cbe =_feb +1;{_adc .nextFmt ();};goto _fedf ;_gdfg :_cbe =_feb +1;{_adc ._eadc .AddToken (FmtTypeText ,nil );};goto _fedf ;_cfbf :_cbe =_feb +1;{_adc ._eadc .AddToken (FmtTypeUnderscore ,nil );
};goto _fedf ;_dac :_cbe =_feb ;_feb --;{_adc ._eadc .AddToken (FmtTypeLiteral ,_dfd [_fdd :_cbe ]);};goto _fedf ;_cgd :_cbe =_feb ;_feb --;{_adc ._eadc .AddToken (FmtTypeLiteral ,_dfd [_fdd +1:_cbe -1]);};goto _fedf ;_cab :_cbe =_feb ;_feb --;{_adc ._eadc .AddToken (FmtTypeDigitOpt ,nil );
};goto _fedf ;_fca :_cbe =_feb ;_feb --;{_adc ._eadc .AddToken (FmtTypeFraction ,_dfd [_fdd :_cbe ]);};goto _fedf ;_aac :_cbe =_feb ;_feb --;{_adc ._eadc .AddToken (FmtTypePercent ,nil );};goto _fedf ;_aae :_cbe =_feb ;_feb --;{_adc ._eadc .AddToken (FmtTypeDate ,_dfd [_fdd :_cbe ]);
};goto _fedf ;_daa :_cbe =_feb ;_feb --;{_adc ._eadc .AddToken (FmtTypeDigit ,nil );};goto _fedf ;_fafe :_cbe =_feb ;_feb --;{_adc ._eadc .AddToken (FmtTypeTime ,_dfd [_fdd :_cbe ]);};goto _fedf ;_gbe :_cbe =_feb ;_feb --;{};goto _fedf ;_fce :_cbe =_feb +1;
{_adc ._eadc .IsExponential =true ;};goto _fedf ;_dfed :_cbe =_feb +1;{_adc ._eadc .AddToken (FmtTypeLiteral ,_dfd [_fdd +1:_cbe ]);};goto _fedf ;_fedf :_fdd =0;if _feb ++;_feb ==_afa {goto _gbb ;};_gee :_fdd =_feb ;switch _dfd [_feb ]{case 34:goto _cbc ;
case 35:goto _dgada ;case 36:goto _efbe ;case 37:goto _adg ;case 44:goto _dgbb ;case 46:goto _dagd ;case 47:goto _bgge ;case 48:goto _fae ;case 58:goto _ceg ;case 59:goto _daff ;case 63:goto _cdg ;case 64:goto _gdfg ;case 65:goto _eag ;case 69:goto _fff ;
case 71:goto _cdec ;case 91:goto _cbdb ;case 92:goto _ade ;case 95:goto _cfbf ;case 100:goto _bgge ;case 104:goto _ceg ;case 109:goto _ecgfe ;case 115:goto _aaf ;case 121:goto _fgce ;};if 49<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _cgfe ;};goto _ddad ;_cbc :_cbe =_feb +1;
_bfg =20;goto _addg ;_addg :if _feb ++;_feb ==_afa {goto _dgdb ;};_adcg :if _dfd [_feb ]==34{goto _dgab ;};goto _gac ;_gac :if _feb ++;_feb ==_afa {goto _bgea ;};_egb :if _dfd [_feb ]==34{goto _dgab ;};goto _gac ;_dgab :_cbe =_feb +1;_bfg =21;goto _adaaa ;
_adaaa :if _feb ++;_feb ==_afa {goto _dae ;};_dbaae :if _dfd [_feb ]==34{goto _gac ;};goto _cgd ;_dgada :_cbe =_feb +1;_bfg =3;goto _aacb ;_aacb :if _feb ++;_feb ==_afa {goto _dgadad ;};_cccg :switch _dfd [_feb ]{case 35:goto _fdfgd ;case 37:goto _fdfgd ;
case 44:goto _ffa ;case 47:goto _agge ;case 48:goto _fdfgd ;case 63:goto _fdfgd ;};goto _cab ;_fdfgd :if _feb ++;_feb ==_afa {goto _bbg ;};_ffc :switch _dfd [_feb ]{case 35:goto _fdfgd ;case 37:goto _fdfgd ;case 47:goto _agge ;case 48:goto _fdfgd ;case 63:goto _fdfgd ;
};goto _bagb ;_agge :if _feb ++;_feb ==_afa {goto _ecac ;};_cfa :switch _dfd [_feb ]{case 35:goto _ebd ;case 37:goto _baf ;case 48:goto _cfeg ;case 63:goto _ebd ;};if 49<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _ceac ;};goto _bagb ;_ebd :_cbe =_feb +1;goto _fba ;
_fba :if _feb ++;_feb ==_afa {goto _eaf ;};_gea :switch _dfd [_feb ]{case 35:goto _ebd ;case 37:goto _ebd ;case 44:goto _ebd ;case 46:goto _ebd ;case 48:goto _ebd ;case 63:goto _ebd ;case 65:goto _fcb ;};goto _fca ;_fcb :if _feb ++;_feb ==_afa {goto _gcda ;
};_ecgf :switch _dfd [_feb ]{case 47:goto _fbg ;case 77:goto _adff ;};goto _ddbg ;_fbg :if _feb ++;_feb ==_afa {goto _aaa ;};_ggg :if _dfd [_feb ]==80{goto _ccca ;};goto _ddbg ;_ccca :_cbe =_feb +1;goto _daaa ;_daaa :if _feb ++;_feb ==_afa {goto _eba ;
};_aeg :if _dfd [_feb ]==65{goto _fcb ;};goto _fca ;_adff :if _feb ++;_feb ==_afa {goto _aceb ;};_gcb :if _dfd [_feb ]==47{goto _gaa ;};goto _ddbg ;_gaa :if _feb ++;_feb ==_afa {goto _acg ;};_fafc :if _dfd [_feb ]==80{goto _gde ;};goto _ddbg ;_gde :if _feb ++;
_feb ==_afa {goto _acga ;};_afe :if _dfd [_feb ]==77{goto _ccca ;};goto _ddbg ;_baf :if _feb ++;_feb ==_afa {goto _fcef ;};_dgcd :switch _dfd [_feb ]{case 35:goto _dbcg ;case 37:goto _bcd ;case 63:goto _dbcg ;};if 48<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _ebba ;
};goto _bagb ;_dbcg :_cbe =_feb +1;goto _ggb ;_ggb :if _feb ++;_feb ==_afa {goto _adda ;};_cbde :switch _dfd [_feb ]{case 35:goto _ebd ;case 37:goto _bcb ;case 44:goto _ebd ;case 46:goto _ebd ;case 48:goto _ebd ;case 63:goto _ebd ;case 65:goto _fcb ;};
goto _fca ;_bcb :if _feb ++;_feb ==_afa {goto _dcea ;};_bdeg :switch _dfd [_feb ]{case 35:goto _gag ;case 44:goto _gag ;case 46:goto _gag ;case 48:goto _gag ;case 63:goto _gag ;};goto _ddbg ;_gag :_cbe =_feb +1;goto _fec ;_fec :if _feb ++;_feb ==_afa {goto _adea ;
};_gcd :switch _dfd [_feb ]{case 35:goto _gag ;case 44:goto _gag ;case 46:goto _gag ;case 48:goto _gag ;case 63:goto _gag ;case 65:goto _fcb ;};goto _fca ;_bcd :if _feb ++;_feb ==_afa {goto _caacf ;};_gbeb :if _dfd [_feb ]==37{goto _bcd ;};if 48<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _ebba ;
};goto _bagb ;_ebba :_cbe =_feb +1;_bfg =13;goto _cbdg ;_cbdg :if _feb ++;_feb ==_afa {goto _fecf ;};_bea :switch _dfd [_feb ]{case 35:goto _ebd ;case 37:goto _gcc ;case 44:goto _ebd ;case 46:goto _ebd ;case 48:goto _eec ;case 63:goto _ebd ;case 65:goto _fcb ;
};if 49<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _ebba ;};goto _fca ;_gcc :if _feb ++;_feb ==_afa {goto _aaea ;};_eaa :switch _dfd [_feb ]{case 35:goto _gag ;case 37:goto _bcd ;case 44:goto _gag ;case 46:goto _gag ;case 63:goto _gag ;};if 48<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _ebba ;
};goto _ddbg ;_eec :_cbe =_feb +1;goto _dfde ;_dfde :if _feb ++;_feb ==_afa {goto _cdcf ;};_gce :switch _dfd [_feb ]{case 35:goto _ebd ;case 37:goto _eec ;case 44:goto _ebd ;case 46:goto _ebd ;case 48:goto _eec ;case 63:goto _ebd ;case 65:goto _fcb ;};
if 49<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _ebba ;};goto _fca ;_cfeg :_cbe =_feb +1;goto _cbf ;_cbf :if _feb ++;_feb ==_afa {goto _aafc ;};_fac :switch _dfd [_feb ]{case 35:goto _ebd ;case 37:goto _eec ;case 44:goto _ebd ;case 46:goto _ebd ;case 48:goto _cfeg ;
case 63:goto _ebd ;case 65:goto _fcb ;};if 49<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _ceac ;};goto _fca ;_ceac :_cbe =_feb +1;goto _dfgg ;_dfgg :if _feb ++;_feb ==_afa {goto _gddeg ;};_eebf :switch _dfd [_feb ]{case 35:goto _ebd ;case 37:goto _ebba ;case 44:goto _ebd ;
case 46:goto _ebd ;case 48:goto _cfeg ;case 63:goto _ebd ;case 65:goto _fcb ;};if 49<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _ceac ;};goto _fca ;_ffa :if _feb ++;_feb ==_afa {goto _ddg ;};_gded :if _dfd [_feb ]==35{goto _fgc ;};goto _caa ;_adg :_cbe =_feb +1;
_bfg =8;goto _cca ;_cca :if _feb ++;_feb ==_afa {goto _bgb ;};_aag :switch _dfd [_feb ]{case 35:goto _baa ;case 37:goto _gbd ;case 48:goto _dfa ;case 63:goto _baa ;};if 49<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _ebeb ;};goto _aac ;_baa :if _feb ++;_feb ==_afa {goto _cegf ;
};_cbbe :switch _dfd [_feb ]{case 35:goto _baa ;case 47:goto _agge ;case 48:goto _baa ;case 63:goto _baa ;};goto _dda ;_gbd :if _feb ++;_feb ==_afa {goto _eebd ;};_afee :if _dfd [_feb ]==37{goto _gbd ;};if 48<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _ebeb ;
};goto _bagb ;_ebeb :if _feb ++;_feb ==_afa {goto _cag ;};_eadd :switch _dfd [_feb ]{case 37:goto _gbd ;case 47:goto _agge ;};if 48<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _ebeb ;};goto _bagb ;_dfa :if _feb ++;_feb ==_afa {goto _daed ;};_ebc :switch _dfd [_feb ]{case 35:goto _baa ;
case 37:goto _gbd ;case 47:goto _agge ;case 48:goto _dfa ;case 63:goto _baa ;};if 49<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _ebeb ;};goto _dda ;_bgge :_cbe =_feb +1;goto _caf ;_caf :if _feb ++;_feb ==_afa {goto _cbba ;};_adad :switch _dfd [_feb ]{case 47:goto _bgge ;
case 100:goto _bgge ;case 109:goto _bgge ;case 121:goto _gba ;};goto _aae ;_gba :if _feb ++;_feb ==_afa {goto _dcdc ;};_dgbc :if _dfd [_feb ]==121{goto _bgge ;};goto _dgd ;_fae :_cbe =_feb +1;_bfg =2;goto _egc ;_egc :if _feb ++;_feb ==_afa {goto _afab ;
};_dbcb :switch _dfd [_feb ]{case 35:goto _fdfgd ;case 37:goto _bac ;case 47:goto _agge ;case 48:goto _ccd ;case 63:goto _fdfgd ;};if 49<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _fbc ;};goto _daa ;_bac :if _feb ++;_feb ==_afa {goto _gfac ;};_gega :switch _dfd [_feb ]{case 35:goto _fdfgd ;
case 37:goto _bac ;case 47:goto _agge ;case 48:goto _bac ;case 63:goto _fdfgd ;};if 49<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _ebeb ;};goto _dcd ;_ccd :if _feb ++;_feb ==_afa {goto _bdaa ;};_ggfd :switch _dfd [_feb ]{case 35:goto _fdfgd ;case 37:goto _bac ;
case 47:goto _agge ;case 48:goto _ccd ;case 63:goto _fdfgd ;};if 49<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _fbc ;};goto _dcd ;_fbc :if _feb ++;_feb ==_afa {goto _bee ;};_gfc :switch _dfd [_feb ]{case 37:goto _ebeb ;case 47:goto _agge ;};if 48<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _fbc ;
};goto _bagb ;_cgfe :_cbe =_feb +1;_bfg =20;goto _ccg ;_ccg :if _feb ++;_feb ==_afa {goto _fdb ;};_cabg :switch _dfd [_feb ]{case 37:goto _ebeb ;case 47:goto _agge ;};if 48<=_dfd [_feb ]&&_dfd [_feb ]<=57{goto _fbc ;};goto _dac ;_ceg :_cbe =_feb +1;_bfg =15;
goto _cafb ;_cafb :if _feb ++;_feb ==_afa {goto _dbce ;};_ebbg :switch _dfd [_feb ]{case 58:goto _ceg ;case 65:goto _ebef ;case 104:goto _ceg ;case 109:goto _ceg ;case 115:goto _aaf ;};goto _fafe ;_ebef :if _feb ++;_feb ==_afa {goto _ddfe ;};_gdeb :switch _dfd [_feb ]{case 47:goto _gcg ;
case 77:goto _debd ;};goto _bagb ;_gcg :if _feb ++;_feb ==_afa {goto _gfb ;};_ece :if _dfd [_feb ]==80{goto _ceg ;};goto _bagb ;_debd :if _feb ++;_feb ==_afa {goto _bdcg ;};_agfe :if _dfd [_feb ]==47{goto _bdg ;};goto _bagb ;_bdg :if _feb ++;_feb ==_afa {goto _deg ;
};_beac :if _dfd [_feb ]==80{goto _ggcb ;};goto _bagb ;_ggcb :if _feb ++;_feb ==_afa {goto _cadg ;};_eedb :if _dfd [_feb ]==77{goto _ceg ;};goto _bagb ;_aaf :_cbe =_feb +1;_bfg =15;goto _gcea ;_gcea :if _feb ++;_feb ==_afa {goto _daag ;};_bcac :switch _dfd [_feb ]{case 46:goto _daffe ;
case 58:goto _ceg ;case 65:goto _ebef ;case 104:goto _ceg ;case 109:goto _ceg ;case 115:goto _aaf ;};goto _fafe ;_daffe :if _feb ++;_feb ==_afa {goto _acbg ;};_gfd :if _dfd [_feb ]==48{goto _aca ;};goto _gfe ;_aca :_cbe =_feb +1;_bfg =15;goto _ffge ;_ffge :if _feb ++;
_feb ==_afa {goto _aed ;};_aaca :switch _dfd [_feb ]{case 48:goto _ddc ;case 58:goto _ceg ;case 65:goto _ebef ;case 104:goto _ceg ;case 109:goto _ceg ;case 115:goto _aaf ;};goto _fafe ;_ddc :_cbe =_feb +1;_bfg =15;goto _ddd ;_ddd :if _feb ++;_feb ==_afa {goto _ccfff ;
};_fecc :switch _dfd [_feb ]{case 48:goto _ceg ;case 58:goto _ceg ;case 65:goto _ebef ;case 104:goto _ceg ;case 109:goto _ceg ;case 115:goto _aaf ;};goto _fafe ;_cdg :_cbe =_feb +1;_bfg =5;goto _gcdc ;_gcdc :if _feb ++;_feb ==_afa {goto _ffgg ;};_caac :switch _dfd [_feb ]{case 35:goto _fdfgd ;
case 37:goto _fdfgd ;case 47:goto _agge ;case 48:goto _fdfgd ;case 63:goto _fdfgd ;};goto _gbe ;_eag :_cbe =_feb +1;_bfg =20;goto _fcde ;_fcde :if _feb ++;_feb ==_afa {goto _dcf ;};_egge :switch _dfd [_feb ]{case 47:goto _gcg ;case 77:goto _debd ;};goto _dac ;
_fff :if _feb ++;_feb ==_afa {goto _cba ;};_ccbf :switch _dfd [_feb ]{case 43:goto _fce ;case 45:goto _fce ;};goto _dac ;_cdec :_cbe =_feb +1;goto _agb ;_agb :if _feb ++;_feb ==_afa {goto _bfe ;};_eda :if _dfd [_feb ]==101{goto _abcd ;};goto _dac ;_abcd :if _feb ++;
_feb ==_afa {goto _bgff ;};_dggce :if _dfd [_feb ]==110{goto _bae ;};goto _ccf ;_bae :if _feb ++;_feb ==_afa {goto _gggb ;};_acdb :if _dfd [_feb ]==101{goto _ccff ;};goto _ccf ;_ccff :if _feb ++;_feb ==_afa {goto _fgg ;};_ffaf :if _dfd [_feb ]==114{goto _ffdg ;
};goto _ccf ;_ffdg :if _feb ++;_feb ==_afa {goto _cce ;};_dgde :if _dfd [_feb ]==97{goto _affe ;};goto _ccf ;_affe :if _feb ++;_feb ==_afa {goto _babd ;};_face :if _dfd [_feb ]==108{goto _eggb ;};goto _ccf ;_cbdb :_cbe =_feb +1;_bfg =20;goto _cdf ;_cdf :if _feb ++;
_feb ==_afa {goto _fbge ;};_dfgd :switch _dfd [_feb ]{case 104:goto _gge ;case 109:goto _gge ;case 115:goto _gge ;};goto _fefa ;_fefa :if _feb ++;_feb ==_afa {goto _eae ;};_bed :if _dfd [_feb ]==93{goto _gfca ;};goto _fefa ;_gfca :_cbe =_feb +1;_bfg =18;
goto _edd ;_gdc :_cbe =_feb +1;_bfg =16;goto _edd ;_edd :if _feb ++;_feb ==_afa {goto _edag ;};_dea :if _dfd [_feb ]==93{goto _gfca ;};goto _fefa ;_gge :if _feb ++;_feb ==_afa {goto _gddg ;};_gfeb :if _dfd [_feb ]==93{goto _gdc ;};goto _fefa ;_ade :if _feb ++;
_feb ==_afa {goto _adcgc ;};_eff :goto _dfed ;_ecgfe :_cbe =_feb +1;_bfg =14;goto _bbdc ;_bbdc :if _feb ++;_feb ==_afa {goto _aea ;};_bede :switch _dfd [_feb ]{case 47:goto _bgge ;case 58:goto _ceg ;case 65:goto _ebef ;case 100:goto _bgge ;case 104:goto _ceg ;
case 109:goto _ecgfe ;case 115:goto _aaf ;case 121:goto _gba ;};goto _aae ;_fgce :if _feb ++;_feb ==_afa {goto _eecg ;};_fdfe :if _dfd [_feb ]==121{goto _bgge ;};goto _dac ;_ged :_gbb :_eea =34;goto _fdcg ;_dgdb :_eea =35;goto _fdcg ;_bgea :_eea =0;goto _fdcg ;
_dae :_eea =36;goto _fdcg ;_dgadad :_eea =37;goto _fdcg ;_bbg :_eea =1;goto _fdcg ;_ecac :_eea =2;goto _fdcg ;_eaf :_eea =38;goto _fdcg ;_gcda :_eea =3;goto _fdcg ;_aaa :_eea =4;goto _fdcg ;_eba :_eea =39;goto _fdcg ;_aceb :_eea =5;goto _fdcg ;_acg :_eea =6;
goto _fdcg ;_acga :_eea =7;goto _fdcg ;_fcef :_eea =8;goto _fdcg ;_adda :_eea =40;goto _fdcg ;_dcea :_eea =9;goto _fdcg ;_adea :_eea =41;goto _fdcg ;_caacf :_eea =10;goto _fdcg ;_fecf :_eea =42;goto _fdcg ;_aaea :_eea =11;goto _fdcg ;_cdcf :_eea =43;goto _fdcg ;
_aafc :_eea =44;goto _fdcg ;_gddeg :_eea =45;goto _fdcg ;_ddg :_eea =12;goto _fdcg ;_bgb :_eea =46;goto _fdcg ;_cegf :_eea =13;goto _fdcg ;_eebd :_eea =14;goto _fdcg ;_cag :_eea =15;goto _fdcg ;_daed :_eea =16;goto _fdcg ;_cbba :_eea =47;goto _fdcg ;_dcdc :_eea =17;
goto _fdcg ;_afab :_eea =48;goto _fdcg ;_gfac :_eea =18;goto _fdcg ;_bdaa :_eea =19;goto _fdcg ;_bee :_eea =20;goto _fdcg ;_fdb :_eea =49;goto _fdcg ;_dbce :_eea =50;goto _fdcg ;_ddfe :_eea =21;goto _fdcg ;_gfb :_eea =22;goto _fdcg ;_bdcg :_eea =23;goto _fdcg ;
_deg :_eea =24;goto _fdcg ;_cadg :_eea =25;goto _fdcg ;_daag :_eea =51;goto _fdcg ;_acbg :_eea =26;goto _fdcg ;_aed :_eea =52;goto _fdcg ;_ccfff :_eea =53;goto _fdcg ;_ffgg :_eea =54;goto _fdcg ;_dcf :_eea =55;goto _fdcg ;_cba :_eea =56;goto _fdcg ;_bfe :_eea =57;
goto _fdcg ;_bgff :_eea =27;goto _fdcg ;_gggb :_eea =28;goto _fdcg ;_fgg :_eea =29;goto _fdcg ;_cce :_eea =30;goto _fdcg ;_babd :_eea =31;goto _fdcg ;_fbge :_eea =58;goto _fdcg ;_eae :_eea =32;goto _fdcg ;_edag :_eea =59;goto _fdcg ;_gddg :_eea =33;goto _fdcg ;
_adcgc :_eea =60;goto _fdcg ;_aea :_eea =61;goto _fdcg ;_eecg :_eea =62;goto _fdcg ;_fdcg :{};if _feb ==_bbc {switch _eea {case 35:goto _dac ;case 0:goto _bagb ;case 36:goto _cgd ;case 37:goto _cab ;case 1:goto _bagb ;case 2:goto _bagb ;case 38:goto _fca ;
case 3:goto _ddbg ;case 4:goto _ddbg ;case 39:goto _fca ;case 5:goto _ddbg ;case 6:goto _ddbg ;case 7:goto _ddbg ;case 8:goto _bagb ;case 40:goto _fca ;case 9:goto _ddbg ;case 41:goto _fca ;case 10:goto _bagb ;case 42:goto _fca ;case 11:goto _ddbg ;case 43:goto _fca ;
case 44:goto _fca ;case 45:goto _fca ;case 12:goto _caa ;case 46:goto _aac ;case 13:goto _dda ;case 14:goto _bagb ;case 15:goto _bagb ;case 16:goto _dda ;case 47:goto _aae ;case 17:goto _dgd ;case 48:goto _daa ;case 18:goto _dcd ;case 19:goto _dcd ;case 20:goto _bagb ;
case 49:goto _dac ;case 50:goto _fafe ;case 21:goto _bagb ;case 22:goto _bagb ;case 23:goto _bagb ;case 24:goto _bagb ;case 25:goto _bagb ;case 51:goto _fafe ;case 26:goto _gfe ;case 52:goto _fafe ;case 53:goto _fafe ;case 54:goto _gbe ;case 55:goto _dac ;
case 56:goto _dac ;case 57:goto _dac ;case 27:goto _ccf ;case 28:goto _ccf ;case 29:goto _ccf ;case 30:goto _ccf ;case 31:goto _ccf ;case 58:goto _dac ;case 32:goto _bagb ;case 59:goto _bagb ;case 33:goto _ccf ;case 60:goto _dac ;case 61:goto _aae ;case 62:goto _dac ;
};};};if _fdd > 0{copy (_dfd [0:],_dfd [_fdd :]);};};_ =_bbc ;if _eea ==_cccc {_ba .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");};};func _ega (_ca ,_bcg float64 ,_eadf Format )[]byte {if len (_eadf .Whole )==0{return nil ;
};_bg :=_a .Date (1899,12,30,0,0,0,0,_a .UTC );_ecg :=_bg .Add (_a .Duration (_bcg *float64 (24*_a .Hour )));_ecg =_aegg (_ecg );_ecca :=_c .AppendFloat (nil ,_ca ,'f',-1,64);_bca :=make ([]byte ,0,len (_ecca ));_bcgg :=0;_gd :=1;_acd :for _dbdf :=len (_eadf .Whole )-1;
_dbdf >=0;_dbdf --{_ffd :=len (_ecca )-1-_bcgg ;_ddb :=_eadf .Whole [_dbdf ];switch _ddb .Type {case FmtTypeDigit :if _ffd >=0{_bca =append (_bca ,_ecca [_ffd ]);_bcgg ++;_gd =_dbdf ;}else {_bca =append (_bca ,'0');};case FmtTypeDigitOpt :if _ffd >=0{_bca =append (_bca ,_ecca [_ffd ]);
_bcgg ++;_gd =_dbdf ;}else {for _bb :=_dbdf ;_bb >=0;_bb --{_ef :=_eadf .Whole [_bb ];if _ef .Type ==FmtTypeLiteral {_bca =append (_bca ,_ef .Literal );};};break _acd ;};case FmtTypeDollar :for _fa :=_bcgg ;_fa < len (_ecca );_fa ++{_bca =append (_bca ,_ecca [len (_ecca )-1-_fa ]);
_bcgg ++;};_bca =append (_bca ,'$');case FmtTypeComma :if !_eadf ._fd {_bca =append (_bca ,',');};case FmtTypeLiteral :_bca =append (_bca ,_ddb .Literal );case FmtTypeDate :_bca =append (_bca ,_ed (_dbg (_ecg ,_ddb .DateTime ))...);case FmtTypeTime :_bca =append (_bca ,_ed (_bgd (_ecg ,_bcg ,_ddb .DateTime ))...);
default:_ba .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_ddb );};};_bec :=_ed (_bca );if _bcgg < len (_ecca )&&(_bcgg !=0||_eadf ._ac ){_gfg :=len (_ecca )-_bcgg ;
_gcf :=make ([]byte ,len (_bec )+_gfg );copy (_gcf ,_bec [0:_gd ]);copy (_gcf [_gd :],_ecca [0:]);copy (_gcf [_gd +_gfg :],_bec [_gd :]);_bec =_gcf ;};if _eadf ._fd {_gb :=_ead .Buffer {};_dg :=0;for _efe :=len (_bec )-1;_efe >=0;_efe --{if !(_bec [_efe ]>='0'&&_bec [_efe ]<='9'){_dg ++;
}else {break ;};};for _ee :=0;_ee < len (_bec );_ee ++{_eeb :=(len (_bec )-_ee -_dg );if _eeb %3==0&&_eeb !=0&&_ee !=0{_gb .WriteByte (',');};_gb .WriteByte (_bec [_ee ]);};_bec =_gb .Bytes ();};return _bec ;};func _adf (_gdb ,_fab float64 ,_bf Format )[]byte {if len (_bf .Fractional )==0{return nil ;
};_ge :=_c .AppendFloat (nil ,_gdb ,'f',-1,64);if len (_ge )> 2{_ge =_ge [2:];}else {_ge =nil ;};_ace :=make ([]byte ,0,len (_ge ));_ace =append (_ace ,'.');_bgg :=0;_ffg :for _cbd :=0;_cbd < len (_bf .Fractional );_cbd ++{_edb :=_cbd ;_fcd :=_bf .Fractional [_cbd ];
switch _fcd .Type {case FmtTypeDigit :if _edb < len (_ge ){_ace =append (_ace ,_ge [_edb ]);_bgg ++;}else {_ace =append (_ace ,'0');};case FmtTypeDigitOpt :if _edb >=0{_ace =append (_ace ,_ge [_edb ]);_bgg ++;}else {break _ffg ;};case FmtTypeLiteral :_ace =append (_ace ,_fcd .Literal );
default:_ba .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_fcd );};};return _ace ;};