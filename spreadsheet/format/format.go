//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_d "bytes";_a "fmt";_ff "github.com/unidoc/unioffice/common/logger";_e "io";_f "math";_aa "strconv";_eb "strings";_b "time";);

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};func (_ae FmtType )String ()string {if _ae >=FmtType (len (_dc )-1){return _a .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ae );};return _bc [_dc [_ae ]:_dc [_ae +1]];
};const _fcag int =0;func IsNumber (data string )(_bff bool ){_bad ,_fdf ,_dge :=0,0,len (data );_ded :=len (data );_caa ,_gag ,_fbad :=0,0,0;_ =_gag ;_ =_fbad ;_ =_caa ;{_bad =_aga ;_caa =0;_gag =0;_fbad =0;};{if _fdf ==_dge {goto _gbf ;};switch _bad {case 0:goto _fbe ;
case 1:goto _acc ;case 2:goto _gge ;case 3:goto _dbd ;case 4:goto _ceed ;case 5:goto _dbc ;case 6:goto _bgc ;case 7:goto _cde ;};goto _aeca ;_daf :_gag =_fdf ;_fdf --;{_bff =false ;};goto _cbda ;_fe :_gag =_fdf ;_fdf --;{_bff =_gag ==len (data );};goto _cbda ;
_caf :_gag =_fdf ;_fdf --;{_bff =_gag ==len (data );};goto _cbda ;_cef :switch _fbad {case 2:{_fdf =(_gag )-1;_bff =_gag ==len (data );};case 3:{_fdf =(_gag )-1;_bff =false ;};};goto _cbda ;_cbda :_caa =0;if _fdf ++;_fdf ==_dge {goto _bfeb ;};_fbe :_caa =_fdf ;
switch data [_fdf ]{case 43:goto _ceb ;case 45:goto _ceb ;};if 48<=data [_fdf ]&&data [_fdf ]<=57{goto _fed ;};goto _aed ;_aed :if _fdf ++;_fdf ==_dge {goto _efcf ;};_acc :goto _aed ;_ceb :if _fdf ++;_fdf ==_dge {goto _aae ;};_gge :if 48<=data [_fdf ]&&data [_fdf ]<=57{goto _fed ;
};goto _aed ;_fed :if _fdf ++;_fdf ==_dge {goto _efd ;};_dbd :if data [_fdf ]==46{goto _ged ;};if 48<=data [_fdf ]&&data [_fdf ]<=57{goto _fed ;};goto _aed ;_ged :if _fdf ++;_fdf ==_dge {goto _gfa ;};_ceed :if 48<=data [_fdf ]&&data [_fdf ]<=57{goto _gbc ;
};goto _aed ;_gbc :if _fdf ++;_fdf ==_dge {goto _bbcf ;};_dbc :if data [_fdf ]==69{goto _bbfb ;};if 48<=data [_fdf ]&&data [_fdf ]<=57{goto _gbc ;};goto _aed ;_bbfb :if _fdf ++;_fdf ==_dge {goto _fbed ;};_bgc :switch data [_fdf ]{case 43:goto _agc ;case 45:goto _agc ;
};goto _aed ;_agc :_gag =_fdf +1;_fbad =3;goto _ggf ;_fef :_gag =_fdf +1;_fbad =2;goto _ggf ;_ggf :if _fdf ++;_fdf ==_dge {goto _efdf ;};_cde :if 48<=data [_fdf ]&&data [_fdf ]<=57{goto _fef ;};goto _aed ;_aeca :_bfeb :_bad =0;goto _gbf ;_efcf :_bad =1;
goto _gbf ;_aae :_bad =2;goto _gbf ;_efd :_bad =3;goto _gbf ;_gfa :_bad =4;goto _gbf ;_bbcf :_bad =5;goto _gbf ;_fbed :_bad =6;goto _gbf ;_efdf :_bad =7;goto _gbf ;_gbf :{};if _fdf ==_ded {switch _bad {case 1:goto _daf ;case 2:goto _daf ;case 3:goto _fe ;
case 4:goto _daf ;case 5:goto _caf ;case 6:goto _daf ;case 7:goto _cef ;};};};if _bad ==_efab {return false ;};return ;};var _dc =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};const _efab int =-1;const _ffa int =34;func _ef (_bca float64 ,_dgf Format ,_be bool )string {if _dgf ._db {return NumberGeneric (_bca );
};_bg :=make ([]byte ,0,20);_eda :=_f .Signbit (_bca );_efa :=_f .Abs (_bca );_ceg :=int64 (0);_bef :=int64 (0);if _dgf .IsExponential {for _efa >=10{_bef ++;_efa /=10;};for _efa < 1{_bef --;_efa *=10;};}else if _dgf ._eg {_efa *=100;}else if _dgf ._ffbb {if _dgf ._dbf ==0{_ec :=_f .Pow (10,float64 (_dgf ._ggg ));
_gb ,_ecd :=1.0,1.0;_ =_gb ;for _fgd :=1.0;_fgd < _ec ;_fgd ++{_ ,_fb :=_f .Modf (_efa *float64 (_fgd ));if _fb < _ecd {_ecd =_fb ;_gb =_fgd ;if _fb ==0{break ;};};};_dgf ._dbf =int64 (_gb );};_ceg =int64 (_efa *float64 (_dgf ._dbf )+0.5);if len (_dgf .Whole )> 0&&_ceg > _dgf ._dbf {_ceg =int64 (_efa *float64 (_dgf ._dbf ))%_dgf ._dbf ;
_efa -=float64 (_ceg )/float64 (_dgf ._dbf );}else {_efa -=float64 (_ceg )/float64 (_dgf ._dbf );if _f .Abs (_efa )< 1{_ggge :=true ;for _ ,_dcf :=range _dgf .Whole {if _dcf .Type ==FmtTypeDigitOpt {continue ;};if _dcf .Type ==FmtTypeLiteral &&_dcf .Literal ==' '{continue ;
};_ggge =false ;};if _ggge {_dgf .Whole =nil ;};};};};_aac :=1;for _ ,_fbf :=range _dgf .Fractional {if _fbf .Type ==FmtTypeDigit ||_fbf .Type ==FmtTypeDigitOpt {_aac ++;};};_efa +=5*_f .Pow10 (-_aac );_gac ,_cd :=_f .Modf (_efa );_bg =append (_bg ,_befe (_gac ,_bca ,_dgf )...);
_bg =append (_bg ,_gdd (_cd ,_bca ,_dgf )...);_bg =append (_bg ,_egg (_bef ,_dgf )...);if _dgf ._ffbb {_bg =_aa .AppendInt (_bg ,_ceg ,10);_bg =append (_bg ,'/');_bg =_aa .AppendInt (_bg ,_dgf ._dbf ,10);};if !_be &&_eda {return "\u002d"+string (_bg );
};return string (_bg );};func _befe (_dca ,_agg float64 ,_ea Format )[]byte {if len (_ea .Whole )==0{return nil ;};_eab :=_b .Date (1899,12,30,0,0,0,0,_b .UTC );_cca :=_eab .Add (_b .Duration (_agg *float64 (24*_b .Hour )));_cca =_ddce (_cca );_bag :=_aa .AppendFloat (nil ,_dca ,'f',-1,64);
_gd :=make ([]byte ,0,len (_bag ));_fcc :=0;_aab :=1;_aag :for _ebe :=len (_ea .Whole )-1;_ebe >=0;_ebe --{_cg :=len (_bag )-1-_fcc ;_aaf :=_ea .Whole [_ebe ];switch _aaf .Type {case FmtTypeDigit :if _cg >=0{_gd =append (_gd ,_bag [_cg ]);_fcc ++;_aab =_ebe ;
}else {_gd =append (_gd ,'0');};case FmtTypeDigitOpt :if _cg >=0{_gd =append (_gd ,_bag [_cg ]);_fcc ++;_aab =_ebe ;}else {for _bbc :=_ebe ;_bbc >=0;_bbc --{_ffbc :=_ea .Whole [_bbc ];if _ffbc .Type ==FmtTypeLiteral {_gd =append (_gd ,_ffbc .Literal );
};};break _aag ;};case FmtTypeDollar :for _bge :=_fcc ;_bge < len (_bag );_bge ++{_gd =append (_gd ,_bag [len (_bag )-1-_bge ]);_fcc ++;};_gd =append (_gd ,'$');case FmtTypeComma :if !_ea ._gg {_gd =append (_gd ,',');};case FmtTypeLiteral :_gd =append (_gd ,_aaf .Literal );
case FmtTypeDate :_gd =append (_gd ,_cf (_edcf (_cca ,_aaf .DateTime ))...);case FmtTypeTime :_gd =append (_gd ,_cf (_fbg (_cca ,_agg ,_aaf .DateTime ))...);default:_ff .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_aaf );
};};_ccc :=_cf (_gd );if _fcc < len (_bag )&&(_fcc !=0||_ea ._c ){_afg :=len (_bag )-_fcc ;_eec :=make ([]byte ,len (_ccc )+_afg );copy (_eec ,_ccc [0:_aab ]);copy (_eec [_aab :],_bag [0:]);copy (_eec [_aab +_afg :],_ccc [_aab :]);_ccc =_eec ;};if _ea ._gg {_efc :=_d .Buffer {};
_cdg :=0;for _fgb :=len (_ccc )-1;_fgb >=0;_fgb --{if !(_ccc [_fgb ]>='0'&&_ccc [_fgb ]<='9'){_cdg ++;}else {break ;};};for _cff :=0;_cff < len (_ccc );_cff ++{_efe :=(len (_ccc )-_cff -_cdg );if _efe %3==0&&_efe !=0&&_cff !=0{_efc .WriteByte (',');};_efc .WriteByte (_ccc [_cff ]);
};_ccc =_efc .Bytes ();};return _ccc ;};const _ge =1e-10;

// FmtType is the type of a format token.
//
//go:generate stringer -type=FmtType
type FmtType byte ;func _egg (_ggc int64 ,_beg Format )[]byte {if !_beg .IsExponential ||len (_beg .Exponent )==0{return nil ;};_aea :=_aa .AppendInt (nil ,_aee (_ggc ),10);_ccb :=make ([]byte ,0,len (_aea )+2);_ccb =append (_ccb ,'E');if _ggc >=0{_ccb =append (_ccb ,'+');
}else {_ccb =append (_ccb ,'-');_ggc *=-1;};_efgf :=0;_cbd :for _cba :=len (_beg .Exponent )-1;_cba >=0;_cba --{_abde :=len (_aea )-1-_efgf ;_agf :=_beg .Exponent [_cba ];switch _agf .Type {case FmtTypeDigit :if _abde >=0{_ccb =append (_ccb ,_aea [_abde ]);
_efgf ++;}else {_ccb =append (_ccb ,'0');};case FmtTypeDigitOpt :if _abde >=0{_ccb =append (_ccb ,_aea [_abde ]);_efgf ++;}else {for _ebd :=_cba ;_ebd >=0;_ebd --{_fgf :=_beg .Exponent [_ebd ];if _fgf .Type ==FmtTypeLiteral {_ccb =append (_ccb ,_fgf .Literal );
};};break _cbd ;};case FmtTypeLiteral :_ccb =append (_ccb ,_agf .Literal );default:_ff .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_agf );
};};if _efgf < len (_aea ){_ccb =append (_ccb ,_aea [len (_aea )-_efgf -1:_efgf -1]...);};_cf (_ccb [2:]);return _ccb ;};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_dg :=Parse (f );if len (_dg )==1{return _ef (v ,_dg [0],false );}else if len (_dg )> 1&&v < 0{return _ef (v ,_dg [1],true );
}else if len (_dg )> 2&&v ==0{return _ef (v ,_dg [2],false );};return _ef (v ,_dg [0],false );};const _bc ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";
func _aee (_ege int64 )int64 {if _ege < 0{return -_ege ;};return _ege ;};

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _f .Abs (v )>=_ffb ||_f .Abs (v )<=_ge &&v !=0{return _fbd (v );};_dd :=make ([]byte ,0,15);_dd =_aa .AppendFloat (_dd ,v ,'f',-1,64);if len (_dd )> 11{_cfd :=_dd [11]-'0';if _cfd >=5&&_cfd <=9{_dd [10]++;_dd =_dd [0:11];
_dd =_aba (_dd );};_dd =_dd [0:11];}else if len (_dd )==11{if _dd [len (_dd )-1]=='9'{_dd [len (_dd )-1]++;_dd =_aba (_dd );};};_dd =_aabe (_dd );return string (_dd );};const _cab int =0;

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_df :=Parse (f );var _fg Format ;if len (_df )==1{_fg =_df [0];}else if len (_df )==4{_fg =_df [3];};_ed :=false ;for _ ,_geg :=range _fg .Whole {if _geg .Type ==FmtTypeText {_ed =true ;};};if !_ed {return v ;};
_gfe :=_d .Buffer {};for _ ,_gfc :=range _fg .Whole {switch _gfc .Type {case FmtTypeLiteral :_gfe .WriteByte (_gfc .Literal );case FmtTypeText :_gfe .WriteString (v );};};return _gfe .String ();};func _fbg (_cfde _b .Time ,_eabg float64 ,_da string )[]byte {_aca :=[]byte {};
_ddd :=0;for _afe :=0;_afe < len (_da );_afe ++{var _bcce string ;if _da [_afe ]==':'{_bcce =string (_da [_ddd :_afe ]);_ddd =_afe +1;}else if _afe ==len (_da )-1{_bcce =string (_da [_ddd :_afe +1]);}else {continue ;};switch _bcce {case "\u0064":_aca =_cfde .AppendFormat (_aca ,"\u0032");
case "\u0068":_aca =_cfde .AppendFormat (_aca ,"\u0033");case "\u0068\u0068":_aca =_cfde .AppendFormat (_aca ,"\u0031\u0035");case "\u006d":_aca =_cfde .AppendFormat (_aca ,"\u0034");case "\u006d\u006d":_aca =_cfde .AppendFormat (_aca ,"\u0030\u0034");
case "\u0073":_aca =_cfde .Round (_b .Second ).AppendFormat (_aca ,"\u0035");case "\u0073\u002e\u0030":_aca =_cfde .Round (_b .Second /10).AppendFormat (_aca ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_aca =_cfde .Round (_b .Second /100).AppendFormat (_aca ,"\u0035\u002e\u0030\u0030");
case "\u0073\u002e\u00300\u0030":_aca =_cfde .Round (_b .Second /1000).AppendFormat (_aca ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_aca =_cfde .Round (_b .Second ).AppendFormat (_aca ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_aca =_cfde .Round (_b .Second /10).AppendFormat (_aca ,"\u0030\u0035\u002e\u0030");
case "\u0073\u0073\u002e0\u0030":_aca =_cfde .Round (_b .Second /100).AppendFormat (_aca ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_aca =_cfde .Round (_b .Second /1000).AppendFormat (_aca ,"\u0030\u0035\u002e\u0030\u0030\u0030");
case "\u0041\u004d\u002fP\u004d":_aca =_cfde .AppendFormat (_aca ,"\u0050\u004d");case "\u005b\u0068\u005d":_aca =_aa .AppendInt (_aca ,int64 (_eabg *24),10);case "\u005b\u006d\u005d":_aca =_aa .AppendInt (_aca ,int64 (_eabg *24*60),10);case "\u005b\u0073\u005d":_aca =_aa .AppendInt (_aca ,int64 (_eabg *24*60*60),10);
case "":default:_ff .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_bcce );};if _da [_afe ]==':'{_aca =append (_aca ,':');};};return _aca ;
};func _aabe (_bfe []byte )[]byte {_cfdg :=len (_bfe );_bfg :=false ;_bbf :=false ;for _gae :=len (_bfe )-1;_gae >=0;_gae --{if _bfe [_gae ]=='0'&&!_bbf &&!_bfg {_cfdg =_gae ;}else if _bfe [_gae ]=='.'{_bfg =true ;}else {_bbf =true ;};};if _bfg &&_bbf {if _bfe [_cfdg -1]=='.'{_cfdg --;
};return _bfe [0:_cfdg ];};return _bfe ;};

// AddToken adds a format token to the format.
func (_cb *Format )AddToken (t FmtType ,l []byte ){if _cb ._fc {_cb ._fc =false ;return ;};switch t {case FmtTypeDecimal :_cb ._c =true ;case FmtTypeUnderscore :_cb ._fc =true ;case FmtTypeText :_cb .Whole =append (_cb .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_cb .Whole =append (_cb .Whole ,Token {Type :t ,DateTime :string (l )});
case FmtTypePercent :_cb ._eg =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_de :=range l {if _cb .IsExponential {_cb .Exponent =append (_cb .Exponent ,Token {Type :t ,Literal :_de });
}else if !_cb ._c {_cb .Whole =append (_cb .Whole ,Token {Type :t ,Literal :_de });}else {_cb .Fractional =append (_cb .Fractional ,Token {Type :t ,Literal :_de });};};case FmtTypeDigitOptThousands :_cb ._gg =true ;case FmtTypeFraction :_cbg :=_eb .Split (string (l ),"\u002f");
if len (_cbg )==2{_cb ._ffbb =true ;_cb ._dbf ,_ =_aa .ParseInt (_cbg [1],10,64);for _ ,_bd :=range _cbg [1]{if _bd =='?'||_bd =='0'{_cb ._ggg ++;};};};default:_ff .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );
};};const _ffb =1e11;func _cf (_ga []byte )[]byte {for _af :=0;_af < len (_ga )/2;_af ++{_ac :=len (_ga )-1-_af ;_ga [_af ],_ga [_ac ]=_ga [_ac ],_ga [_af ];};return _ga ;};func _ddce (_aff _b .Time )_b .Time {_aff =_aff .UTC ();return _b .Date (_aff .Year (),_aff .Month (),_aff .Day (),_aff .Hour (),_aff .Minute (),_aff .Second (),_aff .Nanosecond (),_b .Local );
};func Parse (s string )[]Format {_ced :=Lexer {};_ced .Lex (_eb .NewReader (s ));_ced ._dab =append (_ced ._dab ,_ced ._def );return _ced ._dab ;};func _edcf (_eca _b .Time ,_bcc string )[]byte {_ecb :=[]byte {};_eed :=0;for _fad :=0;_fad < len (_bcc );
_fad ++{var _fd string ;if _bcc [_fad ]=='/'{_fd =string (_bcc [_eed :_fad ]);_eed =_fad +1;}else if _fad ==len (_bcc )-1{_fd =string (_bcc [_eed :_fad +1]);}else {continue ;};switch _fd {case "\u0079\u0079":_ecb =_eca .AppendFormat (_ecb ,"\u0030\u0036");
case "\u0079\u0079\u0079\u0079":_ecb =_eca .AppendFormat (_ecb ,"\u0032\u0030\u0030\u0036");case "\u006d":_ecb =_eca .AppendFormat (_ecb ,"\u0031");case "\u006d\u006d":_ecb =_eca .AppendFormat (_ecb ,"\u0030\u0031");case "\u006d\u006d\u006d":_ecb =_eca .AppendFormat (_ecb ,"\u004a\u0061\u006e");
case "\u006d\u006d\u006d\u006d":_ecb =_eca .AppendFormat (_ecb ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _eca .Month (){case _b .January ,_b .July ,_b .June :_ecb =append (_ecb ,'J');case _b .February :_ecb =append (_ecb ,'M');
case _b .March ,_b .May :_ecb =append (_ecb ,'M');case _b .April ,_b .August :_ecb =append (_ecb ,'A');case _b .September :_ecb =append (_ecb ,'S');case _b .October :_ecb =append (_ecb ,'O');case _b .November :_ecb =append (_ecb ,'N');case _b .December :_ecb =append (_ecb ,'D');
};case "\u0064":_ecb =_eca .AppendFormat (_ecb ,"\u0032");case "\u0064\u0064":_ecb =_eca .AppendFormat (_ecb ,"\u0030\u0032");case "\u0064\u0064\u0064":_ecb =_eca .AppendFormat (_ecb ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_ecb =_eca .AppendFormat (_ecb ,"\u004d\u006f\u006e\u0064\u0061\u0079");
default:_ff .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_fd );};if _bcc [_fad ]=='/'{_ecb =append (_ecb ,'/');};};return _ecb ;};func _aba (_ccbb []byte )[]byte {for _edc :=len (_ccbb )-1;
_edc > 0;_edc --{if _ccbb [_edc ]=='9'+1{_ccbb [_edc ]='0';if _ccbb [_edc -1]=='.'{_edc --;};_ccbb [_edc -1]++;};};if _ccbb [0]=='9'+1{_ccbb [0]='0';copy (_ccbb [1:],_ccbb [0:]);_ccbb [0]='1';};return _ccbb ;};func (_cbdf *Lexer )Lex (r _e .Reader ){_fga ,_gaa ,_bccf :=0,0,0;
_ffbf :=-1;_defb ,_ace ,_gda :=0,0,0;_ =_ace ;_ =_gda ;_ceba :=1;_ =_ceba ;_acb :=make ([]byte ,4096);_dcg :=false ;for !_dcg {_cag :=0;if _defb > 0{_cag =_gaa -_defb ;};_gaa =0;_bfef ,_ebb :=r .Read (_acb [_cag :]);if _bfef ==0||_ebb !=nil {_dcg =true ;
};_bccf =_bfef +_cag ;if _bccf < len (_acb ){_ffbf =_bccf ;};{_fga =_cbab ;_defb =0;_ace =0;_gda =0;};{if _gaa ==_bccf {goto _afc ;};switch _fga {case 34:goto _ggfg ;case 35:goto _cggc ;case 0:goto _eedg ;case 36:goto _edb ;case 37:goto _ffaf ;case 1:goto _dgef ;
case 2:goto _bbbd ;case 38:goto _agff ;case 3:goto _dad ;case 4:goto _cedg ;case 39:goto _defd ;case 5:goto _fcae ;case 6:goto _cea ;case 7:goto _dcb ;case 8:goto _dec ;case 40:goto _ceaf ;case 9:goto _fgag ;case 41:goto _cage ;case 10:goto _gagb ;case 42:goto _gea ;
case 11:goto _ddde ;case 43:goto _eaf ;case 44:goto _efge ;case 45:goto _eecd ;case 12:goto _cfed ;case 46:goto _fge ;case 13:goto _dcfg ;case 14:goto _agce ;case 15:goto _fdg ;case 16:goto _gdcd ;case 47:goto _gee ;case 17:goto _dbee ;case 48:goto _ffe ;
case 18:goto _acbg ;case 19:goto _bgb ;case 20:goto _dbfd ;case 49:goto _feb ;case 50:goto _adf ;case 21:goto _bfc ;case 22:goto _feg ;case 23:goto _bcba ;case 24:goto _gef ;case 25:goto _ccad ;case 51:goto _gefc ;case 26:goto _dgg ;case 52:goto _gedd ;
case 53:goto _gcg ;case 54:goto _fgfe ;case 55:goto _bae ;case 56:goto _bgfa ;case 57:goto _afa ;case 27:goto _gaff ;case 28:goto _ggd ;case 29:goto _ecea ;case 30:goto _cdfe ;case 31:goto _aedf ;case 58:goto _cbb ;case 32:goto _egge ;case 59:goto _dbb ;
case 33:goto _gce ;case 60:goto _fff ;case 61:goto _abe ;case 62:goto _cagf ;};goto _gfge ;_ad :switch _gda {case 2:{_gaa =(_ace )-1;_cbdf ._def .AddToken (FmtTypeDigit ,nil );};case 3:{_gaa =(_ace )-1;_cbdf ._def .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_gaa =(_ace )-1;
};case 8:{_gaa =(_ace )-1;_cbdf ._def .AddToken (FmtTypePercent ,nil );};case 13:{_gaa =(_ace )-1;_cbdf ._def .AddToken (FmtTypeFraction ,_acb [_defb :_ace ]);};case 14:{_gaa =(_ace )-1;_cbdf ._def .AddToken (FmtTypeDate ,_acb [_defb :_ace ]);};case 15:{_gaa =(_ace )-1;
_cbdf ._def .AddToken (FmtTypeTime ,_acb [_defb :_ace ]);};case 16:{_gaa =(_ace )-1;_cbdf ._def .AddToken (FmtTypeTime ,_acb [_defb :_ace ]);};case 18:{_gaa =(_ace )-1;};case 20:{_gaa =(_ace )-1;_cbdf ._def .AddToken (FmtTypeLiteral ,_acb [_defb :_ace ]);
};case 21:{_gaa =(_ace )-1;_cbdf ._def .AddToken (FmtTypeLiteral ,_acb [_defb +1:_ace -1]);};};goto _ddf ;_gbce :_gaa =(_ace )-1;{_cbdf ._def .AddToken (FmtTypeFraction ,_acb [_defb :_ace ]);};goto _ddf ;_aeb :_gaa =(_ace )-1;{_cbdf ._def .AddToken (FmtTypeDigitOpt ,nil );
};goto _ddf ;_fcagc :_ace =_gaa +1;{_cbdf ._def .AddToken (FmtTypeDigitOptThousands ,nil );};goto _ddf ;_gfgf :_gaa =(_ace )-1;{_cbdf ._def .AddToken (FmtTypePercent ,nil );};goto _ddf ;_cgg :_gaa =(_ace )-1;{_cbdf ._def .AddToken (FmtTypeDate ,_acb [_defb :_ace ]);
};goto _ddf ;_dac :_gaa =(_ace )-1;{_cbdf ._def .AddToken (FmtTypeDigit ,nil );};goto _ddf ;_dddc :_gaa =(_ace )-1;{_cbdf ._def .AddToken (FmtTypeTime ,_acb [_defb :_ace ]);};goto _ddf ;_cdge :_gaa =(_ace )-1;{_cbdf ._def .AddToken (FmtTypeLiteral ,_acb [_defb :_ace ]);
};goto _ddf ;_acbc :_ace =_gaa +1;{_cbdf ._def ._db =true ;};goto _ddf ;_bee :_ace =_gaa +1;{_cbdf ._def .AddToken (FmtTypeLiteral ,_acb [_defb :_ace ]);};goto _ddf ;_gedc :_ace =_gaa +1;{_cbdf ._def .AddToken (FmtTypeDollar ,nil );};goto _ddf ;_gedca :_ace =_gaa +1;
{_cbdf ._def .AddToken (FmtTypeComma ,nil );};goto _ddf ;_cdgc :_ace =_gaa +1;{_cbdf ._def .AddToken (FmtTypeDecimal ,nil );};goto _ddf ;_afeb :_ace =_gaa +1;{_cbdf .nextFmt ();};goto _ddf ;_gfd :_ace =_gaa +1;{_cbdf ._def .AddToken (FmtTypeText ,nil );
};goto _ddf ;_aacg :_ace =_gaa +1;{_cbdf ._def .AddToken (FmtTypeUnderscore ,nil );};goto _ddf ;_bfb :_ace =_gaa ;_gaa --;{_cbdf ._def .AddToken (FmtTypeLiteral ,_acb [_defb :_ace ]);};goto _ddf ;_agcg :_ace =_gaa ;_gaa --;{_cbdf ._def .AddToken (FmtTypeLiteral ,_acb [_defb +1:_ace -1]);
};goto _ddf ;_cdf :_ace =_gaa ;_gaa --;{_cbdf ._def .AddToken (FmtTypeDigitOpt ,nil );};goto _ddf ;_fbaf :_ace =_gaa ;_gaa --;{_cbdf ._def .AddToken (FmtTypeFraction ,_acb [_defb :_ace ]);};goto _ddf ;_fcd :_ace =_gaa ;_gaa --;{_cbdf ._def .AddToken (FmtTypePercent ,nil );
};goto _ddf ;_gaf :_ace =_gaa ;_gaa --;{_cbdf ._def .AddToken (FmtTypeDate ,_acb [_defb :_ace ]);};goto _ddf ;_bbb :_ace =_gaa ;_gaa --;{_cbdf ._def .AddToken (FmtTypeDigit ,nil );};goto _ddf ;_ece :_ace =_gaa ;_gaa --;{_cbdf ._def .AddToken (FmtTypeTime ,_acb [_defb :_ace ]);
};goto _ddf ;_gaee :_ace =_gaa ;_gaa --;{};goto _ddf ;_gfdg :_ace =_gaa +1;{_cbdf ._def .IsExponential =true ;};goto _ddf ;_eabgd :_ace =_gaa +1;{_cbdf ._def .AddToken (FmtTypeLiteral ,_acb [_defb +1:_ace ]);};goto _ddf ;_ddf :_defb =0;if _gaa ++;_gaa ==_bccf {goto _cead ;
};_ggfg :_defb =_gaa ;switch _acb [_gaa ]{case 34:goto _bfa ;case 35:goto _fgaa ;case 36:goto _gedc ;case 37:goto _bda ;case 44:goto _gedca ;case 46:goto _cdgc ;case 47:goto _gafa ;case 48:goto _eggg ;case 58:goto _eeg ;case 59:goto _afeb ;case 63:goto _bcd ;
case 64:goto _gfd ;case 65:goto _adc ;case 69:goto _gbg ;case 71:goto _befb ;case 91:goto _fbadd ;case 92:goto _ccfg ;case 95:goto _aacg ;case 100:goto _gafa ;case 104:goto _eeg ;case 109:goto _abf ;case 115:goto _cdgcc ;case 121:goto _febd ;};if 49<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _dcd ;
};goto _bee ;_bfa :_ace =_gaa +1;_gda =20;goto _gbe ;_gbe :if _gaa ++;_gaa ==_bccf {goto _aceg ;};_cggc :if _acb [_gaa ]==34{goto _fbb ;};goto _ddff ;_ddff :if _gaa ++;_gaa ==_bccf {goto _gba ;};_eedg :if _acb [_gaa ]==34{goto _fbb ;};goto _ddff ;_fbb :_ace =_gaa +1;
_gda =21;goto _gff ;_gff :if _gaa ++;_gaa ==_bccf {goto _abdd ;};_edb :if _acb [_gaa ]==34{goto _ddff ;};goto _agcg ;_fgaa :_ace =_gaa +1;_gda =3;goto _dde ;_dde :if _gaa ++;_gaa ==_bccf {goto _cbaf ;};_ffaf :switch _acb [_gaa ]{case 35:goto _eccf ;case 37:goto _eccf ;
case 44:goto _dcee ;case 47:goto _aecb ;case 48:goto _eccf ;case 63:goto _eccf ;};goto _cdf ;_eccf :if _gaa ++;_gaa ==_bccf {goto _bfbb ;};_dgef :switch _acb [_gaa ]{case 35:goto _eccf ;case 37:goto _eccf ;case 47:goto _aecb ;case 48:goto _eccf ;case 63:goto _eccf ;
};goto _ad ;_aecb :if _gaa ++;_gaa ==_bccf {goto _acg ;};_bbbd :switch _acb [_gaa ]{case 35:goto _cfe ;case 37:goto _ggeg ;case 48:goto _dbe ;case 63:goto _cfe ;};if 49<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _fea ;};goto _ad ;_cfe :_ace =_gaa +1;goto _cce ;
_cce :if _gaa ++;_gaa ==_bccf {goto _fbgd ;};_agff :switch _acb [_gaa ]{case 35:goto _cfe ;case 37:goto _cfe ;case 44:goto _cfe ;case 46:goto _cfe ;case 48:goto _cfe ;case 63:goto _cfe ;case 65:goto _cfee ;};goto _fbaf ;_cfee :if _gaa ++;_gaa ==_bccf {goto _gdde ;
};_dad :switch _acb [_gaa ]{case 47:goto _adb ;case 77:goto _ggfe ;};goto _gbce ;_adb :if _gaa ++;_gaa ==_bccf {goto _bfd ;};_cedg :if _acb [_gaa ]==80{goto _fbag ;};goto _gbce ;_fbag :_ace =_gaa +1;goto _bbfc ;_bbfc :if _gaa ++;_gaa ==_bccf {goto _fbade ;
};_defd :if _acb [_gaa ]==65{goto _cfee ;};goto _fbaf ;_ggfe :if _gaa ++;_gaa ==_bccf {goto _gcd ;};_fcae :if _acb [_gaa ]==47{goto _dce ;};goto _gbce ;_dce :if _gaa ++;_gaa ==_bccf {goto _ccg ;};_cea :if _acb [_gaa ]==80{goto _fadc ;};goto _gbce ;_fadc :if _gaa ++;
_gaa ==_bccf {goto _dfa ;};_dcb :if _acb [_gaa ]==77{goto _fbag ;};goto _gbce ;_ggeg :if _gaa ++;_gaa ==_bccf {goto _aebc ;};_dec :switch _acb [_gaa ]{case 35:goto _cdga ;case 37:goto _cad ;case 63:goto _cdga ;};if 48<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _fcce ;
};goto _ad ;_cdga :_ace =_gaa +1;goto _ecbc ;_ecbc :if _gaa ++;_gaa ==_bccf {goto _fbgg ;};_ceaf :switch _acb [_gaa ]{case 35:goto _cfe ;case 37:goto _cdd ;case 44:goto _cfe ;case 46:goto _cfe ;case 48:goto _cfe ;case 63:goto _cfe ;case 65:goto _cfee ;
};goto _fbaf ;_cdd :if _gaa ++;_gaa ==_bccf {goto _dea ;};_fgag :switch _acb [_gaa ]{case 35:goto _gfdgd ;case 44:goto _gfdgd ;case 46:goto _gfdgd ;case 48:goto _gfdgd ;case 63:goto _gfdgd ;};goto _gbce ;_gfdgd :_ace =_gaa +1;goto _fbga ;_fbga :if _gaa ++;
_gaa ==_bccf {goto _dfcb ;};_cage :switch _acb [_gaa ]{case 35:goto _gfdgd ;case 44:goto _gfdgd ;case 46:goto _gfdgd ;case 48:goto _gfdgd ;case 63:goto _gfdgd ;case 65:goto _cfee ;};goto _fbaf ;_cad :if _gaa ++;_gaa ==_bccf {goto _fce ;};_gagb :if _acb [_gaa ]==37{goto _cad ;
};if 48<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _fcce ;};goto _ad ;_fcce :_ace =_gaa +1;_gda =13;goto _aeae ;_aeae :if _gaa ++;_gaa ==_bccf {goto _cdeb ;};_gea :switch _acb [_gaa ]{case 35:goto _cfe ;case 37:goto _dadd ;case 44:goto _cfe ;case 46:goto _cfe ;
case 48:goto _gdc ;case 63:goto _cfe ;case 65:goto _cfee ;};if 49<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _fcce ;};goto _fbaf ;_dadd :if _gaa ++;_gaa ==_bccf {goto _bdc ;};_ddde :switch _acb [_gaa ]{case 35:goto _gfdgd ;case 37:goto _cad ;case 44:goto _gfdgd ;
case 46:goto _gfdgd ;case 63:goto _gfdgd ;};if 48<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _fcce ;};goto _gbce ;_gdc :_ace =_gaa +1;goto _aaa ;_aaa :if _gaa ++;_gaa ==_bccf {goto _dfde ;};_eaf :switch _acb [_gaa ]{case 35:goto _cfe ;case 37:goto _gdc ;case 44:goto _cfe ;
case 46:goto _cfe ;case 48:goto _gdc ;case 63:goto _cfe ;case 65:goto _cfee ;};if 49<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _fcce ;};goto _fbaf ;_dbe :_ace =_gaa +1;goto _ccf ;_ccf :if _gaa ++;_gaa ==_bccf {goto _fab ;};_efge :switch _acb [_gaa ]{case 35:goto _cfe ;
case 37:goto _gdc ;case 44:goto _cfe ;case 46:goto _cfe ;case 48:goto _dbe ;case 63:goto _cfe ;case 65:goto _cfee ;};if 49<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _fea ;};goto _fbaf ;_fea :_ace =_gaa +1;goto _defc ;_defc :if _gaa ++;_gaa ==_bccf {goto _baee ;
};_eecd :switch _acb [_gaa ]{case 35:goto _cfe ;case 37:goto _fcce ;case 44:goto _cfe ;case 46:goto _cfe ;case 48:goto _dbe ;case 63:goto _cfe ;case 65:goto _cfee ;};if 49<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _fea ;};goto _fbaf ;_dcee :if _gaa ++;_gaa ==_bccf {goto _ddc ;
};_cfed :if _acb [_gaa ]==35{goto _fcagc ;};goto _aeb ;_bda :_ace =_gaa +1;_gda =8;goto _bgd ;_bgd :if _gaa ++;_gaa ==_bccf {goto _bbcg ;};_fge :switch _acb [_gaa ]{case 35:goto _beca ;case 37:goto _afef ;case 48:goto _faa ;case 63:goto _beca ;};if 49<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _fbc ;
};goto _fcd ;_beca :if _gaa ++;_gaa ==_bccf {goto _acef ;};_dcfg :switch _acb [_gaa ]{case 35:goto _beca ;case 47:goto _aecb ;case 48:goto _beca ;case 63:goto _beca ;};goto _gfgf ;_afef :if _gaa ++;_gaa ==_bccf {goto _geaf ;};_agce :if _acb [_gaa ]==37{goto _afef ;
};if 48<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _fbc ;};goto _ad ;_fbc :if _gaa ++;_gaa ==_bccf {goto _ffbe ;};_fdg :switch _acb [_gaa ]{case 37:goto _afef ;case 47:goto _aecb ;};if 48<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _fbc ;};goto _ad ;_faa :if _gaa ++;
_gaa ==_bccf {goto _dcec ;};_gdcd :switch _acb [_gaa ]{case 35:goto _beca ;case 37:goto _afef ;case 47:goto _aecb ;case 48:goto _faa ;case 63:goto _beca ;};if 49<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _fbc ;};goto _gfgf ;_gafa :_ace =_gaa +1;goto _cgf ;_cgf :if _gaa ++;
_gaa ==_bccf {goto _caga ;};_gee :switch _acb [_gaa ]{case 47:goto _gafa ;case 100:goto _gafa ;case 109:goto _gafa ;case 121:goto _gacb ;};goto _gaf ;_gacb :if _gaa ++;_gaa ==_bccf {goto _dafc ;};_dbee :if _acb [_gaa ]==121{goto _gafa ;};goto _cgg ;_eggg :_ace =_gaa +1;
_gda =2;goto _eedd ;_eedd :if _gaa ++;_gaa ==_bccf {goto _adg ;};_ffe :switch _acb [_gaa ]{case 35:goto _eccf ;case 37:goto _bagd ;case 47:goto _aecb ;case 48:goto _fgdb ;case 63:goto _eccf ;};if 49<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _ecae ;};goto _bbb ;
_bagd :if _gaa ++;_gaa ==_bccf {goto _cffa ;};_acbg :switch _acb [_gaa ]{case 35:goto _eccf ;case 37:goto _bagd ;case 47:goto _aecb ;case 48:goto _bagd ;case 63:goto _eccf ;};if 49<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _fbc ;};goto _dac ;_fgdb :if _gaa ++;
_gaa ==_bccf {goto _gcb ;};_bgb :switch _acb [_gaa ]{case 35:goto _eccf ;case 37:goto _bagd ;case 47:goto _aecb ;case 48:goto _fgdb ;case 63:goto _eccf ;};if 49<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _ecae ;};goto _dac ;_ecae :if _gaa ++;_gaa ==_bccf {goto _dcbf ;
};_dbfd :switch _acb [_gaa ]{case 37:goto _fbc ;case 47:goto _aecb ;};if 48<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _ecae ;};goto _ad ;_dcd :_ace =_gaa +1;_gda =20;goto _gc ;_gc :if _gaa ++;_gaa ==_bccf {goto _agb ;};_feb :switch _acb [_gaa ]{case 37:goto _fbc ;
case 47:goto _aecb ;};if 48<=_acb [_gaa ]&&_acb [_gaa ]<=57{goto _ecae ;};goto _bfb ;_eeg :_ace =_gaa +1;_gda =15;goto _cgae ;_cgae :if _gaa ++;_gaa ==_bccf {goto _begf ;};_adf :switch _acb [_gaa ]{case 58:goto _eeg ;case 65:goto _aacf ;case 104:goto _eeg ;
case 109:goto _eeg ;case 115:goto _cdgcc ;};goto _ece ;_aacf :if _gaa ++;_gaa ==_bccf {goto _bbe ;};_bfc :switch _acb [_gaa ]{case 47:goto _dfd ;case 77:goto _fee ;};goto _ad ;_dfd :if _gaa ++;_gaa ==_bccf {goto _bgec ;};_feg :if _acb [_gaa ]==80{goto _eeg ;
};goto _ad ;_fee :if _gaa ++;_gaa ==_bccf {goto _bccfd ;};_bcba :if _acb [_gaa ]==47{goto _aef ;};goto _ad ;_aef :if _gaa ++;_gaa ==_bccf {goto _fega ;};_gef :if _acb [_gaa ]==80{goto _bba ;};goto _ad ;_bba :if _gaa ++;_gaa ==_bccf {goto _cdgb ;};_ccad :if _acb [_gaa ]==77{goto _eeg ;
};goto _ad ;_cdgcc :_ace =_gaa +1;_gda =15;goto _gfda ;_gfda :if _gaa ++;_gaa ==_bccf {goto _gbb ;};_gefc :switch _acb [_gaa ]{case 46:goto _fde ;case 58:goto _eeg ;case 65:goto _aacf ;case 104:goto _eeg ;case 109:goto _eeg ;case 115:goto _cdgcc ;};goto _ece ;
_fde :if _gaa ++;_gaa ==_bccf {goto _fdfd ;};_dgg :if _acb [_gaa ]==48{goto _fbgc ;};goto _dddc ;_fbgc :_ace =_gaa +1;_gda =15;goto _ddb ;_ddb :if _gaa ++;_gaa ==_bccf {goto _ebff ;};_gedd :switch _acb [_gaa ]{case 48:goto _efcc ;case 58:goto _eeg ;case 65:goto _aacf ;
case 104:goto _eeg ;case 109:goto _eeg ;case 115:goto _cdgcc ;};goto _ece ;_efcc :_ace =_gaa +1;_gda =15;goto _dag ;_dag :if _gaa ++;_gaa ==_bccf {goto _faaf ;};_gcg :switch _acb [_gaa ]{case 48:goto _eeg ;case 58:goto _eeg ;case 65:goto _aacf ;case 104:goto _eeg ;
case 109:goto _eeg ;case 115:goto _cdgcc ;};goto _ece ;_bcd :_ace =_gaa +1;_gda =5;goto _dcc ;_dcc :if _gaa ++;_gaa ==_bccf {goto _ebbd ;};_fgfe :switch _acb [_gaa ]{case 35:goto _eccf ;case 37:goto _eccf ;case 47:goto _aecb ;case 48:goto _eccf ;case 63:goto _eccf ;
};goto _gaee ;_adc :_ace =_gaa +1;_gda =20;goto _ffg ;_ffg :if _gaa ++;_gaa ==_bccf {goto _gfea ;};_bae :switch _acb [_gaa ]{case 47:goto _dfd ;case 77:goto _fee ;};goto _bfb ;_gbg :if _gaa ++;_gaa ==_bccf {goto _aabg ;};_bgfa :switch _acb [_gaa ]{case 43:goto _gfdg ;
case 45:goto _gfdg ;};goto _bfb ;_befb :_ace =_gaa +1;goto _eafb ;_eafb :if _gaa ++;_gaa ==_bccf {goto _abff ;};_afa :if _acb [_gaa ]==101{goto _bgdf ;};goto _bfb ;_bgdf :if _gaa ++;_gaa ==_bccf {goto _agd ;};_gaff :if _acb [_gaa ]==110{goto _dfc ;};goto _cdge ;
_dfc :if _gaa ++;_gaa ==_bccf {goto _bed ;};_ggd :if _acb [_gaa ]==101{goto _cbc ;};goto _cdge ;_cbc :if _gaa ++;_gaa ==_bccf {goto _gadg ;};_ecea :if _acb [_gaa ]==114{goto _fgc ;};goto _cdge ;_fgc :if _gaa ++;_gaa ==_bccf {goto _gadb ;};_cdfe :if _acb [_gaa ]==97{goto _ceab ;
};goto _cdge ;_ceab :if _gaa ++;_gaa ==_bccf {goto _edcb ;};_aedf :if _acb [_gaa ]==108{goto _acbc ;};goto _cdge ;_fbadd :_ace =_gaa +1;_gda =20;goto _bea ;_bea :if _gaa ++;_gaa ==_bccf {goto _gagf ;};_cbb :switch _acb [_gaa ]{case 104:goto _cge ;case 109:goto _cge ;
case 115:goto _cge ;};goto _fgdf ;_fgdf :if _gaa ++;_gaa ==_bccf {goto _cbf ;};_egge :if _acb [_gaa ]==93{goto _adba ;};goto _fgdf ;_adba :_ace =_gaa +1;_gda =18;goto _gad ;_abdc :_ace =_gaa +1;_gda =16;goto _gad ;_gad :if _gaa ++;_gaa ==_bccf {goto _dbg ;
};_dbb :if _acb [_gaa ]==93{goto _adba ;};goto _fgdf ;_cge :if _gaa ++;_gaa ==_bccf {goto _cbe ;};_gce :if _acb [_gaa ]==93{goto _abdc ;};goto _fgdf ;_ccfg :if _gaa ++;_gaa ==_bccf {goto _aaeb ;};_fff :goto _eabgd ;_abf :_ace =_gaa +1;_gda =14;goto _ffd ;
_ffd :if _gaa ++;_gaa ==_bccf {goto _aebg ;};_abe :switch _acb [_gaa ]{case 47:goto _gafa ;case 58:goto _eeg ;case 65:goto _aacf ;case 100:goto _gafa ;case 104:goto _eeg ;case 109:goto _abf ;case 115:goto _cdgcc ;case 121:goto _gacb ;};goto _gaf ;_febd :if _gaa ++;
_gaa ==_bccf {goto _gcdg ;};_cagf :if _acb [_gaa ]==121{goto _gafa ;};goto _bfb ;_gfge :_cead :_fga =34;goto _afc ;_aceg :_fga =35;goto _afc ;_gba :_fga =0;goto _afc ;_abdd :_fga =36;goto _afc ;_cbaf :_fga =37;goto _afc ;_bfbb :_fga =1;goto _afc ;_acg :_fga =2;
goto _afc ;_fbgd :_fga =38;goto _afc ;_gdde :_fga =3;goto _afc ;_bfd :_fga =4;goto _afc ;_fbade :_fga =39;goto _afc ;_gcd :_fga =5;goto _afc ;_ccg :_fga =6;goto _afc ;_dfa :_fga =7;goto _afc ;_aebc :_fga =8;goto _afc ;_fbgg :_fga =40;goto _afc ;_dea :_fga =9;
goto _afc ;_dfcb :_fga =41;goto _afc ;_fce :_fga =10;goto _afc ;_cdeb :_fga =42;goto _afc ;_bdc :_fga =11;goto _afc ;_dfde :_fga =43;goto _afc ;_fab :_fga =44;goto _afc ;_baee :_fga =45;goto _afc ;_ddc :_fga =12;goto _afc ;_bbcg :_fga =46;goto _afc ;_acef :_fga =13;
goto _afc ;_geaf :_fga =14;goto _afc ;_ffbe :_fga =15;goto _afc ;_dcec :_fga =16;goto _afc ;_caga :_fga =47;goto _afc ;_dafc :_fga =17;goto _afc ;_adg :_fga =48;goto _afc ;_cffa :_fga =18;goto _afc ;_gcb :_fga =19;goto _afc ;_dcbf :_fga =20;goto _afc ;
_agb :_fga =49;goto _afc ;_begf :_fga =50;goto _afc ;_bbe :_fga =21;goto _afc ;_bgec :_fga =22;goto _afc ;_bccfd :_fga =23;goto _afc ;_fega :_fga =24;goto _afc ;_cdgb :_fga =25;goto _afc ;_gbb :_fga =51;goto _afc ;_fdfd :_fga =26;goto _afc ;_ebff :_fga =52;
goto _afc ;_faaf :_fga =53;goto _afc ;_ebbd :_fga =54;goto _afc ;_gfea :_fga =55;goto _afc ;_aabg :_fga =56;goto _afc ;_abff :_fga =57;goto _afc ;_agd :_fga =27;goto _afc ;_bed :_fga =28;goto _afc ;_gadg :_fga =29;goto _afc ;_gadb :_fga =30;goto _afc ;
_edcb :_fga =31;goto _afc ;_gagf :_fga =58;goto _afc ;_cbf :_fga =32;goto _afc ;_dbg :_fga =59;goto _afc ;_cbe :_fga =33;goto _afc ;_aaeb :_fga =60;goto _afc ;_aebg :_fga =61;goto _afc ;_gcdg :_fga =62;goto _afc ;_afc :{};if _gaa ==_ffbf {switch _fga {case 35:goto _bfb ;
case 0:goto _ad ;case 36:goto _agcg ;case 37:goto _cdf ;case 1:goto _ad ;case 2:goto _ad ;case 38:goto _fbaf ;case 3:goto _gbce ;case 4:goto _gbce ;case 39:goto _fbaf ;case 5:goto _gbce ;case 6:goto _gbce ;case 7:goto _gbce ;case 8:goto _ad ;case 40:goto _fbaf ;
case 9:goto _gbce ;case 41:goto _fbaf ;case 10:goto _ad ;case 42:goto _fbaf ;case 11:goto _gbce ;case 43:goto _fbaf ;case 44:goto _fbaf ;case 45:goto _fbaf ;case 12:goto _aeb ;case 46:goto _fcd ;case 13:goto _gfgf ;case 14:goto _ad ;case 15:goto _ad ;case 16:goto _gfgf ;
case 47:goto _gaf ;case 17:goto _cgg ;case 48:goto _bbb ;case 18:goto _dac ;case 19:goto _dac ;case 20:goto _ad ;case 49:goto _bfb ;case 50:goto _ece ;case 21:goto _ad ;case 22:goto _ad ;case 23:goto _ad ;case 24:goto _ad ;case 25:goto _ad ;case 51:goto _ece ;
case 26:goto _dddc ;case 52:goto _ece ;case 53:goto _ece ;case 54:goto _gaee ;case 55:goto _bfb ;case 56:goto _bfb ;case 57:goto _bfb ;case 27:goto _cdge ;case 28:goto _cdge ;case 29:goto _cdge ;case 30:goto _cdge ;case 31:goto _cdge ;case 58:goto _bfb ;
case 32:goto _ad ;case 59:goto _ad ;case 33:goto _cdge ;case 60:goto _bfb ;case 61:goto _gaf ;case 62:goto _bfb ;};};};if _defb > 0{copy (_acb [0:],_acb [_defb :]);};};_ =_ffbf ;if _fga ==_efab {_ff .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");
};};func _fbd (_acd float64 )string {_ca :=_aa .FormatFloat (_acd ,'E',-1,64);_ecc :=_aa .FormatFloat (_acd ,'E',5,64);if len (_ca )< len (_ecc ){return _aa .FormatFloat (_acd ,'E',2,64);};return _ecc ;};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_ffbb bool ;_eg bool ;_db bool ;_gg bool ;_fc bool ;_c bool ;_dbf int64 ;_ggg int ;};const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;
FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);const _bbfa int =34;const _cbab int =34;func (_gfcc *Lexer )nextFmt (){_gfcc ._dab =append (_gfcc ._dab ,_gfcc ._def );
_gfcc ._def =Format {}};const _ebg int =-1;const _aga int =0;

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_ba ,_ :=_aa .ParseFloat (v ,64);return Number (_ba ,f );};return String (v ,f );};func _gdd (_ab ,_eea float64 ,_bf Format )[]byte {if len (_bf .Fractional )==0{return nil ;};_cbga :=_aa .AppendFloat (nil ,_ab ,'f',-1,64);
if len (_cbga )> 2{_cbga =_cbga [2:];}else {_cbga =nil ;};_bgf :=make ([]byte ,0,len (_cbga ));_bgf =append (_bgf ,'.');_fba :=0;_abd :for _fa :=0;_fa < len (_bf .Fractional );_fa ++{_bec :=_fa ;_efg :=_bf .Fractional [_fa ];switch _efg .Type {case FmtTypeDigit :if _bec < len (_cbga ){_bgf =append (_bgf ,_cbga [_bec ]);
_fba ++;}else {_bgf =append (_bgf ,'0');};case FmtTypeDigitOpt :if _bec >=0{_bgf =append (_bgf ,_cbga [_bec ]);_fba ++;}else {break _abd ;};case FmtTypeLiteral :_bgf =append (_bgf ,_efg .Literal );default:_ff .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_efg );
};};return _bgf ;};type Lexer struct{_def Format ;_dab []Format ;};