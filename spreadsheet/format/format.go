//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_da "bytes";_d "fmt";_b "github.com/unidoc/unioffice/v2/common/logger";_e "io";_ge "math";_ef "strconv";_gg "strings";_g "time";);func (_cc FmtType )String ()string {if _cc >=FmtType (len (_f )-1){return _d .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_cc );
};return _gb [_f [_cc ]:_f [_cc +1]];};const _eba int =0;

// AddToken adds a format token to the format.
func (_dd *Format )AddToken (t FmtType ,l []byte ){if _dd ._fa {_dd ._fa =false ;return ;};switch t {case FmtTypeDecimal :_dd ._ad =true ;case FmtTypeUnderscore :_dd ._fa =true ;case FmtTypeText :_dd .Whole =append (_dd .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_dd .Whole =append (_dd .Whole ,Token {Type :t ,DateTime :string (l )});
case FmtTypePercent :_dd ._a =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_eg :=range l {if _dd .IsExponential {_dd .Exponent =append (_dd .Exponent ,Token {Type :t ,Literal :_eg });
}else if !_dd ._ad {_dd .Whole =append (_dd .Whole ,Token {Type :t ,Literal :_eg });}else {_dd .Fractional =append (_dd .Fractional ,Token {Type :t ,Literal :_eg });};};case FmtTypeDigitOptThousands :_dd ._ggf =true ;case FmtTypeFraction :_gbc :=_gg .Split (string (l ),"\u002f");
if len (_gbc )==2{_dd ._bd =true ;_dd ._gc ,_ =_ef .ParseInt (_gbc [1],10,64);for _ ,_ada :=range _gbc [1]{if _ada =='?'||_ada =='0'{_dd ._ed ++;};};};default:_b .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );
};};func _cdd (_gad ,_fae float64 ,_cf Format )[]byte {if len (_cf .Whole )==0{return nil ;};_gbcf :=_g .Date (1899,12,30,0,0,0,0,_g .UTC );_gd :=_gbcf .Add (_g .Duration (_fae *float64 (24*_g .Hour )));_gd =_ggfg (_gd );_dc :=_ef .AppendFloat (nil ,_gad ,'f',-1,64);
_bag :=make ([]byte ,0,len (_dc ));_fba :=0;_fda :=1;_baf :for _ddc :=len (_cf .Whole )-1;_ddc >=0;_ddc --{_eca :=len (_dc )-1-_fba ;_age :=_cf .Whole [_ddc ];switch _age .Type {case FmtTypeDigit :if _eca >=0{_bag =append (_bag ,_dc [_eca ]);_fba ++;_fda =_ddc ;
}else {_bag =append (_bag ,'0');};case FmtTypeDigitOpt :if _eca >=0{_bag =append (_bag ,_dc [_eca ]);_fba ++;_fda =_ddc ;}else {for _gae :=_ddc ;_gae >=0;_gae --{_ddd :=_cf .Whole [_gae ];if _ddd .Type ==FmtTypeLiteral {_bag =append (_bag ,_ddd .Literal );
};};break _baf ;};case FmtTypeDollar :for _gcf :=_fba ;_gcf < len (_dc );_gcf ++{_bag =append (_bag ,_dc [len (_dc )-1-_gcf ]);_fba ++;};_bag =append (_bag ,'$');case FmtTypeComma :if !_cf ._ggf {_bag =append (_bag ,',');};case FmtTypeLiteral :_bag =append (_bag ,_age .Literal );
case FmtTypeDate :_bag =append (_bag ,_dda (_egg (_gd ,_age .DateTime ))...);case FmtTypeTime :_bag =append (_bag ,_dda (_ddda (_gd ,_fae ,_age .DateTime ))...);default:_b .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_age );
};};_gf :=_dda (_bag );if _fba < len (_dc )&&(_fba !=0||_cf ._ad ){_gfc :=len (_dc )-_fba ;_egd :=make ([]byte ,len (_gf )+_gfc );copy (_egd ,_gf [0:_fda ]);copy (_egd [_fda :],_dc [0:]);copy (_egd [_fda +_gfc :],_gf [_fda :]);_gf =_egd ;};if _cf ._ggf {_caef :=_da .Buffer {};
_bdg :=0;for _fab :=len (_gf )-1;_fab >=0;_fab --{if !(_gf [_fab ]>='0'&&_gf [_fab ]<='9'){_bdg ++;}else {break ;};};for _fg :=0;_fg < len (_gf );_fg ++{_fdac :=(len (_gf )-_fg -_bdg );if _fdac %3==0&&_fdac !=0&&_fg !=0{_caef .WriteByte (',');};_caef .WriteByte (_gf [_fg ]);
};_gf =_caef .Bytes ();};return _gf ;};type Lexer struct{_gfef Format ;_fbaf []Format ;};func _ceeaf (_dae int64 ,_dbbf Format )[]byte {if !_dbbf .IsExponential ||len (_dbbf .Exponent )==0{return nil ;};_beb :=_ef .AppendInt (nil ,_ggg (_dae ),10);_eae :=make ([]byte ,0,len (_beb )+2);
_eae =append (_eae ,'E');if _dae >=0{_eae =append (_eae ,'+');}else {_eae =append (_eae ,'-');_dae *=-1;};_gce :=0;_cec :for _bca :=len (_dbbf .Exponent )-1;_bca >=0;_bca --{_cef :=len (_beb )-1-_gce ;_gab :=_dbbf .Exponent [_bca ];switch _gab .Type {case FmtTypeDigit :if _cef >=0{_eae =append (_eae ,_beb [_cef ]);
_gce ++;}else {_eae =append (_eae ,'0');};case FmtTypeDigitOpt :if _cef >=0{_eae =append (_eae ,_beb [_cef ]);_gce ++;}else {for _aba :=_bca ;_aba >=0;_aba --{_gcfc :=_dbbf .Exponent [_aba ];if _gcfc .Type ==FmtTypeLiteral {_eae =append (_eae ,_gcfc .Literal );
};};break _cec ;};case FmtTypeLiteral :_eae =append (_eae ,_gab .Literal );default:_b .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_gab );
};};if _gce < len (_beb ){_eae =append (_eae ,_beb [len (_beb )-_gce -1:_gce -1]...);};_dda (_eae [2:]);return _eae ;};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_bd bool ;_a bool ;_ec bool ;_ggf bool ;_fa bool ;_ad bool ;_gc int64 ;_ed int ;};

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_ac :=Parse (f );var _fe Format ;if len (_ac )==1{_fe =_ac [0];}else if len (_ac )==4{_fe =_ac [3];};_ab :=false ;for _ ,_ecd :=range _fe .Whole {if _ecd .Type ==FmtTypeText {_ab =true ;};};if !_ab {return v ;};
_ff :=_da .Buffer {};for _ ,_ce :=range _fe .Whole {switch _ce .Type {case FmtTypeLiteral :_ff .WriteByte (_ce .Literal );case FmtTypeText :_ff .WriteString (v );};};return _ff .String ();};

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_bcf ,_ :=_ef .ParseFloat (v ,64);return Number (_bcf ,f );};return String (v ,f );};const _gcc int =34;func _ggg (_ceea int64 )int64 {if _ceea < 0{return -_ceea ;};return _ceea ;};func _dcf (_bb ,_edd float64 ,_bdd Format )[]byte {if len (_bdd .Fractional )==0{return nil ;
};_bcg :=_ef .AppendFloat (nil ,_bb ,'f',-1,64);if len (_bcg )> 2{_bcg =_bcg [2:];}else {_bcg =nil ;};_ae :=make ([]byte ,0,len (_bcg ));_ae =append (_ae ,'.');_ffc :=0;_egf :for _afe :=0;_afe < len (_bdd .Fractional );_afe ++{_geb :=_afe ;_cda :=_bdd .Fractional [_afe ];
switch _cda .Type {case FmtTypeDigit :if _geb < len (_bcg ){_ae =append (_ae ,_bcg [_geb ]);_ffc ++;}else {_ae =append (_ae ,'0');};case FmtTypeDigitOpt :if _geb >=0{_ae =append (_ae ,_bcg [_geb ]);_ffc ++;}else {break _egf ;};case FmtTypeLiteral :_ae =append (_ae ,_cda .Literal );
default:_b .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_cda );};};return _ae ;};func _egg (_cg _g .Time ,_caf string )[]byte {_dab :=[]byte {};
_fga :=0;for _cgf :=0;_cgf < len (_caf );_cgf ++{var _cacc string ;if _caf [_cgf ]=='/'{_cacc =string (_caf [_fga :_cgf ]);_fga =_cgf +1;}else if _cgf ==len (_caf )-1{_cacc =string (_caf [_fga :_cgf +1]);}else {continue ;};switch _cacc {case "\u0079\u0079":_dab =_cg .AppendFormat (_dab ,"\u0030\u0036");
case "\u0079\u0079\u0079\u0079":_dab =_cg .AppendFormat (_dab ,"\u0032\u0030\u0030\u0036");case "\u006d":_dab =_cg .AppendFormat (_dab ,"\u0031");case "\u006d\u006d":_dab =_cg .AppendFormat (_dab ,"\u0030\u0031");case "\u006d\u006d\u006d":_dab =_cg .AppendFormat (_dab ,"\u004a\u0061\u006e");
case "\u006d\u006d\u006d\u006d":_dab =_cg .AppendFormat (_dab ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _cg .Month (){case _g .January ,_g .July ,_g .June :_dab =append (_dab ,'J');case _g .February :_dab =append (_dab ,'M');
case _g .March ,_g .May :_dab =append (_dab ,'M');case _g .April ,_g .August :_dab =append (_dab ,'A');case _g .September :_dab =append (_dab ,'S');case _g .October :_dab =append (_dab ,'O');case _g .November :_dab =append (_dab ,'N');case _g .December :_dab =append (_dab ,'D');
};case "\u0064":_dab =_cg .AppendFormat (_dab ,"\u0032");case "\u0064\u0064":_dab =_cg .AppendFormat (_dab ,"\u0030\u0032");case "\u0064\u0064\u0064":_dab =_cg .AppendFormat (_dab ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_dab =_cg .AppendFormat (_dab ,"\u004d\u006f\u006e\u0064\u0061\u0079");
default:_b .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_cacc );};if _caf [_cgf ]=='/'{_dab =append (_dab ,'/');};};return _dab ;};func _cac (_gdg []byte )[]byte {for _eb :=len (_gdg )-1;
_eb > 0;_eb --{if _gdg [_eb ]=='9'+1{_gdg [_eb ]='0';if _gdg [_eb -1]=='.'{_eb --;};_gdg [_eb -1]++;};};if _gdg [0]=='9'+1{_gdg [0]='0';copy (_gdg [1:],_gdg [0:]);_gdg [0]='1';};return _gdg ;};const _bgd int =34;func (_cbc *Lexer )nextFmt (){_cbc ._fbaf =append (_cbc ._fbaf ,_cbc ._gfef );
_cbc ._gfef =Format {}};func _ddda (_dba _g .Time ,_ddg float64 ,_gfcb string )[]byte {_dfa :=[]byte {};_bbc :=0;for _feb :=0;_feb < len (_gfcb );_feb ++{var _bgb string ;if _gfcb [_feb ]==':'{_bgb =string (_gfcb [_bbc :_feb ]);_bbc =_feb +1;}else if _feb ==len (_gfcb )-1{_bgb =string (_gfcb [_bbc :_feb +1]);
}else {continue ;};switch _bgb {case "\u0064":_dfa =_dba .AppendFormat (_dfa ,"\u0032");case "\u0068":_dfa =_dba .AppendFormat (_dfa ,"\u0033");case "\u0068\u0068":_dfa =_dba .AppendFormat (_dfa ,"\u0031\u0035");case "\u006d":_dfa =_dba .AppendFormat (_dfa ,"\u0034");
case "\u006d\u006d":_dfa =_dba .AppendFormat (_dfa ,"\u0030\u0034");case "\u0073":_dfa =_dba .Round (_g .Second ).AppendFormat (_dfa ,"\u0035");case "\u0073\u002e\u0030":_dfa =_dba .Round (_g .Second /10).AppendFormat (_dfa ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_dfa =_dba .Round (_g .Second /100).AppendFormat (_dfa ,"\u0035\u002e\u0030\u0030");
case "\u0073\u002e\u00300\u0030":_dfa =_dba .Round (_g .Second /1000).AppendFormat (_dfa ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_dfa =_dba .Round (_g .Second ).AppendFormat (_dfa ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_dfa =_dba .Round (_g .Second /10).AppendFormat (_dfa ,"\u0030\u0035\u002e\u0030");
case "\u0073\u0073\u002e0\u0030":_dfa =_dba .Round (_g .Second /100).AppendFormat (_dfa ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_dfa =_dba .Round (_g .Second /1000).AppendFormat (_dfa ,"\u0030\u0035\u002e\u0030\u0030\u0030");
case "\u0041\u004d\u002fP\u004d":_dfa =_dba .AppendFormat (_dfa ,"\u0050\u004d");case "\u005b\u0068\u005d":_dfa =_ef .AppendInt (_dfa ,int64 (_ddg *24),10);case "\u005b\u006d\u005d":_dfa =_ef .AppendInt (_dfa ,int64 (_ddg *24*60),10);case "\u005b\u0073\u005d":_dfa =_ef .AppendInt (_dfa ,int64 (_ddg *24*60*60),10);
case "":default:_b .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_bgb );};if _gfcb [_feb ]==':'{_dfa =append (_dfa ,':');};};return _dfa ;
};const _ea =1e11;func Parse (s string )[]Format {_fbf :=Lexer {};_fbf .Lex (_gg .NewReader (s ));_fbf ._fbaf =append (_fbf ._fbaf ,_fbf ._gfef );return _fbf ._fbaf ;};func (_aef *Lexer )Lex (r _e .Reader ){_ade ,_bfd ,_ggd :=0,0,0;_eee :=-1;_dac ,_fgc ,_efd :=0,0,0;
_ =_fgc ;_ =_efd ;_aaf :=1;_ =_aaf ;_gca :=make ([]byte ,4096);_bbe :=false ;for !_bbe {_efb :=0;if _dac > 0{_efb =_bfd -_dac ;};_bfd =0;_feab ,_ebd :=r .Read (_gca [_efb :]);if _feab ==0||_ebd !=nil {_bbe =true ;};_ggd =_feab +_efb ;if _ggd < len (_gca ){_eee =_ggd ;
};{_ade =_ccf ;_dac =0;_fgc =0;_efd =0;};{if _bfd ==_ggd {goto _edb ;};switch _ade {case 34:goto _bbef ;case 35:goto _gcb ;case 0:goto _aeg ;case 36:goto _dcc ;case 37:goto _cce ;case 1:goto _faba ;case 2:goto _gec ;case 38:goto _dcdf ;case 3:goto _bbca ;
case 4:goto _facg ;case 39:goto _eegg ;case 5:goto _gdb ;case 6:goto _fbda ;case 7:goto _fbafd ;case 8:goto _deb ;case 40:goto _ega ;case 9:goto _bdb ;case 41:goto _dgg ;case 10:goto _aaba ;case 42:goto _eab ;case 11:goto _gge ;case 43:goto _fgcg ;case 44:goto _ebag ;
case 45:goto _dace ;case 12:goto _dcbg ;case 46:goto _gcg ;case 13:goto _cfa ;case 14:goto _dcdb ;case 15:goto _affa ;case 16:goto _cfg ;case 47:goto _fbed ;case 17:goto _efcf ;case 48:goto _fbege ;case 18:goto _ddad ;case 19:goto _dcg ;case 20:goto _ccd ;
case 49:goto _bfe ;case 50:goto _efba ;case 21:goto _fec ;case 22:goto _abg ;case 23:goto _dbf ;case 24:goto _aedf ;case 25:goto _adab ;case 51:goto _bbaa ;case 26:goto _agc ;case 52:goto _bddg ;case 53:goto _fbc ;case 54:goto _cegd ;case 55:goto _abc ;
case 56:goto _gfcac ;case 57:goto _cbbg ;case 27:goto _acf ;case 28:goto _dca ;case 29:goto _cgd ;case 30:goto _dccg ;case 31:goto _afga ;case 58:goto _gcba ;case 32:goto _cdgf ;case 59:goto _gbb ;case 33:goto _deg ;case 60:goto _egb ;case 61:goto _adac ;
case 62:goto _aecf ;};goto _accg ;_afdg :switch _efd {case 2:{_bfd =(_fgc )-1;_aef ._gfef .AddToken (FmtTypeDigit ,nil );};case 3:{_bfd =(_fgc )-1;_aef ._gfef .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_bfd =(_fgc )-1;};case 8:{_bfd =(_fgc )-1;_aef ._gfef .AddToken (FmtTypePercent ,nil );
};case 13:{_bfd =(_fgc )-1;_aef ._gfef .AddToken (FmtTypeFraction ,_gca [_dac :_fgc ]);};case 14:{_bfd =(_fgc )-1;_aef ._gfef .AddToken (FmtTypeDate ,_gca [_dac :_fgc ]);};case 15:{_bfd =(_fgc )-1;_aef ._gfef .AddToken (FmtTypeTime ,_gca [_dac :_fgc ]);
};case 16:{_bfd =(_fgc )-1;_aef ._gfef .AddToken (FmtTypeTime ,_gca [_dac :_fgc ]);};case 18:{_bfd =(_fgc )-1;};case 20:{_bfd =(_fgc )-1;_aef ._gfef .AddToken (FmtTypeLiteral ,_gca [_dac :_fgc ]);};case 21:{_bfd =(_fgc )-1;_aef ._gfef .AddToken (FmtTypeLiteral ,_gca [_dac +1:_fgc -1]);
};};goto _afgf ;_afgb :_bfd =(_fgc )-1;{_aef ._gfef .AddToken (FmtTypeFraction ,_gca [_dac :_fgc ]);};goto _afgf ;_ecdf :_bfd =(_fgc )-1;{_aef ._gfef .AddToken (FmtTypeDigitOpt ,nil );};goto _afgf ;_dfg :_fgc =_bfd +1;{_aef ._gfef .AddToken (FmtTypeDigitOptThousands ,nil );
};goto _afgf ;_aaaa :_bfd =(_fgc )-1;{_aef ._gfef .AddToken (FmtTypePercent ,nil );};goto _afgf ;_fc :_bfd =(_fgc )-1;{_aef ._gfef .AddToken (FmtTypeDate ,_gca [_dac :_fgc ]);};goto _afgf ;_aee :_bfd =(_fgc )-1;{_aef ._gfef .AddToken (FmtTypeDigit ,nil );
};goto _afgf ;_aec :_bfd =(_fgc )-1;{_aef ._gfef .AddToken (FmtTypeTime ,_gca [_dac :_fgc ]);};goto _afgf ;_gdd :_bfd =(_fgc )-1;{_aef ._gfef .AddToken (FmtTypeLiteral ,_gca [_dac :_fgc ]);};goto _afgf ;_bed :_fgc =_bfd +1;{_aef ._gfef ._ec =true ;};goto _afgf ;
_ccg :_fgc =_bfd +1;{_aef ._gfef .AddToken (FmtTypeLiteral ,_gca [_dac :_fgc ]);};goto _afgf ;_cfd :_fgc =_bfd +1;{_aef ._gfef .AddToken (FmtTypeDollar ,nil );};goto _afgf ;_afb :_fgc =_bfd +1;{_aef ._gfef .AddToken (FmtTypeComma ,nil );};goto _afgf ;_cfdf :_fgc =_bfd +1;
{_aef ._gfef .AddToken (FmtTypeDecimal ,nil );};goto _afgf ;_geg :_fgc =_bfd +1;{_aef .nextFmt ();};goto _afgf ;_fbaa :_fgc =_bfd +1;{_aef ._gfef .AddToken (FmtTypeText ,nil );};goto _afgf ;_ageg :_fgc =_bfd +1;{_aef ._gfef .AddToken (FmtTypeUnderscore ,nil );
};goto _afgf ;_becf :_fgc =_bfd ;_bfd --;{_aef ._gfef .AddToken (FmtTypeLiteral ,_gca [_dac :_fgc ]);};goto _afgf ;_egdb :_fgc =_bfd ;_bfd --;{_aef ._gfef .AddToken (FmtTypeLiteral ,_gca [_dac +1:_fgc -1]);};goto _afgf ;_efc :_fgc =_bfd ;_bfd --;{_aef ._gfef .AddToken (FmtTypeDigitOpt ,nil );
};goto _afgf ;_afa :_fgc =_bfd ;_bfd --;{_aef ._gfef .AddToken (FmtTypeFraction ,_gca [_dac :_fgc ]);};goto _afgf ;_dad :_fgc =_bfd ;_bfd --;{_aef ._gfef .AddToken (FmtTypePercent ,nil );};goto _afgf ;_cba :_fgc =_bfd ;_bfd --;{_aef ._gfef .AddToken (FmtTypeDate ,_gca [_dac :_fgc ]);
};goto _afgf ;_gfca :_fgc =_bfd ;_bfd --;{_aef ._gfef .AddToken (FmtTypeDigit ,nil );};goto _afgf ;_cbb :_fgc =_bfd ;_bfd --;{_aef ._gfef .AddToken (FmtTypeTime ,_gca [_dac :_fgc ]);};goto _afgf ;_bbcb :_fgc =_bfd ;_bfd --;{};goto _afgf ;_dcd :_fgc =_bfd +1;
{_aef ._gfef .IsExponential =true ;};goto _afgf ;_cefc :_fgc =_bfd +1;{_aef ._gfef .AddToken (FmtTypeLiteral ,_gca [_dac +1:_fgc ]);};goto _afgf ;_afgf :_dac =0;if _bfd ++;_bfd ==_ggd {goto _cga ;};_bbef :_dac =_bfd ;switch _gca [_bfd ]{case 34:goto _abe ;
case 35:goto _fabe ;case 36:goto _cfd ;case 37:goto _dfgc ;case 44:goto _afb ;case 46:goto _cfdf ;case 47:goto _fbafa ;case 48:goto _ggc ;case 58:goto _gbea ;case 59:goto _geg ;case 63:goto _def ;case 64:goto _fbaa ;case 65:goto _cbgd ;case 69:goto _ddb ;
case 71:goto _aga ;case 91:goto _ecda ;case 92:goto _fcc ;case 95:goto _ageg ;case 100:goto _fbafa ;case 104:goto _gbea ;case 109:goto _cfab ;case 115:goto _abb ;case 121:goto _aegd ;};if 49<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _cbg ;};goto _ccg ;_abe :_fgc =_bfd +1;
_efd =20;goto _fgf ;_fgf :if _bfd ++;_bfd ==_ggd {goto _aafg ;};_gcb :if _gca [_bfd ]==34{goto _egc ;};goto _dbe ;_dbe :if _bfd ++;_bfd ==_ggd {goto _becab ;};_aeg :if _gca [_bfd ]==34{goto _egc ;};goto _dbe ;_egc :_fgc =_bfd +1;_efd =21;goto _dga ;_dga :if _bfd ++;
_bfd ==_ggd {goto _gee ;};_dcc :if _gca [_bfd ]==34{goto _dbe ;};goto _egdb ;_fabe :_fgc =_bfd +1;_efd =3;goto _gdge ;_gdge :if _bfd ++;_bfd ==_ggd {goto _ead ;};_cce :switch _gca [_bfd ]{case 35:goto _edg ;case 37:goto _edg ;case 44:goto _afad ;case 47:goto _efg ;
case 48:goto _edg ;case 63:goto _edg ;};goto _efc ;_edg :if _bfd ++;_bfd ==_ggd {goto _edf ;};_faba :switch _gca [_bfd ]{case 35:goto _edg ;case 37:goto _edg ;case 47:goto _efg ;case 48:goto _edg ;case 63:goto _edg ;};goto _afdg ;_efg :if _bfd ++;_bfd ==_ggd {goto _ggfb ;
};_gec :switch _gca [_bfd ]{case 35:goto _ace ;case 37:goto _afdc ;case 48:goto _aea ;case 63:goto _ace ;};if 49<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _dea ;};goto _afdg ;_ace :_fgc =_bfd +1;goto _cgb ;_cgb :if _bfd ++;_bfd ==_ggd {goto _abbd ;};_dcdf :switch _gca [_bfd ]{case 35:goto _ace ;
case 37:goto _ace ;case 44:goto _ace ;case 46:goto _ace ;case 48:goto _ace ;case 63:goto _ace ;case 65:goto _acg ;};goto _afa ;_acg :if _bfd ++;_bfd ==_ggd {goto _ffd ;};_bbca :switch _gca [_bfd ]{case 47:goto _cdaag ;case 77:goto _fdc ;};goto _afgb ;_cdaag :if _bfd ++;
_bfd ==_ggd {goto _fbag ;};_facg :if _gca [_bfd ]==80{goto _cgc ;};goto _afgb ;_cgc :_fgc =_bfd +1;goto _cbe ;_cbe :if _bfd ++;_bfd ==_ggd {goto _bcd ;};_eegg :if _gca [_bfd ]==65{goto _acg ;};goto _afa ;_fdc :if _bfd ++;_bfd ==_ggd {goto _gccg ;};_gdb :if _gca [_bfd ]==47{goto _gaed ;
};goto _afgb ;_gaed :if _bfd ++;_bfd ==_ggd {goto _bgbc ;};_fbda :if _gca [_bfd ]==80{goto _becg ;};goto _afgb ;_becg :if _bfd ++;_bfd ==_ggd {goto _fgff ;};_fbafd :if _gca [_bfd ]==77{goto _cgc ;};goto _afgb ;_afdc :if _bfd ++;_bfd ==_ggd {goto _dcac ;
};_deb :switch _gca [_bfd ]{case 35:goto _gfg ;case 37:goto _cgce ;case 63:goto _gfg ;};if 48<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _beba ;};goto _afdg ;_gfg :_fgc =_bfd +1;goto _dfe ;_dfe :if _bfd ++;_bfd ==_ggd {goto _cdb ;};_ega :switch _gca [_bfd ]{case 35:goto _ace ;
case 37:goto _cbdd ;case 44:goto _ace ;case 46:goto _ace ;case 48:goto _ace ;case 63:goto _ace ;case 65:goto _acg ;};goto _afa ;_cbdd :if _bfd ++;_bfd ==_ggd {goto _fgdg ;};_bdb :switch _gca [_bfd ]{case 35:goto _ede ;case 44:goto _ede ;case 46:goto _ede ;
case 48:goto _ede ;case 63:goto _ede ;};goto _afgb ;_ede :_fgc =_bfd +1;goto _fcg ;_fcg :if _bfd ++;_bfd ==_ggd {goto _ebe ;};_dgg :switch _gca [_bfd ]{case 35:goto _ede ;case 44:goto _ede ;case 46:goto _ede ;case 48:goto _ede ;case 63:goto _ede ;case 65:goto _acg ;
};goto _afa ;_cgce :if _bfd ++;_bfd ==_ggd {goto _egfb ;};_aaba :if _gca [_bfd ]==37{goto _cgce ;};if 48<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _beba ;};goto _afdg ;_beba :_fgc =_bfd +1;_efd =13;goto _gac ;_gac :if _bfd ++;_bfd ==_ggd {goto _dgd ;};_eab :switch _gca [_bfd ]{case 35:goto _ace ;
case 37:goto _dbc ;case 44:goto _ace ;case 46:goto _ace ;case 48:goto _gedf ;case 63:goto _ace ;case 65:goto _acg ;};if 49<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _beba ;};goto _afa ;_dbc :if _bfd ++;_bfd ==_ggd {goto _aefc ;};_gge :switch _gca [_bfd ]{case 35:goto _ede ;
case 37:goto _cgce ;case 44:goto _ede ;case 46:goto _ede ;case 63:goto _ede ;};if 48<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _beba ;};goto _afgb ;_gedf :_fgc =_bfd +1;goto _cge ;_cge :if _bfd ++;_bfd ==_ggd {goto _cbab ;};_fgcg :switch _gca [_bfd ]{case 35:goto _ace ;
case 37:goto _gedf ;case 44:goto _ace ;case 46:goto _ace ;case 48:goto _gedf ;case 63:goto _ace ;case 65:goto _acg ;};if 49<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _beba ;};goto _afa ;_aea :_fgc =_bfd +1;goto _afbc ;_afbc :if _bfd ++;_bfd ==_ggd {goto _bagg ;
};_ebag :switch _gca [_bfd ]{case 35:goto _ace ;case 37:goto _gedf ;case 44:goto _ace ;case 46:goto _ace ;case 48:goto _aea ;case 63:goto _ace ;case 65:goto _acg ;};if 49<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _dea ;};goto _afa ;_dea :_fgc =_bfd +1;goto _dge ;
_dge :if _bfd ++;_bfd ==_ggd {goto _aac ;};_dace :switch _gca [_bfd ]{case 35:goto _ace ;case 37:goto _beba ;case 44:goto _ace ;case 46:goto _ace ;case 48:goto _aea ;case 63:goto _ace ;case 65:goto _acg ;};if 49<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _dea ;
};goto _afa ;_afad :if _bfd ++;_bfd ==_ggd {goto _bbcg ;};_dcbg :if _gca [_bfd ]==35{goto _dfg ;};goto _ecdf ;_dfgc :_fgc =_bfd +1;_efd =8;goto _beca ;_beca :if _bfd ++;_bfd ==_ggd {goto _gfed ;};_gcg :switch _gca [_bfd ]{case 35:goto _gfcbc ;case 37:goto _faeg ;
case 48:goto _dfgd ;case 63:goto _gfcbc ;};if 49<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _adfc ;};goto _dad ;_gfcbc :if _bfd ++;_bfd ==_ggd {goto _dfgb ;};_cfa :switch _gca [_bfd ]{case 35:goto _gfcbc ;case 47:goto _efg ;case 48:goto _gfcbc ;case 63:goto _gfcbc ;
};goto _aaaa ;_faeg :if _bfd ++;_bfd ==_ggd {goto _bgc ;};_dcdb :if _gca [_bfd ]==37{goto _faeg ;};if 48<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _adfc ;};goto _afdg ;_adfc :if _bfd ++;_bfd ==_ggd {goto _cbeg ;};_affa :switch _gca [_bfd ]{case 37:goto _faeg ;
case 47:goto _efg ;};if 48<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _adfc ;};goto _afdg ;_dfgd :if _bfd ++;_bfd ==_ggd {goto _efgb ;};_cfg :switch _gca [_bfd ]{case 35:goto _gfcbc ;case 37:goto _faeg ;case 47:goto _efg ;case 48:goto _dfgd ;case 63:goto _gfcbc ;
};if 49<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _adfc ;};goto _aaaa ;_fbafa :_fgc =_bfd +1;goto _efgf ;_efgf :if _bfd ++;_bfd ==_ggd {goto _becd ;};_fbed :switch _gca [_bfd ]{case 47:goto _fbafa ;case 100:goto _fbafa ;case 109:goto _fbafa ;case 121:goto _gaeea ;
};goto _cba ;_gaeea :if _bfd ++;_bfd ==_ggd {goto _cdbc ;};_efcf :if _gca [_bfd ]==121{goto _fbafa ;};goto _fc ;_ggc :_fgc =_bfd +1;_efd =2;goto _bba ;_bba :if _bfd ++;_bfd ==_ggd {goto _bgcc ;};_fbege :switch _gca [_bfd ]{case 35:goto _edg ;case 37:goto _dbcd ;
case 47:goto _efg ;case 48:goto _adfd ;case 63:goto _edg ;};if 49<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _deaf ;};goto _gfca ;_dbcd :if _bfd ++;_bfd ==_ggd {goto _acgc ;};_ddad :switch _gca [_bfd ]{case 35:goto _edg ;case 37:goto _dbcd ;case 47:goto _efg ;
case 48:goto _dbcd ;case 63:goto _edg ;};if 49<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _adfc ;};goto _aee ;_adfd :if _bfd ++;_bfd ==_ggd {goto _bee ;};_dcg :switch _gca [_bfd ]{case 35:goto _edg ;case 37:goto _dbcd ;case 47:goto _efg ;case 48:goto _adfd ;
case 63:goto _edg ;};if 49<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _deaf ;};goto _aee ;_deaf :if _bfd ++;_bfd ==_ggd {goto _bfb ;};_ccd :switch _gca [_bfd ]{case 37:goto _adfc ;case 47:goto _efg ;};if 48<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _deaf ;};goto _afdg ;
_cbg :_fgc =_bfd +1;_efd =20;goto _feac ;_feac :if _bfd ++;_bfd ==_ggd {goto _adfdc ;};_bfe :switch _gca [_bfd ]{case 37:goto _adfc ;case 47:goto _efg ;};if 48<=_gca [_bfd ]&&_gca [_bfd ]<=57{goto _deaf ;};goto _becf ;_gbea :_fgc =_bfd +1;_efd =15;goto _dff ;
_dff :if _bfd ++;_bfd ==_ggd {goto _aege ;};_efba :switch _gca [_bfd ]{case 58:goto _gbea ;case 65:goto _ggfe ;case 104:goto _gbea ;case 109:goto _gbea ;case 115:goto _abb ;};goto _cbb ;_ggfe :if _bfd ++;_bfd ==_ggd {goto _edfa ;};_fec :switch _gca [_bfd ]{case 47:goto _faca ;
case 77:goto _feaba ;};goto _afdg ;_faca :if _bfd ++;_bfd ==_ggd {goto _cefa ;};_abg :if _gca [_bfd ]==80{goto _gbea ;};goto _afdg ;_feaba :if _bfd ++;_bfd ==_ggd {goto _bfc ;};_dbf :if _gca [_bfd ]==47{goto _gdf ;};goto _afdg ;_gdf :if _bfd ++;_bfd ==_ggd {goto _aae ;
};_aedf :if _gca [_bfd ]==80{goto _agg ;};goto _afdg ;_agg :if _bfd ++;_bfd ==_ggd {goto _beg ;};_adab :if _gca [_bfd ]==77{goto _gbea ;};goto _afdg ;_abb :_fgc =_bfd +1;_efd =15;goto _gceb ;_gceb :if _bfd ++;_bfd ==_ggd {goto _dde ;};_bbaa :switch _gca [_bfd ]{case 46:goto _dffb ;
case 58:goto _gbea ;case 65:goto _ggfe ;case 104:goto _gbea ;case 109:goto _gbea ;case 115:goto _abb ;};goto _cbb ;_dffb :if _bfd ++;_bfd ==_ggd {goto _bgba ;};_agc :if _gca [_bfd ]==48{goto _gdc ;};goto _aec ;_gdc :_fgc =_bfd +1;_efd =15;goto _bae ;_bae :if _bfd ++;
_bfd ==_ggd {goto _dgeg ;};_bddg :switch _gca [_bfd ]{case 48:goto _gea ;case 58:goto _gbea ;case 65:goto _ggfe ;case 104:goto _gbea ;case 109:goto _gbea ;case 115:goto _abb ;};goto _cbb ;_gea :_fgc =_bfd +1;_efd =15;goto _abd ;_abd :if _bfd ++;_bfd ==_ggd {goto _bge ;
};_fbc :switch _gca [_bfd ]{case 48:goto _gbea ;case 58:goto _gbea ;case 65:goto _ggfe ;case 104:goto _gbea ;case 109:goto _gbea ;case 115:goto _abb ;};goto _cbb ;_def :_fgc =_bfd +1;_efd =5;goto _bebg ;_bebg :if _bfd ++;_bfd ==_ggd {goto _gdca ;};_cegd :switch _gca [_bfd ]{case 35:goto _edg ;
case 37:goto _edg ;case 47:goto _efg ;case 48:goto _edg ;case 63:goto _edg ;};goto _bbcb ;_cbgd :_fgc =_bfd +1;_efd =20;goto _edca ;_edca :if _bfd ++;_bfd ==_ggd {goto _baga ;};_abc :switch _gca [_bfd ]{case 47:goto _faca ;case 77:goto _feaba ;};goto _becf ;
_ddb :if _bfd ++;_bfd ==_ggd {goto _ddcc ;};_gfcac :switch _gca [_bfd ]{case 43:goto _dcd ;case 45:goto _dcd ;};goto _becf ;_aga :_fgc =_bfd +1;goto _cfgd ;_cfgd :if _bfd ++;_bfd ==_ggd {goto _fcb ;};_cbbg :if _gca [_bfd ]==101{goto _gcgb ;};goto _becf ;
_gcgb :if _bfd ++;_bfd ==_ggd {goto _gcee ;};_acf :if _gca [_bfd ]==110{goto _efa ;};goto _gdd ;_efa :if _bfd ++;_bfd ==_ggd {goto _ggea ;};_dca :if _gca [_bfd ]==101{goto _ggdg ;};goto _gdd ;_ggdg :if _bfd ++;_bfd ==_ggd {goto _gcaf ;};_cgd :if _gca [_bfd ]==114{goto _bbee ;
};goto _gdd ;_bbee :if _bfd ++;_bfd ==_ggd {goto _egfbc ;};_dccg :if _gca [_bfd ]==97{goto _faf ;};goto _gdd ;_faf :if _bfd ++;_bfd ==_ggd {goto _baed ;};_afga :if _gca [_bfd ]==108{goto _bed ;};goto _gdd ;_ecda :_fgc =_bfd +1;_efd =20;goto _fde ;_fde :if _bfd ++;
_bfd ==_ggd {goto _aecb ;};_gcba :switch _gca [_bfd ]{case 104:goto _eddf ;case 109:goto _eddf ;case 115:goto _eddf ;};goto _fbfd ;_fbfd :if _bfd ++;_bfd ==_ggd {goto _fef ;};_cdgf :if _gca [_bfd ]==93{goto _dbce ;};goto _fbfd ;_dbce :_fgc =_bfd +1;_efd =18;
goto _cded ;_debb :_fgc =_bfd +1;_efd =16;goto _cded ;_cded :if _bfd ++;_bfd ==_ggd {goto _adg ;};_gbb :if _gca [_bfd ]==93{goto _dbce ;};goto _fbfd ;_eddf :if _bfd ++;_bfd ==_ggd {goto _dbcdc ;};_deg :if _gca [_bfd ]==93{goto _debb ;};goto _fbfd ;_fcc :if _bfd ++;
_bfd ==_ggd {goto _ege ;};_egb :goto _cefc ;_cfab :_fgc =_bfd +1;_efd =14;goto _fbcg ;_fbcg :if _bfd ++;_bfd ==_ggd {goto _baggb ;};_adac :switch _gca [_bfd ]{case 47:goto _fbafa ;case 58:goto _gbea ;case 65:goto _ggfe ;case 100:goto _fbafa ;case 104:goto _gbea ;
case 109:goto _cfab ;case 115:goto _abb ;case 121:goto _gaeea ;};goto _cba ;_aegd :if _bfd ++;_bfd ==_ggd {goto _aacb ;};_aecf :if _gca [_bfd ]==121{goto _fbafa ;};goto _becf ;_accg :_cga :_ade =34;goto _edb ;_aafg :_ade =35;goto _edb ;_becab :_ade =0;
goto _edb ;_gee :_ade =36;goto _edb ;_ead :_ade =37;goto _edb ;_edf :_ade =1;goto _edb ;_ggfb :_ade =2;goto _edb ;_abbd :_ade =38;goto _edb ;_ffd :_ade =3;goto _edb ;_fbag :_ade =4;goto _edb ;_bcd :_ade =39;goto _edb ;_gccg :_ade =5;goto _edb ;_bgbc :_ade =6;
goto _edb ;_fgff :_ade =7;goto _edb ;_dcac :_ade =8;goto _edb ;_cdb :_ade =40;goto _edb ;_fgdg :_ade =9;goto _edb ;_ebe :_ade =41;goto _edb ;_egfb :_ade =10;goto _edb ;_dgd :_ade =42;goto _edb ;_aefc :_ade =11;goto _edb ;_cbab :_ade =43;goto _edb ;_bagg :_ade =44;
goto _edb ;_aac :_ade =45;goto _edb ;_bbcg :_ade =12;goto _edb ;_gfed :_ade =46;goto _edb ;_dfgb :_ade =13;goto _edb ;_bgc :_ade =14;goto _edb ;_cbeg :_ade =15;goto _edb ;_efgb :_ade =16;goto _edb ;_becd :_ade =47;goto _edb ;_cdbc :_ade =17;goto _edb ;
_bgcc :_ade =48;goto _edb ;_acgc :_ade =18;goto _edb ;_bee :_ade =19;goto _edb ;_bfb :_ade =20;goto _edb ;_adfdc :_ade =49;goto _edb ;_aege :_ade =50;goto _edb ;_edfa :_ade =21;goto _edb ;_cefa :_ade =22;goto _edb ;_bfc :_ade =23;goto _edb ;_aae :_ade =24;
goto _edb ;_beg :_ade =25;goto _edb ;_dde :_ade =51;goto _edb ;_bgba :_ade =26;goto _edb ;_dgeg :_ade =52;goto _edb ;_bge :_ade =53;goto _edb ;_gdca :_ade =54;goto _edb ;_baga :_ade =55;goto _edb ;_ddcc :_ade =56;goto _edb ;_fcb :_ade =57;goto _edb ;_gcee :_ade =27;
goto _edb ;_ggea :_ade =28;goto _edb ;_gcaf :_ade =29;goto _edb ;_egfbc :_ade =30;goto _edb ;_baed :_ade =31;goto _edb ;_aecb :_ade =58;goto _edb ;_fef :_ade =32;goto _edb ;_adg :_ade =59;goto _edb ;_dbcdc :_ade =33;goto _edb ;_ege :_ade =60;goto _edb ;
_baggb :_ade =61;goto _edb ;_aacb :_ade =62;goto _edb ;_edb :{};if _bfd ==_eee {switch _ade {case 35:goto _becf ;case 0:goto _afdg ;case 36:goto _egdb ;case 37:goto _efc ;case 1:goto _afdg ;case 2:goto _afdg ;case 38:goto _afa ;case 3:goto _afgb ;case 4:goto _afgb ;
case 39:goto _afa ;case 5:goto _afgb ;case 6:goto _afgb ;case 7:goto _afgb ;case 8:goto _afdg ;case 40:goto _afa ;case 9:goto _afgb ;case 41:goto _afa ;case 10:goto _afdg ;case 42:goto _afa ;case 11:goto _afgb ;case 43:goto _afa ;case 44:goto _afa ;case 45:goto _afa ;
case 12:goto _ecdf ;case 46:goto _dad ;case 13:goto _aaaa ;case 14:goto _afdg ;case 15:goto _afdg ;case 16:goto _aaaa ;case 47:goto _cba ;case 17:goto _fc ;case 48:goto _gfca ;case 18:goto _aee ;case 19:goto _aee ;case 20:goto _afdg ;case 49:goto _becf ;
case 50:goto _cbb ;case 21:goto _afdg ;case 22:goto _afdg ;case 23:goto _afdg ;case 24:goto _afdg ;case 25:goto _afdg ;case 51:goto _cbb ;case 26:goto _aec ;case 52:goto _cbb ;case 53:goto _cbb ;case 54:goto _bbcb ;case 55:goto _becf ;case 56:goto _becf ;
case 57:goto _becf ;case 27:goto _gdd ;case 28:goto _gdd ;case 29:goto _gdd ;case 30:goto _gdd ;case 31:goto _gdd ;case 58:goto _becf ;case 32:goto _afdg ;case 59:goto _afdg ;case 33:goto _gdd ;case 60:goto _becf ;case 61:goto _cba ;case 62:goto _becf ;
};};};if _dac > 0{copy (_gca [0:],_gca [_dac :]);};};_ =_eee ;if _ade ==_bebe {_b .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");};};func IsNumber (data string )(_bce bool ){_edc ,_gbe ,_dage :=0,0,len (data );
_dafe :=len (data );_ddab ,_ebae ,_bf :=0,0,0;_ =_ebae ;_ =_bf ;_ =_ddab ;{_edc =_bagc ;_ddab =0;_ebae =0;_bf =0;};{if _gbe ==_dage {goto _acc ;};switch _edc {case 0:goto _ged ;case 1:goto _cdg ;case 2:goto _adf ;case 3:goto _cdaa ;case 4:goto _gaee ;case 5:goto _bdgc ;
case 6:goto _bbcf ;case 7:goto _bab ;};goto _fgeg ;_fbeg :_ebae =_gbe ;_gbe --;{_bce =false ;};goto _gbgb ;_afd :_ebae =_gbe ;_gbe --;{_bce =_ebae ==len (data );};goto _gbgb ;_bbf :_ebae =_gbe ;_gbe --;{_bce =_ebae ==len (data );};goto _gbgb ;_gfe :switch _bf {case 2:{_gbe =(_ebae )-1;
_bce =_ebae ==len (data );};case 3:{_gbe =(_ebae )-1;_bce =false ;};};goto _gbgb ;_gbgb :_ddab =0;if _gbe ++;_gbe ==_dage {goto _cbd ;};_ged :_ddab =_gbe ;switch data [_gbe ]{case 43:goto _acd ;case 45:goto _acd ;};if 48<=data [_gbe ]&&data [_gbe ]<=57{goto _fee ;
};goto _gbf ;_gbf :if _gbe ++;_gbe ==_dage {goto _eeg ;};_cdg :goto _gbf ;_acd :if _gbe ++;_gbe ==_dage {goto _dcb ;};_adf :if 48<=data [_gbe ]&&data [_gbe ]<=57{goto _fee ;};goto _gbf ;_fee :if _gbe ++;_gbe ==_dage {goto _eege ;};_cdaa :if data [_gbe ]==46{goto _ddfb ;
};if 48<=data [_gbe ]&&data [_gbe ]<=57{goto _fee ;};goto _gbf ;_ddfb :if _gbe ++;_gbe ==_dage {goto _cde ;};_gaee :if 48<=data [_gbe ]&&data [_gbe ]<=57{goto _bdde ;};goto _gbf ;_bdde :if _gbe ++;_gbe ==_dage {goto _fbg ;};_bdgc :if data [_gbe ]==69{goto _fgd ;
};if 48<=data [_gbe ]&&data [_gbe ]<=57{goto _bdde ;};goto _gbf ;_fgd :if _gbe ++;_gbe ==_dage {goto _acdg ;};_bbcf :switch data [_gbe ]{case 43:goto _fge ;case 45:goto _fge ;};goto _gbf ;_fge :_ebae =_gbe +1;_bf =3;goto _ccc ;_bafe :_ebae =_gbe +1;_bf =2;
goto _ccc ;_ccc :if _gbe ++;_gbe ==_dage {goto _aff ;};_bab :if 48<=data [_gbe ]&&data [_gbe ]<=57{goto _bafe ;};goto _gbf ;_fgeg :_cbd :_edc =0;goto _acc ;_eeg :_edc =1;goto _acc ;_dcb :_edc =2;goto _acc ;_eege :_edc =3;goto _acc ;_cde :_edc =4;goto _acc ;
_fbg :_edc =5;goto _acc ;_acdg :_edc =6;goto _acc ;_aff :_edc =7;goto _acc ;_acc :{};if _gbe ==_dafe {switch _edc {case 1:goto _fbeg ;case 2:goto _fbeg ;case 3:goto _afd ;case 4:goto _fbeg ;case 5:goto _bbf ;case 6:goto _fbeg ;case 7:goto _gfe ;};};};if _edc ==_bebe {return false ;
};return ;};const _bga int =-1;

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _ge .Abs (v )>=_ea ||_ge .Abs (v )<=_db &&v !=0{return _gbge (v );};_aa :=make ([]byte ,0,15);_aa =_ef .AppendFloat (_aa ,v ,'f',-1,64);if len (_aa )> 11{_aab :=_aa [11]-'0';if _aab >=5&&_aab <=9{_aa [10]++;_aa =_aa [0:11];
_aa =_cac (_aa );};_aa =_aa [0:11];}else if len (_aa )==11{if _aa [len (_aa )-1]=='9'{_aa [len (_aa )-1]++;_aa =_cac (_aa );};};_aa =_fac (_aa );return string (_aa );};const _bebe int =-1;

// FmtType is the type of a format token.
//
//go:generate stringer -type=FmtType
type FmtType byte ;func _fac (_gcd []byte )[]byte {_eaf :=len (_gcd );_gada :=false ;_ddf :=false ;for _cb :=len (_gcd )-1;_cb >=0;_cb --{if _gcd [_cb ]=='0'&&!_ddf &&!_gada {_eaf =_cb ;}else if _gcd [_cb ]=='.'{_gada =true ;}else {_ddf =true ;};};if _gada &&_ddf {if _gcd [_eaf -1]=='.'{_eaf --;
};return _gcd [0:_eaf ];};return _gcd ;};func _gbge (_gaeb float64 )string {_ced :=_ef .FormatFloat (_gaeb ,'E',-1,64);_aed :=_ef .FormatFloat (_gaeb ,'E',5,64);if len (_ced )< len (_aed ){return _ef .FormatFloat (_gaeb ,'E',2,64);};return _aed ;};const _dg int =0;
func _dda (_ca []byte )[]byte {for _be :=0;_be < len (_ca )/2;_be ++{_fd :=len (_ca )-1-_be ;_ca [_be ],_ca [_fd ]=_ca [_fd ],_ca [_be ];};return _ca ;};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_bde :=Parse (f );if len (_bde )==1{return _cab (v ,_bde [0],false );}else if len (_bde )> 1&&v < 0{return _cab (v ,_bde [1],true );
}else if len (_bde )> 2&&v ==0{return _cab (v ,_bde [2],false );};return _cab (v ,_bde [0],false );};

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};func _ggfg (_dgea _g .Time )_g .Time {_dgea =_dgea .UTC ();return _g .Date (_dgea .Year (),_dgea .Month (),_dgea .Day (),_dgea .Hour (),_dgea .Minute (),_dgea .Second (),_dgea .Nanosecond (),_g .Local );
};const _ccf int =34;const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);
func _cab (_af float64 ,_dag Format ,_gbd bool )string {if _dag ._ec {return NumberGeneric (_af );};_fb :=make ([]byte ,0,20);_cae :=_ge .Signbit (_af );_cee :=_ge .Abs (_af );_cd :=int64 (0);_gbg :=int64 (0);if _dag .IsExponential {for _cee >=10{_gbg ++;
_cee /=10;};for _cee < 1{_gbg --;_cee *=10;};}else if _dag ._a {_cee *=100;}else if _dag ._bd {if _dag ._gc ==0{_ag :=_ge .Pow (10,float64 (_dag ._ed ));_ee ,_fbd :=1.0,1.0;_ =_ee ;for _bdeb :=1.0;_bdeb < _ag ;_bdeb ++{_ ,_ecf :=_ge .Modf (_cee *float64 (_bdeb ));
if _ecf < _fbd {_fbd =_ecf ;_ee =_bdeb ;if _ecf ==0{break ;};};};_dag ._gc =int64 (_ee );};_cd =int64 (_cee *float64 (_dag ._gc )+0.5);if len (_dag .Whole )> 0&&_cd > _dag ._gc {_cd =int64 (_cee *float64 (_dag ._gc ))%_dag ._gc ;_cee -=float64 (_cd )/float64 (_dag ._gc );
}else {_cee -=float64 (_cd )/float64 (_dag ._gc );if _ge .Abs (_cee )< 1{_fbe :=true ;for _ ,_fbb :=range _dag .Whole {if _fbb .Type ==FmtTypeDigitOpt {continue ;};if _fbb .Type ==FmtTypeLiteral &&_fbb .Literal ==' '{continue ;};_fbe =false ;};if _fbe {_dag .Whole =nil ;
};};};};_dbb :=1;for _ ,_afg :=range _dag .Fractional {if _afg .Type ==FmtTypeDigit ||_afg .Type ==FmtTypeDigitOpt {_dbb ++;};};_cee +=5*_ge .Pow10 (-_dbb );_daa ,_bg :=_ge .Modf (_cee );_fb =append (_fb ,_cdd (_daa ,_af ,_dag )...);_fb =append (_fb ,_dcf (_bg ,_af ,_dag )...);
_fb =append (_fb ,_ceeaf (_gbg ,_dag )...);if _dag ._bd {_fb =_ef .AppendInt (_fb ,_cd ,10);_fb =append (_fb ,'/');_fb =_ef .AppendInt (_fb ,_dag ._gc ,10);};if !_gbd &&_cae {return "\u002d"+string (_fb );};return string (_fb );};const _db =1e-10;var _f =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};
const _gb ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";
const _bagc int =0;