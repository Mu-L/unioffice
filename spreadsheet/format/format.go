//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_ef "bytes";_ed "fmt";_b "github.com/unidoc/unioffice/common/logger";_d "io";_cd "math";_c "strconv";_eb "strings";_a "time";);func _ddbc (_bbf _a .Time )_a .Time {_bbf =_bbf .UTC ();return _a .Date (_bbf .Year (),_bbf .Month (),_bbf .Day (),_bbf .Hour (),_bbf .Minute (),_bbf .Second (),_bbf .Nanosecond (),_a .Local );
};func (_ce FmtType )String ()string {if _ce >=FmtType (len (_ca )-1){return _ed .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ce );};return _f [_ca [_ce ]:_ca [_ce +1]];};type Lexer struct{_fga Format ;_egb []Format ;};const _be int =-1;
func (_aef *Lexer )Lex (r _d .Reader ){_gbee ,_bff ,_ddfg :=0,0,0;_abg :=-1;_bgb ,_ddfdf ,_eac :=0,0,0;_ =_ddfdf ;_ =_eac ;_fgda :=1;_ =_fgda ;_adfa :=make ([]byte ,4096);_fgc :=false ;for !_fgc {_aeg :=0;if _bgb > 0{_aeg =_bff -_bgb ;};_bff =0;_dba ,_dgc :=r .Read (_adfa [_aeg :]);
if _dba ==0||_dgc !=nil {_fgc =true ;};_ddfg =_dba +_aeg ;if _ddfg < len (_adfa ){_abg =_ddfg ;};{_gbee =_edbf ;_bgb =0;_ddfdf =0;_eac =0;};{if _bff ==_ddfg {goto _gddcg ;};switch _gbee {case 34:goto _gfe ;case 35:goto _cca ;case 0:goto _ccb ;case 36:goto _dgb ;
case 37:goto _dcb ;case 1:goto _bbef ;case 2:goto _bcga ;case 38:goto _cagf ;case 3:goto _aee ;case 4:goto _cbcg ;case 39:goto _dbfg ;case 5:goto _gba ;case 6:goto _gag ;case 7:goto _aead ;case 8:goto _cfa ;case 40:goto _cab ;case 9:goto _dadd ;case 41:goto _eag ;
case 10:goto _eae ;case 42:goto _cbe ;case 11:goto _ece ;case 43:goto _eca ;case 44:goto _fff ;case 45:goto _acde ;case 12:goto _fcea ;case 46:goto _ffg ;case 13:goto _ggff ;case 14:goto _daf ;case 15:goto _feb ;case 16:goto _bdbe ;case 47:goto _adfb ;
case 17:goto _aad ;case 48:goto _dec ;case 18:goto _dac ;case 19:goto _dadde ;case 20:goto _eebc ;case 49:goto _cefb ;case 50:goto _ccc ;case 21:goto _efggf ;case 22:goto _fbe ;case 23:goto _fdbd ;case 24:goto _fcce ;case 25:goto _bea ;case 51:goto _gae ;
case 26:goto _eaa ;case 52:goto _gdda ;case 53:goto _ccce ;case 54:goto _egbb ;case 55:goto _ged ;case 56:goto _dgbf ;case 57:goto _bgcb ;case 27:goto _becc ;case 28:goto _dadf ;case 29:goto _daddf ;case 30:goto _gddc ;case 31:goto _dcfc ;case 58:goto _abge ;
case 32:goto _aadf ;case 59:goto _dcfg ;case 33:goto _bagb ;case 60:goto _ffe ;case 61:goto _fbbd ;case 62:goto _gec ;};goto _bggg ;_bbb :switch _eac {case 2:{_bff =(_ddfdf )-1;_aef ._fga .AddToken (FmtTypeDigit ,nil );};case 3:{_bff =(_ddfdf )-1;_aef ._fga .AddToken (FmtTypeDigitOpt ,nil );
};case 5:{_bff =(_ddfdf )-1;};case 8:{_bff =(_ddfdf )-1;_aef ._fga .AddToken (FmtTypePercent ,nil );};case 13:{_bff =(_ddfdf )-1;_aef ._fga .AddToken (FmtTypeFraction ,_adfa [_bgb :_ddfdf ]);};case 14:{_bff =(_ddfdf )-1;_aef ._fga .AddToken (FmtTypeDate ,_adfa [_bgb :_ddfdf ]);
};case 15:{_bff =(_ddfdf )-1;_aef ._fga .AddToken (FmtTypeTime ,_adfa [_bgb :_ddfdf ]);};case 16:{_bff =(_ddfdf )-1;_aef ._fga .AddToken (FmtTypeTime ,_adfa [_bgb :_ddfdf ]);};case 18:{_bff =(_ddfdf )-1;};case 20:{_bff =(_ddfdf )-1;_aef ._fga .AddToken (FmtTypeLiteral ,_adfa [_bgb :_ddfdf ]);
};case 21:{_bff =(_ddfdf )-1;_aef ._fga .AddToken (FmtTypeLiteral ,_adfa [_bgb +1:_ddfdf -1]);};};goto _fef ;_cdef :_bff =(_ddfdf )-1;{_aef ._fga .AddToken (FmtTypeFraction ,_adfa [_bgb :_ddfdf ]);};goto _fef ;_fcb :_bff =(_ddfdf )-1;{_aef ._fga .AddToken (FmtTypeDigitOpt ,nil );
};goto _fef ;_bce :_ddfdf =_bff +1;{_aef ._fga .AddToken (FmtTypeDigitOptThousands ,nil );};goto _fef ;_dcf :_bff =(_ddfdf )-1;{_aef ._fga .AddToken (FmtTypePercent ,nil );};goto _fef ;_gdaad :_bff =(_ddfdf )-1;{_aef ._fga .AddToken (FmtTypeDate ,_adfa [_bgb :_ddfdf ]);
};goto _fef ;_ggf :_bff =(_ddfdf )-1;{_aef ._fga .AddToken (FmtTypeDigit ,nil );};goto _fef ;_ddfe :_bff =(_ddfdf )-1;{_aef ._fga .AddToken (FmtTypeTime ,_adfa [_bgb :_ddfdf ]);};goto _fef ;_efgge :_bff =(_ddfdf )-1;{_aef ._fga .AddToken (FmtTypeLiteral ,_adfa [_bgb :_ddfdf ]);
};goto _fef ;_gef :_ddfdf =_bff +1;{_aef ._fga ._gc =true ;};goto _fef ;_bag :_ddfdf =_bff +1;{_aef ._fga .AddToken (FmtTypeLiteral ,_adfa [_bgb :_ddfdf ]);};goto _fef ;_geb :_ddfdf =_bff +1;{_aef ._fga .AddToken (FmtTypeDollar ,nil );};goto _fef ;_fea :_ddfdf =_bff +1;
{_aef ._fga .AddToken (FmtTypeComma ,nil );};goto _fef ;_cbd :_ddfdf =_bff +1;{_aef ._fga .AddToken (FmtTypeDecimal ,nil );};goto _fef ;_bdb :_ddfdf =_bff +1;{_aef .nextFmt ();};goto _fef ;_ggda :_ddfdf =_bff +1;{_aef ._fga .AddToken (FmtTypeText ,nil );
};goto _fef ;_beg :_ddfdf =_bff +1;{_aef ._fga .AddToken (FmtTypeUnderscore ,nil );};goto _fef ;_gde :_ddfdf =_bff ;_bff --;{_aef ._fga .AddToken (FmtTypeLiteral ,_adfa [_bgb :_ddfdf ]);};goto _fef ;_fddf :_ddfdf =_bff ;_bff --;{_aef ._fga .AddToken (FmtTypeLiteral ,_adfa [_bgb +1:_ddfdf -1]);
};goto _fef ;_eccg :_ddfdf =_bff ;_bff --;{_aef ._fga .AddToken (FmtTypeDigitOpt ,nil );};goto _fef ;_efb :_ddfdf =_bff ;_bff --;{_aef ._fga .AddToken (FmtTypeFraction ,_adfa [_bgb :_ddfdf ]);};goto _fef ;_gbeef :_ddfdf =_bff ;_bff --;{_aef ._fga .AddToken (FmtTypePercent ,nil );
};goto _fef ;_dfe :_ddfdf =_bff ;_bff --;{_aef ._fga .AddToken (FmtTypeDate ,_adfa [_bgb :_ddfdf ]);};goto _fef ;_bba :_ddfdf =_bff ;_bff --;{_aef ._fga .AddToken (FmtTypeDigit ,nil );};goto _fef ;_fgcc :_ddfdf =_bff ;_bff --;{_aef ._fga .AddToken (FmtTypeTime ,_adfa [_bgb :_ddfdf ]);
};goto _fef ;_ggdaf :_ddfdf =_bff ;_bff --;{};goto _fef ;_cef :_ddfdf =_bff +1;{_aef ._fga .IsExponential =true ;};goto _fef ;_fdgb :_ddfdf =_bff +1;{_aef ._fga .AddToken (FmtTypeLiteral ,_adfa [_bgb +1:_ddfdf ]);};goto _fef ;_fef :_bgb =0;if _bff ++;_bff ==_ddfg {goto _afb ;
};_gfe :_bgb =_bff ;switch _adfa [_bff ]{case 34:goto _cgf ;case 35:goto _gcd ;case 36:goto _geb ;case 37:goto _acdb ;case 44:goto _fea ;case 46:goto _cbd ;case 47:goto _gcda ;case 48:goto _gga ;case 58:goto _ccfa ;case 59:goto _bdb ;case 63:goto _feg ;
case 64:goto _ggda ;case 65:goto _dea ;case 69:goto _efdec ;case 71:goto _gfg ;case 91:goto _dbaa ;case 92:goto _edf ;case 95:goto _beg ;case 100:goto _gcda ;case 104:goto _ccfa ;case 109:goto _fgac ;case 115:goto _fge ;case 121:goto _cbce ;};if 49<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _agab ;
};goto _bag ;_cgf :_ddfdf =_bff +1;_eac =20;goto _aag ;_aag :if _bff ++;_bff ==_ddfg {goto _begf ;};_cca :if _adfa [_bff ]==34{goto _ecb ;};goto _cage ;_cage :if _bff ++;_bff ==_ddfg {goto _eaad ;};_ccb :if _adfa [_bff ]==34{goto _ecb ;};goto _cage ;_ecb :_ddfdf =_bff +1;
_eac =21;goto _aba ;_aba :if _bff ++;_bff ==_ddfg {goto _eccb ;};_dgb :if _adfa [_bff ]==34{goto _cage ;};goto _fddf ;_gcd :_ddfdf =_bff +1;_eac =3;goto _fed ;_fed :if _bff ++;_bff ==_ddfg {goto _bga ;};_dcb :switch _adfa [_bff ]{case 35:goto _cdgf ;case 37:goto _cdgf ;
case 44:goto _ceaf ;case 47:goto _bgf ;case 48:goto _cdgf ;case 63:goto _cdgf ;};goto _eccg ;_cdgf :if _bff ++;_bff ==_ddfg {goto _gebe ;};_bbef :switch _adfa [_bff ]{case 35:goto _cdgf ;case 37:goto _cdgf ;case 47:goto _bgf ;case 48:goto _cdgf ;case 63:goto _cdgf ;
};goto _bbb ;_bgf :if _bff ++;_bff ==_ddfg {goto _cedb ;};_bcga :switch _adfa [_bff ]{case 35:goto _bcc ;case 37:goto _fce ;case 48:goto _cff ;case 63:goto _bcc ;};if 49<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _ddae ;};goto _bbb ;_bcc :_ddfdf =_bff +1;goto _ffbd ;
_ffbd :if _bff ++;_bff ==_ddfg {goto _cfd ;};_cagf :switch _adfa [_bff ]{case 35:goto _bcc ;case 37:goto _bcc ;case 44:goto _bcc ;case 46:goto _bcc ;case 48:goto _bcc ;case 63:goto _bcc ;case 65:goto _dfce ;};goto _efb ;_dfce :if _bff ++;_bff ==_ddfg {goto _adc ;
};_aee :switch _adfa [_bff ]{case 47:goto _adff ;case 77:goto _eeb ;};goto _cdef ;_adff :if _bff ++;_bff ==_ddfg {goto _ceab ;};_cbcg :if _adfa [_bff ]==80{goto _bedf ;};goto _cdef ;_bedf :_ddfdf =_bff +1;goto _cedf ;_cedf :if _bff ++;_bff ==_ddfg {goto _cbcd ;
};_dbfg :if _adfa [_bff ]==65{goto _dfce ;};goto _efb ;_eeb :if _bff ++;_bff ==_ddfg {goto _agbb ;};_gba :if _adfa [_bff ]==47{goto _fbd ;};goto _cdef ;_fbd :if _bff ++;_bff ==_ddfg {goto _ebaf ;};_gag :if _adfa [_bff ]==80{goto _aca ;};goto _cdef ;_aca :if _bff ++;
_bff ==_ddfg {goto _dfcg ;};_aead :if _adfa [_bff ]==77{goto _bedf ;};goto _cdef ;_fce :if _bff ++;_bff ==_ddfg {goto _cge ;};_cfa :switch _adfa [_bff ]{case 35:goto _ddg ;case 37:goto _fcg ;case 63:goto _ddg ;};if 48<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _eebf ;
};goto _bbb ;_ddg :_ddfdf =_bff +1;goto _ddd ;_ddd :if _bff ++;_bff ==_ddfg {goto _bad ;};_cab :switch _adfa [_bff ]{case 35:goto _bcc ;case 37:goto _cgg ;case 44:goto _bcc ;case 46:goto _bcc ;case 48:goto _bcc ;case 63:goto _bcc ;case 65:goto _dfce ;};
goto _efb ;_cgg :if _bff ++;_bff ==_ddfg {goto _cec ;};_dadd :switch _adfa [_bff ]{case 35:goto _edc ;case 44:goto _edc ;case 46:goto _edc ;case 48:goto _edc ;case 63:goto _edc ;};goto _cdef ;_edc :_ddfdf =_bff +1;goto _fec ;_fec :if _bff ++;_bff ==_ddfg {goto _dabf ;
};_eag :switch _adfa [_bff ]{case 35:goto _edc ;case 44:goto _edc ;case 46:goto _edc ;case 48:goto _edc ;case 63:goto _edc ;case 65:goto _dfce ;};goto _efb ;_fcg :if _bff ++;_bff ==_ddfg {goto _eaee ;};_eae :if _adfa [_bff ]==37{goto _fcg ;};if 48<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _eebf ;
};goto _bbb ;_eebf :_ddfdf =_bff +1;_eac =13;goto _dag ;_dag :if _bff ++;_bff ==_ddfg {goto _bcde ;};_cbe :switch _adfa [_bff ]{case 35:goto _bcc ;case 37:goto _fdda ;case 44:goto _bcc ;case 46:goto _bcc ;case 48:goto _adea ;case 63:goto _bcc ;case 65:goto _dfce ;
};if 49<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _eebf ;};goto _efb ;_fdda :if _bff ++;_bff ==_ddfg {goto _afae ;};_ece :switch _adfa [_bff ]{case 35:goto _edc ;case 37:goto _fcg ;case 44:goto _edc ;case 46:goto _edc ;case 63:goto _edc ;};if 48<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _eebf ;
};goto _cdef ;_adea :_ddfdf =_bff +1;goto _cebe ;_cebe :if _bff ++;_bff ==_ddfg {goto _gdbg ;};_eca :switch _adfa [_bff ]{case 35:goto _bcc ;case 37:goto _adea ;case 44:goto _bcc ;case 46:goto _bcc ;case 48:goto _adea ;case 63:goto _bcc ;case 65:goto _dfce ;
};if 49<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _eebf ;};goto _efb ;_cff :_ddfdf =_bff +1;goto _ada ;_ada :if _bff ++;_bff ==_ddfg {goto _fbgd ;};_fff :switch _adfa [_bff ]{case 35:goto _bcc ;case 37:goto _adea ;case 44:goto _bcc ;case 46:goto _bcc ;case 48:goto _cff ;
case 63:goto _bcc ;case 65:goto _dfce ;};if 49<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _ddae ;};goto _efb ;_ddae :_ddfdf =_bff +1;goto _gdd ;_gdd :if _bff ++;_bff ==_ddfg {goto _ggad ;};_acde :switch _adfa [_bff ]{case 35:goto _bcc ;case 37:goto _eebf ;
case 44:goto _bcc ;case 46:goto _bcc ;case 48:goto _cff ;case 63:goto _bcc ;case 65:goto _dfce ;};if 49<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _ddae ;};goto _efb ;_ceaf :if _bff ++;_bff ==_ddfg {goto _adec ;};_fcea :if _adfa [_bff ]==35{goto _bce ;};goto _fcb ;
_acdb :_ddfdf =_bff +1;_eac =8;goto _eadb ;_eadb :if _bff ++;_bff ==_ddfg {goto _ggb ;};_ffg :switch _adfa [_bff ]{case 35:goto _ccf ;case 37:goto _gcdg ;case 48:goto _gbgf ;case 63:goto _ccf ;};if 49<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _ecec ;};goto _gbeef ;
_ccf :if _bff ++;_bff ==_ddfg {goto _geac ;};_ggff :switch _adfa [_bff ]{case 35:goto _ccf ;case 47:goto _bgf ;case 48:goto _ccf ;case 63:goto _ccf ;};goto _dcf ;_gcdg :if _bff ++;_bff ==_ddfg {goto _aeaa ;};_daf :if _adfa [_bff ]==37{goto _gcdg ;};if 48<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _ecec ;
};goto _bbb ;_ecec :if _bff ++;_bff ==_ddfg {goto _ggaf ;};_feb :switch _adfa [_bff ]{case 37:goto _gcdg ;case 47:goto _bgf ;};if 48<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _ecec ;};goto _bbb ;_gbgf :if _bff ++;_bff ==_ddfg {goto _geg ;};_bdbe :switch _adfa [_bff ]{case 35:goto _ccf ;
case 37:goto _gcdg ;case 47:goto _bgf ;case 48:goto _gbgf ;case 63:goto _ccf ;};if 49<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _ecec ;};goto _dcf ;_gcda :_ddfdf =_bff +1;goto _fdb ;_fdb :if _bff ++;_bff ==_ddfg {goto _fega ;};_adfb :switch _adfa [_bff ]{case 47:goto _gcda ;
case 100:goto _gcda ;case 109:goto _gcda ;case 121:goto _cbf ;};goto _dfe ;_cbf :if _bff ++;_bff ==_ddfg {goto _dbgc ;};_aad :if _adfa [_bff ]==121{goto _gcda ;};goto _gdaad ;_gga :_ddfdf =_bff +1;_eac =2;goto _aga ;_aga :if _bff ++;_bff ==_ddfg {goto _cace ;
};_dec :switch _adfa [_bff ]{case 35:goto _cdgf ;case 37:goto _ebbcg ;case 47:goto _bgf ;case 48:goto _fabc ;case 63:goto _cdgf ;};if 49<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _cggg ;};goto _bba ;_ebbcg :if _bff ++;_bff ==_ddfg {goto _gbge ;};_dac :switch _adfa [_bff ]{case 35:goto _cdgf ;
case 37:goto _ebbcg ;case 47:goto _bgf ;case 48:goto _ebbcg ;case 63:goto _cdgf ;};if 49<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _ecec ;};goto _ggf ;_fabc :if _bff ++;_bff ==_ddfg {goto _adba ;};_dadde :switch _adfa [_bff ]{case 35:goto _cdgf ;case 37:goto _ebbcg ;
case 47:goto _bgf ;case 48:goto _fabc ;case 63:goto _cdgf ;};if 49<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _cggg ;};goto _ggf ;_cggg :if _bff ++;_bff ==_ddfg {goto _fcgg ;};_eebc :switch _adfa [_bff ]{case 37:goto _ecec ;case 47:goto _bgf ;};if 48<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _cggg ;
};goto _bbb ;_agab :_ddfdf =_bff +1;_eac =20;goto _gfd ;_gfd :if _bff ++;_bff ==_ddfg {goto _adcb ;};_cefb :switch _adfa [_bff ]{case 37:goto _ecec ;case 47:goto _bgf ;};if 48<=_adfa [_bff ]&&_adfa [_bff ]<=57{goto _cggg ;};goto _gde ;_ccfa :_ddfdf =_bff +1;
_eac =15;goto _efae ;_efae :if _bff ++;_bff ==_ddfg {goto _baec ;};_ccc :switch _adfa [_bff ]{case 58:goto _ccfa ;case 65:goto _cfc ;case 104:goto _ccfa ;case 109:goto _ccfa ;case 115:goto _fge ;};goto _fgcc ;_cfc :if _bff ++;_bff ==_ddfg {goto _gbaa ;
};_efggf :switch _adfa [_bff ]{case 47:goto _fbff ;case 77:goto _eedg ;};goto _bbb ;_fbff :if _bff ++;_bff ==_ddfg {goto _dfd ;};_fbe :if _adfa [_bff ]==80{goto _ccfa ;};goto _bbb ;_eedg :if _bff ++;_bff ==_ddfg {goto _faf ;};_fdbd :if _adfa [_bff ]==47{goto _bfe ;
};goto _bbb ;_bfe :if _bff ++;_bff ==_ddfg {goto _begc ;};_fcce :if _adfa [_bff ]==80{goto _efec ;};goto _bbb ;_efec :if _bff ++;_bff ==_ddfg {goto _bgbb ;};_bea :if _adfa [_bff ]==77{goto _ccfa ;};goto _bbb ;_fge :_ddfdf =_bff +1;_eac =15;goto _fbc ;_fbc :if _bff ++;
_bff ==_ddfg {goto _egcc ;};_gae :switch _adfa [_bff ]{case 46:goto _baf ;case 58:goto _ccfa ;case 65:goto _cfc ;case 104:goto _ccfa ;case 109:goto _ccfa ;case 115:goto _fge ;};goto _fgcc ;_baf :if _bff ++;_bff ==_ddfg {goto _cgd ;};_eaa :if _adfa [_bff ]==48{goto _dgad ;
};goto _ddfe ;_dgad :_ddfdf =_bff +1;_eac =15;goto _ffad ;_ffad :if _bff ++;_bff ==_ddfg {goto _fbfg ;};_gdda :switch _adfa [_bff ]{case 48:goto _ggag ;case 58:goto _ccfa ;case 65:goto _cfc ;case 104:goto _ccfa ;case 109:goto _ccfa ;case 115:goto _fge ;
};goto _fgcc ;_ggag :_ddfdf =_bff +1;_eac =15;goto _efag ;_efag :if _bff ++;_bff ==_ddfg {goto _fcbd ;};_ccce :switch _adfa [_bff ]{case 48:goto _ccfa ;case 58:goto _ccfa ;case 65:goto _cfc ;case 104:goto _ccfa ;case 109:goto _ccfa ;case 115:goto _fge ;
};goto _fgcc ;_feg :_ddfdf =_bff +1;_eac =5;goto _bgcg ;_bgcg :if _bff ++;_bff ==_ddfg {goto _bgac ;};_egbb :switch _adfa [_bff ]{case 35:goto _cdgf ;case 37:goto _cdgf ;case 47:goto _bgf ;case 48:goto _cdgf ;case 63:goto _cdgf ;};goto _ggdaf ;_dea :_ddfdf =_bff +1;
_eac =20;goto _gfef ;_gfef :if _bff ++;_bff ==_ddfg {goto _dadb ;};_ged :switch _adfa [_bff ]{case 47:goto _fbff ;case 77:goto _eedg ;};goto _gde ;_efdec :if _bff ++;_bff ==_ddfg {goto _gagb ;};_dgbf :switch _adfa [_bff ]{case 43:goto _cef ;case 45:goto _cef ;
};goto _gde ;_gfg :_ddfdf =_bff +1;goto _egg ;_egg :if _bff ++;_bff ==_ddfg {goto _cdf ;};_bgcb :if _adfa [_bff ]==101{goto _ffcc ;};goto _gde ;_ffcc :if _bff ++;_bff ==_ddfg {goto _aed ;};_becc :if _adfa [_bff ]==110{goto _fcaf ;};goto _efgge ;_fcaf :if _bff ++;
_bff ==_ddfg {goto _cfae ;};_dadf :if _adfa [_bff ]==101{goto _ddbg ;};goto _efgge ;_ddbg :if _bff ++;_bff ==_ddfg {goto _ecf ;};_daddf :if _adfa [_bff ]==114{goto _aac ;};goto _efgge ;_aac :if _bff ++;_bff ==_ddfg {goto _eea ;};_gddc :if _adfa [_bff ]==97{goto _bbc ;
};goto _efgge ;_bbc :if _bff ++;_bff ==_ddfg {goto _afdg ;};_dcfc :if _adfa [_bff ]==108{goto _gef ;};goto _efgge ;_dbaa :_ddfdf =_bff +1;_eac =20;goto _gac ;_gac :if _bff ++;_bff ==_ddfg {goto _cabg ;};_abge :switch _adfa [_bff ]{case 104:goto _bgcbd ;
case 109:goto _bgcbd ;case 115:goto _bgcbd ;};goto _egda ;_egda :if _bff ++;_bff ==_ddfg {goto _agc ;};_aadf :if _adfa [_bff ]==93{goto _adbe ;};goto _egda ;_adbe :_ddfdf =_bff +1;_eac =18;goto _eagc ;_fae :_ddfdf =_bff +1;_eac =16;goto _eagc ;_eagc :if _bff ++;
_bff ==_ddfg {goto _cfgg ;};_dcfg :if _adfa [_bff ]==93{goto _adbe ;};goto _egda ;_bgcbd :if _bff ++;_bff ==_ddfg {goto _gdg ;};_bagb :if _adfa [_bff ]==93{goto _fae ;};goto _egda ;_edf :if _bff ++;_bff ==_ddfg {goto _faee ;};_ffe :goto _fdgb ;_fgac :_ddfdf =_bff +1;
_eac =14;goto _dddb ;_dddb :if _bff ++;_bff ==_ddfg {goto _gcgd ;};_fbbd :switch _adfa [_bff ]{case 47:goto _gcda ;case 58:goto _ccfa ;case 65:goto _cfc ;case 100:goto _gcda ;case 104:goto _ccfa ;case 109:goto _fgac ;case 115:goto _fge ;case 121:goto _cbf ;
};goto _dfe ;_cbce :if _bff ++;_bff ==_ddfg {goto _gefd ;};_gec :if _adfa [_bff ]==121{goto _gcda ;};goto _gde ;_bggg :_afb :_gbee =34;goto _gddcg ;_begf :_gbee =35;goto _gddcg ;_eaad :_gbee =0;goto _gddcg ;_eccb :_gbee =36;goto _gddcg ;_bga :_gbee =37;
goto _gddcg ;_gebe :_gbee =1;goto _gddcg ;_cedb :_gbee =2;goto _gddcg ;_cfd :_gbee =38;goto _gddcg ;_adc :_gbee =3;goto _gddcg ;_ceab :_gbee =4;goto _gddcg ;_cbcd :_gbee =39;goto _gddcg ;_agbb :_gbee =5;goto _gddcg ;_ebaf :_gbee =6;goto _gddcg ;_dfcg :_gbee =7;
goto _gddcg ;_cge :_gbee =8;goto _gddcg ;_bad :_gbee =40;goto _gddcg ;_cec :_gbee =9;goto _gddcg ;_dabf :_gbee =41;goto _gddcg ;_eaee :_gbee =10;goto _gddcg ;_bcde :_gbee =42;goto _gddcg ;_afae :_gbee =11;goto _gddcg ;_gdbg :_gbee =43;goto _gddcg ;_fbgd :_gbee =44;
goto _gddcg ;_ggad :_gbee =45;goto _gddcg ;_adec :_gbee =12;goto _gddcg ;_ggb :_gbee =46;goto _gddcg ;_geac :_gbee =13;goto _gddcg ;_aeaa :_gbee =14;goto _gddcg ;_ggaf :_gbee =15;goto _gddcg ;_geg :_gbee =16;goto _gddcg ;_fega :_gbee =47;goto _gddcg ;_dbgc :_gbee =17;
goto _gddcg ;_cace :_gbee =48;goto _gddcg ;_gbge :_gbee =18;goto _gddcg ;_adba :_gbee =19;goto _gddcg ;_fcgg :_gbee =20;goto _gddcg ;_adcb :_gbee =49;goto _gddcg ;_baec :_gbee =50;goto _gddcg ;_gbaa :_gbee =21;goto _gddcg ;_dfd :_gbee =22;goto _gddcg ;
_faf :_gbee =23;goto _gddcg ;_begc :_gbee =24;goto _gddcg ;_bgbb :_gbee =25;goto _gddcg ;_egcc :_gbee =51;goto _gddcg ;_cgd :_gbee =26;goto _gddcg ;_fbfg :_gbee =52;goto _gddcg ;_fcbd :_gbee =53;goto _gddcg ;_bgac :_gbee =54;goto _gddcg ;_dadb :_gbee =55;
goto _gddcg ;_gagb :_gbee =56;goto _gddcg ;_cdf :_gbee =57;goto _gddcg ;_aed :_gbee =27;goto _gddcg ;_cfae :_gbee =28;goto _gddcg ;_ecf :_gbee =29;goto _gddcg ;_eea :_gbee =30;goto _gddcg ;_afdg :_gbee =31;goto _gddcg ;_cabg :_gbee =58;goto _gddcg ;_agc :_gbee =32;
goto _gddcg ;_cfgg :_gbee =59;goto _gddcg ;_gdg :_gbee =33;goto _gddcg ;_faee :_gbee =60;goto _gddcg ;_gcgd :_gbee =61;goto _gddcg ;_gefd :_gbee =62;goto _gddcg ;_gddcg :{};if _bff ==_abg {switch _gbee {case 35:goto _gde ;case 0:goto _bbb ;case 36:goto _fddf ;
case 37:goto _eccg ;case 1:goto _bbb ;case 2:goto _bbb ;case 38:goto _efb ;case 3:goto _cdef ;case 4:goto _cdef ;case 39:goto _efb ;case 5:goto _cdef ;case 6:goto _cdef ;case 7:goto _cdef ;case 8:goto _bbb ;case 40:goto _efb ;case 9:goto _cdef ;case 41:goto _efb ;
case 10:goto _bbb ;case 42:goto _efb ;case 11:goto _cdef ;case 43:goto _efb ;case 44:goto _efb ;case 45:goto _efb ;case 12:goto _fcb ;case 46:goto _gbeef ;case 13:goto _dcf ;case 14:goto _bbb ;case 15:goto _bbb ;case 16:goto _dcf ;case 47:goto _dfe ;case 17:goto _gdaad ;
case 48:goto _bba ;case 18:goto _ggf ;case 19:goto _ggf ;case 20:goto _bbb ;case 49:goto _gde ;case 50:goto _fgcc ;case 21:goto _bbb ;case 22:goto _bbb ;case 23:goto _bbb ;case 24:goto _bbb ;case 25:goto _bbb ;case 51:goto _fgcc ;case 26:goto _ddfe ;case 52:goto _fgcc ;
case 53:goto _fgcc ;case 54:goto _ggdaf ;case 55:goto _gde ;case 56:goto _gde ;case 57:goto _gde ;case 27:goto _efgge ;case 28:goto _efgge ;case 29:goto _efgge ;case 30:goto _efgge ;case 31:goto _efgge ;case 58:goto _gde ;case 32:goto _bbb ;case 59:goto _bbb ;
case 33:goto _efgge ;case 60:goto _gde ;case 61:goto _dfe ;case 62:goto _gde ;};};};if _bgb > 0{copy (_adfa [0:],_adfa [_bgb :]);};};_ =_abg ;if _gbee ==_fbf {_b .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");
};};func _ebb (_bb ,_bcd float64 ,_bg Format )[]byte {if len (_bg .Whole )==0{return nil ;};_bfg :=_a .Date (1899,12,30,0,0,0,0,_a .UTC );_bca :=_bfg .Add (_a .Duration (_bcd *float64 (24*_a .Hour )));_bca =_ddbc (_bca );_cfg :=_c .AppendFloat (nil ,_bb ,'f',-1,64);
_adg :=make ([]byte ,0,len (_cfg ));_afc :=0;_fc :=1;_dda :for _aeb :=len (_bg .Whole )-1;_aeb >=0;_aeb --{_bcda :=len (_cfg )-1-_afc ;_cb :=_bg .Whole [_aeb ];switch _cb .Type {case FmtTypeDigit :if _bcda >=0{_adg =append (_adg ,_cfg [_bcda ]);_afc ++;
_fc =_aeb ;}else {_adg =append (_adg ,'0');};case FmtTypeDigitOpt :if _bcda >=0{_adg =append (_adg ,_cfg [_bcda ]);_afc ++;_fc =_aeb ;}else {for _efe :=_aeb ;_efe >=0;_efe --{_ddc :=_bg .Whole [_efe ];if _ddc .Type ==FmtTypeLiteral {_adg =append (_adg ,_ddc .Literal );
};};break _dda ;};case FmtTypeDollar :for _cgb :=_afc ;_cgb < len (_cfg );_cgb ++{_adg =append (_adg ,_cfg [len (_cfg )-1-_cgb ]);_afc ++;};_adg =append (_adg ,'$');case FmtTypeComma :if !_bg ._efg {_adg =append (_adg ,',');};case FmtTypeLiteral :_adg =append (_adg ,_cb .Literal );
case FmtTypeDate :_adg =append (_adg ,_dee (_cbb (_bca ,_cb .DateTime ))...);case FmtTypeTime :_adg =append (_adg ,_dee (_fbga (_bca ,_bcd ,_cb .DateTime ))...);default:_b .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_cb );
};};_ddfd :=_dee (_adg );if _afc < len (_cfg )&&(_afc !=0||_bg ._efc ){_gce :=len (_cfg )-_afc ;_dad :=make ([]byte ,len (_ddfd )+_gce );copy (_dad ,_ddfd [0:_fc ]);copy (_dad [_fc :],_cfg [0:]);copy (_dad [_fc +_gce :],_ddfd [_fc :]);_ddfd =_dad ;};if _bg ._efg {_fcc :=_ef .Buffer {};
_bde :=0;for _ggg :=len (_ddfd )-1;_ggg >=0;_ggg --{if !(_ddfd [_ggg ]>='0'&&_ddfd [_ggg ]<='9'){_bde ++;}else {break ;};};for _acb :=0;_acb < len (_ddfd );_acb ++{_gfb :=(len (_ddfd )-_acb -_bde );if _gfb %3==0&&_gfb !=0&&_acb !=0{_fcc .WriteByte (',');
};_fcc .WriteByte (_ddfd [_acb ]);};_ddfd =_fcc .Bytes ();};return _ddfd ;};func IsNumber (data string )(_gcba bool ){_bbe ,_afa ,_eba :=0,0,len (data );_fdd :=len (data );_dff ,_gda ,_bed :=0,0,0;_ =_gda ;_ =_bed ;_ =_dff ;{_bbe =_ade ;_dff =0;_gda =0;
_bed =0;};{if _afa ==_eba {goto _bgg ;};switch _bbe {case 0:goto _feeb ;case 1:goto _edba ;case 2:goto _afg ;case 3:goto _bef ;case 4:goto _efa ;case 5:goto _cdg ;case 6:goto _fab ;case 7:goto _bfb ;};goto _edbc ;_ega :_gda =_afa ;_afa --;{_gcba =false ;
};goto _adbf ;_acf :_gda =_afa ;_afa --;{_gcba =_gda ==len (data );};goto _adbf ;_afd :_gda =_afa ;_afa --;{_gcba =_gda ==len (data );};goto _adbf ;_dfge :switch _bed {case 2:{_afa =(_gda )-1;_gcba =_gda ==len (data );};case 3:{_afa =(_gda )-1;_gcba =false ;
};};goto _adbf ;_adbf :_dff =0;if _afa ++;_afa ==_eba {goto _fgd ;};_feeb :_dff =_afa ;switch data [_afa ]{case 43:goto _add ;case 45:goto _add ;};if 48<=data [_afa ]&&data [_afa ]<=57{goto _cc ;};goto _bgc ;_bgc :if _afa ++;_afa ==_eba {goto _ffc ;};_edba :goto _bgc ;
_add :if _afa ++;_afa ==_eba {goto _gdaa ;};_afg :if 48<=data [_afa ]&&data [_afa ]<=57{goto _cc ;};goto _bgc ;_cc :if _afa ++;_afa ==_eba {goto _ecd ;};_bef :if data [_afa ]==46{goto _fdg ;};if 48<=data [_afa ]&&data [_afa ]<=57{goto _cc ;};goto _bgc ;
_fdg :if _afa ++;_afa ==_eba {goto _gcf ;};_efa :if 48<=data [_afa ]&&data [_afa ]<=57{goto _bcg ;};goto _bgc ;_bcg :if _afa ++;_afa ==_eba {goto _gcg ;};_cdg :if data [_afa ]==69{goto _bcdab ;};if 48<=data [_afa ]&&data [_afa ]<=57{goto _bcg ;};goto _bgc ;
_bcdab :if _afa ++;_afa ==_eba {goto _gca ;};_fab :switch data [_afa ]{case 43:goto _caca ;case 45:goto _caca ;};goto _bgc ;_caca :_gda =_afa +1;_bed =3;goto _bec ;_dbe :_gda =_afa +1;_bed =2;goto _bec ;_bec :if _afa ++;_afa ==_eba {goto _aecg ;};_bfb :if 48<=data [_afa ]&&data [_afa ]<=57{goto _dbe ;
};goto _bgc ;_edbc :_fgd :_bbe =0;goto _bgg ;_ffc :_bbe =1;goto _bgg ;_gdaa :_bbe =2;goto _bgg ;_ecd :_bbe =3;goto _bgg ;_gcf :_bbe =4;goto _bgg ;_gcg :_bbe =5;goto _bgg ;_gca :_bbe =6;goto _bgg ;_aecg :_bbe =7;goto _bgg ;_bgg :{};if _afa ==_fdd {switch _bbe {case 1:goto _ega ;
case 2:goto _ega ;case 3:goto _acf ;case 4:goto _ega ;case 5:goto _afd ;case 6:goto _ega ;case 7:goto _dfge ;};};};if _bbe ==_fbf {return false ;};return ;};

// FmtType is the type of a format token.
//
//go:generate stringer -type=FmtType
type FmtType byte ;

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_fb ,_ :=_c .ParseFloat (v ,64);return Number (_fb ,f );};return String (v ,f );};func _dee (_da []byte )[]byte {for _efd :=0;_efd < len (_da )/2;_efd ++{_ffa :=len (_da )-1-_efd ;_da [_efd ],_da [_ffa ]=_da [_ffa ],_da [_efd ];
};return _da ;};const _g =1e-10;const _ade int =0;func _fbga (_bae _a .Time ,_aec float64 ,_fee string )[]byte {_ggd :=[]byte {};_cbg :=0;for _ffag :=0;_ffag < len (_fee );_ffag ++{var _gcee string ;if _fee [_ffag ]==':'{_gcee =string (_fee [_cbg :_ffag ]);
_cbg =_ffag +1;}else if _ffag ==len (_fee )-1{_gcee =string (_fee [_cbg :_ffag +1]);}else {continue ;};switch _gcee {case "\u0064":_ggd =_bae .AppendFormat (_ggd ,"\u0032");case "\u0068":_ggd =_bae .AppendFormat (_ggd ,"\u0033");case "\u0068\u0068":_ggd =_bae .AppendFormat (_ggd ,"\u0031\u0035");
case "\u006d":_ggd =_bae .AppendFormat (_ggd ,"\u0034");case "\u006d\u006d":_ggd =_bae .AppendFormat (_ggd ,"\u0030\u0034");case "\u0073":_ggd =_bae .Round (_a .Second ).AppendFormat (_ggd ,"\u0035");case "\u0073\u002e\u0030":_ggd =_bae .Round (_a .Second /10).AppendFormat (_ggd ,"\u0035\u002e\u0030");
case "\u0073\u002e\u0030\u0030":_ggd =_bae .Round (_a .Second /100).AppendFormat (_ggd ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_ggd =_bae .Round (_a .Second /1000).AppendFormat (_ggd ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_ggd =_bae .Round (_a .Second ).AppendFormat (_ggd ,"\u0030\u0035");
case "\u0073\u0073\u002e\u0030":_ggd =_bae .Round (_a .Second /10).AppendFormat (_ggd ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_ggd =_bae .Round (_a .Second /100).AppendFormat (_ggd ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_ggd =_bae .Round (_a .Second /1000).AppendFormat (_ggd ,"\u0030\u0035\u002e\u0030\u0030\u0030");
case "\u0041\u004d\u002fP\u004d":_ggd =_bae .AppendFormat (_ggd ,"\u0050\u004d");case "\u005b\u0068\u005d":_ggd =_c .AppendInt (_ggd ,int64 (_aec *24),10);case "\u005b\u006d\u005d":_ggd =_c .AppendInt (_ggd ,int64 (_aec *24*60),10);case "\u005b\u0073\u005d":_ggd =_c .AppendInt (_ggd ,int64 (_aec *24*60*60),10);
case "":default:_b .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_gcee );};if _fee [_ffag ]==':'{_ggd =append (_ggd ,':');};};return _ggd ;
};const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};const _aebd int =0;const _aab int =0;const _fbf int =-1;func _ffb (_ced float64 ,_ac Format ,_ab bool )string {if _ac ._gc {return NumberGeneric (_ced );};_fbb :=make ([]byte ,0,20);_adf :=_cd .Signbit (_ced );
_eg :=_cd .Abs (_ced );_fe :=int64 (0);_abd :=int64 (0);if _ac .IsExponential {for _eg >=10{_abd ++;_eg /=10;};for _eg < 1{_abd --;_eg *=10;};}else if _ac ._ag {_eg *=100;}else if _ac ._ae {if _ac ._db ==0{_ec :=_cd .Pow (10,float64 (_ac ._aea ));_bac ,_caa :=1.0,1.0;
_ =_bac ;for _cg :=1.0;_cg < _ec ;_cg ++{_ ,_ea :=_cd .Modf (_eg *float64 (_cg ));if _ea < _caa {_caa =_ea ;_bac =_cg ;if _ea ==0{break ;};};};_ac ._db =int64 (_bac );};_fe =int64 (_eg *float64 (_ac ._db )+0.5);if len (_ac .Whole )> 0&&_fe > _ac ._db {_fe =int64 (_eg *float64 (_ac ._db ))%_ac ._db ;
_eg -=float64 (_fe )/float64 (_ac ._db );}else {_eg -=float64 (_fe )/float64 (_ac ._db );if _cd .Abs (_eg )< 1{_dbf :=true ;for _ ,_abdc :=range _ac .Whole {if _abdc .Type ==FmtTypeDigitOpt {continue ;};if _abdc .Type ==FmtTypeLiteral &&_abdc .Literal ==' '{continue ;
};_dbf =false ;};if _dbf {_ac .Whole =nil ;};};};};_gg :=1;for _ ,_af :=range _ac .Fractional {if _af .Type ==FmtTypeDigit ||_af .Type ==FmtTypeDigitOpt {_gg ++;};};_eg +=5*_cd .Pow10 (-_gg );_ecg ,_gd :=_cd .Modf (_eg );_fbb =append (_fbb ,_ebb (_ecg ,_ced ,_ac )...);
_fbb =append (_fbb ,_acd (_gd ,_ced ,_ac )...);_fbb =append (_fbb ,_ace (_abd ,_ac )...);if _ac ._ae {_fbb =_c .AppendInt (_fbb ,_fe ,10);_fbb =append (_fbb ,'/');_fbb =_c .AppendInt (_fbb ,_ac ._db ,10);};if !_ab &&_adf {return "\u002d"+string (_fbb );
};return string (_fbb );};func _acd (_dbc ,_fca float64 ,_dfc Format )[]byte {if len (_dfc .Fractional )==0{return nil ;};_aeab :=_c .AppendFloat (nil ,_dbc ,'f',-1,64);if len (_aeab )> 2{_aeab =_aeab [2:];}else {_aeab =nil ;};_egd :=make ([]byte ,0,len (_aeab ));
_egd =append (_egd ,'.');_faa :=0;_dc :for _ge :=0;_ge < len (_dfc .Fractional );_ge ++{_cdb :=_ge ;_efde :=_dfc .Fractional [_ge ];switch _efde .Type {case FmtTypeDigit :if _cdb < len (_aeab ){_egd =append (_egd ,_aeab [_cdb ]);_faa ++;}else {_egd =append (_egd ,'0');
};case FmtTypeDigitOpt :if _cdb >=0{_egd =append (_egd ,_aeab [_cdb ]);_faa ++;}else {break _dc ;};case FmtTypeLiteral :_egd =append (_egd ,_efde .Literal );default:_b .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_efde );
};};return _egd ;};func _ceb (_ebbc int64 )int64 {if _ebbc < 0{return -_ebbc ;};return _ebbc ;};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_ae bool ;_ag bool ;_gc bool ;_efg bool ;_cde bool ;_efc bool ;_db int64 ;_aea int ;};func _egc (_gad []byte )[]byte {_dfg :=len (_gad );_dga :=false ;_fd :=false ;
for _gbg :=len (_gad )-1;_gbg >=0;_gbg --{if _gad [_gbg ]=='0'&&!_fd &&!_dga {_dfg =_gbg ;}else if _gad [_gbg ]=='.'{_dga =true ;}else {_fd =true ;};};if _dga &&_fd {if _gad [_dfg -1]=='.'{_dfg --;};return _gad [0:_dfg ];};return _gad ;};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_gb :=Parse (f );if len (_gb )==1{return _ffb (v ,_gb [0],false );}else if len (_gb )> 1&&v < 0{return _ffb (v ,_gb [1],true );
}else if len (_gb )> 2&&v ==0{return _ffb (v ,_gb [2],false );};return _ffb (v ,_gb [0],false );};func _ace (_ga int64 ,_cad Format )[]byte {if !_cad .IsExponential ||len (_cad .Exponent )==0{return nil ;};_dbg :=_c .AppendInt (nil ,_ceb (_ga ),10);_gbb :=make ([]byte ,0,len (_dbg )+2);
_gbb =append (_gbb ,'E');if _ga >=0{_gbb =append (_gbb ,'+');}else {_gbb =append (_gbb ,'-');_ga *=-1;};_adb :=0;_acc :for _ecgf :=len (_cad .Exponent )-1;_ecgf >=0;_ecgf --{_dab :=len (_dbg )-1-_adb ;_cbc :=_cad .Exponent [_ecgf ];switch _cbc .Type {case FmtTypeDigit :if _dab >=0{_gbb =append (_gbb ,_dbg [_dab ]);
_adb ++;}else {_gbb =append (_gbb ,'0');};case FmtTypeDigitOpt :if _dab >=0{_gbb =append (_gbb ,_dbg [_dab ]);_adb ++;}else {for _bcag :=_ecgf ;_bcag >=0;_bcag --{_gcb :=_cad .Exponent [_bcag ];if _gcb .Type ==FmtTypeLiteral {_gbb =append (_gbb ,_gcb .Literal );
};};break _acc ;};case FmtTypeLiteral :_gbb =append (_gbb ,_cbc .Literal );default:_b .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_cbc );
};};if _adb < len (_dbg ){_gbb =append (_gbb ,_dbg [len (_dbg )-_adb -1:_adb -1]...);};_dee (_gbb [2:]);return _gbb ;};func _eaf (_eade []byte )[]byte {for _fbg :=len (_eade )-1;_fbg > 0;_fbg --{if _eade [_fbg ]=='9'+1{_eade [_fbg ]='0';if _eade [_fbg -1]=='.'{_fbg --;
};_eade [_fbg -1]++;};};if _eade [0]=='9'+1{_eade [0]='0';copy (_eade [1:],_eade [0:]);_eade [0]='1';};return _eade ;};var _ca =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};func _aa (_gcc float64 )string {_fcae :=_c .FormatFloat (_gcc ,'E',-1,64);
_gea :=_c .FormatFloat (_gcc ,'E',5,64);if len (_fcae )< len (_gea ){return _c .FormatFloat (_gcc ,'E',2,64);};return _gea ;};func (_eed *Lexer )nextFmt (){_eed ._egb =append (_eed ._egb ,_eed ._fga );_eed ._fga =Format {}};func Parse (s string )[]Format {_aaa :=Lexer {};
_aaa .Lex (_eb .NewReader (s ));_aaa ._egb =append (_aaa ._egb ,_aaa ._fga );return _aaa ._egb ;};

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _cd .Abs (v )>=_fa ||_cd .Abs (v )<=_g &&v !=0{return _aa (v );};_efgg :=make ([]byte ,0,15);_efgg =_c .AppendFloat (_efgg ,v ,'f',-1,64);if len (_efgg )> 11{_edb :=_efgg [11]-'0';if _edb >=5&&_edb <=9{_efgg [10]++;
_efgg =_efgg [0:11];_efgg =_eaf (_efgg );};_efgg =_efgg [0:11];}else if len (_efgg )==11{if _efgg [len (_efgg )-1]=='9'{_efgg [len (_efgg )-1]++;_efgg =_eaf (_efgg );};};_efgg =_egc (_efgg );return string (_efgg );};const _deb int =34;const _fa =1e11;const _gge int =34;


// AddToken adds a format token to the format.
func (_agb *Format )AddToken (t FmtType ,l []byte ){if _agb ._cde {_agb ._cde =false ;return ;};switch t {case FmtTypeDecimal :_agb ._efc =true ;case FmtTypeUnderscore :_agb ._cde =true ;case FmtTypeText :_agb .Whole =append (_agb .Whole ,Token {Type :t });
case FmtTypeDate ,FmtTypeTime :_agb .Whole =append (_agb .Whole ,Token {Type :t ,DateTime :string (l )});case FmtTypePercent :_agb ._ag =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};
};for _ ,_dd :=range l {if _agb .IsExponential {_agb .Exponent =append (_agb .Exponent ,Token {Type :t ,Literal :_dd });}else if !_agb ._efc {_agb .Whole =append (_agb .Whole ,Token {Type :t ,Literal :_dd });}else {_agb .Fractional =append (_agb .Fractional ,Token {Type :t ,Literal :_dd });
};};case FmtTypeDigitOptThousands :_agb ._efg =true ;case FmtTypeFraction :_dg :=_eb .Split (string (l ),"\u002f");if len (_dg )==2{_agb ._ae =true ;_agb ._db ,_ =_c .ParseInt (_dg [1],10,64);for _ ,_bf :=range _dg [1]{if _bf =='?'||_bf =='0'{_agb ._aea ++;
};};};default:_b .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );};};

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_ede :=Parse (f );var _ff Format ;if len (_ede )==1{_ff =_ede [0];}else if len (_ede )==4{_ff =_ede [3];};_de :=false ;for _ ,_bfd :=range _ff .Whole {if _bfd .Type ==FmtTypeText {_de =true ;};};if !_de {return v ;
};_cf :=_ef .Buffer {};for _ ,_bd :=range _ff .Whole {switch _bd .Type {case FmtTypeLiteral :_cf .WriteByte (_bd .Literal );case FmtTypeText :_cf .WriteString (v );};};return _cf .String ();};const _f ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";
const _edbf int =34;func _cbb (_gbe _a .Time ,_fg string )[]byte {_dbgf :=[]byte {};_ecc :=0;for _adgf :=0;_adgf < len (_fg );_adgf ++{var _edd string ;if _fg [_adgf ]=='/'{_edd =string (_fg [_ecc :_adgf ]);_ecc =_adgf +1;}else if _adgf ==len (_fg )-1{_edd =string (_fg [_ecc :_adgf +1]);
}else {continue ;};switch _edd {case "\u0079\u0079":_dbgf =_gbe .AppendFormat (_dbgf ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_dbgf =_gbe .AppendFormat (_dbgf ,"\u0032\u0030\u0030\u0036");case "\u006d":_dbgf =_gbe .AppendFormat (_dbgf ,"\u0031");
case "\u006d\u006d":_dbgf =_gbe .AppendFormat (_dbgf ,"\u0030\u0031");case "\u006d\u006d\u006d":_dbgf =_gbe .AppendFormat (_dbgf ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_dbgf =_gbe .AppendFormat (_dbgf ,"\u004aa\u006e\u0075\u0061\u0072\u0079");
case "\u006d\u006d\u006dm\u006d":switch _gbe .Month (){case _a .January ,_a .July ,_a .June :_dbgf =append (_dbgf ,'J');case _a .February :_dbgf =append (_dbgf ,'M');case _a .March ,_a .May :_dbgf =append (_dbgf ,'M');case _a .April ,_a .August :_dbgf =append (_dbgf ,'A');
case _a .September :_dbgf =append (_dbgf ,'S');case _a .October :_dbgf =append (_dbgf ,'O');case _a .November :_dbgf =append (_dbgf ,'N');case _a .December :_dbgf =append (_dbgf ,'D');};case "\u0064":_dbgf =_gbe .AppendFormat (_dbgf ,"\u0032");case "\u0064\u0064":_dbgf =_gbe .AppendFormat (_dbgf ,"\u0030\u0032");
case "\u0064\u0064\u0064":_dbgf =_gbe .AppendFormat (_dbgf ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_dbgf =_gbe .AppendFormat (_dbgf ,"\u004d\u006f\u006e\u0064\u0061\u0079");default:_b .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_edd );
};if _fg [_adgf ]=='/'{_dbgf =append (_dbgf ,'/');};};return _dbgf ;};