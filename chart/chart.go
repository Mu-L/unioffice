//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_ae "fmt";_c "github.com/unidoc/unioffice";_f "github.com/unidoc/unioffice/color";_ff "github.com/unidoc/unioffice/drawing";_g "github.com/unidoc/unioffice/measurement";_ad "github.com/unidoc/unioffice/schema/soo/dml";_ac "github.com/unidoc/unioffice/schema/soo/dml/chart";
_ab "math/rand";);

// Labels returns the data label properties.
func (_bac LineChartSeries )Labels ()DataLabels {if _bac ._geb .DLbls ==nil {_bac ._geb .DLbls =_ac .NewCT_DLbls ();};return MakeDataLabels (_bac ._geb .DLbls );};

// AddSeries adds a default series to a bar chart.
func (_bdc BarChart )AddSeries ()BarChartSeries {_cdca :=_bdc .nextColor (len (_bdc ._fa .Ser ));_ag :=_ac .NewCT_BarSer ();_bdc ._fa .Ser =append (_bdc ._fa .Ser ,_ag );_ag .Idx .ValAttr =uint32 (len (_bdc ._fa .Ser )-1);_ag .Order .ValAttr =uint32 (len (_bdc ._fa .Ser )-1);
_gc :=BarChartSeries {_ag };_gc .InitializeDefaults ();_gc .Properties ().SetSolidFill (_cdca );return _gc ;};func (_cgee ValueAxis )SetPosition (p _ac .ST_AxPos ){_cgee ._abeb .AxPos =_ac .NewCT_AxPos ();_cgee ._abeb .AxPos .ValAttr =p ;};func MakeValueAxis (x *_ac .CT_ValAx )ValueAxis {return ValueAxis {x }};


// InitializeDefaults the bar chart to its defaults
func (_ec BarChart )InitializeDefaults (){_ec .SetDirection (_ac .ST_BarDirCol )};

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_ebg *_ac .CT_BubbleSer };

// Order returns the order of the series
func (_fag SurfaceChartSeries )Order ()uint32 {return _fag ._ebgc .Order .ValAttr };

// Properties returns the bar chart series shape properties.
func (_fba PieChartSeries )Properties ()_ff .ShapeProperties {if _fba ._feb .SpPr ==nil {_fba ._feb .SpPr =_ad .NewCT_ShapeProperties ();};return _ff .MakeShapeProperties (_fba ._feb .SpPr );};

// CategoryAxis returns the category data source.
func (_adf AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _adf ._ade .Cat ==nil {_adf ._ade .Cat =_ac .NewCT_AxDataSource ();};return MakeAxisDataSource (_adf ._ade .Cat );};

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_addg *_ac .CT_SurfaceChart ;};func MakeTitle (x *_ac .CT_Title )Title {return Title {x }};

// X returns the inner wrapped XML type.
func (_cbcb Surface3DChart )X ()*_ac .CT_Surface3DChart {return _cbcb ._edb };

// X returns the inner wrapped XML type.
func (_ffac DoughnutChart )X ()*_ac .CT_DoughnutChart {return _ffac ._dad };

// X returns the inner wrapped XML type.
func (_fb BarChart )X ()*_ac .CT_BarChart {return _fb ._fa };type LineChart struct{chartBase ;_bee *_ac .CT_LineChart ;};

// Order returns the order of the series
func (_ccdc ScatterChartSeries )Order ()uint32 {return _ccdc ._dbe .Order .ValAttr };

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_adc *_ac .CT_RadarSer };func (_fbd DateAxis )Properties ()_ff .ShapeProperties {if _fbd ._eafc .SpPr ==nil {_fbd ._eafc .SpPr =_ad .NewCT_ShapeProperties ();};return _ff .MakeShapeProperties (_fbd ._eafc .SpPr );};

// X returns the inner wrapped XML type.
func (_bea Title )X ()*_ac .CT_Title {return _bea ._dbeb };

// SetText sets the series text.
func (_aca PieChartSeries )SetText (s string ){_aca ._feb .Tx =_ac .NewCT_SerTx ();_aca ._feb .Tx .Choice .V =&s ;};

// InitializeDefaults the bar chart to its defaults
func (_abd RadarChart )InitializeDefaults (){_abd ._age .RadarStyle .ValAttr =_ac .ST_RadarStyleMarker };

// AddSeries adds a default series to a Bubble chart.
func (_fcf BubbleChart )AddSeries ()BubbleChartSeries {_fce :=_fcf .nextColor (len (_fcf ._aaa .Ser ));_aae :=_ac .NewCT_BubbleSer ();_fcf ._aaa .Ser =append (_fcf ._aaa .Ser ,_aae );_aae .Idx .ValAttr =uint32 (len (_fcf ._aaa .Ser )-1);_aae .Order .ValAttr =uint32 (len (_fcf ._aaa .Ser )-1);
_eed :=BubbleChartSeries {_aae };_eed .InitializeDefaults ();_eed .Properties ().SetSolidFill (_fce );return _eed ;};

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_fa *_ac .CT_BarChart ;};

// AddSeries adds a default series to an Radar chart.
func (_dggb RadarChart )AddSeries ()RadarChartSeries {_dgfe :=_dggb .nextColor (len (_dggb ._age .Ser ));_aed :=_ac .NewCT_RadarSer ();_dggb ._age .Ser =append (_dggb ._age .Ser ,_aed );_aed .Idx .ValAttr =uint32 (len (_dggb ._age .Ser )-1);_aed .Order .ValAttr =uint32 (len (_dggb ._age .Ser )-1);
_ecdb :=RadarChartSeries {_aed };_ecdb .InitializeDefaults ();_ecdb .Properties ().SetSolidFill (_dgfe );return _ecdb ;};

// AddSeries adds a default series to a line chart.
func (_dbbg LineChart )AddSeries ()LineChartSeries {_gfg :=_dbbg .nextColor (len (_dbbg ._bee .Ser ));_ggef :=_ac .NewCT_LineSer ();_dbbg ._bee .Ser =append (_dbbg ._bee .Ser ,_ggef );_ggef .Idx .ValAttr =uint32 (len (_dbbg ._bee .Ser )-1);_ggef .Order .ValAttr =uint32 (len (_dbbg ._bee .Ser )-1);
_dbf :=LineChartSeries {_ggef };_dbf .InitializeDefaults ();_dbf .Properties ().LineProperties ().SetSolidFill (_gfg );return _dbf ;};

// Values returns the bubble size data source.
func (_ebd BubbleChartSeries )BubbleSizes ()NumberDataSource {if _ebd ._ebg .BubbleSize ==nil {_ebd ._ebg .BubbleSize =_ac .NewCT_NumDataSource ();};return MakeNumberDataSource (_ebd ._ebg .BubbleSize );};

// CategoryAxis returns the category data source.
func (_gab BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gab ._ebg .XVal ==nil {_gab ._ebg .XVal =_ac .NewCT_AxDataSource ();};return MakeAxisDataSource (_gab ._ebg .XVal );};

// SetText sets the series text.
func (_gcb BarChartSeries )SetText (s string ){_gcb ._fbf .Tx =_ac .NewCT_SerTx ();_gcb ._fbf .Tx .Choice .V =&s ;};

// Marker returns the marker properties.
func (_cbgc LineChartSeries )Marker ()Marker {if _cbgc ._geb .Marker ==nil {_cbgc ._geb .Marker =_ac .NewCT_Marker ();};return MakeMarker (_cbgc ._geb .Marker );};

// X returns the inner wrapped XML type.
func (_bad SeriesAxis )X ()*_ac .CT_SerAx {return _bad ._dae };func MakeDataLabels (x *_ac .CT_DLbls )DataLabels {return DataLabels {x }};

// AddCategoryAxis adds a category axis.
func (_fcee Chart )AddCategoryAxis ()CategoryAxis {_ceb :=_ac .NewCT_CatAx ();if _fcee ._dfe .Chart .PlotArea .CChoice ==nil {_fcee ._dfe .Chart .PlotArea .CChoice =_ac .NewCT_PlotAreaChoice1 ();};_ceb .AxId =_ac .NewCT_UnsignedInt ();_ceb .AxId .ValAttr =0x7FFFFFFF&_ab .Uint32 ();
_fcee ._dfe .Chart .PlotArea .CChoice .CatAx =append (_fcee ._dfe .Chart .PlotArea .CChoice .CatAx ,_ceb );_ceb .Auto =_ac .NewCT_Boolean ();_ceb .Auto .ValAttr =_c .Bool (true );_ceb .Delete =_ac .NewCT_Boolean ();_ceb .Delete .ValAttr =_c .Bool (false );
_dgga :=MakeCategoryAxis (_ceb );_dgga .InitializeDefaults ();return _dgga ;};

// Index returns the index of the series
func (_fefa LineChartSeries )Index ()uint32 {return _fefa ._geb .Idx .ValAttr };var NullAxis Axis =nullAxis (0);func (_bgb Legend )SetPosition (p _ac .ST_LegendPos ){if p ==_ac .ST_LegendPosUnset {_bgb ._eeb .LegendPos =nil ;}else {_bgb ._eeb .LegendPos =_ac .NewCT_LegendPos ();
_bgb ._eeb .LegendPos .ValAttr =p ;};};

// AddSeries adds a default series to a bar chart.
func (_fe Bar3DChart )AddSeries ()BarChartSeries {_cdc :=_fe .nextColor (len (_fe ._cb .Ser ));_bg :=_ac .NewCT_BarSer ();_fe ._cb .Ser =append (_fe ._cb .Ser ,_bg );_bg .Idx .ValAttr =uint32 (len (_fe ._cb .Ser )-1);_bg .Order .ValAttr =uint32 (len (_fe ._cb .Ser )-1);
_eb :=BarChartSeries {_bg };_eb .InitializeDefaults ();_eb .Properties ().SetSolidFill (_cdc );return _eb ;};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_ggf CategoryAxisDataSource )SetLabelReference (s string ){_ggf ._dgc .Choice =_ac .NewCT_AxDataSourceChoice ();_ggf ._dgc .Choice .StrRef =_ac .NewCT_StrRef ();_ggf ._dgc .Choice .StrRef .F =s ;};func (_fcfa DataLabels )SetShowValue (b bool ){_fcfa .ensureChoice ();
_fcfa ._ddb .Choice .ShowVal =_ac .NewCT_Boolean ();_fcfa ._ddb .Choice .ShowVal .ValAttr =_c .Bool (b );};func (_cbc NumberDataSource )ensureChoice (){if _cbc ._gcg .Choice ==nil {_cbc ._gcg .Choice =_ac .NewCT_NumDataSourceChoice ();};};func (_adb DateAxis )SetTickLabelPosition (p _ac .ST_TickLblPos ){if p ==_ac .ST_TickLblPosUnset {_adb ._eafc .TickLblPos =nil ;
}else {_adb ._eafc .TickLblPos =_ac .NewCT_TickLblPos ();_adb ._eafc .TickLblPos .ValAttr =p ;};};func MakeNumberDataSource (x *_ac .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};

// Properties returns the Bubble chart series shape properties.
func (_dd BubbleChartSeries )Properties ()_ff .ShapeProperties {if _dd ._ebg .SpPr ==nil {_dd ._ebg .SpPr =_ad .NewCT_ShapeProperties ();};return _ff .MakeShapeProperties (_dd ._ebg .SpPr );};func (_eae SeriesAxis )InitializeDefaults (){};

// AddSeries adds a default series to an area chart.
func (_ggg AreaChart )AddSeries ()AreaChartSeries {_fcd :=_ggg .nextColor (len (_ggg ._b .Ser ));_bd :=_ac .NewCT_AreaSer ();_ggg ._b .Ser =append (_ggg ._b .Ser ,_bd );_bd .Idx .ValAttr =uint32 (len (_ggg ._b .Ser )-1);_bd .Order .ValAttr =uint32 (len (_ggg ._b .Ser )-1);
_e :=AreaChartSeries {_bd };_e .InitializeDefaults ();_e .Properties ().SetSolidFill (_fcd );return _e ;};func (_agb CategoryAxis )SetCrosses (axis Axis ){_agb ._cad .Choice =_ac .NewEG_AxSharedChoice ();_agb ._cad .Choice .Crosses =_ac .NewCT_Crosses ();
_agb ._cad .Choice .Crosses .ValAttr =_ac .ST_CrossesAutoZero ;_agb ._cad .CrossAx .ValAttr =axis .AxisID ();};func (_bb CategoryAxis )InitializeDefaults (){_bb .SetPosition (_ac .ST_AxPosB );_bb .SetMajorTickMark (_ac .ST_TickMarkOut );_bb .SetMinorTickMark (_ac .ST_TickMarkIn );
_bb .SetTickLabelPosition (_ac .ST_TickLblPosNextTo );_bb .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_f .LightGray );_bb .Properties ().LineProperties ().SetSolidFill (_f .Black );};

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_d *_ac .CT_Area3DChart ;};

// InitializeDefaults initializes an area series to the default values.
func (_fg AreaChartSeries )InitializeDefaults (){};

// InitializeDefaults the Stock chart to its defaults
func (_abae StockChart )InitializeDefaults (){_abae ._gaf .HiLowLines =_ac .NewCT_ChartLines ();_abae ._gaf .UpDownBars =_ac .NewCT_UpDownBars ();_abae ._gaf .UpDownBars .GapWidth =_ac .NewCT_GapAmount ();_abae ._gaf .UpDownBars .GapWidth .ValAttr =&_ac .ST_GapAmount {};
_abae ._gaf .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_c .Uint16 (150);_abae ._gaf .UpDownBars .UpBars =_ac .NewCT_UpDownBar ();_abae ._gaf .UpDownBars .DownBars =_ac .NewCT_UpDownBar ();};func (_dag CategoryAxis )AxisID ()uint32 {return _dag ._cad .AxId .ValAttr };


// InitializeDefaults initializes an Pie series to the default values.
func (_gdc PieChartSeries )InitializeDefaults (){};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_bcee DoughnutChart )SetHoleSize (pct uint8 ){if _bcee ._dad .HoleSize ==nil {_bcee ._dad .HoleSize =_ac .NewCT_HoleSize ();};if _bcee ._dad .HoleSize .ValAttr ==nil {_bcee ._dad .HoleSize .ValAttr =&_ac .ST_HoleSize {};};_bcee ._dad .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;
};

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_age *_ac .CT_RadarChart ;};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_acff Chart )SetDisplayBlanksAs (v _ac .ST_DispBlanksAs ){_acff ._dfe .Chart .DispBlanksAs =_ac .NewCT_DispBlanksAs ();_acff ._dfe .Chart .DispBlanksAs .ValAttr =v ;};func (_acdd ValueAxis )Properties ()_ff .ShapeProperties {if _acdd ._abeb .SpPr ==nil {_acdd ._abeb .SpPr =_ad .NewCT_ShapeProperties ();
};return _ff .MakeShapeProperties (_acdd ._abeb .SpPr );};

// Order returns the order of the series
func (_gfd LineChartSeries )Order ()uint32 {return _gfd ._geb .Order .ValAttr };

// AddSeries adds a default series to an area chart.
func (_ggc Area3DChart )AddSeries ()AreaChartSeries {_fc :=_ggc .nextColor (len (_ggc ._d .Ser ));_ce :=_ac .NewCT_AreaSer ();_ggc ._d .Ser =append (_ggc ._d .Ser ,_ce );_ce .Idx .ValAttr =uint32 (len (_ggc ._d .Ser )-1);_ce .Order .ValAttr =uint32 (len (_ggc ._d .Ser )-1);
_af :=AreaChartSeries {_ce };_af .InitializeDefaults ();_af .Properties ().SetSolidFill (_fc );return _af ;};

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_cb *_ac .CT_Bar3DChart ;};

// AddBarChart adds a new bar chart to a chart.
func (_cdd Chart )AddBarChart ()BarChart {_dec :=_ac .NewCT_PlotAreaChoice ();_cdd ._dfe .Chart .PlotArea .Choice =append (_cdd ._dfe .Chart .PlotArea .Choice ,_dec );_dec .BarChart =_ac .NewCT_BarChart ();_dec .BarChart .Grouping =_ac .NewCT_BarGrouping ();
_dec .BarChart .Grouping .ValAttr =_ac .ST_BarGroupingStandard ;_dgg :=BarChart {_fa :_dec .BarChart };_dgg .InitializeDefaults ();return _dgg ;};

// InitializeDefaults the bar chart to its defaults
func (_cga DoughnutChart )InitializeDefaults (){_cga ._dad .VaryColors =_ac .NewCT_Boolean ();_cga ._dad .VaryColors .ValAttr =_c .Bool (true );_cga ._dad .HoleSize =_ac .NewCT_HoleSize ();_cga ._dad .HoleSize .ValAttr =&_ac .ST_HoleSize {};_cga ._dad .HoleSize .ValAttr .ST_HoleSizeUByte =_c .Uint8 (50);
};

// X returns the inner wrapped XML type.
func (_cea StockChart )X ()*_ac .CT_StockChart {return _cea ._gaf };

// X returns the inner wrapped XML type.
func (_gda LineChart )X ()*_ac .CT_LineChart {return _gda ._bee };

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};func (_egc Marker )Properties ()_ff .ShapeProperties {if _egc ._ddga .SpPr ==nil {_egc ._ddga .SpPr =_ad .NewCT_ShapeProperties ();};return _ff .MakeShapeProperties (_egc ._ddga .SpPr );};

// SetValues sets values directly on a source.
func (_dbd NumberDataSource )SetValues (v []float64 ){_dbd .ensureChoice ();_dbd ._gcg .Choice .NumRef =nil ;_dbd ._gcg .Choice .NumLit =_ac .NewCT_NumData ();_dbd ._gcg .Choice .NumLit .PtCount =_ac .NewCT_UnsignedInt ();_dbd ._gcg .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));
for _geg ,_dge :=range v {_dbd ._gcg .Choice .NumLit .Pt =append (_dbd ._gcg .Choice .NumLit .Pt ,&_ac .CT_NumVal {IdxAttr :uint32 (_geg ),V :_ae .Sprintf ("\u0025\u0067",_dge )});};};

// InitializeDefaults initializes an Radar series to the default values.
func (_fgfb RadarChartSeries )InitializeDefaults (){};

// AddLine3DChart adds a new 3D line chart to a chart.
func (_gag Chart )AddLine3DChart ()Line3DChart {_gf (_gag ._dfe .Chart );_faf :=_ac .NewCT_PlotAreaChoice ();_gag ._dfe .Chart .PlotArea .Choice =append (_gag ._dfe .Chart .PlotArea .Choice ,_faf );_faf .Line3DChart =_ac .NewCT_Line3DChart ();_faf .Line3DChart .Grouping =_ac .NewCT_Grouping ();
_faf .Line3DChart .Grouping .ValAttr =_ac .ST_GroupingStandard ;return Line3DChart {_fafc :_faf .Line3DChart };};func (_efg NumberDataSource )SetReference (s string ){_efg .ensureChoice ();if _efg ._gcg .Choice .NumRef ==nil {_efg ._gcg .Choice .NumRef =_ac .NewCT_NumRef ();
};_efg ._gcg .Choice .NumRef .F =s ;};

// SetIndex sets the index of the series
func (_gdaa ScatterChartSeries )SetIndex (idx uint32 ){_gdaa ._dbe .Idx .ValAttr =idx };

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_dad *_ac .CT_DoughnutChart ;};

// AddAxis adds an axis to a Surface chart.
func (_bde SurfaceChart )AddAxis (axis Axis ){_gfb :=_ac .NewCT_UnsignedInt ();_gfb .ValAttr =axis .AxisID ();_bde ._addg .AxId =append (_bde ._addg .AxId ,_gfb );};

// Properties returns the line chart series shape properties.
func (_baf ScatterChartSeries )Properties ()_ff .ShapeProperties {if _baf ._dbe .SpPr ==nil {_baf ._dbe .SpPr =_ad .NewCT_ShapeProperties ();};return _ff .MakeShapeProperties (_baf ._dbe .SpPr );};func (_dagd DataLabels )SetShowPercent (b bool ){_dagd .ensureChoice ();
_dagd ._ddb .Choice .ShowPercent =_ac .NewCT_Boolean ();_dagd ._ddb .Choice .ShowPercent .ValAttr =_c .Bool (b );};

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_feb *_ac .CT_PieSer };func (_ecd DataLabels )SetShowSeriesName (b bool ){_ecd .ensureChoice ();_ecd ._ddb .Choice .ShowSerName =_ac .NewCT_Boolean ();_ecd ._ddb .Choice .ShowSerName .ValAttr =_c .Bool (b );};

// RemoveLegend removes the legend if the chart has one.
func (_ggcf Chart )RemoveLegend (){_ggcf ._dfe .Chart .Legend =nil };

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_bgef Chart )AddDoughnutChart ()DoughnutChart {_cc :=_ac .NewCT_PlotAreaChoice ();_bgef ._dfe .Chart .PlotArea .Choice =append (_bgef ._dfe .Chart .PlotArea .Choice ,_cc );_cc .DoughnutChart =_ac .NewCT_DoughnutChart ();_eaf :=DoughnutChart {_dad :_cc .DoughnutChart };
_eaf .InitializeDefaults ();return _eaf ;};type DataLabels struct{_ddb *_ac .CT_DLbls };func _gf (_cae *_ac .CT_Chart ){_cae .View3D =_ac .NewCT_View3D ();_cae .View3D .RotX =_ac .NewCT_RotX ();_cae .View3D .RotX .ValAttr =_c .Int8 (15);_cae .View3D .RotY =_ac .NewCT_RotY ();
_cae .View3D .RotY .ValAttr =_c .Uint16 (20);_cae .View3D .RAngAx =_ac .NewCT_Boolean ();_cae .View3D .RAngAx .ValAttr =_c .Bool (false );_cae .Floor =_ac .NewCT_Surface ();_cae .Floor .Thickness =_ac .NewCT_Thickness ();_cae .Floor .Thickness .ValAttr .Uint32 =_c .Uint32 (0);
_cae .SideWall =_ac .NewCT_Surface ();_cae .SideWall .Thickness =_ac .NewCT_Thickness ();_cae .SideWall .Thickness .ValAttr .Uint32 =_c .Uint32 (0);_cae .BackWall =_ac .NewCT_Surface ();_cae .BackWall .Thickness =_ac .NewCT_Thickness ();_cae .BackWall .Thickness .ValAttr .Uint32 =_c .Uint32 (0);
};

// X returns the inner wrapped XML type.
func (_agc Marker )X ()*_ac .CT_Marker {return _agc ._ddga };

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_geb *_ac .CT_LineSer };func (_add Legend )SetOverlay (b bool ){_add ._eeb .Overlay =_ac .NewCT_Boolean ();_add ._eeb .Overlay .ValAttr =_c .Bool (b );};

// SetText sets the series text.
func (_aba BubbleChartSeries )SetText (s string ){_aba ._ebg .Tx =_ac .NewCT_SerTx ();_aba ._ebg .Tx .Choice .V =&s ;};

// Values returns the value data source.
func (_ebb RadarChartSeries )Values ()NumberDataSource {if _ebb ._adc .Val ==nil {_ebb ._adc .Val =_ac .NewCT_NumDataSource ();};return MakeNumberDataSource (_ebb ._adc .Val );};

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_eca Chart )AddLegend ()Legend {_eca ._dfe .Chart .Legend =_ac .NewCT_Legend ();_eedc :=MakeLegend (_eca ._dfe .Chart .Legend );_eedc .InitializeDefaults ();return _eedc ;};

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_fffb *_ac .CT_OfPieChart ;};type ValueAxis struct{_abeb *_ac .CT_ValAx };

// X returns the inner wrapped XML type.
func (_dc BarChartSeries )X ()*_ac .CT_BarSer {return _dc ._fbf };

// X returns the inner wrapped XML type.
func (_bega Legend )X ()*_ac .CT_Legend {return _bega ._eeb };func (_ebde CategoryAxis )Properties ()_ff .ShapeProperties {if _ebde ._cad .SpPr ==nil {_ebde ._cad .SpPr =_ad .NewCT_ShapeProperties ();};return _ff .MakeShapeProperties (_ebde ._cad .SpPr );
};

// X returns the inner wrapped XML type.
func (_bgg SurfaceChartSeries )X ()*_ac .CT_SurfaceSer {return _bgg ._ebgc };func (_egf SeriesAxis )SetCrosses (axis Axis ){_egf ._dae .CrossAx .ValAttr =axis .AxisID ()};

// AddPieChart adds a new pie chart to a chart.
func (_eff Chart )AddPieChart ()PieChart {_gfe :=_ac .NewCT_PlotAreaChoice ();_eff ._dfe .Chart .PlotArea .Choice =append (_eff ._dfe .Chart .PlotArea .Choice ,_gfe );_gfe .PieChart =_ac .NewCT_PieChart ();_ebc :=PieChart {_dff :_gfe .PieChart };_ebc .InitializeDefaults ();
return _ebc ;};

// Properties returns the line chart series shape properties.
func (_abc LineChartSeries )Properties ()_ff .ShapeProperties {if _abc ._geb .SpPr ==nil {_abc ._geb .SpPr =_ad .NewCT_ShapeProperties ();};return _ff .MakeShapeProperties (_abc ._geb .SpPr );};

// Values returns the value data source.
func (_beg BubbleChartSeries )Values ()NumberDataSource {if _beg ._ebg .YVal ==nil {_beg ._ebg .YVal =_ac .NewCT_NumDataSource ();};return MakeNumberDataSource (_beg ._ebg .YVal );};

// X returns the inner wrapped XML type.
func (_eab BubbleChart )X ()*_ac .CT_BubbleChart {return _eab ._aaa };

// AddBubbleChart adds a new bubble chart.
func (_ffaf Chart )AddBubbleChart ()BubbleChart {_abfd :=_ac .NewCT_PlotAreaChoice ();_ffaf ._dfe .Chart .PlotArea .Choice =append (_ffaf ._dfe .Chart .PlotArea .Choice ,_abfd );_abfd .BubbleChart =_ac .NewCT_BubbleChart ();_fgf :=BubbleChart {_aaa :_abfd .BubbleChart };
_fgf .InitializeDefaults ();return _fgf ;};

// SetOrder sets the order of the series
func (_eadb LineChartSeries )SetOrder (idx uint32 ){_eadb ._geb .Order .ValAttr =idx };

// InitializeDefaults the bar chart to its defaults
func (_fdc Pie3DChart )InitializeDefaults (){_fdc ._ffc .VaryColors =_ac .NewCT_Boolean ();_fdc ._ffc .VaryColors .ValAttr =_c .Bool (true );};

// Index returns the index of the series
func (_ccf ScatterChartSeries )Index ()uint32 {return _ccf ._dbe .Idx .ValAttr };func MakeSeriesAxis (x *_ac .CT_SerAx )SeriesAxis {return SeriesAxis {x }};type SeriesAxis struct{_dae *_ac .CT_SerAx };

// X returns the inner wrapped XML type.
func (_dgce Pie3DChart )X ()*_ac .CT_Pie3DChart {return _dgce ._ffc };func (_aeec DataLabels )SetShowCategoryName (b bool ){_aeec .ensureChoice ();_aeec ._ddb .Choice .ShowCatName =_ac .NewCT_Boolean ();_aeec ._ddb .Choice .ShowCatName .ValAttr =_c .Bool (b );
};type Legend struct{_eeb *_ac .CT_Legend };

// InitializeDefaults the bar chart to its defaults
func (_cbcf PieOfPieChart )InitializeDefaults (){_cbcf ._fffb .VaryColors =_ac .NewCT_Boolean ();_cbcf ._fffb .VaryColors .ValAttr =_c .Bool (true );_cbcf .SetType (_ac .ST_OfPieTypePie );_cbcf ._fffb .SecondPieSize =_ac .NewCT_SecondPieSize ();_cbcf ._fffb .SecondPieSize .ValAttr =&_ac .ST_SecondPieSize {};
_cbcf ._fffb .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_c .Uint16 (75);_bfa :=_ac .NewCT_ChartLines ();_bfa .SpPr =_ad .NewCT_ShapeProperties ();_cdb :=_ff .MakeShapeProperties (_bfa .SpPr );_cdb .LineProperties ().SetSolidFill (_f .Auto );_cbcf ._fffb .SerLines =append (_cbcf ._fffb .SerLines ,_bfa );
};type Title struct{_dbeb *_ac .CT_Title };func (_edc DateAxis )SetMajorTickMark (m _ac .ST_TickMark ){if m ==_ac .ST_TickMarkUnset {_edc ._eafc .MajorTickMark =nil ;}else {_edc ._eafc .MajorTickMark =_ac .NewCT_TickMark ();_edc ._eafc .MajorTickMark .ValAttr =m ;
};};

// AddSeries adds a default series to an Pie chart.
func (_fcec PieChart )AddSeries ()PieChartSeries {_feg :=_ac .NewCT_PieSer ();_fcec ._dff .Ser =append (_fcec ._dff .Ser ,_feg );_feg .Idx .ValAttr =uint32 (len (_fcec ._dff .Ser )-1);_feg .Order .ValAttr =uint32 (len (_fcec ._dff .Ser )-1);_eafa :=PieChartSeries {_feg };
_eafa .InitializeDefaults ();return _eafa ;};

// AddSeries adds a default series to a Surface chart.
func (_cfa Surface3DChart )AddSeries ()SurfaceChartSeries {_afga :=_cfa .nextColor (len (_cfa ._edb .Ser ));_deca :=_ac .NewCT_SurfaceSer ();_cfa ._edb .Ser =append (_cfa ._edb .Ser ,_deca );_deca .Idx .ValAttr =uint32 (len (_cfa ._edb .Ser )-1);_deca .Order .ValAttr =uint32 (len (_cfa ._edb .Ser )-1);
_gfc :=SurfaceChartSeries {_deca };_gfc .InitializeDefaults ();_gfc .Properties ().LineProperties ().SetSolidFill (_afga );return _gfc ;};

// Index returns the index of the series
func (_bfae SurfaceChartSeries )Index ()uint32 {return _bfae ._ebgc .Idx .ValAttr };

// AddSeries adds a default series to a line chart.
func (_ceg Line3DChart )AddSeries ()LineChartSeries {_cbe :=_ceg .nextColor (len (_ceg ._fafc .Ser ));_bba :=_ac .NewCT_LineSer ();_ceg ._fafc .Ser =append (_ceg ._fafc .Ser ,_bba );_bba .Idx .ValAttr =uint32 (len (_ceg ._fafc .Ser )-1);_bba .Order .ValAttr =uint32 (len (_ceg ._fafc .Ser )-1);
_fcb :=LineChartSeries {_bba };_fcb .InitializeDefaults ();_fcb .Properties ().LineProperties ().SetSolidFill (_cbe );_fcb .Properties ().SetSolidFill (_cbe );return _fcb ;};func (_bbf DateAxis )SetPosition (p _ac .ST_AxPos ){_bbf ._eafc .AxPos =_ac .NewCT_AxPos ();
_bbf ._eafc .AxPos .ValAttr =p ;};

// X returns the inner wrapped XML type.
func (_bbd Line3DChart )X ()*_ac .CT_Line3DChart {return _bbd ._fafc };

// X returns the inner wrapped XML type.
func (_bege ScatterChart )X ()*_ac .CT_ScatterChart {return _bege ._fae };

// Values returns the value data source.
func (_de BarChartSeries )Values ()NumberDataSource {if _de ._fbf .Val ==nil {_de ._fbf .Val =_ac .NewCT_NumDataSource ();};return MakeNumberDataSource (_de ._fbf .Val );};

// CategoryAxis returns the category data source.
func (_dfea RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dfea ._adc .Cat ==nil {_dfea ._adc .Cat =_ac .NewCT_AxDataSource ();};return MakeAxisDataSource (_dfea ._adc .Cat );};

// AddSeries adds a default series to an Pie3D chart.
func (_bfg Pie3DChart )AddSeries ()PieChartSeries {_gcd :=_ac .NewCT_PieSer ();_bfg ._ffc .Ser =append (_bfg ._ffc .Ser ,_gcd );_gcd .Idx .ValAttr =uint32 (len (_bfg ._ffc .Ser )-1);_gcd .Order .ValAttr =uint32 (len (_bfg ._ffc .Ser )-1);_afb :=PieChartSeries {_gcd };
_afb .InitializeDefaults ();return _afb ;};

// SetText sets the series text.
func (_ee AreaChartSeries )SetText (s string ){_ee ._ade .Tx =_ac .NewCT_SerTx ();_ee ._ade .Tx .Choice .V =&s ;};

// AddAxis adds an axis to a Scatter chart.
func (_cgda ScatterChart )AddAxis (axis Axis ){_ggea :=_ac .NewCT_UnsignedInt ();_ggea .ValAttr =axis .AxisID ();_cgda ._fae .AxId =append (_cgda ._fae .AxId ,_ggea );};

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_b *_ac .CT_AreaChart ;};

// X returns the inner wrapped XML type.
func (_acbf GridLines )X ()*_ac .CT_ChartLines {return _acbf ._ge };func (_fbac Title )RunProperties ()_ff .RunProperties {if _fbac ._dbeb .Tx ==nil {_fbac .SetText ("");};if _fbac ._dbeb .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_fbac ._dbeb .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_ad .NewCT_TextCharacterProperties ();
};return _ff .MakeRunProperties (_fbac ._dbeb .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );};func MakeMarker (x *_ac .CT_Marker )Marker {return Marker {x }};

// X returns the inner wrapped XML type.
func (_cdcd LineChartSeries )X ()*_ac .CT_LineSer {return _cdcd ._geb };

// SetText sets the series text
func (_gegb ScatterChartSeries )SetText (s string ){_gegb ._dbe .Tx =_ac .NewCT_SerTx ();_gegb ._dbe .Tx .Choice .V =&s ;};

// InitializeDefaults the bar chart to its defaults
func (_bc Bar3DChart )InitializeDefaults (){_bc .SetDirection (_ac .ST_BarDirCol )};func (_edcb SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _edcb ._ebgc .Cat ==nil {_edcb ._ebgc .Cat =_ac .NewCT_AxDataSource ();};return MakeAxisDataSource (_edcb ._ebgc .Cat );
};

// SetDirection changes the direction of the bar chart (bar or column).
func (_ga BarChart )SetDirection (d _ac .ST_BarDir ){_ga ._fa .BarDir .ValAttr =d };

// AddLineChart adds a new line chart to a chart.
func (_fbe Chart )AddLineChart ()LineChart {_ef :=_ac .NewCT_PlotAreaChoice ();_fbe ._dfe .Chart .PlotArea .Choice =append (_fbe ._dfe .Chart .PlotArea .Choice ,_ef );_ef .LineChart =_ac .NewCT_LineChart ();_ef .LineChart .Grouping =_ac .NewCT_Grouping ();
_ef .LineChart .Grouping .ValAttr =_ac .ST_GroupingStandard ;return LineChart {_bee :_ef .LineChart };};

// Properties returns the line chart series shape properties.
func (_dfef SurfaceChartSeries )Properties ()_ff .ShapeProperties {if _dfef ._ebgc .SpPr ==nil {_dfef ._ebgc .SpPr =_ad .NewCT_ShapeProperties ();};return _ff .MakeShapeProperties (_dfef ._ebgc .SpPr );};

// X returns the inner wrapped XML type.
func (_gbdd RadarChart )X ()*_ac .CT_RadarChart {return _gbdd ._age };

// X returns the inner wrapped XML type.
func (_agf PieChart )X ()*_ac .CT_PieChart {return _agf ._dff };

// SetText sets the series text.
func (_cce RadarChartSeries )SetText (s string ){_cce ._adc .Tx =_ac .NewCT_SerTx ();_cce ._adc .Tx .Choice .V =&s ;};

// InitializeDefaults the bar chart to its defaults
func (_degb PieChart )InitializeDefaults (){_degb ._dff .VaryColors =_ac .NewCT_Boolean ();_degb ._dff .VaryColors .ValAttr =_c .Bool (true );};func (_edf CategoryAxis )SetMajorTickMark (m _ac .ST_TickMark ){if m ==_ac .ST_TickMarkUnset {_edf ._cad .MajorTickMark =nil ;
}else {_edf ._cad .MajorTickMark =_ac .NewCT_TickMark ();_edf ._cad .MajorTickMark .ValAttr =m ;};};func (_bdf CategoryAxis )SetTickLabelPosition (p _ac .ST_TickLblPos ){if p ==_ac .ST_TickLblPosUnset {_bdf ._cad .TickLblPos =nil ;}else {_bdf ._cad .TickLblPos =_ac .NewCT_TickLblPos ();
_bdf ._cad .TickLblPos .ValAttr =p ;};};

// AddAxis adds an axis to a Surface chart.
func (_eebcc Surface3DChart )AddAxis (axis Axis ){_ebce :=_ac .NewCT_UnsignedInt ();_ebce .ValAttr =axis .AxisID ();_eebcc ._edb .AxId =append (_eebcc ._edb .AxId ,_ebce );};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_dff *_ac .CT_PieChart ;};func (_deed SurfaceChartSeries )InitializeDefaults (){_deed .Properties ().LineProperties ().SetWidth (1*_g .Point );_deed .Properties ().LineProperties ().SetSolidFill (_f .Black );_deed .Properties ().LineProperties ().SetJoin (_ff .LineJoinRound );
};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_aaa *_ac .CT_BubbleChart ;};func (_deg DataLabels )SetShowLegendKey (b bool ){_deg .ensureChoice ();_deg ._ddb .Choice .ShowLegendKey =_ac .NewCT_Boolean ();_deg ._ddb .Choice .ShowLegendKey .ValAttr =_c .Bool (b );};


// SetDirection changes the direction of the bar chart (bar or column).
func (_be Bar3DChart )SetDirection (d _ac .ST_BarDir ){_be ._cb .BarDir .ValAttr =d };

// InitializeDefaults the Bubble chart to its defaults
func (_gd BubbleChart )InitializeDefaults (){};func MakeLegend (l *_ac .CT_Legend )Legend {return Legend {l }};

// AddArea3DChart adds a new area chart to a chart.
func (_eg Chart )AddArea3DChart ()Area3DChart {_gf (_eg ._dfe .Chart );_cf :=_ac .NewCT_PlotAreaChoice ();_eg ._dfe .Chart .PlotArea .Choice =append (_eg ._dfe .Chart .PlotArea .Choice ,_cf );_cf .Area3DChart =_ac .NewCT_Area3DChart ();_edd :=Area3DChart {_d :_cf .Area3DChart };
_edd .InitializeDefaults ();return _edd ;};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_gaf *_ac .CT_StockChart ;};

// AddScatterChart adds a scatter (X/Y) chart.
func (_gge Chart )AddScatterChart ()ScatterChart {_fde :=_ac .NewCT_PlotAreaChoice ();_gge ._dfe .Chart .PlotArea .Choice =append (_gge ._dfe .Chart .PlotArea .Choice ,_fde );_fde .ScatterChart =_ac .NewCT_ScatterChart ();_dca :=ScatterChart {_fae :_fde .ScatterChart };
_dca .InitializeDefaults ();return _dca ;};func (_dcf GridLines )Properties ()_ff .ShapeProperties {if _dcf ._ge .SpPr ==nil {_dcf ._ge .SpPr =_ad .NewCT_ShapeProperties ();};return _ff .MakeShapeProperties (_dcf ._ge .SpPr );};

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_dgc *_ac .CT_AxDataSource };

// Values returns the value data source.
func (_dg AreaChartSeries )Values ()NumberDataSource {if _dg ._ade .Val ==nil {_dg ._ade .Val =_ac .NewCT_NumDataSource ();};return MakeNumberDataSource (_dg ._ade .Val );};

// SetType sets the type the secone pie to either pie or bar
func (_edce PieOfPieChart )SetType (t _ac .ST_OfPieType ){_edce ._fffb .OfPieType .ValAttr =t };

// SetText sets the series text
func (_cdcad SurfaceChartSeries )SetText (s string ){_cdcad ._ebgc .Tx =_ac .NewCT_SerTx ();_cdcad ._ebgc .Tx .Choice .V =&s ;};type chartBase struct{};

// Properties returns the bar chart series shape properties.
func (_ggcb BarChartSeries )Properties ()_ff .ShapeProperties {if _ggcb ._fbf .SpPr ==nil {_ggcb ._fbf .SpPr =_ad .NewCT_ShapeProperties ();};return _ff .MakeShapeProperties (_ggcb ._fbf .SpPr );};

// AddSurfaceChart adds a new surface chart to a chart.
func (_aag Chart )AddSurfaceChart ()SurfaceChart {_ffd :=_ac .NewCT_PlotAreaChoice ();_aag ._dfe .Chart .PlotArea .Choice =append (_aag ._dfe .Chart .PlotArea .Choice ,_ffd );_ffd .SurfaceChart =_ac .NewCT_SurfaceChart ();_gf (_aag ._dfe .Chart );_aag ._dfe .Chart .View3D .RotX .ValAttr =_c .Int8 (90);
_aag ._dfe .Chart .View3D .RotY .ValAttr =_c .Uint16 (0);_aag ._dfe .Chart .View3D .Perspective =_ac .NewCT_Perspective ();_aag ._dfe .Chart .View3D .Perspective .ValAttr =_c .Uint8 (0);_edg :=SurfaceChart {_addg :_ffd .SurfaceChart };_edg .InitializeDefaults ();
return _edg ;};

// AddRadarChart adds a new radar chart to a chart.
func (_ddg Chart )AddRadarChart ()RadarChart {_eea :=_ac .NewCT_PlotAreaChoice ();_ddg ._dfe .Chart .PlotArea .Choice =append (_ddg ._dfe .Chart .PlotArea .Choice ,_eea );_eea .RadarChart =_ac .NewCT_RadarChart ();_bbg :=RadarChart {_age :_eea .RadarChart };
_bbg .InitializeDefaults ();return _bbg ;};type NumberDataSource struct{_gcg *_ac .CT_NumDataSource };func (_cdff ScatterChartSeries )Values ()NumberDataSource {if _cdff ._dbe .YVal ==nil {_cdff ._dbe .YVal =_ac .NewCT_NumDataSource ();};return MakeNumberDataSource (_cdff ._dbe .YVal );
};

// X returns the inner wrapped XML type.
func (_cgea PieOfPieChart )X ()*_ac .CT_OfPieChart {return _cgea ._fffb };func (_bgf Marker )SetSymbol (s _ac .ST_MarkerStyle ){if s ==_ac .ST_MarkerStyleUnset {_bgf ._ddga .Symbol =nil ;}else {_bgf ._ddga .Symbol =_ac .NewCT_MarkerStyle ();_bgf ._ddga .Symbol .ValAttr =s ;
};};func (_ed AreaChart )AddAxis (axis Axis ){_cec :=_ac .NewCT_UnsignedInt ();_cec .ValAttr =axis .AxisID ();_ed ._b .AxId =append (_ed ._b .AxId ,_cec );};func (_cfde ScatterChartSeries )InitializeDefaults (){_cfde .Properties ().LineProperties ().SetNoFill ();
_cfde .Marker ().SetSymbol (_ac .ST_MarkerStyleAuto );_cfde .Labels ().SetShowLegendKey (false );_cfde .Labels ().SetShowValue (true );_cfde .Labels ().SetShowPercent (false );_cfde .Labels ().SetShowCategoryName (false );_cfde .Labels ().SetShowSeriesName (false );
_cfde .Labels ().SetShowLeaderLines (false );};type nullAxis byte ;

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_bdb CategoryAxisDataSource )SetNumberReference (s string ){_bdb ._dgc .Choice =_ac .NewCT_AxDataSourceChoice ();_bdb ._dgc .Choice .NumRef =_ac .NewCT_NumRef ();_bdb ._dgc .Choice .NumRef .F =s ;};

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_ac .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};

// Chart is a generic chart.
type Chart struct{_dfe *_ac .ChartSpace };

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_bfc NumberDataSource )CreateEmptyNumberCache (){_bfc .ensureChoice ();if _bfc ._gcg .Choice .NumRef ==nil {_bfc ._gcg .Choice .NumRef =_ac .NewCT_NumRef ();};_bfc ._gcg .Choice .NumLit =nil ;_bfc ._gcg .Choice .NumRef .NumCache =_ac .NewCT_NumData ();
_bfc ._gcg .Choice .NumRef .NumCache .PtCount =_ac .NewCT_UnsignedInt ();_bfc ._gcg .Choice .NumRef .NumCache .PtCount .ValAttr =0;};

// AddSeries adds a default series to an Pie chart.
func (_ffad PieOfPieChart )AddSeries ()PieChartSeries {_egd :=_ac .NewCT_PieSer ();_ffad ._fffb .Ser =append (_ffad ._fffb .Ser ,_egd );_egd .Idx .ValAttr =uint32 (len (_ffad ._fffb .Ser )-1);_egd .Order .ValAttr =uint32 (len (_ffad ._fffb .Ser )-1);_afc :=PieChartSeries {_egd };
_afc .InitializeDefaults ();return _afc ;};

// X returns the inner wrapped XML type.
func (_eedd ScatterChartSeries )X ()*_ac .CT_ScatterSer {return _eedd ._dbe };

// RemoveTitle removes any existing title from the chart.
func (_fffg Chart )RemoveTitle (){_fffg ._dfe .Chart .Title =nil ;_fffg ._dfe .Chart .AutoTitleDeleted =_ac .NewCT_Boolean ();_fffg ._dfe .Chart .AutoTitleDeleted .ValAttr =_c .Bool (true );};func (_fab Marker )SetSize (sz uint8 ){_fab ._ddga .Size =_ac .NewCT_MarkerSize ();
_fab ._ddga .Size .ValAttr =&sz ;};func (_gca DateAxis )MajorGridLines ()GridLines {if _gca ._eafc .MajorGridlines ==nil {_gca ._eafc .MajorGridlines =_ac .NewCT_ChartLines ();};return GridLines {_gca ._eafc .MajorGridlines };};

// AddStockChart adds a new stock chart.
func (_bbc Chart )AddStockChart ()StockChart {_dfee :=_ac .NewCT_PlotAreaChoice ();_bbc ._dfe .Chart .PlotArea .Choice =append (_bbc ._dfe .Chart .PlotArea .Choice ,_dfee );_dfee .StockChart =_ac .NewCT_StockChart ();_cbg :=StockChart {_gaf :_dfee .StockChart };
_cbg .InitializeDefaults ();return _cbg ;};

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_ced PieChartSeries )SetExplosion (v uint32 ){_ced ._feb .Explosion =_ac .NewCT_UnsignedInt ();_ced ._feb .Explosion .ValAttr =v ;};func (_gabe ValueAxis )SetMajorTickMark (m _ac .ST_TickMark ){if m ==_ac .ST_TickMarkUnset {_gabe ._abeb .MajorTickMark =nil ;
}else {_gabe ._abeb .MajorTickMark =_ac .NewCT_TickMark ();_gabe ._abeb .MajorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_gg Area3DChart )X ()*_ac .CT_Area3DChart {return _gg ._d };

// AddAxis adds an axis to a line chart.
func (_abac LineChart )AddAxis (axis Axis ){_dbfe :=_ac .NewCT_UnsignedInt ();_dbfe .ValAttr =axis .AxisID ();_abac ._bee .AxId =append (_abac ._bee .AxId ,_dbfe );};

// AddSeries adds a default series to a Scatter chart.
func (_ffdg ScatterChart )AddSeries ()ScatterChartSeries {_bag :=_ffdg .nextColor (len (_ffdg ._fae .Ser ));_gabd :=_ac .NewCT_ScatterSer ();_ffdg ._fae .Ser =append (_ffdg ._fae .Ser ,_gabd );_gabd .Idx .ValAttr =uint32 (len (_ffdg ._fae .Ser )-1);_gabd .Order .ValAttr =uint32 (len (_ffdg ._fae .Ser )-1);
_caf :=ScatterChartSeries {_gabd };_caf .InitializeDefaults ();_caf .Marker ().Properties ().LineProperties ().SetSolidFill (_bag );_caf .Marker ().Properties ().SetSolidFill (_bag );return _caf ;};

// AddTitle sets a new title on the chart.
func (_cdf Chart )AddTitle ()Title {_cdf ._dfe .Chart .Title =_ac .NewCT_Title ();_cdf ._dfe .Chart .Title .Overlay =_ac .NewCT_Boolean ();_cdf ._dfe .Chart .Title .Overlay .ValAttr =_c .Bool (false );_cdf ._dfe .Chart .AutoTitleDeleted =_ac .NewCT_Boolean ();
_cdf ._dfe .Chart .AutoTitleDeleted .ValAttr =_c .Bool (false );_fgd :=MakeTitle (_cdf ._dfe .Chart .Title );_fgd .InitializeDefaults ();return _fgd ;};func (_cgeee ValueAxis )SetTickLabelPosition (p _ac .ST_TickLblPos ){if p ==_ac .ST_TickLblPosUnset {_cgeee ._abeb .TickLblPos =nil ;
}else {_cgeee ._abeb .TickLblPos =_ac .NewCT_TickLblPos ();_cgeee ._abeb .TickLblPos .ValAttr =p ;};};func (_cde nullAxis )AxisID ()uint32 {return 0};func (_bdbd SurfaceChart )InitializeDefaults (){_bdbd ._addg .Wireframe =_ac .NewCT_Boolean ();_bdbd ._addg .Wireframe .ValAttr =_c .Bool (false );
_bdbd ._addg .BandFmts =_ac .NewCT_BandFmts ();for _fda :=0;_fda < 15;_fda ++{_aaga :=_ac .NewCT_BandFmt ();_aaga .Idx .ValAttr =uint32 (_fda );_aaga .SpPr =_ad .NewCT_ShapeProperties ();_ccc :=_ff .MakeShapeProperties (_aaga .SpPr );_ccc .SetSolidFill (_bdbd .nextColor (_fda ));
_bdbd ._addg .BandFmts .BandFmt =append (_bdbd ._addg .BandFmts .BandFmt ,_aaga );};};

// Properties returns the chart's shape properties.
func (_dbb Chart )Properties ()_ff .ShapeProperties {if _dbb ._dfe .SpPr ==nil {_dbb ._dfe .SpPr =_ad .NewCT_ShapeProperties ();};return _ff .MakeShapeProperties (_dbb ._dfe .SpPr );};

// SetIndex sets the index of the series
func (_ccd LineChartSeries )SetIndex (idx uint32 ){_ccd ._geb .Idx .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_dcg DateAxis )X ()*_ac .CT_DateAx {return _dcg ._eafc };func (_gfdg ScatterChart )InitializeDefaults (){_gfdg ._fae .ScatterStyle .ValAttr =_ac .ST_ScatterStyleMarker ;};

// Properties returns the bar chart series shape properties.
func (_efff RadarChartSeries )Properties ()_ff .ShapeProperties {if _efff ._adc .SpPr ==nil {_efff ._adc .SpPr =_ad .NewCT_ShapeProperties ();};return _ff .MakeShapeProperties (_efff ._adc .SpPr );};

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_dbe *_ac .CT_ScatterSer };func (_ecc chartBase )nextColor (_faff int )_f .Color {return _fcdb [_faff %len (_fcdb )]};

// X returns the inner wrapped XML type.
func (_fgfg ValueAxis )X ()*_ac .CT_ValAx {return _fgfg ._abeb };type SurfaceChartSeries struct{_ebgc *_ac .CT_SurfaceSer };

// InitializeDefaults the bar chart to its defaults
func (_aa AreaChart )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_ea Bar3DChart )X ()*_ac .CT_Bar3DChart {return _ea ._cb };func MakeCategoryAxis (x *_ac .CT_CatAx )CategoryAxis {return CategoryAxis {x }};func (_ca BarChart )AddAxis (axis Axis ){_ead :=_ac .NewCT_UnsignedInt ();_ead .ValAttr =axis .AxisID ();_ca ._fa .AxId =append (_ca ._fa .AxId ,_ead );
};

// X returns the inner wrapped XML type.
func (_fcad RadarChartSeries )X ()*_ac .CT_RadarSer {return _fcad ._adc };func (_fec ValueAxis )AxisID ()uint32 {return _fec ._abeb .AxId .ValAttr };func (_acd LineChartSeries )InitializeDefaults (){_acd .Properties ().LineProperties ().SetWidth (1*_g .Point );
_acd .Properties ().LineProperties ().SetSolidFill (_f .Black );_acd .Properties ().LineProperties ().SetJoin (_ff .LineJoinRound );_acd .Marker ().SetSymbol (_ac .ST_MarkerStyleNone );_acd .Labels ().SetShowLegendKey (false );_acd .Labels ().SetShowValue (false );
_acd .Labels ().SetShowPercent (false );_acd .Labels ().SetShowCategoryName (false );_acd .Labels ().SetShowSeriesName (false );_acd .Labels ().SetShowLeaderLines (false );};

// X returns the inner wrapped XML type.
func (_fca PieChartSeries )X ()*_ac .CT_PieSer {return _fca ._feb };func (_fefd Surface3DChart )InitializeDefaults (){_fefd ._edb .Wireframe =_ac .NewCT_Boolean ();_fefd ._edb .Wireframe .ValAttr =_c .Bool (false );_fefd ._edb .BandFmts =_ac .NewCT_BandFmts ();
for _aac :=0;_aac < 15;_aac ++{_beec :=_ac .NewCT_BandFmt ();_beec .Idx .ValAttr =uint32 (_aac );_beec .SpPr =_ad .NewCT_ShapeProperties ();_gcgf :=_ff .MakeShapeProperties (_beec .SpPr );_gcgf .SetSolidFill (_fefd .nextColor (_aac ));_fefd ._edb .BandFmts .BandFmt =append (_fefd ._edb .BandFmts .BandFmt ,_beec );
};};func (_cd Area3DChart )AddAxis (axis Axis ){_df :=_ac .NewCT_UnsignedInt ();_df .ValAttr =axis .AxisID ();_cd ._d .AxId =append (_cd ._d .AxId ,_df );};

// SetOrder sets the order of the series
func (_abe SurfaceChartSeries )SetOrder (idx uint32 ){_abe ._ebgc .Order .ValAttr =idx };type Line3DChart struct{chartBase ;_fafc *_ac .CT_Line3DChart ;};

// AddDateAxis adds a value axis to the chart.
func (_cfg Chart )AddDateAxis ()DateAxis {_def :=_ac .NewCT_DateAx ();if _cfg ._dfe .Chart .PlotArea .CChoice ==nil {_cfg ._dfe .Chart .PlotArea .CChoice =_ac .NewCT_PlotAreaChoice1 ();};_def .AxId =_ac .NewCT_UnsignedInt ();_def .AxId .ValAttr =0x7FFFFFFF&_ab .Uint32 ();
_cfg ._dfe .Chart .PlotArea .CChoice .DateAx =append (_cfg ._dfe .Chart .PlotArea .CChoice .DateAx ,_def );_def .Delete =_ac .NewCT_Boolean ();_def .Delete .ValAttr =_c .Bool (false );_def .Scaling =_ac .NewCT_Scaling ();_def .Scaling .Orientation =_ac .NewCT_Orientation ();
_def .Scaling .Orientation .ValAttr =_ac .ST_OrientationMinMax ;_def .Choice =&_ac .EG_AxSharedChoice {};_def .Choice .Crosses =_ac .NewCT_Crosses ();_def .Choice .Crosses .ValAttr =_ac .ST_CrossesAutoZero ;_aea :=DateAxis {_def };_aea .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_f .LightGray );
_aea .SetMajorTickMark (_ac .ST_TickMarkOut );_aea .SetMinorTickMark (_ac .ST_TickMarkIn );_aea .SetTickLabelPosition (_ac .ST_TickLblPosNextTo );_aea .Properties ().LineProperties ().SetSolidFill (_f .Black );_aea .SetPosition (_ac .ST_AxPosL );return _aea ;
};

// AddAxis adds an axis to a line chart.
func (_fefe Line3DChart )AddAxis (axis Axis ){_aec :=_ac .NewCT_UnsignedInt ();_aec .ValAttr =axis .AxisID ();_fefe ._fafc .AxId =append (_fefe ._fafc .AxId ,_aec );};func (_dgff LineChartSeries )SetSmooth (b bool ){_dgff ._geb .Smooth =_ac .NewCT_Boolean ();
_dgff ._geb .Smooth .ValAttr =&b ;};func (_faa DataLabels )ensureChoice (){if _faa ._ddb .Choice ==nil {_faa ._ddb .Choice =_ac .NewCT_DLblsChoice ();};};func (_fdd DateAxis )SetCrosses (axis Axis ){_fdd ._eafc .CrossAx .ValAttr =axis .AxisID ()};

// AddSeries adds a default series to a Surface chart.
func (_gee SurfaceChart )AddSeries ()SurfaceChartSeries {_ged :=_gee .nextColor (len (_gee ._addg .Ser ));_ddbe :=_ac .NewCT_SurfaceSer ();_gee ._addg .Ser =append (_gee ._addg .Ser ,_ddbe );_ddbe .Idx .ValAttr =uint32 (len (_gee ._addg .Ser )-1);_ddbe .Order .ValAttr =uint32 (len (_gee ._addg .Ser )-1);
_gebb :=SurfaceChartSeries {_ddbe };_gebb .InitializeDefaults ();_gebb .Properties ().LineProperties ().SetSolidFill (_ged );return _gebb ;};

// InitializeDefaults initializes a bar chart series to the default values.
func (_da BarChartSeries )InitializeDefaults (){};func (_fgfba SurfaceChartSeries )Values ()NumberDataSource {if _fgfba ._ebgc .Val ==nil {_fgfba ._ebgc .Val =_ac .NewCT_NumDataSource ();};_edced :=MakeNumberDataSource (_fgfba ._ebgc .Val );_edced .CreateEmptyNumberCache ();
return _edced ;};

// SetValues is used to set the source data to a set of values.
func (_acfd CategoryAxisDataSource )SetValues (v []string ){_acfd ._dgc .Choice =_ac .NewCT_AxDataSourceChoice ();_acfd ._dgc .Choice .StrLit =_ac .NewCT_StrData ();_acfd ._dgc .Choice .StrLit .PtCount =_ac .NewCT_UnsignedInt ();_acfd ._dgc .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));
for _bdd ,_ede :=range v {_acfd ._dgc .Choice .StrLit .Pt =append (_acfd ._dgc .Choice .StrLit .Pt ,&_ac .CT_StrVal {IdxAttr :uint32 (_bdd ),V :_ede });};};type CategoryAxis struct{_cad *_ac .CT_CatAx };func (_gad LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gad ._geb .Cat ==nil {_gad ._geb .Cat =_ac .NewCT_AxDataSource ();
};return MakeAxisDataSource (_gad ._geb .Cat );};func (_gdcc ValueAxis )SetMinorTickMark (m _ac .ST_TickMark ){if m ==_ac .ST_TickMarkUnset {_gdcc ._abeb .MinorTickMark =nil ;}else {_gdcc ._abeb .MinorTickMark =_ac .NewCT_TickMark ();_gdcc ._abeb .MinorTickMark .ValAttr =m ;
};};func (_agca ScatterChartSeries )SetSmooth (b bool ){_agca ._dbe .Smooth =_ac .NewCT_Boolean ();_agca ._dbe .Smooth .ValAttr =&b ;};func (_bce CategoryAxis )SetPosition (p _ac .ST_AxPos ){_bce ._cad .AxPos =_ac .NewCT_AxPos ();_bce ._cad .AxPos .ValAttr =p ;
};type DateAxis struct{_eafc *_ac .CT_DateAx };func (_bfd DateAxis )AxisID ()uint32 {return _bfd ._eafc .AxId .ValAttr };

// SetOrder sets the order of the series
func (_dgd ScatterChartSeries )SetOrder (idx uint32 ){_dgd ._dbe .Order .ValAttr =idx };

// Labels returns the data label properties.
func (_faag ScatterChartSeries )Labels ()DataLabels {if _faag ._dbe .DLbls ==nil {_faag ._dbe .DLbls =_ac .NewCT_DLbls ();};return MakeDataLabels (_faag ._dbe .DLbls );};func (_bda Title )InitializeDefaults (){_bda .SetText ("\u0054\u0069\u0074l\u0065");
_bda .RunProperties ().SetSize (16*_g .Point );_bda .RunProperties ().SetSolidFill (_f .Black );_bda .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_bda .RunProperties ().SetBold (false );};func (_dce DataLabels )SetShowLeaderLines (b bool ){_dce .ensureChoice ();
_dce ._ddb .Choice .ShowLeaderLines =_ac .NewCT_Boolean ();_dce ._ddb .Choice .ShowLeaderLines .ValAttr =_c .Bool (b );};func (_deb Legend )InitializeDefaults (){_deb .SetPosition (_ac .ST_LegendPosR );_deb .SetOverlay (false );_deb .Properties ().SetNoFill ();
_deb .Properties ().LineProperties ().SetNoFill ();};func (_ba BubbleChart )AddAxis (axis Axis ){_afg :=_ac .NewCT_UnsignedInt ();_afg .ValAttr =axis .AxisID ();_ba ._aaa .AxId =append (_ba ._aaa .AxId ,_afg );};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_acb Chart )AddPieOfPieChart ()PieOfPieChart {_gcc :=_ac .NewCT_PlotAreaChoice ();_acb ._dfe .Chart .PlotArea .Choice =append (_acb ._dfe .Chart .PlotArea .Choice ,_gcc );_gcc .OfPieChart =_ac .NewCT_OfPieChart ();_dcd :=PieOfPieChart {_fffb :_gcc .OfPieChart };
_dcd .InitializeDefaults ();return _dcd ;};

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_gbd Chart )AddBar3DChart ()Bar3DChart {_gf (_gbd ._dfe .Chart );_cadc :=_ac .NewCT_PlotAreaChoice ();_gbd ._dfe .Chart .PlotArea .Choice =append (_gbd ._dfe .Chart .PlotArea .Choice ,_cadc );_cadc .Bar3DChart =_ac .NewCT_Bar3DChart ();_cadc .Bar3DChart .Grouping =_ac .NewCT_BarGrouping ();
_cadc .Bar3DChart .Grouping .ValAttr =_ac .ST_BarGroupingStandard ;_gga :=Bar3DChart {_cb :_cadc .Bar3DChart };_gga .InitializeDefaults ();return _gga ;};

// Marker returns the marker properties.
func (_bcg ScatterChartSeries )Marker ()Marker {if _bcg ._dbe .Marker ==nil {_bcg ._dbe .Marker =_ac .NewCT_Marker ();};return MakeMarker (_bcg ._dbe .Marker );};func (_acf CategoryAxis )SetMinorTickMark (m _ac .ST_TickMark ){if m ==_ac .ST_TickMarkUnset {_acf ._cad .MinorTickMark =nil ;
}else {_acf ._cad .MinorTickMark =_ac .NewCT_TickMark ();_acf ._cad .MinorTickMark .ValAttr =m ;};};func (_gde Chart )AddSeriesAxis ()SeriesAxis {_dfc :=_ac .NewCT_SerAx ();if _gde ._dfe .Chart .PlotArea .CChoice ==nil {_gde ._dfe .Chart .PlotArea .CChoice =_ac .NewCT_PlotAreaChoice1 ();
};_dfc .AxId =_ac .NewCT_UnsignedInt ();_dfc .AxId .ValAttr =0x7FFFFFFF&_ab .Uint32 ();_gde ._dfe .Chart .PlotArea .CChoice .SerAx =append (_gde ._dfe .Chart .PlotArea .CChoice .SerAx ,_dfc );_dfc .Delete =_ac .NewCT_Boolean ();_dfc .Delete .ValAttr =_c .Bool (false );
_bgea :=MakeSeriesAxis (_dfc );_bgea .InitializeDefaults ();return _bgea ;};

// AddValueAxis adds a value axis to the chart.
func (_dee Chart )AddValueAxis ()ValueAxis {_ffdb :=_ac .NewCT_ValAx ();if _dee ._dfe .Chart .PlotArea .CChoice ==nil {_dee ._dfe .Chart .PlotArea .CChoice =_ac .NewCT_PlotAreaChoice1 ();};_ffdb .AxId =_ac .NewCT_UnsignedInt ();_ffdb .AxId .ValAttr =0x7FFFFFFF&_ab .Uint32 ();
_dee ._dfe .Chart .PlotArea .CChoice .ValAx =append (_dee ._dfe .Chart .PlotArea .CChoice .ValAx ,_ffdb );_ffdb .Delete =_ac .NewCT_Boolean ();_ffdb .Delete .ValAttr =_c .Bool (false );_ffdb .Scaling =_ac .NewCT_Scaling ();_ffdb .Scaling .Orientation =_ac .NewCT_Orientation ();
_ffdb .Scaling .Orientation .ValAttr =_ac .ST_OrientationMinMax ;_ffdb .Choice =&_ac .EG_AxSharedChoice {};_ffdb .Choice .Crosses =_ac .NewCT_Crosses ();_ffdb .Choice .Crosses .ValAttr =_ac .ST_CrossesAutoZero ;_ffdb .CrossBetween =_ac .NewCT_CrossBetween ();
_ffdb .CrossBetween .ValAttr =_ac .ST_CrossBetweenBetween ;_fef :=MakeValueAxis (_ffdb );_fef .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_f .LightGray );_fef .SetMajorTickMark (_ac .ST_TickMarkOut );_fef .SetMinorTickMark (_ac .ST_TickMarkIn );
_fef .SetTickLabelPosition (_ac .ST_TickLblPosNextTo );_fef .Properties ().LineProperties ().SetSolidFill (_f .Black );_fef .SetPosition (_ac .ST_AxPosL );return _fef ;};

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_dgb Chart )AddSurface3DChart ()Surface3DChart {_gdb :=_ac .NewCT_PlotAreaChoice ();_dgb ._dfe .Chart .PlotArea .Choice =append (_dgb ._dfe .Chart .PlotArea .Choice ,_gdb );_gdb .Surface3DChart =_ac .NewCT_Surface3DChart ();_gf (_dgb ._dfe .Chart );
_db :=Surface3DChart {_edb :_gdb .Surface3DChart };_db .InitializeDefaults ();return _db ;};

// X returns the inner wrapped XML type.
func (_cg Chart )X ()*_ac .ChartSpace {return _cg ._dfe };type Marker struct{_ddga *_ac .CT_Marker };type GridLines struct{_ge *_ac .CT_ChartLines };

// Properties returns the bar chart series shape properties.
func (_gb AreaChartSeries )Properties ()_ff .ShapeProperties {if _gb ._ade .SpPr ==nil {_gb ._ade .SpPr =_ad .NewCT_ShapeProperties ();};return _ff .MakeShapeProperties (_gb ._ade .SpPr );};func (_cbcd ValueAxis )SetCrosses (axis Axis ){_cbcd ._abeb .CrossAx .ValAttr =axis .AxisID ()};
func (_gba Bar3DChart )AddAxis (axis Axis ){_cbb :=_ac .NewCT_UnsignedInt ();_cbb .ValAttr =axis .AxisID ();_gba ._cb .AxId =append (_gba ._cb .AxId ,_cbb );};

// SetText sets the series text
func (_ggaa LineChartSeries )SetText (s string ){_ggaa ._geb .Tx =_ac .NewCT_SerTx ();_ggaa ._geb .Tx .Choice .V =&s ;};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_ffc *_ac .CT_Pie3DChart ;};

// CategoryAxis returns the category data source.
func (_fgc BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _fgc ._fbf .Cat ==nil {_fgc ._fbf .Cat =_ac .NewCT_AxDataSource ();};return MakeAxisDataSource (_fgc ._fbf .Cat );};

// X returns the inner wrapped XML type.
func (_bge BubbleChartSeries )X ()*_ac .CT_BubbleSer {return _bge ._ebg };type ScatterChart struct{chartBase ;_fae *_ac .CT_ScatterChart ;};func (_eabc LineChartSeries )Values ()NumberDataSource {if _eabc ._geb .Val ==nil {_eabc ._geb .Val =_ac .NewCT_NumDataSource ();
};return MakeNumberDataSource (_eabc ._geb .Val );};func (_adg DataLabels )SetPosition (p _ac .ST_DLblPos ){_adg .ensureChoice ();_adg ._ddb .Choice .DLblPos =_ac .NewCT_DLblPos ();_adg ._ddb .Choice .DLblPos .ValAttr =p ;};

// Values returns the value data source.
func (_gae PieChartSeries )Values ()NumberDataSource {if _gae ._feb .Val ==nil {_gae ._feb .Val =_ac .NewCT_NumDataSource ();};return MakeNumberDataSource (_gae ._feb .Val );};func (_cge DateAxis )SetMinorTickMark (m _ac .ST_TickMark ){if m ==_ac .ST_TickMarkUnset {_cge ._eafc .MinorTickMark =nil ;
}else {_cge ._eafc .MinorTickMark =_ac .NewCT_TickMark ();_cge ._eafc .MinorTickMark .ValAttr =m ;};};

// InitializeDefaults the bar chart to its defaults
func (_abf Area3DChart )InitializeDefaults (){};func (_ecf SeriesAxis )AxisID ()uint32 {return _ecf ._dae .AxId .ValAttr };func (_ceda StockChart )AddAxis (axis Axis ){_eddf :=_ac .NewCT_UnsignedInt ();_eddf .ValAttr =axis .AxisID ();_ceda ._gaf .AxId =append (_ceda ._gaf .AxId ,_eddf );
};func MakeChart (x *_ac .ChartSpace )Chart {return Chart {x }};

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_edb *_ac .CT_Surface3DChart ;};

// CategoryAxis returns the category data source.
func (_fgde PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _fgde ._feb .Cat ==nil {_fgde ._feb .Cat =_ac .NewCT_AxDataSource ();};return MakeAxisDataSource (_fgde ._feb .Cat );};func (_gef RadarChart )AddAxis (axis Axis ){_edda :=_ac .NewCT_UnsignedInt ();
_edda .ValAttr =axis .AxisID ();_gef ._age .AxId =append (_gef ._age .AxId ,_edda );};

// AddSeries adds a default series to an Doughnut chart.
func (_acfg DoughnutChart )AddSeries ()PieChartSeries {_afe :=_ac .NewCT_PieSer ();_acfg ._dad .Ser =append (_acfg ._dad .Ser ,_afe );_afe .Idx .ValAttr =uint32 (len (_acfg ._dad .Ser )-1);_afe .Order .ValAttr =uint32 (len (_acfg ._dad .Ser )-1);_eeae :=PieChartSeries {_afe };
_eeae .InitializeDefaults ();return _eeae ;};func (_cdeb CategoryAxis )MajorGridLines ()GridLines {if _cdeb ._cad .MajorGridlines ==nil {_cdeb ._cad .MajorGridlines =_ac .NewCT_ChartLines ();};return GridLines {_cdeb ._cad .MajorGridlines };};func (_fee Title )SetText (s string ){if _fee ._dbeb .Tx ==nil {_fee ._dbeb .Tx =_ac .NewCT_Tx ();
};if _fee ._dbeb .Tx .Choice .Rich ==nil {_fee ._dbeb .Tx .Choice .Rich =_ad .NewCT_TextBody ();};var _dgdb *_ad .CT_TextParagraph ;if len (_fee ._dbeb .Tx .Choice .Rich .P )==0{_dgdb =_ad .NewCT_TextParagraph ();_fee ._dbeb .Tx .Choice .Rich .P =[]*_ad .CT_TextParagraph {_dgdb };
}else {_dgdb =_fee ._dbeb .Tx .Choice .Rich .P [0];};var _bfe *_ad .EG_TextRun ;if len (_dgdb .EG_TextRun )==0{_bfe =_ad .NewEG_TextRun ();_dgdb .EG_TextRun =[]*_ad .EG_TextRun {_bfe };}else {_bfe =_dgdb .EG_TextRun [0];};if _bfe .R ==nil {_bfe .R =_ad .NewCT_RegularTextRun ();
};_bfe .R .T =s ;};

// SetIndex sets the index of the series
func (_bdeb SurfaceChartSeries )SetIndex (idx uint32 ){_bdeb ._ebgc .Idx .ValAttr =idx };func (_daf ValueAxis )MajorGridLines ()GridLines {if _daf ._abeb .MajorGridlines ==nil {_daf ._abeb .MajorGridlines =_ac .NewCT_ChartLines ();};return GridLines {_daf ._abeb .MajorGridlines };
};var _fcdb =[]_f .Color {_f .RGB (0x33,0x66,0xcc),_f .RGB (0xDC,0x39,0x12),_f .RGB (0xFF,0x99,0x00),_f .RGB (0x10,0x96,0x18),_f .RGB (0x99,0x00,0x99),_f .RGB (0x3B,0x3E,0xAC),_f .RGB (0x00,0x99,0xC6),_f .RGB (0xDD,0x44,0x77),_f .RGB (0x66,0xAA,0x00),_f .RGB (0xB8,0x2E,0x2E),_f .RGB (0x31,0x63,0x95),_f .RGB (0x99,0x44,0x99),_f .RGB (0x22,0xAA,0x99),_f .RGB (0xAA,0xAA,0x11),_f .RGB (0x66,0x33,0xCC),_f .RGB (0xE6,0x73,0x00),_f .RGB (0x8B,0x07,0x07),_f .RGB (0x32,0x92,0x62),_f .RGB (0x55,0x74,0xA6),_f .RGB (0x3B,0x3E,0xAC)};
func (_cfd Legend )Properties ()_ff .ShapeProperties {if _cfd ._eeb .SpPr ==nil {_cfd ._eeb .SpPr =_ad .NewCT_ShapeProperties ();};return _ff .MakeShapeProperties (_cfd ._eeb .SpPr );};

// AddAreaChart adds a new area chart to a chart.
func (_dgf Chart )AddAreaChart ()AreaChart {_fcda :=_ac .NewCT_PlotAreaChoice ();_dgf ._dfe .Chart .PlotArea .Choice =append (_dgf ._dfe .Chart .PlotArea .Choice ,_fcda );_fcda .AreaChart =_ac .NewCT_AreaChart ();_fff :=AreaChart {_b :_fcda .AreaChart };
_fff .InitializeDefaults ();return _fff ;};

// X returns the inner wrapped XML type.
func (_aee AreaChart )X ()*_ac .CT_AreaChart {return _aee ._b };func (_cgg ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _cgg ._dbe .XVal ==nil {_cgg ._dbe .XVal =_ac .NewCT_AxDataSource ();};return MakeAxisDataSource (_cgg ._dbe .XVal );
};

// AddPie3DChart adds a new pie chart to a chart.
func (_ffa Chart )AddPie3DChart ()Pie3DChart {_gf (_ffa ._dfe .Chart );_cgd :=_ac .NewCT_PlotAreaChoice ();_ffa ._dfe .Chart .PlotArea .Choice =append (_ffa ._dfe .Chart .PlotArea .Choice ,_cgd );_cgd .Pie3DChart =_ac .NewCT_Pie3DChart ();_aaad :=Pie3DChart {_ffc :_cgd .Pie3DChart };
_aaad .InitializeDefaults ();return _aaad ;};

// AddSeries adds a default series to a Stock chart.
func (_dagc StockChart )AddSeries ()LineChartSeries {_gagc :=_ac .NewCT_LineSer ();_dagc ._gaf .Ser =append (_dagc ._gaf .Ser ,_gagc );_gagc .Idx .ValAttr =uint32 (len (_dagc ._gaf .Ser )-1);_gagc .Order .ValAttr =uint32 (len (_dagc ._gaf .Ser )-1);_eebc :=LineChartSeries {_gagc };
_eebc .Values ().CreateEmptyNumberCache ();_eebc .Properties ().LineProperties ().SetNoFill ();return _eebc ;};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_ade *_ac .CT_AreaSer };

// X returns the inner wrapped XML type.
func (_fffbe SurfaceChart )X ()*_ac .CT_SurfaceChart {return _fffbe ._addg };

// X returns the inner wrapped XML type.
func (_fd AreaChartSeries )X ()*_ac .CT_AreaSer {return _fd ._ade };func (_cda Title )ParagraphProperties ()_ff .ParagraphProperties {if _cda ._dbeb .Tx ==nil {_cda .SetText ("");};if _cda ._dbeb .Tx .Choice .Rich .P [0].PPr ==nil {_cda ._dbeb .Tx .Choice .Rich .P [0].PPr =_ad .NewCT_TextParagraphProperties ();
};return _ff .MakeParagraphProperties (_cda ._dbeb .Tx .Choice .Rich .P [0].PPr );};

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_fbf *_ac .CT_BarSer };

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_bf BubbleChartSeries )InitializeDefaults (){};