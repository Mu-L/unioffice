//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_fd "fmt";_c "github.com/unidoc/unioffice/v2";_g "github.com/unidoc/unioffice/v2/color";_e "github.com/unidoc/unioffice/v2/drawing";_fg "github.com/unidoc/unioffice/v2/measurement";_fc "github.com/unidoc/unioffice/v2/schema/soo/dml";
_d "github.com/unidoc/unioffice/v2/schema/soo/dml/chart";_ff "math/rand";);type Line3DChart struct{chartBase ;_caa *_d .CT_Line3DChart ;};func (_fgc CategoryAxis )SetTickLabelPosition (p _d .ST_TickLblPos ){if p ==_d .ST_TickLblPosUnset {_fgc ._fea .TickLblPos =nil ;
}else {_fgc ._fea .TickLblPos =_d .NewCT_TickLblPos ();_fgc ._fea .TickLblPos .ValAttr =p ;};};

// SetText sets the series text.
func (_ad AreaChartSeries )SetText (s string ){_ad ._gdd .Tx =_d .NewCT_SerTx ();_ad ._gdd .Tx .SerTxChoice .V =&s ;};

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_cgb *_d .CT_OfPieChart ;};func (_ecee ScatterChart )InitializeDefaults (){_ecee ._fbg .ScatterStyle .ValAttr =_d .ST_ScatterStyleMarker ;};

// X returns the inner wrapped XML type.
func (_dg BarChartSeries )X ()*_d .CT_BarSer {return _dg ._gb };

// X returns the inner wrapped XML type.
func (_bcd PieChartSeries )X ()*_d .CT_PieSer {return _bcd ._gfdb };func (_bgfa SurfaceChartSeries )InitializeDefaults (){_bgfa .Properties ().LineProperties ().SetWidth (1*_fg .Point );_bgfa .Properties ().LineProperties ().SetSolidFill (_g .Black );_bgfa .Properties ().LineProperties ().SetJoin (_e .LineJoinRound );
};

// X returns the inner wrapped XML type.
func (_aede Marker )X ()*_d .CT_Marker {return _aede ._faef };func (_dfa Title )RunProperties ()_e .RunProperties {if _dfa ._ggc .Tx ==nil {_dfa .SetText ("");};if _dfa ._ggc .Tx .TxChoice .Rich .P [0].EG_TextRun [0].TextRunChoice .R .RPr ==nil {_dfa ._ggc .Tx .TxChoice .Rich .P [0].EG_TextRun [0].TextRunChoice .R .RPr =_fc .NewCT_TextCharacterProperties ();
};return _e .MakeRunProperties (_dfa ._ggc .Tx .TxChoice .Rich .P [0].EG_TextRun [0].TextRunChoice .R .RPr );};

// AddValueAxis adds a value axis to the chart.
func (_aaea Chart )AddValueAxis ()ValueAxis {_bdc :=_d .NewCT_ValAx ();if _aaea ._bfe .Chart .PlotArea .PlotAreaChoice1 ==nil {_aaea ._bfe .Chart .PlotArea .PlotAreaChoice1 =[]*_d .CT_PlotAreaChoice1 {};};_bdc .AxId =_d .NewCT_UnsignedInt ();_bdc .AxId .ValAttr =0x7FFFFFFF&_ff .Uint32 ();
_aaea ._bfe .Chart .PlotArea .PlotAreaChoice1 =append (_aaea ._bfe .Chart .PlotArea .PlotAreaChoice1 ,&_d .CT_PlotAreaChoice1 {ValAx :_bdc });_bdc .Delete =_d .NewCT_Boolean ();_bdc .Delete .ValAttr =_c .Bool (false );_bdc .Scaling =_d .NewCT_Scaling ();
_bdc .Scaling .Orientation =_d .NewCT_Orientation ();_bdc .Scaling .Orientation .ValAttr =_d .ST_OrientationMinMax ;_bdc .AxSharedChoice =&_d .EG_AxSharedChoice {};_bdc .AxSharedChoice .Crosses =_d .NewCT_Crosses ();_bdc .AxSharedChoice .Crosses .ValAttr =_d .ST_CrossesAutoZero ;
_bdc .CrossBetween =_d .NewCT_CrossBetween ();_bdc .CrossBetween .ValAttr =_d .ST_CrossBetweenBetween ;_ddf :=MakeValueAxis (_bdc );_ddf .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_g .LightGray );_ddf .SetMajorTickMark (_d .ST_TickMarkOut );
_ddf .SetMinorTickMark (_d .ST_TickMarkIn );_ddf .SetTickLabelPosition (_d .ST_TickLblPosNextTo );_ddf .Properties ().LineProperties ().SetSolidFill (_g .Black );_ddf .SetPosition (_d .ST_AxPosL );return _ddf ;};

// Properties returns the chart's shape properties.
func (_gc Chart )Properties ()_e .ShapeProperties {if _gc ._bfe .SpPr ==nil {_gc ._bfe .SpPr =_fc .NewCT_ShapeProperties ();};return _e .MakeShapeProperties (_gc ._bfe .SpPr );};

// AddSeries adds a default series to a line chart.
func (_bce Line3DChart )AddSeries ()LineChartSeries {_ebdd :=_bce .nextColor (len (_bce ._caa .Ser ));_aaf :=_d .NewCT_LineSer ();_bce ._caa .Ser =append (_bce ._caa .Ser ,_aaf );_aaf .Idx .ValAttr =uint32 (len (_bce ._caa .Ser )-1);_aaf .Order .ValAttr =uint32 (len (_bce ._caa .Ser )-1);
_aac :=LineChartSeries {_aaf };_aac .InitializeDefaults ();_aac .Properties ().LineProperties ().SetSolidFill (_ebdd );_aac .Properties ().SetSolidFill (_ebdd );return _aac ;};

// AddLineChart adds a new line chart to a chart.
func (_fgd Chart )AddLineChart ()LineChart {_ggd :=_d .NewCT_PlotAreaChoice ();_fgd ._bfe .Chart .PlotArea .PlotAreaChoice =append (_fgd ._bfe .Chart .PlotArea .PlotAreaChoice ,_ggd );_ggd .LineChart =_d .NewCT_LineChart ();_ggd .LineChart .Grouping =_d .NewCT_Grouping ();
_ggd .LineChart .Grouping .ValAttr =_d .ST_GroupingStandard ;return LineChart {_afd :_ggd .LineChart };};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_bbf *_d .CT_BubbleChart ;};

// X returns the inner wrapped XML type.
func (_edf Surface3DChart )X ()*_d .CT_Surface3DChart {return _edf ._gba };func (_ffc CategoryAxis )SetPosition (p _d .ST_AxPos ){_ffc ._fea .AxPos =_d .NewCT_AxPos ();_ffc ._fea .AxPos .ValAttr =p ;};

// X returns the inner wrapped XML type.
func (_cegf StockChart )X ()*_d .CT_StockChart {return _cegf ._bgd };

// RemoveTitle removes any existing title from the chart.
func (_bfa Chart )RemoveTitle (){_bfa ._bfe .Chart .Title =nil ;_bfa ._bfe .Chart .AutoTitleDeleted =_d .NewCT_Boolean ();_bfa ._bfe .Chart .AutoTitleDeleted .ValAttr =_c .Bool (true );};

// AddAreaChart adds a new area chart to a chart.
func (_cae Chart )AddAreaChart ()AreaChart {_affa :=_d .NewCT_PlotAreaChoice ();_cae ._bfe .Chart .PlotArea .PlotAreaChoice =append (_cae ._bfe .Chart .PlotArea .PlotAreaChoice ,_affa );_affa .AreaChart =_d .NewCT_AreaChart ();_dbb :=AreaChart {_dfe :_affa .AreaChart };
_dbb .InitializeDefaults ();return _dbb ;};

// X returns the inner wrapped XML type.
func (_acg Chart )X ()*_d .ChartSpace {return _acg ._bfe };

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_fdg *_d .CT_DoughnutChart ;};

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_ade Chart )AddDoughnutChart ()DoughnutChart {_ecg :=_d .NewCT_PlotAreaChoice ();_ade ._bfe .Chart .PlotArea .PlotAreaChoice =append (_ade ._bfe .Chart .PlotArea .PlotAreaChoice ,_ecg );_ecg .DoughnutChart =_d .NewCT_DoughnutChart ();_bgg :=DoughnutChart {_fdg :_ecg .DoughnutChart };
_bgg .InitializeDefaults ();return _bgg ;};func (_gdcf Legend )Properties ()_e .ShapeProperties {if _gdcf ._fafg .SpPr ==nil {_gdcf ._fafg .SpPr =_fc .NewCT_ShapeProperties ();};return _e .MakeShapeProperties (_gdcf ._fafg .SpPr );};

// Properties returns the bar chart series shape properties.
func (_ecd BarChartSeries )Properties ()_e .ShapeProperties {if _ecd ._gb .SpPr ==nil {_ecd ._gb .SpPr =_fc .NewCT_ShapeProperties ();};return _e .MakeShapeProperties (_ecd ._gb .SpPr );};

// Values returns the bubble size data source.
func (_agd BubbleChartSeries )BubbleSizes ()NumberDataSource {if _agd ._bca .BubbleSize ==nil {_agd ._bca .BubbleSize =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_agd ._bca .BubbleSize );};func (_fae DataLabels )SetShowCategoryName (b bool ){_fae .ensureChoice ();
_fae ._aedg .DLblsChoice .ShowCatName =_d .NewCT_Boolean ();_fae ._aedg .DLblsChoice .ShowCatName .ValAttr =_c .Bool (b );};func (_geg NumberDataSource )SetReference (s string ){_geg .ensureChoice ();if _geg ._fce .NumDataSourceChoice .NumRef ==nil {_geg ._fce .NumDataSourceChoice .NumRef =_d .NewCT_NumRef ();
};_geg ._fce .NumDataSourceChoice .NumRef .F =s ;};

// InitializeDefaults the Stock chart to its defaults
func (_efed StockChart )InitializeDefaults (){_efed ._bgd .HiLowLines =_d .NewCT_ChartLines ();_efed ._bgd .UpDownBars =_d .NewCT_UpDownBars ();_efed ._bgd .UpDownBars .GapWidth =_d .NewCT_GapAmount ();_efed ._bgd .UpDownBars .GapWidth .ValAttr =&_d .ST_GapAmount {};
_efed ._bgd .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_c .Uint16 (150);_efed ._bgd .UpDownBars .UpBars =_d .NewCT_UpDownBar ();_efed ._bgd .UpDownBars .DownBars =_d .NewCT_UpDownBar ();};func (_efa CategoryAxis )AxisID ()uint32 {return _efa ._fea .AxId .ValAttr };


// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_afc NumberDataSource )CreateEmptyNumberCache (){_afc .ensureChoice ();if _afc ._fce .NumDataSourceChoice .NumRef ==nil {_afc ._fce .NumDataSourceChoice .NumRef =_d .NewCT_NumRef ();};_afc ._fce .NumDataSourceChoice .NumLit =nil ;_afc ._fce .NumDataSourceChoice .NumRef .NumCache =_d .NewCT_NumData ();
_afc ._fce .NumDataSourceChoice .NumRef .NumCache .PtCount =_d .NewCT_UnsignedInt ();_afc ._fce .NumDataSourceChoice .NumRef .NumCache .PtCount .ValAttr =0;};

// AddSeries adds a default series to a Bubble chart.
func (_cb BubbleChart )AddSeries ()BubbleChartSeries {_aae :=_cb .nextColor (len (_cb ._bbf .Ser ));_gf :=_d .NewCT_BubbleSer ();_cb ._bbf .Ser =append (_cb ._bbf .Ser ,_gf );_gf .Idx .ValAttr =uint32 (len (_cb ._bbf .Ser )-1);_gf .Order .ValAttr =uint32 (len (_cb ._bbf .Ser )-1);
_deb :=BubbleChartSeries {_gf };_deb .InitializeDefaults ();_deb .Properties ().SetSolidFill (_aae );return _deb ;};func MakeDataLabels (x *_d .CT_DLbls )DataLabels {return DataLabels {x }};

// SetText sets the series text.
func (_egeg PieChartSeries )SetText (s string ){_egeg ._gfdb .Tx =_d .NewCT_SerTx ();_egeg ._gfdb .Tx .SerTxChoice .V =&s ;};func (_adaf CategoryAxis )MajorGridLines ()GridLines {if _adaf ._fea .MajorGridlines ==nil {_adaf ._fea .MajorGridlines =_d .NewCT_ChartLines ();
};return GridLines {_adaf ._fea .MajorGridlines };};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_cbf *_d .CT_RadarSer };func (_gcf DataLabels )SetShowPercent (b bool ){_gcf .ensureChoice ();_gcf ._aedg .DLblsChoice .ShowPercent =_d .NewCT_Boolean ();_gcf ._aedg .DLblsChoice .ShowPercent .ValAttr =_c .Bool (b );};

// Index returns the index of the series
func (_gab LineChartSeries )Index ()uint32 {return _gab ._cac .Idx .ValAttr };

// X returns the inner wrapped XML type.
func (_af BarChart )X ()*_d .CT_BarChart {return _af ._ada };

// X returns the inner wrapped XML type.
func (_bbfe Title )X ()*_d .CT_Title {return _bbfe ._ggc };

// X returns the inner wrapped XML type.
func (_gbf ScatterChartSeries )X ()*_d .CT_ScatterSer {return _gbf ._edcg };func (_acgb ValueAxis )SetMinorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_acgb ._edb .MinorTickMark =nil ;}else {_acgb ._edb .MinorTickMark =_d .NewCT_TickMark ();
_acgb ._edb .MinorTickMark .ValAttr =m ;};};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_gdd *_d .CT_AreaSer };

// InitializeDefaults the bar chart to its defaults
func (_gdde BarChart )InitializeDefaults (){_gdde .SetDirection (_d .ST_BarDirCol )};

// AddSeries adds a default series to an Pie chart.
func (_cd PieChart )AddSeries ()PieChartSeries {_defe :=_d .NewCT_PieSer ();_cd ._fafc .Ser =append (_cd ._fafc .Ser ,_defe );_defe .Idx .ValAttr =uint32 (len (_cd ._fafc .Ser )-1);_defe .Order .ValAttr =uint32 (len (_cd ._fafc .Ser )-1);_dbad :=PieChartSeries {_defe };
_dbad .InitializeDefaults ();return _dbad ;};

// AddAxis adds an axis to a line chart.
func (_dccd LineChart )AddAxis (axis Axis ){_cbc :=_d .NewCT_UnsignedInt ();_cbc .ValAttr =axis .AxisID ();_dccd ._afd .AxId =append (_dccd ._afd .AxId ,_cbc );};

// InitializeDefaults the bar chart to its defaults
func (_gfdbd RadarChart )InitializeDefaults (){_gfdbd ._cfea .RadarStyle .ValAttr =_d .ST_RadarStyleMarker ;};

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_gfdb *_d .CT_PieSer };type ValueAxis struct{_edb *_d .CT_ValAx };func (_cfd LineChartSeries )SetSmooth (b bool ){_cfd ._cac .Smooth =_d .NewCT_Boolean ();_cfd ._cac .Smooth .ValAttr =&b ;};type NumberDataSource struct{_fce *_d .CT_NumDataSource };
func (_ded StockChart )AddAxis (axis Axis ){_cdbd :=_d .NewCT_UnsignedInt ();_cdbd .ValAttr =axis .AxisID ();_ded ._bgd .AxId =append (_ded ._bgd .AxId ,_cdbd );};

// AddSeries adds a default series to a line chart.
func (_fca LineChart )AddSeries ()LineChartSeries {_gbba :=_fca .nextColor (len (_fca ._afd .Ser ));_egf :=_d .NewCT_LineSer ();_fca ._afd .Ser =append (_fca ._afd .Ser ,_egf );_egf .Idx .ValAttr =uint32 (len (_fca ._afd .Ser )-1);_egf .Order .ValAttr =uint32 (len (_fca ._afd .Ser )-1);
_ffa :=LineChartSeries {_egf };_ffa .InitializeDefaults ();_ffa .Properties ().LineProperties ().SetSolidFill (_gbba );return _ffa ;};func (_ffed DateAxis )SetCrosses (axis Axis ){_ffed ._fcd .CrossAx .ValAttr =axis .AxisID ()};

// Chart is a generic chart.
type Chart struct{_bfe *_d .ChartSpace };

// X returns the inner wrapped XML type.
func (_aec GridLines )X ()*_d .CT_ChartLines {return _aec ._ffde };

// Index returns the index of the series
func (_adg SurfaceChartSeries )Index ()uint32 {return _adg ._gcfe .Idx .ValAttr };func (_ebd Legend )SetPosition (p _d .ST_LegendPos ){if p ==_d .ST_LegendPosUnset {_ebd ._fafg .LegendPos =nil ;}else {_ebd ._fafg .LegendPos =_d .NewCT_LegendPos ();_ebd ._fafg .LegendPos .ValAttr =p ;
};};func (_aee DateAxis )Properties ()_e .ShapeProperties {if _aee ._fcd .SpPr ==nil {_aee ._fcd .SpPr =_fc .NewCT_ShapeProperties ();};return _e .MakeShapeProperties (_aee ._fcd .SpPr );};

// InitializeDefaults the bar chart to its defaults
func (_dbee PieOfPieChart )InitializeDefaults (){_dbee ._cgb .VaryColors =_d .NewCT_Boolean ();_dbee ._cgb .VaryColors .ValAttr =_c .Bool (true );_dbee .SetType (_d .ST_OfPieTypePie );_dbee ._cgb .SecondPieSize =_d .NewCT_SecondPieSize ();_dbee ._cgb .SecondPieSize .ValAttr =&_d .ST_SecondPieSize {};
_dbee ._cgb .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_c .Uint16 (75);_cee :=_d .NewCT_ChartLines ();_cee .SpPr =_fc .NewCT_ShapeProperties ();_dfg :=_e .MakeShapeProperties (_cee .SpPr );_dfg .LineProperties ().SetSolidFill (_g .Auto );_dbee ._cgb .SerLines =append (_dbee ._cgb .SerLines ,_cee );
};

// AddBarChart adds a new bar chart to a chart.
func (_aed Chart )AddBarChart ()BarChart {_ddd :=_d .NewCT_PlotAreaChoice ();_aed ._bfe .Chart .PlotArea .PlotAreaChoice =append (_aed ._bfe .Chart .PlotArea .PlotAreaChoice ,_ddd );_ddd .BarChart =_d .NewCT_BarChart ();_ddd .BarChart .Grouping =_d .NewCT_BarGrouping ();
_ddd .BarChart .Grouping .ValAttr =_d .ST_BarGroupingStandard ;_eaf :=BarChart {_ada :_ddd .BarChart };_eaf .InitializeDefaults ();return _eaf ;};func MakeLegend (l *_d .CT_Legend )Legend {return Legend {l }};

// SetOrder sets the order of the series
func (_dfc LineChartSeries )SetOrder (idx uint32 ){_dfc ._cac .Order .ValAttr =idx };

// InitializeDefaults the bar chart to its defaults
func (_abd PieChart )InitializeDefaults (){_abd ._fafc .VaryColors =_d .NewCT_Boolean ();_abd ._fafc .VaryColors .ValAttr =_c .Bool (true );};func (_bfeb DataLabels )SetShowValue (b bool ){_bfeb .ensureChoice ();_bfeb ._aedg .DLblsChoice .ShowVal =_d .NewCT_Boolean ();
_bfeb ._aedg .DLblsChoice .ShowVal .ValAttr =_c .Bool (b );};func (_gac DataLabels )SetShowLegendKey (b bool ){_gac .ensureChoice ();_gac ._aedg .DLblsChoice .ShowLegendKey =_d .NewCT_Boolean ();_gac ._aedg .DLblsChoice .ShowLegendKey .ValAttr =_c .Bool (b );
};type ScatterChart struct{chartBase ;_fbg *_d .CT_ScatterChart ;};

// X returns the inner wrapped XML type.
func (_ebf LineChartSeries )X ()*_d .CT_LineSer {return _ebf ._cac };

// Properties returns the line chart series shape properties.
func (_badc ScatterChartSeries )Properties ()_e .ShapeProperties {if _badc ._edcg .SpPr ==nil {_badc ._edcg .SpPr =_fc .NewCT_ShapeProperties ();};return _e .MakeShapeProperties (_badc ._edcg .SpPr );};func (_ede chartBase )nextColor (_eaec int )_g .Color {return _cgd [_eaec %len (_cgd )]};
func (_eef SeriesAxis )AxisID ()uint32 {return _eef ._fgge .AxId .ValAttr };func (_fcb LineChartSeries )InitializeDefaults (){_fcb .Properties ().LineProperties ().SetWidth (1*_fg .Point );_fcb .Properties ().LineProperties ().SetSolidFill (_g .Black );
_fcb .Properties ().LineProperties ().SetJoin (_e .LineJoinRound );_fcb .Marker ().SetSymbol (_d .ST_MarkerStyleNone );_fcb .Labels ().SetShowLegendKey (false );_fcb .Labels ().SetShowValue (false );_fcb .Labels ().SetShowPercent (false );_fcb .Labels ().SetShowCategoryName (false );
_fcb .Labels ().SetShowSeriesName (false );_fcb .Labels ().SetShowLeaderLines (false );};

// SetIndex sets the index of the series
func (_afdb ScatterChartSeries )SetIndex (idx uint32 ){_afdb ._edcg .Idx .ValAttr =idx };

// Index returns the index of the series
func (_cfg ScatterChartSeries )Index ()uint32 {return _cfg ._edcg .Idx .ValAttr };type DataLabels struct{_aedg *_d .CT_DLbls };

// X returns the inner wrapped XML type.
func (_eeed SurfaceChart )X ()*_d .CT_SurfaceChart {return _eeed ._cfc };func (_cfe DataLabels )SetPosition (p _d .ST_DLblPos ){_cfe .ensureChoice ();_cfe ._aedg .DLblsChoice .DLblPos =_d .NewCT_DLblPos ();_cfe ._aedg .DLblsChoice .DLblPos .ValAttr =p ;
};

// InitializeDefaults initializes an area series to the default values.
func (_cc AreaChartSeries )InitializeDefaults (){};

// Values returns the value data source.
func (_ee RadarChartSeries )Values ()NumberDataSource {if _ee ._cbf .Val ==nil {_ee ._cbf .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_ee ._cbf .Val );};

// SetValues is used to set the source data to a set of values.
func (_bd CategoryAxisDataSource )SetValues (v []string ){_bd ._dfb .AxDataSourceChoice =_d .NewCT_AxDataSourceChoice ();_bd ._dfb .AxDataSourceChoice .StrLit =_d .NewCT_StrData ();_bd ._dfb .AxDataSourceChoice .StrLit .PtCount =_d .NewCT_UnsignedInt ();
_bd ._dfb .AxDataSourceChoice .StrLit .PtCount .ValAttr =uint32 (len (v ));for _fgg ,_fdf :=range v {_bd ._dfb .AxDataSourceChoice .StrLit .Pt =append (_bd ._dfb .AxDataSourceChoice .StrLit .Pt ,&_d .CT_StrVal {IdxAttr :uint32 (_fgg ),V :_fdf });};};

// AddDateAxis adds a value axis to the chart.
func (_gef Chart )AddDateAxis ()DateAxis {_deff :=_d .NewCT_DateAx ();if _gef ._bfe .Chart .PlotArea .PlotAreaChoice1 ==nil {_gef ._bfe .Chart .PlotArea .PlotAreaChoice1 =[]*_d .CT_PlotAreaChoice1 {};};_deff .AxId =_d .NewCT_UnsignedInt ();_deff .AxId .ValAttr =0x7FFFFFFF&_ff .Uint32 ();
_gef ._bfe .Chart .PlotArea .PlotAreaChoice1 =append (_gef ._bfe .Chart .PlotArea .PlotAreaChoice1 ,&_d .CT_PlotAreaChoice1 {DateAx :_deff });_deff .Delete =_d .NewCT_Boolean ();_deff .Delete .ValAttr =_c .Bool (false );_deff .Scaling =_d .NewCT_Scaling ();
_deff .Scaling .Orientation =_d .NewCT_Orientation ();_deff .Scaling .Orientation .ValAttr =_d .ST_OrientationMinMax ;_deff .AxSharedChoice =&_d .EG_AxSharedChoice {};_deff .AxSharedChoice .Crosses =_d .NewCT_Crosses ();_deff .AxSharedChoice .Crosses .ValAttr =_d .ST_CrossesAutoZero ;
_deg :=DateAxis {_deff };_deg .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_g .LightGray );_deg .SetMajorTickMark (_d .ST_TickMarkOut );_deg .SetMinorTickMark (_d .ST_TickMarkIn );_deg .SetTickLabelPosition (_d .ST_TickLblPosNextTo );
_deg .Properties ().LineProperties ().SetSolidFill (_g .Black );_deg .SetPosition (_d .ST_AxPosL );return _deg ;};

// X returns the inner wrapped XML type.
func (_cfbb ScatterChart )X ()*_d .CT_ScatterChart {return _cfbb ._fbg };func (_ggb SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ggb ._gcfe .Cat ==nil {_ggb ._gcfe .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_ggb ._gcfe .Cat );
};

// X returns the inner wrapped XML type.
func (_fad DateAxis )X ()*_d .CT_DateAx {return _fad ._fcd };

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_ece Chart )AddLegend ()Legend {_ece ._bfe .Chart .Legend =_d .NewCT_Legend ();_gca :=MakeLegend (_ece ._bfe .Chart .Legend );_gca .InitializeDefaults ();return _gca ;};

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_cfea *_d .CT_RadarChart ;};

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_ca BubbleChartSeries )InitializeDefaults (){};

// InitializeDefaults the bar chart to its defaults
func (_ae Bar3DChart )InitializeDefaults (){_ae .SetDirection (_d .ST_BarDirCol )};func (_cge CategoryAxis )InitializeDefaults (){_cge .SetPosition (_d .ST_AxPosB );_cge .SetMajorTickMark (_d .ST_TickMarkOut );_cge .SetMinorTickMark (_d .ST_TickMarkIn );
_cge .SetTickLabelPosition (_d .ST_TickLblPosNextTo );_cge .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_g .LightGray );_cge .Properties ().LineProperties ().SetSolidFill (_g .Black );};func (_agf GridLines )Properties ()_e .ShapeProperties {if _agf ._ffde .SpPr ==nil {_agf ._ffde .SpPr =_fc .NewCT_ShapeProperties ();
};return _e .MakeShapeProperties (_agf ._ffde .SpPr );};

// Values returns the value data source.
func (_gbb BarChartSeries )Values ()NumberDataSource {if _gbb ._gb .Val ==nil {_gbb ._gb .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_gbb ._gb .Val );};func (_eee ScatterChartSeries )SetSmooth (b bool ){_eee ._edcg .Smooth =_d .NewCT_Boolean ();
_eee ._edcg .Smooth .ValAttr =&b ;};func (_cea Marker )SetSize (sz uint8 ){_cea ._faef .Size =_d .NewCT_MarkerSize ();_cea ._faef .Size .ValAttr =&sz ;};

// AddAxis adds an axis to a Scatter chart.
func (_bag ScatterChart )AddAxis (axis Axis ){_acb :=_d .NewCT_UnsignedInt ();_acb .ValAttr =axis .AxisID ();_bag ._fbg .AxId =append (_bag ._fbg .AxId ,_acb );};

// Properties returns the line chart series shape properties.
func (_ffcb LineChartSeries )Properties ()_e .ShapeProperties {if _ffcb ._cac .SpPr ==nil {_ffcb ._cac .SpPr =_fc .NewCT_ShapeProperties ();};return _e .MakeShapeProperties (_ffcb ._cac .SpPr );};func (_fgf Title )InitializeDefaults (){_fgf .SetText ("\u0054\u0069\u0074l\u0065");
_fgf .RunProperties ().SetSize (16*_fg .Point );_fgf .RunProperties ().SetSolidFill (_g .Black );_fgf .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_fgf .RunProperties ().SetBold (false );};

// CategoryAxis returns the category data source.
func (_ega PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ega ._gfdb .Cat ==nil {_ega ._gfdb .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_ega ._gfdb .Cat );};func (_cfbg Title )SetText (s string ){if _cfbg ._ggc .Tx ==nil {_cfbg ._ggc .Tx =_d .NewCT_Tx ();
};if _cfbg ._ggc .Tx .TxChoice .Rich ==nil {_cfbg ._ggc .Tx .TxChoice .Rich =_fc .NewCT_TextBody ();};var _cfa *_fc .CT_TextParagraph ;if len (_cfbg ._ggc .Tx .TxChoice .Rich .P )==0{_cfa =_fc .NewCT_TextParagraph ();_cfbg ._ggc .Tx .TxChoice .Rich .P =[]*_fc .CT_TextParagraph {_cfa };
}else {_cfa =_cfbg ._ggc .Tx .TxChoice .Rich .P [0];};var _eagf *_fc .EG_TextRun ;if len (_cfa .EG_TextRun )==0{_eagf =_fc .NewEG_TextRun ();_cfa .EG_TextRun =[]*_fc .EG_TextRun {_eagf };}else {_eagf =_cfa .EG_TextRun [0];};if _eagf .TextRunChoice .R ==nil {_eagf .TextRunChoice .R =_fc .NewCT_RegularTextRun ();
};_eagf .TextRunChoice .R .T =s ;};

// InitializeDefaults initializes an Pie series to the default values.
func (_ebb PieChartSeries )InitializeDefaults (){};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_bgd *_d .CT_StockChart ;};func (_gd AreaChart )AddAxis (axis Axis ){_bea :=_d .NewCT_UnsignedInt ();_bea .ValAttr =axis .AxisID ();_gd ._dfe .AxId =append (_gd ._dfe .AxId ,_bea );};

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_edcg *_d .CT_ScatterSer };

// AddTitle sets a new title on the chart.
func (_dbab Chart )AddTitle ()Title {_dbab ._bfe .Chart .Title =_d .NewCT_Title ();_dbab ._bfe .Chart .Title .Overlay =_d .NewCT_Boolean ();_dbab ._bfe .Chart .Title .Overlay .ValAttr =_c .Bool (false );_dbab ._bfe .Chart .AutoTitleDeleted =_d .NewCT_Boolean ();
_dbab ._bfe .Chart .AutoTitleDeleted .ValAttr =_c .Bool (false );_cgc :=MakeTitle (_dbab ._bfe .Chart .Title );_cgc .InitializeDefaults ();return _cgc ;};var NullAxis Axis =nullAxis (0);

// X returns the inner wrapped XML type.
func (_dcef Legend )X ()*_d .CT_Legend {return _dcef ._fafg };func (_bga Bar3DChart )AddAxis (axis Axis ){_cf :=_d .NewCT_UnsignedInt ();_cf .ValAttr =axis .AxisID ();_bga ._aa .AxId =append (_bga ._aa .AxId ,_cf );};func (_fde Legend )SetOverlay (b bool ){_fde ._fafg .Overlay =_d .NewCT_Boolean ();
_fde ._fafg .Overlay .ValAttr =_c .Bool (b );};func (_edg DateAxis )MajorGridLines ()GridLines {if _edg ._fcd .MajorGridlines ==nil {_edg ._fcd .MajorGridlines =_d .NewCT_ChartLines ();};return GridLines {_edg ._fcd .MajorGridlines };};

// InitializeDefaults initializes a bar chart series to the default values.
func (_bb BarChartSeries )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_efg SeriesAxis )X ()*_d .CT_SerAx {return _efg ._fgge };

// AddPie3DChart adds a new pie chart to a chart.
func (_bbe Chart )AddPie3DChart ()Pie3DChart {_dgd (_bbe ._bfe .Chart );_eae :=_d .NewCT_PlotAreaChoice ();_bbe ._bfe .Chart .PlotArea .PlotAreaChoice =append (_bbe ._bfe .Chart .PlotArea .PlotAreaChoice ,_eae );_eae .Pie3DChart =_d .NewCT_Pie3DChart ();
_gbg :=Pie3DChart {_dgde :_eae .Pie3DChart };_gbg .InitializeDefaults ();return _gbg ;};type nullAxis byte ;

// Values returns the value data source.
func (_fa BubbleChartSeries )Values ()NumberDataSource {if _fa ._bca .YVal ==nil {_fa ._bca .YVal =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_fa ._bca .YVal );};func (_ace LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ace ._cac .Cat ==nil {_ace ._cac .Cat =_d .NewCT_AxDataSource ();
};return MakeAxisDataSource (_ace ._cac .Cat );};

// AddScatterChart adds a scatter (X/Y) chart.
func (_ecac Chart )AddScatterChart ()ScatterChart {_aef :=_d .NewCT_PlotAreaChoice ();_ecac ._bfe .Chart .PlotArea .PlotAreaChoice =append (_ecac ._bfe .Chart .PlotArea .PlotAreaChoice ,_aef );_aef .ScatterChart =_d .NewCT_ScatterChart ();_gfd :=ScatterChart {_fbg :_aef .ScatterChart };
_gfd .InitializeDefaults ();return _gfd ;};

// AddStockChart adds a new stock chart.
func (_bfca Chart )AddStockChart ()StockChart {_fbc :=_d .NewCT_PlotAreaChoice ();_bfca ._bfe .Chart .PlotArea .PlotAreaChoice =append (_bfca ._bfe .Chart .PlotArea .PlotAreaChoice ,_fbc );_fbc .StockChart =_d .NewCT_StockChart ();_cgea :=StockChart {_bgd :_fbc .StockChart };
_cgea .InitializeDefaults ();return _cgea ;};type Title struct{_ggc *_d .CT_Title };

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_aa *_d .CT_Bar3DChart ;};func (_gcaa Title )ParagraphProperties ()_e .ParagraphProperties {if _gcaa ._ggc .Tx ==nil {_gcaa .SetText ("");};if _gcaa ._ggc .Tx .TxChoice .Rich .P [0].PPr ==nil {_gcaa ._ggc .Tx .TxChoice .Rich .P [0].PPr =_fc .NewCT_TextParagraphProperties ();
};return _e .MakeParagraphProperties (_gcaa ._ggc .Tx .TxChoice .Rich .P [0].PPr );};type Marker struct{_faef *_d .CT_Marker };

// Order returns the order of the series
func (_ebdf SurfaceChartSeries )Order ()uint32 {return _ebdf ._gcfe .Order .ValAttr };var _cgd =[]_g .Color {_g .RGB (0x33,0x66,0xcc),_g .RGB (0xDC,0x39,0x12),_g .RGB (0xFF,0x99,0x00),_g .RGB (0x10,0x96,0x18),_g .RGB (0x99,0x00,0x99),_g .RGB (0x3B,0x3E,0xAC),_g .RGB (0x00,0x99,0xC6),_g .RGB (0xDD,0x44,0x77),_g .RGB (0x66,0xAA,0x00),_g .RGB (0xB8,0x2E,0x2E),_g .RGB (0x31,0x63,0x95),_g .RGB (0x99,0x44,0x99),_g .RGB (0x22,0xAA,0x99),_g .RGB (0xAA,0xAA,0x11),_g .RGB (0x66,0x33,0xCC),_g .RGB (0xE6,0x73,0x00),_g .RGB (0x8B,0x07,0x07),_g .RGB (0x32,0x92,0x62),_g .RGB (0x55,0x74,0xA6),_g .RGB (0x3B,0x3E,0xAC)};


// AddSurfaceChart adds a new surface chart to a chart.
func (_def Chart )AddSurfaceChart ()SurfaceChart {_ab :=_d .NewCT_PlotAreaChoice ();_def ._bfe .Chart .PlotArea .PlotAreaChoice =append (_def ._bfe .Chart .PlotArea .PlotAreaChoice ,_ab );_ab .SurfaceChart =_d .NewCT_SurfaceChart ();_dgd (_def ._bfe .Chart );
_def ._bfe .Chart .View3D .RotX .ValAttr =_c .Int8 (90);_def ._bfe .Chart .View3D .RotY .ValAttr =_c .Uint16 (0);_def ._bfe .Chart .View3D .Perspective =_d .NewCT_Perspective ();_def ._bfe .Chart .View3D .Perspective .ValAttr =_c .Uint8 (0);_ecae :=SurfaceChart {_cfc :_ab .SurfaceChart };
_ecae .InitializeDefaults ();return _ecae ;};

// AddSeries adds a default series to an Pie3D chart.
func (_ddcb Pie3DChart )AddSeries ()PieChartSeries {_bdad :=_d .NewCT_PieSer ();_ddcb ._dgde .Ser =append (_ddcb ._dgde .Ser ,_bdad );_bdad .Idx .ValAttr =uint32 (len (_ddcb ._dgde .Ser )-1);_bdad .Order .ValAttr =uint32 (len (_ddcb ._dgde .Ser )-1);_agda :=PieChartSeries {_bdad };
_agda .InitializeDefaults ();return _agda ;};func MakeTitle (x *_d .CT_Title )Title {return Title {x }};

// X returns the inner wrapped XML type.
func (_gg AreaChartSeries )X ()*_d .CT_AreaSer {return _gg ._gdd };type LineChart struct{chartBase ;_afd *_d .CT_LineChart ;};func MakeNumberDataSource (x *_d .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};type SurfaceChartSeries struct{_gcfe *_d .CT_SurfaceSer };
func (_ffe DateAxis )SetPosition (p _d .ST_AxPos ){_ffe ._fcd .AxPos =_d .NewCT_AxPos ();_ffe ._fcd .AxPos .ValAttr =p ;};

// SetOrder sets the order of the series
func (_eacb ScatterChartSeries )SetOrder (idx uint32 ){_eacb ._edcg .Order .ValAttr =idx };

// AddAxis adds an axis to a Surface chart.
func (_fdgf Surface3DChart )AddAxis (axis Axis ){_defd :=_d .NewCT_UnsignedInt ();_defd .ValAttr =axis .AxisID ();_fdgf ._gba .AxId =append (_fdgf ._gba .AxId ,_defd );};

// X returns the inner wrapped XML type.
func (_egg Pie3DChart )X ()*_d .CT_Pie3DChart {return _egg ._dgde };func (_aff CategoryAxis )SetMinorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_aff ._fea .MinorTickMark =nil ;}else {_aff ._fea .MinorTickMark =_d .NewCT_TickMark ();_aff ._fea .MinorTickMark .ValAttr =m ;
};};func (_gff Surface3DChart )InitializeDefaults (){_gff ._gba .Wireframe =_d .NewCT_Boolean ();_gff ._gba .Wireframe .ValAttr =_c .Bool (false );_gff ._gba .BandFmts =_d .NewCT_BandFmts ();for _fdae :=0;_fdae < 15;_fdae ++{_dca :=_d .NewCT_BandFmt ();
_dca .Idx .ValAttr =uint32 (_fdae );_dca .SpPr =_fc .NewCT_ShapeProperties ();_efae :=_e .MakeShapeProperties (_dca .SpPr );_efae .SetSolidFill (_gff .nextColor (_fdae ));_gff ._gba .BandFmts .BandFmt =append (_gff ._gba .BandFmts .BandFmt ,_dca );};};


// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_bcec PieChartSeries )SetExplosion (v uint32 ){_bcec ._gfdb .Explosion =_d .NewCT_UnsignedInt ();_bcec ._gfdb .Explosion .ValAttr =v ;};func (_bdag SurfaceChart )InitializeDefaults (){_bdag ._cfc .Wireframe =_d .NewCT_Boolean ();_bdag ._cfc .Wireframe .ValAttr =_c .Bool (false );
_bdag ._cfc .BandFmts =_d .NewCT_BandFmts ();for _eaef :=0;_eaef < 15;_eaef ++{_add :=_d .NewCT_BandFmt ();_add .Idx .ValAttr =uint32 (_eaef );_add .SpPr =_fc .NewCT_ShapeProperties ();_dcba :=_e .MakeShapeProperties (_add .SpPr );_dcba .SetSolidFill (_bdag .nextColor (_eaef ));
_bdag ._cfc .BandFmts .BandFmt =append (_bdag ._cfc .BandFmts .BandFmt ,_add );};};

// X returns the inner wrapped XML type.
func (_cab RadarChartSeries )X ()*_d .CT_RadarSer {return _cab ._cbf };

// X returns the inner wrapped XML type.
func (_gcad DoughnutChart )X ()*_d .CT_DoughnutChart {return _gcad ._fdg };

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_dfe *_d .CT_AreaChart ;};func (_cbe ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _cbe ._edcg .XVal ==nil {_cbe ._edcg .XVal =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_cbe ._edcg .XVal );};


// X returns the inner wrapped XML type.
func (_fgb AreaChart )X ()*_d .CT_AreaChart {return _fgb ._dfe };func (_bcaac Marker )SetSymbol (s _d .ST_MarkerStyle ){if s ==_d .ST_MarkerStyleUnset {_bcaac ._faef .Symbol =nil ;}else {_bcaac ._faef .Symbol =_d .NewCT_MarkerStyle ();_bcaac ._faef .Symbol .ValAttr =s ;
};};

// SetText sets the series text.
func (_bge BubbleChartSeries )SetText (s string ){_bge ._bca .Tx =_d .NewCT_SerTx ();_bge ._bca .Tx .SerTxChoice .V =&s ;};

// AddSeries adds a default series to a bar chart.
func (_de BarChart )AddSeries ()BarChartSeries {_fee :=_de .nextColor (len (_de ._ada .Ser ));_dd :=_d .NewCT_BarSer ();_de ._ada .Ser =append (_de ._ada .Ser ,_dd );_dd .Idx .ValAttr =uint32 (len (_de ._ada .Ser )-1);_dd .Order .ValAttr =uint32 (len (_de ._ada .Ser )-1);
_gga :=BarChartSeries {_dd };_gga .InitializeDefaults ();_gga .Properties ().SetSolidFill (_fee );return _gga ;};func (_cde RadarChart )AddAxis (axis Axis ){_fga :=_d .NewCT_UnsignedInt ();_fga .ValAttr =axis .AxisID ();_cde ._cfea .AxId =append (_cde ._cfea .AxId ,_fga );
};func (_bcc BarChart )AddAxis (axis Axis ){_ddg :=_d .NewCT_UnsignedInt ();_ddg .ValAttr =axis .AxisID ();_bcc ._ada .AxId =append (_bcc ._ada .AxId ,_ddg );};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_fafc *_d .CT_PieChart ;};

// Properties returns the bar chart series shape properties.
func (_dcbe RadarChartSeries )Properties ()_e .ShapeProperties {if _dcbe ._cbf .SpPr ==nil {_dcbe ._cbf .SpPr =_fc .NewCT_ShapeProperties ();};return _e .MakeShapeProperties (_dcbe ._cbf .SpPr );};

// AddSeries adds a default series to a Scatter chart.
func (_fda ScatterChart )AddSeries ()ScatterChartSeries {_ffcc :=_fda .nextColor (len (_fda ._fbg .Ser ));_debd :=_d .NewCT_ScatterSer ();_fda ._fbg .Ser =append (_fda ._fbg .Ser ,_debd );_debd .Idx .ValAttr =uint32 (len (_fda ._fbg .Ser )-1);_debd .Order .ValAttr =uint32 (len (_fda ._fbg .Ser )-1);
_afag :=ScatterChartSeries {_debd };_afag .InitializeDefaults ();_afag .Marker ().Properties ().LineProperties ().SetSolidFill (_ffcc );_afag .Marker ().Properties ().SetSolidFill (_ffcc );return _afag ;};

// X returns the inner wrapped XML type.
func (_bgcg PieChart )X ()*_d .CT_PieChart {return _bgcg ._fafc };func _dgd (_ddc *_d .CT_Chart ){_ddc .View3D =_d .NewCT_View3D ();_ddc .View3D .RotX =_d .NewCT_RotX ();_ddc .View3D .RotX .ValAttr =_c .Int8 (15);_ddc .View3D .RotY =_d .NewCT_RotY ();_ddc .View3D .RotY .ValAttr =_c .Uint16 (20);
_ddc .View3D .RAngAx =_d .NewCT_Boolean ();_ddc .View3D .RAngAx .ValAttr =_c .Bool (false );_ddc .Floor =_d .NewCT_Surface ();_ddc .Floor .Thickness =_d .NewCT_Thickness ();_ddc .Floor .Thickness .ValAttr .Uint32 =_c .Uint32 (0);_ddc .SideWall =_d .NewCT_Surface ();
_ddc .SideWall .Thickness =_d .NewCT_Thickness ();_ddc .SideWall .Thickness .ValAttr .Uint32 =_c .Uint32 (0);_ddc .BackWall =_d .NewCT_Surface ();_ddc .BackWall .Thickness =_d .NewCT_Thickness ();_ddc .BackWall .Thickness .ValAttr .Uint32 =_c .Uint32 (0);
};func (_fdd Chart )AddSeriesAxis ()SeriesAxis {_gdc :=_d .NewCT_SerAx ();if _fdd ._bfe .Chart .PlotArea .PlotAreaChoice1 ==nil {_fdd ._bfe .Chart .PlotArea .PlotAreaChoice1 =[]*_d .CT_PlotAreaChoice1 {};};_gdc .AxId =_d .NewCT_UnsignedInt ();_gdc .AxId .ValAttr =0x7FFFFFFF&_ff .Uint32 ();
_fdd ._bfe .Chart .PlotArea .PlotAreaChoice1 =append (_fdd ._bfe .Chart .PlotArea .PlotAreaChoice1 ,&_d .CT_PlotAreaChoice1 {SerAx :_gdc });_gdc .Delete =_d .NewCT_Boolean ();_gdc .Delete .ValAttr =_c .Bool (false );_gge :=MakeSeriesAxis (_gdc );_gge .InitializeDefaults ();
return _gge ;};

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_afb Chart )AddBar3DChart ()Bar3DChart {_dgd (_afb ._bfe .Chart );_bec :=_d .NewCT_PlotAreaChoice ();_afb ._bfe .Chart .PlotArea .PlotAreaChoice =append (_afb ._bfe .Chart .PlotArea .PlotAreaChoice ,_bec );_bec .Bar3DChart =_d .NewCT_Bar3DChart ();
_bec .Bar3DChart .Grouping =_d .NewCT_BarGrouping ();_bec .Bar3DChart .Grouping .ValAttr =_d .ST_BarGroupingStandard ;_eac :=Bar3DChart {_aa :_bec .Bar3DChart };_eac .InitializeDefaults ();return _eac ;};func MakeChart (x *_d .ChartSpace )Chart {return Chart {x }};


// AddSeries adds a default series to an Doughnut chart.
func (_dbe DoughnutChart )AddSeries ()PieChartSeries {_beb :=_d .NewCT_PieSer ();_dbe ._fdg .Ser =append (_dbe ._fdg .Ser ,_beb );_beb .Idx .ValAttr =uint32 (len (_dbe ._fdg .Ser )-1);_beb .Order .ValAttr =uint32 (len (_dbe ._fdg .Ser )-1);_adc :=PieChartSeries {_beb };
_adc .InitializeDefaults ();return _adc ;};

// X returns the inner wrapped XML type.
func (_eg Bar3DChart )X ()*_d .CT_Bar3DChart {return _eg ._aa };type SeriesAxis struct{_fgge *_d .CT_SerAx };type CategoryAxis struct{_fea *_d .CT_CatAx };func (_eceg Legend )InitializeDefaults (){_eceg .SetPosition (_d .ST_LegendPosR );_eceg .SetOverlay (false );
_eceg .Properties ().SetNoFill ();_eceg .Properties ().LineProperties ().SetNoFill ();};

// SetIndex sets the index of the series
func (_bda LineChartSeries )SetIndex (idx uint32 ){_bda ._cac .Idx .ValAttr =idx };

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_gba *_d .CT_Surface3DChart ;};func (_ge BubbleChart )AddAxis (axis Axis ){_fb :=_d .NewCT_UnsignedInt ();_fb .ValAttr =axis .AxisID ();_ge ._bbf .AxId =append (_ge ._bbf .AxId ,_fb );};func (_gae CategoryAxis )Properties ()_e .ShapeProperties {if _gae ._fea .SpPr ==nil {_gae ._fea .SpPr =_fc .NewCT_ShapeProperties ();
};return _e .MakeShapeProperties (_gae ._fea .SpPr );};type chartBase struct{};

// X returns the inner wrapped XML type.
func (_b Area3DChart )X ()*_d .CT_Area3DChart {return _b ._ce };

// AddLine3DChart adds a new 3D line chart to a chart.
func (_dba Chart )AddLine3DChart ()Line3DChart {_dgd (_dba ._bfe .Chart );_dec :=_d .NewCT_PlotAreaChoice ();_dba ._bfe .Chart .PlotArea .PlotAreaChoice =append (_dba ._bfe .Chart .PlotArea .PlotAreaChoice ,_dec );_dec .Line3DChart =_d .NewCT_Line3DChart ();
_dec .Line3DChart .Grouping =_d .NewCT_Grouping ();_dec .Line3DChart .Grouping .ValAttr =_d .ST_GroupingStandard ;return Line3DChart {_caa :_dec .Line3DChart };};

// SetOrder sets the order of the series
func (_cda SurfaceChartSeries )SetOrder (idx uint32 ){_cda ._gcfe .Order .ValAttr =idx };

// SetText sets the series text
func (_beda LineChartSeries )SetText (s string ){_beda ._cac .Tx =_d .NewCT_SerTx ();_beda ._cac .Tx .SerTxChoice .V =&s ;};

// AddSeries adds a default series to a Surface chart.
func (_fcf SurfaceChart )AddSeries ()SurfaceChartSeries {_fcbd :=_fcf .nextColor (len (_fcf ._cfc .Ser ));_daf :=_d .NewCT_SurfaceSer ();_fcf ._cfc .Ser =append (_fcf ._cfc .Ser ,_daf );_daf .Idx .ValAttr =uint32 (len (_fcf ._cfc .Ser )-1);_daf .Order .ValAttr =uint32 (len (_fcf ._cfc .Ser )-1);
_ccce :=SurfaceChartSeries {_daf };_ccce .InitializeDefaults ();_ccce .Properties ().LineProperties ().SetSolidFill (_fcbd );return _ccce ;};

// InitializeDefaults the bar chart to its defaults
func (_bc AreaChart )InitializeDefaults (){};

// Properties returns the bar chart series shape properties.
func (_afbf PieChartSeries )Properties ()_e .ShapeProperties {if _afbf ._gfdb .SpPr ==nil {_afbf ._gfdb .SpPr =_fc .NewCT_ShapeProperties ();};return _e .MakeShapeProperties (_afbf ._gfdb .SpPr );};func (_dga DataLabels )ensureChoice (){if _dga ._aedg .DLblsChoice ==nil {_dga ._aedg .DLblsChoice =_d .NewCT_DLblsChoice ();
};};func (_faf DateAxis )SetMajorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_faf ._fcd .MajorTickMark =nil ;}else {_faf ._fcd .MajorTickMark =_d .NewCT_TickMark ();_faf ._fcd .MajorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_agb BubbleChart )X ()*_d .CT_BubbleChart {return _agb ._bbf };func MakeValueAxis (x *_d .CT_ValAx )ValueAxis {return ValueAxis {x }};func MakeSeriesAxis (x *_d .CT_SerAx )SeriesAxis {return SeriesAxis {x }};

// Values returns the value data source.
func (_dgc PieChartSeries )Values ()NumberDataSource {if _dgc ._gfdb .Val ==nil {_dgc ._gfdb .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_dgc ._gfdb .Val );};

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_cfc *_d .CT_SurfaceChart ;};func (_dce DateAxis )SetTickLabelPosition (p _d .ST_TickLblPos ){if p ==_d .ST_TickLblPosUnset {_dce ._fcd .TickLblPos =nil ;}else {_dce ._fcd .TickLblPos =_d .NewCT_TickLblPos ();_dce ._fcd .TickLblPos .ValAttr =p ;
};};

// X returns the inner wrapped XML type.
func (_dcb Line3DChart )X ()*_d .CT_Line3DChart {return _dcb ._caa };func (_gfc SeriesAxis )InitializeDefaults (){};

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_ada *_d .CT_BarChart ;};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_adfa Chart )AddPieOfPieChart ()PieOfPieChart {_ebg :=_d .NewCT_PlotAreaChoice ();_adfa ._bfe .Chart .PlotArea .PlotAreaChoice =append (_adfa ._bfe .Chart .PlotArea .PlotAreaChoice ,_ebg );_ebg .OfPieChart =_d .NewCT_OfPieChart ();_fag :=PieOfPieChart {_cgb :_ebg .OfPieChart };
_fag .InitializeDefaults ();return _fag ;};

// CategoryAxis returns the category data source.
func (_ccb BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ccb ._bca .XVal ==nil {_ccb ._bca .XVal =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_ccb ._bca .XVal );};

// CategoryAxis returns the category data source.
func (_bfc BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bfc ._gb .Cat ==nil {_bfc ._gb .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_bfc ._gb .Cat );};

// AddPieChart adds a new pie chart to a chart.
func (_fac Chart )AddPieChart ()PieChart {_ddb :=_d .NewCT_PlotAreaChoice ();_fac ._bfe .Chart .PlotArea .PlotAreaChoice =append (_fac ._bfe .Chart .PlotArea .PlotAreaChoice ,_ddb );_ddb .PieChart =_d .NewCT_PieChart ();_gdf :=PieChart {_fafc :_ddb .PieChart };
_gdf .InitializeDefaults ();return _gdf ;};func (_fdff DataLabels )SetShowSeriesName (b bool ){_fdff .ensureChoice ();_fdff ._aedg .DLblsChoice .ShowSerName =_d .NewCT_Boolean ();_fdff ._aedg .DLblsChoice .ShowSerName .ValAttr =_c .Bool (b );};

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_cac *_d .CT_LineSer };type Legend struct{_fafg *_d .CT_Legend };func (_gfg ValueAxis )AxisID ()uint32 {return _gfg ._edb .AxId .ValAttr };

// SetDirection changes the direction of the bar chart (bar or column).
func (_adf Bar3DChart )SetDirection (d _d .ST_BarDir ){_adf ._aa .BarDir .ValAttr =d };func (_fded SurfaceChartSeries )Values ()NumberDataSource {if _fded ._gcfe .Val ==nil {_fded ._gcfe .Val =_d .NewCT_NumDataSource ();};_dceg :=MakeNumberDataSource (_fded ._gcfe .Val );
_dceg .CreateEmptyNumberCache ();return _dceg ;};

// CategoryAxis returns the category data source.
func (_ecc RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ecc ._cbf .Cat ==nil {_ecc ._cbf .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_ecc ._cbf .Cat );};

// X returns the inner wrapped XML type.
func (_cbg SurfaceChartSeries )X ()*_d .CT_SurfaceSer {return _cbg ._gcfe };func (_cg nullAxis )AxisID ()uint32 {return 0};func (_egc ValueAxis )SetMajorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_egc ._edb .MajorTickMark =nil ;}else {_egc ._edb .MajorTickMark =_d .NewCT_TickMark ();
_egc ._edb .MajorTickMark .ValAttr =m ;};};

// AddSeries adds a default series to an Radar chart.
func (_fec RadarChart )AddSeries ()RadarChartSeries {_cacc :=_fec .nextColor (len (_fec ._cfea .Ser ));_acd :=_d .NewCT_RadarSer ();_fec ._cfea .Ser =append (_fec ._cfea .Ser ,_acd );_acd .Idx .ValAttr =uint32 (len (_fec ._cfea .Ser )-1);_acd .Order .ValAttr =uint32 (len (_fec ._cfea .Ser )-1);
_cdb :=RadarChartSeries {_acd };_cdb .InitializeDefaults ();_cdb .Properties ().SetSolidFill (_cacc );return _cdb ;};func MakeMarker (x *_d .CT_Marker )Marker {return Marker {x }};

// AddSeries adds a default series to a Surface chart.
func (_ddbb Surface3DChart )AddSeries ()SurfaceChartSeries {_bbb :=_ddbb .nextColor (len (_ddbb ._gba .Ser ));_abg :=_d .NewCT_SurfaceSer ();_ddbb ._gba .Ser =append (_ddbb ._gba .Ser ,_abg );_abg .Idx .ValAttr =uint32 (len (_ddbb ._gba .Ser )-1);_abg .Order .ValAttr =uint32 (len (_ddbb ._gba .Ser )-1);
_ebfc :=SurfaceChartSeries {_abg };_ebfc .InitializeDefaults ();_ebfc .Properties ().LineProperties ().SetSolidFill (_bbb );return _ebfc ;};

// Marker returns the marker properties.
func (_bgf LineChartSeries )Marker ()Marker {if _bgf ._cac .Marker ==nil {_bgf ._cac .Marker =_d .NewCT_Marker ();};return MakeMarker (_bgf ._cac .Marker );};

// InitializeDefaults the bar chart to its defaults
func (_ceg Pie3DChart )InitializeDefaults (){_ceg ._dgde .VaryColors =_d .NewCT_Boolean ();_ceg ._dgde .VaryColors .ValAttr =_c .Bool (true );};func (_fgda ScatterChartSeries )InitializeDefaults (){_fgda .Properties ().LineProperties ().SetNoFill ();_fgda .Marker ().SetSymbol (_d .ST_MarkerStyleAuto );
_fgda .Labels ().SetShowLegendKey (false );_fgda .Labels ().SetShowValue (true );_fgda .Labels ().SetShowPercent (false );_fgda .Labels ().SetShowCategoryName (false );_fgda .Labels ().SetShowSeriesName (false );_fgda .Labels ().SetShowLeaderLines (false );
};

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_ce *_d .CT_Area3DChart ;};

// InitializeDefaults the bar chart to its defaults
func (_ed Area3DChart )InitializeDefaults (){};

// AddRadarChart adds a new radar chart to a chart.
func (_gad Chart )AddRadarChart ()RadarChart {_eb :=_d .NewCT_PlotAreaChoice ();_gad ._bfe .Chart .PlotArea .PlotAreaChoice =append (_gad ._bfe .Chart .PlotArea .PlotAreaChoice ,_eb );_eb .RadarChart =_d .NewCT_RadarChart ();_cgf :=RadarChart {_cfea :_eb .RadarChart };
_cgf .InitializeDefaults ();return _cgf ;};

// SetText sets the series text
func (_afcd ScatterChartSeries )SetText (s string ){_afcd ._edcg .Tx =_d .NewCT_SerTx ();_afcd ._edcg .Tx .SerTxChoice .V =&s ;};

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_d .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};

// AddAxis adds an axis to a line chart.
func (_ccf Line3DChart )AddAxis (axis Axis ){_bcaa :=_d .NewCT_UnsignedInt ();_bcaa .ValAttr =axis .AxisID ();_ccf ._caa .AxId =append (_ccf ._caa .AxId ,_bcaa );};

// SetText sets the series text.
func (_bad RadarChartSeries )SetText (s string ){_bad ._cbf .Tx =_d .NewCT_SerTx ();_bad ._cbf .Tx .SerTxChoice .V =&s ;};func (_egd CategoryAxis )SetCrosses (axis Axis ){_egd ._fea .AxSharedChoice =_d .NewEG_AxSharedChoice ();_egd ._fea .AxSharedChoice .Crosses =_d .NewCT_Crosses ();
_egd ._fea .AxSharedChoice .Crosses .ValAttr =_d .ST_CrossesAutoZero ;_egd ._fea .CrossAx .ValAttr =axis .AxisID ();};

// SetValues sets values directly on a source.
func (_dcg NumberDataSource )SetValues (v []float64 ){_dcg .ensureChoice ();_dcg ._fce .NumDataSourceChoice .NumRef =nil ;_dcg ._fce .NumDataSourceChoice .NumLit =_d .NewCT_NumData ();_dcg ._fce .NumDataSourceChoice .NumLit .PtCount =_d .NewCT_UnsignedInt ();
_dcg ._fce .NumDataSourceChoice .NumLit .PtCount .ValAttr =uint32 (len (v ));for _efe ,_fcg :=range v {_dcg ._fce .NumDataSourceChoice .NumLit .Pt =append (_dcg ._fce .NumDataSourceChoice .NumLit .Pt ,&_d .CT_NumVal {IdxAttr :uint32 (_efe ),V :_fd .Sprintf ("\u0025\u0067",_fcg )});
};};

// AddArea3DChart adds a new area chart to a chart.
func (_dcca Chart )AddArea3DChart ()Area3DChart {_dgd (_dcca ._bfe .Chart );_dfbg :=_d .NewCT_PlotAreaChoice ();_dcca ._bfe .Chart .PlotArea .PlotAreaChoice =append (_dcca ._bfe .Chart .PlotArea .PlotAreaChoice ,_dfbg );_dfbg .Area3DChart =_d .NewCT_Area3DChart ();
_aga :=Area3DChart {_ce :_dfbg .Area3DChart };_aga .InitializeDefaults ();return _aga ;};func (_beae SeriesAxis )SetCrosses (axis Axis ){_beae ._fgge .CrossAx .ValAttr =axis .AxisID ()};

// SetType sets the type the secone pie to either pie or bar
func (_ddcf PieOfPieChart )SetType (t _d .ST_OfPieType ){_ddcf ._cgb .OfPieType .ValAttr =t };func (_dcgf ValueAxis )SetPosition (p _d .ST_AxPos ){_dcgf ._edb .AxPos =_d .NewCT_AxPos ();_dcgf ._edb .AxPos .ValAttr =p ;};func (_feae ValueAxis )MajorGridLines ()GridLines {if _feae ._edb .MajorGridlines ==nil {_feae ._edb .MajorGridlines =_d .NewCT_ChartLines ();
};return GridLines {_feae ._edb .MajorGridlines };};

// SetText sets the series text
func (_cgcg SurfaceChartSeries )SetText (s string ){_cgcg ._gcfe .Tx =_d .NewCT_SerTx ();_cgcg ._gcfe .Tx .SerTxChoice .V =&s ;};func (_eeg ScatterChartSeries )Values ()NumberDataSource {if _eeg ._edcg .YVal ==nil {_eeg ._edcg .YVal =_d .NewCT_NumDataSource ();
};return MakeNumberDataSource (_eeg ._edcg .YVal );};

// Labels returns the data label properties.
func (_ecdf LineChartSeries )Labels ()DataLabels {if _ecdf ._cac .DLbls ==nil {_ecdf ._cac .DLbls =_d .NewCT_DLbls ();};return MakeDataLabels (_ecdf ._cac .DLbls );};

// AddSeries adds a default series to an area chart.
func (_ga AreaChart )AddSeries ()AreaChartSeries {_db :=_ga .nextColor (len (_ga ._dfe .Ser ));_ec :=_d .NewCT_AreaSer ();_ga ._dfe .Ser =append (_ga ._dfe .Ser ,_ec );_ec .Idx .ValAttr =uint32 (len (_ga ._dfe .Ser )-1);_ec .Order .ValAttr =uint32 (len (_ga ._dfe .Ser )-1);
_be :=AreaChartSeries {_ec };_be .InitializeDefaults ();_be .Properties ().SetSolidFill (_db );return _be ;};

// AddSeries adds a default series to an Pie chart.
func (_fcda PieOfPieChart )AddSeries ()PieChartSeries {_gbe :=_d .NewCT_PieSer ();_fcda ._cgb .Ser =append (_fcda ._cgb .Ser ,_gbe );_gbe .Idx .ValAttr =uint32 (len (_fcda ._cgb .Ser )-1);_gbe .Order .ValAttr =uint32 (len (_fcda ._cgb .Ser )-1);_eaeg :=PieChartSeries {_gbe };
_eaeg .InitializeDefaults ();return _eaeg ;};

// Labels returns the data label properties.
func (_bgcb ScatterChartSeries )Labels ()DataLabels {if _bgcb ._edcg .DLbls ==nil {_bgcb ._edcg .DLbls =_d .NewCT_DLbls ();};return MakeDataLabels (_bgcb ._edcg .DLbls );};

// Properties returns the bar chart series shape properties.
func (_bg AreaChartSeries )Properties ()_e .ShapeProperties {if _bg ._gdd .SpPr ==nil {_bg ._gdd .SpPr =_fc .NewCT_ShapeProperties ();};return _e .MakeShapeProperties (_bg ._gdd .SpPr );};

// AddSeries adds a default series to a bar chart.
func (_bf Bar3DChart )AddSeries ()BarChartSeries {_ege :=_bf .nextColor (len (_bf ._aa .Ser ));_ac :=_d .NewCT_BarSer ();_bf ._aa .Ser =append (_bf ._aa .Ser ,_ac );_ac .Idx .ValAttr =uint32 (len (_bf ._aa .Ser )-1);_ac .Order .ValAttr =uint32 (len (_bf ._aa .Ser )-1);
_agg :=BarChartSeries {_ac };_agg .InitializeDefaults ();_agg .Properties ().SetSolidFill (_ege );return _agg ;};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_afa DoughnutChart )SetHoleSize (pct uint8 ){if _afa ._fdg .HoleSize ==nil {_afa ._fdg .HoleSize =_d .NewCT_HoleSize ();};if _afa ._fdg .HoleSize .ValAttr ==nil {_afa ._fdg .HoleSize .ValAttr =&_d .ST_HoleSize {};};_afa ._fdg .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;
};

// X returns the inner wrapped XML type.
func (_cgeg RadarChart )X ()*_d .CT_RadarChart {return _cgeg ._cfea };

// AddSeries adds a default series to an area chart.
func (_a Area3DChart )AddSeries ()AreaChartSeries {_dc :=_a .nextColor (len (_a ._ce .Ser ));_edc :=_d .NewCT_AreaSer ();_a ._ce .Ser =append (_a ._ce .Ser ,_edc );_edc .Idx .ValAttr =uint32 (len (_a ._ce .Ser )-1);_edc .Order .ValAttr =uint32 (len (_a ._ce .Ser )-1);
_df :=AreaChartSeries {_edc };_df .InitializeDefaults ();_df .Properties ().SetSolidFill (_dc );return _df ;};

// Order returns the order of the series
func (_dad LineChartSeries )Order ()uint32 {return _dad ._cac .Order .ValAttr };func (_da Area3DChart )AddAxis (axis Axis ){_fe :=_d .NewCT_UnsignedInt ();_fe .ValAttr =axis .AxisID ();_da ._ce .AxId =append (_da ._ce .AxId ,_fe );};

// CategoryAxis returns the category data source.
func (_eca AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _eca ._gdd .Cat ==nil {_eca ._gdd .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_eca ._gdd .Cat );};

// Properties returns the line chart series shape properties.
func (_acge SurfaceChartSeries )Properties ()_e .ShapeProperties {if _acge ._gcfe .SpPr ==nil {_acge ._gcfe .SpPr =_fc .NewCT_ShapeProperties ();};return _e .MakeShapeProperties (_acge ._gcfe .SpPr );};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_abc Chart )SetDisplayBlanksAs (v _d .ST_DispBlanksAs ){_abc ._bfe .Chart .DispBlanksAs =_d .NewCT_DispBlanksAs ();_abc ._bfe .Chart .DispBlanksAs .ValAttr =v ;};

// X returns the inner wrapped XML type.
func (_daa ValueAxis )X ()*_d .CT_ValAx {return _daa ._edb };

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_bca *_d .CT_BubbleSer };

// RemoveLegend removes the legend if the chart has one.
func (_bdg Chart )RemoveLegend (){_bdg ._bfe .Chart .Legend =nil };

// X returns the inner wrapped XML type.
func (_fadc LineChart )X ()*_d .CT_LineChart {return _fadc ._afd };

// InitializeDefaults the Bubble chart to its defaults
func (_ef BubbleChart )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_eda PieOfPieChart )X ()*_d .CT_OfPieChart {return _eda ._cgb };type GridLines struct{_ffde *_d .CT_ChartLines };func (_dff Marker )Properties ()_e .ShapeProperties {if _dff ._faef .SpPr ==nil {_dff ._faef .SpPr =_fc .NewCT_ShapeProperties ();};return _e .MakeShapeProperties (_dff ._faef .SpPr );
};

// Properties returns the Bubble chart series shape properties.
func (_ggac BubbleChartSeries )Properties ()_e .ShapeProperties {if _ggac ._bca .SpPr ==nil {_ggac ._bca .SpPr =_fc .NewCT_ShapeProperties ();};return _e .MakeShapeProperties (_ggac ._bca .SpPr );};type DateAxis struct{_fcd *_d .CT_DateAx };

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_gb *_d .CT_BarSer };

// InitializeDefaults the bar chart to its defaults
func (_ffd DoughnutChart )InitializeDefaults (){_ffd ._fdg .VaryColors =_d .NewCT_Boolean ();_ffd ._fdg .VaryColors .ValAttr =_c .Bool (true );_ffd ._fdg .HoleSize =_d .NewCT_HoleSize ();_ffd ._fdg .HoleSize .ValAttr =&_d .ST_HoleSize {};_ffd ._fdg .HoleSize .ValAttr .ST_HoleSizeUByte =_c .Uint8 (50);
};func (_cdag ValueAxis )SetCrosses (axis Axis ){_cdag ._edb .CrossAx .ValAttr =axis .AxisID ()};

// Values returns the value data source.
func (_ag AreaChartSeries )Values ()NumberDataSource {if _ag ._gdd .Val ==nil {_ag ._gdd .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_ag ._gdd .Val );};

// AddBubbleChart adds a new bubble chart.
func (_cfb Chart )AddBubbleChart ()BubbleChart {_eag :=_d .NewCT_PlotAreaChoice ();_cfb ._bfe .Chart .PlotArea .PlotAreaChoice =append (_cfb ._bfe .Chart .PlotArea .PlotAreaChoice ,_eag );_eag .BubbleChart =_d .NewCT_BubbleChart ();_fgbd :=BubbleChart {_bbf :_eag .BubbleChart };
_fgbd .InitializeDefaults ();return _fgbd ;};

// AddAxis adds an axis to a Surface chart.
func (_dbd SurfaceChart )AddAxis (axis Axis ){_bcdg :=_d .NewCT_UnsignedInt ();_bcdg .ValAttr =axis .AxisID ();_dbd ._cfc .AxId =append (_dbd ._cfc .AxId ,_bcdg );};

// SetDirection changes the direction of the bar chart (bar or column).
func (_dcc BarChart )SetDirection (d _d .ST_BarDir ){_dcc ._ada .BarDir .ValAttr =d };func (_bfg ValueAxis )Properties ()_e .ShapeProperties {if _bfg ._edb .SpPr ==nil {_bfg ._edb .SpPr =_fc .NewCT_ShapeProperties ();};return _e .MakeShapeProperties (_bfg ._edb .SpPr );
};

// SetText sets the series text.
func (_bgag BarChartSeries )SetText (s string ){_bgag ._gb .Tx =_d .NewCT_SerTx ();_bgag ._gb .Tx .SerTxChoice .V =&s ;};

// InitializeDefaults initializes an Radar series to the default values.
func (_ecde RadarChartSeries )InitializeDefaults (){};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_dgde *_d .CT_Pie3DChart ;};

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_dfb *_d .CT_AxDataSource };func (_gce DateAxis )SetMinorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_gce ._fcd .MinorTickMark =nil ;}else {_gce ._fcd .MinorTickMark =_d .NewCT_TickMark ();_gce ._fcd .MinorTickMark .ValAttr =m ;
};};func (_bcf LineChartSeries )Values ()NumberDataSource {if _bcf ._cac .Val ==nil {_bcf ._cac .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_bcf ._cac .Val );};func (_ba DataLabels )SetShowLeaderLines (b bool ){_ba .ensureChoice ();
_ba ._aedg .DLblsChoice .ShowLeaderLines =_d .NewCT_Boolean ();_ba ._aedg .DLblsChoice .ShowLeaderLines .ValAttr =_c .Bool (b );};

// SetIndex sets the index of the series
func (_bgaa SurfaceChartSeries )SetIndex (idx uint32 ){_bgaa ._gcfe .Idx .ValAttr =idx };func MakeCategoryAxis (x *_d .CT_CatAx )CategoryAxis {return CategoryAxis {x }};

// X returns the inner wrapped XML type.
func (_ea BubbleChartSeries )X ()*_d .CT_BubbleSer {return _ea ._bca };

// AddCategoryAxis adds a category axis.
func (_caf Chart )AddCategoryAxis ()CategoryAxis {_cag :=_d .NewCT_CatAx ();if _caf ._bfe .Chart .PlotArea .PlotAreaChoice1 ==nil {_caf ._bfe .Chart .PlotArea .PlotAreaChoice1 =[]*_d .CT_PlotAreaChoice1 {};};_cag .AxId =_d .NewCT_UnsignedInt ();_cag .AxId .ValAttr =0x7FFFFFFF&_ff .Uint32 ();
_caf ._bfe .Chart .PlotArea .PlotAreaChoice1 =append (_caf ._bfe .Chart .PlotArea .PlotAreaChoice1 ,&_d .CT_PlotAreaChoice1 {CatAx :_cag });_cag .Auto =_d .NewCT_Boolean ();_cag .Auto .ValAttr =_c .Bool (true );_cag .Delete =_d .NewCT_Boolean ();_cag .Delete .ValAttr =_c .Bool (false );
_dgf :=MakeCategoryAxis (_cag );_dgf .InitializeDefaults ();return _dgf ;};

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_bgc Chart )AddSurface3DChart ()Surface3DChart {_ccc :=_d .NewCT_PlotAreaChoice ();_bgc ._bfe .Chart .PlotArea .PlotAreaChoice =append (_bgc ._bfe .Chart .PlotArea .PlotAreaChoice ,_ccc );_ccc .Surface3DChart =_d .NewCT_Surface3DChart ();_dgd (_bgc ._bfe .Chart );
_feg :=Surface3DChart {_gba :_ccc .Surface3DChart };_feg .InitializeDefaults ();return _feg ;};

// AddSeries adds a default series to a Stock chart.
func (_bdab StockChart )AddSeries ()LineChartSeries {_dgae :=_d .NewCT_LineSer ();_bdab ._bgd .Ser =append (_bdab ._bgd .Ser ,_dgae );_dgae .Idx .ValAttr =uint32 (len (_bdab ._bgd .Ser )-1);_dgae .Order .ValAttr =uint32 (len (_bdab ._bgd .Ser )-1);_eeb :=LineChartSeries {_dgae };
_eeb .Values ().CreateEmptyNumberCache ();_eeb .Properties ().LineProperties ().SetNoFill ();return _eeb ;};func (_bed DateAxis )AxisID ()uint32 {return _bed ._fcd .AxId .ValAttr };func (_bgea CategoryAxis )SetMajorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_bgea ._fea .MajorTickMark =nil ;
}else {_bgea ._fea .MajorTickMark =_d .NewCT_TickMark ();_bgea ._fea .MajorTickMark .ValAttr =m ;};};func (_ffaa ValueAxis )SetTickLabelPosition (p _d .ST_TickLblPos ){if p ==_d .ST_TickLblPosUnset {_ffaa ._edb .TickLblPos =nil ;}else {_ffaa ._edb .TickLblPos =_d .NewCT_TickLblPos ();
_ffaa ._edb .TickLblPos .ValAttr =p ;};};

// Order returns the order of the series
func (_fbe ScatterChartSeries )Order ()uint32 {return _fbe ._edcg .Order .ValAttr };

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_aeb CategoryAxisDataSource )SetNumberReference (s string ){_aeb ._dfb .AxDataSourceChoice =_d .NewCT_AxDataSourceChoice ();_aeb ._dfb .AxDataSourceChoice .NumRef =_d .NewCT_NumRef ();_aeb ._dfb .AxDataSourceChoice .NumRef .F =s ;};

// Marker returns the marker properties.
func (_fegd ScatterChartSeries )Marker ()Marker {if _fegd ._edcg .Marker ==nil {_fegd ._edcg .Marker =_d .NewCT_Marker ();};return MakeMarker (_fegd ._edcg .Marker );};func (_fef NumberDataSource )ensureChoice (){if _fef ._fce .NumDataSourceChoice ==nil {_fef ._fce .NumDataSourceChoice =_d .NewCT_NumDataSourceChoice ();
};};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_fff CategoryAxisDataSource )SetLabelReference (s string ){_fff ._dfb .AxDataSourceChoice =_d .NewCT_AxDataSourceChoice ();_fff ._dfb .AxDataSourceChoice .StrRef =_d .NewCT_StrRef ();_fff ._dfb .AxDataSourceChoice .StrRef .F =s ;};