//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_f "fmt";_ge "github.com/unidoc/unioffice/v2";_ff "github.com/unidoc/unioffice/v2/color";_fd "github.com/unidoc/unioffice/v2/drawing";_g "github.com/unidoc/unioffice/v2/measurement";_ffa "github.com/unidoc/unioffice/v2/schema/soo/dml";
_d "github.com/unidoc/unioffice/v2/schema/soo/dml/chart";_df "math/rand";);func (_ebb DateAxis )SetMajorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_ebb ._cce .MajorTickMark =nil ;}else {_ebb ._cce .MajorTickMark =_d .NewCT_TickMark ();_ebb ._cce .MajorTickMark .ValAttr =m ;
};};

// InitializeDefaults the Stock chart to its defaults
func (_cded StockChart )InitializeDefaults (){_cded ._ffag .HiLowLines =_d .NewCT_ChartLines ();_cded ._ffag .UpDownBars =_d .NewCT_UpDownBars ();_cded ._ffag .UpDownBars .GapWidth =_d .NewCT_GapAmount ();_cded ._ffag .UpDownBars .GapWidth .ValAttr =&_d .ST_GapAmount {};
_cded ._ffag .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_ge .Uint16 (150);_cded ._ffag .UpDownBars .UpBars =_d .NewCT_UpDownBar ();_cded ._ffag .UpDownBars .DownBars =_d .NewCT_UpDownBar ();};

// AddBarChart adds a new bar chart to a chart.
func (_gac Chart )AddBarChart ()BarChart {_gcb :=_d .NewCT_PlotAreaChoice ();_gac ._cbf .Chart .PlotArea .PlotAreaChoice =append (_gac ._cbf .Chart .PlotArea .PlotAreaChoice ,_gcb );_gcb .BarChart =_d .NewCT_BarChart ();_gcb .BarChart .Grouping =_d .NewCT_BarGrouping ();
_gcb .BarChart .Grouping .ValAttr =_d .ST_BarGroupingStandard ;_fgd :=BarChart {_gfb :_gcb .BarChart };_fgd .InitializeDefaults ();return _fgd ;};func (_dbd ValueAxis )SetMinorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_dbd ._cbc .MinorTickMark =nil ;
}else {_dbd ._cbc .MinorTickMark =_d .NewCT_TickMark ();_dbd ._cbc .MinorTickMark .ValAttr =m ;};};

// InitializeDefaults the bar chart to its defaults
func (_e Area3DChart )InitializeDefaults (){};func (_acfe ValueAxis )MajorGridLines ()GridLines {if _acfe ._cbc .MajorGridlines ==nil {_acfe ._cbc .MajorGridlines =_d .NewCT_ChartLines ();};return GridLines {_acfe ._cbc .MajorGridlines };};type SeriesAxis struct{_ebg *_d .CT_SerAx };


// Values returns the bubble size data source.
func (_fec BubbleChartSeries )BubbleSizes ()NumberDataSource {if _fec ._aag .BubbleSize ==nil {_fec ._aag .BubbleSize =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_fec ._aag .BubbleSize );};

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_acaa *_d .CT_Surface3DChart ;};func (_cad ValueAxis )SetMajorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_cad ._cbc .MajorTickMark =nil ;}else {_cad ._cbc .MajorTickMark =_d .NewCT_TickMark ();_cad ._cbc .MajorTickMark .ValAttr =m ;
};};

// X returns the inner wrapped XML type.
func (_cbbe PieChart )X ()*_d .CT_PieChart {return _cbbe ._bba };

// AddSeries adds a default series to an area chart.
func (_gd Area3DChart )AddSeries ()AreaChartSeries {_c :=_gd .nextColor (len (_gd ._gf .Ser ));_ga :=_d .NewCT_AreaSer ();_gd ._gf .Ser =append (_gd ._gf .Ser ,_ga );_ga .Idx .ValAttr =uint32 (len (_gd ._gf .Ser )-1);_ga .Order .ValAttr =uint32 (len (_gd ._gf .Ser )-1);
_ed :=AreaChartSeries {_ga };_ed .InitializeDefaults ();_ed .Properties ().SetSolidFill (_c );return _ed ;};

// AddSeries adds a default series to a bar chart.
func (_ffc Bar3DChart )AddSeries ()BarChartSeries {_gfa :=_ffc .nextColor (len (_ffc ._af .Ser ));_cg :=_d .NewCT_BarSer ();_ffc ._af .Ser =append (_ffc ._af .Ser ,_cg );_cg .Idx .ValAttr =uint32 (len (_ffc ._af .Ser )-1);_cg .Order .ValAttr =uint32 (len (_ffc ._af .Ser )-1);
_edb :=BarChartSeries {_cg };_edb .InitializeDefaults ();_edb .Properties ().SetSolidFill (_gfa );return _edb ;};

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_fddb *_d .CT_PieSer };

// Properties returns the bar chart series shape properties.
func (_ffca PieChartSeries )Properties ()_fd .ShapeProperties {if _ffca ._fddb .SpPr ==nil {_ffca ._fddb .SpPr =_ffa .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_ffca ._fddb .SpPr );};

// AddSeries adds a default series to an Radar chart.
func (_dbce RadarChart )AddSeries ()RadarChartSeries {_daac :=_dbce .nextColor (len (_dbce ._cedd .Ser ));_adffg :=_d .NewCT_RadarSer ();_dbce ._cedd .Ser =append (_dbce ._cedd .Ser ,_adffg );_adffg .Idx .ValAttr =uint32 (len (_dbce ._cedd .Ser )-1);_adffg .Order .ValAttr =uint32 (len (_dbce ._cedd .Ser )-1);
_ffe :=RadarChartSeries {_adffg };_ffe .InitializeDefaults ();_ffe .Properties ().SetSolidFill (_daac );return _ffe ;};func (_fcd BarChart )AddAxis (axis Axis ){_deb :=_d .NewCT_UnsignedInt ();_deb .ValAttr =axis .AxisID ();_fcd ._gfb .AxId =append (_fcd ._gfb .AxId ,_deb );
};

// AddCategoryAxis adds a category axis.
func (_ffb Chart )AddCategoryAxis ()CategoryAxis {_dedb :=_d .NewCT_CatAx ();if _ffb ._cbf .Chart .PlotArea .PlotAreaChoice1 ==nil {_ffb ._cbf .Chart .PlotArea .PlotAreaChoice1 =[]*_d .CT_PlotAreaChoice1 {};};_dedb .AxId =_d .NewCT_UnsignedInt ();_dedb .AxId .ValAttr =0x7FFFFFFF&_df .Uint32 ();
_ffb ._cbf .Chart .PlotArea .PlotAreaChoice1 =append (_ffb ._cbf .Chart .PlotArea .PlotAreaChoice1 ,&_d .CT_PlotAreaChoice1 {CatAx :_dedb });_dedb .Auto =_d .NewCT_Boolean ();_dedb .Auto .ValAttr =_ge .Bool (true );_dedb .Delete =_d .NewCT_Boolean ();_dedb .Delete .ValAttr =_ge .Bool (false );
_bee :=MakeCategoryAxis (_dedb );_bee .InitializeDefaults ();return _bee ;};

// SetOrder sets the order of the series
func (_faaf SurfaceChartSeries )SetOrder (idx uint32 ){_faaf ._bde .Order .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_becf ScatterChart )X ()*_d .CT_ScatterChart {return _becf ._afd };

// AddRadarChart adds a new radar chart to a chart.
func (_da Chart )AddRadarChart ()RadarChart {_fdd :=_d .NewCT_PlotAreaChoice ();_da ._cbf .Chart .PlotArea .PlotAreaChoice =append (_da ._cbf .Chart .PlotArea .PlotAreaChoice ,_fdd );_fdd .RadarChart =_d .NewCT_RadarChart ();_adb :=RadarChart {_cedd :_fdd .RadarChart };
_adb .InitializeDefaults ();return _adb ;};

// InitializeDefaults the bar chart to its defaults
func (_gdbf Pie3DChart )InitializeDefaults (){_gdbf ._aeg .VaryColors =_d .NewCT_Boolean ();_gdbf ._aeg .VaryColors .ValAttr =_ge .Bool (true );};func (_dce Legend )Properties ()_fd .ShapeProperties {if _dce ._bce .SpPr ==nil {_dce ._bce .SpPr =_ffa .NewCT_ShapeProperties ();
};return _fd .MakeShapeProperties (_dce ._bce .SpPr );};

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_d .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};

// SetDirection changes the direction of the bar chart (bar or column).
func (_egd BarChart )SetDirection (d _d .ST_BarDir ){_egd ._gfb .BarDir .ValAttr =d };

// X returns the inner wrapped XML type.
func (_cgaba SurfaceChartSeries )X ()*_d .CT_SurfaceSer {return _cgaba ._bde };

// X returns the inner wrapped XML type.
func (_efec ValueAxis )X ()*_d .CT_ValAx {return _efec ._cbc };

// AddSeries adds a default series to a Stock chart.
func (_cfg StockChart )AddSeries ()LineChartSeries {_dabf :=_d .NewCT_LineSer ();_cfg ._ffag .Ser =append (_cfg ._ffag .Ser ,_dabf );_dabf .Idx .ValAttr =uint32 (len (_cfg ._ffag .Ser )-1);_dabf .Order .ValAttr =uint32 (len (_cfg ._ffag .Ser )-1);_fca :=LineChartSeries {_dabf };
_fca .Values ().CreateEmptyNumberCache ();_fca .Properties ().LineProperties ().SetNoFill ();return _fca ;};

// AddSeries adds a default series to an Pie chart.
func (_edf PieChart )AddSeries ()PieChartSeries {_affb :=_d .NewCT_PieSer ();_edf ._bba .Ser =append (_edf ._bba .Ser ,_affb );_affb .Idx .ValAttr =uint32 (len (_edf ._bba .Ser )-1);_affb .Order .ValAttr =uint32 (len (_edf ._bba .Ser )-1);_ebd :=PieChartSeries {_affb };
_ebd .InitializeDefaults ();return _ebd ;};

// AddLineChart adds a new line chart to a chart.
func (_gab Chart )AddLineChart ()LineChart {_bdd :=_d .NewCT_PlotAreaChoice ();_gab ._cbf .Chart .PlotArea .PlotAreaChoice =append (_gab ._cbf .Chart .PlotArea .PlotAreaChoice ,_bdd );_bdd .LineChart =_d .NewCT_LineChart ();_bdd .LineChart .Grouping =_d .NewCT_Grouping ();
_bdd .LineChart .Grouping .ValAttr =_d .ST_GroupingStandard ;return LineChart {_eab :_bdd .LineChart };};

// X returns the inner wrapped XML type.
func (_acff DateAxis )X ()*_d .CT_DateAx {return _acff ._cce };

// X returns the inner wrapped XML type.
func (_dgcc Surface3DChart )X ()*_d .CT_Surface3DChart {return _dgcc ._acaa };

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_gfb *_d .CT_BarChart ;};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_adf *_d .CT_AreaSer };

// Values returns the value data source.
func (_ggbf RadarChartSeries )Values ()NumberDataSource {if _ggbf ._ffcc .Val ==nil {_ggbf ._ffcc .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_ggbf ._ffcc .Val );};func MakeLegend (l *_d .CT_Legend )Legend {return Legend {l }};func (_dcfg DataLabels )SetShowLegendKey (b bool ){_dcfg .ensureChoice ();
_dcfg ._baa .DLblsChoice .ShowLegendKey =_d .NewCT_Boolean ();_dcfg ._baa .DLblsChoice .ShowLegendKey .ValAttr =_ge .Bool (b );};

// Properties returns the bar chart series shape properties.
func (_ef AreaChartSeries )Properties ()_fd .ShapeProperties {if _ef ._adf .SpPr ==nil {_ef ._adf .SpPr =_ffa .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_ef ._adf .SpPr );};func (_fecc DateAxis )MajorGridLines ()GridLines {if _fecc ._cce .MajorGridlines ==nil {_fecc ._cce .MajorGridlines =_d .NewCT_ChartLines ();
};return GridLines {_fecc ._cce .MajorGridlines };};

// CategoryAxis returns the category data source.
func (_aee BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _aee ._aag .XVal ==nil {_aee ._aag .XVal =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_aee ._aag .XVal );};func (_feca Title )InitializeDefaults (){_feca .SetText ("\u0054\u0069\u0074l\u0065");
_feca .RunProperties ().SetSize (16*_g .Point );_feca .RunProperties ().SetSolidFill (_ff .Black );_feca .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_feca .RunProperties ().SetBold (false );};

// Properties returns the chart's shape properties.
func (_fab Chart )Properties ()_fd .ShapeProperties {if _fab ._cbf .SpPr ==nil {_fab ._cbf .SpPr =_ffa .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_fab ._cbf .SpPr );};

// AddSeries adds a default series to a line chart.
func (_gadb LineChart )AddSeries ()LineChartSeries {_daa :=_gadb .nextColor (len (_gadb ._eab .Ser ));_dcca :=_d .NewCT_LineSer ();_gadb ._eab .Ser =append (_gadb ._eab .Ser ,_dcca );_dcca .Idx .ValAttr =uint32 (len (_gadb ._eab .Ser )-1);_dcca .Order .ValAttr =uint32 (len (_gadb ._eab .Ser )-1);
_eda :=LineChartSeries {_dcca };_eda .InitializeDefaults ();_eda .Properties ().LineProperties ().SetSolidFill (_daa );return _eda ;};type CategoryAxis struct{_eae *_d .CT_CatAx };func (_bdc CategoryAxis )SetPosition (p _d .ST_AxPos ){_bdc ._eae .AxPos =_d .NewCT_AxPos ();
_bdc ._eae .AxPos .ValAttr =p ;};

// X returns the inner wrapped XML type.
func (_acaf SurfaceChart )X ()*_d .CT_SurfaceChart {return _acaf ._acab };

// CategoryAxis returns the category data source.
func (_bcb BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bcb ._bgb .Cat ==nil {_bcb ._bgb .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_bcb ._bgb .Cat );};

// SetText sets the series text.
func (_bfd PieChartSeries )SetText (s string ){_bfd ._fddb .Tx =_d .NewCT_SerTx ();_bfd ._fddb .Tx .SerTxChoice .V =&s ;};

// InitializeDefaults initializes a bar chart series to the default values.
func (_gb BarChartSeries )InitializeDefaults (){};func (_fed SeriesAxis )InitializeDefaults (){};func (_de nullAxis )AxisID ()uint32 {return 0};func (_bfdb SurfaceChartSeries )Values ()NumberDataSource {if _bfdb ._bde .Val ==nil {_bfdb ._bde .Val =_d .NewCT_NumDataSource ();
};_fbc :=MakeNumberDataSource (_bfdb ._bde .Val );_fbc .CreateEmptyNumberCache ();return _fbc ;};func (_fff Title )RunProperties ()_fd .RunProperties {if _fff ._efg .Tx ==nil {_fff .SetText ("");};if _fff ._efg .Tx .TxChoice .Rich .P [0].EG_TextRun [0].TextRunChoice .R .RPr ==nil {_fff ._efg .Tx .TxChoice .Rich .P [0].EG_TextRun [0].TextRunChoice .R .RPr =_ffa .NewCT_TextCharacterProperties ();
};return _fd .MakeRunProperties (_fff ._efg .Tx .TxChoice .Rich .P [0].EG_TextRun [0].TextRunChoice .R .RPr );};func (_bbf DataLabels )SetShowSeriesName (b bool ){_bbf .ensureChoice ();_bbf ._baa .DLblsChoice .ShowSerName =_d .NewCT_Boolean ();_bbf ._baa .DLblsChoice .ShowSerName .ValAttr =_ge .Bool (b );
};

// AddArea3DChart adds a new area chart to a chart.
func (_acd Chart )AddArea3DChart ()Area3DChart {_gc (_acd ._cbf .Chart );_efb :=_d .NewCT_PlotAreaChoice ();_acd ._cbf .Chart .PlotArea .PlotAreaChoice =append (_acd ._cbf .Chart .PlotArea .PlotAreaChoice ,_efb );_efb .Area3DChart =_d .NewCT_Area3DChart ();
_gca :=Area3DChart {_gf :_efb .Area3DChart };_gca .InitializeDefaults ();return _gca ;};func (_ac AreaChart )AddAxis (axis Axis ){_dbc :=_d .NewCT_UnsignedInt ();_dbc .ValAttr =axis .AxisID ();_ac ._cc .AxId =append (_ac ._cc .AxId ,_dbc );};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_cea Chart )SetDisplayBlanksAs (v _d .ST_DispBlanksAs ){_cea ._cbf .Chart .DispBlanksAs =_d .NewCT_DispBlanksAs ();_cea ._cbf .Chart .DispBlanksAs .ValAttr =v ;};

// SetType sets the type the secone pie to either pie or bar
func (_gef PieOfPieChart )SetType (t _d .ST_OfPieType ){_gef ._abf .OfPieType .ValAttr =t };func (_dbcdd SurfaceChart )InitializeDefaults (){_dbcdd ._acab .Wireframe =_d .NewCT_Boolean ();_dbcdd ._acab .Wireframe .ValAttr =_ge .Bool (false );_dbcdd ._acab .BandFmts =_d .NewCT_BandFmts ();
for _fee :=0;_fee < 15;_fee ++{_feed :=_d .NewCT_BandFmt ();_feed .Idx .ValAttr =uint32 (_fee );_feed .SpPr =_ffa .NewCT_ShapeProperties ();_cfc :=_fd .MakeShapeProperties (_feed .SpPr );_cfc .SetSolidFill (_dbcdd .nextColor (_fee ));_dbcdd ._acab .BandFmts .BandFmt =append (_dbcdd ._acab .BandFmts .BandFmt ,_feed );
};};

// Labels returns the data label properties.
func (_cafg ScatterChartSeries )Labels ()DataLabels {if _cafg ._aafb .DLbls ==nil {_cafg ._aafb .DLbls =_d .NewCT_DLbls ();};return MakeDataLabels (_cafg ._aafb .DLbls );};

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_eba Chart )AddDoughnutChart ()DoughnutChart {_fgf :=_d .NewCT_PlotAreaChoice ();_eba ._cbf .Chart .PlotArea .PlotAreaChoice =append (_eba ._cbf .Chart .PlotArea .PlotAreaChoice ,_fgf );_fgf .DoughnutChart =_d .NewCT_DoughnutChart ();_fgc :=DoughnutChart {_egdc :_fgf .DoughnutChart };
_fgc .InitializeDefaults ();return _fgc ;};

// AddSeries adds a default series to a Bubble chart.
func (_abe BubbleChart )AddSeries ()BubbleChartSeries {_dcf :=_abe .nextColor (len (_abe ._bf .Ser ));_gbb :=_d .NewCT_BubbleSer ();_abe ._bf .Ser =append (_abe ._bf .Ser ,_gbb );_gbb .Idx .ValAttr =uint32 (len (_abe ._bf .Ser )-1);_gbb .Order .ValAttr =uint32 (len (_abe ._bf .Ser )-1);
_gge :=BubbleChartSeries {_gbb };_gge .InitializeDefaults ();_gge .Properties ().SetSolidFill (_dcf );return _gge ;};

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_acab *_d .CT_SurfaceChart ;};

// AddLine3DChart adds a new 3D line chart to a chart.
func (_gdb Chart )AddLine3DChart ()Line3DChart {_gc (_gdb ._cbf .Chart );_gbg :=_d .NewCT_PlotAreaChoice ();_gdb ._cbf .Chart .PlotArea .PlotAreaChoice =append (_gdb ._cbf .Chart .PlotArea .PlotAreaChoice ,_gbg );_gbg .Line3DChart =_d .NewCT_Line3DChart ();
_gbg .Line3DChart .Grouping =_d .NewCT_Grouping ();_gbg .Line3DChart .Grouping .ValAttr =_d .ST_GroupingStandard ;return Line3DChart {_edc :_gbg .Line3DChart };};func (_egga SeriesAxis )SetCrosses (axis Axis ){_egga ._ebg .CrossAx .ValAttr =axis .AxisID ()};


// AddStockChart adds a new stock chart.
func (_adfb Chart )AddStockChart ()StockChart {_bfc :=_d .NewCT_PlotAreaChoice ();_adfb ._cbf .Chart .PlotArea .PlotAreaChoice =append (_adfb ._cbf .Chart .PlotArea .PlotAreaChoice ,_bfc );_bfc .StockChart =_d .NewCT_StockChart ();_gdbb :=StockChart {_ffag :_bfc .StockChart };
_gdbb .InitializeDefaults ();return _gdbb ;};

// SetIndex sets the index of the series
func (_cfgb SurfaceChartSeries )SetIndex (idx uint32 ){_cfgb ._bde .Idx .ValAttr =idx };

// InitializeDefaults the bar chart to its defaults
func (_fb BarChart )InitializeDefaults (){_fb .SetDirection (_d .ST_BarDirCol )};

// X returns the inner wrapped XML type.
func (_geg AreaChart )X ()*_d .CT_AreaChart {return _geg ._cc };

// InitializeDefaults initializes an Radar series to the default values.
func (_ebdd RadarChartSeries )InitializeDefaults (){};func (_cgc Chart )AddSeriesAxis ()SeriesAxis {_daf :=_d .NewCT_SerAx ();if _cgc ._cbf .Chart .PlotArea .PlotAreaChoice1 ==nil {_cgc ._cbf .Chart .PlotArea .PlotAreaChoice1 =[]*_d .CT_PlotAreaChoice1 {};
};_daf .AxId =_d .NewCT_UnsignedInt ();_daf .AxId .ValAttr =0x7FFFFFFF&_df .Uint32 ();_cgc ._cbf .Chart .PlotArea .PlotAreaChoice1 =append (_cgc ._cbf .Chart .PlotArea .PlotAreaChoice1 ,&_d .CT_PlotAreaChoice1 {SerAx :_daf });_daf .Delete =_d .NewCT_Boolean ();
_daf .Delete .ValAttr =_ge .Bool (false );_bb :=MakeSeriesAxis (_daf );_bb .InitializeDefaults ();return _bb ;};func (_geb SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _geb ._bde .Cat ==nil {_geb ._bde .Cat =_d .NewCT_AxDataSource ();};
return MakeAxisDataSource (_geb ._bde .Cat );};

// X returns the inner wrapped XML type.
func (_gg BubbleChart )X ()*_d .CT_BubbleChart {return _gg ._bf };

// InitializeDefaults the bar chart to its defaults
func (_ea AreaChart )InitializeDefaults (){};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_ffcc *_d .CT_RadarSer };func (_gege DataLabels )SetShowValue (b bool ){_gege .ensureChoice ();_gege ._baa .DLblsChoice .ShowVal =_d .NewCT_Boolean ();_gege ._baa .DLblsChoice .ShowVal .ValAttr =_ge .Bool (b );};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_bf *_d .CT_BubbleChart ;};

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_cedd *_d .CT_RadarChart ;};

// CategoryAxis returns the category data source.
func (_bg AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bg ._adf .Cat ==nil {_bg ._adf .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_bg ._adf .Cat );};func (_cfe Legend )SetPosition (p _d .ST_LegendPos ){if p ==_d .ST_LegendPosUnset {_cfe ._bce .LegendPos =nil ;
}else {_cfe ._bce .LegendPos =_d .NewCT_LegendPos ();_cfe ._bce .LegendPos .ValAttr =p ;};};

// RemoveLegend removes the legend if the chart has one.
func (_efc Chart )RemoveLegend (){_efc ._cbf .Chart .Legend =nil };

// AddSeries adds a default series to a Surface chart.
func (_fag Surface3DChart )AddSeries ()SurfaceChartSeries {_dge :=_fag .nextColor (len (_fag ._acaa .Ser ));_aeca :=_d .NewCT_SurfaceSer ();_fag ._acaa .Ser =append (_fag ._acaa .Ser ,_aeca );_aeca .Idx .ValAttr =uint32 (len (_fag ._acaa .Ser )-1);_aeca .Order .ValAttr =uint32 (len (_fag ._acaa .Ser )-1);
_gcf :=SurfaceChartSeries {_aeca };_gcf .InitializeDefaults ();_gcf .Properties ().LineProperties ().SetSolidFill (_dge );return _gcf ;};func (_eed LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _eed ._fcb .Cat ==nil {_eed ._fcb .Cat =_d .NewCT_AxDataSource ();
};return MakeAxisDataSource (_eed ._fcb .Cat );};func (_cbfe chartBase )nextColor (_ebfa int )_ff .Color {return _bca [_ebfa %len (_bca )]};func MakeMarker (x *_d .CT_Marker )Marker {return Marker {x }};

// AddScatterChart adds a scatter (X/Y) chart.
func (_bfe Chart )AddScatterChart ()ScatterChart {_acad :=_d .NewCT_PlotAreaChoice ();_bfe ._cbf .Chart .PlotArea .PlotAreaChoice =append (_bfe ._cbf .Chart .PlotArea .PlotAreaChoice ,_acad );_acad .ScatterChart =_d .NewCT_ScatterChart ();_ded :=ScatterChart {_afd :_acad .ScatterChart };
_ded .InitializeDefaults ();return _ded ;};

// AddDateAxis adds a value axis to the chart.
func (_dcd Chart )AddDateAxis ()DateAxis {_cgab :=_d .NewCT_DateAx ();if _dcd ._cbf .Chart .PlotArea .PlotAreaChoice1 ==nil {_dcd ._cbf .Chart .PlotArea .PlotAreaChoice1 =[]*_d .CT_PlotAreaChoice1 {};};_cgab .AxId =_d .NewCT_UnsignedInt ();_cgab .AxId .ValAttr =0x7FFFFFFF&_df .Uint32 ();
_dcd ._cbf .Chart .PlotArea .PlotAreaChoice1 =append (_dcd ._cbf .Chart .PlotArea .PlotAreaChoice1 ,&_d .CT_PlotAreaChoice1 {DateAx :_cgab });_cgab .Delete =_d .NewCT_Boolean ();_cgab .Delete .ValAttr =_ge .Bool (false );_cgab .Scaling =_d .NewCT_Scaling ();
_cgab .Scaling .Orientation =_d .NewCT_Orientation ();_cgab .Scaling .Orientation .ValAttr =_d .ST_OrientationMinMax ;_cgab .AxSharedChoice =&_d .EG_AxSharedChoice {};_cgab .AxSharedChoice .Crosses =_d .NewCT_Crosses ();_cgab .AxSharedChoice .Crosses .ValAttr =_d .ST_CrossesAutoZero ;
_dff :=DateAxis {_cgab };_dff .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_ff .LightGray );_dff .SetMajorTickMark (_d .ST_TickMarkOut );_dff .SetMinorTickMark (_d .ST_TickMarkIn );_dff .SetTickLabelPosition (_d .ST_TickLblPosNextTo );
_dff .Properties ().LineProperties ().SetSolidFill (_ff .Black );_dff .SetPosition (_d .ST_AxPosL );return _dff ;};func (_eag CategoryAxis )SetTickLabelPosition (p _d .ST_TickLblPos ){if p ==_d .ST_TickLblPosUnset {_eag ._eae .TickLblPos =nil ;}else {_eag ._eae .TickLblPos =_d .NewCT_TickLblPos ();
_eag ._eae .TickLblPos .ValAttr =p ;};};

// SetText sets the series text
func (_eef ScatterChartSeries )SetText (s string ){_eef ._aafb .Tx =_d .NewCT_SerTx ();_eef ._aafb .Tx .SerTxChoice .V =&s ;};func (_dab ScatterChartSeries )SetSmooth (b bool ){_dab ._aafb .Smooth =_d .NewCT_Boolean ();_dab ._aafb .Smooth .ValAttr =&b ;
};func (_adec SeriesAxis )AxisID ()uint32 {return _adec ._ebg .AxId .ValAttr };

// AddSeries adds a default series to an Pie chart.
func (_cead PieOfPieChart )AddSeries ()PieChartSeries {_eaa :=_d .NewCT_PieSer ();_cead ._abf .Ser =append (_cead ._abf .Ser ,_eaa );_eaa .Idx .ValAttr =uint32 (len (_cead ._abf .Ser )-1);_eaa .Order .ValAttr =uint32 (len (_cead ._abf .Ser )-1);_dacb :=PieChartSeries {_eaa };
_dacb .InitializeDefaults ();return _dacb ;};type DataLabels struct{_baa *_d .CT_DLbls };

// Properties returns the line chart series shape properties.
func (_dfcf SurfaceChartSeries )Properties ()_fd .ShapeProperties {if _dfcf ._bde .SpPr ==nil {_dfcf ._bde .SpPr =_ffa .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_dfcf ._bde .SpPr );};func MakeChart (x *_d .ChartSpace )Chart {return Chart {x }};


// CategoryAxis returns the category data source.
func (_aeag RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _aeag ._ffcc .Cat ==nil {_aeag ._ffcc .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_aeag ._ffcc .Cat );};

// AddSeries adds a default series to a Surface chart.
func (_accd SurfaceChart )AddSeries ()SurfaceChartSeries {_aeae :=_accd .nextColor (len (_accd ._acab .Ser ));_dgeb :=_d .NewCT_SurfaceSer ();_accd ._acab .Ser =append (_accd ._acab .Ser ,_dgeb );_dgeb .Idx .ValAttr =uint32 (len (_accd ._acab .Ser )-1);
_dgeb .Order .ValAttr =uint32 (len (_accd ._acab .Ser )-1);_deec :=SurfaceChartSeries {_dgeb };_deec .InitializeDefaults ();_deec .Properties ().LineProperties ().SetSolidFill (_aeae );return _deec ;};func (_eeb ScatterChart )InitializeDefaults (){_eeb ._afd .ScatterStyle .ValAttr =_d .ST_ScatterStyleMarker ;
};

// AddBubbleChart adds a new bubble chart.
func (_bfg Chart )AddBubbleChart ()BubbleChart {_gcg :=_d .NewCT_PlotAreaChoice ();_bfg ._cbf .Chart .PlotArea .PlotAreaChoice =append (_bfg ._cbf .Chart .PlotArea .PlotAreaChoice ,_gcg );_gcg .BubbleChart =_d .NewCT_BubbleChart ();_fef :=BubbleChart {_bf :_gcg .BubbleChart };
_fef .InitializeDefaults ();return _fef ;};func (_ccc DataLabels )SetPosition (p _d .ST_DLblPos ){_ccc .ensureChoice ();_ccc ._baa .DLblsChoice .DLblPos =_d .NewCT_DLblPos ();_ccc ._baa .DLblsChoice .DLblPos .ValAttr =p ;};type LineChart struct{chartBase ;
_eab *_d .CT_LineChart ;};func (_gfgg LineChartSeries )InitializeDefaults (){_gfgg .Properties ().LineProperties ().SetWidth (1*_g .Point );_gfgg .Properties ().LineProperties ().SetSolidFill (_ff .Black );_gfgg .Properties ().LineProperties ().SetJoin (_fd .LineJoinRound );
_gfgg .Marker ().SetSymbol (_d .ST_MarkerStyleNone );_gfgg .Labels ().SetShowLegendKey (false );_gfgg .Labels ().SetShowValue (false );_gfgg .Labels ().SetShowPercent (false );_gfgg .Labels ().SetShowCategoryName (false );_gfgg .Labels ().SetShowSeriesName (false );
_gfgg .Labels ().SetShowLeaderLines (false );};func (_bbfb Legend )SetOverlay (b bool ){_bbfb ._bce .Overlay =_d .NewCT_Boolean ();_bbfb ._bce .Overlay .ValAttr =_ge .Bool (b );};

// AddSeries adds a default series to a Scatter chart.
func (_fddc ScatterChart )AddSeries ()ScatterChartSeries {_gbgf :=_fddc .nextColor (len (_fddc ._afd .Ser ));_fdbd :=_d .NewCT_ScatterSer ();_fddc ._afd .Ser =append (_fddc ._afd .Ser ,_fdbd );_fdbd .Idx .ValAttr =uint32 (len (_fddc ._afd .Ser )-1);_fdbd .Order .ValAttr =uint32 (len (_fddc ._afd .Ser )-1);
_dfbb :=ScatterChartSeries {_fdbd };_dfbb .InitializeDefaults ();_dfbb .Marker ().Properties ().LineProperties ().SetSolidFill (_gbgf );_dfbb .Marker ().Properties ().SetSolidFill (_gbgf );return _dfbb ;};

// SetDirection changes the direction of the bar chart (bar or column).
func (_dd Bar3DChart )SetDirection (d _d .ST_BarDir ){_dd ._af .BarDir .ValAttr =d };

// Properties returns the Bubble chart series shape properties.
func (_dfc BubbleChartSeries )Properties ()_fd .ShapeProperties {if _dfc ._aag .SpPr ==nil {_dfc ._aag .SpPr =_ffa .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_dfc ._aag .SpPr );};func (_cgg DateAxis )SetTickLabelPosition (p _d .ST_TickLblPos ){if p ==_d .ST_TickLblPosUnset {_cgg ._cce .TickLblPos =nil ;
}else {_cgg ._cce .TickLblPos =_d .NewCT_TickLblPos ();_cgg ._cce .TickLblPos .ValAttr =p ;};};

// X returns the inner wrapped XML type.
func (_bab LineChartSeries )X ()*_d .CT_LineSer {return _bab ._fcb };

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_gf *_d .CT_Area3DChart ;};

// Values returns the value data source.
func (_fga BubbleChartSeries )Values ()NumberDataSource {if _fga ._aag .YVal ==nil {_fga ._aag .YVal =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_fga ._aag .YVal );};

// X returns the inner wrapped XML type.
func (_gbc RadarChartSeries )X ()*_d .CT_RadarSer {return _gbc ._ffcc };

// Values returns the value data source.
func (_cbd BarChartSeries )Values ()NumberDataSource {if _cbd ._bgb .Val ==nil {_cbd ._bgb .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_cbd ._bgb .Val );};

// X returns the inner wrapped XML type.
func (_a Area3DChart )X ()*_d .CT_Area3DChart {return _a ._gf };

// InitializeDefaults the bar chart to its defaults
func (_egef RadarChart )InitializeDefaults (){_egef ._cedd .RadarStyle .ValAttr =_d .ST_RadarStyleMarker };

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_bga Chart )AddLegend ()Legend {_bga ._cbf .Chart .Legend =_d .NewCT_Legend ();_eage :=MakeLegend (_bga ._cbf .Chart .Legend );_eage .InitializeDefaults ();return _eage ;};

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_cc *_d .CT_AreaChart ;};

// Chart is a generic chart.
type Chart struct{_cbf *_d .ChartSpace };func (_ccea DateAxis )SetMinorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_ccea ._cce .MinorTickMark =nil ;}else {_ccea ._cce .MinorTickMark =_d .NewCT_TickMark ();_ccea ._cce .MinorTickMark .ValAttr =m ;
};};

// InitializeDefaults the Bubble chart to its defaults
func (_ege BubbleChart )InitializeDefaults (){};

// AddSurfaceChart adds a new surface chart to a chart.
func (_eb Chart )AddSurfaceChart ()SurfaceChart {_dbcc :=_d .NewCT_PlotAreaChoice ();_eb ._cbf .Chart .PlotArea .PlotAreaChoice =append (_eb ._cbf .Chart .PlotArea .PlotAreaChoice ,_dbcc );_dbcc .SurfaceChart =_d .NewCT_SurfaceChart ();_gc (_eb ._cbf .Chart );
_eb ._cbf .Chart .View3D .RotX .ValAttr =_ge .Int8 (90);_eb ._cbf .Chart .View3D .RotY .ValAttr =_ge .Uint16 (0);_eb ._cbf .Chart .View3D .Perspective =_d .NewCT_Perspective ();_eb ._cbf .Chart .View3D .Perspective .ValAttr =_ge .Uint8 (0);_fa :=SurfaceChart {_acab :_dbcc .SurfaceChart };
_fa .InitializeDefaults ();return _fa ;};

// Order returns the order of the series
func (_bcg LineChartSeries )Order ()uint32 {return _bcg ._fcb .Order .ValAttr };

// Marker returns the marker properties.
func (_dac LineChartSeries )Marker ()Marker {if _dac ._fcb .Marker ==nil {_dac ._fcb .Marker =_d .NewCT_Marker ();};return MakeMarker (_dac ._fcb .Marker );};

// X returns the inner wrapped XML type.
func (_aad ScatterChartSeries )X ()*_d .CT_ScatterSer {return _aad ._aafb };

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_ffag *_d .CT_StockChart ;};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_aeg *_d .CT_Pie3DChart ;};func MakeNumberDataSource (x *_d .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};

// AddAxis adds an axis to a Surface chart.
func (_bbc Surface3DChart )AddAxis (axis Axis ){_cbda :=_d .NewCT_UnsignedInt ();_cbda .ValAttr =axis .AxisID ();_bbc ._acaa .AxId =append (_bbc ._acaa .AxId ,_cbda );};

// AddAxis adds an axis to a line chart.
func (_gdg Line3DChart )AddAxis (axis Axis ){_dcff :=_d .NewCT_UnsignedInt ();_dcff .ValAttr =axis .AxisID ();_gdg ._edc .AxId =append (_gdg ._edc .AxId ,_dcff );};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_cga Chart )AddPieOfPieChart ()PieOfPieChart {_bddg :=_d .NewCT_PlotAreaChoice ();_cga ._cbf .Chart .PlotArea .PlotAreaChoice =append (_cga ._cbf .Chart .PlotArea .PlotAreaChoice ,_bddg );_bddg .OfPieChart =_d .NewCT_OfPieChart ();_aaf :=PieOfPieChart {_abf :_bddg .OfPieChart };
_aaf .InitializeDefaults ();return _aaf ;};

// SetValues is used to set the source data to a set of values.
func (_ggb CategoryAxisDataSource )SetValues (v []string ){_ggb ._ecba .AxDataSourceChoice =_d .NewCT_AxDataSourceChoice ();_ggb ._ecba .AxDataSourceChoice .StrLit =_d .NewCT_StrData ();_ggb ._ecba .AxDataSourceChoice .StrLit .PtCount =_d .NewCT_UnsignedInt ();
_ggb ._ecba .AxDataSourceChoice .StrLit .PtCount .ValAttr =uint32 (len (v ));for _acce ,_dee :=range v {_ggb ._ecba .AxDataSourceChoice .StrLit .Pt =append (_ggb ._ecba .AxDataSourceChoice .StrLit .Pt ,&_d .CT_StrVal {IdxAttr :uint32 (_acce ),V :_dee });
};};

// AddSeries adds a default series to a bar chart.
func (_be BarChart )AddSeries ()BarChartSeries {_acca :=_be .nextColor (len (_be ._gfb .Ser ));_fbe :=_d .NewCT_BarSer ();_be ._gfb .Ser =append (_be ._gfb .Ser ,_fbe );_fbe .Idx .ValAttr =uint32 (len (_be ._gfb .Ser )-1);_fbe .Order .ValAttr =uint32 (len (_be ._gfb .Ser )-1);
_bc :=BarChartSeries {_fbe };_bc .InitializeDefaults ();_bc .Properties ().SetSolidFill (_acca );return _bc ;};func (_afc DataLabels )SetShowLeaderLines (b bool ){_afc .ensureChoice ();_afc ._baa .DLblsChoice .ShowLeaderLines =_d .NewCT_Boolean ();_afc ._baa .DLblsChoice .ShowLeaderLines .ValAttr =_ge .Bool (b );
};func (_cd BubbleChart )AddAxis (axis Axis ){_dg :=_d .NewCT_UnsignedInt ();_dg .ValAttr =axis .AxisID ();_cd ._bf .AxId =append (_cd ._bf .AxId ,_dg );};func (_dede Marker )Properties ()_fd .ShapeProperties {if _dede ._dgc .SpPr ==nil {_dede ._dgc .SpPr =_ffa .NewCT_ShapeProperties ();
};return _fd .MakeShapeProperties (_dede ._dgc .SpPr );};

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_ba Chart )AddSurface3DChart ()Surface3DChart {_bad :=_d .NewCT_PlotAreaChoice ();_ba ._cbf .Chart .PlotArea .PlotAreaChoice =append (_ba ._cbf .Chart .PlotArea .PlotAreaChoice ,_bad );_bad .Surface3DChart =_d .NewCT_Surface3DChart ();_gc (_ba ._cbf .Chart );
_gbbg :=Surface3DChart {_acaa :_bad .Surface3DChart };_gbbg .InitializeDefaults ();return _gbbg ;};func MakeValueAxis (x *_d .CT_ValAx )ValueAxis {return ValueAxis {x }};

// AddSeries adds a default series to an Pie3D chart.
func (_cdb Pie3DChart )AddSeries ()PieChartSeries {_bcaa :=_d .NewCT_PieSer ();_cdb ._aeg .Ser =append (_cdb ._aeg .Ser ,_bcaa );_bcaa .Idx .ValAttr =uint32 (len (_cdb ._aeg .Ser )-1);_bcaa .Order .ValAttr =uint32 (len (_cdb ._aeg .Ser )-1);_gda :=PieChartSeries {_bcaa };
_gda .InitializeDefaults ();return _gda ;};

// Index returns the index of the series
func (_becfd ScatterChartSeries )Index ()uint32 {return _becfd ._aafb .Idx .ValAttr };

// Properties returns the bar chart series shape properties.
func (_bbe RadarChartSeries )Properties ()_fd .ShapeProperties {if _bbe ._ffcc .SpPr ==nil {_bbe ._ffcc .SpPr =_ffa .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_bbe ._ffcc .SpPr );};func (_ecg CategoryAxis )InitializeDefaults (){_ecg .SetPosition (_d .ST_AxPosB );
_ecg .SetMajorTickMark (_d .ST_TickMarkOut );_ecg .SetMinorTickMark (_d .ST_TickMarkIn );_ecg .SetTickLabelPosition (_d .ST_TickLblPosNextTo );_ecg .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_ff .LightGray );_ecg .Properties ().LineProperties ().SetSolidFill (_ff .Black );
};

// SetText sets the series text
func (_dgg LineChartSeries )SetText (s string ){_dgg ._fcb .Tx =_d .NewCT_SerTx ();_dgg ._fcb .Tx .SerTxChoice .V =&s ;};

// Marker returns the marker properties.
func (_acdg ScatterChartSeries )Marker ()Marker {if _acdg ._aafb .Marker ==nil {_acdg ._aafb .Marker =_d .NewCT_Marker ();};return MakeMarker (_acdg ._aafb .Marker );};func (_gdbd ValueAxis )AxisID ()uint32 {return _gdbd ._cbc .AxId .ValAttr };func (_fae DateAxis )Properties ()_fd .ShapeProperties {if _fae ._cce .SpPr ==nil {_fae ._cce .SpPr =_ffa .NewCT_ShapeProperties ();
};return _fd .MakeShapeProperties (_fae ._cce .SpPr );};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};func (_cee DateAxis )SetPosition (p _d .ST_AxPos ){_cee ._cce .AxPos =_d .NewCT_AxPos ();_cee ._cce .AxPos .ValAttr =p ;};

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_af *_d .CT_Bar3DChart ;};

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_aafb *_d .CT_ScatterSer };

// AddPieChart adds a new pie chart to a chart.
func (_gfg Chart )AddPieChart ()PieChart {_bddb :=_d .NewCT_PlotAreaChoice ();_gfg ._cbf .Chart .PlotArea .PlotAreaChoice =append (_gfg ._cbf .Chart .PlotArea .PlotAreaChoice ,_bddb );_bddb .PieChart =_d .NewCT_PieChart ();_aae :=PieChart {_bba :_bddb .PieChart };
_aae .InitializeDefaults ();return _aae ;};type Legend struct{_bce *_d .CT_Legend };

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_fce BubbleChartSeries )InitializeDefaults (){};

// InitializeDefaults the bar chart to its defaults
func (_eg Bar3DChart )InitializeDefaults (){_eg .SetDirection (_d .ST_BarDirCol )};

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_bgb *_d .CT_BarSer };

// InitializeDefaults initializes an Pie series to the default values.
func (_afa PieChartSeries )InitializeDefaults (){};

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_fcb *_d .CT_LineSer };

// AddSeries adds a default series to an area chart.
func (_db AreaChart )AddSeries ()AreaChartSeries {_ad :=_db .nextColor (len (_db ._cc .Ser ));_ec :=_d .NewCT_AreaSer ();_db ._cc .Ser =append (_db ._cc .Ser ,_ec );_ec .Idx .ValAttr =uint32 (len (_db ._cc .Ser )-1);_ec .Order .ValAttr =uint32 (len (_db ._cc .Ser )-1);
_aa :=AreaChartSeries {_ec };_aa .InitializeDefaults ();_aa .Properties ().SetSolidFill (_ad );return _aa ;};

// SetText sets the series text.
func (_bd BubbleChartSeries )SetText (s string ){_bd ._aag .Tx =_d .NewCT_SerTx ();_bd ._aag .Tx .SerTxChoice .V =&s ;};func (_gaa Marker )SetSize (sz uint8 ){_gaa ._dgc .Size =_d .NewCT_MarkerSize ();_gaa ._dgc .Size .ValAttr =&sz ;};

// AddPie3DChart adds a new pie chart to a chart.
func (_ce Chart )AddPie3DChart ()Pie3DChart {_gc (_ce ._cbf .Chart );_acf :=_d .NewCT_PlotAreaChoice ();_ce ._cbf .Chart .PlotArea .PlotAreaChoice =append (_ce ._cbf .Chart .PlotArea .PlotAreaChoice ,_acf );_acf .Pie3DChart =_d .NewCT_Pie3DChart ();_ega :=Pie3DChart {_aeg :_acf .Pie3DChart };
_ega .InitializeDefaults ();return _ega ;};

// Order returns the order of the series
func (_dgd ScatterChartSeries )Order ()uint32 {return _dgd ._aafb .Order .ValAttr };

// InitializeDefaults the bar chart to its defaults
func (_dba PieOfPieChart )InitializeDefaults (){_dba ._abf .VaryColors =_d .NewCT_Boolean ();_dba ._abf .VaryColors .ValAttr =_ge .Bool (true );_dba .SetType (_d .ST_OfPieTypePie );_dba ._abf .SecondPieSize =_d .NewCT_SecondPieSize ();_dba ._abf .SecondPieSize .ValAttr =&_d .ST_SecondPieSize {};
_dba ._abf .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_ge .Uint16 (75);_fecd :=_d .NewCT_ChartLines ();_fecd .SpPr =_ffa .NewCT_ShapeProperties ();_egg :=_fd .MakeShapeProperties (_fecd .SpPr );_egg .LineProperties ().SetSolidFill (_ff .Auto );_dba ._abf .SerLines =append (_dba ._abf .SerLines ,_fecd );
};func (_cf CategoryAxis )Properties ()_fd .ShapeProperties {if _cf ._eae .SpPr ==nil {_cf ._eae .SpPr =_ffa .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_cf ._eae .SpPr );};func MakeDataLabels (x *_d .CT_DLbls )DataLabels {return DataLabels {x }};
type chartBase struct{};

// X returns the inner wrapped XML type.
func (_def LineChart )X ()*_d .CT_LineChart {return _def ._eab };

// SetIndex sets the index of the series
func (_edfc ScatterChartSeries )SetIndex (idx uint32 ){_edfc ._aafb .Idx .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_gabb Title )X ()*_d .CT_Title {return _gabb ._efg };

// X returns the inner wrapped XML type.
func (_ecd SeriesAxis )X ()*_d .CT_SerAx {return _ecd ._ebg };var _bca =[]_ff .Color {_ff .RGB (0x33,0x66,0xcc),_ff .RGB (0xDC,0x39,0x12),_ff .RGB (0xFF,0x99,0x00),_ff .RGB (0x10,0x96,0x18),_ff .RGB (0x99,0x00,0x99),_ff .RGB (0x3B,0x3E,0xAC),_ff .RGB (0x00,0x99,0xC6),_ff .RGB (0xDD,0x44,0x77),_ff .RGB (0x66,0xAA,0x00),_ff .RGB (0xB8,0x2E,0x2E),_ff .RGB (0x31,0x63,0x95),_ff .RGB (0x99,0x44,0x99),_ff .RGB (0x22,0xAA,0x99),_ff .RGB (0xAA,0xAA,0x11),_ff .RGB (0x66,0x33,0xCC),_ff .RGB (0xE6,0x73,0x00),_ff .RGB (0x8B,0x07,0x07),_ff .RGB (0x32,0x92,0x62),_ff .RGB (0x55,0x74,0xA6),_ff .RGB (0x3B,0x3E,0xAC)};


// X returns the inner wrapped XML type.
func (_afb Line3DChart )X ()*_d .CT_Line3DChart {return _afb ._edc };func (_gaad NumberDataSource )ensureChoice (){if _gaad ._deg .NumDataSourceChoice ==nil {_gaad ._deg .NumDataSourceChoice =_d .NewCT_NumDataSourceChoice ();};};func (_eea DataLabels )SetShowPercent (b bool ){_eea .ensureChoice ();
_eea ._baa .DLblsChoice .ShowPercent =_d .NewCT_Boolean ();_eea ._baa .DLblsChoice .ShowPercent .ValAttr =_ge .Bool (b );};type SurfaceChartSeries struct{_bde *_d .CT_SurfaceSer };

// X returns the inner wrapped XML type.
func (_acc AreaChartSeries )X ()*_d .CT_AreaSer {return _acc ._adf };

// CategoryAxis returns the category data source.
func (_ced PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ced ._fddb .Cat ==nil {_ced ._fddb .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_ced ._fddb .Cat );};

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_egdc *_d .CT_DoughnutChart ;};func (_gfd CategoryAxis )SetMajorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_gfd ._eae .MajorTickMark =nil ;}else {_gfd ._eae .MajorTickMark =_d .NewCT_TickMark ();_gfd ._eae .MajorTickMark .ValAttr =m ;
};};

// X returns the inner wrapped XML type.
func (_ccb Chart )X ()*_d .ChartSpace {return _ccb ._cbf };func (_bec CategoryAxis )SetCrosses (axis Axis ){_bec ._eae .AxSharedChoice =_d .NewEG_AxSharedChoice ();_bec ._eae .AxSharedChoice .Crosses =_d .NewCT_Crosses ();_bec ._eae .AxSharedChoice .Crosses .ValAttr =_d .ST_CrossesAutoZero ;
_bec ._eae .CrossAx .ValAttr =axis .AxisID ();};

// X returns the inner wrapped XML type.
func (_gee Marker )X ()*_d .CT_Marker {return _gee ._dgc };var NullAxis Axis =nullAxis (0);func (_eageg Surface3DChart )InitializeDefaults (){_eageg ._acaa .Wireframe =_d .NewCT_Boolean ();_eageg ._acaa .Wireframe .ValAttr =_ge .Bool (false );_eageg ._acaa .BandFmts =_d .NewCT_BandFmts ();
for _aab :=0;_aab < 15;_aab ++{_feb :=_d .NewCT_BandFmt ();_feb .Idx .ValAttr =uint32 (_aab );_feb .SpPr =_ffa .NewCT_ShapeProperties ();_fbg :=_fd .MakeShapeProperties (_feb .SpPr );_fbg .SetSolidFill (_eageg .nextColor (_aab ));_eageg ._acaa .BandFmts .BandFmt =append (_eageg ._acaa .BandFmts .BandFmt ,_feb );
};};

// Values returns the value data source.
func (_ca AreaChartSeries )Values ()NumberDataSource {if _ca ._adf .Val ==nil {_ca ._adf .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_ca ._adf .Val );};

// AddAxis adds an axis to a Surface chart.
func (_aaa SurfaceChart )AddAxis (axis Axis ){_eabg :=_d .NewCT_UnsignedInt ();_eabg .ValAttr =axis .AxisID ();_aaa ._acab .AxId =append (_aaa ._acab .AxId ,_eabg );};

// Labels returns the data label properties.
func (_gdc LineChartSeries )Labels ()DataLabels {if _gdc ._fcb .DLbls ==nil {_gdc ._fcb .DLbls =_d .NewCT_DLbls ();};return MakeDataLabels (_gdc ._fcb .DLbls );};type Title struct{_efg *_d .CT_Title };type nullAxis byte ;

// AddAxis adds an axis to a Scatter chart.
func (_cbbb ScatterChart )AddAxis (axis Axis ){_dbac :=_d .NewCT_UnsignedInt ();_dbac .ValAttr =axis .AxisID ();_cbbb ._afd .AxId =append (_cbbb ._afd .AxId ,_dbac );};

// InitializeDefaults the bar chart to its defaults
func (_beg DoughnutChart )InitializeDefaults (){_beg ._egdc .VaryColors =_d .NewCT_Boolean ();_beg ._egdc .VaryColors .ValAttr =_ge .Bool (true );_beg ._egdc .HoleSize =_d .NewCT_HoleSize ();_beg ._egdc .HoleSize .ValAttr =&_d .ST_HoleSize {};_beg ._egdc .HoleSize .ValAttr .ST_HoleSizeUByte =_ge .Uint8 (50);
};

// AddValueAxis adds a value axis to the chart.
func (_fac Chart )AddValueAxis ()ValueAxis {_gbbf :=_d .NewCT_ValAx ();if _fac ._cbf .Chart .PlotArea .PlotAreaChoice1 ==nil {_fac ._cbf .Chart .PlotArea .PlotAreaChoice1 =[]*_d .CT_PlotAreaChoice1 {};};_gbbf .AxId =_d .NewCT_UnsignedInt ();_gbbf .AxId .ValAttr =0x7FFFFFFF&_df .Uint32 ();
_fac ._cbf .Chart .PlotArea .PlotAreaChoice1 =append (_fac ._cbf .Chart .PlotArea .PlotAreaChoice1 ,&_d .CT_PlotAreaChoice1 {ValAx :_gbbf });_gbbf .Delete =_d .NewCT_Boolean ();_gbbf .Delete .ValAttr =_ge .Bool (false );_gbbf .Scaling =_d .NewCT_Scaling ();
_gbbf .Scaling .Orientation =_d .NewCT_Orientation ();_gbbf .Scaling .Orientation .ValAttr =_d .ST_OrientationMinMax ;_gbbf .AxSharedChoice =&_d .EG_AxSharedChoice {};_gbbf .AxSharedChoice .Crosses =_d .NewCT_Crosses ();_gbbf .AxSharedChoice .Crosses .ValAttr =_d .ST_CrossesAutoZero ;
_gbbf .CrossBetween =_d .NewCT_CrossBetween ();_gbbf .CrossBetween .ValAttr =_d .ST_CrossBetweenBetween ;_cbdf :=MakeValueAxis (_gbbf );_cbdf .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_ff .LightGray );_cbdf .SetMajorTickMark (_d .ST_TickMarkOut );
_cbdf .SetMinorTickMark (_d .ST_TickMarkIn );_cbdf .SetTickLabelPosition (_d .ST_TickLblPosNextTo );_cbdf .Properties ().LineProperties ().SetSolidFill (_ff .Black );_cbdf .SetPosition (_d .ST_AxPosL );return _cbdf ;};

// AddAreaChart adds a new area chart to a chart.
func (_abd Chart )AddAreaChart ()AreaChart {_aead :=_d .NewCT_PlotAreaChoice ();_abd ._cbf .Chart .PlotArea .PlotAreaChoice =append (_abd ._cbf .Chart .PlotArea .PlotAreaChoice ,_aead );_aead .AreaChart =_d .NewCT_AreaChart ();_bdf :=AreaChart {_cc :_aead .AreaChart };
_bdf .InitializeDefaults ();return _bdf ;};

// AddAxis adds an axis to a line chart.
func (_caf LineChart )AddAxis (axis Axis ){_dag :=_d .NewCT_UnsignedInt ();_dag .ValAttr =axis .AxisID ();_caf ._eab .AxId =append (_caf ._eab .AxId ,_dag );};

// X returns the inner wrapped XML type.
func (_adff PieChartSeries )X ()*_d .CT_PieSer {return _adff ._fddb };

// Values returns the value data source.
func (_dedd PieChartSeries )Values ()NumberDataSource {if _dedd ._fddb .Val ==nil {_dedd ._fddb .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_dedd ._fddb .Val );};func (_aec StockChart )AddAxis (axis Axis ){_bgf :=_d .NewCT_UnsignedInt ();
_bgf .ValAttr =axis .AxisID ();_aec ._ffag .AxId =append (_aec ._ffag .AxId ,_bgf );};

// RemoveTitle removes any existing title from the chart.
func (_fde Chart )RemoveTitle (){_fde ._cbf .Chart .Title =nil ;_fde ._cbf .Chart .AutoTitleDeleted =_d .NewCT_Boolean ();_fde ._cbf .Chart .AutoTitleDeleted .ValAttr =_ge .Bool (true );};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_bba *_d .CT_PieChart ;};func (_ggca DateAxis )SetCrosses (axis Axis ){_ggca ._cce .CrossAx .ValAttr =axis .AxisID ()};func _gc (_aff *_d .CT_Chart ){_aff .View3D =_d .NewCT_View3D ();_aff .View3D .RotX =_d .NewCT_RotX ();
_aff .View3D .RotX .ValAttr =_ge .Int8 (15);_aff .View3D .RotY =_d .NewCT_RotY ();_aff .View3D .RotY .ValAttr =_ge .Uint16 (20);_aff .View3D .RAngAx =_d .NewCT_Boolean ();_aff .View3D .RAngAx .ValAttr =_ge .Bool (false );_aff .Floor =_d .NewCT_Surface ();
_aff .Floor .Thickness =_d .NewCT_Thickness ();_aff .Floor .Thickness .ValAttr .Uint32 =_ge .Uint32 (0);_aff .SideWall =_d .NewCT_Surface ();_aff .SideWall .Thickness =_d .NewCT_Thickness ();_aff .SideWall .Thickness .ValAttr .Uint32 =_ge .Uint32 (0);_aff .BackWall =_d .NewCT_Surface ();
_aff .BackWall .Thickness =_d .NewCT_Thickness ();_aff .BackWall .Thickness .ValAttr .Uint32 =_ge .Uint32 (0);};func (_ade LineChartSeries )Values ()NumberDataSource {if _ade ._fcb .Val ==nil {_ade ._fcb .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_ade ._fcb .Val );
};

// Order returns the order of the series
func (_ddb SurfaceChartSeries )Order ()uint32 {return _ddb ._bde .Order .ValAttr };func (_fe Area3DChart )AddAxis (axis Axis ){_fdc :=_d .NewCT_UnsignedInt ();_fdc .ValAttr =axis .AxisID ();_fe ._gf .AxId =append (_fe ._gf .AxId ,_fdc );};func (_bea ValueAxis )SetTickLabelPosition (p _d .ST_TickLblPos ){if p ==_d .ST_TickLblPosUnset {_bea ._cbc .TickLblPos =nil ;
}else {_bea ._cbc .TickLblPos =_d .NewCT_TickLblPos ();_bea ._cbc .TickLblPos .ValAttr =p ;};};

// X returns the inner wrapped XML type.
func (_cbdc Legend )X ()*_d .CT_Legend {return _cbdc ._bce };func (_bfb Title )ParagraphProperties ()_fd .ParagraphProperties {if _bfb ._efg .Tx ==nil {_bfb .SetText ("");};if _bfb ._efg .Tx .TxChoice .Rich .P [0].PPr ==nil {_bfb ._efg .Tx .TxChoice .Rich .P [0].PPr =_ffa .NewCT_TextParagraphProperties ();
};return _fd .MakeParagraphProperties (_bfb ._efg .Tx .TxChoice .Rich .P [0].PPr );};func (_feg RadarChart )AddAxis (axis Axis ){_agd :=_d .NewCT_UnsignedInt ();_agd .ValAttr =axis .AxisID ();_feg ._cedd .AxId =append (_feg ._cedd .AxId ,_agd );};

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_fge Chart )AddBar3DChart ()Bar3DChart {_gc (_fge ._cbf .Chart );_aea :=_d .NewCT_PlotAreaChoice ();_fge ._cbf .Chart .PlotArea .PlotAreaChoice =append (_fge ._cbf .Chart .PlotArea .PlotAreaChoice ,_aea );_aea .Bar3DChart =_d .NewCT_Bar3DChart ();
_aea .Bar3DChart .Grouping =_d .NewCT_BarGrouping ();_aea .Bar3DChart .Grouping .ValAttr =_d .ST_BarGroupingStandard ;_efe :=Bar3DChart {_af :_aea .Bar3DChart };_efe .InitializeDefaults ();return _efe ;};

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_edd NumberDataSource )CreateEmptyNumberCache (){_edd .ensureChoice ();if _edd ._deg .NumDataSourceChoice .NumRef ==nil {_edd ._deg .NumDataSourceChoice .NumRef =_d .NewCT_NumRef ();};_edd ._deg .NumDataSourceChoice .NumLit =nil ;_edd ._deg .NumDataSourceChoice .NumRef .NumCache =_d .NewCT_NumData ();
_edd ._deg .NumDataSourceChoice .NumRef .NumCache .PtCount =_d .NewCT_UnsignedInt ();_edd ._deg .NumDataSourceChoice .NumRef .NumCache .PtCount .ValAttr =0;};type ValueAxis struct{_cbc *_d .CT_ValAx };

// InitializeDefaults the bar chart to its defaults
func (_dcg PieChart )InitializeDefaults (){_dcg ._bba .VaryColors =_d .NewCT_Boolean ();_dcg ._bba .VaryColors .ValAttr =_ge .Bool (true );};func (_cdd Legend )InitializeDefaults (){_cdd .SetPosition (_d .ST_LegendPosR );_cdd .SetOverlay (false );_cdd .Properties ().SetNoFill ();
_cdd .Properties ().LineProperties ().SetNoFill ();};func (_bcf GridLines )Properties ()_fd .ShapeProperties {if _bcf ._cef .SpPr ==nil {_bcf ._cef .SpPr =_ffa .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_bcf ._cef .SpPr );};

// X returns the inner wrapped XML type.
func (_bbd GridLines )X ()*_d .CT_ChartLines {return _bbd ._cef };func (_gfab CategoryAxis )MajorGridLines ()GridLines {if _gfab ._eae .MajorGridlines ==nil {_gfab ._eae .MajorGridlines =_d .NewCT_ChartLines ();};return GridLines {_gfab ._eae .MajorGridlines };
};type GridLines struct{_cef *_d .CT_ChartLines };

// SetIndex sets the index of the series
func (_afg LineChartSeries )SetIndex (idx uint32 ){_afg ._fcb .Idx .ValAttr =idx };

// AddTitle sets a new title on the chart.
func (_ebf Chart )AddTitle ()Title {_ebf ._cbf .Chart .Title =_d .NewCT_Title ();_ebf ._cbf .Chart .Title .Overlay =_d .NewCT_Boolean ();_ebf ._cbf .Chart .Title .Overlay .ValAttr =_ge .Bool (false );_ebf ._cbf .Chart .AutoTitleDeleted =_d .NewCT_Boolean ();
_ebf ._cbf .Chart .AutoTitleDeleted .ValAttr =_ge .Bool (false );_efbb :=MakeTitle (_ebf ._cbf .Chart .Title );_efbb .InitializeDefaults ();return _efbb ;};type ScatterChart struct{chartBase ;_afd *_d .CT_ScatterChart ;};func (_eca ValueAxis )SetCrosses (axis Axis ){_eca ._cbc .CrossAx .ValAttr =axis .AxisID ()};
func (_agg ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _agg ._aafb .XVal ==nil {_agg ._aafb .XVal =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_agg ._aafb .XVal );};func MakeSeriesAxis (x *_d .CT_SerAx )SeriesAxis {return SeriesAxis {x }};


// X returns the inner wrapped XML type.
func (_fg BubbleChartSeries )X ()*_d .CT_BubbleSer {return _fg ._aag };func (_fbed Title )SetText (s string ){if _fbed ._efg .Tx ==nil {_fbed ._efg .Tx =_d .NewCT_Tx ();};if _fbed ._efg .Tx .TxChoice .Rich ==nil {_fbed ._efg .Tx .TxChoice .Rich =_ffa .NewCT_TextBody ();
};var _gade *_ffa .CT_TextParagraph ;if len (_fbed ._efg .Tx .TxChoice .Rich .P )==0{_gade =_ffa .NewCT_TextParagraph ();_fbed ._efg .Tx .TxChoice .Rich .P =[]*_ffa .CT_TextParagraph {_gade };}else {_gade =_fbed ._efg .Tx .TxChoice .Rich .P [0];};var _cbbf *_ffa .EG_TextRun ;
if len (_gade .EG_TextRun )==0{_cbbf =_ffa .NewEG_TextRun ();_gade .EG_TextRun =[]*_ffa .EG_TextRun {_cbbf };}else {_cbbf =_gade .EG_TextRun [0];};if _cbbf .TextRunChoice .R ==nil {_cbbf .TextRunChoice .R =_ffa .NewCT_RegularTextRun ();};_cbbf .TextRunChoice .R .T =s ;
};

// SetText sets the series text.
func (_gefb RadarChartSeries )SetText (s string ){_gefb ._ffcc .Tx =_d .NewCT_SerTx ();_gefb ._ffcc .Tx .SerTxChoice .V =&s ;};

// X returns the inner wrapped XML type.
func (_fgce PieOfPieChart )X ()*_d .CT_OfPieChart {return _fgce ._abf };func (_gebf ValueAxis )SetPosition (p _d .ST_AxPos ){_gebf ._cbc .AxPos =_d .NewCT_AxPos ();_gebf ._cbc .AxPos .ValAttr =p ;};

// AddSeries adds a default series to a line chart.
func (_aeef Line3DChart )AddSeries ()LineChartSeries {_gad :=_aeef .nextColor (len (_aeef ._edc .Ser ));_bgg :=_d .NewCT_LineSer ();_aeef ._edc .Ser =append (_aeef ._edc .Ser ,_bgg );_bgg .Idx .ValAttr =uint32 (len (_aeef ._edc .Ser )-1);_bgg .Order .ValAttr =uint32 (len (_aeef ._edc .Ser )-1);
_cgcd :=LineChartSeries {_bgg };_cgcd .InitializeDefaults ();_cgcd .Properties ().LineProperties ().SetSolidFill (_gad );_cgcd .Properties ().SetSolidFill (_gad );return _cgcd ;};func (_ggbb DateAxis )AxisID ()uint32 {return _ggbb ._cce .AxId .ValAttr };
func (_cde NumberDataSource )SetReference (s string ){_cde .ensureChoice ();if _cde ._deg .NumDataSourceChoice .NumRef ==nil {_cde ._deg .NumDataSourceChoice .NumRef =_d .NewCT_NumRef ();};_cde ._deg .NumDataSourceChoice .NumRef .F =s ;};type NumberDataSource struct{_deg *_d .CT_NumDataSource };


// Index returns the index of the series
func (_dbe SurfaceChartSeries )Index ()uint32 {return _dbe ._bde .Idx .ValAttr };type DateAxis struct{_cce *_d .CT_DateAx };

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_dbcd CategoryAxisDataSource )SetLabelReference (s string ){_dbcd ._ecba .AxDataSourceChoice =_d .NewCT_AxDataSourceChoice ();_dbcd ._ecba .AxDataSourceChoice .StrRef =_d .NewCT_StrRef ();_dbcd ._ecba .AxDataSourceChoice .StrRef .F =s ;};func (_aca Bar3DChart )AddAxis (axis Axis ){_dc :=_d .NewCT_UnsignedInt ();
_dc .ValAttr =axis .AxisID ();_aca ._af .AxId =append (_aca ._af .AxId ,_dc );};func MakeTitle (x *_d .CT_Title )Title {return Title {x }};type Line3DChart struct{chartBase ;_edc *_d .CT_Line3DChart ;};

// X returns the inner wrapped XML type.
func (_baf DoughnutChart )X ()*_d .CT_DoughnutChart {return _baf ._egdc };

// SetText sets the series text.
func (_ecb BarChartSeries )SetText (s string ){_ecb ._bgb .Tx =_d .NewCT_SerTx ();_ecb ._bgb .Tx .SerTxChoice .V =&s ;};

// Properties returns the line chart series shape properties.
func (_dfg LineChartSeries )Properties ()_fd .ShapeProperties {if _dfg ._fcb .SpPr ==nil {_dfg ._fcb .SpPr =_ffa .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_dfg ._fcb .SpPr );};

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_abf *_d .CT_OfPieChart ;};

// InitializeDefaults initializes an area series to the default values.
func (_ae AreaChartSeries )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_ceddf RadarChart )X ()*_d .CT_RadarChart {return _ceddf ._cedd };func (_ggc CategoryAxis )SetMinorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_ggc ._eae .MinorTickMark =nil ;}else {_ggc ._eae .MinorTickMark =_d .NewCT_TickMark ();
_ggc ._eae .MinorTickMark .ValAttr =m ;};};

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_aag *_d .CT_BubbleSer };

// X returns the inner wrapped XML type.
func (_ecc Pie3DChart )X ()*_d .CT_Pie3DChart {return _ecc ._aeg };

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_dgf PieChartSeries )SetExplosion (v uint32 ){_dgf ._fddb .Explosion =_d .NewCT_UnsignedInt ();_dgf ._fddb .Explosion .ValAttr =v ;};func (_bbae SurfaceChartSeries )InitializeDefaults (){_bbae .Properties ().LineProperties ().SetWidth (1*_g .Point );
_bbae .Properties ().LineProperties ().SetSolidFill (_ff .Black );_bbae .Properties ().LineProperties ().SetJoin (_fd .LineJoinRound );};func (_dfb DataLabels )SetShowCategoryName (b bool ){_dfb .ensureChoice ();_dfb ._baa .DLblsChoice .ShowCatName =_d .NewCT_Boolean ();
_dfb ._baa .DLblsChoice .ShowCatName .ValAttr =_ge .Bool (b );};func (_fcg ScatterChartSeries )InitializeDefaults (){_fcg .Properties ().LineProperties ().SetNoFill ();_fcg .Marker ().SetSymbol (_d .ST_MarkerStyleAuto );_fcg .Labels ().SetShowLegendKey (false );
_fcg .Labels ().SetShowValue (true );_fcg .Labels ().SetShowPercent (false );_fcg .Labels ().SetShowCategoryName (false );_fcg .Labels ().SetShowSeriesName (false );_fcg .Labels ().SetShowLeaderLines (false );};

// AddSeries adds a default series to an Doughnut chart.
func (_fdb DoughnutChart )AddSeries ()PieChartSeries {_cced :=_d .NewCT_PieSer ();_fdb ._egdc .Ser =append (_fdb ._egdc .Ser ,_cced );_cced .Idx .ValAttr =uint32 (len (_fdb ._egdc .Ser )-1);_cced .Order .ValAttr =uint32 (len (_fdb ._egdc .Ser )-1);_cag :=PieChartSeries {_cced };
_cag .InitializeDefaults ();return _cag ;};func (_beeg DataLabels )ensureChoice (){if _beeg ._baa .DLblsChoice ==nil {_beeg ._baa .DLblsChoice =_d .NewCT_DLblsChoice ();};};

// SetText sets the series text
func (_gcbc SurfaceChartSeries )SetText (s string ){_gcbc ._bde .Tx =_d .NewCT_SerTx ();_gcbc ._bde .Tx .SerTxChoice .V =&s ;};

// Properties returns the bar chart series shape properties.
func (_dcc BarChartSeries )Properties ()_fd .ShapeProperties {if _dcc ._bgb .SpPr ==nil {_dcc ._bgb .SpPr =_ffa .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_dcc ._bgb .SpPr );};func MakeCategoryAxis (x *_d .CT_CatAx )CategoryAxis {return CategoryAxis {x }};


// X returns the inner wrapped XML type.
func (_ee BarChart )X ()*_d .CT_BarChart {return _ee ._gfb };func (_gfgb ScatterChartSeries )Values ()NumberDataSource {if _gfgb ._aafb .YVal ==nil {_gfgb ._aafb .YVal =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_gfgb ._aafb .YVal );};

// X returns the inner wrapped XML type.
func (_ab Bar3DChart )X ()*_d .CT_Bar3DChart {return _ab ._af };

// Index returns the index of the series
func (_gfe LineChartSeries )Index ()uint32 {return _gfe ._fcb .Idx .ValAttr };

// X returns the inner wrapped XML type.
func (_cb BarChartSeries )X ()*_d .CT_BarSer {return _cb ._bgb };

// SetText sets the series text.
func (_fc AreaChartSeries )SetText (s string ){_fc ._adf .Tx =_d .NewCT_SerTx ();_fc ._adf .Tx .SerTxChoice .V =&s ;};type Marker struct{_dgc *_d .CT_Marker };

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_abea DoughnutChart )SetHoleSize (pct uint8 ){if _abea ._egdc .HoleSize ==nil {_abea ._egdc .HoleSize =_d .NewCT_HoleSize ();};if _abea ._egdc .HoleSize .ValAttr ==nil {_abea ._egdc .HoleSize .ValAttr =&_d .ST_HoleSize {};};_abea ._egdc .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;
};

// SetOrder sets the order of the series
func (_aed ScatterChartSeries )SetOrder (idx uint32 ){_aed ._aafb .Order .ValAttr =idx };

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_ecba *_d .CT_AxDataSource };func (_bge CategoryAxis )AxisID ()uint32 {return _bge ._eae .AxId .ValAttr };

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_cbb CategoryAxisDataSource )SetNumberReference (s string ){_cbb ._ecba .AxDataSourceChoice =_d .NewCT_AxDataSourceChoice ();_cbb ._ecba .AxDataSourceChoice .NumRef =_d .NewCT_NumRef ();_cbb ._ecba .AxDataSourceChoice .NumRef .F =s ;};

// SetValues sets values directly on a source.
func (_gga NumberDataSource )SetValues (v []float64 ){_gga .ensureChoice ();_gga ._deg .NumDataSourceChoice .NumRef =nil ;_gga ._deg .NumDataSourceChoice .NumLit =_d .NewCT_NumData ();_gga ._deg .NumDataSourceChoice .NumLit .PtCount =_d .NewCT_UnsignedInt ();
_gga ._deg .NumDataSourceChoice .NumLit .PtCount .ValAttr =uint32 (len (v ));for _abb ,_ag :=range v {_gga ._deg .NumDataSourceChoice .NumLit .Pt =append (_gga ._deg .NumDataSourceChoice .NumLit .Pt ,&_d .CT_NumVal {IdxAttr :uint32 (_abb ),V :_f .Sprintf ("\u0025\u0067",_ag )});
};};

// Properties returns the line chart series shape properties.
func (_dbb ScatterChartSeries )Properties ()_fd .ShapeProperties {if _dbb ._aafb .SpPr ==nil {_dbb ._aafb .SpPr =_ffa .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_dbb ._aafb .SpPr );};func (_dad LineChartSeries )SetSmooth (b bool ){_dad ._fcb .Smooth =_d .NewCT_Boolean ();
_dad ._fcb .Smooth .ValAttr =&b ;};func (_ddbe ValueAxis )Properties ()_fd .ShapeProperties {if _ddbe ._cbc .SpPr ==nil {_ddbe ._cbc .SpPr =_ffa .NewCT_ShapeProperties ();};return _fd .MakeShapeProperties (_ddbe ._cbc .SpPr );};

// SetOrder sets the order of the series
func (_cdc LineChartSeries )SetOrder (idx uint32 ){_cdc ._fcb .Order .ValAttr =idx };func (_faa Marker )SetSymbol (s _d .ST_MarkerStyle ){if s ==_d .ST_MarkerStyleUnset {_faa ._dgc .Symbol =nil ;}else {_faa ._dgc .Symbol =_d .NewCT_MarkerStyle ();_faa ._dgc .Symbol .ValAttr =s ;
};};

// X returns the inner wrapped XML type.
func (_bae StockChart )X ()*_d .CT_StockChart {return _bae ._ffag };