//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_d "fmt";_de "github.com/unidoc/unioffice/v2";_gb "github.com/unidoc/unioffice/v2/color";_bf "github.com/unidoc/unioffice/v2/drawing";_a "github.com/unidoc/unioffice/v2/measurement";_ae "github.com/unidoc/unioffice/v2/schema/soo/dml";
_e "github.com/unidoc/unioffice/v2/schema/soo/dml/chart";_g "math/rand";);

// SetOrder sets the order of the series
func (_dcf SurfaceChartSeries )SetOrder (idx uint32 ){_dcf ._adgd .Order .ValAttr =idx };

// SetOrder sets the order of the series
func (_dcd ScatterChartSeries )SetOrder (idx uint32 ){_dcd ._fadc .Order .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_fba Chart )X ()*_e .ChartSpace {return _fba ._egc };

// AddSeries adds a default series to an Pie3D chart.
func (_fgb Pie3DChart )AddSeries ()PieChartSeries {_eaec :=_e .NewCT_PieSer ();_fgb ._fdg .Ser =append (_fgb ._fdg .Ser ,_eaec );_eaec .Idx .ValAttr =uint32 (len (_fgb ._fdg .Ser )-1);_eaec .Order .ValAttr =uint32 (len (_fgb ._fdg .Ser )-1);_bad :=PieChartSeries {_eaec };
_bad .InitializeDefaults ();return _bad ;};

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_adc *_e .CT_Bar3DChart ;};func (_ea Marker )SetSymbol (s _e .ST_MarkerStyle ){if s ==_e .ST_MarkerStyleUnset {_ea ._gda .Symbol =nil ;}else {_ea ._gda .Symbol =_e .NewCT_MarkerStyle ();_ea ._gda .Symbol .ValAttr =s ;};
};

// InitializeDefaults the bar chart to its defaults
func (_gba Bar3DChart )InitializeDefaults (){_gba .SetDirection (_e .ST_BarDirCol )};

// X returns the inner wrapped XML type.
func (_dgc DateAxis )X ()*_e .CT_DateAx {return _dgc ._dbe };

// X returns the inner wrapped XML type.
func (_abgc RadarChartSeries )X ()*_e .CT_RadarSer {return _abgc ._fcd };

// AddSeries adds a default series to a line chart.
func (_gbbe Line3DChart )AddSeries ()LineChartSeries {_ffd :=_gbbe .nextColor (len (_gbbe ._fge .Ser ));_gbe :=_e .NewCT_LineSer ();_gbbe ._fge .Ser =append (_gbbe ._fge .Ser ,_gbe );_gbe .Idx .ValAttr =uint32 (len (_gbbe ._fge .Ser )-1);_gbe .Order .ValAttr =uint32 (len (_gbbe ._fge .Ser )-1);
_bdac :=LineChartSeries {_gbe };_bdac .InitializeDefaults ();_bdac .Properties ().LineProperties ().SetSolidFill (_ffd );_bdac .Properties ().SetSolidFill (_ffd );return _bdac ;};

// RemoveLegend removes the legend if the chart has one.
func (_ecb Chart )RemoveLegend (){_ecb ._egc .Chart .Legend =nil };

// Order returns the order of the series
func (_aega SurfaceChartSeries )Order ()uint32 {return _aega ._adgd .Order .ValAttr };

// AddStockChart adds a new stock chart.
func (_ff Chart )AddStockChart ()StockChart {_ddd :=_e .NewCT_PlotAreaChoice ();_ff ._egc .Chart .PlotArea .PlotAreaChoice =append (_ff ._egc .Chart .PlotArea .PlotAreaChoice ,_ddd );_ddd .StockChart =_e .NewCT_StockChart ();_bce :=StockChart {_cefg :_ddd .StockChart };
_bce .InitializeDefaults ();return _bce ;};func (_adf Title )InitializeDefaults (){_adf .SetText ("\u0054\u0069\u0074l\u0065");_adf .RunProperties ().SetSize (16*_a .Point );_adf .RunProperties ().SetSolidFill (_gb .Black );_adf .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");
_adf .RunProperties ().SetBold (false );};func (_def ScatterChartSeries )SetSmooth (b bool ){_def ._fadc .Smooth =_e .NewCT_Boolean ();_def ._fadc .Smooth .ValAttr =&b ;};

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_abb *_e .CT_DoughnutChart ;};func MakeCategoryAxis (x *_e .CT_CatAx )CategoryAxis {return CategoryAxis {x }};

// AddPieChart adds a new pie chart to a chart.
func (_bcd Chart )AddPieChart ()PieChart {_dec :=_e .NewCT_PlotAreaChoice ();_bcd ._egc .Chart .PlotArea .PlotAreaChoice =append (_bcd ._egc .Chart .PlotArea .PlotAreaChoice ,_dec );_dec .PieChart =_e .NewCT_PieChart ();_afc :=PieChart {_fee :_dec .PieChart };
_afc .InitializeDefaults ();return _afc ;};

// Values returns the value data source.
func (_afa BubbleChartSeries )Values ()NumberDataSource {if _afa ._aef .YVal ==nil {_afa ._aef .YVal =_e .NewCT_NumDataSource ();};return MakeNumberDataSource (_afa ._aef .YVal );};

// AddSeries adds a default series to an area chart.
func (_faf AreaChart )AddSeries ()AreaChartSeries {_ee :=_faf .nextColor (len (_faf ._ed .Ser ));_fe :=_e .NewCT_AreaSer ();_faf ._ed .Ser =append (_faf ._ed .Ser ,_fe );_fe .Idx .ValAttr =uint32 (len (_faf ._ed .Ser )-1);_fe .Order .ValAttr =uint32 (len (_faf ._ed .Ser )-1);
_deb :=AreaChartSeries {_fe };_deb .InitializeDefaults ();_deb .Properties ().SetSolidFill (_ee );return _deb ;};

// X returns the inner wrapped XML type.
func (_bbfe Legend )X ()*_e .CT_Legend {return _bbfe ._aeg };

// X returns the inner wrapped XML type.
func (_bdde Line3DChart )X ()*_e .CT_Line3DChart {return _bdde ._fge };func MakeDataLabels (x *_e .CT_DLbls )DataLabels {return DataLabels {x }};

// SetIndex sets the index of the series
func (_eee SurfaceChartSeries )SetIndex (idx uint32 ){_eee ._adgd .Idx .ValAttr =idx };

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_gbcf Chart )AddSurface3DChart ()Surface3DChart {_egd :=_e .NewCT_PlotAreaChoice ();_gbcf ._egc .Chart .PlotArea .PlotAreaChoice =append (_gbcf ._egc .Chart .PlotArea .PlotAreaChoice ,_egd );_egd .Surface3DChart =_e .NewCT_Surface3DChart ();_eba (_gbcf ._egc .Chart );
_fdc :=Surface3DChart {_afb :_egd .Surface3DChart };_fdc .InitializeDefaults ();return _fdc ;};func (_cbg LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _cbg ._acee .Cat ==nil {_cbg ._acee .Cat =_e .NewCT_AxDataSource ();};return MakeAxisDataSource (_cbg ._acee .Cat );
};func (_bdc Legend )SetPosition (p _e .ST_LegendPos ){if p ==_e .ST_LegendPosUnset {_bdc ._aeg .LegendPos =nil ;}else {_bdc ._aeg .LegendPos =_e .NewCT_LegendPos ();_bdc ._aeg .LegendPos .ValAttr =p ;};};func (_bbfg GridLines )Properties ()_bf .ShapeProperties {if _bbfg ._cad .SpPr ==nil {_bbfg ._cad .SpPr =_ae .NewCT_ShapeProperties ();
};return _bf .MakeShapeProperties (_bbfg ._cad .SpPr );};

// AddAxis adds an axis to a line chart.
func (_bbfb Line3DChart )AddAxis (axis Axis ){_dede :=_e .NewCT_UnsignedInt ();_dede .ValAttr =axis .AxisID ();_bbfb ._fge .AxId =append (_bbfb ._fge .AxId ,_dede );};

// CategoryAxis returns the category data source.
func (_fgga RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _fgga ._fcd .Cat ==nil {_fgga ._fcd .Cat =_e .NewCT_AxDataSource ();};return MakeAxisDataSource (_fgga ._fcd .Cat );};func (_gfd SeriesAxis )AxisID ()uint32 {return _gfd ._cdea .AxId .ValAttr };
func (_dge BubbleChart )AddAxis (axis Axis ){_beb :=_e .NewCT_UnsignedInt ();_beb .ValAttr =axis .AxisID ();_dge ._ddb .AxId =append (_dge ._ddb .AxId ,_beb );};

// AddRadarChart adds a new radar chart to a chart.
func (_fed Chart )AddRadarChart ()RadarChart {_bcbc :=_e .NewCT_PlotAreaChoice ();_fed ._egc .Chart .PlotArea .PlotAreaChoice =append (_fed ._egc .Chart .PlotArea .PlotAreaChoice ,_bcbc );_bcbc .RadarChart =_e .NewCT_RadarChart ();_cc :=RadarChart {_egca :_bcbc .RadarChart };
_cc .InitializeDefaults ();return _cc ;};

// SetText sets the series text.
func (_adb BarChartSeries )SetText (s string ){_adb ._ag .Tx =_e .NewCT_SerTx ();_adb ._ag .Tx .SerTxChoice .V =&s ;};

// InitializeDefaults the bar chart to its defaults
func (_dbgb Pie3DChart )InitializeDefaults (){_dbgb ._fdg .VaryColors =_e .NewCT_Boolean ();_dbgb ._fdg .VaryColors .ValAttr =_de .Bool (true );};func (_ac DataLabels )ensureChoice (){if _ac ._fcb .DLblsChoice ==nil {_ac ._fcb .DLblsChoice =_e .NewCT_DLblsChoice ();
};};func (_gefb ValueAxis )Properties ()_bf .ShapeProperties {if _gefb ._eedg .SpPr ==nil {_gefb ._eedg .SpPr =_ae .NewCT_ShapeProperties ();};return _bf .MakeShapeProperties (_gefb ._eedg .SpPr );};func (_ecbe DataLabels )SetPosition (p _e .ST_DLblPos ){_ecbe .ensureChoice ();
_ecbe ._fcb .DLblsChoice .DLblPos =_e .NewCT_DLblPos ();_ecbe ._fcb .DLblsChoice .DLblPos .ValAttr =p ;};func (_adg CategoryAxis )MajorGridLines ()GridLines {if _adg ._gac .MajorGridlines ==nil {_adg ._gac .MajorGridlines =_e .NewCT_ChartLines ();};return GridLines {_adg ._gac .MajorGridlines };
};

// SetValues sets values directly on a source.
func (_eaa NumberDataSource )SetValues (v []float64 ){_eaa .ensureChoice ();_eaa ._dgf .NumDataSourceChoice .NumRef =nil ;_eaa ._dgf .NumDataSourceChoice .NumLit =_e .NewCT_NumData ();_eaa ._dgf .NumDataSourceChoice .NumLit .PtCount =_e .NewCT_UnsignedInt ();
_eaa ._dgf .NumDataSourceChoice .NumLit .PtCount .ValAttr =uint32 (len (v ));for _ead ,_cbd :=range v {_eaa ._dgf .NumDataSourceChoice .NumLit .Pt =append (_eaa ._dgf .NumDataSourceChoice .NumLit .Pt ,&_e .CT_NumVal {IdxAttr :uint32 (_ead ),V :_d .Sprintf ("\u0025\u0067",_cbd )});
};};func (_gfbc ValueAxis )MajorGridLines ()GridLines {if _gfbc ._eedg .MajorGridlines ==nil {_gfbc ._eedg .MajorGridlines =_e .NewCT_ChartLines ();};return GridLines {_gfbc ._eedg .MajorGridlines };};

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_bdd BubbleChartSeries )InitializeDefaults (){};

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_ed *_e .CT_AreaChart ;};

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_e .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};func (_abcf ValueAxis )SetPosition (p _e .ST_AxPos ){_abcf ._eedg .AxPos =_e .NewCT_AxPos ();_abcf ._eedg .AxPos .ValAttr =p ;};

// AddArea3DChart adds a new area chart to a chart.
func (_cd Chart )AddArea3DChart ()Area3DChart {_eba (_cd ._egc .Chart );_ebe :=_e .NewCT_PlotAreaChoice ();_cd ._egc .Chart .PlotArea .PlotAreaChoice =append (_cd ._egc .Chart .PlotArea .PlotAreaChoice ,_ebe );_ebe .Area3DChart =_e .NewCT_Area3DChart ();
_cafd :=Area3DChart {_gg :_ebe .Area3DChart };_cafd .InitializeDefaults ();return _cafd ;};

// AddSeries adds a default series to a Scatter chart.
func (_bae ScatterChart )AddSeries ()ScatterChartSeries {_bba :=_bae .nextColor (len (_bae ._caeg .Ser ));_bbd :=_e .NewCT_ScatterSer ();_bae ._caeg .Ser =append (_bae ._caeg .Ser ,_bbd );_bbd .Idx .ValAttr =uint32 (len (_bae ._caeg .Ser )-1);_bbd .Order .ValAttr =uint32 (len (_bae ._caeg .Ser )-1);
_fde :=ScatterChartSeries {_bbd };_fde .InitializeDefaults ();_fde .Marker ().Properties ().LineProperties ().SetSolidFill (_bba );_fde .Marker ().Properties ().SetSolidFill (_bba );return _fde ;};

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_baed *_e .CT_SurfaceChart ;};

// InitializeDefaults initializes an Radar series to the default values.
func (_gfec RadarChartSeries )InitializeDefaults (){};

// AddBubbleChart adds a new bubble chart.
func (_bbf Chart )AddBubbleChart ()BubbleChart {_ebc :=_e .NewCT_PlotAreaChoice ();_bbf ._egc .Chart .PlotArea .PlotAreaChoice =append (_bbf ._egc .Chart .PlotArea .PlotAreaChoice ,_ebc );_ebc .BubbleChart =_e .NewCT_BubbleChart ();_bcdf :=BubbleChart {_ddb :_ebc .BubbleChart };
_bcdf .InitializeDefaults ();return _bcdf ;};func (_ggc Chart )AddSeriesAxis ()SeriesAxis {_bgf :=_e .NewCT_SerAx ();if _ggc ._egc .Chart .PlotArea .PlotAreaChoice1 ==nil {_ggc ._egc .Chart .PlotArea .PlotAreaChoice1 =[]*_e .CT_PlotAreaChoice1 {};};_bgf .AxId =_e .NewCT_UnsignedInt ();
_bgf .AxId .ValAttr =0x7FFFFFFF&_g .Uint32 ();_ggc ._egc .Chart .PlotArea .PlotAreaChoice1 =append (_ggc ._egc .Chart .PlotArea .PlotAreaChoice1 ,&_e .CT_PlotAreaChoice1 {SerAx :_bgf });_bgf .Delete =_e .NewCT_Boolean ();_bgf .Delete .ValAttr =_de .Bool (false );
_dff :=MakeSeriesAxis (_bgf );_dff .InitializeDefaults ();return _dff ;};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_ddb *_e .CT_BubbleChart ;};

// AddLine3DChart adds a new 3D line chart to a chart.
func (_fcg Chart )AddLine3DChart ()Line3DChart {_eba (_fcg ._egc .Chart );_cgg :=_e .NewCT_PlotAreaChoice ();_fcg ._egc .Chart .PlotArea .PlotAreaChoice =append (_fcg ._egc .Chart .PlotArea .PlotAreaChoice ,_cgg );_cgg .Line3DChart =_e .NewCT_Line3DChart ();
_cgg .Line3DChart .Grouping =_e .NewCT_Grouping ();_cgg .Line3DChart .Grouping .ValAttr =_e .ST_GroupingStandard ;return Line3DChart {_fge :_cgg .Line3DChart };};

// Index returns the index of the series
func (_beda ScatterChartSeries )Index ()uint32 {return _beda ._fadc .Idx .ValAttr };func (_abg DateAxis )AxisID ()uint32 {return _abg ._dbe .AxId .ValAttr };

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_ad *_e .CT_AreaSer };func (_cgc Legend )SetOverlay (b bool ){_cgc ._aeg .Overlay =_e .NewCT_Boolean ();_cgc ._aeg .Overlay .ValAttr =_de .Bool (b );};func (_ggb CategoryAxis )AxisID ()uint32 {return _ggb ._gac .AxId .ValAttr };


// AddSeries adds a default series to a Surface chart.
func (_ecd Surface3DChart )AddSeries ()SurfaceChartSeries {_ggbc :=_ecd .nextColor (len (_ecd ._afb .Ser ));_adcg :=_e .NewCT_SurfaceSer ();_ecd ._afb .Ser =append (_ecd ._afb .Ser ,_adcg );_adcg .Idx .ValAttr =uint32 (len (_ecd ._afb .Ser )-1);_adcg .Order .ValAttr =uint32 (len (_ecd ._afb .Ser )-1);
_ebd :=SurfaceChartSeries {_adcg };_ebd .InitializeDefaults ();_ebd .Properties ().LineProperties ().SetSolidFill (_ggbc );return _ebd ;};

// AddDateAxis adds a value axis to the chart.
func (_ded Chart )AddDateAxis ()DateAxis {_bcad :=_e .NewCT_DateAx ();if _ded ._egc .Chart .PlotArea .PlotAreaChoice1 ==nil {_ded ._egc .Chart .PlotArea .PlotAreaChoice1 =[]*_e .CT_PlotAreaChoice1 {};};_bcad .AxId =_e .NewCT_UnsignedInt ();_bcad .AxId .ValAttr =0x7FFFFFFF&_g .Uint32 ();
_ded ._egc .Chart .PlotArea .PlotAreaChoice1 =append (_ded ._egc .Chart .PlotArea .PlotAreaChoice1 ,&_e .CT_PlotAreaChoice1 {DateAx :_bcad });_bcad .Delete =_e .NewCT_Boolean ();_bcad .Delete .ValAttr =_de .Bool (false );_bcad .Scaling =_e .NewCT_Scaling ();
_bcad .Scaling .Orientation =_e .NewCT_Orientation ();_bcad .Scaling .Orientation .ValAttr =_e .ST_OrientationMinMax ;_bcad .AxSharedChoice =&_e .EG_AxSharedChoice {};_bcad .AxSharedChoice .Crosses =_e .NewCT_Crosses ();_bcad .AxSharedChoice .Crosses .ValAttr =_e .ST_CrossesAutoZero ;
_eed :=DateAxis {_bcad };_eed .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_gb .LightGray );_eed .SetMajorTickMark (_e .ST_TickMarkOut );_eed .SetMinorTickMark (_e .ST_TickMarkIn );_eed .SetTickLabelPosition (_e .ST_TickLblPosNextTo );
_eed .Properties ().LineProperties ().SetSolidFill (_gb .Black );_eed .SetPosition (_e .ST_AxPosL );return _eed ;};

// X returns the inner wrapped XML type.
func (_bcf BarChart )X ()*_e .CT_BarChart {return _bcf ._ec };

// X returns the inner wrapped XML type.
func (_gbf AreaChart )X ()*_e .CT_AreaChart {return _gbf ._ed };

// Index returns the index of the series
func (_adca SurfaceChartSeries )Index ()uint32 {return _adca ._adgd .Idx .ValAttr };type GridLines struct{_cad *_e .CT_ChartLines };

// AddPie3DChart adds a new pie chart to a chart.
func (_aaf Chart )AddPie3DChart ()Pie3DChart {_eba (_aaf ._egc .Chart );_edc :=_e .NewCT_PlotAreaChoice ();_aaf ._egc .Chart .PlotArea .PlotAreaChoice =append (_aaf ._egc .Chart .PlotArea .PlotAreaChoice ,_edc );_edc .Pie3DChart =_e .NewCT_Pie3DChart ();
_fab :=Pie3DChart {_fdg :_edc .Pie3DChart };_fab .InitializeDefaults ();return _fab ;};

// Properties returns the line chart series shape properties.
func (_fbc LineChartSeries )Properties ()_bf .ShapeProperties {if _fbc ._acee .SpPr ==nil {_fbc ._acee .SpPr =_ae .NewCT_ShapeProperties ();};return _bf .MakeShapeProperties (_fbc ._acee .SpPr );};func (_caa DateAxis )Properties ()_bf .ShapeProperties {if _caa ._dbe .SpPr ==nil {_caa ._dbe .SpPr =_ae .NewCT_ShapeProperties ();
};return _bf .MakeShapeProperties (_caa ._dbe .SpPr );};

// X returns the inner wrapped XML type.
func (_cgf GridLines )X ()*_e .CT_ChartLines {return _cgf ._cad };

// InitializeDefaults the bar chart to its defaults
func (_deag DoughnutChart )InitializeDefaults (){_deag ._abb .VaryColors =_e .NewCT_Boolean ();_deag ._abb .VaryColors .ValAttr =_de .Bool (true );_deag ._abb .HoleSize =_e .NewCT_HoleSize ();_deag ._abb .HoleSize .ValAttr =&_e .ST_HoleSize {};_deag ._abb .HoleSize .ValAttr .ST_HoleSizeUByte =_de .Uint8 (50);
};

// AddBarChart adds a new bar chart to a chart.
func (_da Chart )AddBarChart ()BarChart {_cbf :=_e .NewCT_PlotAreaChoice ();_da ._egc .Chart .PlotArea .PlotAreaChoice =append (_da ._egc .Chart .PlotArea .PlotAreaChoice ,_cbf );_cbf .BarChart =_e .NewCT_BarChart ();_cbf .BarChart .Grouping =_e .NewCT_BarGrouping ();
_cbf .BarChart .Grouping .ValAttr =_e .ST_BarGroupingStandard ;_cab :=BarChart {_ec :_cbf .BarChart };_cab .InitializeDefaults ();return _cab ;};func MakeValueAxis (x *_e .CT_ValAx )ValueAxis {return ValueAxis {x }};func (_aefd ScatterChartSeries )Values ()NumberDataSource {if _aefd ._fadc .YVal ==nil {_aefd ._fadc .YVal =_e .NewCT_NumDataSource ();
};return MakeNumberDataSource (_aefd ._fadc .YVal );};

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_ag *_e .CT_BarSer };

// Properties returns the bar chart series shape properties.
func (_efe PieChartSeries )Properties ()_bf .ShapeProperties {if _efe ._deg .SpPr ==nil {_efe ._deg .SpPr =_ae .NewCT_ShapeProperties ();};return _bf .MakeShapeProperties (_efe ._deg .SpPr );};

// AddValueAxis adds a value axis to the chart.
func (_agg Chart )AddValueAxis ()ValueAxis {_fcae :=_e .NewCT_ValAx ();if _agg ._egc .Chart .PlotArea .PlotAreaChoice1 ==nil {_agg ._egc .Chart .PlotArea .PlotAreaChoice1 =[]*_e .CT_PlotAreaChoice1 {};};_fcae .AxId =_e .NewCT_UnsignedInt ();_fcae .AxId .ValAttr =0x7FFFFFFF&_g .Uint32 ();
_agg ._egc .Chart .PlotArea .PlotAreaChoice1 =append (_agg ._egc .Chart .PlotArea .PlotAreaChoice1 ,&_e .CT_PlotAreaChoice1 {ValAx :_fcae });_fcae .Delete =_e .NewCT_Boolean ();_fcae .Delete .ValAttr =_de .Bool (false );_fcae .Scaling =_e .NewCT_Scaling ();
_fcae .Scaling .Orientation =_e .NewCT_Orientation ();_fcae .Scaling .Orientation .ValAttr =_e .ST_OrientationMinMax ;_fcae .AxSharedChoice =&_e .EG_AxSharedChoice {};_fcae .AxSharedChoice .Crosses =_e .NewCT_Crosses ();_fcae .AxSharedChoice .Crosses .ValAttr =_e .ST_CrossesAutoZero ;
_fcae .CrossBetween =_e .NewCT_CrossBetween ();_fcae .CrossBetween .ValAttr =_e .ST_CrossBetweenBetween ;_cga :=MakeValueAxis (_fcae );_cga .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_gb .LightGray );_cga .SetMajorTickMark (_e .ST_TickMarkOut );
_cga .SetMinorTickMark (_e .ST_TickMarkIn );_cga .SetTickLabelPosition (_e .ST_TickLblPosNextTo );_cga .Properties ().LineProperties ().SetSolidFill (_gb .Black );_cga .SetPosition (_e .ST_AxPosL );return _cga ;};func (_cgdd SeriesAxis )SetCrosses (axis Axis ){_cgdd ._cdea .CrossAx .ValAttr =axis .AxisID ()};


// Labels returns the data label properties.
func (_dbca ScatterChartSeries )Labels ()DataLabels {if _dbca ._fadc .DLbls ==nil {_dbca ._fadc .DLbls =_e .NewCT_DLbls ();};return MakeDataLabels (_dbca ._fadc .DLbls );};type NumberDataSource struct{_dgf *_e .CT_NumDataSource };func (_aedb DateAxis )MajorGridLines ()GridLines {if _aedb ._dbe .MajorGridlines ==nil {_aedb ._dbe .MajorGridlines =_e .NewCT_ChartLines ();
};return GridLines {_aedb ._dbe .MajorGridlines };};func (_ebf DateAxis )SetTickLabelPosition (p _e .ST_TickLblPos ){if p ==_e .ST_TickLblPosUnset {_ebf ._dbe .TickLblPos =nil ;}else {_ebf ._dbe .TickLblPos =_e .NewCT_TickLblPos ();_ebf ._dbe .TickLblPos .ValAttr =p ;
};};func (_edg Marker )Properties ()_bf .ShapeProperties {if _edg ._gda .SpPr ==nil {_edg ._gda .SpPr =_ae .NewCT_ShapeProperties ();};return _bf .MakeShapeProperties (_edg ._gda .SpPr );};

// X returns the inner wrapped XML type.
func (_fbe BubbleChartSeries )X ()*_e .CT_BubbleSer {return _fbe ._aef };

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_aef *_e .CT_BubbleSer };

// Properties returns the Bubble chart series shape properties.
func (_fgg BubbleChartSeries )Properties ()_bf .ShapeProperties {if _fgg ._aef .SpPr ==nil {_fgg ._aef .SpPr =_ae .NewCT_ShapeProperties ();};return _bf .MakeShapeProperties (_fgg ._aef .SpPr );};func (_ffa DataLabels )SetShowLeaderLines (b bool ){_ffa .ensureChoice ();
_ffa ._fcb .DLblsChoice .ShowLeaderLines =_e .NewCT_Boolean ();_ffa ._fcb .DLblsChoice .ShowLeaderLines .ValAttr =_de .Bool (b );};func (_gbg DataLabels )SetShowValue (b bool ){_gbg .ensureChoice ();_gbg ._fcb .DLblsChoice .ShowVal =_e .NewCT_Boolean ();
_gbg ._fcb .DLblsChoice .ShowVal .ValAttr =_de .Bool (b );};type chartBase struct{};

// SetType sets the type the secone pie to either pie or bar
func (_fbbb PieOfPieChart )SetType (t _e .ST_OfPieType ){_fbbb ._eedag .OfPieType .ValAttr =t };func (_aga Legend )Properties ()_bf .ShapeProperties {if _aga ._aeg .SpPr ==nil {_aga ._aeg .SpPr =_ae .NewCT_ShapeProperties ();};return _bf .MakeShapeProperties (_aga ._aeg .SpPr );
};func (_fce DataLabels )SetShowLegendKey (b bool ){_fce .ensureChoice ();_fce ._fcb .DLblsChoice .ShowLegendKey =_e .NewCT_Boolean ();_fce ._fcb .DLblsChoice .ShowLegendKey .ValAttr =_de .Bool (b );};

// InitializeDefaults the bar chart to its defaults
func (_ddf PieChart )InitializeDefaults (){_ddf ._fee .VaryColors =_e .NewCT_Boolean ();_ddf ._fee .VaryColors .ValAttr =_de .Bool (true );};

// Order returns the order of the series
func (_aad LineChartSeries )Order ()uint32 {return _aad ._acee .Order .ValAttr };

// RemoveTitle removes any existing title from the chart.
func (_bfb Chart )RemoveTitle (){_bfb ._egc .Chart .Title =nil ;_bfb ._egc .Chart .AutoTitleDeleted =_e .NewCT_Boolean ();_bfb ._egc .Chart .AutoTitleDeleted .ValAttr =_de .Bool (true );};

// Values returns the bubble size data source.
func (_ged BubbleChartSeries )BubbleSizes ()NumberDataSource {if _ged ._aef .BubbleSize ==nil {_ged ._aef .BubbleSize =_e .NewCT_NumDataSource ();};return MakeNumberDataSource (_ged ._aef .BubbleSize );};

// AddAxis adds an axis to a Surface chart.
func (_eaeb Surface3DChart )AddAxis (axis Axis ){_edaf :=_e .NewCT_UnsignedInt ();_edaf .ValAttr =axis .AxisID ();_eaeb ._afb .AxId =append (_eaeb ._afb .AxId ,_edaf );};func (_ebb NumberDataSource )SetReference (s string ){_ebb .ensureChoice ();if _ebb ._dgf .NumDataSourceChoice .NumRef ==nil {_ebb ._dgf .NumDataSourceChoice .NumRef =_e .NewCT_NumRef ();
};_ebb ._dgf .NumDataSourceChoice .NumRef .F =s ;};

// InitializeDefaults the Stock chart to its defaults
func (_abe StockChart )InitializeDefaults (){_abe ._cefg .HiLowLines =_e .NewCT_ChartLines ();_abe ._cefg .UpDownBars =_e .NewCT_UpDownBars ();_abe ._cefg .UpDownBars .GapWidth =_e .NewCT_GapAmount ();_abe ._cefg .UpDownBars .GapWidth .ValAttr =&_e .ST_GapAmount {};
_abe ._cefg .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_de .Uint16 (150);_abe ._cefg .UpDownBars .UpBars =_e .NewCT_UpDownBar ();_abe ._cefg .UpDownBars .DownBars =_e .NewCT_UpDownBar ();};func (_aac SurfaceChartSeries )Values ()NumberDataSource {if _aac ._adgd .Val ==nil {_aac ._adgd .Val =_e .NewCT_NumDataSource ();
};_cgce :=MakeNumberDataSource (_aac ._adgd .Val );_cgce .CreateEmptyNumberCache ();return _cgce ;};func (_dcb Title )ParagraphProperties ()_bf .ParagraphProperties {if _dcb ._abff .Tx ==nil {_dcb .SetText ("");};if _dcb ._abff .Tx .TxChoice .Rich .P [0].PPr ==nil {_dcb ._abff .Tx .TxChoice .Rich .P [0].PPr =_ae .NewCT_TextParagraphProperties ();
};return _bf .MakeParagraphProperties (_dcb ._abff .Tx .TxChoice .Rich .P [0].PPr );};

// CategoryAxis returns the category data source.
func (_ga BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ga ._aef .XVal ==nil {_ga ._aef .XVal =_e .NewCT_AxDataSource ();};return MakeAxisDataSource (_ga ._aef .XVal );};

// SetDirection changes the direction of the bar chart (bar or column).
func (_ege Bar3DChart )SetDirection (d _e .ST_BarDir ){_ege ._adc .BarDir .ValAttr =d };func (_abfc ScatterChartSeries )InitializeDefaults (){_abfc .Properties ().LineProperties ().SetNoFill ();_abfc .Marker ().SetSymbol (_e .ST_MarkerStyleAuto );_abfc .Labels ().SetShowLegendKey (false );
_abfc .Labels ().SetShowValue (true );_abfc .Labels ().SetShowPercent (false );_abfc .Labels ().SetShowCategoryName (false );_abfc .Labels ().SetShowSeriesName (false );_abfc .Labels ().SetShowLeaderLines (false );};var NullAxis Axis =nullAxis (0);type SurfaceChartSeries struct{_adgd *_e .CT_SurfaceSer };


// X returns the inner wrapped XML type.
func (_gea LineChart )X ()*_e .CT_LineChart {return _gea ._cgfc };

// AddSeries adds a default series to an Doughnut chart.
func (_ace DoughnutChart )AddSeries ()PieChartSeries {_eeda :=_e .NewCT_PieSer ();_ace ._abb .Ser =append (_ace ._abb .Ser ,_eeda );_eeda .Idx .ValAttr =uint32 (len (_ace ._abb .Ser )-1);_eeda .Order .ValAttr =uint32 (len (_ace ._abb .Ser )-1);_fec :=PieChartSeries {_eeda };
_fec .InitializeDefaults ();return _fec ;};func (_fad NumberDataSource )ensureChoice (){if _fad ._dgf .NumDataSourceChoice ==nil {_fad ._dgf .NumDataSourceChoice =_e .NewCT_NumDataSourceChoice ();};};func (_cf SeriesAxis )InitializeDefaults (){};func (_eg AreaChart )AddAxis (axis Axis ){_gd :=_e .NewCT_UnsignedInt ();
_gd .ValAttr =axis .AxisID ();_eg ._ed .AxId =append (_eg ._ed .AxId ,_gd );};

// InitializeDefaults initializes a bar chart series to the default values.
func (_bg BarChartSeries )InitializeDefaults (){};

// SetText sets the series text
func (_eec LineChartSeries )SetText (s string ){_eec ._acee .Tx =_e .NewCT_SerTx ();_eec ._acee .Tx .SerTxChoice .V =&s ;};

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_egca *_e .CT_RadarChart ;};

// X returns the inner wrapped XML type.
func (_gbea PieChart )X ()*_e .CT_PieChart {return _gbea ._fee };

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_cefg *_e .CT_StockChart ;};type nullAxis byte ;func (_ceba DataLabels )SetShowCategoryName (b bool ){_ceba .ensureChoice ();_ceba ._fcb .DLblsChoice .ShowCatName =_e .NewCT_Boolean ();_ceba ._fcb .DLblsChoice .ShowCatName .ValAttr =_de .Bool (b );
};

// AddSeries adds a default series to an Pie chart.
func (_ece PieOfPieChart )AddSeries ()PieChartSeries {_gf :=_e .NewCT_PieSer ();_ece ._eedag .Ser =append (_ece ._eedag .Ser ,_gf );_gf .Idx .ValAttr =uint32 (len (_ece ._eedag .Ser )-1);_gf .Order .ValAttr =uint32 (len (_ece ._eedag .Ser )-1);_dged :=PieChartSeries {_gf };
_dged .InitializeDefaults ();return _dged ;};func (_ebad DateAxis )SetMinorTickMark (m _e .ST_TickMark ){if m ==_e .ST_TickMarkUnset {_ebad ._dbe .MinorTickMark =nil ;}else {_ebad ._dbe .MinorTickMark =_e .NewCT_TickMark ();_ebad ._dbe .MinorTickMark .ValAttr =m ;
};};

// AddAxis adds an axis to a Surface chart.
func (_edce SurfaceChart )AddAxis (axis Axis ){_ebg :=_e .NewCT_UnsignedInt ();_ebg .ValAttr =axis .AxisID ();_edce ._baed .AxId =append (_edce ._baed .AxId ,_ebg );};func (_bca CategoryAxis )SetMajorTickMark (m _e .ST_TickMark ){if m ==_e .ST_TickMarkUnset {_bca ._gac .MajorTickMark =nil ;
}else {_bca ._gac .MajorTickMark =_e .NewCT_TickMark ();_bca ._gac .MajorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_fbd LineChartSeries )X ()*_e .CT_LineSer {return _fbd ._acee };

// AddTitle sets a new title on the chart.
func (_gbac Chart )AddTitle ()Title {_gbac ._egc .Chart .Title =_e .NewCT_Title ();_gbac ._egc .Chart .Title .Overlay =_e .NewCT_Boolean ();_gbac ._egc .Chart .Title .Overlay .ValAttr =_de .Bool (false );_gbac ._egc .Chart .AutoTitleDeleted =_e .NewCT_Boolean ();
_gbac ._egc .Chart .AutoTitleDeleted .ValAttr =_de .Bool (false );_baa :=MakeTitle (_gbac ._egc .Chart .Title );_baa .InitializeDefaults ();return _baa ;};type LineChart struct{chartBase ;_cgfc *_e .CT_LineChart ;};

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_dag Chart )AddBar3DChart ()Bar3DChart {_eba (_dag ._egc .Chart );_cgd :=_e .NewCT_PlotAreaChoice ();_dag ._egc .Chart .PlotArea .PlotAreaChoice =append (_dag ._egc .Chart .PlotArea .PlotAreaChoice ,_cgd );_cgd .Bar3DChart =_e .NewCT_Bar3DChart ();
_cgd .Bar3DChart .Grouping =_e .NewCT_BarGrouping ();_cgd .Bar3DChart .Grouping .ValAttr =_e .ST_BarGroupingStandard ;_aa :=Bar3DChart {_adc :_cgd .Bar3DChart };_aa .InitializeDefaults ();return _aa ;};

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_eedc Chart )AddLegend ()Legend {_eedc ._egc .Chart .Legend =_e .NewCT_Legend ();_bbg :=MakeLegend (_eedc ._egc .Chart .Legend );_bbg .InitializeDefaults ();return _bbg ;};

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_cedf PieChartSeries )SetExplosion (v uint32 ){_cedf ._deg .Explosion =_e .NewCT_UnsignedInt ();_cedf ._deg .Explosion .ValAttr =v ;};

// InitializeDefaults the bar chart to its defaults
func (_gef RadarChart )InitializeDefaults (){_gef ._egca .RadarStyle .ValAttr =_e .ST_RadarStyleMarker };func (_dfa DateAxis )SetPosition (p _e .ST_AxPos ){_dfa ._dbe .AxPos =_e .NewCT_AxPos ();_dfa ._dbe .AxPos .ValAttr =p ;};

// X returns the inner wrapped XML type.
func (_bcfc PieOfPieChart )X ()*_e .CT_OfPieChart {return _bcfc ._eedag };type ScatterChart struct{chartBase ;_caeg *_e .CT_ScatterChart ;};

// X returns the inner wrapped XML type.
func (_dbg Marker )X ()*_e .CT_Marker {return _dbg ._gda };type Title struct{_abff *_e .CT_Title };func (_cebd Title )RunProperties ()_bf .RunProperties {if _cebd ._abff .Tx ==nil {_cebd .SetText ("");};if _cebd ._abff .Tx .TxChoice .Rich .P [0].EG_TextRun [0].TextRunChoice .R .RPr ==nil {_cebd ._abff .Tx .TxChoice .Rich .P [0].EG_TextRun [0].TextRunChoice .R .RPr =_ae .NewCT_TextCharacterProperties ();
};return _bf .MakeRunProperties (_cebd ._abff .Tx .TxChoice .Rich .P [0].EG_TextRun [0].TextRunChoice .R .RPr );};

// X returns the inner wrapped XML type.
func (_adbg RadarChart )X ()*_e .CT_RadarChart {return _adbg ._egca };

// SetDisplayBlanksAs controls how missing values are displayed.
func (_ceb Chart )SetDisplayBlanksAs (v _e .ST_DispBlanksAs ){_ceb ._egc .Chart .DispBlanksAs =_e .NewCT_DispBlanksAs ();_ceb ._egc .Chart .DispBlanksAs .ValAttr =v ;};func (_fff Marker )SetSize (sz uint8 ){_fff ._gda .Size =_e .NewCT_MarkerSize ();_fff ._gda .Size .ValAttr =&sz ;
};

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_deg *_e .CT_PieSer };func (_ddba CategoryAxis )SetCrosses (axis Axis ){_ddba ._gac .AxSharedChoice =_e .NewEG_AxSharedChoice ();_ddba ._gac .AxSharedChoice .Crosses =_e .NewCT_Crosses ();_ddba ._gac .AxSharedChoice .Crosses .ValAttr =_e .ST_CrossesAutoZero ;
_ddba ._gac .CrossAx .ValAttr =axis .AxisID ();};type SeriesAxis struct{_cdea *_e .CT_SerAx };

// Properties returns the bar chart series shape properties.
func (_bda BarChartSeries )Properties ()_bf .ShapeProperties {if _bda ._ag .SpPr ==nil {_bda ._ag .SpPr =_ae .NewCT_ShapeProperties ();};return _bf .MakeShapeProperties (_bda ._ag .SpPr );};func (_edab LineChartSeries )Values ()NumberDataSource {if _edab ._acee .Val ==nil {_edab ._acee .Val =_e .NewCT_NumDataSource ();
};return MakeNumberDataSource (_edab ._acee .Val );};func (_bac Legend )InitializeDefaults (){_bac .SetPosition (_e .ST_LegendPosR );_bac .SetOverlay (false );_bac .Properties ().SetNoFill ();_bac .Properties ().LineProperties ().SetNoFill ();};

// Order returns the order of the series
func (_aafc ScatterChartSeries )Order ()uint32 {return _aafc ._fadc .Order .ValAttr };

// X returns the inner wrapped XML type.
func (_aea PieChartSeries )X ()*_e .CT_PieSer {return _aea ._deg };type CategoryAxis struct{_gac *_e .CT_CatAx };

// AddSeries adds a default series to a Stock chart.
func (_caag StockChart )AddSeries ()LineChartSeries {_geb :=_e .NewCT_LineSer ();_caag ._cefg .Ser =append (_caag ._cefg .Ser ,_geb );_geb .Idx .ValAttr =uint32 (len (_caag ._cefg .Ser )-1);_geb .Order .ValAttr =uint32 (len (_caag ._cefg .Ser )-1);_gdd :=LineChartSeries {_geb };
_gdd .Values ().CreateEmptyNumberCache ();_gdd .Properties ().LineProperties ().SetNoFill ();return _gdd ;};func (_dgb Surface3DChart )InitializeDefaults (){_dgb ._afb .Wireframe =_e .NewCT_Boolean ();_dgb ._afb .Wireframe .ValAttr =_de .Bool (false );
_dgb ._afb .BandFmts =_e .NewCT_BandFmts ();for _bff :=0;_bff < 15;_bff ++{_bcba :=_e .NewCT_BandFmt ();_bcba .Idx .ValAttr =uint32 (_bff );_bcba .SpPr =_ae .NewCT_ShapeProperties ();_dfe :=_bf .MakeShapeProperties (_bcba .SpPr );_dfe .SetSolidFill (_dgb .nextColor (_bff ));
_dgb ._afb .BandFmts .BandFmt =append (_dgb ._afb .BandFmts .BandFmt ,_bcba );};};func (_cgag StockChart )AddAxis (axis Axis ){_gga :=_e .NewCT_UnsignedInt ();_gga .ValAttr =axis .AxisID ();_cgag ._cefg .AxId =append (_cgag ._cefg .AxId ,_gga );};

// SetText sets the series text
func (_ccg SurfaceChartSeries )SetText (s string ){_ccg ._adgd .Tx =_e .NewCT_SerTx ();_ccg ._adgd .Tx .SerTxChoice .V =&s ;};

// AddAxis adds an axis to a Scatter chart.
func (_cda ScatterChart )AddAxis (axis Axis ){_dffa :=_e .NewCT_UnsignedInt ();_dffa .ValAttr =axis .AxisID ();_cda ._caeg .AxId =append (_cda ._caeg .AxId ,_dffa );};func MakeNumberDataSource (x *_e .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};
func (_ebef LineChartSeries )InitializeDefaults (){_ebef .Properties ().LineProperties ().SetWidth (1*_a .Point );_ebef .Properties ().LineProperties ().SetSolidFill (_gb .Black );_ebef .Properties ().LineProperties ().SetJoin (_bf .LineJoinRound );_ebef .Marker ().SetSymbol (_e .ST_MarkerStyleNone );
_ebef .Labels ().SetShowLegendKey (false );_ebef .Labels ().SetShowValue (false );_ebef .Labels ().SetShowPercent (false );_ebef .Labels ().SetShowCategoryName (false );_ebef .Labels ().SetShowSeriesName (false );_ebef .Labels ().SetShowLeaderLines (false );
};

// InitializeDefaults the bar chart to its defaults
func (_bc Area3DChart )InitializeDefaults (){};

// AddSeries adds a default series to an Radar chart.
func (_ggca RadarChart )AddSeries ()RadarChartSeries {_ecbb :=_ggca .nextColor (len (_ggca ._egca .Ser ));_cde :=_e .NewCT_RadarSer ();_ggca ._egca .Ser =append (_ggca ._egca .Ser ,_cde );_cde .Idx .ValAttr =uint32 (len (_ggca ._egca .Ser )-1);_cde .Order .ValAttr =uint32 (len (_ggca ._egca .Ser )-1);
_cdbf :=RadarChartSeries {_cde };_cdbf .InitializeDefaults ();_cdbf .Properties ().SetSolidFill (_ecbb );return _cdbf ;};func (_acc Title )SetText (s string ){if _acc ._abff .Tx ==nil {_acc ._abff .Tx =_e .NewCT_Tx ();};if _acc ._abff .Tx .TxChoice .Rich ==nil {_acc ._abff .Tx .TxChoice .Rich =_ae .NewCT_TextBody ();
};var _efga *_ae .CT_TextParagraph ;if len (_acc ._abff .Tx .TxChoice .Rich .P )==0{_efga =_ae .NewCT_TextParagraph ();_acc ._abff .Tx .TxChoice .Rich .P =[]*_ae .CT_TextParagraph {_efga };}else {_efga =_acc ._abff .Tx .TxChoice .Rich .P [0];};var _gacc *_ae .EG_TextRun ;
if len (_efga .EG_TextRun )==0{_gacc =_ae .NewEG_TextRun ();_efga .EG_TextRun =[]*_ae .EG_TextRun {_gacc };}else {_gacc =_efga .EG_TextRun [0];};if _gacc .TextRunChoice .R ==nil {_gacc .TextRunChoice .R =_ae .NewCT_RegularTextRun ();};_gacc .TextRunChoice .R .T =s ;
};

// Properties returns the line chart series shape properties.
func (_baaf SurfaceChartSeries )Properties ()_bf .ShapeProperties {if _baaf ._adgd .SpPr ==nil {_baaf ._adgd .SpPr =_ae .NewCT_ShapeProperties ();};return _bf .MakeShapeProperties (_baaf ._adgd .SpPr );};

// X returns the inner wrapped XML type.
func (_fbaa ScatterChartSeries )X ()*_e .CT_ScatterSer {return _fbaa ._fadc };type Marker struct{_gda *_e .CT_Marker };

// AddLineChart adds a new line chart to a chart.
func (_bdf Chart )AddLineChart ()LineChart {_gdb :=_e .NewCT_PlotAreaChoice ();_bdf ._egc .Chart .PlotArea .PlotAreaChoice =append (_bdf ._egc .Chart .PlotArea .PlotAreaChoice ,_gdb );_gdb .LineChart =_e .NewCT_LineChart ();_gdb .LineChart .Grouping =_e .NewCT_Grouping ();
_gdb .LineChart .Grouping .ValAttr =_e .ST_GroupingStandard ;return LineChart {_cgfc :_gdb .LineChart };};func (_gdc SurfaceChart )InitializeDefaults (){_gdc ._baed .Wireframe =_e .NewCT_Boolean ();_gdc ._baed .Wireframe .ValAttr =_de .Bool (false );_gdc ._baed .BandFmts =_e .NewCT_BandFmts ();
for _bec :=0;_bec < 15;_bec ++{_gbeb :=_e .NewCT_BandFmt ();_gbeb .Idx .ValAttr =uint32 (_bec );_gbeb .SpPr =_ae .NewCT_ShapeProperties ();_fdab :=_bf .MakeShapeProperties (_gbeb .SpPr );_fdab .SetSolidFill (_gdc .nextColor (_bec ));_gdc ._baed .BandFmts .BandFmt =append (_gdc ._baed .BandFmts .BandFmt ,_gbeb );
};};

// AddAreaChart adds a new area chart to a chart.
func (_dbc Chart )AddAreaChart ()AreaChart {_abd :=_e .NewCT_PlotAreaChoice ();_dbc ._egc .Chart .PlotArea .PlotAreaChoice =append (_dbc ._egc .Chart .PlotArea .PlotAreaChoice ,_abd );_abd .AreaChart =_e .NewCT_AreaChart ();_eda :=AreaChart {_ed :_abd .AreaChart };
_eda .InitializeDefaults ();return _eda ;};func (_bfd LineChartSeries )SetSmooth (b bool ){_bfd ._acee .Smooth =_e .NewCT_Boolean ();_bfd ._acee .Smooth .ValAttr =&b ;};

// Properties returns the bar chart series shape properties.
func (_ba AreaChartSeries )Properties ()_bf .ShapeProperties {if _ba ._ad .SpPr ==nil {_ba ._ad .SpPr =_ae .NewCT_ShapeProperties ();};return _bf .MakeShapeProperties (_ba ._ad .SpPr );};

// InitializeDefaults initializes an Pie series to the default values.
func (_dbcc PieChartSeries )InitializeDefaults (){};func (_bed DateAxis )SetCrosses (axis Axis ){_bed ._dbe .CrossAx .ValAttr =axis .AxisID ()};func (_dffb ValueAxis )SetMajorTickMark (m _e .ST_TickMark ){if m ==_e .ST_TickMarkUnset {_dffb ._eedg .MajorTickMark =nil ;
}else {_dffb ._eedg .MajorTickMark =_e .NewCT_TickMark ();_dffb ._eedg .MajorTickMark .ValAttr =m ;};};

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_eedag *_e .CT_OfPieChart ;};type Line3DChart struct{chartBase ;_fge *_e .CT_Line3DChart ;};

// AddSeries adds a default series to a Bubble chart.
func (_fb BubbleChart )AddSeries ()BubbleChartSeries {_edb :=_fb .nextColor (len (_fb ._ddb .Ser ));_caf :=_e .NewCT_BubbleSer ();_fb ._ddb .Ser =append (_fb ._ddb .Ser ,_caf );_caf .Idx .ValAttr =uint32 (len (_fb ._ddb .Ser )-1);_caf .Order .ValAttr =uint32 (len (_fb ._ddb .Ser )-1);
_fca :=BubbleChartSeries {_caf };_fca .InitializeDefaults ();_fca .Properties ().SetSolidFill (_edb );return _fca ;};func (_ggeb CategoryAxis )SetPosition (p _e .ST_AxPos ){_ggeb ._gac .AxPos =_e .NewCT_AxPos ();_ggeb ._gac .AxPos .ValAttr =p ;};

// SetText sets the series text
func (_cabe ScatterChartSeries )SetText (s string ){_cabe ._fadc .Tx =_e .NewCT_SerTx ();_cabe ._fadc .Tx .SerTxChoice .V =&s ;};

// X returns the inner wrapped XML type.
func (_cg AreaChartSeries )X ()*_e .CT_AreaSer {return _cg ._ad };

// SetOrder sets the order of the series
func (_baad LineChartSeries )SetOrder (idx uint32 ){_baad ._acee .Order .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_f Area3DChart )X ()*_e .CT_Area3DChart {return _f ._gg };

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_afb *_e .CT_Surface3DChart ;};func (_cdf ValueAxis )SetCrosses (axis Axis ){_cdf ._eedg .CrossAx .ValAttr =axis .AxisID ()};

// Values returns the value data source.
func (_aaa RadarChartSeries )Values ()NumberDataSource {if _aaa ._fcd .Val ==nil {_aaa ._fcd .Val =_e .NewCT_NumDataSource ();};return MakeNumberDataSource (_aaa ._fcd .Val );};

// Marker returns the marker properties.
func (_aafe LineChartSeries )Marker ()Marker {if _aafe ._acee .Marker ==nil {_aafe ._acee .Marker =_e .NewCT_Marker ();};return MakeMarker (_aafe ._acee .Marker );};

// SetIndex sets the index of the series
func (_cadf ScatterChartSeries )SetIndex (idx uint32 ){_cadf ._fadc .Idx .ValAttr =idx };

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_cdd Chart )AddDoughnutChart ()DoughnutChart {_gdg :=_e .NewCT_PlotAreaChoice ();_cdd ._egc .Chart .PlotArea .PlotAreaChoice =append (_cdd ._egc .Chart .PlotArea .PlotAreaChoice ,_gdg );_gdg .DoughnutChart =_e .NewCT_DoughnutChart ();_cbe :=DoughnutChart {_abb :_gdg .DoughnutChart };
_cbe .InitializeDefaults ();return _cbe ;};func (_df Bar3DChart )AddAxis (axis Axis ){_afg :=_e .NewCT_UnsignedInt ();_afg .ValAttr =axis .AxisID ();_df ._adc .AxId =append (_df ._adc .AxId ,_afg );};

// Properties returns the bar chart series shape properties.
func (_gbce RadarChartSeries )Properties ()_bf .ShapeProperties {if _gbce ._fcd .SpPr ==nil {_gbce ._fcd .SpPr =_ae .NewCT_ShapeProperties ();};return _bf .MakeShapeProperties (_gbce ._fcd .SpPr );};

// InitializeDefaults the bar chart to its defaults
func (_bge PieOfPieChart )InitializeDefaults (){_bge ._eedag .VaryColors =_e .NewCT_Boolean ();_bge ._eedag .VaryColors .ValAttr =_de .Bool (true );_bge .SetType (_e .ST_OfPieTypePie );_bge ._eedag .SecondPieSize =_e .NewCT_SecondPieSize ();_bge ._eedag .SecondPieSize .ValAttr =&_e .ST_SecondPieSize {};
_bge ._eedag .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_de .Uint16 (75);_fcgb :=_e .NewCT_ChartLines ();_fcgb .SpPr =_ae .NewCT_ShapeProperties ();_dgg :=_bf .MakeShapeProperties (_fcgb .SpPr );_dgg .LineProperties ().SetSolidFill (_gb .Auto );_bge ._eedag .SerLines =append (_bge ._eedag .SerLines ,_fcgb );
};

// X returns the inner wrapped XML type.
func (_eae Pie3DChart )X ()*_e .CT_Pie3DChart {return _eae ._fdg };

// SetText sets the series text.
func (_aeba PieChartSeries )SetText (s string ){_aeba ._deg .Tx =_e .NewCT_SerTx ();_aeba ._deg .Tx .SerTxChoice .V =&s ;};func MakeMarker (x *_e .CT_Marker )Marker {return Marker {x }};

// SetValues is used to set the source data to a set of values.
func (_abf CategoryAxisDataSource )SetValues (v []string ){_abf ._ce .AxDataSourceChoice =_e .NewCT_AxDataSourceChoice ();_abf ._ce .AxDataSourceChoice .StrLit =_e .NewCT_StrData ();_abf ._ce .AxDataSourceChoice .StrLit .PtCount =_e .NewCT_UnsignedInt ();
_abf ._ce .AxDataSourceChoice .StrLit .PtCount .ValAttr =uint32 (len (v ));for _gbbd ,_aedf :=range v {_abf ._ce .AxDataSourceChoice .StrLit .Pt =append (_abf ._ce .AxDataSourceChoice .StrLit .Pt ,&_e .CT_StrVal {IdxAttr :uint32 (_gbbd ),V :_aedf });};
};func (_cef DataLabels )SetShowPercent (b bool ){_cef .ensureChoice ();_cef ._fcb .DLblsChoice .ShowPercent =_e .NewCT_Boolean ();_cef ._fcb .DLblsChoice .ShowPercent .ValAttr =_de .Bool (b );};

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_ec *_e .CT_BarChart ;};

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_acee *_e .CT_LineSer };func (_bbdb SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bbdb ._adgd .Cat ==nil {_bbdb ._adgd .Cat =_e .NewCT_AxDataSource ();};return MakeAxisDataSource (_bbdb ._adgd .Cat );};

// X returns the inner wrapped XML type.
func (_abc DoughnutChart )X ()*_e .CT_DoughnutChart {return _abc ._abb };

// X returns the inner wrapped XML type.
func (_ecec StockChart )X ()*_e .CT_StockChart {return _ecec ._cefg };type ValueAxis struct{_eedg *_e .CT_ValAx };

// Index returns the index of the series
func (_beg LineChartSeries )Index ()uint32 {return _beg ._acee .Idx .ValAttr };

// X returns the inner wrapped XML type.
func (_feef ScatterChart )X ()*_e .CT_ScatterChart {return _feef ._caeg };

// AddAxis adds an axis to a line chart.
func (_cbef LineChart )AddAxis (axis Axis ){_dcg :=_e .NewCT_UnsignedInt ();_dcg .ValAttr =axis .AxisID ();_cbef ._cgfc .AxId =append (_cbef ._cgfc .AxId ,_dcg );};

// SetText sets the series text.
func (_ef AreaChartSeries )SetText (s string ){_ef ._ad .Tx =_e .NewCT_SerTx ();_ef ._ad .Tx .SerTxChoice .V =&s ;};

// Marker returns the marker properties.
func (_ccf ScatterChartSeries )Marker ()Marker {if _ccf ._fadc .Marker ==nil {_ccf ._fadc .Marker =_e .NewCT_Marker ();};return MakeMarker (_ccf ._fadc .Marker );};

// X returns the inner wrapped XML type.
func (_bea Title )X ()*_e .CT_Title {return _bea ._abff };

// Values returns the value data source.
func (_gcf PieChartSeries )Values ()NumberDataSource {if _gcf ._deg .Val ==nil {_gcf ._deg .Val =_e .NewCT_NumDataSource ();};return MakeNumberDataSource (_gcf ._deg .Val );};type DateAxis struct{_dbe *_e .CT_DateAx };func MakeTitle (x *_e .CT_Title )Title {return Title {x }};
func (_cdg DateAxis )SetMajorTickMark (m _e .ST_TickMark ){if m ==_e .ST_TickMarkUnset {_cdg ._dbe .MajorTickMark =nil ;}else {_cdg ._dbe .MajorTickMark =_e .NewCT_TickMark ();_cdg ._dbe .MajorTickMark .ValAttr =m ;};};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};func (_bdg ValueAxis )AxisID ()uint32 {return _bdg ._eedg .AxId .ValAttr };

// X returns the inner wrapped XML type.
func (_fda SeriesAxis )X ()*_e .CT_SerAx {return _fda ._cdea };

// X returns the inner wrapped XML type.
func (_efg BubbleChart )X ()*_e .CT_BubbleChart {return _efg ._ddb };

// Properties returns the line chart series shape properties.
func (_eac ScatterChartSeries )Properties ()_bf .ShapeProperties {if _eac ._fadc .SpPr ==nil {_eac ._fadc .SpPr =_ae .NewCT_ShapeProperties ();};return _bf .MakeShapeProperties (_eac ._fadc .SpPr );};

// InitializeDefaults initializes an area series to the default values.
func (_db AreaChartSeries )InitializeDefaults (){};func (_fbb CategoryAxis )SetTickLabelPosition (p _e .ST_TickLblPos ){if p ==_e .ST_TickLblPosUnset {_fbb ._gac .TickLblPos =nil ;}else {_fbb ._gac .TickLblPos =_e .NewCT_TickLblPos ();_fbb ._gac .TickLblPos .ValAttr =p ;
};};

// AddScatterChart adds a scatter (X/Y) chart.
func (_dbcd Chart )AddScatterChart ()ScatterChart {_agb :=_e .NewCT_PlotAreaChoice ();_dbcd ._egc .Chart .PlotArea .PlotAreaChoice =append (_dbcd ._egc .Chart .PlotArea .PlotAreaChoice ,_agb );_agb .ScatterChart =_e .NewCT_ScatterChart ();_gdbc :=ScatterChart {_caeg :_agb .ScatterChart };
_gdbc .InitializeDefaults ();return _gdbc ;};func (_bb CategoryAxis )SetMinorTickMark (m _e .ST_TickMark ){if m ==_e .ST_TickMarkUnset {_bb ._gac .MinorTickMark =nil ;}else {_bb ._gac .MinorTickMark =_e .NewCT_TickMark ();_bb ._gac .MinorTickMark .ValAttr =m ;
};};

// AddSurfaceChart adds a new surface chart to a chart.
func (_age Chart )AddSurfaceChart ()SurfaceChart {_gde :=_e .NewCT_PlotAreaChoice ();_age ._egc .Chart .PlotArea .PlotAreaChoice =append (_age ._egc .Chart .PlotArea .PlotAreaChoice ,_gde );_gde .SurfaceChart =_e .NewCT_SurfaceChart ();_eba (_age ._egc .Chart );
_age ._egc .Chart .View3D .RotX .ValAttr =_de .Int8 (90);_age ._egc .Chart .View3D .RotY .ValAttr =_de .Uint16 (0);_age ._egc .Chart .View3D .Perspective =_e .NewCT_Perspective ();_age ._egc .Chart .View3D .Perspective .ValAttr =_de .Uint8 (0);_fede :=SurfaceChart {_baed :_gde .SurfaceChart };
_fede .InitializeDefaults ();return _fede ;};func MakeLegend (l *_e .CT_Legend )Legend {return Legend {l }};

// X returns the inner wrapped XML type.
func (_deda ValueAxis )X ()*_e .CT_ValAx {return _deda ._eedg };func (_gfe RadarChart )AddAxis (axis Axis ){_bebc :=_e .NewCT_UnsignedInt ();_bebc .ValAttr =axis .AxisID ();_gfe ._egca .AxId =append (_gfe ._egca .AxId ,_bebc );};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_fcd *_e .CT_RadarSer };

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_gg *_e .CT_Area3DChart ;};func _eba (_dea *_e .CT_Chart ){_dea .View3D =_e .NewCT_View3D ();_dea .View3D .RotX =_e .NewCT_RotX ();_dea .View3D .RotX .ValAttr =_de .Int8 (15);_dea .View3D .RotY =_e .NewCT_RotY ();_dea .View3D .RotY .ValAttr =_de .Uint16 (20);
_dea .View3D .RAngAx =_e .NewCT_Boolean ();_dea .View3D .RAngAx .ValAttr =_de .Bool (false );_dea .Floor =_e .NewCT_Surface ();_dea .Floor .Thickness =_e .NewCT_Thickness ();_dea .Floor .Thickness .ValAttr .Uint32 =_de .Uint32 (0);_dea .SideWall =_e .NewCT_Surface ();
_dea .SideWall .Thickness =_e .NewCT_Thickness ();_dea .SideWall .Thickness .ValAttr .Uint32 =_de .Uint32 (0);_dea .BackWall =_e .NewCT_Surface ();_dea .BackWall .Thickness =_e .NewCT_Thickness ();_dea .BackWall .Thickness .ValAttr .Uint32 =_de .Uint32 (0);
};func (_beff ScatterChart )InitializeDefaults (){_beff ._caeg .ScatterStyle .ValAttr =_e .ST_ScatterStyleMarker ;};

// AddCategoryAxis adds a category axis.
func (_dga Chart )AddCategoryAxis ()CategoryAxis {_gbcg :=_e .NewCT_CatAx ();if _dga ._egc .Chart .PlotArea .PlotAreaChoice1 ==nil {_dga ._egc .Chart .PlotArea .PlotAreaChoice1 =[]*_e .CT_PlotAreaChoice1 {};};_gbcg .AxId =_e .NewCT_UnsignedInt ();_gbcg .AxId .ValAttr =0x7FFFFFFF&_g .Uint32 ();
_dga ._egc .Chart .PlotArea .PlotAreaChoice1 =append (_dga ._egc .Chart .PlotArea .PlotAreaChoice1 ,&_e .CT_PlotAreaChoice1 {CatAx :_gbcg });_gbcg .Auto =_e .NewCT_Boolean ();_gbcg .Auto .ValAttr =_de .Bool (true );_gbcg .Delete =_e .NewCT_Boolean ();_gbcg .Delete .ValAttr =_de .Bool (false );
_bcae :=MakeCategoryAxis (_gbcg );_bcae .InitializeDefaults ();return _bcae ;};

// X returns the inner wrapped XML type.
func (_ega SurfaceChartSeries )X ()*_e .CT_SurfaceSer {return _ega ._adgd };func (_feb CategoryAxis )InitializeDefaults (){_feb .SetPosition (_e .ST_AxPosB );_feb .SetMajorTickMark (_e .ST_TickMarkOut );_feb .SetMinorTickMark (_e .ST_TickMarkIn );_feb .SetTickLabelPosition (_e .ST_TickLblPosNextTo );
_feb .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_gb .LightGray );_feb .Properties ().LineProperties ().SetSolidFill (_gb .Black );};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_fdg *_e .CT_Pie3DChart ;};

// Labels returns the data label properties.
func (_cae LineChartSeries )Labels ()DataLabels {if _cae ._acee .DLbls ==nil {_cae ._acee .DLbls =_e .NewCT_DLbls ();};return MakeDataLabels (_cae ._acee .DLbls );};func MakeChart (x *_e .ChartSpace )Chart {return Chart {x }};type DataLabels struct{_fcb *_e .CT_DLbls };


// X returns the inner wrapped XML type.
func (_af Bar3DChart )X ()*_e .CT_Bar3DChart {return _af ._adc };

// AddSeries adds a default series to a bar chart.
func (_bcb Bar3DChart )AddSeries ()BarChartSeries {_ab :=_bcb .nextColor (len (_bcb ._adc .Ser ));_egf :=_e .NewCT_BarSer ();_bcb ._adc .Ser =append (_bcb ._adc .Ser ,_egf );_egf .Idx .ValAttr =uint32 (len (_bcb ._adc .Ser )-1);_egf .Order .ValAttr =uint32 (len (_bcb ._adc .Ser )-1);
_dbd :=BarChartSeries {_egf };_dbd .InitializeDefaults ();_dbd .Properties ().SetSolidFill (_ab );return _dbd ;};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_dee DoughnutChart )SetHoleSize (pct uint8 ){if _dee ._abb .HoleSize ==nil {_dee ._abb .HoleSize =_e .NewCT_HoleSize ();};if _dee ._abb .HoleSize .ValAttr ==nil {_dee ._abb .HoleSize .ValAttr =&_e .ST_HoleSize {};};_dee ._abb .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;
};

// InitializeDefaults the Bubble chart to its defaults
func (_be BubbleChart )InitializeDefaults (){};

// SetText sets the series text.
func (_gfb RadarChartSeries )SetText (s string ){_gfb ._fcd .Tx =_e .NewCT_SerTx ();_gfb ._fcd .Tx .SerTxChoice .V =&s ;};

// X returns the inner wrapped XML type.
func (_dg BarChartSeries )X ()*_e .CT_BarSer {return _dg ._ag };func (_gbd ValueAxis )SetMinorTickMark (m _e .ST_TickMark ){if m ==_e .ST_TickMarkUnset {_gbd ._eedg .MinorTickMark =nil ;}else {_gbd ._eedg .MinorTickMark =_e .NewCT_TickMark ();_gbd ._eedg .MinorTickMark .ValAttr =m ;
};};func (_cdb chartBase )nextColor (_dce int )_gb .Color {return _aeb [_dce %len (_aeb )]};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_fee *_e .CT_PieChart ;};func (_fa Area3DChart )AddAxis (axis Axis ){_fc :=_e .NewCT_UnsignedInt ();_fc .ValAttr =axis .AxisID ();_fa ._gg .AxId =append (_fa ._gg .AxId ,_fc );};

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_fadc *_e .CT_ScatterSer };

// CategoryAxis returns the category data source.
func (_bga BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bga ._ag .Cat ==nil {_bga ._ag .Cat =_e .NewCT_AxDataSource ();};return MakeAxisDataSource (_bga ._ag .Cat );};

// SetDirection changes the direction of the bar chart (bar or column).
func (_dd BarChart )SetDirection (d _e .ST_BarDir ){_dd ._ec .BarDir .ValAttr =d };

// CategoryAxis returns the category data source.
func (_ca AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ca ._ad .Cat ==nil {_ca ._ad .Cat =_e .NewCT_AxDataSource ();};return MakeAxisDataSource (_ca ._ad .Cat );};

// X returns the inner wrapped XML type.
func (_dfg Surface3DChart )X ()*_e .CT_Surface3DChart {return _dfg ._afb };

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_ce *_e .CT_AxDataSource };func MakeSeriesAxis (x *_e .CT_SerAx )SeriesAxis {return SeriesAxis {x }};

// Chart is a generic chart.
type Chart struct{_egc *_e .ChartSpace };

// SetText sets the series text.
func (_eb BubbleChartSeries )SetText (s string ){_eb ._aef .Tx =_e .NewCT_SerTx ();_eb ._aef .Tx .SerTxChoice .V =&s ;};

// InitializeDefaults the bar chart to its defaults
func (_bfg AreaChart )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_gce SurfaceChart )X ()*_e .CT_SurfaceChart {return _gce ._baed };

// Values returns the value data source.
func (_aed AreaChartSeries )Values ()NumberDataSource {if _aed ._ad .Val ==nil {_aed ._ad .Val =_e .NewCT_NumDataSource ();};return MakeNumberDataSource (_aed ._ad .Val );};

// AddSeries adds a default series to a line chart.
func (_bef LineChart )AddSeries ()LineChartSeries {_cgb :=_bef .nextColor (len (_bef ._cgfc .Ser ));_bcdd :=_e .NewCT_LineSer ();_bef ._cgfc .Ser =append (_bef ._cgfc .Ser ,_bcdd );_bcdd .Idx .ValAttr =uint32 (len (_bef ._cgfc .Ser )-1);_bcdd .Order .ValAttr =uint32 (len (_bef ._cgfc .Ser )-1);
_fac :=LineChartSeries {_bcdd };_fac .InitializeDefaults ();_fac .Properties ().LineProperties ().SetSolidFill (_cgb );return _fac ;};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_fbf Chart )AddPieOfPieChart ()PieOfPieChart {_aec :=_e .NewCT_PlotAreaChoice ();_fbf ._egc .Chart .PlotArea .PlotAreaChoice =append (_fbf ._egc .Chart .PlotArea .PlotAreaChoice ,_aec );_aec .OfPieChart =_e .NewCT_OfPieChart ();_daa :=PieOfPieChart {_eedag :_aec .OfPieChart };
_daa .InitializeDefaults ();return _daa ;};func (_fdb ValueAxis )SetTickLabelPosition (p _e .ST_TickLblPos ){if p ==_e .ST_TickLblPosUnset {_fdb ._eedg .TickLblPos =nil ;}else {_fdb ._eedg .TickLblPos =_e .NewCT_TickLblPos ();_fdb ._eedg .TickLblPos .ValAttr =p ;
};};func (_bd nullAxis )AxisID ()uint32 {return 0};

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_dbdb NumberDataSource )CreateEmptyNumberCache (){_dbdb .ensureChoice ();if _dbdb ._dgf .NumDataSourceChoice .NumRef ==nil {_dbdb ._dgf .NumDataSourceChoice .NumRef =_e .NewCT_NumRef ();};_dbdb ._dgf .NumDataSourceChoice .NumLit =nil ;_dbdb ._dgf .NumDataSourceChoice .NumRef .NumCache =_e .NewCT_NumData ();
_dbdb ._dgf .NumDataSourceChoice .NumRef .NumCache .PtCount =_e .NewCT_UnsignedInt ();_dbdb ._dgf .NumDataSourceChoice .NumRef .NumCache .PtCount .ValAttr =0;};func (_egg CategoryAxis )Properties ()_bf .ShapeProperties {if _egg ._gac .SpPr ==nil {_egg ._gac .SpPr =_ae .NewCT_ShapeProperties ();
};return _bf .MakeShapeProperties (_egg ._gac .SpPr );};

// AddSeries adds a default series to an area chart.
func (_gbc Area3DChart )AddSeries ()AreaChartSeries {_dc :=_gbc .nextColor (len (_gbc ._gg .Ser ));_c :=_e .NewCT_AreaSer ();_gbc ._gg .Ser =append (_gbc ._gg .Ser ,_c );_c .Idx .ValAttr =uint32 (len (_gbc ._gg .Ser )-1);_c .Order .ValAttr =uint32 (len (_gbc ._gg .Ser )-1);
_ge :=AreaChartSeries {_c };_ge .InitializeDefaults ();_ge .Properties ().SetSolidFill (_dc );return _ge ;};

// AddSeries adds a default series to a Surface chart.
func (_cddg SurfaceChart )AddSeries ()SurfaceChartSeries {_cgbg :=_cddg .nextColor (len (_cddg ._baed .Ser ));_dad :=_e .NewCT_SurfaceSer ();_cddg ._baed .Ser =append (_cddg ._baed .Ser ,_dad );_dad .Idx .ValAttr =uint32 (len (_cddg ._baed .Ser )-1);_dad .Order .ValAttr =uint32 (len (_cddg ._baed .Ser )-1);
_gbgg :=SurfaceChartSeries {_dad };_gbgg .InitializeDefaults ();_gbgg .Properties ().LineProperties ().SetSolidFill (_cgbg );return _gbgg ;};

// InitializeDefaults the bar chart to its defaults
func (_fg BarChart )InitializeDefaults (){_fg .SetDirection (_e .ST_BarDirCol )};

// Values returns the value data source.
func (_bfc BarChartSeries )Values ()NumberDataSource {if _bfc ._ag .Val ==nil {_bfc ._ag .Val =_e .NewCT_NumDataSource ();};return MakeNumberDataSource (_bfc ._ag .Val );};

// Properties returns the chart's shape properties.
func (_gab Chart )Properties ()_bf .ShapeProperties {if _gab ._egc .SpPr ==nil {_gab ._egc .SpPr =_ae .NewCT_ShapeProperties ();};return _bf .MakeShapeProperties (_gab ._egc .SpPr );};

// AddSeries adds a default series to an Pie chart.
func (_eggf PieChart )AddSeries ()PieChartSeries {_gc :=_e .NewCT_PieSer ();_eggf ._fee .Ser =append (_eggf ._fee .Ser ,_gc );_gc .Idx .ValAttr =uint32 (len (_eggf ._fee .Ser )-1);_gc .Order .ValAttr =uint32 (len (_eggf ._fee .Ser )-1);_bde :=PieChartSeries {_gc };
_bde .InitializeDefaults ();return _bde ;};

// SetIndex sets the index of the series
func (_dgaf LineChartSeries )SetIndex (idx uint32 ){_dgaf ._acee .Idx .ValAttr =idx };func (_bcc ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bcc ._fadc .XVal ==nil {_bcc ._fadc .XVal =_e .NewCT_AxDataSource ();};return MakeAxisDataSource (_bcc ._fadc .XVal );
};

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_ced CategoryAxisDataSource )SetNumberReference (s string ){_ced ._ce .AxDataSourceChoice =_e .NewCT_AxDataSourceChoice ();_ced ._ce .AxDataSourceChoice .NumRef =_e .NewCT_NumRef ();_ced ._ce .AxDataSourceChoice .NumRef .F =s ;};

// CategoryAxis returns the category data source.
func (_egb PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _egb ._deg .Cat ==nil {_egb ._deg .Cat =_e .NewCT_AxDataSource ();};return MakeAxisDataSource (_egb ._deg .Cat );};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_cea CategoryAxisDataSource )SetLabelReference (s string ){_cea ._ce .AxDataSourceChoice =_e .NewCT_AxDataSourceChoice ();_cea ._ce .AxDataSourceChoice .StrRef =_e .NewCT_StrRef ();_cea ._ce .AxDataSourceChoice .StrRef .F =s ;};var _aeb =[]_gb .Color {_gb .RGB (0x33,0x66,0xcc),_gb .RGB (0xDC,0x39,0x12),_gb .RGB (0xFF,0x99,0x00),_gb .RGB (0x10,0x96,0x18),_gb .RGB (0x99,0x00,0x99),_gb .RGB (0x3B,0x3E,0xAC),_gb .RGB (0x00,0x99,0xC6),_gb .RGB (0xDD,0x44,0x77),_gb .RGB (0x66,0xAA,0x00),_gb .RGB (0xB8,0x2E,0x2E),_gb .RGB (0x31,0x63,0x95),_gb .RGB (0x99,0x44,0x99),_gb .RGB (0x22,0xAA,0x99),_gb .RGB (0xAA,0xAA,0x11),_gb .RGB (0x66,0x33,0xCC),_gb .RGB (0xE6,0x73,0x00),_gb .RGB (0x8B,0x07,0x07),_gb .RGB (0x32,0x92,0x62),_gb .RGB (0x55,0x74,0xA6),_gb .RGB (0x3B,0x3E,0xAC)};
func (_dbga SurfaceChartSeries )InitializeDefaults (){_dbga .Properties ().LineProperties ().SetWidth (1*_a .Point );_dbga .Properties ().LineProperties ().SetSolidFill (_gb .Black );_dbga .Properties ().LineProperties ().SetJoin (_bf .LineJoinRound );
};func (_gge BarChart )AddAxis (axis Axis ){_fd :=_e .NewCT_UnsignedInt ();_fd .ValAttr =axis .AxisID ();_gge ._ec .AxId =append (_gge ._ec .AxId ,_fd );};

// AddSeries adds a default series to a bar chart.
func (_gbb BarChart )AddSeries ()BarChartSeries {_bfga :=_gbb .nextColor (len (_gbb ._ec .Ser ));_bfa :=_e .NewCT_BarSer ();_gbb ._ec .Ser =append (_gbb ._ec .Ser ,_bfa );_bfa .Idx .ValAttr =uint32 (len (_gbb ._ec .Ser )-1);_bfa .Order .ValAttr =uint32 (len (_gbb ._ec .Ser )-1);
_cb :=BarChartSeries {_bfa };_cb .InitializeDefaults ();_cb .Properties ().SetSolidFill (_bfga );return _cb ;};func (_fef DataLabels )SetShowSeriesName (b bool ){_fef .ensureChoice ();_fef ._fcb .DLblsChoice .ShowSerName =_e .NewCT_Boolean ();_fef ._fcb .DLblsChoice .ShowSerName .ValAttr =_de .Bool (b );
};type Legend struct{_aeg *_e .CT_Legend };