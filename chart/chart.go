//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_fd "fmt";_ce "github.com/unidoc/unioffice";_e "github.com/unidoc/unioffice/color";_ca "github.com/unidoc/unioffice/drawing";_c "github.com/unidoc/unioffice/measurement";_eg "github.com/unidoc/unioffice/schema/soo/dml";_fe "github.com/unidoc/unioffice/schema/soo/dml/chart";
_fg "math/rand";);

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_eee *_fe .CT_PieChart ;};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_dcg *_fe .CT_Pie3DChart ;};func (_aec ValueAxis )SetCrosses (axis Axis ){_aec ._cga .CrossAx .ValAttr =axis .AxisID ()};

// X returns the inner wrapped XML type.
func (_aff Bar3DChart )X ()*_fe .CT_Bar3DChart {return _aff ._bgg };type GridLines struct{_bddd *_fe .CT_ChartLines };type NumberDataSource struct{_dba *_fe .CT_NumDataSource };

// SetText sets the series text.
func (_cgb BubbleChartSeries )SetText (s string ){_cgb ._gca .Tx =_fe .NewCT_SerTx ();_cgb ._gca .Tx .Choice .V =&s ;};func (_cdb Bar3DChart )AddAxis (axis Axis ){_cc :=_fe .NewCT_UnsignedInt ();_cc .ValAttr =axis .AxisID ();_cdb ._bgg .AxId =append (_cdb ._bgg .AxId ,_cc );
};func (_dgee StockChart )AddAxis (axis Axis ){_ebb :=_fe .NewCT_UnsignedInt ();_ebb .ValAttr =axis .AxisID ();_dgee ._adb .AxId =append (_dgee ._adb .AxId ,_ebb );};

// AddAxis adds an axis to a line chart.
func (_dbg LineChart )AddAxis (axis Axis ){_ecd :=_fe .NewCT_UnsignedInt ();_ecd .ValAttr =axis .AxisID ();_dbg ._fec .AxId =append (_dbg ._fec .AxId ,_ecd );};func (_edg DateAxis )SetMajorTickMark (m _fe .ST_TickMark ){if m ==_fe .ST_TickMarkUnset {_edg ._bgf .MajorTickMark =nil ;
}else {_edg ._bgf .MajorTickMark =_fe .NewCT_TickMark ();_edg ._bgf .MajorTickMark .ValAttr =m ;};};func (_abf Legend )InitializeDefaults (){_abf .SetPosition (_fe .ST_LegendPosR );_abf .SetOverlay (false );_abf .Properties ().SetNoFill ();_abf .Properties ().LineProperties ().SetNoFill ();
};type Legend struct{_gbd *_fe .CT_Legend };func (_fge CategoryAxis )MajorGridLines ()GridLines {if _fge ._fce .MajorGridlines ==nil {_fge ._fce .MajorGridlines =_fe .NewCT_ChartLines ();};return GridLines {_fge ._fce .MajorGridlines };};

// Marker returns the marker properties.
func (_cebd LineChartSeries )Marker ()Marker {if _cebd ._fceg .Marker ==nil {_cebd ._fceg .Marker =_fe .NewCT_Marker ();};return MakeMarker (_cebd ._fceg .Marker );};

// InitializeDefaults the Stock chart to its defaults
func (_defb StockChart )InitializeDefaults (){_defb ._adb .HiLowLines =_fe .NewCT_ChartLines ();_defb ._adb .UpDownBars =_fe .NewCT_UpDownBars ();_defb ._adb .UpDownBars .GapWidth =_fe .NewCT_GapAmount ();_defb ._adb .UpDownBars .GapWidth .ValAttr =&_fe .ST_GapAmount {};
_defb ._adb .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_ce .Uint16 (150);_defb ._adb .UpDownBars .UpBars =_fe .NewCT_UpDownBar ();_defb ._adb .UpDownBars .DownBars =_fe .NewCT_UpDownBar ();};

// SetValues is used to set the source data to a set of values.
func (_efe CategoryAxisDataSource )SetValues (v []string ){_efe ._fdb .Choice =_fe .NewCT_AxDataSourceChoice ();_efe ._fdb .Choice .StrLit =_fe .NewCT_StrData ();_efe ._fdb .Choice .StrLit .PtCount =_fe .NewCT_UnsignedInt ();_efe ._fdb .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));
for _ggb ,_cfcc :=range v {_efe ._fdb .Choice .StrLit .Pt =append (_efe ._fdb .Choice .StrLit .Pt ,&_fe .CT_StrVal {IdxAttr :uint32 (_ggb ),V :_cfcc });};};func (_afdg ValueAxis )SetPosition (p _fe .ST_AxPos ){_afdg ._cga .AxPos =_fe .NewCT_AxPos ();_afdg ._cga .AxPos .ValAttr =p ;
};func (_caafe Title )ParagraphProperties ()_ca .ParagraphProperties {if _caafe ._bef .Tx ==nil {_caafe .SetText ("");};if _caafe ._bef .Tx .Choice .Rich .P [0].PPr ==nil {_caafe ._bef .Tx .Choice .Rich .P [0].PPr =_eg .NewCT_TextParagraphProperties ();
};return _ca .MakeParagraphProperties (_caafe ._bef .Tx .Choice .Rich .P [0].PPr );};

// AddSeries adds a default series to a line chart.
func (_bdfa Line3DChart )AddSeries ()LineChartSeries {_ffc :=_bdfa .nextColor (len (_bdfa ._daa .Ser ));_agc :=_fe .NewCT_LineSer ();_bdfa ._daa .Ser =append (_bdfa ._daa .Ser ,_agc );_agc .Idx .ValAttr =uint32 (len (_bdfa ._daa .Ser )-1);_agc .Order .ValAttr =uint32 (len (_bdfa ._daa .Ser )-1);
_gfeg :=LineChartSeries {_agc };_gfeg .InitializeDefaults ();_gfeg .Properties ().LineProperties ().SetSolidFill (_ffc );_gfeg .Properties ().SetSolidFill (_ffc );return _gfeg ;};

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_dec *_fe .CT_BarChart ;};

// SetText sets the series text.
func (_ddg RadarChartSeries )SetText (s string ){_ddg ._dged .Tx =_fe .NewCT_SerTx ();_ddg ._dged .Tx .Choice .V =&s ;};

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_faf *_fe .CT_DoughnutChart ;};

// AddDateAxis adds a value axis to the chart.
func (_ccag Chart )AddDateAxis ()DateAxis {_cfe :=_fe .NewCT_DateAx ();if _ccag ._dad .Chart .PlotArea .CChoice ==nil {_ccag ._dad .Chart .PlotArea .CChoice =_fe .NewCT_PlotAreaChoice1 ();};_cfe .AxId =_fe .NewCT_UnsignedInt ();_cfe .AxId .ValAttr =0x7FFFFFFF&_fg .Uint32 ();
_ccag ._dad .Chart .PlotArea .CChoice .DateAx =append (_ccag ._dad .Chart .PlotArea .CChoice .DateAx ,_cfe );_cfe .Delete =_fe .NewCT_Boolean ();_cfe .Delete .ValAttr =_ce .Bool (false );_cfe .Scaling =_fe .NewCT_Scaling ();_cfe .Scaling .Orientation =_fe .NewCT_Orientation ();
_cfe .Scaling .Orientation .ValAttr =_fe .ST_OrientationMinMax ;_cfe .Choice =&_fe .EG_AxSharedChoice {};_cfe .Choice .Crosses =_fe .NewCT_Crosses ();_cfe .Choice .Crosses .ValAttr =_fe .ST_CrossesAutoZero ;_ecgg :=DateAxis {_cfe };_ecgg .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_e .LightGray );
_ecgg .SetMajorTickMark (_fe .ST_TickMarkOut );_ecgg .SetMinorTickMark (_fe .ST_TickMarkIn );_ecgg .SetTickLabelPosition (_fe .ST_TickLblPosNextTo );_ecgg .Properties ().LineProperties ().SetSolidFill (_e .Black );_ecgg .SetPosition (_fe .ST_AxPosL );return _ecgg ;
};

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_ccbb *_fe .CT_OfPieChart ;};

// X returns the inner wrapped XML type.
func (_fbb BubbleChartSeries )X ()*_fe .CT_BubbleSer {return _fbb ._gca };func (_acge DateAxis )SetPosition (p _fe .ST_AxPos ){_acge ._bgf .AxPos =_fe .NewCT_AxPos ();_acge ._bgf .AxPos .ValAttr =p ;};func (_gcg DataLabels )SetShowPercent (b bool ){_gcg .ensureChoice ();
_gcg ._baa .Choice .ShowPercent =_fe .NewCT_Boolean ();_gcg ._baa .Choice .ShowPercent .ValAttr =_ce .Bool (b );};

// X returns the inner wrapped XML type.
func (_gc BarChartSeries )X ()*_fe .CT_BarSer {return _gc ._dgc };

// AddSeries adds a default series to an Pie chart.
func (_gegd PieChart )AddSeries ()PieChartSeries {_bfcf :=_fe .NewCT_PieSer ();_gegd ._eee .Ser =append (_gegd ._eee .Ser ,_bfcf );_bfcf .Idx .ValAttr =uint32 (len (_gegd ._eee .Ser )-1);_bfcf .Order .ValAttr =uint32 (len (_gegd ._eee .Ser )-1);_bdb :=PieChartSeries {_bfcf };
_bdb .InitializeDefaults ();return _bdb ;};

// AddSeries adds a default series to a bar chart.
func (_bc BarChart )AddSeries ()BarChartSeries {_cf :=_bc .nextColor (len (_bc ._dec .Ser ));_bfd :=_fe .NewCT_BarSer ();_bc ._dec .Ser =append (_bc ._dec .Ser ,_bfd );_bfd .Idx .ValAttr =uint32 (len (_bc ._dec .Ser )-1);_bfd .Order .ValAttr =uint32 (len (_bc ._dec .Ser )-1);
_dc :=BarChartSeries {_bfd };_dc .InitializeDefaults ();_dc .Properties ().SetSolidFill (_cf );return _dc ;};

// InitializeDefaults the Bubble chart to its defaults
func (_bcd BubbleChart )InitializeDefaults (){};

// Properties returns the chart's shape properties.
func (_dfe Chart )Properties ()_ca .ShapeProperties {if _dfe ._dad .SpPr ==nil {_dfe ._dad .SpPr =_eg .NewCT_ShapeProperties ();};return _ca .MakeShapeProperties (_dfe ._dad .SpPr );};

// Values returns the value data source.
func (_ge BarChartSeries )Values ()NumberDataSource {if _ge ._dgc .Val ==nil {_ge ._dgc .Val =_fe .NewCT_NumDataSource ();};return MakeNumberDataSource (_ge ._dgc .Val );};

// Index returns the index of the series
func (_efb LineChartSeries )Index ()uint32 {return _efb ._fceg .Idx .ValAttr };

// X returns the inner wrapped XML type.
func (_gfb Line3DChart )X ()*_fe .CT_Line3DChart {return _gfb ._daa };func (_ded SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ded ._gab .Cat ==nil {_ded ._gab .Cat =_fe .NewCT_AxDataSource ();};return MakeAxisDataSource (_ded ._gab .Cat );
};

// SetIndex sets the index of the series
func (_daab ScatterChartSeries )SetIndex (idx uint32 ){_daab ._beeff .Idx .ValAttr =idx };

// AddRadarChart adds a new radar chart to a chart.
func (_bdd Chart )AddRadarChart ()RadarChart {_aged :=_fe .NewCT_PlotAreaChoice ();_bdd ._dad .Chart .PlotArea .Choice =append (_bdd ._dad .Chart .PlotArea .Choice ,_aged );_aged .RadarChart =_fe .NewCT_RadarChart ();_bdfe :=RadarChart {_bagb :_aged .RadarChart };
_bdfe .InitializeDefaults ();return _bdfe ;};

// X returns the inner wrapped XML type.
func (_fac SurfaceChart )X ()*_fe .CT_SurfaceChart {return _fac ._egdg };type CategoryAxis struct{_fce *_fe .CT_CatAx };

// Values returns the value data source.
func (_gea BubbleChartSeries )Values ()NumberDataSource {if _gea ._gca .YVal ==nil {_gea ._gca .YVal =_fe .NewCT_NumDataSource ();};return MakeNumberDataSource (_gea ._gca .YVal );};func (_fcee DataLabels )SetShowValue (b bool ){_fcee .ensureChoice ();
_fcee ._baa .Choice .ShowVal =_fe .NewCT_Boolean ();_fcee ._baa .Choice .ShowVal .ValAttr =_ce .Bool (b );};

// AddSeries adds a default series to an Doughnut chart.
func (_bcc DoughnutChart )AddSeries ()PieChartSeries {_dbf :=_fe .NewCT_PieSer ();_bcc ._faf .Ser =append (_bcc ._faf .Ser ,_dbf );_dbf .Idx .ValAttr =uint32 (len (_bcc ._faf .Ser )-1);_dbf .Order .ValAttr =uint32 (len (_bcc ._faf .Ser )-1);_ffba :=PieChartSeries {_dbf };
_ffba .InitializeDefaults ();return _ffba ;};func (_caa CategoryAxis )SetMajorTickMark (m _fe .ST_TickMark ){if m ==_fe .ST_TickMarkUnset {_caa ._fce .MajorTickMark =nil ;}else {_caa ._fce .MajorTickMark =_fe .NewCT_TickMark ();_caa ._fce .MajorTickMark .ValAttr =m ;
};};func MakeTitle (x *_fe .CT_Title )Title {return Title {x }};

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_fe .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};

// AddAreaChart adds a new area chart to a chart.
func (_cda Chart )AddAreaChart ()AreaChart {_egb :=_fe .NewCT_PlotAreaChoice ();_cda ._dad .Chart .PlotArea .Choice =append (_cda ._dad .Chart .PlotArea .Choice ,_egb );_egb .AreaChart =_fe .NewCT_AreaChart ();_cca :=AreaChart {_ea :_egb .AreaChart };_cca .InitializeDefaults ();
return _cca ;};

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_bcg Chart )AddLegend ()Legend {_bcg ._dad .Chart .Legend =_fe .NewCT_Legend ();_ggg :=MakeLegend (_bcg ._dad .Chart .Legend );_ggg .InitializeDefaults ();return _ggg ;};func (_ff BarChart )AddAxis (axis Axis ){_gd :=_fe .NewCT_UnsignedInt ();_gd .ValAttr =axis .AxisID ();
_ff ._dec .AxId =append (_ff ._dec .AxId ,_gd );};type LineChart struct{chartBase ;_fec *_fe .CT_LineChart ;};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_ccb Chart )AddPieOfPieChart ()PieOfPieChart {_gfg :=_fe .NewCT_PlotAreaChoice ();_ccb ._dad .Chart .PlotArea .Choice =append (_ccb ._dad .Chart .PlotArea .Choice ,_gfg );_gfg .OfPieChart =_fe .NewCT_OfPieChart ();_fcf :=PieOfPieChart {_ccbb :_gfg .OfPieChart };
_fcf .InitializeDefaults ();return _fcf ;};func MakeLegend (l *_fe .CT_Legend )Legend {return Legend {l }};func (_gda DataLabels )SetShowCategoryName (b bool ){_gda .ensureChoice ();_gda ._baa .Choice .ShowCatName =_fe .NewCT_Boolean ();_gda ._baa .Choice .ShowCatName .ValAttr =_ce .Bool (b );
};func (_b Area3DChart )AddAxis (axis Axis ){_feb :=_fe .NewCT_UnsignedInt ();_feb .ValAttr =axis .AxisID ();_b ._g .AxId =append (_b ._g .AxId ,_feb );};

// AddSurfaceChart adds a new surface chart to a chart.
func (_agg Chart )AddSurfaceChart ()SurfaceChart {_gad :=_fe .NewCT_PlotAreaChoice ();_agg ._dad .Chart .PlotArea .Choice =append (_agg ._dad .Chart .PlotArea .Choice ,_gad );_gad .SurfaceChart =_fe .NewCT_SurfaceChart ();_ced (_agg ._dad .Chart );_agg ._dad .Chart .View3D .RotX .ValAttr =_ce .Int8 (90);
_agg ._dad .Chart .View3D .RotY .ValAttr =_ce .Uint16 (0);_agg ._dad .Chart .View3D .Perspective =_fe .NewCT_Perspective ();_agg ._dad .Chart .View3D .Perspective .ValAttr =_ce .Uint8 (0);_cgf :=SurfaceChart {_egdg :_gad .SurfaceChart };_cgf .InitializeDefaults ();
return _cgf ;};

// AddTitle sets a new title on the chart.
func (_fcb Chart )AddTitle ()Title {_fcb ._dad .Chart .Title =_fe .NewCT_Title ();_fcb ._dad .Chart .Title .Overlay =_fe .NewCT_Boolean ();_fcb ._dad .Chart .Title .Overlay .ValAttr =_ce .Bool (false );_fcb ._dad .Chart .AutoTitleDeleted =_fe .NewCT_Boolean ();
_fcb ._dad .Chart .AutoTitleDeleted .ValAttr =_ce .Bool (false );_bfeb :=MakeTitle (_fcb ._dad .Chart .Title );_bfeb .InitializeDefaults ();return _bfeb ;};

// AddSeries adds a default series to a bar chart.
func (_fc Bar3DChart )AddSeries ()BarChartSeries {_fb :=_fc .nextColor (len (_fc ._bgg .Ser ));_db :=_fe .NewCT_BarSer ();_fc ._bgg .Ser =append (_fc ._bgg .Ser ,_db );_db .Idx .ValAttr =uint32 (len (_fc ._bgg .Ser )-1);_db .Order .ValAttr =uint32 (len (_fc ._bgg .Ser )-1);
_bdf :=BarChartSeries {_db };_bdf .InitializeDefaults ();_bdf .Properties ().SetSolidFill (_fb );return _bdf ;};

// X returns the inner wrapped XML type.
func (_ec Area3DChart )X ()*_fe .CT_Area3DChart {return _ec ._g };func (_effe DataLabels )ensureChoice (){if _effe ._baa .Choice ==nil {_effe ._baa .Choice =_fe .NewCT_DLblsChoice ();};};

// CategoryAxis returns the category data source.
func (_gcb PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gcb ._eggb .Cat ==nil {_gcb ._eggb .Cat =_fe .NewCT_AxDataSource ();};return MakeAxisDataSource (_gcb ._eggb .Cat );};func MakeChart (x *_fe .ChartSpace )Chart {return Chart {x }};

// AddAxis adds an axis to a line chart.
func (_geb Line3DChart )AddAxis (axis Axis ){_gbbe :=_fe .NewCT_UnsignedInt ();_gbbe .ValAttr =axis .AxisID ();_geb ._daa .AxId =append (_geb ._daa .AxId ,_gbbe );};

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_ea *_fe .CT_AreaChart ;};type SeriesAxis struct{_cdc *_fe .CT_SerAx };

// SetOrder sets the order of the series
func (_dbgc SurfaceChartSeries )SetOrder (idx uint32 ){_dbgc ._gab .Order .ValAttr =idx };

// Marker returns the marker properties.
func (_acf ScatterChartSeries )Marker ()Marker {if _acf ._beeff .Marker ==nil {_acf ._beeff .Marker =_fe .NewCT_Marker ();};return MakeMarker (_acf ._beeff .Marker );};func (_dda Title )InitializeDefaults (){_dda .SetText ("\u0054\u0069\u0074l\u0065");
_dda .RunProperties ().SetSize (16*_c .Point );_dda .RunProperties ().SetSolidFill (_e .Black );_dda .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_dda .RunProperties ().SetBold (false );};func (_cbb ValueAxis )Properties ()_ca .ShapeProperties {if _cbb ._cga .SpPr ==nil {_cbb ._cga .SpPr =_eg .NewCT_ShapeProperties ();
};return _ca .MakeShapeProperties (_cbb ._cga .SpPr );};

// AddStockChart adds a new stock chart.
func (_fcc Chart )AddStockChart ()StockChart {_afd :=_fe .NewCT_PlotAreaChoice ();_fcc ._dad .Chart .PlotArea .Choice =append (_fcc ._dad .Chart .PlotArea .Choice ,_afd );_afd .StockChart =_fe .NewCT_StockChart ();_aa :=StockChart {_adb :_afd .StockChart };
_aa .InitializeDefaults ();return _aa ;};

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_dgc *_fe .CT_BarSer };

// SetType sets the type the secone pie to either pie or bar
func (_fadc PieOfPieChart )SetType (t _fe .ST_OfPieType ){_fadc ._ccbb .OfPieType .ValAttr =t };

// Index returns the index of the series
func (_ddef SurfaceChartSeries )Index ()uint32 {return _ddef ._gab .Idx .ValAttr };func (_fae DateAxis )SetTickLabelPosition (p _fe .ST_TickLblPos ){if p ==_fe .ST_TickLblPosUnset {_fae ._bgf .TickLblPos =nil ;}else {_fae ._bgf .TickLblPos =_fe .NewCT_TickLblPos ();
_fae ._bgf .TickLblPos .ValAttr =p ;};};func (_ddd SeriesAxis )SetCrosses (axis Axis ){_ddd ._cdc .CrossAx .ValAttr =axis .AxisID ()};func (_eb nullAxis )AxisID ()uint32 {return 0};func (_fee ValueAxis )SetMajorTickMark (m _fe .ST_TickMark ){if m ==_fe .ST_TickMarkUnset {_fee ._cga .MajorTickMark =nil ;
}else {_fee ._cga .MajorTickMark =_fe .NewCT_TickMark ();_fee ._cga .MajorTickMark .ValAttr =m ;};};func (_eba DateAxis )AxisID ()uint32 {return _eba ._bgf .AxId .ValAttr };

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_geea *_fe .CT_Surface3DChart ;};func (_gbe chartBase )nextColor (_gdg int )_e .Color {return _cdg [_gdg %len (_cdg )]};func (_ef CategoryAxis )SetPosition (p _fe .ST_AxPos ){_ef ._fce .AxPos =_fe .NewCT_AxPos ();_ef ._fce .AxPos .ValAttr =p ;
};

// X returns the inner wrapped XML type.
func (_cbc ScatterChartSeries )X ()*_fe .CT_ScatterSer {return _cbc ._beeff };

// SetDirection changes the direction of the bar chart (bar or column).
func (_fef BarChart )SetDirection (d _fe .ST_BarDir ){_fef ._dec .BarDir .ValAttr =d };func (_effb DataLabels )SetShowLeaderLines (b bool ){_effb .ensureChoice ();_effb ._baa .Choice .ShowLeaderLines =_fe .NewCT_Boolean ();_effb ._baa .Choice .ShowLeaderLines .ValAttr =_ce .Bool (b );
};func MakeNumberDataSource (x *_fe .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};

// AddSeries adds a default series to a Surface chart.
func (_beeaa SurfaceChart )AddSeries ()SurfaceChartSeries {_ebg :=_beeaa .nextColor (len (_beeaa ._egdg .Ser ));_fcd :=_fe .NewCT_SurfaceSer ();_beeaa ._egdg .Ser =append (_beeaa ._egdg .Ser ,_fcd );_fcd .Idx .ValAttr =uint32 (len (_beeaa ._egdg .Ser )-1);
_fcd .Order .ValAttr =uint32 (len (_beeaa ._egdg .Ser )-1);_cebg :=SurfaceChartSeries {_fcd };_cebg .InitializeDefaults ();_cebg .Properties ().LineProperties ().SetSolidFill (_ebg );return _cebg ;};func (_bgb SurfaceChartSeries )Values ()NumberDataSource {if _bgb ._gab .Val ==nil {_bgb ._gab .Val =_fe .NewCT_NumDataSource ();
};_bbd :=MakeNumberDataSource (_bgb ._gab .Val );_bbd .CreateEmptyNumberCache ();return _bbd ;};func (_dcgb ValueAxis )AxisID ()uint32 {return _dcgb ._cga .AxId .ValAttr };func (_baaec NumberDataSource )SetReference (s string ){_baaec .ensureChoice ();
if _baaec ._dba .Choice .NumRef ==nil {_baaec ._dba .Choice .NumRef =_fe .NewCT_NumRef ();};_baaec ._dba .Choice .NumRef .F =s ;};func (_bag DataLabels )SetShowSeriesName (b bool ){_bag .ensureChoice ();_bag ._baa .Choice .ShowSerName =_fe .NewCT_Boolean ();
_bag ._baa .Choice .ShowSerName .ValAttr =_ce .Bool (b );};

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_gff BubbleChartSeries )InitializeDefaults (){};

// Labels returns the data label properties.
func (_ggfg ScatterChartSeries )Labels ()DataLabels {if _ggfg ._beeff .DLbls ==nil {_ggfg ._beeff .DLbls =_fe .NewCT_DLbls ();};return MakeDataLabels (_ggfg ._beeff .DLbls );};

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_bagb *_fe .CT_RadarChart ;};

// AddLineChart adds a new line chart to a chart.
func (_ggf Chart )AddLineChart ()LineChart {_eeg :=_fe .NewCT_PlotAreaChoice ();_ggf ._dad .Chart .PlotArea .Choice =append (_ggf ._dad .Chart .PlotArea .Choice ,_eeg );_eeg .LineChart =_fe .NewCT_LineChart ();_eeg .LineChart .Grouping =_fe .NewCT_Grouping ();
_eeg .LineChart .Grouping .ValAttr =_fe .ST_GroupingStandard ;return LineChart {_fec :_eeg .LineChart };};func MakeValueAxis (x *_fe .CT_ValAx )ValueAxis {return ValueAxis {x }};

// Values returns the value data source.
func (_fed PieChartSeries )Values ()NumberDataSource {if _fed ._eggb .Val ==nil {_fed ._eggb .Val =_fe .NewCT_NumDataSource ();};return MakeNumberDataSource (_fed ._eggb .Val );};func (_ecg CategoryAxis )SetTickLabelPosition (p _fe .ST_TickLblPos ){if p ==_fe .ST_TickLblPosUnset {_ecg ._fce .TickLblPos =nil ;
}else {_ecg ._fce .TickLblPos =_fe .NewCT_TickLblPos ();_ecg ._fce .TickLblPos .ValAttr =p ;};};

// SetOrder sets the order of the series
func (_fecc ScatterChartSeries )SetOrder (idx uint32 ){_fecc ._beeff .Order .ValAttr =idx };type chartBase struct{};

// SetIndex sets the index of the series
func (_cfff LineChartSeries )SetIndex (idx uint32 ){_cfff ._fceg .Idx .ValAttr =idx };func (_cecd Surface3DChart )InitializeDefaults (){_cecd ._geea .Wireframe =_fe .NewCT_Boolean ();_cecd ._geea .Wireframe .ValAttr =_ce .Bool (false );_cecd ._geea .BandFmts =_fe .NewCT_BandFmts ();
for _dcae :=0;_dcae < 15;_dcae ++{_aadg :=_fe .NewCT_BandFmt ();_aadg .Idx .ValAttr =uint32 (_dcae );_aadg .SpPr =_eg .NewCT_ShapeProperties ();_bfcg :=_ca .MakeShapeProperties (_aadg .SpPr );_bfcg .SetSolidFill (_cecd .nextColor (_dcae ));_cecd ._geea .BandFmts .BandFmt =append (_cecd ._geea .BandFmts .BandFmt ,_aadg );
};};

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_egdg *_fe .CT_SurfaceChart ;};func MakeDataLabels (x *_fe .CT_DLbls )DataLabels {return DataLabels {x }};

// AddSeries adds a default series to an Pie3D chart.
func (_gfc Pie3DChart )AddSeries ()PieChartSeries {_efg :=_fe .NewCT_PieSer ();_gfc ._dcg .Ser =append (_gfc ._dcg .Ser ,_efg );_efg .Idx .ValAttr =uint32 (len (_gfc ._dcg .Ser )-1);_efg .Order .ValAttr =uint32 (len (_gfc ._dcg .Ser )-1);_egc :=PieChartSeries {_efg };
_egc .InitializeDefaults ();return _egc ;};func (_efea DateAxis )SetCrosses (axis Axis ){_efea ._bgf .CrossAx .ValAttr =axis .AxisID ()};

// SetValues sets values directly on a source.
func (_agb NumberDataSource )SetValues (v []float64 ){_agb .ensureChoice ();_agb ._dba .Choice .NumRef =nil ;_agb ._dba .Choice .NumLit =_fe .NewCT_NumData ();_agb ._dba .Choice .NumLit .PtCount =_fe .NewCT_UnsignedInt ();_agb ._dba .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));
for _agcf ,_ffg :=range v {_agb ._dba .Choice .NumLit .Pt =append (_agb ._dba .Choice .NumLit .Pt ,&_fe .CT_NumVal {IdxAttr :uint32 (_agcf ),V :_fd .Sprintf ("\u0025\u0067",_ffg )});};};func (_ab CategoryAxis )AxisID ()uint32 {return _ab ._fce .AxId .ValAttr };
func (_adfg SurfaceChartSeries )InitializeDefaults (){_adfg .Properties ().LineProperties ().SetWidth (1*_c .Point );_adfg .Properties ().LineProperties ().SetSolidFill (_e .Black );_adfg .Properties ().LineProperties ().SetJoin (_ca .LineJoinRound );};


// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_g *_fe .CT_Area3DChart ;};func (_caaf LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _caaf ._fceg .Cat ==nil {_caaf ._fceg .Cat =_fe .NewCT_AxDataSource ();};return MakeAxisDataSource (_caaf ._fceg .Cat );
};

// Values returns the value data source.
func (_ffbf RadarChartSeries )Values ()NumberDataSource {if _ffbf ._dged .Val ==nil {_ffbf ._dged .Val =_fe .NewCT_NumDataSource ();};return MakeNumberDataSource (_ffbf ._dged .Val );};

// SetText sets the series text
func (_ccf SurfaceChartSeries )SetText (s string ){_ccf ._gab .Tx =_fe .NewCT_SerTx ();_ccf ._gab .Tx .Choice .V =&s ;};

// AddPie3DChart adds a new pie chart to a chart.
func (_fag Chart )AddPie3DChart ()Pie3DChart {_ced (_fag ._dad .Chart );_dcfd :=_fe .NewCT_PlotAreaChoice ();_fag ._dad .Chart .PlotArea .Choice =append (_fag ._dad .Chart .PlotArea .Choice ,_dcfd );_dcfd .Pie3DChart =_fe .NewCT_Pie3DChart ();_bb :=Pie3DChart {_dcg :_dcfd .Pie3DChart };
_bb .InitializeDefaults ();return _bb ;};

// Properties returns the bar chart series shape properties.
func (_abg RadarChartSeries )Properties ()_ca .ShapeProperties {if _abg ._dged .SpPr ==nil {_abg ._dged .SpPr =_eg .NewCT_ShapeProperties ();};return _ca .MakeShapeProperties (_abg ._dged .SpPr );};

// X returns the inner wrapped XML type.
func (_feg BubbleChart )X ()*_fe .CT_BubbleChart {return _feg ._fgf };

// Values returns the bubble size data source.
func (_ba BubbleChartSeries )BubbleSizes ()NumberDataSource {if _ba ._gca .BubbleSize ==nil {_ba ._gca .BubbleSize =_fe .NewCT_NumDataSource ();};return MakeNumberDataSource (_ba ._gca .BubbleSize );};

// AddPieChart adds a new pie chart to a chart.
func (_ada Chart )AddPieChart ()PieChart {_eff :=_fe .NewCT_PlotAreaChoice ();_ada ._dad .Chart .PlotArea .Choice =append (_ada ._dad .Chart .PlotArea .Choice ,_eff );_eff .PieChart =_fe .NewCT_PieChart ();_dce :=PieChart {_eee :_eff .PieChart };_dce .InitializeDefaults ();
return _dce ;};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_dged *_fe .CT_RadarSer };func (_fagb LineChartSeries )InitializeDefaults (){_fagb .Properties ().LineProperties ().SetWidth (1*_c .Point );_fagb .Properties ().LineProperties ().SetSolidFill (_e .Black );_fagb .Properties ().LineProperties ().SetJoin (_ca .LineJoinRound );
_fagb .Marker ().SetSymbol (_fe .ST_MarkerStyleNone );_fagb .Labels ().SetShowLegendKey (false );_fagb .Labels ().SetShowValue (false );_fagb .Labels ().SetShowPercent (false );_fagb .Labels ().SetShowCategoryName (false );_fagb .Labels ().SetShowSeriesName (false );
_fagb .Labels ().SetShowLeaderLines (false );};func (_eaa BubbleChart )AddAxis (axis Axis ){_dcf :=_fe .NewCT_UnsignedInt ();_dcf .ValAttr =axis .AxisID ();_eaa ._fgf .AxId =append (_eaa ._fgf .AxId ,_dcf );};

// AddSeries adds a default series to a line chart.
func (_baae LineChart )AddSeries ()LineChartSeries {_afa :=_baae .nextColor (len (_baae ._fec .Ser ));_fbf :=_fe .NewCT_LineSer ();_baae ._fec .Ser =append (_baae ._fec .Ser ,_fbf );_fbf .Idx .ValAttr =uint32 (len (_baae ._fec .Ser )-1);_fbf .Order .ValAttr =uint32 (len (_baae ._fec .Ser )-1);
_aaf :=LineChartSeries {_fbf };_aaf .InitializeDefaults ();_aaf .Properties ().LineProperties ().SetSolidFill (_afa );return _aaf ;};

// X returns the inner wrapped XML type.
func (_cdga Surface3DChart )X ()*_fe .CT_Surface3DChart {return _cdga ._geea };func (_aeg Marker )Properties ()_ca .ShapeProperties {if _aeg ._aaa .SpPr ==nil {_aeg ._aaa .SpPr =_eg .NewCT_ShapeProperties ();};return _ca .MakeShapeProperties (_aeg ._aaa .SpPr );
};

// X returns the inner wrapped XML type.
func (_beb Title )X ()*_fe .CT_Title {return _beb ._bef };

// InitializeDefaults the bar chart to its defaults
func (_gce PieChart )InitializeDefaults (){_gce ._eee .VaryColors =_fe .NewCT_Boolean ();_gce ._eee .VaryColors .ValAttr =_ce .Bool (true );};func (_egg CategoryAxis )SetCrosses (axis Axis ){_egg ._fce .Choice =_fe .NewEG_AxSharedChoice ();_egg ._fce .Choice .Crosses =_fe .NewCT_Crosses ();
_egg ._fce .Choice .Crosses .ValAttr =_fe .ST_CrossesAutoZero ;_egg ._fce .CrossAx .ValAttr =axis .AxisID ();};func (_ceb DateAxis )MajorGridLines ()GridLines {if _ceb ._bgf .MajorGridlines ==nil {_ceb ._bgf .MajorGridlines =_fe .NewCT_ChartLines ();};
return GridLines {_ceb ._bgf .MajorGridlines };};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_bd *_fe .CT_AreaSer };func (_acgd NumberDataSource )ensureChoice (){if _acgd ._dba .Choice ==nil {_acgd ._dba .Choice =_fe .NewCT_NumDataSourceChoice ();};};

// InitializeDefaults the bar chart to its defaults
func (_agf BarChart )InitializeDefaults (){_agf .SetDirection (_fe .ST_BarDirCol )};

// AddCategoryAxis adds a category axis.
func (_ege Chart )AddCategoryAxis ()CategoryAxis {_edc :=_fe .NewCT_CatAx ();if _ege ._dad .Chart .PlotArea .CChoice ==nil {_ege ._dad .Chart .PlotArea .CChoice =_fe .NewCT_PlotAreaChoice1 ();};_edc .AxId =_fe .NewCT_UnsignedInt ();_edc .AxId .ValAttr =0x7FFFFFFF&_fg .Uint32 ();
_ege ._dad .Chart .PlotArea .CChoice .CatAx =append (_ege ._dad .Chart .PlotArea .CChoice .CatAx ,_edc );_edc .Auto =_fe .NewCT_Boolean ();_edc .Auto .ValAttr =_ce .Bool (true );_edc .Delete =_fe .NewCT_Boolean ();_edc .Delete .ValAttr =_ce .Bool (false );
_fccb :=MakeCategoryAxis (_edc );_fccb .InitializeDefaults ();return _fccb ;};func (_fagf DataLabels )SetShowLegendKey (b bool ){_fagf .ensureChoice ();_fagf ._baa .Choice .ShowLegendKey =_fe .NewCT_Boolean ();_fagf ._baa .Choice .ShowLegendKey .ValAttr =_ce .Bool (b );
};

// AddBubbleChart adds a new bubble chart.
func (_adg Chart )AddBubbleChart ()BubbleChart {_dge :=_fe .NewCT_PlotAreaChoice ();_adg ._dad .Chart .PlotArea .Choice =append (_adg ._dad .Chart .PlotArea .Choice ,_dge );_dge .BubbleChart =_fe .NewCT_BubbleChart ();_ecgb :=BubbleChart {_fgf :_dge .BubbleChart };
_ecgb .InitializeDefaults ();return _ecgb ;};func (_gbdc Legend )SetOverlay (b bool ){_gbdc ._gbd .Overlay =_fe .NewCT_Boolean ();_gbdc ._gbd .Overlay .ValAttr =_ce .Bool (b );};

// X returns the inner wrapped XML type.
func (_bea LineChartSeries )X ()*_fe .CT_LineSer {return _bea ._fceg };

// InitializeDefaults initializes a bar chart series to the default values.
func (_cg BarChartSeries )InitializeDefaults (){};func (_ggge DataLabels )SetPosition (p _fe .ST_DLblPos ){_ggge .ensureChoice ();_ggge ._baa .Choice .DLblPos =_fe .NewCT_DLblPos ();_ggge ._baa .Choice .DLblPos .ValAttr =p ;};

// Order returns the order of the series
func (_effc LineChartSeries )Order ()uint32 {return _effc ._fceg .Order .ValAttr };func (_efef Marker )SetSymbol (s _fe .ST_MarkerStyle ){if s ==_fe .ST_MarkerStyleUnset {_efef ._aaa .Symbol =nil ;}else {_efef ._aaa .Symbol =_fe .NewCT_MarkerStyle ();_efef ._aaa .Symbol .ValAttr =s ;
};};

// X returns the inner wrapped XML type.
func (_gcab DateAxis )X ()*_fe .CT_DateAx {return _gcab ._bgf };type nullAxis byte ;func (_afg SeriesAxis )AxisID ()uint32 {return _afg ._cdc .AxId .ValAttr };

// AddLine3DChart adds a new 3D line chart to a chart.
func (_baf Chart )AddLine3DChart ()Line3DChart {_ced (_baf ._dad .Chart );_bee :=_fe .NewCT_PlotAreaChoice ();_baf ._dad .Chart .PlotArea .Choice =append (_baf ._dad .Chart .PlotArea .Choice ,_bee );_bee .Line3DChart =_fe .NewCT_Line3DChart ();_bee .Line3DChart .Grouping =_fe .NewCT_Grouping ();
_bee .Line3DChart .Grouping .ValAttr =_fe .ST_GroupingStandard ;return Line3DChart {_daa :_bee .Line3DChart };};

// X returns the inner wrapped XML type.
func (_cd AreaChart )X ()*_fe .CT_AreaChart {return _cd ._ea };func (_decf CategoryAxis )Properties ()_ca .ShapeProperties {if _decf ._fce .SpPr ==nil {_decf ._fce .SpPr =_eg .NewCT_ShapeProperties ();};return _ca .MakeShapeProperties (_decf ._fce .SpPr );
};

// X returns the inner wrapped XML type.
func (_gec PieChart )X ()*_fe .CT_PieChart {return _gec ._eee };

// InitializeDefaults the bar chart to its defaults
func (_dab RadarChart )InitializeDefaults (){_dab ._bagb .RadarStyle .ValAttr =_fe .ST_RadarStyleMarker };

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_fcg DoughnutChart )SetHoleSize (pct uint8 ){if _fcg ._faf .HoleSize ==nil {_fcg ._faf .HoleSize =_fe .NewCT_HoleSize ();};if _fcg ._faf .HoleSize .ValAttr ==nil {_fcg ._faf .HoleSize .ValAttr =&_fe .ST_HoleSize {};};_fcg ._faf .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;
};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_fad Chart )SetDisplayBlanksAs (v _fe .ST_DispBlanksAs ){_fad ._dad .Chart .DispBlanksAs =_fe .NewCT_DispBlanksAs ();_fad ._dad .Chart .DispBlanksAs .ValAttr =v ;};func (_gb AreaChart )AddAxis (axis Axis ){_de :=_fe .NewCT_UnsignedInt ();_de .ValAttr =axis .AxisID ();
_gb ._ea .AxId =append (_gb ._ea .AxId ,_de );};

// InitializeDefaults initializes an Radar series to the default values.
func (_ffd RadarChartSeries )InitializeDefaults (){};

// CategoryAxis returns the category data source.
func (_fbfg RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _fbfg ._dged .Cat ==nil {_fbfg ._dged .Cat =_fe .NewCT_AxDataSource ();};return MakeAxisDataSource (_fbfg ._dged .Cat );};

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_gbef PieChartSeries )SetExplosion (v uint32 ){_gbef ._eggb .Explosion =_fe .NewCT_UnsignedInt ();_gbef ._eggb .Explosion .ValAttr =v ;};func _ced (_bcda *_fe .CT_Chart ){_bcda .View3D =_fe .NewCT_View3D ();_bcda .View3D .RotX =_fe .NewCT_RotX ();
_bcda .View3D .RotX .ValAttr =_ce .Int8 (15);_bcda .View3D .RotY =_fe .NewCT_RotY ();_bcda .View3D .RotY .ValAttr =_ce .Uint16 (20);_bcda .View3D .RAngAx =_fe .NewCT_Boolean ();_bcda .View3D .RAngAx .ValAttr =_ce .Bool (false );_bcda .Floor =_fe .NewCT_Surface ();
_bcda .Floor .Thickness =_fe .NewCT_Thickness ();_bcda .Floor .Thickness .ValAttr .Uint32 =_ce .Uint32 (0);_bcda .SideWall =_fe .NewCT_Surface ();_bcda .SideWall .Thickness =_fe .NewCT_Thickness ();_bcda .SideWall .Thickness .ValAttr .Uint32 =_ce .Uint32 (0);
_bcda .BackWall =_fe .NewCT_Surface ();_bcda .BackWall .Thickness =_fe .NewCT_Thickness ();_bcda .BackWall .Thickness .ValAttr .Uint32 =_ce .Uint32 (0);};

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_dcd CategoryAxisDataSource )SetNumberReference (s string ){_dcd ._fdb .Choice =_fe .NewCT_AxDataSourceChoice ();_dcd ._fdb .Choice .NumRef =_fe .NewCT_NumRef ();_dcd ._fdb .Choice .NumRef .F =s ;};

// CategoryAxis returns the category data source.
func (_cfc BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _cfc ._dgc .Cat ==nil {_cfc ._dgc .Cat =_fe .NewCT_AxDataSource ();};return MakeAxisDataSource (_cfc ._dgc .Cat );};

// AddSeries adds a default series to an Radar chart.
func (_dceg RadarChart )AddSeries ()RadarChartSeries {_bad :=_dceg .nextColor (len (_dceg ._bagb .Ser ));_dfd :=_fe .NewCT_RadarSer ();_dceg ._bagb .Ser =append (_dceg ._bagb .Ser ,_dfd );_dfd .Idx .ValAttr =uint32 (len (_dceg ._bagb .Ser )-1);_dfd .Order .ValAttr =uint32 (len (_dceg ._bagb .Ser )-1);
_cbf :=RadarChartSeries {_dfd };_cbf .InitializeDefaults ();_cbf .Properties ().SetSolidFill (_bad );return _cbf ;};

// InitializeDefaults the bar chart to its defaults
func (_bgd DoughnutChart )InitializeDefaults (){_bgd ._faf .VaryColors =_fe .NewCT_Boolean ();_bgd ._faf .VaryColors .ValAttr =_ce .Bool (true );_bgd ._faf .HoleSize =_fe .NewCT_HoleSize ();_bgd ._faf .HoleSize .ValAttr =&_fe .ST_HoleSize {};_bgd ._faf .HoleSize .ValAttr .ST_HoleSizeUByte =_ce .Uint8 (50);
};type ScatterChart struct{chartBase ;_fgc *_fe .CT_ScatterChart ;};type DateAxis struct{_bgf *_fe .CT_DateAx };

// SetText sets the series text.
func (_gcc BarChartSeries )SetText (s string ){_gcc ._dgc .Tx =_fe .NewCT_SerTx ();_gcc ._dgc .Tx .Choice .V =&s ;};func (_ffcd RadarChart )AddAxis (axis Axis ){_dgde :=_fe .NewCT_UnsignedInt ();_dgde .ValAttr =axis .AxisID ();_ffcd ._bagb .AxId =append (_ffcd ._bagb .AxId ,_dgde );
};

// X returns the inner wrapped XML type.
func (_gae Pie3DChart )X ()*_fe .CT_Pie3DChart {return _gae ._dcg };

// SetIndex sets the index of the series
func (_dff SurfaceChartSeries )SetIndex (idx uint32 ){_dff ._gab .Idx .ValAttr =idx };

// Order returns the order of the series
func (_dga ScatterChartSeries )Order ()uint32 {return _dga ._beeff .Order .ValAttr };type ValueAxis struct{_cga *_fe .CT_ValAx };

// X returns the inner wrapped XML type.
func (_decc ValueAxis )X ()*_fe .CT_ValAx {return _decc ._cga };

// SetOrder sets the order of the series
func (_gba LineChartSeries )SetOrder (idx uint32 ){_gba ._fceg .Order .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_bcgc ScatterChart )X ()*_fe .CT_ScatterChart {return _bcgc ._fgc };

// RemoveTitle removes any existing title from the chart.
func (_beef Chart )RemoveTitle (){_beef ._dad .Chart .Title =nil ;_beef ._dad .Chart .AutoTitleDeleted =_fe .NewCT_Boolean ();_beef ._dad .Chart .AutoTitleDeleted .ValAttr =_ce .Bool (true );};

// InitializeDefaults the bar chart to its defaults
func (_fda AreaChart )InitializeDefaults (){};

// SetDirection changes the direction of the bar chart (bar or column).
func (_ag Bar3DChart )SetDirection (d _fe .ST_BarDir ){_ag ._bgg .BarDir .ValAttr =d };func (_gde LineChartSeries )SetSmooth (b bool ){_gde ._fceg .Smooth =_fe .NewCT_Boolean ();_gde ._fceg .Smooth .ValAttr =&b ;};

// X returns the inner wrapped XML type.
func (_ggd RadarChart )X ()*_fe .CT_RadarChart {return _ggd ._bagb };func (_fca Legend )SetPosition (p _fe .ST_LegendPos ){if p ==_fe .ST_LegendPosUnset {_fca ._gbd .LegendPos =nil ;}else {_fca ._gbd .LegendPos =_fe .NewCT_LegendPos ();_fca ._gbd .LegendPos .ValAttr =p ;
};};

// X returns the inner wrapped XML type.
func (_bddf Legend )X ()*_fe .CT_Legend {return _bddf ._gbd };

// SetText sets the series text
func (_gdgb ScatterChartSeries )SetText (s string ){_gdgb ._beeff .Tx =_fe .NewCT_SerTx ();_gdgb ._beeff .Tx .Choice .V =&s ;};func MakeMarker (x *_fe .CT_Marker )Marker {return Marker {x }};func MakeSeriesAxis (x *_fe .CT_SerAx )SeriesAxis {return SeriesAxis {x }};


// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_fceg *_fe .CT_LineSer };

// AddSeries adds a default series to a Scatter chart.
func (_eaab ScatterChart )AddSeries ()ScatterChartSeries {_defc :=_eaab .nextColor (len (_eaab ._fgc .Ser ));_agge :=_fe .NewCT_ScatterSer ();_eaab ._fgc .Ser =append (_eaab ._fgc .Ser ,_agge );_agge .Idx .ValAttr =uint32 (len (_eaab ._fgc .Ser )-1);_agge .Order .ValAttr =uint32 (len (_eaab ._fgc .Ser )-1);
_bde :=ScatterChartSeries {_agge };_bde .InitializeDefaults ();_bde .Marker ().Properties ().LineProperties ().SetSolidFill (_defc );_bde .Marker ().Properties ().SetSolidFill (_defc );return _bde ;};

// InitializeDefaults the bar chart to its defaults
func (_bfc Pie3DChart )InitializeDefaults (){_bfc ._dcg .VaryColors =_fe .NewCT_Boolean ();_bfc ._dcg .VaryColors .ValAttr =_ce .Bool (true );};

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_cde Chart )AddSurface3DChart ()Surface3DChart {_adc :=_fe .NewCT_PlotAreaChoice ();_cde ._dad .Chart .PlotArea .Choice =append (_cde ._dad .Chart .PlotArea .Choice ,_adc );_adc .Surface3DChart =_fe .NewCT_Surface3DChart ();_ced (_cde ._dad .Chart );
_ged :=Surface3DChart {_geea :_adc .Surface3DChart };_ged .InitializeDefaults ();return _ged ;};func (_dbff ScatterChart )InitializeDefaults (){_dbff ._fgc .ScatterStyle .ValAttr =_fe .ST_ScatterStyleMarker ;};

// AddArea3DChart adds a new area chart to a chart.
func (_gaa Chart )AddArea3DChart ()Area3DChart {_ced (_gaa ._dad .Chart );_def :=_fe .NewCT_PlotAreaChoice ();_gaa ._dad .Chart .PlotArea .Choice =append (_gaa ._dad .Chart .PlotArea .Choice ,_def );_def .Area3DChart =_fe .NewCT_Area3DChart ();_edb :=Area3DChart {_g :_def .Area3DChart };
_edb .InitializeDefaults ();return _edb ;};

// AddSeries adds a default series to an Pie chart.
func (_aada PieOfPieChart )AddSeries ()PieChartSeries {_edd :=_fe .NewCT_PieSer ();_aada ._ccbb .Ser =append (_aada ._ccbb .Ser ,_edd );_edd .Idx .ValAttr =uint32 (len (_aada ._ccbb .Ser )-1);_edd .Order .ValAttr =uint32 (len (_aada ._ccbb .Ser )-1);_bcdd :=PieChartSeries {_edd };
_bcdd .InitializeDefaults ();return _bcdd ;};func (_febe SurfaceChart )InitializeDefaults (){_febe ._egdg .Wireframe =_fe .NewCT_Boolean ();_febe ._egdg .Wireframe .ValAttr =_ce .Bool (false );_febe ._egdg .BandFmts =_fe .NewCT_BandFmts ();for _dae :=0;
_dae < 15;_dae ++{_cdca :=_fe .NewCT_BandFmt ();_cdca .Idx .ValAttr =uint32 (_dae );_cdca .SpPr =_eg .NewCT_ShapeProperties ();_cdgd :=_ca .MakeShapeProperties (_cdca .SpPr );_cdgd .SetSolidFill (_febe .nextColor (_dae ));_febe ._egdg .BandFmts .BandFmt =append (_febe ._egdg .BandFmts .BandFmt ,_cdca );
};};

// X returns the inner wrapped XML type.
func (_gg AreaChartSeries )X ()*_fe .CT_AreaSer {return _gg ._bd };

// AddSeries adds a default series to a Surface chart.
func (_bgac Surface3DChart )AddSeries ()SurfaceChartSeries {_cab :=_bgac .nextColor (len (_bgac ._geea .Ser ));_dfa :=_fe .NewCT_SurfaceSer ();_bgac ._geea .Ser =append (_bgac ._geea .Ser ,_dfa );_dfa .Idx .ValAttr =uint32 (len (_bgac ._geea .Ser )-1);
_dfa .Order .ValAttr =uint32 (len (_bgac ._geea .Ser )-1);_gadc :=SurfaceChartSeries {_dfa };_gadc .InitializeDefaults ();_gadc .Properties ().LineProperties ().SetSolidFill (_cab );return _gadc ;};func (_bda Title )RunProperties ()_ca .RunProperties {if _bda ._bef .Tx ==nil {_bda .SetText ("");
};if _bda ._bef .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_bda ._bef .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_eg .NewCT_TextCharacterProperties ();};return _ca .MakeRunProperties (_bda ._bef .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );
};

// X returns the inner wrapped XML type.
func (_bca StockChart )X ()*_fe .CT_StockChart {return _bca ._adb };

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};func (_abfd ValueAxis )MajorGridLines ()GridLines {if _abfd ._cga .MajorGridlines ==nil {_abfd ._cga .MajorGridlines =_fe .NewCT_ChartLines ();};return GridLines {_abfd ._cga .MajorGridlines };};func (_gdc ScatterChartSeries )InitializeDefaults (){_gdc .Properties ().LineProperties ().SetNoFill ();
_gdc .Marker ().SetSymbol (_fe .ST_MarkerStyleAuto );_gdc .Labels ().SetShowLegendKey (false );_gdc .Labels ().SetShowValue (true );_gdc .Labels ().SetShowPercent (false );_gdc .Labels ().SetShowCategoryName (false );_gdc .Labels ().SetShowSeriesName (false );
_gdc .Labels ().SetShowLeaderLines (false );};

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_eggb *_fe .CT_PieSer };func (_fdd CategoryAxis )SetMinorTickMark (m _fe .ST_TickMark ){if m ==_fe .ST_TickMarkUnset {_fdd ._fce .MinorTickMark =nil ;}else {_fdd ._fce .MinorTickMark =_fe .NewCT_TickMark ();_fdd ._fce .MinorTickMark .ValAttr =m ;
};};type Line3DChart struct{chartBase ;_daa *_fe .CT_Line3DChart ;};

// AddValueAxis adds a value axis to the chart.
func (_eed Chart )AddValueAxis ()ValueAxis {_bbfg :=_fe .NewCT_ValAx ();if _eed ._dad .Chart .PlotArea .CChoice ==nil {_eed ._dad .Chart .PlotArea .CChoice =_fe .NewCT_PlotAreaChoice1 ();};_bbfg .AxId =_fe .NewCT_UnsignedInt ();_bbfg .AxId .ValAttr =0x7FFFFFFF&_fg .Uint32 ();
_eed ._dad .Chart .PlotArea .CChoice .ValAx =append (_eed ._dad .Chart .PlotArea .CChoice .ValAx ,_bbfg );_bbfg .Delete =_fe .NewCT_Boolean ();_bbfg .Delete .ValAttr =_ce .Bool (false );_bbfg .Scaling =_fe .NewCT_Scaling ();_bbfg .Scaling .Orientation =_fe .NewCT_Orientation ();
_bbfg .Scaling .Orientation .ValAttr =_fe .ST_OrientationMinMax ;_bbfg .Choice =&_fe .EG_AxSharedChoice {};_bbfg .Choice .Crosses =_fe .NewCT_Crosses ();_bbfg .Choice .Crosses .ValAttr =_fe .ST_CrossesAutoZero ;_bbfg .CrossBetween =_fe .NewCT_CrossBetween ();
_bbfg .CrossBetween .ValAttr =_fe .ST_CrossBetweenBetween ;_geae :=MakeValueAxis (_bbfg );_geae .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_e .LightGray );_geae .SetMajorTickMark (_fe .ST_TickMarkOut );_geae .SetMinorTickMark (_fe .ST_TickMarkIn );
_geae .SetTickLabelPosition (_fe .ST_TickLblPosNextTo );_geae .Properties ().LineProperties ().SetSolidFill (_e .Black );_geae .SetPosition (_fe .ST_AxPosL );return _geae ;};

// AddScatterChart adds a scatter (X/Y) chart.
func (_abc Chart )AddScatterChart ()ScatterChart {_ccbe :=_fe .NewCT_PlotAreaChoice ();_abc ._dad .Chart .PlotArea .Choice =append (_abc ._dad .Chart .PlotArea .Choice ,_ccbe );_ccbe .ScatterChart =_fe .NewCT_ScatterChart ();_bbf :=ScatterChart {_fgc :_ccbe .ScatterChart };
_bbf .InitializeDefaults ();return _bbf ;};

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_beeff *_fe .CT_ScatterSer };

// AddAxis adds an axis to a Scatter chart.
func (_dgf ScatterChart )AddAxis (axis Axis ){_gefc :=_fe .NewCT_UnsignedInt ();_gefc .ValAttr =axis .AxisID ();_dgf ._fgc .AxId =append (_dgf ._fgc .AxId ,_gefc );};func (_cedc ScatterChartSeries )SetSmooth (b bool ){_cedc ._beeff .Smooth =_fe .NewCT_Boolean ();
_cedc ._beeff .Smooth .ValAttr =&b ;};func (_ae Legend )Properties ()_ca .ShapeProperties {if _ae ._gbd .SpPr ==nil {_ae ._gbd .SpPr =_eg .NewCT_ShapeProperties ();};return _ca .MakeShapeProperties (_ae ._gbd .SpPr );};

// AddAxis adds an axis to a Surface chart.
func (_ffe SurfaceChart )AddAxis (axis Axis ){_cgd :=_fe .NewCT_UnsignedInt ();_cgd .ValAttr =axis .AxisID ();_ffe ._egdg .AxId =append (_ffe ._egdg .AxId ,_cgd );};

// InitializeDefaults initializes an area series to the default values.
func (_af AreaChartSeries )InitializeDefaults (){};

// Properties returns the bar chart series shape properties.
func (_da AreaChartSeries )Properties ()_ca .ShapeProperties {if _da ._bd .SpPr ==nil {_da ._bd .SpPr =_eg .NewCT_ShapeProperties ();};return _ca .MakeShapeProperties (_da ._bd .SpPr );};

// X returns the inner wrapped XML type.
func (_gee GridLines )X ()*_fe .CT_ChartLines {return _gee ._bddd };type SurfaceChartSeries struct{_gab *_fe .CT_SurfaceSer };

// CategoryAxis returns the category data source.
func (_bg AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bg ._bd .Cat ==nil {_bg ._bd .Cat =_fe .NewCT_AxDataSource ();};return MakeAxisDataSource (_bg ._bd .Cat );};

// Index returns the index of the series
func (_dcfb ScatterChartSeries )Index ()uint32 {return _dcfb ._beeff .Idx .ValAttr };func (_bfg ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bfg ._beeff .XVal ==nil {_bfg ._beeff .XVal =_fe .NewCT_AxDataSource ();};return MakeAxisDataSource (_bfg ._beeff .XVal );
};

// X returns the inner wrapped XML type.
func (_gbf PieOfPieChart )X ()*_fe .CT_OfPieChart {return _gbf ._ccbb };func (_ebf ValueAxis )SetTickLabelPosition (p _fe .ST_TickLblPos ){if p ==_fe .ST_TickLblPosUnset {_ebf ._cga .TickLblPos =nil ;}else {_ebf ._cga .TickLblPos =_fe .NewCT_TickLblPos ();
_ebf ._cga .TickLblPos .ValAttr =p ;};};

// X returns the inner wrapped XML type.
func (_fcfd PieChartSeries )X ()*_fe .CT_PieSer {return _fcfd ._eggb };func MakeCategoryAxis (x *_fe .CT_CatAx )CategoryAxis {return CategoryAxis {x }};

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_fdb *_fe .CT_AxDataSource };

// InitializeDefaults initializes an Pie series to the default values.
func (_fea PieChartSeries )InitializeDefaults (){};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_adb *_fe .CT_StockChart ;};func (_eec ScatterChartSeries )Values ()NumberDataSource {if _eec ._beeff .YVal ==nil {_eec ._beeff .YVal =_fe .NewCT_NumDataSource ();};return MakeNumberDataSource (_eec ._beeff .YVal );};

// Order returns the order of the series
func (_agbf SurfaceChartSeries )Order ()uint32 {return _agbf ._gab .Order .ValAttr };

// Labels returns the data label properties.
func (_ffca LineChartSeries )Labels ()DataLabels {if _ffca ._fceg .DLbls ==nil {_ffca ._fceg .DLbls =_fe .NewCT_DLbls ();};return MakeDataLabels (_ffca ._fceg .DLbls );};

// AddSeries adds a default series to an area chart.
func (_dg AreaChart )AddSeries ()AreaChartSeries {_bf :=_dg .nextColor (len (_dg ._ea .Ser ));_cdd :=_fe .NewCT_AreaSer ();_dg ._ea .Ser =append (_dg ._ea .Ser ,_cdd );_cdd .Idx .ValAttr =uint32 (len (_dg ._ea .Ser )-1);_cdd .Order .ValAttr =uint32 (len (_dg ._ea .Ser )-1);
_bfe :=AreaChartSeries {_cdd };_bfe .InitializeDefaults ();_bfe .Properties ().SetSolidFill (_bf );return _bfe ;};

// Properties returns the line chart series shape properties.
func (_dgcbf SurfaceChartSeries )Properties ()_ca .ShapeProperties {if _dgcbf ._gab .SpPr ==nil {_dgcbf ._gab .SpPr =_eg .NewCT_ShapeProperties ();};return _ca .MakeShapeProperties (_dgcbf ._gab .SpPr );};type Marker struct{_aaa *_fe .CT_Marker };

// X returns the inner wrapped XML type.
func (_beeg RadarChartSeries )X ()*_fe .CT_RadarSer {return _beeg ._dged };

// Properties returns the Bubble chart series shape properties.
func (_cge BubbleChartSeries )Properties ()_ca .ShapeProperties {if _cge ._gca .SpPr ==nil {_cge ._gca .SpPr =_eg .NewCT_ShapeProperties ();};return _ca .MakeShapeProperties (_cge ._gca .SpPr );};

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_ffb Chart )AddDoughnutChart ()DoughnutChart {_bbb :=_fe .NewCT_PlotAreaChoice ();_ffb ._dad .Chart .PlotArea .Choice =append (_ffb ._dad .Chart .PlotArea .Choice ,_bbb );_bbb .DoughnutChart =_fe .NewCT_DoughnutChart ();_gbb :=DoughnutChart {_faf :_bbb .DoughnutChart };
_gbb .InitializeDefaults ();return _gbb ;};

// InitializeDefaults the bar chart to its defaults
func (_a Area3DChart )InitializeDefaults (){};

// InitializeDefaults the bar chart to its defaults
func (_ebc PieOfPieChart )InitializeDefaults (){_ebc ._ccbb .VaryColors =_fe .NewCT_Boolean ();_ebc ._ccbb .VaryColors .ValAttr =_ce .Bool (true );_ebc .SetType (_fe .ST_OfPieTypePie );_ebc ._ccbb .SecondPieSize =_fe .NewCT_SecondPieSize ();_ebc ._ccbb .SecondPieSize .ValAttr =&_fe .ST_SecondPieSize {};
_ebc ._ccbb .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_ce .Uint16 (75);_afb :=_fe .NewCT_ChartLines ();_afb .SpPr =_eg .NewCT_ShapeProperties ();_fde :=_ca .MakeShapeProperties (_afb .SpPr );_fde .LineProperties ().SetSolidFill (_e .Auto );_ebc ._ccbb .SerLines =append (_ebc ._ccbb .SerLines ,_afb );
};

// AddSeries adds a default series to an area chart.
func (_ad Area3DChart )AddSeries ()AreaChartSeries {_d :=_ad .nextColor (len (_ad ._g .Ser ));_ac :=_fe .NewCT_AreaSer ();_ad ._g .Ser =append (_ad ._g .Ser ,_ac );_ac .Idx .ValAttr =uint32 (len (_ad ._g .Ser )-1);_ac .Order .ValAttr =uint32 (len (_ad ._g .Ser )-1);
_df :=AreaChartSeries {_ac };_df .InitializeDefaults ();_df .Properties ().SetSolidFill (_d );return _df ;};

// Properties returns the line chart series shape properties.
func (_gef LineChartSeries )Properties ()_ca .ShapeProperties {if _gef ._fceg .SpPr ==nil {_gef ._fceg .SpPr =_eg .NewCT_ShapeProperties ();};return _ca .MakeShapeProperties (_gef ._fceg .SpPr );};

// AddBarChart adds a new bar chart to a chart.
func (_egd Chart )AddBarChart ()BarChart {_dgg :=_fe .NewCT_PlotAreaChoice ();_egd ._dad .Chart .PlotArea .Choice =append (_egd ._dad .Chart .PlotArea .Choice ,_dgg );_dgg .BarChart =_fe .NewCT_BarChart ();_dgg .BarChart .Grouping =_fe .NewCT_BarGrouping ();
_dgg .BarChart .Grouping .ValAttr =_fe .ST_BarGroupingStandard ;_aad :=BarChart {_dec :_dgg .BarChart };_aad .InitializeDefaults ();return _aad ;};

// AddSeries adds a default series to a Stock chart.
func (_dac StockChart )AddSeries ()LineChartSeries {_eda :=_fe .NewCT_LineSer ();_dac ._adb .Ser =append (_dac ._adb .Ser ,_eda );_eda .Idx .ValAttr =uint32 (len (_dac ._adb .Ser )-1);_eda .Order .ValAttr =uint32 (len (_dac ._adb .Ser )-1);_geba :=LineChartSeries {_eda };
_geba .Values ().CreateEmptyNumberCache ();_geba .Properties ().LineProperties ().SetNoFill ();return _geba ;};

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_dca Chart )AddBar3DChart ()Bar3DChart {_ced (_dca ._dad .Chart );_ed :=_fe .NewCT_PlotAreaChoice ();_dca ._dad .Chart .PlotArea .Choice =append (_dca ._dad .Chart .PlotArea .Choice ,_ed );_ed .Bar3DChart =_fe .NewCT_Bar3DChart ();_ed .Bar3DChart .Grouping =_fe .NewCT_BarGrouping ();
_ed .Bar3DChart .Grouping .ValAttr =_fe .ST_BarGroupingStandard ;_geg :=Bar3DChart {_bgg :_ed .Bar3DChart };_geg .InitializeDefaults ();return _geg ;};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_age CategoryAxisDataSource )SetLabelReference (s string ){_age ._fdb .Choice =_fe .NewCT_AxDataSourceChoice ();_age ._fdb .Choice .StrRef =_fe .NewCT_StrRef ();_age ._fdb .Choice .StrRef .F =s ;};func (_dd LineChartSeries )Values ()NumberDataSource {if _dd ._fceg .Val ==nil {_dd ._fceg .Val =_fe .NewCT_NumDataSource ();
};return MakeNumberDataSource (_dd ._fceg .Val );};

// Values returns the value data source.
func (_ga AreaChartSeries )Values ()NumberDataSource {if _ga ._bd .Val ==nil {_ga ._bd .Val =_fe .NewCT_NumDataSource ();};return MakeNumberDataSource (_ga ._bd .Val );};var NullAxis Axis =nullAxis (0);func (_dbd SeriesAxis )InitializeDefaults (){};func (_geff Title )SetText (s string ){if _geff ._bef .Tx ==nil {_geff ._bef .Tx =_fe .NewCT_Tx ();
};if _geff ._bef .Tx .Choice .Rich ==nil {_geff ._bef .Tx .Choice .Rich =_eg .NewCT_TextBody ();};var _gebaa *_eg .CT_TextParagraph ;if len (_geff ._bef .Tx .Choice .Rich .P )==0{_gebaa =_eg .NewCT_TextParagraph ();_geff ._bef .Tx .Choice .Rich .P =[]*_eg .CT_TextParagraph {_gebaa };
}else {_gebaa =_geff ._bef .Tx .Choice .Rich .P [0];};var _bfb *_eg .EG_TextRun ;if len (_gebaa .EG_TextRun )==0{_bfb =_eg .NewEG_TextRun ();_gebaa .EG_TextRun =[]*_eg .EG_TextRun {_bfb };}else {_bfb =_gebaa .EG_TextRun [0];};if _bfb .R ==nil {_bfb .R =_eg .NewCT_RegularTextRun ();
};_bfb .R .T =s ;};

// SetText sets the series text.
func (_cb AreaChartSeries )SetText (s string ){_cb ._bd .Tx =_fe .NewCT_SerTx ();_cb ._bd .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_fa BarChart )X ()*_fe .CT_BarChart {return _fa ._dec };

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_bgg *_fe .CT_Bar3DChart ;};var _cdg =[]_e .Color {_e .RGB (0x33,0x66,0xcc),_e .RGB (0xDC,0x39,0x12),_e .RGB (0xFF,0x99,0x00),_e .RGB (0x10,0x96,0x18),_e .RGB (0x99,0x00,0x99),_e .RGB (0x3B,0x3E,0xAC),_e .RGB (0x00,0x99,0xC6),_e .RGB (0xDD,0x44,0x77),_e .RGB (0x66,0xAA,0x00),_e .RGB (0xB8,0x2E,0x2E),_e .RGB (0x31,0x63,0x95),_e .RGB (0x99,0x44,0x99),_e .RGB (0x22,0xAA,0x99),_e .RGB (0xAA,0xAA,0x11),_e .RGB (0x66,0x33,0xCC),_e .RGB (0xE6,0x73,0x00),_e .RGB (0x8B,0x07,0x07),_e .RGB (0x32,0x92,0x62),_e .RGB (0x55,0x74,0xA6),_e .RGB (0x3B,0x3E,0xAC)};
func (_bdaf ValueAxis )SetMinorTickMark (m _fe .ST_TickMark ){if m ==_fe .ST_TickMarkUnset {_bdaf ._cga .MinorTickMark =nil ;}else {_bdaf ._cga .MinorTickMark =_fe .NewCT_TickMark ();_bdaf ._cga .MinorTickMark .ValAttr =m ;};};

// RemoveLegend removes the legend if the chart has one.
func (_dcc Chart )RemoveLegend (){_dcc ._dad .Chart .Legend =nil };

// AddAxis adds an axis to a Surface chart.
func (_fbe Surface3DChart )AddAxis (axis Axis ){_efa :=_fe .NewCT_UnsignedInt ();_efa .ValAttr =axis .AxisID ();_fbe ._geea .AxId =append (_fbe ._geea .AxId ,_efa );};

// SetText sets the series text
func (_cgbd LineChartSeries )SetText (s string ){_cgbd ._fceg .Tx =_fe .NewCT_SerTx ();_cgbd ._fceg .Tx .Choice .V =&s ;};func (_bcb Marker )SetSize (sz uint8 ){_bcb ._aaa .Size =_fe .NewCT_MarkerSize ();_bcb ._aaa .Size .ValAttr =&sz ;};

// X returns the inner wrapped XML type.
func (_dde SeriesAxis )X ()*_fe .CT_SerAx {return _dde ._cdc };

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_gca *_fe .CT_BubbleSer };

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_cad NumberDataSource )CreateEmptyNumberCache (){_cad .ensureChoice ();if _cad ._dba .Choice .NumRef ==nil {_cad ._dba .Choice .NumRef =_fe .NewCT_NumRef ();};_cad ._dba .Choice .NumLit =nil ;_cad ._dba .Choice .NumRef .NumCache =_fe .NewCT_NumData ();
_cad ._dba .Choice .NumRef .NumCache .PtCount =_fe .NewCT_UnsignedInt ();_cad ._dba .Choice .NumRef .NumCache .PtCount .ValAttr =0;};

// Properties returns the line chart series shape properties.
func (_bed ScatterChartSeries )Properties ()_ca .ShapeProperties {if _bed ._beeff .SpPr ==nil {_bed ._beeff .SpPr =_eg .NewCT_ShapeProperties ();};return _ca .MakeShapeProperties (_bed ._beeff .SpPr );};

// CategoryAxis returns the category data source.
func (_dgcb BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dgcb ._gca .XVal ==nil {_dgcb ._gca .XVal =_fe .NewCT_AxDataSource ();};return MakeAxisDataSource (_dgcb ._gca .XVal );};func (_bgge CategoryAxis )InitializeDefaults (){_bgge .SetPosition (_fe .ST_AxPosB );
_bgge .SetMajorTickMark (_fe .ST_TickMarkOut );_bgge .SetMinorTickMark (_fe .ST_TickMarkIn );_bgge .SetTickLabelPosition (_fe .ST_TickLblPosNextTo );_bgge .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_e .LightGray );_bgge .Properties ().LineProperties ().SetSolidFill (_e .Black );
};func (_acg Chart )AddSeriesAxis ()SeriesAxis {_cff :=_fe .NewCT_SerAx ();if _acg ._dad .Chart .PlotArea .CChoice ==nil {_acg ._dad .Chart .PlotArea .CChoice =_fe .NewCT_PlotAreaChoice1 ();};_cff .AxId =_fe .NewCT_UnsignedInt ();_cff .AxId .ValAttr =0x7FFFFFFF&_fg .Uint32 ();
_acg ._dad .Chart .PlotArea .CChoice .SerAx =append (_acg ._dad .Chart .PlotArea .CChoice .SerAx ,_cff );_cff .Delete =_fe .NewCT_Boolean ();_cff .Delete .ValAttr =_ce .Bool (false );_bbbe :=MakeSeriesAxis (_cff );_bbbe .InitializeDefaults ();return _bbbe ;
};

// Chart is a generic chart.
type Chart struct{_dad *_fe .ChartSpace };

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_fgf *_fe .CT_BubbleChart ;};

// X returns the inner wrapped XML type.
func (_fgg LineChart )X ()*_fe .CT_LineChart {return _fgg ._fec };func (_ccg DateAxis )Properties ()_ca .ShapeProperties {if _ccg ._bgf .SpPr ==nil {_ccg ._bgf .SpPr =_eg .NewCT_ShapeProperties ();};return _ca .MakeShapeProperties (_ccg ._bgf .SpPr );};
func (_beea GridLines )Properties ()_ca .ShapeProperties {if _beea ._bddd .SpPr ==nil {_beea ._bddd .SpPr =_eg .NewCT_ShapeProperties ();};return _ca .MakeShapeProperties (_beea ._bddd .SpPr );};

// X returns the inner wrapped XML type.
func (_beefb DoughnutChart )X ()*_fe .CT_DoughnutChart {return _beefb ._faf };

// SetText sets the series text.
func (_adf PieChartSeries )SetText (s string ){_adf ._eggb .Tx =_fe .NewCT_SerTx ();_adf ._eggb .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_ddf SurfaceChartSeries )X ()*_fe .CT_SurfaceSer {return _ddf ._gab };

// X returns the inner wrapped XML type.
func (_bga Chart )X ()*_fe .ChartSpace {return _bga ._dad };

// AddSeries adds a default series to a Bubble chart.
func (_gf BubbleChart )AddSeries ()BubbleChartSeries {_be :=_gf .nextColor (len (_gf ._fgf .Ser ));_gfe :=_fe .NewCT_BubbleSer ();_gf ._fgf .Ser =append (_gf ._fgf .Ser ,_gfe );_gfe .Idx .ValAttr =uint32 (len (_gf ._fgf .Ser )-1);_gfe .Order .ValAttr =uint32 (len (_gf ._fgf .Ser )-1);
_cec :=BubbleChartSeries {_gfe };_cec .InitializeDefaults ();_cec .Properties ().SetSolidFill (_be );return _cec ;};

// X returns the inner wrapped XML type.
func (_gffb Marker )X ()*_fe .CT_Marker {return _gffb ._aaa };type Title struct{_bef *_fe .CT_Title };type DataLabels struct{_baa *_fe .CT_DLbls };func (_aga DateAxis )SetMinorTickMark (m _fe .ST_TickMark ){if m ==_fe .ST_TickMarkUnset {_aga ._bgf .MinorTickMark =nil ;
}else {_aga ._bgf .MinorTickMark =_fe .NewCT_TickMark ();_aga ._bgf .MinorTickMark .ValAttr =m ;};};

// InitializeDefaults the bar chart to its defaults
func (_ee Bar3DChart )InitializeDefaults (){_ee .SetDirection (_fe .ST_BarDirCol )};

// Properties returns the bar chart series shape properties.
func (_ecge PieChartSeries )Properties ()_ca .ShapeProperties {if _ecge ._eggb .SpPr ==nil {_ecge ._eggb .SpPr =_eg .NewCT_ShapeProperties ();};return _ca .MakeShapeProperties (_ecge ._eggb .SpPr );};

// Properties returns the bar chart series shape properties.
func (_dgd BarChartSeries )Properties ()_ca .ShapeProperties {if _dgd ._dgc .SpPr ==nil {_dgd ._dgc .SpPr =_eg .NewCT_ShapeProperties ();};return _ca .MakeShapeProperties (_dgd ._dgc .SpPr );};