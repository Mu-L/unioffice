//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint ;import (_a "encoding/xml";_b "fmt";_f "github.com/unidoc/unioffice/v2";);

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_fe *Iscomment )ValidateWithPath (path string )error {if _da :=_fe .CT_Empty .ValidateWithPath (path );_da !=nil {return _da ;};return nil ;};

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_ad *CT_Empty )ValidateWithPath (path string )error {return nil };func (_fd *CT_Empty )MarshalXML (e *_a .Encoder ,start _a .StartElement )error {e .EncodeToken (start );e .EncodeToken (_a .EndElement {Name :start .Name });return nil ;};func (_fga *Iscomment )UnmarshalXML (d *_a .Decoder ,start _a .StartElement )error {_fga .CT_Empty =*NewCT_Empty ();
for {_ba ,_ae :=d .Token ();if _ae !=nil {return _b .Errorf ("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073",_ae );};if _bb ,_fdg :=_ba .(_a .EndElement );_fdg &&_bb .Name ==start .Name {break ;};
};return nil ;};func (_ef *Textdata )UnmarshalXML (d *_a .Decoder ,start _a .StartElement )error {_ef .CT_Rel =*NewCT_Rel ();for _ ,_aee :=range start .Attr {if _aee .Name .Local =="\u0069\u0064"{_aea :=_aee .Value ;_ef .IdAttr =&_aea ;continue ;};};for {_gg ,_cgg :=d .Token ();
if _cgg !=nil {return _b .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073",_cgg );};if _bbf ,_dc :=_gg .(_a .EndElement );_dc &&_bbf .Name ==start .Name {break ;};};return nil ;};func (_gb *CT_Rel )MarshalXML (e *_a .Encoder ,start _a .StartElement )error {if _gb .IdAttr !=nil {start .Attr =append (start .Attr ,_a .Attr {Name :_a .Name {Local :"\u0069\u0064"},Value :_b .Sprintf ("\u0025\u0076",*_gb .IdAttr )});
};e .EncodeToken (start );e .EncodeToken (_a .EndElement {Name :start .Name });return nil ;};

// Validate validates the CT_Rel and its children
func (_ceb *CT_Rel )Validate ()error {return _ceb .ValidateWithPath ("\u0043\u0054\u005f\u0052\u0065\u006c");};func (_dbg *Textdata )MarshalXML (e *_a .Encoder ,start _a .StartElement )error {start .Attr =append (start .Attr ,_a .Attr {Name :_a .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});
start .Attr =append (start .Attr ,_a .Attr {Name :_a .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});
start .Name .Local ="\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061";return _dbg .CT_Rel .MarshalXML (e ,start );};

// Validate validates the Textdata and its children
func (_ecd *Textdata )Validate ()error {return _ecd .ValidateWithPath ("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061");};

// Validate validates the Iscomment and its children
func (_aa *Iscomment )Validate ()error {return _aa .ValidateWithPath ("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et");};

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_ec *CT_Rel )ValidateWithPath (path string )error {return nil };func (_ac *CT_Rel )UnmarshalXML (d *_a .Decoder ,start _a .StartElement )error {for _ ,_be :=range start .Attr {if _be .Name .Local =="\u0069\u0064"{_gbe :=_be .Value ;_ac .IdAttr =&_gbe ;
continue ;};};for {_e ,_fg :=d .Token ();if _fg !=nil {return _b .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073",_fg );};if _eg ,_ee :=_e .(_a .EndElement );_ee &&_eg .Name ==start .Name {break ;};};return nil ;
};type Iscomment struct{CT_Empty };func NewCT_Empty ()*CT_Empty {_g :=&CT_Empty {};return _g };type CT_Empty struct{};type Textdata struct{CT_Rel };type CT_Rel struct{

// Text Reference
IdAttr *string ;};func NewTextdata ()*Textdata {_db :=&Textdata {};_db .CT_Rel =*NewCT_Rel ();return _db };func (_cf *Iscomment )MarshalXML (e *_a .Encoder ,start _a .StartElement )error {start .Attr =append (start .Attr ,_a .Attr {Name :_a .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});
start .Attr =append (start .Attr ,_a .Attr {Name :_a .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});
start .Name .Local ="\u0069s\u0063\u006f\u006d\u006d\u0065\u006et";return _cf .CT_Empty .MarshalXML (e ,start );};func (_ga *CT_Empty )UnmarshalXML (d *_a .Decoder ,start _a .StartElement )error {for {_d ,_gc :=d .Token ();if _gc !=nil {return _b .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073",_gc );
};if _cg ,_fdf :=_d .(_a .EndElement );_fdf &&_cg .Name ==start .Name {break ;};};return nil ;};func NewCT_Rel ()*CT_Rel {_ce :=&CT_Rel {};return _ce };

// Validate validates the CT_Empty and its children
func (_bd *CT_Empty )Validate ()error {return _bd .ValidateWithPath ("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079");};func NewIscomment ()*Iscomment {_ab :=&Iscomment {};_ab .CT_Empty =*NewCT_Empty ();return _ab };

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_cga *Textdata )ValidateWithPath (path string )error {if _dg :=_cga .CT_Rel .ValidateWithPath (path );_dg !=nil {return _dg ;};return nil ;};func init (){_f .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079",NewCT_Empty );
_f .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0052\u0065\u006c",NewCT_Rel );
_f .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0069s\u0063\u006f\u006d\u006d\u0065\u006et",NewIscomment );
_f .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061",NewTextdata );
};