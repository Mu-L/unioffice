//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint ;import (_c "encoding/xml";_a "fmt";_bd "github.com/unidoc/unioffice";);func (_cf *Iscomment )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {_cf .CT_Empty =*NewCT_Empty ();for {_ag ,_f :=d .Token ();if _f !=nil {return _a .Errorf ("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073",_f );
};if _aad ,_df :=_ag .(_c .EndElement );_df &&_aad .Name ==start .Name {break ;};};return nil ;};func (_ae *CT_Empty )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {e .EncodeToken (start );e .EncodeToken (_c .EndElement {Name :start .Name });
return nil ;};func (_ed *Textdata )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});
start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});
start .Name .Local ="\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061";return _ed .CT_Rel .MarshalXML (e ,start );};

// Validate validates the CT_Rel and its children
func (_gd *CT_Rel )Validate ()error {return _gd .ValidateWithPath ("\u0043\u0054\u005f\u0052\u0065\u006c");};

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_ac *CT_Rel )ValidateWithPath (path string )error {return nil };func NewTextdata ()*Textdata {_ga :=&Textdata {};_ga .CT_Rel =*NewCT_Rel ();return _ga };

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_afc *Iscomment )ValidateWithPath (path string )error {if _aag :=_afc .CT_Empty .ValidateWithPath (path );_aag !=nil {return _aag ;};return nil ;};func (_bc *CT_Empty )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {for {_aef ,_e :=d .Token ();
if _e !=nil {return _a .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073",_e );};if _ec ,_bb :=_aef .(_c .EndElement );_bb &&_ec .Name ==start .Name {break ;};};return nil ;};func (_af *CT_Rel )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {if _af .IdAttr !=nil {start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0069\u0064"},Value :_a .Sprintf ("\u0025\u0076",*_af .IdAttr )});
};e .EncodeToken (start );e .EncodeToken (_c .EndElement {Name :start .Name });return nil ;};type Iscomment struct{CT_Empty };type CT_Empty struct{};func NewCT_Empty ()*CT_Empty {_ca :=&CT_Empty {};return _ca };func NewCT_Rel ()*CT_Rel {_g :=&CT_Rel {};
return _g };

// Validate validates the Textdata and its children
func (_fg *Textdata )Validate ()error {return _fg .ValidateWithPath ("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061");};

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_d *CT_Empty )ValidateWithPath (path string )error {return nil };func (_gc *CT_Rel )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {for _ ,_aaa :=range start .Attr {if _aaa .Name .Local =="\u0069\u0064"{_cd ,_ea :=_aaa .Value ,error (nil );
if _ea !=nil {return _ea ;};_gc .IdAttr =&_cd ;continue ;};};for {_ecg ,_cee :=d .Token ();if _cee !=nil {return _a .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073",_cee );};if _be ,_db :=_ecg .(_c .EndElement );
_db &&_be .Name ==start .Name {break ;};};return nil ;};func (_ceb *Textdata )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {_ceb .CT_Rel =*NewCT_Rel ();for _ ,_cg :=range start .Attr {if _cg .Name .Local =="\u0069\u0064"{_ff ,_bcb :=_cg .Value ,error (nil );
if _bcb !=nil {return _bcb ;};_ceb .IdAttr =&_ff ;continue ;};};for {_dbc ,_da :=d .Token ();if _da !=nil {return _a .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073",_da );};if _agg ,_de :=_dbc .(_c .EndElement );
_de &&_agg .Name ==start .Name {break ;};};return nil ;};type Textdata struct{CT_Rel };

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_gda *Textdata )ValidateWithPath (path string )error {if _gde :=_gda .CT_Rel .ValidateWithPath (path );_gde !=nil {return _gde ;};return nil ;};

// Validate validates the CT_Empty and its children
func (_ce *CT_Empty )Validate ()error {return _ce .ValidateWithPath ("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079");};type CT_Rel struct{IdAttr *string ;};func NewIscomment ()*Iscomment {_bbc :=&Iscomment {};_bbc .CT_Empty =*NewCT_Empty ();return _bbc };


// Validate validates the Iscomment and its children
func (_ee *Iscomment )Validate ()error {return _ee .ValidateWithPath ("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et");};func (_ab *Iscomment )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});
start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});
start .Name .Local ="\u0069s\u0063\u006f\u006d\u006d\u0065\u006et";return _ab .CT_Empty .MarshalXML (e ,start );};func init (){_bd .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079",NewCT_Empty );
_bd .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0052\u0065\u006c",NewCT_Rel );
_bd .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0069s\u0063\u006f\u006d\u006d\u0065\u006et",NewIscomment );
_bd .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061",NewTextdata );
};