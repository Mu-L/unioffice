//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint ;import (_g "encoding/xml";_c "fmt";_a "github.com/unidoc/unioffice";);

// Validate validates the CT_Empty and its children
func (_cg *CT_Empty )Validate ()error {return _cg .ValidateWithPath ("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079");};func NewCT_Empty ()*CT_Empty {_bb :=&CT_Empty {};return _bb };

// Validate validates the Textdata and its children
func (_cd *Textdata )Validate ()error {return _cd .ValidateWithPath ("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061");};type CT_Rel struct{IdAttr *string ;};func (_ga *Iscomment )UnmarshalXML (d *_g .Decoder ,start _g .StartElement )error {_ga .CT_Empty =*NewCT_Empty ();
for {_bee ,_ef :=d .Token ();if _ef !=nil {return _c .Errorf ("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073",_ef );};if _bbe ,_gaa :=_bee .(_g .EndElement );_gaa &&_bbe .Name ==start .Name {break ;
};};return nil ;};func NewIscomment ()*Iscomment {_bg :=&Iscomment {};_bg .CT_Empty =*NewCT_Empty ();return _bg };func (_fe *CT_Rel )MarshalXML (e *_g .Encoder ,start _g .StartElement )error {if _fe .IdAttr !=nil {start .Attr =append (start .Attr ,_g .Attr {Name :_g .Name {Local :"\u0069\u0064"},Value :_c .Sprintf ("\u0025\u0076",*_fe .IdAttr )});
};e .EncodeToken (start );e .EncodeToken (_g .EndElement {Name :start .Name });return nil ;};func (_de *CT_Rel )UnmarshalXML (d *_g .Decoder ,start _g .StartElement )error {for _ ,_bf :=range start .Attr {if _bf .Name .Local =="\u0069\u0064"{_ac ,_cgf :=_bf .Value ,error (nil );
if _cgf !=nil {return _cgf ;};_de .IdAttr =&_ac ;continue ;};};for {_da ,_ae :=d .Token ();if _ae !=nil {return _c .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073",_ae );};if _e ,_be :=_da .(_g .EndElement );
_be &&_e .Name ==start .Name {break ;};};return nil ;};

// Validate validates the CT_Rel and its children
func (_bae *CT_Rel )Validate ()error {return _bae .ValidateWithPath ("\u0043\u0054\u005f\u0052\u0065\u006c");};func (_acb *Textdata )MarshalXML (e *_g .Encoder ,start _g .StartElement )error {start .Attr =append (start .Attr ,_g .Attr {Name :_g .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});
start .Attr =append (start .Attr ,_g .Attr {Name :_g .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});
start .Name .Local ="\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061";return _acb .CT_Rel .MarshalXML (e ,start );};

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_bc *CT_Rel )ValidateWithPath (path string )error {return nil };type CT_Empty struct{};

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_gbg *CT_Empty )ValidateWithPath (path string )error {return nil };func (_d *CT_Empty )UnmarshalXML (d *_g .Decoder ,start _g .StartElement )error {for {_gg ,_ba :=d .Token ();if _ba !=nil {return _c .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073",_ba );
};if _gge ,_cf :=_gg .(_g .EndElement );_cf &&_gge .Name ==start .Name {break ;};};return nil ;};type Iscomment struct{CT_Empty };func (_bgg *Textdata )UnmarshalXML (d *_g .Decoder ,start _g .StartElement )error {_bgg .CT_Rel =*NewCT_Rel ();for _ ,_gac :=range start .Attr {if _gac .Name .Local =="\u0069\u0064"{_gf ,_ff :=_gac .Value ,error (nil );
if _ff !=nil {return _ff ;};_bgg .IdAttr =&_gf ;continue ;};};for {_gae ,_gaeb :=d .Token ();if _gaeb !=nil {return _c .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073",_gaeb );};if _gbc ,_dg :=_gae .(_g .EndElement );
_dg &&_gbc .Name ==start .Name {break ;};};return nil ;};func (_deg *Iscomment )MarshalXML (e *_g .Encoder ,start _g .StartElement )error {start .Attr =append (start .Attr ,_g .Attr {Name :_g .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});
start .Attr =append (start .Attr ,_g .Attr {Name :_g .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});
start .Name .Local ="\u0069s\u0063\u006f\u006d\u006d\u0065\u006et";return _deg .CT_Empty .MarshalXML (e ,start );};func NewTextdata ()*Textdata {_bgb :=&Textdata {};_bgb .CT_Rel =*NewCT_Rel ();return _bgb };func (_gb *CT_Empty )MarshalXML (e *_g .Encoder ,start _g .StartElement )error {e .EncodeToken (start );
e .EncodeToken (_g .EndElement {Name :start .Name });return nil ;};

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_ca *Iscomment )ValidateWithPath (path string )error {if _cae :=_ca .CT_Empty .ValidateWithPath (path );_cae !=nil {return _cae ;};return nil ;};type Textdata struct{CT_Rel };func NewCT_Rel ()*CT_Rel {_f :=&CT_Rel {};return _f };

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_eb *Textdata )ValidateWithPath (path string )error {if _fed :=_eb .CT_Rel .ValidateWithPath (path );_fed !=nil {return _fed ;};return nil ;};

// Validate validates the Iscomment and its children
func (_gaab *Iscomment )Validate ()error {return _gaab .ValidateWithPath ("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et");};func init (){_a .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079",NewCT_Empty );
_a .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0052\u0065\u006c",NewCT_Rel );
_a .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0069s\u0063\u006f\u006d\u006d\u0065\u006et",NewIscomment );
_a .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061",NewTextdata );
};