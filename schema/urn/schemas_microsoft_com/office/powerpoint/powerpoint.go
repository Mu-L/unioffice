//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint ;import (_d "encoding/xml";_a "fmt";_e "github.com/unidoc/unioffice";);func NewIscomment ()*Iscomment {_ce :=&Iscomment {};_ce .CT_Empty =*NewCT_Empty ();return _ce };func (_b *CT_Empty )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {e .EncodeToken (start );
e .EncodeToken (_d .EndElement {Name :start .Name });return nil ;};type CT_Rel struct{IdAttr *string ;};

// Validate validates the CT_Empty and its children
func (_fg *CT_Empty )Validate ()error {return _fg .ValidateWithPath ("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079");};func NewCT_Rel ()*CT_Rel {_gg :=&CT_Rel {};return _gg };

// Validate validates the Iscomment and its children
func (_dde *Iscomment )Validate ()error {return _dde .ValidateWithPath ("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et");};func (_bd *Textdata )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});
start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});
start .Name .Local ="\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061";return _bd .CT_Rel .MarshalXML (e ,start );};func (_df *CT_Rel )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {for _ ,_dd :=range start .Attr {if _dd .Name .Local =="\u0069\u0064"{_dce ,_eg :=_dd .Value ,error (nil );
if _eg !=nil {return _eg ;};_df .IdAttr =&_dce ;continue ;};};for {_af ,_bb :=d .Token ();if _bb !=nil {return _a .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073",_bb );};if _bg ,_gc :=_af .(_d .EndElement );
_gc &&_bg .Name ==start .Name {break ;};};return nil ;};

// Validate validates the Textdata and its children
func (_dda *Textdata )Validate ()error {return _dda .ValidateWithPath ("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061");};

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_cf *CT_Rel )ValidateWithPath (path string )error {return nil };

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_ggc *Iscomment )ValidateWithPath (path string )error {if _cc :=_ggc .CT_Empty .ValidateWithPath (path );_cc !=nil {return _cc ;};return nil ;};type CT_Empty struct{};func NewCT_Empty ()*CT_Empty {_ec :=&CT_Empty {};return _ec };type Iscomment struct{CT_Empty };
func (_ddd *Textdata )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_ddd .CT_Rel =*NewCT_Rel ();for _ ,_dea :=range start .Attr {if _dea .Name .Local =="\u0069\u0064"{_gce ,_be :=_dea .Value ,error (nil );if _be !=nil {return _be ;};_ddd .IdAttr =&_gce ;
continue ;};};for {_dcb ,_ae :=d .Token ();if _ae !=nil {return _a .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073",_ae );};if _ab ,_bbg :=_dcb .(_d .EndElement );_bbg &&_ab .Name ==start .Name {break ;
};};return nil ;};func (_bc *Iscomment )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_bc .CT_Empty =*NewCT_Empty ();for {_acc ,_gf :=d .Token ();if _gf !=nil {return _a .Errorf ("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073",_gf );
};if _da ,_fa :=_acc .(_d .EndElement );_fa &&_da .Name ==start .Name {break ;};};return nil ;};type Textdata struct{CT_Rel };

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_dc *CT_Empty )ValidateWithPath (path string )error {return nil };func NewTextdata ()*Textdata {_cb :=&Textdata {};_cb .CT_Rel =*NewCT_Rel ();return _cb };func (_de *CT_Rel )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {if _de .IdAttr !=nil {start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0069\u0064"},Value :_a .Sprintf ("\u0025\u0076",*_de .IdAttr )});
};e .EncodeToken (start );e .EncodeToken (_d .EndElement {Name :start .Name });return nil ;};

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_bgb *Textdata )ValidateWithPath (path string )error {if _dg :=_bgb .CT_Rel .ValidateWithPath (path );_dg !=nil {return _dg ;};return nil ;};

// Validate validates the CT_Rel and its children
func (_c *CT_Rel )Validate ()error {return _c .ValidateWithPath ("\u0043\u0054\u005f\u0052\u0065\u006c");};func (_fc *Iscomment )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});
start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});
start .Name .Local ="\u0069s\u0063\u006f\u006d\u006d\u0065\u006et";return _fc .CT_Empty .MarshalXML (e ,start );};func (_bf *CT_Empty )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {for {_ag ,_ac :=d .Token ();if _ac !=nil {return _a .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073",_ac );
};if _g ,_ga :=_ag .(_d .EndElement );_ga &&_g .Name ==start .Name {break ;};};return nil ;};func init (){_e .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079",NewCT_Empty );
_e .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0052\u0065\u006c",NewCT_Rel );
_e .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0069s\u0063\u006f\u006d\u006d\u0065\u006et",NewIscomment );
_e .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061",NewTextdata );
};