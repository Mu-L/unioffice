//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint ;import (_ag "encoding/xml";_d "fmt";_e "github.com/unidoc/unioffice/v2";);

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_bf *Textdata )ValidateWithPath (path string )error {if _cac :=_bf .CT_Rel .ValidateWithPath (path );_cac !=nil {return _cac ;};return nil ;};func (_ge *CT_Empty )MarshalXML (e *_ag .Encoder ,start _ag .StartElement )error {e .EncodeToken (start );
e .EncodeToken (_ag .EndElement {Name :start .Name });return nil ;};

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_acd *CT_Empty )ValidateWithPath (path string )error {return nil };

// Validate validates the CT_Rel and its children
func (_fg *CT_Rel )Validate ()error {return _fg .ValidateWithPath ("\u0043\u0054\u005f\u0052\u0065\u006c");};

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_ed *CT_Rel )ValidateWithPath (path string )error {return nil };

// Validate validates the Textdata and its children
func (_fcd *Textdata )Validate ()error {return _fcd .ValidateWithPath ("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061");};type CT_Empty struct{};type Iscomment struct{CT_Empty };func NewIscomment ()*Iscomment {_gb :=&Iscomment {};_gb .CT_Empty =*NewCT_Empty ();
return _gb };func (_cg *CT_Rel )UnmarshalXML (d *_ag .Decoder ,start _ag .StartElement )error {for _ ,_df :=range start .Attr {if _df .Name .Local =="\u0069\u0064"{_cga :=_df .Value ;_cg .IdAttr =&_cga ;continue ;};};for {_gf ,_db :=d .Token ();if _db !=nil {return _d .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073",_db );
};if _ef ,_fb :=_gf .(_ag .EndElement );_fb &&_ef .Name ==start .Name {break ;};};return nil ;};

// Validate validates the CT_Empty and its children
func (_ff *CT_Empty )Validate ()error {return _ff .ValidateWithPath ("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079");};func (_fd *CT_Rel )MarshalXML (e *_ag .Encoder ,start _ag .StartElement )error {if _fd .IdAttr !=nil {start .Attr =append (start .Attr ,_ag .Attr {Name :_ag .Name {Local :"\u0069\u0064"},Value :_d .Sprintf ("\u0025\u0076",*_fd .IdAttr )});
};e .EncodeToken (start );e .EncodeToken (_ag .EndElement {Name :start .Name });return nil ;};

// Validate validates the Iscomment and its children
func (_ba *Iscomment )Validate ()error {return _ba .ValidateWithPath ("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et");};func NewCT_Empty ()*CT_Empty {_g :=&CT_Empty {};return _g };func NewTextdata ()*Textdata {_cc :=&Textdata {};_cc .CT_Rel =*NewCT_Rel ();
return _cc };func (_f *CT_Empty )UnmarshalXML (d *_ag .Decoder ,start _ag .StartElement )error {for {_ac ,_b :=d .Token ();if _b !=nil {return _d .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073",_b );
};if _bg ,_c :=_ac .(_ag .EndElement );_c &&_bg .Name ==start .Name {break ;};};return nil ;};type Textdata struct{CT_Rel };func (_cfg *Textdata )MarshalXML (e *_ag .Encoder ,start _ag .StartElement )error {start .Attr =append (start .Attr ,_ag .Attr {Name :_ag .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});
start .Attr =append (start .Attr ,_ag .Attr {Name :_ag .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});
start .Name .Local ="\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061";return _cfg .CT_Rel .MarshalXML (e ,start );};func (_efg *Textdata )UnmarshalXML (d *_ag .Decoder ,start _ag .StartElement )error {_efg .CT_Rel =*NewCT_Rel ();for _ ,_afc :=range start .Attr {if _afc .Name .Local =="\u0069\u0064"{_fc :=_afc .Value ;
_efg .IdAttr =&_fc ;continue ;};};for {_gcg ,_ccb :=d .Token ();if _ccb !=nil {return _d .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073",_ccb );};if _ae ,_aeg :=_gcg .(_ag .EndElement );_aeg &&_ae .Name ==start .Name {break ;
};};return nil ;};func NewCT_Rel ()*CT_Rel {_gec :=&CT_Rel {};return _gec };func (_cgaa *Iscomment )MarshalXML (e *_ag .Encoder ,start _ag .StartElement )error {start .Attr =append (start .Attr ,_ag .Attr {Name :_ag .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});
start .Attr =append (start .Attr ,_ag .Attr {Name :_ag .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});
start .Name .Local ="\u0069s\u0063\u006f\u006d\u006d\u0065\u006et";return _cgaa .CT_Empty .MarshalXML (e ,start );};

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_fa *Iscomment )ValidateWithPath (path string )error {if _af :=_fa .CT_Empty .ValidateWithPath (path );_af !=nil {return _af ;};return nil ;};type CT_Rel struct{

// Text Reference
IdAttr *string ;};func (_dd *Iscomment )UnmarshalXML (d *_ag .Decoder ,start _ag .StartElement )error {_dd .CT_Empty =*NewCT_Empty ();for {_ce ,_gc :=d .Token ();if _gc !=nil {return _d .Errorf ("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073",_gc );
};if _fba ,_eg :=_ce .(_ag .EndElement );_eg &&_fba .Name ==start .Name {break ;};};return nil ;};func init (){_e .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079",NewCT_Empty );
_e .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0052\u0065\u006c",NewCT_Rel );
_e .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0069s\u0063\u006f\u006d\u006d\u0065\u006et",NewIscomment );
_e .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061",NewTextdata );
};