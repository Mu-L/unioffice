//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package elements ;import (_f "encoding/xml";_fg "fmt";_bg "github.com/unidoc/unioffice/v2";_c "github.com/unidoc/unioffice/v2/common/logger";);func NewSimpleLiteral ()*SimpleLiteral {_aeb :=&SimpleLiteral {};return _aeb };

// ValidateWithPath validates the Any and its children, prefixing error messages with path
func (_a *Any )ValidateWithPath (path string )error {if _cb :=_a .SimpleLiteral .ValidateWithPath (path );_cb !=nil {return _cb ;};return nil ;};func NewElementContainer ()*ElementContainer {_aa :=&ElementContainer {};return _aa };func (_ef *SimpleLiteral )MarshalXML (e *_f .Encoder ,start _f .StartElement )error {e .EncodeToken (start );
e .EncodeToken (_f .EndElement {Name :start .Name });return nil ;};type SimpleLiteral struct{};func NewAny ()*Any {_e :=&Any {};_e .SimpleLiteral =*NewSimpleLiteral ();return _e };

// Validate validates the Any and its children
func (_be *Any )Validate ()error {return _be .ValidateWithPath ("\u0041\u006e\u0079")};func (_gd *ElementContainer )UnmarshalXML (d *_f .Decoder ,start _f .StartElement )error {_gf :for {_ga ,_cg :=d .Token ();if _cg !=nil {return _cg ;};switch _fd :=_ga .(type ){case _f .StartElement :switch _fd .Name {case _f .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_gd .Any =NewAny ();
if _eb :=d .DecodeElement (_gd .Any ,&_fd );_eb !=nil {return _eb ;};default:_c .Log .Debug ("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u0020\u0025v",_fd .Name );
if _ab :=d .Skip ();_ab !=nil {return _ab ;};};case _f .EndElement :break _gf ;case _f .CharData :};};return nil ;};

// Validate validates the ElementContainer and its children
func (_cf *ElementContainer )Validate ()error {return _cf .ValidateWithPath ("\u0045\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072");};

// ValidateWithPath validates the SimpleLiteral and its children, prefixing error messages with path
func (_fff *SimpleLiteral )ValidateWithPath (path string )error {return nil };

// ValidateWithPath validates the ElementContainer and its children, prefixing error messages with path
func (_ed *ElementContainer )ValidateWithPath (path string )error {if _ed .Any !=nil {if _fdb :=_ed .Any .ValidateWithPath (path +"\u002f\u0041\u006e\u0079");_fdb !=nil {return _fdb ;};};return nil ;};func (_ce *ElementContainer )MarshalXML (e *_f .Encoder ,start _f .StartElement )error {start .Name .Local ="\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072";
e .EncodeToken (start );if _ce .Any !=nil {_cd :=_f .StartElement {Name :_f .Name {Local :"\u0061\u006e\u0079"}};e .EncodeElement (_ce .Any ,_cd );};e .EncodeToken (_f .EndElement {Name :start .Name });return nil ;};

// Validate validates the ElementsGroup and its children
func (_gdg *ElementsGroup )Validate ()error {return _gdg .ValidateWithPath ("\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070");};type ElementsGroup struct{Any *Any ;};func (_d *Any )UnmarshalXML (d *_f .Decoder ,start _f .StartElement )error {_d .SimpleLiteral =*NewSimpleLiteral ();
for {_g ,_ff :=d .Token ();if _ff !=nil {return _fg .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0041\u006e\u0079\u003a\u0020\u0025\u0073",_ff );};if _dd ,_ee :=_g .(_f .EndElement );_ee &&_dd .Name ==start .Name {break ;};};return nil ;};func (_aeg *SimpleLiteral )UnmarshalXML (d *_f .Decoder ,start _f .StartElement )error {for {_edb ,_ffg :=d .Token ();
if _ffg !=nil {return _fg .Errorf ("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0053\u0069\u006d\u0070l\u0065L\u0069t\u0065\u0072\u0061\u006c\u003a\u0020\u0025s",_ffg );};if _cbe ,_ea :=_edb .(_f .EndElement );_ea &&_cbe .Name ==start .Name {break ;};};return nil ;
};func (_fb *Any )MarshalXML (e *_f .Encoder ,start _f .StartElement )error {return _fb .SimpleLiteral .MarshalXML (e ,start );};type ElementContainer struct{Any *Any ;};func NewElementsGroup ()*ElementsGroup {_gae :=&ElementsGroup {};return _gae };func (_bb *ElementsGroup )UnmarshalXML (d *_f .Decoder ,start _f .StartElement )error {_bd :for {_gdd ,_gc :=d .Token ();
if _gc !=nil {return _gc ;};switch _ae :=_gdd .(type ){case _f .StartElement :switch _ae .Name {case _f .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_bb .Any =NewAny ();
if _ddg :=d .DecodeElement (_bb .Any ,&_ae );_ddg !=nil {return _ddg ;};default:_c .Log .Debug ("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006de\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070 \u0025\u0076",_ae .Name );
if _eg :=d .Skip ();_eg !=nil {return _eg ;};};case _f .EndElement :break _bd ;case _f .CharData :};};return nil ;};func (_ba *ElementsGroup )MarshalXML (e *_f .Encoder ,start _f .StartElement )error {if _ba .Any !=nil {_aac :=_f .StartElement {Name :_f .Name {Local :"\u0064\u0063\u003a\u0061\u006e\u0079"}};
e .EncodeElement (_ba .Any ,_aac );};return nil ;};

// ValidateWithPath validates the ElementsGroup and its children, prefixing error messages with path
func (_bgb *ElementsGroup )ValidateWithPath (path string )error {if _bgb .Any !=nil {if _cfg :=_bgb .Any .ValidateWithPath (path +"\u002f\u0041\u006e\u0079");_cfg !=nil {return _cfg ;};};return nil ;};

// Validate validates the SimpleLiteral and its children
func (_gb *SimpleLiteral )Validate ()error {return _gb .ValidateWithPath ("\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c");};type Any struct{SimpleLiteral };func init (){_bg .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c",NewSimpleLiteral );
_bg .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072",NewElementContainer );
_bg .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0061\u006e\u0079",NewAny );_bg .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070",NewElementsGroup );
};