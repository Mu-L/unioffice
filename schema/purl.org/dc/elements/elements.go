//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package elements ;import (_c "encoding/xml";_e "fmt";_g "github.com/unidoc/unioffice/v2";_cd "github.com/unidoc/unioffice/v2/common/logger";);func (_acd *SimpleLiteral )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {for {_da ,_fbe :=d .Token ();
if _fbe !=nil {return _e .Errorf ("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0053\u0069\u006d\u0070l\u0065L\u0069t\u0065\u0072\u0061\u006c\u003a\u0020\u0025s",_fbe );};if _ggg ,_bb :=_da .(_c .EndElement );_bb &&_ggg .Name ==start .Name {break ;};};return nil ;
};type ElementsGroup struct{Any *Any ;};func NewAny ()*Any {_a :=&Any {};_a .SimpleLiteral =*NewSimpleLiteral ();return _a };

// ValidateWithPath validates the ElementContainer and its children, prefixing error messages with path
func (_bd *ElementContainer )ValidateWithPath (path string )error {if _bd .Any !=nil {if _eaf :=_bd .Any .ValidateWithPath (path +"\u002f\u0041\u006e\u0079");_eaf !=nil {return _eaf ;};};return nil ;};type Any struct{SimpleLiteral };

// Validate validates the Any and its children
func (_fb *Any )Validate ()error {return _fb .ValidateWithPath ("\u0041\u006e\u0079")};func (_cdg *ElementContainer )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {_af :for {_dd ,_gdf :=d .Token ();if _gdf !=nil {return _gdf ;};switch _agf :=_dd .(type ){case _c .StartElement :switch _agf .Name {case _c .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_cdg .Any =NewAny ();
if _ga :=d .DecodeElement (_cdg .Any ,&_agf );_ga !=nil {return _ga ;};default:_cd .Log .Debug ("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u0020\u0025v",_agf .Name );
if _feg :=d .Skip ();_feg !=nil {return _feg ;};};case _c .EndElement :break _af ;case _c .CharData :};};return nil ;};type ElementContainer struct{Any *Any ;};type SimpleLiteral struct{};

// ValidateWithPath validates the ElementsGroup and its children, prefixing error messages with path
func (_ac *ElementsGroup )ValidateWithPath (path string )error {if _ac .Any !=nil {if _ce :=_ac .Any .ValidateWithPath (path +"\u002f\u0041\u006e\u0079");_ce !=nil {return _ce ;};};return nil ;};

// ValidateWithPath validates the Any and its children, prefixing error messages with path
func (_b *Any )ValidateWithPath (path string )error {if _gf :=_b .SimpleLiteral .ValidateWithPath (path );_gf !=nil {return _gf ;};return nil ;};

// ValidateWithPath validates the SimpleLiteral and its children, prefixing error messages with path
func (_efb *SimpleLiteral )ValidateWithPath (path string )error {return nil };func (_agc *ElementsGroup )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {if _agc .Any !=nil {_bde :=_c .StartElement {Name :_c .Name {Local :"\u0064\u0063\u003a\u0061\u006e\u0079"}};
e .EncodeElement (_agc .Any ,_bde );};return nil ;};func NewSimpleLiteral ()*SimpleLiteral {_cc :=&SimpleLiteral {};return _cc };func NewElementContainer ()*ElementContainer {_bg :=&ElementContainer {};return _bg };

// Validate validates the ElementContainer and its children
func (_de *ElementContainer )Validate ()error {return _de .ValidateWithPath ("\u0045\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072");};func (_cf *Any )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {_cf .SimpleLiteral =*NewSimpleLiteral ();
for {_d ,_ag :=d .Token ();if _ag !=nil {return _e .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0041\u006e\u0079\u003a\u0020\u0025\u0073",_ag );};if _gg ,_ea :=_d .(_c .EndElement );_ea &&_gg .Name ==start .Name {break ;};};return nil ;};func (_cdf *Any )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {return _cdf .SimpleLiteral .MarshalXML (e ,start );
};func (_gd *ElementContainer )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {start .Name .Local ="\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072";e .EncodeToken (start );if _gd .Any !=nil {_fe :=_c .StartElement {Name :_c .Name {Local :"\u0061\u006e\u0079"}};
e .EncodeElement (_gd .Any ,_fe );};e .EncodeToken (_c .EndElement {Name :start .Name });return nil ;};func (_gb *ElementsGroup )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {_ec :for {_ed ,_ae :=d .Token ();if _ae !=nil {return _ae ;};switch _be :=_ed .(type ){case _c .StartElement :switch _be .Name {case _c .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_gb .Any =NewAny ();
if _db :=d .DecodeElement (_gb .Any ,&_be );_db !=nil {return _db ;};default:_cd .Log .Debug ("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006de\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070 \u0025\u0076",_be .Name );
if _ecf :=d .Skip ();_ecf !=nil {return _ecf ;};};case _c .EndElement :break _ec ;case _c .CharData :};};return nil ;};func (_ba *SimpleLiteral )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {e .EncodeToken (start );e .EncodeToken (_c .EndElement {Name :start .Name });
return nil ;};

// Validate validates the ElementsGroup and its children
func (_dbg *ElementsGroup )Validate ()error {return _dbg .ValidateWithPath ("\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070");};func NewElementsGroup ()*ElementsGroup {_fc :=&ElementsGroup {};return _fc };

// Validate validates the SimpleLiteral and its children
func (_ef *SimpleLiteral )Validate ()error {return _ef .ValidateWithPath ("\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c");};func init (){_g .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c",NewSimpleLiteral );
_g .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072",NewElementContainer );
_g .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0061\u006e\u0079",NewAny );_g .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070",NewElementsGroup );
};