//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package elements ;import (_d "encoding/xml";_dg "fmt";_f "github.com/unidoc/unioffice/v2";_g "github.com/unidoc/unioffice/v2/common/logger";);func (_ea *Any )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {return _ea .SimpleLiteral .MarshalXML (e ,start );
};

// Validate validates the ElementsGroup and its children
func (_be *ElementsGroup )Validate ()error {return _be .ValidateWithPath ("\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070");};type SimpleLiteral struct{};

// ValidateWithPath validates the ElementContainer and its children, prefixing error messages with path
func (_ead *ElementContainer )ValidateWithPath (path string )error {if _ead .Any !=nil {if _dc :=_ead .Any .ValidateWithPath (path +"\u002f\u0041\u006e\u0079");_dc !=nil {return _dc ;};};return nil ;};type Any struct{SimpleLiteral };type ElementContainer struct{Any *Any ;
};

// Validate validates the Any and its children
func (_ac *Any )Validate ()error {return _ac .ValidateWithPath ("\u0041\u006e\u0079")};func (_bcf *SimpleLiteral )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {e .EncodeToken (start );e .EncodeToken (_d .EndElement {Name :start .Name });return nil ;
};func NewElementsGroup ()*ElementsGroup {_fbb :=&ElementsGroup {};return _fbb };func NewAny ()*Any {_a :=&Any {};_a .SimpleLiteral =*NewSimpleLiteral ();return _a };type ElementsGroup struct{Any *Any ;};func (_ca *SimpleLiteral )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {for {_ad ,_ce :=d .Token ();
if _ce !=nil {return _dg .Errorf ("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0053\u0069\u006d\u0070l\u0065L\u0069t\u0065\u0072\u0061\u006c\u003a\u0020\u0025s",_ce );};if _ba ,_gaf :=_ad .(_d .EndElement );_gaf &&_ba .Name ==start .Name {break ;};};return nil ;
};func (_fd *ElementsGroup )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_eae :for {_aeg ,_gab :=d .Token ();if _gab !=nil {return _gab ;};switch _gd :=_aeg .(type ){case _d .StartElement :switch _gd .Name {case _d .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_fd .Any =NewAny ();
if _af :=d .DecodeElement (_fd .Any ,&_gd );_af !=nil {return _af ;};default:_g .Log .Debug ("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006de\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070 \u0025\u0076",_gd .Name );
if _abg :=d .Skip ();_abg !=nil {return _abg ;};};case _d .EndElement :break _eae ;case _d .CharData :};};return nil ;};

// Validate validates the SimpleLiteral and its children
func (_fgg *SimpleLiteral )Validate ()error {return _fgg .ValidateWithPath ("\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c");};func NewSimpleLiteral ()*SimpleLiteral {_dca :=&SimpleLiteral {};return _dca };func (_eab *ElementContainer )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {start .Name .Local ="\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072";
e .EncodeToken (start );if _eab .Any !=nil {_bb :=_d .StartElement {Name :_d .Name {Local :"\u0061\u006e\u0079"}};e .EncodeElement (_eab .Any ,_bb );};e .EncodeToken (_d .EndElement {Name :start .Name });return nil ;};

// ValidateWithPath validates the Any and its children, prefixing error messages with path
func (_ec *Any )ValidateWithPath (path string )error {if _ab :=_ec .SimpleLiteral .ValidateWithPath (path );_ab !=nil {return _ab ;};return nil ;};

// ValidateWithPath validates the SimpleLiteral and its children, prefixing error messages with path
func (_ced *SimpleLiteral )ValidateWithPath (path string )error {return nil };func (_c *Any )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_c .SimpleLiteral =*NewSimpleLiteral ();for {_b ,_cb :=d .Token ();if _cb !=nil {return _dg .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0041\u006e\u0079\u003a\u0020\u0025\u0073",_cb );
};if _fb ,_bd :=_b .(_d .EndElement );_bd &&_fb .Name ==start .Name {break ;};};return nil ;};func NewElementContainer ()*ElementContainer {_ae :=&ElementContainer {};return _ae };

// Validate validates the ElementContainer and its children
func (_bc *ElementContainer )Validate ()error {return _bc .ValidateWithPath ("\u0045\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072");};func (_fec *ElementsGroup )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {if _fec .Any !=nil {_bg :=_d .StartElement {Name :_d .Name {Local :"\u0064\u0063\u003a\u0061\u006e\u0079"}};
e .EncodeElement (_fec .Any ,_bg );};return nil ;};

// ValidateWithPath validates the ElementsGroup and its children, prefixing error messages with path
func (_afd *ElementsGroup )ValidateWithPath (path string )error {if _afd .Any !=nil {if _afc :=_afd .Any .ValidateWithPath (path +"\u002f\u0041\u006e\u0079");_afc !=nil {return _afc ;};};return nil ;};func (_bdd *ElementContainer )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_ga :for {_fg ,_eg :=d .Token ();
if _eg !=nil {return _eg ;};switch _dgg :=_fg .(type ){case _d .StartElement :switch _dgg .Name {case _d .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_bdd .Any =NewAny ();
if _fe :=d .DecodeElement (_bdd .Any ,&_dgg );_fe !=nil {return _fe ;};default:_g .Log .Debug ("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u0020\u0025v",_dgg .Name );
if _feb :=d .Skip ();_feb !=nil {return _feb ;};};case _d .EndElement :break _ga ;case _d .CharData :};};return nil ;};func init (){_f .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c",NewSimpleLiteral );
_f .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072",NewElementContainer );
_f .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0061\u006e\u0079",NewAny );_f .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070",NewElementsGroup );
};