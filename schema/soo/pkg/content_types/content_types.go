//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package content_types ;import (_d "encoding/xml";_g "fmt";_f "github.com/unidoc/unioffice/v2";_ec "github.com/unidoc/unioffice/v2/common/logger";_ef "regexp";);type CT_Override struct{ContentTypeAttr string ;PartNameAttr string ;};

// ValidateWithPath validates the CT_Types and its children, prefixing error messages with path
func (_dgf *CT_Types )ValidateWithPath (path string )error {for _db ,_bfc :=range _dgf .TypesChoice {if _fe :=_bfc .ValidateWithPath (_g .Sprintf ("\u0025s\u002fT\u0079\u0070\u0065\u0073\u0043h\u006f\u0069c\u0065\u005b\u0025\u0064\u005d",path ,_db ));_fe !=nil {return _fe ;
};};return nil ;};type CT_Types struct{TypesChoice []*CT_TypesChoice ;};func (_eeb *Types )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s"});
start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});
start .Name .Local ="\u0054\u0079\u0070e\u0073";return _eeb .CT_Types .MarshalXML (e ,start );};func (_dg *CT_Types )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {e .EncodeToken (start );if _dg .TypesChoice !=nil {for _ ,_af :=range _dg .TypesChoice {_af .MarshalXML (e ,_d .StartElement {});
};};e .EncodeToken (_d .EndElement {Name :start .Name });return nil ;};

// ValidateWithPath validates the Override and its children, prefixing error messages with path
func (_dfd *Override )ValidateWithPath (path string )error {if _fbf :=_dfd .CT_Override .ValidateWithPath (path );_fbf !=nil {return _fbf ;};return nil ;};

// Validate validates the CT_Override and its children
func (_bfg *CT_Override )Validate ()error {return _bfg .ValidateWithPath ("C\u0054\u005f\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065");};

// Validate validates the CT_TypesChoice and its children
func (_gbb *CT_TypesChoice )Validate ()error {return _gbb .ValidateWithPath ("\u0043\u0054\u005f\u0054\u0079\u0070\u0065\u0073\u0043h\u006f\u0069\u0063\u0065");};func NewOverride ()*Override {_abe :=&Override {};_abe .CT_Override =*NewCT_Override ();return _abe };


// Validate validates the Default and its children
func (_fgb *Default )Validate ()error {return _fgb .ValidateWithPath ("\u0044e\u0066\u0061\u0075\u006c\u0074");};func (_gb *CT_Default )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_gb .ExtensionAttr ="\u0078\u006d\u006c";_gb .ContentTypeAttr ="\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0078\u006d\u006c";
for _ ,_b :=range start .Attr {if _b .Name .Local =="\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn"{_aa :=_b .Value ;_gb .ExtensionAttr =_aa ;continue ;};if _b .Name .Local =="C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065"{_bd :=_b .Value ;
_gb .ContentTypeAttr =_bd ;continue ;};};for {_fg ,_ea :=d .Token ();if _ea !=nil {return _g .Errorf ("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0044\u0065\u0066\u0061\u0075\u006c\u0074\u003a\u0020%\u0073",_ea );};if _aad ,_ff :=_fg .(_d .EndElement );
_ff &&_aad .Name ==start .Name {break ;};};return nil ;};

// Validate validates the CT_Types and its children
func (_ab *CT_Types )Validate ()error {return _ab .ValidateWithPath ("\u0043\u0054\u005f\u0054\u0079\u0070\u0065\u0073");};

// Validate validates the Override and its children
func (_bcd *Override )Validate ()error {return _bcd .ValidateWithPath ("\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065");};func NewCT_Default ()*CT_Default {_gg :=&CT_Default {};_gg .ExtensionAttr ="\u0078\u006d\u006c";_gg .ContentTypeAttr ="\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0078\u006d\u006c";
return _gg ;};func (_a *CT_Default )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn"},Value :_g .Sprintf ("\u0025\u0076",_a .ExtensionAttr )});
start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065"},Value :_g .Sprintf ("\u0025\u0076",_a .ContentTypeAttr )});e .EncodeToken (start );e .EncodeToken (_d .EndElement {Name :start .Name });
return nil ;};func (_edc *Override )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_edc .CT_Override =*NewCT_Override ();for _ ,_cec :=range start .Attr {if _cec .Name .Local =="C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065"{_dgfc :=_cec .Value ;
_edc .ContentTypeAttr =_dgfc ;continue ;};if _cec .Name .Local =="\u0050\u0061\u0072\u0074\u004e\u0061\u006d\u0065"{_eff :=_cec .Value ;_edc .PartNameAttr =_eff ;continue ;};};for {_egf ,_fd :=d .Token ();if _fd !=nil {return _g .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u004f\u0076\u0065r\u0072\u0069\u0064\u0065: \u0025\u0073",_fd );
};if _gdee ,_geb :=_egf .(_d .EndElement );_geb &&_gdee .Name ==start .Name {break ;};};return nil ;};func (_bc *CT_Types )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_faa :for {_gf ,_ee :=d .Token ();if _ee !=nil {return _ee ;};switch _dd :=_gf .(type ){case _d .StartElement :switch _dd .Name {case _d .Name {Space :"ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s",Local :"\u0044e\u0066\u0061\u0075\u006c\u0074"}:_ge :=NewCT_TypesChoice ();
if _fc :=d .DecodeElement (&_ge .Default ,&_dd );_fc !=nil {return _fc ;};_bc .TypesChoice =append (_bc .TypesChoice ,_ge );case _d .Name {Space :"ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s",Local :"\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065"}:_dge :=NewCT_TypesChoice ();
if _da :=d .DecodeElement (&_dge .Override ,&_dd );_da !=nil {return _da ;};_bc .TypesChoice =append (_bc .TypesChoice ,_dge );default:_ec .Log .Debug ("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0079\u0070\u0065\u0073\u0020\u0025\u0076",_dd .Name );
if _ged :=d .Skip ();_ged !=nil {return _ged ;};};case _d .EndElement :break _faa ;case _d .CharData :};};return nil ;};func (_fga *Types )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_fga .CT_Types =*NewCT_Types ();_eeg :for {_ffc ,_fdc :=d .Token ();
if _fdc !=nil {return _fdc ;};switch _gfc :=_ffc .(type ){case _d .StartElement :switch _gfc .Name {case _d .Name {Space :"ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s",Local :"\u0044e\u0066\u0061\u0075\u006c\u0074"}:_cb :=NewCT_TypesChoice ();
if _ad :=d .DecodeElement (&_cb .Default ,&_gfc );_ad !=nil {return _ad ;};_fga .TypesChoice =append (_fga .TypesChoice ,_cb );case _d .Name {Space :"ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s",Local :"\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065"}:_gfcd :=NewCT_TypesChoice ();
if _aea :=d .DecodeElement (&_gfcd .Override ,&_gfc );_aea !=nil {return _aea ;};_fga .TypesChoice =append (_fga .TypesChoice ,_gfcd );default:_ec .Log .Debug ("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0054\u0079\u0070e\u0073 \u0025\u0076",_gfc .Name );
if _aeaa :=d .Skip ();_aeaa !=nil {return _aeaa ;};};case _d .EndElement :break _eeg ;case _d .CharData :};};return nil ;};

// ValidateWithPath validates the CT_TypesChoice and its children, prefixing error messages with path
func (_efe *CT_TypesChoice )ValidateWithPath (path string )error {if _efe .Default !=nil {if _cc :=_efe .Default .ValidateWithPath (path +"\u002f\u0044\u0065\u0066\u0061\u0075\u006c\u0074");_cc !=nil {return _cc ;};};if _efe .Override !=nil {if _fea :=_efe .Override .ValidateWithPath (path +"\u002fO\u0076\u0065\u0072\u0072\u0069\u0064e");
_fea !=nil {return _fea ;};};return nil ;};func NewCT_Override ()*CT_Override {_fa :=&CT_Override {};_fa .ContentTypeAttr ="\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0078\u006d\u006c";return _fa ;};type CT_TypesChoice struct{Default *Default ;
Override *Override ;};type Types struct{CT_Types };func (_bgc *Override )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {return _bgc .CT_Override .MarshalXML (e ,start );};func (_gd *CT_Override )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_gd .ContentTypeAttr ="\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0078\u006d\u006c";
for _ ,_ag :=range start .Attr {if _ag .Name .Local =="C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065"{_ac :=_ag .Value ;_gd .ContentTypeAttr =_ac ;continue ;};if _ag .Name .Local =="\u0050\u0061\u0072\u0074\u004e\u0061\u006d\u0065"{_bf :=_ag .Value ;
_gd .PartNameAttr =_bf ;continue ;};};for {_c ,_ga :=d .Token ();if _ga !=nil {return _g .Errorf ("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u003a\u0020\u0025\u0073",_ga );};if _df ,_gda :=_c .(_d .EndElement );
_gda &&_df .Name ==start .Name {break ;};};return nil ;};var ST_ContentTypePatternRe =_ef .MustCompile (ST_ContentTypePattern );type Override struct{CT_Override };func NewCT_TypesChoice ()*CT_TypesChoice {_gc :=&CT_TypesChoice {};return _gc };func (_ed *CT_Override )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065"},Value :_g .Sprintf ("\u0025\u0076",_ed .ContentTypeAttr )});
start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0050\u0061\u0072\u0074\u004e\u0061\u006d\u0065"},Value :_g .Sprintf ("\u0025\u0076",_ed .PartNameAttr )});e .EncodeToken (start );e .EncodeToken (_d .EndElement {Name :start .Name });
return nil ;};

// ValidateWithPath validates the Default and its children, prefixing error messages with path
func (_bcg *Default )ValidateWithPath (path string )error {if _eg :=_bcg .CT_Default .ValidateWithPath (path );_eg !=nil {return _eg ;};return nil ;};

// ValidateWithPath validates the Types and its children, prefixing error messages with path
func (_gdeb *Types )ValidateWithPath (path string )error {if _ffd :=_gdeb .CT_Types .ValidateWithPath (path );_ffd !=nil {return _ffd ;};return nil ;};func (_eb *Default )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {return _eb .CT_Default .MarshalXML (e ,start );
};const ST_ContentTypePattern ="\u005e\\\u0070{\u004c\u0061\u0074\u0069\u006e\u007d\u002b\u002f\u002e\u002a\u0024";

// ValidateWithPath validates the CT_Override and its children, prefixing error messages with path
func (_aag *CT_Override )ValidateWithPath (path string )error {if !ST_ContentTypePatternRe .MatchString (_aag .ContentTypeAttr ){return _g .Errorf ("\u0025\u0073/\u006d\u002e\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029",path ,ST_ContentTypePatternRe ,_aag .ContentTypeAttr );
};return nil ;};func NewCT_Types ()*CT_Types {_ce :=&CT_Types {};return _ce };var ST_ExtensionPatternRe =_ef .MustCompile (ST_ExtensionPattern );type Default struct{CT_Default };func NewDefault ()*Default {_dac :=&Default {};_dac .CT_Default =*NewCT_Default ();
return _dac };

// ValidateWithPath validates the CT_Default and its children, prefixing error messages with path
func (_aac *CT_Default )ValidateWithPath (path string )error {if !ST_ExtensionPatternRe .MatchString (_aac .ExtensionAttr ){return _g .Errorf ("\u0025s\u002f\u006d.\u0045\u0078\u0074\u0065n\u0073\u0069\u006fn\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074 m\u0061\u0074\u0063h\u0020\u0027%\u0073\u0027\u0020\u0028\u0068\u0061v\u0065\u0020%\u0076\u0029",path ,ST_ExtensionPatternRe ,_aac .ExtensionAttr );
};if !ST_ContentTypePatternRe .MatchString (_aac .ContentTypeAttr ){return _g .Errorf ("\u0025\u0073/\u006d\u002e\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029",path ,ST_ContentTypePatternRe ,_aac .ContentTypeAttr );
};return nil ;};

// Validate validates the Types and its children
func (_bb *Types )Validate ()error {return _bb .ValidateWithPath ("\u0054\u0079\u0070e\u0073")};type CT_Default struct{ExtensionAttr string ;ContentTypeAttr string ;};func (_ba *Default )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_ba .CT_Default =*NewCT_Default ();
for _ ,_bg :=range start .Attr {if _bg .Name .Local =="\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn"{_agb :=_bg .Value ;_ba .ExtensionAttr =_agb ;continue ;};if _bg .Name .Local =="C\u006f\u006e\u0074\u0065\u006e\u0074\u0054\u0079\u0070\u0065"{_fb :=_bg .Value ;
_ba .ContentTypeAttr =_fb ;continue ;};};for {_ebf ,_dgc :=d .Token ();if _dgc !=nil {return _g .Errorf ("\u0070\u0061\u0072\u0073in\u0067\u0020\u0044\u0065\u0066\u0061\u0075\u006c\u0074\u003a\u0020\u0025\u0073",_dgc );};if _cd ,_eda :=_ebf .(_d .EndElement );
_eda &&_cd .Name ==start .Name {break ;};};return nil ;};func (_cg *CT_TypesChoice )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_afc :=start ;switch start .Name {case _d .Name {Space :"ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s",Local :"\u0044e\u0066\u0061\u0075\u006c\u0074"}:_cg .Default =NewDefault ();
if _dbc :=d .DecodeElement (_cg .Default ,&_afc );_dbc !=nil {return _dbc ;};case _d .Name {Space :"ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s",Local :"\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065"}:_cg .Override =NewOverride ();
if _gfd :=d .DecodeElement (_cg .Override ,&_afc );_gfd !=nil {return _gfd ;};default:_ec .Log .Debug ("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0079\u0070\u0065\u0073\u0043\u0068o\u0069c\u0065\u0020\u0025\u0076",_afc .Name );
if _fed :=d .Skip ();_fed !=nil {return _fed ;};};return nil ;};

// Validate validates the CT_Default and its children
func (_efc *CT_Default )Validate ()error {return _efc .ValidateWithPath ("\u0043\u0054\u005f\u0044\u0065\u0066\u0061\u0075\u006c\u0074");};func (_aee *CT_TypesChoice )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {e .EncodeToken (start );if _aee .Default !=nil {_dda :=_d .StartElement {Name :_d .Name {Local :"\u0044e\u0066\u0061\u0075\u006c\u0074"}};
e .EncodeElement (_aee .Default ,_dda );}else if _aee .Override !=nil {_ffe :=_d .StartElement {Name :_d .Name {Local :"\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065"}};e .EncodeElement (_aee .Override ,_ffe );};e .EncodeToken (_d .EndElement {Name :start .Name });
return nil ;};func NewTypes ()*Types {_fbg :=&Types {};_fbg .CT_Types =*NewCT_Types ();return _fbg };const ST_ExtensionPattern ="\u0028\u005b\u0021\u0024\u0026\u0027\\\u0028\u005c\u0029\u005c\u002a\\\u002b\u002c\u003a\u003d\u005d\u007c(\u0025\u005b\u0030\u002d\u0039a\u002d\u0066\u0041\u002d\u0046\u005d\u005b\u0030\u002d\u0039\u0061\u002df\u0041\u002d\u0046\u005d\u0029\u007c\u005b\u003a\u0040\u005d\u007c\u005b\u0061\u002d\u007aA\u002d\u005a\u0030\u002d\u0039\u005c\u002d\u005f~\u005d\u0029\u002b";
func init (){_f .RegisterConstructor ("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s","\u0043\u0054\u005f\u0054\u0079\u0070\u0065\u0073",NewCT_Types );
_f .RegisterConstructor ("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s","\u0043\u0054\u005f\u0044\u0065\u0066\u0061\u0075\u006c\u0074",NewCT_Default );
_f .RegisterConstructor ("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s","C\u0054\u005f\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065",NewCT_Override );
_f .RegisterConstructor ("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s","\u0054\u0079\u0070e\u0073",NewTypes );
_f .RegisterConstructor ("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s","\u0044e\u0066\u0061\u0075\u006c\u0074",NewDefault );
_f .RegisterConstructor ("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0063\u006f\u006e\u0074\u0065\u006e\u0074-\u0074y\u0070\u0065s","\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065",NewOverride );
};