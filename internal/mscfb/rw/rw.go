//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package rw ;import (_b "bytes";_cf "encoding/binary";_d "errors";_eb "fmt";_a "io";_e "io/ioutil";_dd "reflect";);func (_bga *Reader )ReadStringProperty (n uint32 )(string ,error ){if _fe :=_bga .align (4);_fe !=nil {return "",_fe ;};_ce :=make ([]byte ,n );
if _ade :=_cf .Read (_bga ,_cf .LittleEndian ,&_ce );_ade !=nil {return "",_ade ;};return string (_ce ),nil ;};func PopRightUI64 (v uint64 )(bool ,uint64 ){return (v &uint64 (1))==1,v >>1};func (_ddf *Reader )ReadProperty (a interface{})error {_f :=_dd .ValueOf (a );
for _f .Kind ()==_dd .Ptr {_f =_f .Elem ();};if !_f .IsValid (){return _eb .Errorf ("\u0076a\u006cu\u0065\u0020\u0069\u0073\u0020n\u006f\u0074 \u0076\u0061\u006c\u0069\u0064");};if _ba :=_ddf .align (int (_f .Type ().Size ()));_ba !=nil {return _ba ;};
if _gg :=_cf .Read (_ddf ,_cf .LittleEndian ,a );_gg !=nil {return _gg ;};return nil ;};func (_de *Writer )curPos ()int {return int (_de .Cap ())-_de .Len ()};func PushLeftUI32 (v uint32 ,flag bool )uint32 {v >>=1;if flag {v |=1<<31;};return v ;};func (_ca *Writer )align (_df int )error {return _ca .Skip ((_df -(_ca .Len ())%_df )%_df )};
func (_ge *Writer )WriteStringProperty (s string )error {_ge .align (4);_dda :=[]byte (s );if _fc :=_cf .Write (_ge ,_cf .LittleEndian ,&_dda );_fc !=nil {return _fc ;};return nil ;};func NewReader (b []byte )(*Reader ,error ){return &Reader {_b .NewReader (b )},nil };
func (_bd *Reader )align (_aa int )error {return _bd .skip ((_aa -_bd .curPos ()%_aa )%_aa )};func (_ac *Reader )ReadPairProperty (p interface{})error {if _cg :=_ac .align (4);_cg !=nil {return _cg ;};_ad :=_dd .ValueOf (p );for _ad .Kind ()==_dd .Ptr {_ad =_ad .Elem ();
};if !_ad .IsValid (){return _eb .Errorf ("\u0076a\u006cu\u0065\u0020\u0069\u0073\u0020n\u006f\u0074 \u0076\u0061\u006c\u0069\u0064");};if _db :=_cf .Read (_ac ,_cf .LittleEndian ,p );_db !=nil {return _db ;};return nil ;};func (_dg *Writer )WriteProperty (a interface{})error {if _cgc :=_dg .align (int (_dd .TypeOf (a ).Size ()));
_cgc !=nil {return _cgc ;};return _dg .WritePropertyNoAlign (a );};func (_eg *Writer )WritePropertyNoAlign (a interface{})error {if _dc :=_cf .Write (_eg ,_cf .LittleEndian ,a );_dc !=nil {return _dc ;};return nil ;};func PopRightUI32 (v uint32 )(bool ,uint32 ){return (v &uint32 (1))==1,v >>1};
func (_cb *Reader )curPos ()int {return int (_cb .Size ())-_cb .Len ()};func (_beg *Writer )Cap ()int {return cap (_beg ._dbb )};func (_gb *Writer )grow (_cfeb int )(int ,error ){_gef :=_gb .Len ();if _gef ==0&&_gb ._fg !=0{_gb .reset ();};if _ceb ,_bbb :=_gb .tryGrowByReslice (_cfeb );
_bbb {return _ceb ,nil ;};if _gb ._dbb ==nil &&_cfeb <=_add {_gb ._dbb =make ([]byte ,_cfeb ,_add );return 0,nil ;};_bdg :=cap (_gb ._dbb );if _cfeb <=_bdg /2-_gef {copy (_gb ._dbb ,_gb ._dbb [_gb ._fg :]);}else if _bdg > _fgg -_bdg -_cfeb {return 0,_ee ;
}else {_ccf :=_aff (2*_bdg +_cfeb );copy (_ccf ,_gb ._dbb [_gb ._fg :]);_gb ._dbb =_ccf ;};_gb ._fg =0;_gb ._dbb =_gb ._dbb [:_gef +_cfeb ];return _gef ,nil ;};func (_ffc *Writer )reset (){_ffc ._dbb =_ffc ._dbb [:0];_ffc ._fg =0};func (_gf *Writer )FillWithByte (fillSize int ,b byte )error {for _acaf :=0;
_acaf < fillSize ;_acaf ++{if _aag :=_gf .WritePropertyNoAlign (b );_aag !=nil {return _aag ;};};return nil ;};type Reader struct{*_b .Reader };var _ee =_d .New ("r\u0077.\u0057\u0072\u0069\u0074\u0065\u0072\u003a\u0020t\u006f\u006f\u0020\u006car\u0067\u0065");
func (_ed *Writer )Skip (n int )error {if n ==0{return nil ;};_ ,_ff :=_ed .Write (make ([]byte ,n ));return _ff ;};const _fgg =int (^uint (0)>>1);func _aff (_afe int )[]byte {defer func (){if recover ()!=nil {panic (_ee );};}();return make ([]byte ,_afe );
};func NewWriter ()*Writer {return &Writer {_dbb :[]byte {}}};func (_deb *Writer )Bytes ()[]byte {return _deb ._dbb };func (_cd *Reader )skip (_be int )error {_ ,_bg :=_a .CopyN (_e .Discard ,_cd ,int64 (_be ));if _bg !=nil {return _bg ;};return nil ;};
func (_cfe *Writer )Len ()int {return len (_cfe ._dbb )-_cfe ._fg };func PushLeftUI64 (v uint64 ,flag bool )uint64 {v >>=1;if flag {v |=1<<63;};return v ;};const _add =64;func (_ef *Writer )WriteTo (wTo _a .Writer )(_cc int64 ,_ccb error ){if _ddab :=_ef .Len ();
_ddab > 0{_gec ,_fa :=wTo .Write (_ef ._dbb [_ef ._fg :]);if _gec > _ddab {return 0,_d .New ("\u0072\u0077\u002e\u0057\u0072\u0069\u0074\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065\u0054\u006f\u003a\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0057\u0072\u0069t\u0065\u0020c\u006f\u0075\u006e\u0074");
};_ef ._fg +=_gec ;_cc =int64 (_gec );if _fa !=nil {return _cc ,_fa ;};if _gec !=_ddab {return _cc ,_a .ErrShortWrite ;};};_ef .reset ();return _cc ,nil ;};func (_ea *Writer )AlignLength (alignTo int )error {_af :=_ea .Len ()%alignTo ;if _af > 0{_ ,_bb :=_ea .Write (make ([]byte ,alignTo -_af ));
if _bb !=nil {return _bb ;};};return nil ;};func (_dgb *Writer )tryGrowByReslice (_dge int )(int ,bool ){if _bae :=len (_dgb ._dbb );_dge <=cap (_dgb ._dbb )-_bae {_dgb ._dbb =_dgb ._dbb [:_bae +_dge ];return _bae ,true ;};return 0,false ;};func (_bege *Writer )Write (p []byte )(_fcf int ,_ddff error ){_aca ,_dbd :=_bege .tryGrowByReslice (len (p ));
if !_dbd {var _dgc error ;_aca ,_dgc =_bege .grow (len (p ));if _dgc !=nil {return 0,_dgc ;};};return copy (_bege ._dbb [_aca :],p ),nil ;};func (_cfc *Writer )WriteByteAt (b byte ,off int )error {if off >=len (_cfc ._dbb ){return _d .New ("\u004f\u0075\u0074\u0020\u006f\u0066\u0020\u0062\u006f\u0075\u006e\u0064\u0073");
};_cfc ._dbb [off ]=b ;return nil ;};type Writer struct{_dbb []byte ;_fg int ;};