//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package testutils ;import (_cgd "crypto/md5";_ef "encoding/hex";_e "encoding/json";_fg "errors";_cga "fmt";_fdb "github.com/stretchr/testify/require";_bg "golang.org/x/image/font";_cc "golang.org/x/image/font/opentype";_af "golang.org/x/image/math/fixed";
_cd "image";_bf "image/color";_d "image/draw";_cb "image/png";_a "io";_fd "io/ioutil";_cg "log";_c "math";_gd "os";_f "os/exec";_cgf "path/filepath";_g "strings";_bd "sync";_ba "testing";_de "time";);func RunRenderTest (t *_ba .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ,currentHashMap *ReferenceMap ,refFile *ReferenceFile ){RunRenderOfficeTest (t ,pdfPath ,outputDir ,baselineRenderPath ,saveBaseline ,currentHashMap ,refFile ,"\u002em\u0073\u0077\u006f\u0072\u0064");
};func HashFile (file string )(string ,error ){_gf ,_geg :=_gd .Open (file );if _geg !=nil {return "",_geg ;};defer _gf .Close ();_ca :=_cgd .New ();if _ ,_geg =_a .Copy (_ca ,_gf );_geg !=nil {return "",_geg ;};return _ef .EncodeToString (_ca .Sum (nil )),nil ;
};func (_dcf *ReferenceMap )MarshalJSON ()([]byte ,error ){return _e .Marshal (_dcf ._ea )};func ReadFile (dirPath ,testName string ,createEmpty bool )(*ReferenceFile ,error ){if dirPath ==""&&createEmpty {return &ReferenceFile {Map :&ReferenceMap {}},nil ;
};if dirPath ==""{return nil ,_gd .ErrNotExist ;};_add :=_cgf .Join (dirPath ,testName +"\u005fr\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u002e\u006a\u0073\u006f\u006e");_be :=&ReferenceFile {_aa :_add };_ffd ,_dbe :=_gd .Open (_add );if _fg .Is (_dbe ,_gd .ErrNotExist )&&createEmpty {_be .Timestamp =_de .Now ().UTC ();
_be .Map =&ReferenceMap {};return _be ,nil ;};if _dbe !=nil {return nil ,_dbe ;};defer _ffd .Close ();if _fdba :=_e .NewDecoder (_ffd ).Decode (_be );_fdba !=nil {if _fdba .Error ()=="i\u006c\u006c\u0065\u0067\u0061\u006c \u0062\u0061\u0073\u0065\u0036\u0034 \u0064\u0061\u0074\u0061\u0020\u0061\u0074 \u0069\u006e\u0070\u0075\u0074\u0020\u0062\u0079\u0074\u0065 \u0030"&&createEmpty {return _be ,nil ;
};return nil ,_fdba ;};return _be ,nil ;};func _agb (_gcf *_ba .T ,_eff string )int64 {_eaa ,_dfgg :=_gd .Stat (_eff );_fdb .NoError (_gcf ,_dfgg );return _eaa .Size ();};type ReferenceEntry struct{Timestamp int64 `json:"timestamp"`;Value string `json:"value"`;
ResultSize int64 `json:"resultSize,omitempty"`;DiffPercent float64 `json:"diffPercent,omitempty"`;DiffTotal float64 `json:"diffValue,omitempty"`;Invalid bool `json:"markedInvalid,omitempty"`;};func (_ge *ReferenceMap )Keys ()(_gbg []string ){_gbg =make ([]string ,len (_ge ._ea ));
var _ab int ;for _bb :=range _ge ._ea {_gbg [_ab ]=_bb ;_ab ++;};return _gbg ;};type ReferenceFile struct{Timestamp _de .Time `json:"timestamp"`;Map *ReferenceMap `json:"map,omitempty"`;_aa string ;};func (_fb *ReferenceMap )Len ()int {return len (_fb ._ea )};
func CompareImages (img1 ,img2 _cd .Image )(bool ,error ){_dg :=img1 .Bounds ();_cf :=0;for _eag :=0;_eag < _dg .Size ().X ;_eag ++{for _dd :=0;_dd < _dg .Size ().Y ;_dd ++{_ged ,_agd ,_bab ,_ :=img1 .At (_eag ,_dd ).RGBA ();_def ,_ec ,_fc ,_ :=img2 .At (_eag ,_dd ).RGBA ();
if _ged !=_def ||_agd !=_ec ||_bab !=_fc {_cf ++;};};};_dbd :=float64 (_cf )/float64 (_dg .Dx ()*_dg .Dy ());if _dbd > 0.0001{_cga .Printf ("\u0064\u0069\u0066f \u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u0020\u0028\u0025\u0064\u0029\u000a",_dbd ,_cf );
return false ,nil ;};return true ,nil ;};func (_fgb *ReferenceFile )Update (currentMap *ReferenceMap )error {if _fgb ._aa ==""{return nil ;};_da :=_fgb .updateMap (currentMap );if _da ==0{return nil ;};_ad ,_adf :=_gd .OpenFile (_fgb ._aa ,_gd .O_CREATE |_gd .O_TRUNC |_gd .O_WRONLY ,0664);
if _adf !=nil {return _adf ;};defer _ad .Close ();_fgb .Timestamp =_de .Now ().UTC ();_cdg :=_e .NewEncoder (_ad );_cdg .SetIndent ("","\u0009");return _cdg .Encode (_fgb );};func (_gef *ReferenceMap )UnmarshalJSON (data []byte )error {return _e .Unmarshal (data ,&_gef ._ea )};
func CopyFile (src ,dst string )error {_baf ,_fa :=_gd .Open (src );if _fa !=nil {return _fa ;};defer _baf .Close ();_ac ,_fa :=_gd .Create (dst );if _fa !=nil {return _fa ;};defer _ac .Close ();_ ,_fa =_a .Copy (_ac ,_baf );return _fa ;};func (_ff *ReferenceMap )Write (key string ,entry ReferenceEntry ){_ff .Lock ();
defer _ff .Unlock ();if _ff ._ea ==nil {_ff ._ea =map[string ]ReferenceEntry {};};_ff ._ea [key ]=entry ;};type ReferenceMap struct{_bd .Mutex ;_ea map[string ]ReferenceEntry ;};func (_db *ReferenceFile )updateMap (_bdf *ReferenceMap )int {var _ae int ;
if _db .Map ._ea ==nil {_db .Map ._ea =map[string ]ReferenceEntry {};};for _dc ,_cce :=range _bdf ._ea {_gb ,_adg :=_db .Map ._ea [_dc ];if !_adg {_db .Map ._ea [_dc ]=_cce ;_ae ++;continue ;};if string (_gb .Value )!=string (_cce .Value ){_db .Map ._ea [_dc ]=_cce ;
_ae ++;};};for _afc :=range _db .Map ._ea {if _ ,_adfe :=_bdf ._ea [_afc ];!_adfe {delete (_db .Map ._ea ,_afc );_ae ++;};};return _ae ;};var (ErrRenderNotSupported =_fg .New ("\u0072\u0065\u006e\u0064\u0065r\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020\u0066\u0069\u006c\u0065\u0073 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u006e\u0020\u0074\u0068\u0069\u0073\u0020\u0073\u0079\u0073\u0074\u0065m");
ErrImageSizeNotMatch =_fg .New ("\u0069\u006d\u0061ge\u0020\u0073\u0069\u007a\u0065\u0073\u0020\u0064\u006f\u006e\u0027\u0074\u0020\u006d\u0061\u0074\u0063\u0068"););func CombinePNGFiles (file1 ,file2 string )(bool ,error ){_bec ,_dac :=ReadPNG (file1 );
if _dac !=nil {return false ,_dac ;};_fce ,_dac :=ReadPNG (file2 );if _dac !=nil {return false ,_dac ;};_dda :=_cd .Point {_bec .Bounds ().Dx (),0};_gce :=_cd .Rectangle {_dda ,_dda .Add (_fce .Bounds ().Size ())};_acd :=_cd .Rectangle {_cd .Point {0,0},_gce .Max };
_efc :=_cd .NewRGBA (_acd );_d .Draw (_efc ,_bec .Bounds (),_bec ,_cd .Point {0,0},_d .Src );_d .Draw (_efc ,_gce ,_fce ,_cd .Point {0,0},_d .Src );_ceg :=_cgf .Dir (file1 );_gfaf :=_g .TrimSuffix (_cgf .Base (file1 ),_cgf .Ext (file1 ));_fdg ,_dac :=_gd .Create (_ceg +"\u002f"+_gfaf +"\u002d\u0063\u006f\u006d\u0062\u0069\u006e\u0065\u0064\u002e\u0070\u006e\u0067");
if _dac !=nil {return false ,_dac ;};defer _fdg .Close ();if _eg :=_cb .Encode (_fdg ,_efc );_eg !=nil {return false ,_eg ;};return true ,nil ;};func RunRenderOfficeTest (t *_ba .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ,currentHashMap *ReferenceMap ,refFile *ReferenceFile ,postfix string ){_eeb :=_g .TrimSuffix (_cgf .Base (pdfPath ),_cgf .Ext (pdfPath ));
t .Run ("\u0072\u0065\u006e\u0064\u0065\u0072",func (_fccg *_ba .T ){_afcg :=_cgf .Join (outputDir ,_eeb );_dfg :=_afcg +"\u002d%\u0064\u002e\u0070\u006e\u0067";if _eec :=RenderPDFToPNGs (pdfPath ,0,_dfg );_eec !=nil {_fccg .Skip (_eec );};_gbgd :=_eeb +postfix ;
_eccd :=_cgf .Join (outputDir ,_gbgd );_dfga :=_eccd +"\u002d%\u0064\u002e\u0070\u006e\u0067";_gfb :=false ;if saveBaseline {_daa :=_cgf .Dir (pdfPath );_bc :=_cgf .Join (_daa ,_gbgd +"\u002e\u0070\u0064\u0066");if _ ,_aeb :=_gd .Stat (_bc );_aeb ==nil {_fccg .Logf ("\u0052e\u006e\u0064\u0065\u0072\u0020\u004d\u0053\u0020\u004f\u0066\u0066i\u0063\u0065\u0020\u0050\u0044\u0046\u003a\u0020\u0025\u0076",_bc );
if _bef :=RenderPDFToPNGs (_bc ,0,_dfga );_bef !=nil {_fccg .Skip (_bef );};_gfb =true ;};};for _aaa :=1;true ;_aaa ++{_dde :=_cga .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_afcg ,_aaa );_gcg :=_cgf .Join (baselineRenderPath ,_cga .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_eeb ,_aaa ));
if _ ,_dfa :=_gd .Stat (_dde );_dfa !=nil {break ;};_fccg .Logf ("\u0025\u0073",_gcg );if saveBaseline {_fccg .Logf ("\u0043\u006fp\u0079\u0069\u006eg\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_dde ,_gcg );_ccbc :=CopyFile (_dde ,_gcg );if _ccbc !=nil {_fccg .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_gcg ,_ccbc );
};if _gfb {_gge :=_cga .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_eccd ,_aaa );_daab :=_cgf .Join (baselineRenderPath ,_cga .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_gbgd ,_aaa ));_fccg .Logf ("\u0043\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u004d\u0053\u0020\u0057\u006f\u0072\u0064 \u0072e\u0073\u0075\u006c\u0074\u0073\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_gge ,_daab );
_faa :=CopyFile (_gge ,_daab );if _faa !=nil {_fccg .Logf ("\u0045\u0052\u0052\u004f\u0052\u0020\u0063\u006f\u0070\u0079\u0069\u006eg\u0020\u0074\u006f \u0025\u0073\u003a\u0020\u0025\u0076\u002c\u0020\u0068\u0061\u0076i\u006e\u0067\u0020d\u0069\u0066\u0066\u0065r\u0065\u006e\u0074\u0020\u0070\u0061\u0067\u0065\u0020\u0073\u0069\u007a\u0065\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u002c\u0020\u0072\u0065\u0070\u006c\u0061\u0063\u0069\u006eg\u0020\u0069\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0062\u006ca\u006e\u006b\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0069\u006e\u0073\u0074\u0065\u0061\u0064",_daab ,_faa );
if _dgg :=_ebg (_gcg ,_daab );_dgg !=nil {_fccg .Fatalf ("\u0045\u0052\u0052\u004f\u0052\u0020c\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u0065\u006d\u0070\u0074\u0079 \u0069\u006d\u0061\u0067\u0065\u0020\u0025s\u003a\u0020\u0025\u0076",_daab ,_dgg );
};};_fccg .Logf ("\u0043\u006fm\u0062\u0069\u006e\u0069\u006eg\u0020\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0077\u0069\u0074\u0068\u0020\u004d\u0053\u0020\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u0025\u0073\u0020\u0061\u006e\u0064\u0020\u0025\u0073",_gcg ,_daab );
_dbda ,_faa :=CombinePNGFiles (_gcg ,_daab );if _gd .IsNotExist (_faa ){_fccg .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_dbda {_fccg .Fatal ("\u0055n\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063\u006f\u006db\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0073");
};_fccg .Logf ("\u0043\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0069\u0066f \u0055n\u0069\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u0072\u0065\u0073\u0075l\u0074\u0073\u0020\u0077\u0069\u0074\u0068\u0020\u004d\u0053\u0020\u004f\u0066\u0066\u0069\u0063\u0065 \u0025\u0073\u0020\u0061\u006e\u0064\u0020\u0025\u0073",_gcg ,_daab );
_dbda ,_gba ,_cfd ,_cdd ,_faa :=CreatePNGDiff (_gcg ,_daab );if _faa !=nil &&_fg .Is (_faa ,ErrImageSizeNotMatch ){_fccg .Fatalf ("\u0045\u0072\u0072\u006fr\u0020\u006f\u006e\u0020\u0063\u0072\u0065\u0061\u0074\u0065 \u0050N\u0047\u0020\u0044\u0069\u0066\u0066\u003a \u0025\u0076",_faa );
};if _dbda {_fccg .Logf ("\u0049\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073\u000a",_gba );_fccg .Logf ("D\u0069\u0066\u0066\u0020Pe\u0072c\u0065\u006e\u0074\u003a\u0020%\u0032\u002e\u0066\u0025\u0025\u000a",_cfd );_fccg .Logf ("\u0044i\u0066f\u0020\u0054\u006f\u0074\u0061\u006c\u003a\u0020\u0025\u0066\u000a",_cdd );
_gfff :=_cgf .Base (_gba );_ggca ,_gcb :=currentHashMap .Read (_gfff );if _gcb &&(_ggca .DiffPercent < _cfd ||_ggca .DiffTotal < _cdd ){_fccg .Logf ("\u004e\u0065\u0077\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0068\u0061\u0076\u0069\u006e\u0067 h\u0069g\u0068\u0065\u0072\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006ec\u0065\u0020\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0066\u0020\u0061\u006e\u0064 \u0074\u006f\u0074\u0061\u006c\u0020\u0025\u0066\u000a",_cfd ,_cdd );
};_cgfg ,_ebeb :=HashFile (_gba );_fdb .NoError (_fccg ,_ebeb );_afcge :=_agb (_fccg ,_gba );if !_gcb ||_ggca .Value !=_cgfg ||_ggca .ResultSize !=_afcge ||_ggca .DiffPercent !=_cfd ||_ggca .DiffTotal !=_cdd {_bbg :=ReferenceEntry {Timestamp :_de .Now ().UTC ().Unix (),Value :_cgfg ,ResultSize :_afcge ,DiffPercent :_cfd ,DiffTotal :_cdd };
currentHashMap .Write (_gfff ,_bbg );if _ebeb =refFile .Update (currentHashMap );_ebeb !=nil {_fccg .Logf ("\u0055\u0070\u0064\u0061\u0074\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e\u0020f\u0069\u006c\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ebeb );
};};};};continue ;};_fccg .Run (_cga .Sprintf ("\u0070\u0061\u0067\u0065\u0025\u0064",_aaa ),func (_dga *_ba .T ){_dga .Logf ("\u0043o\u006dp\u0061\u0072\u0069\u006e\u0067 \u0025\u0073 \u0076\u0073\u0020\u0025\u0073",_dde ,_gcg );_ebf ,_cca :=ComparePNGFiles (_dde ,_gcg );
if _gd .IsNotExist (_cca ){_dga .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_ebf {_dga .Fatal ("\u0077\u0072\u006f\u006eg \u0070\u0061\u0067\u0065\u0020\u0072\u0065\u006e\u0064\u0065\u0072\u0065\u0064");
};});};});};func _dbb (_dacc *_cd .RGBA ,_fdeg string ,_gad string ,_fcc ,_aca int )error {_cdb ,_aec :=_fd .ReadFile (_fdeg );if _aec !=nil {return _aec ;};_gff ,_aec :=_cc .Parse (_cdb );if _aec !=nil {return _aec ;};_cac ,_aec :=_cc .NewFace (_gff ,&_cc .FaceOptions {Size :18,DPI :72,Hinting :_bg .HintingNone });
if _aec !=nil {return _aec ;};_cfc :=&_bg .Drawer {Dst :_dacc ,Src :_cd .NewUniform (_bf .RGBA {200,100,0,255}),Face :_cac ,Dot :_af .P (_fcc ,_aca )};_cfc .DrawString (_gad );return nil ;};func (_bga *ReferenceMap )Copy ()*ReferenceMap {_gg :=ReferenceMap {_ea :make (map[string ]ReferenceEntry ,len (_bga ._ea ))};
for _abd ,_gc :=range _bga ._ea {_gg ._ea [_abd ]=_gc ;};return &_gg ;};func ReadPNG (file string )(_cd .Image ,error ){_ag ,_cbg :=_gd .Open (file );if _cbg !=nil {return nil ,_cbg ;};defer _ag .Close ();return _cb .Decode (_ag );};func ComparePNGFiles (file1 ,file2 string )(bool ,error ){_eae ,_cbc :=HashFile (file1 );
if _cbc !=nil {return false ,_cbc ;};_gde ,_cbc :=HashFile (file2 );if _cbc !=nil {return false ,_cbc ;};if _eae ==_gde {return true ,nil ;};_dba ,_cbc :=ReadPNG (file1 );if _cbc !=nil {return false ,_cbc ;};_gfae ,_cbc :=ReadPNG (file2 );if _cbc !=nil {return false ,_cbc ;
};if _dba .Bounds ()!=_gfae .Bounds (){return false ,nil ;};return CompareImages (_dba ,_gfae );};func RenderPDFToPNGs (pdfPath string ,dpi int ,outpathTpl string )error {if dpi <=0{dpi =100;};if _ ,_baaf :=_f .LookPath ("\u0067\u0073");_baaf !=nil {return ErrRenderNotSupported ;
};return _f .Command ("\u0067\u0073","\u002d\u0073\u0044\u0045\u0056\u0049\u0043\u0045\u003d\u0070\u006e\u0067a\u006c\u0070\u0068\u0061","\u002d\u006f",outpathTpl ,_cga .Sprintf ("\u002d\u0072\u0025\u0064",dpi ),pdfPath ).Run ();};func _fca (_ddaf ,_ebc _cd .Rectangle )bool {return _ddaf .Min .X ==_ebc .Min .X &&_ddaf .Min .Y ==_ebc .Min .Y &&_ddaf .Max .X ==_ebc .Max .X &&_ddaf .Max .Y ==_ebc .Max .Y ;
};func _gcc (_afcb ,_fde _bf .Color )bool {_defb ,_fdbe ,_ecd ,_ee :=_afcb .RGBA ();_bgc ,_ecc ,_fge ,_aab :=_fde .RGBA ();return _defb ==_bgc &&_fdbe ==_ecc &&_ecd ==_fge &&_ee ==_aab ;};func CreatePNGDiff (src ,dst string )(bool ,string ,float64 ,float64 ,error ){_df ,_abb :=ReadPNG (src );
if _abb !=nil {return false ,"",0,0,_abb ;};_fe ,_abb :=ReadPNG (dst );if _abb !=nil {return false ,"",0,0,_abb ;};_caf :=_df .Bounds ();_gcec :=_fe .Bounds ();if !_fca (_caf ,_gcec ){if _c .Abs (float64 (_caf .Max .X )-float64 (_gcec .Max .X ))> 1{_cg .Printf ("S\u006f\u0075\u0072\u0063\u0065\u0020b\u006f\u0075\u006e\u0064\u0073\u003a \u0025\u0076\u003b\u0020\u0044\u0065\u0073t\u0020\u0062\u006f\u0075\u006e\u0064\u0073\u003a\u0020\u0025v\u000a",_caf ,_gcec );
return false ,"",0,0,ErrImageSizeNotMatch ;};};_cba :=_cd .NewRGBA (_cd .Rect (0,0,_caf .Max .X ,_caf .Max .Y ));var (_ed float64 ;_acdd float64 ;);for _efg :=_caf .Min .Y ;_efg < _caf .Max .Y ;_efg ++{for _aef :=_caf .Min .X ;_aef < _caf .Max .X ;_aef ++{_fcf ,_efge ,_ccb ,_fae :=_df .At (_aef ,_efg ).RGBA ();
_bfe ,_gbd ,_cbe ,_fac :=_fe .At (_aef ,_efg ).RGBA ();_cba .Set (_aef ,_efg ,_bf .RGBA {uint8 (_bfe ),uint8 (_gbd ),uint8 (_cbe ),64});_baa :=_fae ==0x00&&_fcf ==0x00&&_efge ==0x00&&_ccb ==0x00&&_bfe ==0xFFFF&&_gbd ==0xFFFF&&_cbe ==0xFFFF;if !_baa &&!_gcc (_df .At (_aef ,_efg ),_fe .At (_aef ,_efg )){_cba .Set (_aef ,_efg ,_bf .RGBA {uint8 (_fcf ),uint8 (_efge ),uint8 (_ccb ),uint8 (_fae )});
_fea :=float64 (_fcf )+float64 (_efge )+float64 (_ccb )+float64 (_fae )-float64 (_bfe )+float64 (_gbd )+float64 (_cbe )+float64 (_fac );_aea :=_c .Sqrt (_c .Pow (_fea /float64 (_caf .Dx ()*_caf .Dy ()),2));_acdd +=_aea ;_ed ++;};};};_eab :=_ed /float64 (_caf .Dx ()*_caf .Dy ())*100;
_dca :=_cgf .Dir (src );_faef :=_g .TrimSuffix (_cgf .Base (src ),_cgf .Ext (src ));_dfe ,_abb :=_gd .Create (_dca +"\u002f"+_faef +"\u002dd\u0069\u0066\u0066\u002e\u0070\u006eg");if _abb !=nil {return false ,"",0,0,_abb ;};defer _dfe .Close ();_ggc :=_g .Replace (_dca ,"\u0072\u0065\u006e\u0064\u0065\u0072","\u0066\u006f\u006et\u0073",1)+"\u002f\u0043\u0061l\u0069\u0062\u0072\u0069\u002e\u0074\u0074\u0066";
_cdf :=_cga .Sprintf ("\u0044\u0069f\u0066\u0065\u0072e\u006e\u0063\u0065\u003a\u0020\u0025\u0066\u0025\u0025",_eab );_abb =_dbb (_cba ,_ggc ,_cdf ,15,22);if _abb !=nil {return false ,"",0,0,_abb ;};_cdf =_cga .Sprintf ("T\u006ft\u0061\u006c\u0020\u0044\u0069\u0066\u0066\u0065r\u0065\u006e\u0063\u0065: \u0025\u0066",_acdd );
_abb =_dbb (_cba ,_ggc ,_cdf ,15,44);if _abb !=nil {return false ,"",0,0,_abb ;};if _ga :=_cb .Encode (_dfe ,_cba );_ga !=nil {return false ,"",0,0,_ga ;};return true ,_dfe .Name (),_eab ,_acdd ,nil ;};func _ebg (_bgg ,_cafe string )error {_fad ,_face :=_gd .Open (_bgg );
if _face !=nil {return _face ;};defer _fad .Close ();_ccf ,_ ,_face :=_cd .DecodeConfig (_fad );if _face !=nil {panic (_face );};_aee :=_cd .NewRGBA (_cd .Rect (0,0,_ccf .Width ,_ccf .Height ));_efgec ,_face :=_gd .Create (_cafe );if _face !=nil {return _face ;
};defer _efgec .Close ();_face =_cb .Encode (_efgec ,_aee );if _face !=nil {return _face ;};return nil ;};func (_abf *ReferenceMap )Read (key string )(ReferenceEntry ,bool ){_abf .Lock ();defer _abf .Unlock ();if _abf ._ea ==nil {return ReferenceEntry {},false ;
};_eb ,_gbf :=_abf ._ea [key ];return _eb ,_gbf ;};