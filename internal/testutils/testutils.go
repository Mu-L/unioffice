//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package testutils ;import (_ab "crypto/md5";_aae "encoding/hex";_a "encoding/json";_dg "errors";_fa "fmt";_b "github.com/stretchr/testify/require";_ga "golang.org/x/image/font";_fcg "golang.org/x/image/font/opentype";_bf "golang.org/x/image/math/fixed";
_ad "image";_fe "image/color";_ce "image/draw";_d "image/png";_fc "io";_e "io/ioutil";_f "log";_cg "math";_ee "os";_aa "os/exec";_fd "path/filepath";_g "strings";_ed "sync";_ac "testing";_ge "time";);func (_ff *ReferenceFile )updateMap (_eg *ReferenceMap )int {var _cf int ;
if _ff .Map ._eb ==nil {_ff .Map ._eb =map[string ]ReferenceEntry {};};for _fg ,_bg :=range _eg ._eb {_dd ,_ba :=_ff .Map ._eb [_fg ];if !_ba {_ff .Map ._eb [_fg ]=_bg ;_cf ++;continue ;};if string (_dd .Value )!=string (_bg .Value ){_ff .Map ._eb [_fg ]=_bg ;
_cf ++;};};for _af :=range _ff .Map ._eb {if _ ,_gg :=_eg ._eb [_af ];!_gg {delete (_ff .Map ._eb ,_af );_cf ++;};};return _cf ;};func (_bc *ReferenceMap )Write (key string ,entry ReferenceEntry ){_bc .Lock ();defer _bc .Unlock ();if _bc ._eb ==nil {_bc ._eb =map[string ]ReferenceEntry {};
};_bc ._eb [key ]=entry ;};func (_eeg *ReferenceFile )Update (currentMap *ReferenceMap )error {if _eeg ._fdf ==""{return nil ;};_ae :=_eeg .updateMap (currentMap );if _ae ==0{return nil ;};_ec ,_eda :=_ee .OpenFile (_eeg ._fdf ,_ee .O_CREATE |_ee .O_TRUNC |_ee .O_WRONLY ,0664);
if _eda !=nil {return _eda ;};defer _ec .Close ();_eeg .Timestamp =_ge .Now ().UTC ();_cd :=_a .NewEncoder (_ec );_cd .SetIndent ("","\u0009");return _cd .Encode (_eeg );};type ReferenceMap struct{_ed .Mutex ;_eb map[string ]ReferenceEntry ;};func CopyFile (src ,dst string )error {_ef ,_aed :=_ee .Open (src );
if _aed !=nil {return _aed ;};defer _ef .Close ();_efe ,_aed :=_ee .Create (dst );if _aed !=nil {return _aed ;};defer _efe .Close ();_ ,_aed =_fc .Copy (_efe ,_ef );return _aed ;};func CompareImages (img1 ,img2 _ad .Image )(bool ,error ){_cgg :=img1 .Bounds ();
_fb :=0;for _cb :=0;_cb < _cgg .Size ().X ;_cb ++{for _da :=0;_da < _cgg .Size ().Y ;_da ++{_ffca ,_afe ,_aef ,_ :=img1 .At (_cb ,_da ).RGBA ();_ffcb ,_eaa ,_bgd ,_ :=img2 .At (_cb ,_da ).RGBA ();if _ffca !=_ffcb ||_afe !=_eaa ||_aef !=_bgd {_fb ++;};};
};_bdb :=float64 (_fb )/float64 (_cgg .Dx ()*_cgg .Dy ());if _bdb > 0.0001{_fa .Printf ("\u0064\u0069\u0066f \u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u0020\u0028\u0025\u0064\u0029\u000a",_bdb ,_fb );return false ,nil ;};
return true ,nil ;};func ReadFile (dirPath ,testName string ,createEmpty bool )(*ReferenceFile ,error ){if dirPath ==""&&createEmpty {return &ReferenceFile {Map :&ReferenceMap {}},nil ;};if dirPath ==""{return nil ,_ee .ErrNotExist ;};_ca :=_fd .Join (dirPath ,testName +"\u005fr\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u002e\u006a\u0073\u006f\u006e");
_cc :=&ReferenceFile {_fdf :_ca };_cee ,_eagb :=_ee .Open (_ca );if _dg .Is (_eagb ,_ee .ErrNotExist )&&createEmpty {_cc .Timestamp =_ge .Now ().UTC ();_cc .Map =&ReferenceMap {};return _cc ,nil ;};if _eagb !=nil {return nil ,_eagb ;};defer _cee .Close ();
if _aca :=_a .NewDecoder (_cee ).Decode (_cc );_aca !=nil {if _aca .Error ()=="i\u006c\u006c\u0065\u0067\u0061\u006c \u0062\u0061\u0073\u0065\u0036\u0034 \u0064\u0061\u0074\u0061\u0020\u0061\u0074 \u0069\u006e\u0070\u0075\u0074\u0020\u0062\u0079\u0074\u0065 \u0030"&&createEmpty {return _cc ,nil ;
};return nil ,_aca ;};return _cc ,nil ;};func (_aga *ReferenceMap )Read (key string )(ReferenceEntry ,bool ){_aga .Lock ();defer _aga .Unlock ();if _aga ._eb ==nil {return ReferenceEntry {},false ;};_be ,_eag :=_aga ._eb [key ];return _be ,_eag ;};func _geg (_cce *_ad .RGBA ,_feg string ,_dab string ,_ece ,_ead int )error {_bag ,_abf :=_e .ReadFile (_feg );
if _abf !=nil {return _abf ;};_baf ,_abf :=_fcg .Parse (_bag );if _abf !=nil {return _abf ;};_gba ,_abf :=_fcg .NewFace (_baf ,&_fcg .FaceOptions {Size :18,DPI :72,Hinting :_ga .HintingNone });if _abf !=nil {return _abf ;};_fgf :=&_ga .Drawer {Dst :_cce ,Src :_ad .NewUniform (_fe .RGBA {200,100,0,255}),Face :_gba ,Dot :_bf .P (_ece ,_ead )};
_fgf .DrawString (_dab );return nil ;};func CombinePNGFiles (file1 ,file2 string )(bool ,error ){_gged ,_cdc :=ReadPNG (file1 );if _cdc !=nil {return false ,_cdc ;};_gga ,_cdc :=ReadPNG (file2 );if _cdc !=nil {return false ,_cdc ;};_bcd :=_ad .Point {_gged .Bounds ().Dx (),0};
_ged :=_ad .Rectangle {_bcd ,_bcd .Add (_gga .Bounds ().Size ())};_feb :=_ad .Rectangle {_ad .Point {0,0},_ged .Max };_cef :=_ad .NewRGBA (_feb );_ce .Draw (_cef ,_gged .Bounds (),_gged ,_ad .Point {0,0},_ce .Src );_ce .Draw (_cef ,_ged ,_gga ,_ad .Point {0,0},_ce .Src );
_aea :=_fd .Dir (file1 );_fge :=_g .TrimSuffix (_fd .Base (file1 ),_fd .Ext (file1 ));_egg ,_cdc :=_ee .Create (_aea +"\u002f"+_fge +"\u002d\u0063\u006f\u006d\u0062\u0069\u006e\u0065\u0064\u002e\u0070\u006e\u0067");if _cdc !=nil {return false ,_cdc ;};
defer _egg .Close ();if _bacc :=_d .Encode (_egg ,_cef );_bacc !=nil {return false ,_bacc ;};return true ,nil ;};func ComparePNGFiles (file1 ,file2 string )(bool ,error ){_gbb ,_gge :=HashFile (file1 );if _gge !=nil {return false ,_gge ;};_bea ,_gge :=HashFile (file2 );
if _gge !=nil {return false ,_gge ;};if _gbb ==_bea {return true ,nil ;};_eca ,_gge :=ReadPNG (file1 );if _gge !=nil {return false ,_gge ;};_bb ,_gge :=ReadPNG (file2 );if _gge !=nil {return false ,_gge ;};if _eca .Bounds ()!=_bb .Bounds (){return false ,nil ;
};return CompareImages (_eca ,_bb );};type ReferenceFile struct{Timestamp _ge .Time `json:"timestamp"`;Map *ReferenceMap `json:"map,omitempty"`;_fdf string ;};func (_bd *ReferenceMap )UnmarshalJSON (data []byte )error {return _a .Unmarshal (data ,&_bd ._eb )};
func (_adc *ReferenceMap )Copy ()*ReferenceMap {_ega :=ReferenceMap {_eb :make (map[string ]ReferenceEntry ,len (_adc ._eb ))};for _bee ,_cde :=range _adc ._eb {_ega ._eb [_bee ]=_cde ;};return &_ega ;};type ReferenceEntry struct{Timestamp int64 `json:"timestamp"`;
Value string `json:"value"`;ResultSize int64 `json:"resultSize,omitempty"`;DiffPercent float64 `json:"diffPercent,omitempty"`;DiffTotal float64 `json:"diffValue,omitempty"`;Invalid bool `json:"markedInvalid,omitempty"`;};func _dbe (_cga ,_fddg string )error {_ccea ,_aee :=_ee .Open (_cga );
if _aee !=nil {return _aee ;};defer _ccea .Close ();_aeea ,_ ,_aee :=_ad .DecodeConfig (_ccea );if _aee !=nil {panic (_aee );};_caa :=_ad .NewRGBA (_ad .Rect (0,0,_aeea .Width ,_aeea .Height ));_bce ,_aee :=_ee .Create (_fddg );if _aee !=nil {return _aee ;
};defer _bce .Close ();_aee =_d .Encode (_bce ,_caa );if _aee !=nil {return _aee ;};return nil ;};func _gc (_fdd ,_ecf _fe .Color )bool {_dgb ,_cdd ,_ebc ,_gea :=_fdd .RGBA ();_ceea ,_eba ,_bcb ,_gfd :=_ecf .RGBA ();return _dgb ==_ceea &&_cdd ==_eba &&_ebc ==_bcb &&_gea ==_gfd ;
};func _gfbb (_eaf *_ac .T ,_cba string )int64 {_eceg ,_ced :=_ee .Stat (_cba );_b .NoError (_eaf ,_ced );return _eceg .Size ();};func RenderPDFToPNGs (pdfPath string ,dpi int ,outpathTpl string )error {if dpi <=0{dpi =100;};if _ ,_agf :=_aa .LookPath ("\u0067\u0073");
_agf !=nil {return ErrRenderNotSupported ;};return _aa .Command ("\u0067\u0073","\u002d\u0073\u0044\u0045\u0056\u0049\u0043\u0045\u003d\u0070\u006e\u0067a\u006c\u0070\u0068\u0061","\u002d\u006f",outpathTpl ,_fa .Sprintf ("\u002d\u0072\u0025\u0064",dpi ),pdfPath ).Run ();
};func ReadPNG (file string )(_ad .Image ,error ){_df ,_cag :=_ee .Open (file );if _cag !=nil {return nil ,_cag ;};defer _df .Close ();return _d .Decode (_df );};func _ecdg (_ebg ,_gaf _ad .Rectangle )bool {return _ebg .Min .X ==_gaf .Min .X &&_ebg .Min .Y ==_gaf .Min .Y &&_ebg .Max .X ==_gaf .Max .X &&_ebg .Max .Y ==_gaf .Max .Y ;
};func (_de *ReferenceMap )Len ()int {return len (_de ._eb )};func RunRenderOfficeTest (t *_ac .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ,currentHashMap *ReferenceMap ,refFile *ReferenceFile ,postfix string ){_aaf :=_g .TrimSuffix (_fd .Base (pdfPath ),_fd .Ext (pdfPath ));
t .Run ("\u0072\u0065\u006e\u0064\u0065\u0072",func (_bdc *_ac .T ){_bfa :=_fd .Join (outputDir ,_aaf );_dbb :=_bfa +"\u002d%\u0064\u002e\u0070\u006e\u0067";if _ebgf :=RenderPDFToPNGs (pdfPath ,0,_dbb );_ebgf !=nil {_bdc .Skip (_ebgf );};_cea :=_aaf +postfix ;
_ebf :=_fd .Join (outputDir ,_cea );_adcb :=_ebf +"\u002d%\u0064\u002e\u0070\u006e\u0067";_cfe :=false ;if saveBaseline {_ebfd :=_fd .Dir (pdfPath );_adad :=_fd .Join (_ebfd ,_cea +"\u002e\u0070\u0064\u0066");if _ ,_bda :=_ee .Stat (_adad );_bda ==nil {_bdc .Logf ("\u0052e\u006e\u0064\u0065\u0072\u0020\u004d\u0053\u0020\u004f\u0066\u0066i\u0063\u0065\u0020\u0050\u0044\u0046\u003a\u0020\u0025\u0076",_adad );
if _cdeg :=RenderPDFToPNGs (_adad ,0,_adcb );_cdeg !=nil {_bdc .Skip (_cdeg );};_cfe =true ;};};for _eec :=1;true ;_eec ++{_gbaf :=_fa .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_bfa ,_eec );_gfe :=_fd .Join (baselineRenderPath ,_fa .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_aaf ,_eec ));
if _ ,_cebg :=_ee .Stat (_gbaf );_cebg !=nil {break ;};_bdc .Logf ("\u0025\u0073",_gfe );if saveBaseline {_bdc .Logf ("\u0043\u006fp\u0079\u0069\u006eg\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_gbaf ,_gfe );_gee :=CopyFile (_gbaf ,_gfe );
if _gee !=nil {_bdc .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_gfe ,_gee );};if _cfe {_fcgb :=_fa .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_ebf ,_eec );
_fbf :=_fd .Join (baselineRenderPath ,_fa .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_cea ,_eec ));_bdc .Logf ("\u0043\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u004d\u0053\u0020\u0057\u006f\u0072\u0064 \u0072e\u0073\u0075\u006c\u0074\u0073\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_fcgb ,_fbf );
_ggd :=CopyFile (_fcgb ,_fbf );if _ggd !=nil {_bdc .Logf ("\u0045\u0052\u0052\u004f\u0052\u0020\u0063\u006f\u0070\u0079\u0069\u006eg\u0020\u0074\u006f \u0025\u0073\u003a\u0020\u0025\u0076\u002c\u0020\u0068\u0061\u0076i\u006e\u0067\u0020d\u0069\u0066\u0066\u0065r\u0065\u006e\u0074\u0020\u0070\u0061\u0067\u0065\u0020\u0073\u0069\u007a\u0065\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u002c\u0020\u0072\u0065\u0070\u006c\u0061\u0063\u0069\u006eg\u0020\u0069\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0062\u006ca\u006e\u006b\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0069\u006e\u0073\u0074\u0065\u0061\u0064",_fbf ,_ggd );
if _bbe :=_dbe (_gfe ,_fbf );_bbe !=nil {_bdc .Fatalf ("\u0045\u0052\u0052\u004f\u0052\u0020c\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u0065\u006d\u0070\u0074\u0079 \u0069\u006d\u0061\u0067\u0065\u0020\u0025s\u003a\u0020\u0025\u0076",_fbf ,_bbe );
};};_bdc .Logf ("\u0043\u006fm\u0062\u0069\u006e\u0069\u006eg\u0020\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0077\u0069\u0074\u0068\u0020\u004d\u0053\u0020\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u0025\u0073\u0020\u0061\u006e\u0064\u0020\u0025\u0073",_gfe ,_fbf );
_bfg ,_ggd :=CombinePNGFiles (_gfe ,_fbf );if _ee .IsNotExist (_ggd ){_bdc .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_bfg {_bdc .Fatal ("\u0055n\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063\u006f\u006db\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0073");
};_bdc .Logf ("\u0043\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0069\u0066f \u0055n\u0069\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u0072\u0065\u0073\u0075l\u0074\u0073\u0020\u0077\u0069\u0074\u0068\u0020\u004d\u0053\u0020\u004f\u0066\u0066\u0069\u0063\u0065 \u0025\u0073\u0020\u0061\u006e\u0064\u0020\u0025\u0073",_gfe ,_fbf );
_bfg ,_ecc ,_cagd ,_bde ,_ggd :=CreatePNGDiff (_gfe ,_fbf );if _ggd !=nil &&_dg .Is (_ggd ,ErrImageSizeNotMatch ){_bdc .Fatalf ("\u0045\u0072\u0072\u006fr\u0020\u006f\u006e\u0020\u0063\u0072\u0065\u0061\u0074\u0065 \u0050N\u0047\u0020\u0044\u0069\u0066\u0066\u003a \u0025\u0076",_ggd );
};if _bfg {_bdc .Logf ("\u0049\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073\u000a",_ecc );_bdc .Logf ("D\u0069\u0066\u0066\u0020Pe\u0072c\u0065\u006e\u0074\u003a\u0020%\u0032\u002e\u0066\u0025\u0025\u000a",_cagd );_bdc .Logf ("\u0044i\u0066f\u0020\u0054\u006f\u0074\u0061\u006c\u003a\u0020\u0025\u0066\u000a",_bde );
_afc :=_fd .Base (_ecc );_ggc ,_dgg :=currentHashMap .Read (_afc );if _dgg &&(_ggc .DiffPercent < _cagd ||_ggc .DiffTotal < _bde ){_bdc .Logf ("\u004e\u0065\u0077\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0068\u0061\u0076\u0069\u006e\u0067 h\u0069g\u0068\u0065\u0072\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006ec\u0065\u0020\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0066\u0020\u0061\u006e\u0064 \u0074\u006f\u0074\u0061\u006c\u0020\u0025\u0066\u000a",_cagd ,_bde );
};_afde ,_cad :=HashFile (_ecc );_b .NoError (_bdc ,_cad );_ccc :=_gfbb (_bdc ,_ecc );if !_dgg ||_ggc .Value !=_afde ||_ggc .ResultSize !=_ccc ||_ggc .DiffPercent !=_cagd ||_ggc .DiffTotal !=_bde {_deb :=ReferenceEntry {Timestamp :_ge .Now ().UTC ().Unix (),Value :_afde ,ResultSize :_ccc ,DiffPercent :_cagd ,DiffTotal :_bde };
currentHashMap .Write (_afc ,_deb );if _cad =refFile .Update (currentHashMap );_cad !=nil {_bdc .Logf ("\u0055\u0070\u0064\u0061\u0074\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e\u0020f\u0069\u006c\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cad );
};};};};continue ;};_bdc .Run (_fa .Sprintf ("\u0070\u0061\u0067\u0065\u0025\u0064",_eec ),func (_acb *_ac .T ){_acb .Logf ("\u0043o\u006dp\u0061\u0072\u0069\u006e\u0067 \u0025\u0073 \u0076\u0073\u0020\u0025\u0073",_gbaf ,_gfe );_acg ,_bgb :=ComparePNGFiles (_gbaf ,_gfe );
if _ee .IsNotExist (_bgb ){_acb .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_acg {_acb .Fatal ("\u0077\u0072\u006f\u006eg \u0070\u0061\u0067\u0065\u0020\u0072\u0065\u006e\u0064\u0065\u0072\u0065\u0064");
};});};});};var (ErrRenderNotSupported =_dg .New ("\u0072\u0065\u006e\u0064\u0065r\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020\u0066\u0069\u006c\u0065\u0073 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u006e\u0020\u0074\u0068\u0069\u0073\u0020\u0073\u0079\u0073\u0074\u0065m");
ErrImageSizeNotMatch =_dg .New ("\u0069\u006d\u0061ge\u0020\u0073\u0069\u007a\u0065\u0073\u0020\u0064\u006f\u006e\u0027\u0074\u0020\u006d\u0061\u0074\u0063\u0068"););func (_agc *ReferenceMap )MarshalJSON ()([]byte ,error ){return _a .Marshal (_agc ._eb )};
func RunRenderTest (t *_ac .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ,currentHashMap *ReferenceMap ,refFile *ReferenceFile ){RunRenderOfficeTest (t ,pdfPath ,outputDir ,baselineRenderPath ,saveBaseline ,currentHashMap ,refFile ,"\u002em\u0073\u0077\u006f\u0072\u0064");
};func CreatePNGDiff (src ,dst string )(bool ,string ,float64 ,float64 ,error ){_ddb ,_ecd :=ReadPNG (src );if _ecd !=nil {return false ,"",0,0,_ecd ;};_bcg ,_ecd :=ReadPNG (dst );if _ecd !=nil {return false ,"",0,0,_ecd ;};_ggg :=_ddb .Bounds ();_ceg :=_bcg .Bounds ();
if !_ecdg (_ggg ,_ceg ){if _cg .Abs (float64 (_ggg .Max .X )-float64 (_ceg .Max .X ))> 1{_f .Printf ("S\u006f\u0075\u0072\u0063\u0065\u0020b\u006f\u0075\u006e\u0064\u0073\u003a \u0025\u0076\u003b\u0020\u0044\u0065\u0073t\u0020\u0062\u006f\u0075\u006e\u0064\u0073\u003a\u0020\u0025v\u000a",_ggg ,_ceg );
return false ,"",0,0,ErrImageSizeNotMatch ;};};_gfb :=_ad .NewRGBA (_ad .Rect (0,0,_ggg .Max .X ,_ggg .Max .Y ));var (_adf float64 ;_cac float64 ;);for _cbf :=_ggg .Min .Y ;_cbf < _ggg .Max .Y ;_cbf ++{for _gae :=_ggg .Min .X ;_gae < _ggg .Max .X ;_gae ++{_cdg ,_gbf ,_aff ,_fed :=_ddb .At (_gae ,_cbf ).RGBA ();
_efc ,_ggb ,_bge ,_beb :=_bcg .At (_gae ,_cbf ).RGBA ();_gfb .Set (_gae ,_cbf ,_fe .RGBA {uint8 (_efc ),uint8 (_ggb ),uint8 (_bge ),64});_beg :=_fed ==0x00&&_cdg ==0x00&&_gbf ==0x00&&_aff ==0x00&&_efc ==0xFFFF&&_ggb ==0xFFFF&&_bge ==0xFFFF;if !_beg &&!_gc (_ddb .At (_gae ,_cbf ),_bcg .At (_gae ,_cbf )){_gfb .Set (_gae ,_cbf ,_fe .RGBA {uint8 (_cdg ),uint8 (_gbf ),uint8 (_aff ),uint8 (_fed )});
_efg :=float64 (_cdg )+float64 (_gbf )+float64 (_aff )+float64 (_fed )-float64 (_efc )+float64 (_ggb )+float64 (_bge )+float64 (_beb );_fcc :=_cg .Sqrt (_cg .Pow (_efg /float64 (_ggg .Dx ()*_ggg .Dy ()),2));_cac +=_fcc ;_adf ++;};};};_ceb :=_adf /float64 (_ggg .Dx ()*_ggg .Dy ())*100;
_gad :=_fd .Dir (src );_cefb :=_g .TrimSuffix (_fd .Base (src ),_fd .Ext (src ));_aec ,_ecd :=_ee .Create (_gad +"\u002f"+_cefb +"\u002dd\u0069\u0066\u0066\u002e\u0070\u006eg");if _ecd !=nil {return false ,"",0,0,_ecd ;};defer _aec .Close ();_dac :=_g .Replace (_gad ,"\u0072\u0065\u006e\u0064\u0065\u0072","\u0066\u006f\u006et\u0073",1)+"\u002f\u0043\u0061l\u0069\u0062\u0072\u0069\u002e\u0074\u0074\u0066";
_afd :=_fa .Sprintf ("\u0044\u0069f\u0066\u0065\u0072e\u006e\u0063\u0065\u003a\u0020\u0025\u0066\u0025\u0025",_ceb );_ecd =_geg (_gfb ,_dac ,_afd ,15,22);if _ecd !=nil {return false ,"",0,0,_ecd ;};_afd =_fa .Sprintf ("T\u006ft\u0061\u006c\u0020\u0044\u0069\u0066\u0066\u0065r\u0065\u006e\u0063\u0065: \u0025\u0066",_cac );
_ecd =_geg (_gfb ,_dac ,_afd ,15,44);if _ecd !=nil {return false ,"",0,0,_ecd ;};if _ccb :=_d .Encode (_aec ,_gfb );_ccb !=nil {return false ,"",0,0,_ccb ;};return true ,_aec .Name (),_ceb ,_cac ,nil ;};func (_ffc *ReferenceMap )Keys ()(_ea []string ){_ea =make ([]string ,len (_ffc ._eb ));
var _gd int ;for _ag :=range _ffc ._eb {_ea [_gd ]=_ag ;_gd ++;};return _ea ;};func HashFile (file string )(string ,error ){_adb ,_ffb :=_ee .Open (file );if _ffb !=nil {return "",_ffb ;};defer _adb .Close ();_ggf :=_ab .New ();if _ ,_ffb =_fc .Copy (_ggf ,_adb );
_ffb !=nil {return "",_ffb ;};return _aae .EncodeToString (_ggf .Sum (nil )),nil ;};