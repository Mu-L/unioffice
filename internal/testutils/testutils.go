//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package testutils ;import (_eeb "crypto/md5";_dd "encoding/hex";_c "encoding/json";_cf "errors";_de "fmt";_ab "github.com/stretchr/testify/require";_eg "golang.org/x/image/font";_db "golang.org/x/image/font/opentype";_bf "golang.org/x/image/math/fixed";
_cd "image";_fd "image/color";_ee "image/draw";_faf "image/png";_g "io";_fa "io/ioutil";_aa "log";_eb "math";_eeg "os";_e "os/exec";_cdf "path/filepath";_a "strings";_b "sync";_d "testing";_ec "time";);func (_ed *ReferenceFile )Update (currentMap *ReferenceMap )error {if _ed ._ga ==""{return nil ;
};_egg :=_ed .updateMap (currentMap );if _egg ==0{return nil ;};_fc ,_da :=_eeg .OpenFile (_ed ._ga ,_eeg .O_CREATE |_eeg .O_TRUNC |_eeg .O_WRONLY ,0664);if _da !=nil {return _da ;};defer _fc .Close ();_ed .Timestamp =_ec .Now ().UTC ();_df :=_c .NewEncoder (_fc );
_df .SetIndent ("","\u0009");return _df .Encode (_ed );};func (_eec *ReferenceMap )Read (key string )(ReferenceEntry ,bool ){_eec .Lock ();defer _eec .Unlock ();if _eec ._ag ==nil {return ReferenceEntry {},false ;};_eed ,_bc :=_eec ._ag [key ];return _eed ,_bc ;
};func (_ba *ReferenceMap )Copy ()*ReferenceMap {_dgd :=ReferenceMap {_ag :make (map[string ]ReferenceEntry ,len (_ba ._ag ))};for _cfd ,_aca :=range _ba ._ag {_dgd ._ag [_cfd ]=_aca ;};return &_dgd ;};func ReadPNG (file string )(_cd .Image ,error ){_bfc ,_dae :=_eeg .Open (file );
if _dae !=nil {return nil ,_dae ;};defer _bfc .Close ();return _faf .Decode (_bfc );};func _fbg (_eggd *_d .T ,_cga string )int64 {_dag ,_ccf :=_eeg .Stat (_cga );_ab .NoError (_eggd ,_ccf );return _dag .Size ();};func CreatePNGDiff (src ,dst string )(bool ,string ,float64 ,float64 ,error ){_afg ,_dbg :=ReadPNG (src );
if _dbg !=nil {return false ,"",0,0,_dbg ;};_dc ,_dbg :=ReadPNG (dst );if _dbg !=nil {return false ,"",0,0,_dbg ;};_dbgd :=_afg .Bounds ();_fac :=_dc .Bounds ();if !_bfa (_dbgd ,_fac ){if _eb .Abs (float64 (_dbgd .Max .X )-float64 (_fac .Max .X ))> 1{_aa .Printf ("S\u006f\u0075\u0072\u0063\u0065\u0020b\u006f\u0075\u006e\u0064\u0073\u003a \u0025\u0076\u003b\u0020\u0044\u0065\u0073t\u0020\u0062\u006f\u0075\u006e\u0064\u0073\u003a\u0020\u0025v\u000a",_dbgd ,_fac );
return false ,"",0,0,ErrImageSizeNotMatch ;};};_dgf :=_cd .NewRGBA (_cd .Rect (0,0,_dbgd .Max .X ,_dbgd .Max .Y ));var (_ecge float64 ;_gaa float64 ;);for _gad :=_dbgd .Min .Y ;_gad < _dbgd .Max .Y ;_gad ++{for _edg :=_dbgd .Min .X ;_edg < _dbgd .Max .X ;
_edg ++{_gbb ,_efb ,_dga ,_aaa :=_afg .At (_edg ,_gad ).RGBA ();_dgc ,_bac ,_bb ,_acf :=_dc .At (_edg ,_gad ).RGBA ();_dgf .Set (_edg ,_gad ,_fd .RGBA {uint8 (_dgc ),uint8 (_bac ),uint8 (_bb ),64});_ace :=_aaa ==0x00&&_gbb ==0x00&&_efb ==0x00&&_dga ==0x00&&_dgc ==0xFFFF&&_bac ==0xFFFF&&_bb ==0xFFFF;
if !_ace &&!_cccd (_afg .At (_edg ,_gad ),_dc .At (_edg ,_gad )){_dgf .Set (_edg ,_gad ,_fd .RGBA {uint8 (_gbb ),uint8 (_efb ),uint8 (_dga ),uint8 (_aaa )});_bda :=float64 (_gbb )+float64 (_efb )+float64 (_dga )+float64 (_aaa )-float64 (_dgc )+float64 (_bac )+float64 (_bb )+float64 (_acf );
_ecd :=_eb .Sqrt (_eb .Pow (_bda /float64 (_dbgd .Dx ()*_dbgd .Dy ()),2));_gaa +=_ecd ;_ecge ++;};};};_ddc :=_ecge /float64 (_dbgd .Dx ()*_dbgd .Dy ())*100;_ccg :=_cdf .Dir (src );_dcd :=_a .TrimSuffix (_cdf .Base (src ),_cdf .Ext (src ));_feed ,_dbg :=_eeg .Create (_ccg +"\u002f"+_dcd +"\u002dd\u0069\u0066\u0066\u002e\u0070\u006eg");
if _dbg !=nil {return false ,"",0,0,_dbg ;};defer _feed .Close ();_agb :=_a .Replace (_ccg ,"\u0072\u0065\u006e\u0064\u0065\u0072","\u0066\u006f\u006et\u0073",1)+"\u002f\u0043\u0061l\u0069\u0062\u0072\u0069\u002e\u0074\u0074\u0066";_egdf :=_de .Sprintf ("\u0044\u0069f\u0066\u0065\u0072e\u006e\u0063\u0065\u003a\u0020\u0025\u0066\u0025\u0025",_ddc );
_dbg =_dde (_dgf ,_agb ,_egdf ,15,22);if _dbg !=nil {return false ,"",0,0,_dbg ;};_egdf =_de .Sprintf ("T\u006ft\u0061\u006c\u0020\u0044\u0069\u0066\u0066\u0065r\u0065\u006e\u0063\u0065: \u0025\u0066",_gaa );_dbg =_dde (_dgf ,_agb ,_egdf ,15,44);if _dbg !=nil {return false ,"",0,0,_dbg ;
};if _ecdg :=_faf .Encode (_feed ,_dgf );_ecdg !=nil {return false ,"",0,0,_ecdg ;};return true ,_feed .Name (),_ddc ,_gaa ,nil ;};func ReadFile (dirPath ,testName string ,createEmpty bool )(*ReferenceFile ,error ){if dirPath ==""&&createEmpty {return &ReferenceFile {Map :&ReferenceMap {}},nil ;
};if dirPath ==""{return nil ,_eeg .ErrNotExist ;};_fag :=_cdf .Join (dirPath ,testName +"\u005fr\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u002e\u006a\u0073\u006f\u006e");_gd :=&ReferenceFile {_ga :_fag };_daf ,_fba :=_eeg .Open (_fag );if _cf .Is (_fba ,_eeg .ErrNotExist )&&createEmpty {_gd .Timestamp =_ec .Now ().UTC ();
_gd .Map =&ReferenceMap {};return _gd ,nil ;};if _fba !=nil {return nil ,_fba ;};defer _daf .Close ();if _acae :=_c .NewDecoder (_daf ).Decode (_gd );_acae !=nil {if _acae .Error ()=="i\u006c\u006c\u0065\u0067\u0061\u006c \u0062\u0061\u0073\u0065\u0036\u0034 \u0064\u0061\u0074\u0061\u0020\u0061\u0074 \u0069\u006e\u0070\u0075\u0074\u0020\u0062\u0079\u0074\u0065 \u0030"&&createEmpty {return _gd ,nil ;
};return nil ,_acae ;};return _gd ,nil ;};func CompareImages (img1 ,img2 _cd .Image )(bool ,error ){_aebe :=img1 .Bounds ();_efga :=0;for _dfb :=0;_dfb < _aebe .Size ().X ;_dfb ++{for _add :=0;_add < _aebe .Size ().Y ;_add ++{_ebb ,_gdd ,_bdg ,_ :=img1 .At (_dfb ,_add ).RGBA ();
_ccb ,_gg ,_ff ,_ :=img2 .At (_dfb ,_add ).RGBA ();if _ebb !=_ccb ||_gdd !=_gg ||_bdg !=_ff {_efga ++;};};};_dab :=float64 (_efga )/float64 (_aebe .Dx ()*_aebe .Dy ());if _dab > 0.0001{_de .Printf ("\u0064\u0069\u0066f \u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u0020\u0028\u0025\u0064\u0029\u000a",_dab ,_efga );
return false ,nil ;};return true ,nil ;};func (_aef *ReferenceMap )UnmarshalJSON (data []byte )error {return _c .Unmarshal (data ,&_aef ._ag )};type ReferenceMap struct{_b .Mutex ;_ag map[string ]ReferenceEntry ;};func (_fdg *ReferenceMap )Write (key string ,entry ReferenceEntry ){_fdg .Lock ();
defer _fdg .Unlock ();if _fdg ._ag ==nil {_fdg ._ag =map[string ]ReferenceEntry {};};_fdg ._ag [key ]=entry ;};func _bfa (_dfc ,_dcdf _cd .Rectangle )bool {return _dfc .Min .X ==_dcdf .Min .X &&_dfc .Min .Y ==_dcdf .Min .Y &&_dfc .Max .X ==_dcdf .Max .X &&_dfc .Max .Y ==_dcdf .Max .Y ;
};var (ErrRenderNotSupported =_cf .New ("\u0072\u0065\u006e\u0064\u0065r\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020\u0066\u0069\u006c\u0065\u0073 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u006e\u0020\u0074\u0068\u0069\u0073\u0020\u0073\u0079\u0073\u0074\u0065m");
ErrImageSizeNotMatch =_cf .New ("\u0069\u006d\u0061ge\u0020\u0073\u0069\u007a\u0065\u0073\u0020\u0064\u006f\u006e\u0027\u0074\u0020\u006d\u0061\u0074\u0063\u0068"););func CombinePNGFiles (file1 ,file2 string )(bool ,error ){_cdb ,_fee :=ReadPNG (file1 );
if _fee !=nil {return false ,_fee ;};_fbe ,_fee :=ReadPNG (file2 );if _fee !=nil {return false ,_fee ;};_bgf :=_cd .Point {_cdb .Bounds ().Dx (),0};_agf :=_cd .Rectangle {_bgf ,_bgf .Add (_fbe .Bounds ().Size ())};_ce :=_cd .Rectangle {_cd .Point {0,0},_agf .Max };
_bgb :=_cd .NewRGBA (_ce );_ee .Draw (_bgb ,_cdb .Bounds (),_cdb ,_cd .Point {0,0},_ee .Src );_ee .Draw (_bgb ,_agf ,_fbe ,_cd .Point {0,0},_ee .Src );_bdcd :=_cdf .Dir (file1 );_be :=_a .TrimSuffix (_cdf .Base (file1 ),_cdf .Ext (file1 ));_ccce ,_fee :=_eeg .Create (_bdcd +"\u002f"+_be +"\u002d\u0063\u006f\u006d\u0062\u0069\u006e\u0065\u0064\u002e\u0070\u006e\u0067");
if _fee !=nil {return false ,_fee ;};defer _ccce .Close ();if _bcb :=_faf .Encode (_ccce ,_bgb );_bcb !=nil {return false ,_bcb ;};return true ,nil ;};func (_eee *ReferenceMap )Len ()int {return len (_eee ._ag )};func ComparePNGFiles (file1 ,file2 string )(bool ,error ){_gbg ,_fcg :=HashFile (file1 );
if _fcg !=nil {return false ,_fcg ;};_fae ,_fcg :=HashFile (file2 );if _fcg !=nil {return false ,_fcg ;};if _gbg ==_fae {return true ,nil ;};_aac ,_fcg :=ReadPNG (file1 );if _fcg !=nil {return false ,_fcg ;};_fdf ,_fcg :=ReadPNG (file2 );if _fcg !=nil {return false ,_fcg ;
};if _aac .Bounds ()!=_fdf .Bounds (){return false ,nil ;};return CompareImages (_aac ,_fdf );};func _cccd (_ebe ,_baf _fd .Color )bool {_gea ,_eea ,_gf ,_ea :=_ebe .RGBA ();_ege ,_egdc ,_efa ,_ccbc :=_baf .RGBA ();return _gea ==_ege &&_eea ==_egdc &&_gf ==_efa &&_ea ==_ccbc ;
};type ReferenceEntry struct{Timestamp int64 `json:"timestamp"`;Value string `json:"value"`;ResultSize int64 `json:"resultSize,omitempty"`;DiffPercent float64 `json:"diffPercent,omitempty"`;DiffTotal float64 `json:"diffValue,omitempty"`;Invalid bool `json:"markedInvalid,omitempty"`;
};func (_fe *ReferenceFile )updateMap (_ecg *ReferenceMap )int {var _cc int ;if _fe .Map ._ag ==nil {_fe .Map ._ag =map[string ]ReferenceEntry {};};for _gc ,_daa :=range _ecg ._ag {_ae ,_bd :=_fe .Map ._ag [_gc ];if !_bd {_fe .Map ._ag [_gc ]=_daa ;_cc ++;
continue ;};if string (_ae .Value )!=string (_daa .Value ){_fe .Map ._ag [_gc ]=_daa ;_cc ++;};};for _ac :=range _fe .Map ._ag {if _ ,_ad :=_ecg ._ag [_ac ];!_ad {delete (_fe .Map ._ag ,_ac );_cc ++;};};return _cc ;};type ReferenceFile struct{Timestamp _ec .Time `json:"timestamp"`;
Map *ReferenceMap `json:"map,omitempty"`;_ga string ;};func RunRenderOfficeTest (t *_d .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ,currentHashMap *ReferenceMap ,refFile *ReferenceFile ,postfix string ){_afb :=_a .TrimSuffix (_cdf .Base (pdfPath ),_cdf .Ext (pdfPath ));
t .Run ("\u0072\u0065\u006e\u0064\u0065\u0072",func (_gbc *_d .T ){_dbb :=_cdf .Join (outputDir ,_afb );_bea :=_dbb +"\u002d%\u0064\u002e\u0070\u006e\u0067";if _adg :=RenderPDFToPNGs (pdfPath ,0,_bea );_adg !=nil {_gbc .Skip (_adg );};_egda :=_afb +postfix ;
_dba :=_cdf .Join (outputDir ,_egda );_aeed :=_dba +"\u002d%\u0064\u002e\u0070\u006e\u0067";_bace :=false ;if saveBaseline {_fdb :=_cdf .Dir (pdfPath );_afa :=_cdf .Join (_fdb ,_egda +"\u002e\u0070\u0064\u0066");if _ ,_bafe :=_eeg .Stat (_afa );_bafe ==nil {_gbc .Logf ("\u0052e\u006e\u0064\u0065\u0072\u0020\u004d\u0053\u0020\u004f\u0066\u0066i\u0063\u0065\u0020\u0050\u0044\u0046\u003a\u0020\u0025\u0076",_afa );
if _dbac :=RenderPDFToPNGs (_afa ,0,_aeed );_dbac !=nil {_gbc .Skip (_dbac );};_bace =true ;};};for _gab :=1;true ;_gab ++{_aga :=_de .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_dbb ,_gab );_ecb :=_cdf .Join (baselineRenderPath ,_de .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_afb ,_gab ));
if _ ,_ggb :=_eeg .Stat (_aga );_ggb !=nil {break ;};_gbc .Logf ("\u0025\u0073",_ecb );if saveBaseline {_gbc .Logf ("\u0043\u006fp\u0079\u0069\u006eg\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_aga ,_ecb );_gee :=CopyFile (_aga ,_ecb );if _gee !=nil {_gbc .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_ecb ,_gee );
};if _bace {_ccgc :=_de .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_dba ,_gab );_gfea :=_cdf .Join (baselineRenderPath ,_de .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_egda ,_gab ));_gbc .Logf ("\u0043\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u004d\u0053\u0020\u0057\u006f\u0072\u0064 \u0072e\u0073\u0075\u006c\u0074\u0073\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_ccgc ,_gfea );
_gga :=CopyFile (_ccgc ,_gfea );if _gga !=nil {_gbc .Logf ("\u0045\u0052\u0052\u004f\u0052\u0020\u0063\u006f\u0070\u0079\u0069\u006eg\u0020\u0074\u006f \u0025\u0073\u003a\u0020\u0025\u0076\u002c\u0020\u0068\u0061\u0076i\u006e\u0067\u0020d\u0069\u0066\u0066\u0065r\u0065\u006e\u0074\u0020\u0070\u0061\u0067\u0065\u0020\u0073\u0069\u007a\u0065\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u002c\u0020\u0072\u0065\u0070\u006c\u0061\u0063\u0069\u006eg\u0020\u0069\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0062\u006ca\u006e\u006b\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0069\u006e\u0073\u0074\u0065\u0061\u0064",_gfea ,_gga );
if _eab :=_gfe (_ecb ,_gfea );_eab !=nil {_gbc .Fatalf ("\u0045\u0052\u0052\u004f\u0052\u0020c\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u0065\u006d\u0070\u0074\u0079 \u0069\u006d\u0061\u0067\u0065\u0020\u0025s\u003a\u0020\u0025\u0076",_gfea ,_eab );
};};_gbc .Logf ("\u0043\u006fm\u0062\u0069\u006e\u0069\u006eg\u0020\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0077\u0069\u0074\u0068\u0020\u004d\u0053\u0020\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u0025\u0073\u0020\u0061\u006e\u0064\u0020\u0025\u0073",_ecb ,_gfea );
_cef ,_gga :=CombinePNGFiles (_ecb ,_gfea );if _eeg .IsNotExist (_gga ){_gbc .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_cef {_gbc .Fatal ("\u0055n\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063\u006f\u006db\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0073");
};_gbc .Logf ("\u0043\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0069\u0066f \u0055n\u0069\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u0072\u0065\u0073\u0075l\u0074\u0073\u0020\u0077\u0069\u0074\u0068\u0020\u004d\u0053\u0020\u004f\u0066\u0066\u0069\u0063\u0065 \u0025\u0073\u0020\u0061\u006e\u0064\u0020\u0025\u0073",_ecb ,_gfea );
_cef ,_eaf ,_ccgf ,_dfcf ,_gga :=CreatePNGDiff (_ecb ,_gfea );if _gga !=nil &&_cf .Is (_gga ,ErrImageSizeNotMatch ){_gbc .Fatalf ("\u0045\u0072\u0072\u006fr\u0020\u006f\u006e\u0020\u0063\u0072\u0065\u0061\u0074\u0065 \u0050N\u0047\u0020\u0044\u0069\u0066\u0066\u003a \u0025\u0076",_gga );
};if _cef {_gbc .Logf ("\u0049\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073\u000a",_eaf );_gbc .Logf ("D\u0069\u0066\u0066\u0020Pe\u0072c\u0065\u006e\u0074\u003a\u0020%\u0032\u002e\u0066\u0025\u0025\u000a",_ccgf );_gbc .Logf ("\u0044i\u0066f\u0020\u0054\u006f\u0074\u0061\u006c\u003a\u0020\u0025\u0066\u000a",_dfcf );
_gba :=_cdf .Base (_eaf );_ca ,_ggf :=currentHashMap .Read (_gba );if _ggf &&(_ca .DiffPercent < _ccgf ||_ca .DiffTotal < _dfcf ){_gbc .Logf ("\u004e\u0065\u0077\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0068\u0061\u0076\u0069\u006e\u0067 h\u0069g\u0068\u0065\u0072\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006ec\u0065\u0020\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0066\u0020\u0061\u006e\u0064 \u0074\u006f\u0074\u0061\u006c\u0020\u0025\u0066\u000a",_ccgf ,_dfcf );
};_ffg ,_bee :=HashFile (_eaf );_ab .NoError (_gbc ,_bee );_abe :=_fbg (_gbc ,_eaf );if !_ggf ||_ca .Value !=_ffg ||_ca .ResultSize !=_abe ||_ca .DiffPercent !=_ccgf ||_ca .DiffTotal !=_dfcf {_cdc :=ReferenceEntry {Timestamp :_ec .Now ().UTC ().Unix (),Value :_ffg ,ResultSize :_abe ,DiffPercent :_ccgf ,DiffTotal :_dfcf };
currentHashMap .Write (_gba ,_cdc );if _bee =refFile .Update (currentHashMap );_bee !=nil {_gbc .Logf ("\u0055\u0070\u0064\u0061\u0074\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e\u0020f\u0069\u006c\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bee );
};};};};continue ;};_gbc .Run (_de .Sprintf ("\u0070\u0061\u0067\u0065\u0025\u0064",_gab ),func (_eeaf *_d .T ){_eeaf .Logf ("\u0043o\u006dp\u0061\u0072\u0069\u006e\u0067 \u0025\u0073 \u0076\u0073\u0020\u0025\u0073",_aga ,_ecb );_cec ,_cb :=ComparePNGFiles (_aga ,_ecb );
if _eeg .IsNotExist (_cb ){_eeaf .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_cec {_eeaf .Fatal ("\u0077\u0072\u006f\u006eg \u0070\u0061\u0067\u0065\u0020\u0072\u0065\u006e\u0064\u0065\u0072\u0065\u0064");
};});};});};func RunRenderTest (t *_d .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ,currentHashMap *ReferenceMap ,refFile *ReferenceFile ){RunRenderOfficeTest (t ,pdfPath ,outputDir ,baselineRenderPath ,saveBaseline ,currentHashMap ,refFile ,"\u002em\u0073\u0077\u006f\u0072\u0064");
};func (_bg *ReferenceMap )Keys ()(_efg []string ){_efg =make ([]string ,len (_bg ._ag ));var _fb int ;for _dg :=range _bg ._ag {_efg [_fb ]=_dg ;_fb ++;};return _efg ;};func _dde (_bdb *_cd .RGBA ,_ffa string ,_ded string ,_aee ,_dgfa int )error {_bad ,_eebb :=_fa .ReadFile (_ffa );
if _eebb !=nil {return _eebb ;};_cee ,_eebb :=_db .Parse (_bad );if _eebb !=nil {return _eebb ;};_fdc ,_eebb :=_db .NewFace (_cee ,&_db .FaceOptions {Size :18,DPI :72,Hinting :_eg .HintingNone });if _eebb !=nil {return _eebb ;};_faed :=&_eg .Drawer {Dst :_bdb ,Src :_cd .NewUniform (_fd .RGBA {200,100,0,255}),Face :_fdc ,Dot :_bf .P (_aee ,_dgfa )};
_faed .DrawString (_ded );return nil ;};func CopyFile (src ,dst string )error {_ccc ,_bdc :=_eeg .Open (src );if _bdc !=nil {return _bdc ;};defer _ccc .Close ();_efc ,_bdc :=_eeg .Create (dst );if _bdc !=nil {return _bdc ;};defer _efc .Close ();_ ,_bdc =_g .Copy (_efc ,_ccc );
return _bdc ;};func RenderPDFToPNGs (pdfPath string ,dpi int ,outpathTpl string )error {if dpi <=0{dpi =100;};if _ ,_cg :=_e .LookPath ("\u0067\u0073");_cg !=nil {return ErrRenderNotSupported ;};return _e .Command ("\u0067\u0073","\u002d\u0073\u0044\u0045\u0056\u0049\u0043\u0045\u003d\u0070\u006e\u0067a\u006c\u0070\u0068\u0061","\u002d\u006f",outpathTpl ,_de .Sprintf ("\u002d\u0072\u0025\u0064",dpi ),pdfPath ).Run ();
};func _gfe (_cdbb ,_fcc string )error {_dcc ,_dfgb :=_eeg .Open (_cdbb );if _dfgb !=nil {return _dfgb ;};defer _dcc .Close ();_bgd ,_ ,_dfgb :=_cd .DecodeConfig (_dcc );if _dfgb !=nil {panic (_dfgb );};_fca :=_cd .NewRGBA (_cd .Rect (0,0,_bgd .Width ,_bgd .Height ));
_gcg ,_dfgb :=_eeg .Create (_fcc );if _dfgb !=nil {return _dfgb ;};defer _gcg .Close ();_dfgb =_faf .Encode (_gcg ,_fca );if _dfgb !=nil {return _dfgb ;};return nil ;};func HashFile (file string )(string ,error ){_acab ,_cff :=_eeg .Open (file );if _cff !=nil {return "",_cff ;
};defer _acab .Close ();_af :=_eeb .New ();if _ ,_cff =_g .Copy (_af ,_acab );_cff !=nil {return "",_cff ;};return _dd .EncodeToString (_af .Sum (nil )),nil ;};func (_aeb *ReferenceMap )MarshalJSON ()([]byte ,error ){return _c .Marshal (_aeb ._ag )};