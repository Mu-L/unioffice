//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package testutils ;import (_de "crypto/md5";_ede "encoding/hex";_b "encoding/json";_ff "errors";_dc "fmt";_gb "github.com/stretchr/testify/require";_dea "golang.org/x/image/font";_ded "golang.org/x/image/font/opentype";_be "golang.org/x/image/math/fixed";
_fb "image";_ga "image/color";_db "image/draw";_ec "image/png";_ed "io";_d "io/ioutil";_fg "log";_g "math";_ad "os";_a "os/exec";_cf "path/filepath";_f "strings";_fga "sync";_e "testing";_ag "time";);func _fdd (_fac ,_cea string )error {_gaa ,_ba :=_ad .Open (_fac );
if _ba !=nil {return _ba ;};defer _gaa .Close ();_gaab ,_ ,_ba :=_fb .DecodeConfig (_gaa );if _ba !=nil {panic (_ba );};_gfa :=_fb .NewRGBA (_fb .Rect (0,0,_gaab .Width ,_gaab .Height ));_gbee ,_ba :=_ad .Create (_cea );if _ba !=nil {return _ba ;};defer _gbee .Close ();
_ba =_ec .Encode (_gbee ,_gfa );if _ba !=nil {return _ba ;};return nil ;};func (_gg *ReferenceFile )updateMap (_dbd *ReferenceMap )int {var _fa int ;if _gg .Map ._adg ==nil {_gg .Map ._adg =map[string ]ReferenceEntry {};};for _fge ,_cc :=range _dbd ._adg {_fcd ,_df :=_gg .Map ._adg [_fge ];
if !_df {_gg .Map ._adg [_fge ]=_cc ;_fa ++;continue ;};if string (_fcd .Value )!=string (_cc .Value ){_gg .Map ._adg [_fge ]=_cc ;_fa ++;};};for _da :=range _gg .Map ._adg {if _ ,_dg :=_dbd ._adg [_da ];!_dg {delete (_gg .Map ._adg ,_da );_fa ++;};};return _fa ;
};func ReadFile (dirPath ,testName string ,createEmpty bool )(*ReferenceFile ,error ){if dirPath ==""&&createEmpty {return &ReferenceFile {Map :&ReferenceMap {}},nil ;};if dirPath ==""{return nil ,_ad .ErrNotExist ;};_dac :=_cf .Join (dirPath ,testName +"\u005fr\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u002e\u006a\u0073\u006f\u006e");
_bb :=&ReferenceFile {_eg :_dac };_ce ,_gbe :=_ad .Open (_dac );if _ff .Is (_gbe ,_ad .ErrNotExist )&&createEmpty {_bb .Timestamp =_ag .Now ().UTC ();_bb .Map =&ReferenceMap {};return _bb ,nil ;};if _gbe !=nil {return nil ,_gbe ;};defer _ce .Close ();if _bg :=_b .NewDecoder (_ce ).Decode (_bb );
_bg !=nil {if _bg .Error ()=="i\u006c\u006c\u0065\u0067\u0061\u006c \u0062\u0061\u0073\u0065\u0036\u0034 \u0064\u0061\u0074\u0061\u0020\u0061\u0074 \u0069\u006e\u0070\u0075\u0074\u0020\u0062\u0079\u0074\u0065 \u0030"&&createEmpty {return _bb ,nil ;};return nil ,_bg ;
};return _bb ,nil ;};func RunRenderTest (t *_e .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ,currentHashMap *ReferenceMap ,refFile *ReferenceFile ){RunRenderOfficeTest (t ,pdfPath ,outputDir ,baselineRenderPath ,saveBaseline ,currentHashMap ,refFile ,"\u002em\u0073\u0077\u006f\u0072\u0064");
};func (_cg *ReferenceFile )Update (currentMap *ReferenceMap )error {if _cg ._eg ==""{return nil ;};_fbb :=_cg .updateMap (currentMap );if _fbb ==0{return nil ;};_fc ,_aa :=_ad .OpenFile (_cg ._eg ,_ad .O_CREATE |_ad .O_TRUNC |_ad .O_WRONLY ,0664);if _aa !=nil {return _aa ;
};defer _fc .Close ();_cg .Timestamp =_ag .Now ().UTC ();_ea :=_b .NewEncoder (_fc );_ea .SetIndent ("","\u0009");return _ea .Encode (_cg );};func (_af *ReferenceMap )Len ()int {return len (_af ._adg )};func (_ca *ReferenceMap )Keys ()(_fgec []string ){_fgec =make ([]string ,len (_ca ._adg ));
var _dd int ;for _dad :=range _ca ._adg {_fgec [_dd ]=_dad ;_dd ++;};return _fgec ;};func CompareImages (img1 ,img2 _fb .Image )(bool ,error ){_dbed :=img1 .Bounds ();_agg :=0;for _ada :=0;_ada < _dbed .Size ().X ;_ada ++{for _afe :=0;_afe < _dbed .Size ().Y ;
_afe ++{_ee ,_dada ,_bbf ,_ :=img1 .At (_ada ,_afe ).RGBA ();_feb ,_cd ,_geg ,_ :=img2 .At (_ada ,_afe ).RGBA ();if _ee !=_feb ||_dada !=_cd ||_bbf !=_geg {_agg ++;};};};_cgc :=float64 (_agg )/float64 (_dbed .Dx ()*_dbed .Dy ());if _cgc > 0.0001{_dc .Printf ("\u0064\u0069\u0066f \u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u0020\u0028\u0025\u0064\u0029\u000a",_cgc ,_agg );
return false ,nil ;};return true ,nil ;};func CombinePNGFiles (file1 ,file2 string )(bool ,error ){_bd ,_ged :=ReadPNG (file1 );if _ged !=nil {return false ,_ged ;};_eda ,_ged :=ReadPNG (file2 );if _ged !=nil {return false ,_ged ;};_faaa :=_fb .Point {_bd .Bounds ().Dx (),0};
_gee :=_fb .Rectangle {_faaa ,_faaa .Add (_eda .Bounds ().Size ())};_ef :=_fb .Rectangle {_fb .Point {0,0},_gee .Max };_bde :=_fb .NewRGBA (_ef );_db .Draw (_bde ,_bd .Bounds (),_bd ,_fb .Point {0,0},_db .Src );_db .Draw (_bde ,_gee ,_eda ,_fb .Point {0,0},_db .Src );
_ggd :=_cf .Dir (file1 );_ece :=_f .TrimSuffix (_cf .Base (file1 ),_cf .Ext (file1 ));_afa ,_ged :=_ad .Create (_ggd +"\u002f"+_ece +"\u002d\u0063\u006f\u006d\u0062\u0069\u006e\u0065\u0064\u002e\u0070\u006e\u0067");if _ged !=nil {return false ,_ged ;};
defer _afa .Close ();if _age :=_ec .Encode (_afa ,_bde );_age !=nil {return false ,_age ;};return true ,nil ;};func _gef (_bcf *_e .T ,_gbb string )int64 {_fcf ,_bea :=_ad .Stat (_gbb );_gb .NoError (_bcf ,_bea );return _fcf .Size ();};func _ddcg (_ege *_fb .RGBA ,_gagf string ,_ccd string ,_adc ,_fee int )error {_afg ,_efga :=_d .ReadFile (_gagf );
if _efga !=nil {return _efga ;};_dff ,_efga :=_ded .Parse (_afg );if _efga !=nil {return _efga ;};_aaa ,_efga :=_ded .NewFace (_dff ,&_ded .FaceOptions {Size :18,DPI :72,Hinting :_dea .HintingNone });if _efga !=nil {return _efga ;};_cgcf :=&_dea .Drawer {Dst :_ege ,Src :_fb .NewUniform (_ga .RGBA {200,100,0,255}),Face :_aaa ,Dot :_be .P (_adc ,_fee )};
_cgcf .DrawString (_ccd );return nil ;};type ReferenceEntry struct{Timestamp int64 `json:"timestamp"`;Value string `json:"value"`;ResultSize int64 `json:"resultSize,omitempty"`;DiffPercent float64 `json:"diffPercent,omitempty"`;DiffTotal float64 `json:"diffValue,omitempty"`;
Invalid bool `json:"markedInvalid,omitempty"`;};func (_afd *ReferenceMap )Write (key string ,entry ReferenceEntry ){_afd .Lock ();defer _afd .Unlock ();if _afd ._adg ==nil {_afd ._adg =map[string ]ReferenceEntry {};};_afd ._adg [key ]=entry ;};func RenderPDFToPNGs (pdfPath string ,dpi int ,outpathTpl string )error {if dpi <=0{dpi =100;
};if _ ,_dcf :=_a .LookPath ("\u0067\u0073");_dcf !=nil {return ErrRenderNotSupported ;};return _a .Command ("\u0067\u0073","\u002d\u0073\u0044\u0045\u0056\u0049\u0043\u0045\u003d\u0070\u006e\u0067a\u006c\u0070\u0068\u0061","\u002d\u006f",outpathTpl ,_dc .Sprintf ("\u002d\u0072\u0025\u0064",dpi ),pdfPath ).Run ();
};type ReferenceMap struct{_fga .Mutex ;_adg map[string ]ReferenceEntry ;};var (ErrRenderNotSupported =_ff .New ("\u0072\u0065\u006e\u0064\u0065r\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020\u0066\u0069\u006c\u0065\u0073 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u006e\u0020\u0074\u0068\u0069\u0073\u0020\u0073\u0079\u0073\u0074\u0065m");
ErrImageSizeNotMatch =_ff .New ("\u0069\u006d\u0061ge\u0020\u0073\u0069\u007a\u0065\u0073\u0020\u0064\u006f\u006e\u0027\u0074\u0020\u006d\u0061\u0074\u0063\u0068"););type ReferenceFile struct{Timestamp _ag .Time `json:"timestamp"`;Map *ReferenceMap `json:"map,omitempty"`;
_eg string ;};func ComparePNGFiles (file1 ,file2 string )(bool ,error ){_gc ,_gcg :=HashFile (file1 );if _gcg !=nil {return false ,_gcg ;};_fd ,_gcg :=HashFile (file2 );if _gcg !=nil {return false ,_gcg ;};if _gc ==_fd {return true ,nil ;};_eaf ,_gcg :=ReadPNG (file1 );
if _gcg !=nil {return false ,_gcg ;};_gbc ,_gcg :=ReadPNG (file2 );if _gcg !=nil {return false ,_gcg ;};if _eaf .Bounds ()!=_gbc .Bounds (){return false ,nil ;};return CompareImages (_eaf ,_gbc );};func (_gag *ReferenceMap )Copy ()*ReferenceMap {_bc :=ReferenceMap {_adg :make (map[string ]ReferenceEntry ,len (_gag ._adg ))};
for _faa ,_daa :=range _gag ._adg {_bc ._adg [_faa ]=_daa ;};return &_bc ;};func _ae (_gba ,_dge _fb .Rectangle )bool {return _gba .Min .X ==_dge .Min .X &&_gba .Min .Y ==_dge .Min .Y &&_gba .Max .X ==_dge .Max .X &&_gba .Max .Y ==_dge .Max .Y ;};func (_bf *ReferenceMap )MarshalJSON ()([]byte ,error ){return _b .Marshal (_bf ._adg )};
func (_ge *ReferenceMap )UnmarshalJSON (data []byte )error {return _b .Unmarshal (data ,&_ge ._adg )};func ReadPNG (file string )(_fb .Image ,error ){_aga ,_cga :=_ad .Open (file );if _cga !=nil {return nil ,_cga ;};defer _aga .Close ();return _ec .Decode (_aga );
};func CopyFile (src ,dst string )error {_dbe ,_agf :=_ad .Open (src );if _agf !=nil {return _agf ;};defer _dbe .Close ();_afdd ,_agf :=_ad .Create (dst );if _agf !=nil {return _agf ;};defer _afdd .Close ();_ ,_agf =_ed .Copy (_afdd ,_dbe );return _agf ;
};func _edb (_eac ,_cac _ga .Color )bool {_gegd ,_aeb ,_afddc ,_fde :=_eac .RGBA ();_cacb ,_bbb ,_aea ,_cef :=_cac .RGBA ();return _gegd ==_cacb &&_aeb ==_bbb &&_afddc ==_aea &&_fde ==_cef ;};func (_fad *ReferenceMap )Read (key string )(ReferenceEntry ,bool ){_fad .Lock ();
defer _fad .Unlock ();if _fad ._adg ==nil {return ReferenceEntry {},false ;};_fgd ,_eae :=_fad ._adg [key ];return _fgd ,_eae ;};func HashFile (file string )(string ,error ){_ddc ,_fe :=_ad .Open (file );if _fe !=nil {return "",_fe ;};defer _ddc .Close ();
_gaf :=_de .New ();if _ ,_fe =_ed .Copy (_gaf ,_ddc );_fe !=nil {return "",_fe ;};return _ede .EncodeToString (_gaf .Sum (nil )),nil ;};func CreatePNGDiff (src ,dst string )(bool ,string ,float64 ,float64 ,error ){_ceb ,_eb :=ReadPNG (src );if _eb !=nil {return false ,"",0,0,_eb ;
};_bfb ,_eb :=ReadPNG (dst );if _eb !=nil {return false ,"",0,0,_eb ;};_edaa :=_ceb .Bounds ();_fbd :=_bfb .Bounds ();if !_ae (_edaa ,_fbd ){if _g .Abs (float64 (_edaa .Max .X )-float64 (_fbd .Max .X ))> 1{_fg .Printf ("S\u006f\u0075\u0072\u0063\u0065\u0020b\u006f\u0075\u006e\u0064\u0073\u003a \u0025\u0076\u003b\u0020\u0044\u0065\u0073t\u0020\u0062\u006f\u0075\u006e\u0064\u0073\u003a\u0020\u0025v\u000a",_edaa ,_fbd );
return false ,"",0,0,ErrImageSizeNotMatch ;};};_ceg :=_fb .NewRGBA (_fb .Rect (0,0,_edaa .Max .X ,_edaa .Max .Y ));var (_fadf float64 ;_agfd float64 ;);for _faf :=_edaa .Min .Y ;_faf < _edaa .Max .Y ;_faf ++{for _febb :=_edaa .Min .X ;_febb < _edaa .Max .X ;
_febb ++{_dfa ,_cgf ,_fbe ,_gfc :=_ceb .At (_febb ,_faf ).RGBA ();_afef ,_dda ,_cab ,_bec :=_bfb .At (_febb ,_faf ).RGBA ();_ceg .Set (_febb ,_faf ,_ga .RGBA {uint8 (_afef ),uint8 (_dda ),uint8 (_cab ),64});_cde :=_gfc ==0x00&&_dfa ==0x00&&_cgf ==0x00&&_fbe ==0x00&&_afef ==0xFFFF&&_dda ==0xFFFF&&_cab ==0xFFFF;
if !_cde &&!_edb (_ceb .At (_febb ,_faf ),_bfb .At (_febb ,_faf )){_ceg .Set (_febb ,_faf ,_ga .RGBA {uint8 (_dfa ),uint8 (_cgf ),uint8 (_fbe ),uint8 (_gfc )});_gcb :=float64 (_dfa )+float64 (_cgf )+float64 (_fbe )+float64 (_gfc )-float64 (_afef )+float64 (_dda )+float64 (_cab )+float64 (_bec );
_bfc :=_g .Sqrt (_g .Pow (_gcb /float64 (_edaa .Dx ()*_edaa .Dy ()),2));_agfd +=_bfc ;_fadf ++;};};};_fba :=_fadf /float64 (_edaa .Dx ()*_edaa .Dy ())*100;_efg :=_cf .Dir (src );_fbdf :=_f .TrimSuffix (_cf .Base (src ),_cf .Ext (src ));_daf ,_eb :=_ad .Create (_efg +"\u002f"+_fbdf +"\u002dd\u0069\u0066\u0066\u002e\u0070\u006eg");
if _eb !=nil {return false ,"",0,0,_eb ;};defer _daf .Close ();_dec :=_f .Replace (_efg ,"\u0072\u0065\u006e\u0064\u0065\u0072","\u0066\u006f\u006et\u0073",1)+"\u002f\u0043\u0061l\u0069\u0062\u0072\u0069\u002e\u0074\u0074\u0066";_aag :=_dc .Sprintf ("\u0044\u0069f\u0066\u0065\u0072e\u006e\u0063\u0065\u003a\u0020\u0025\u0066\u0025\u0025",_fba );
_eb =_ddcg (_ceg ,_dec ,_aag ,15,22);if _eb !=nil {return false ,"",0,0,_eb ;};_aag =_dc .Sprintf ("T\u006ft\u0061\u006c\u0020\u0044\u0069\u0066\u0066\u0065r\u0065\u006e\u0063\u0065: \u0025\u0066",_agfd );_eb =_ddcg (_ceg ,_dec ,_aag ,15,44);if _eb !=nil {return false ,"",0,0,_eb ;
};if _bfcd :=_ec .Encode (_daf ,_ceg );_bfcd !=nil {return false ,"",0,0,_bfcd ;};return true ,_daf .Name (),_fba ,_agfd ,nil ;};func RunRenderOfficeTest (t *_e .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ,currentHashMap *ReferenceMap ,refFile *ReferenceFile ,postfix string ){_cgd :=_f .TrimSuffix (_cf .Base (pdfPath ),_cf .Ext (pdfPath ));
t .Run ("\u0072\u0065\u006e\u0064\u0065\u0072",func (_ccf *_e .T ){_afc :=_cf .Join (outputDir ,_cgd );_efa :=_afc +"\u002d%\u0064\u002e\u0070\u006e\u0067";if _bgf :=RenderPDFToPNGs (pdfPath ,0,_efa );_bgf !=nil {_ccf .Skip (_bgf );};_gd :=_cgd +postfix ;
_eceb :=_cf .Join (outputDir ,_gd );_bfg :=_eceb +"\u002d%\u0064\u002e\u0070\u006e\u0067";_beg :=false ;if saveBaseline {_gdf :=_cf .Dir (pdfPath );_bbdf :=_cf .Join (_gdf ,_gd +"\u002e\u0070\u0064\u0066");if _ ,_egc :=_ad .Stat (_bbdf );_egc ==nil {_ccf .Logf ("\u0052e\u006e\u0064\u0065\u0072\u0020\u004d\u0053\u0020\u004f\u0066\u0066i\u0063\u0065\u0020\u0050\u0044\u0046\u003a\u0020\u0025\u0076",_bbdf );
if _ddb :=RenderPDFToPNGs (_bbdf ,0,_bfg );_ddb !=nil {_ccf .Skip (_ddb );};_beg =true ;};};for _dgb :=1;true ;_dgb ++{_ecf :=_dc .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_afc ,_dgb );_dcc :=_cf .Join (baselineRenderPath ,_dc .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_cgd ,_dgb ));
if _ ,_dfb :=_ad .Stat (_ecf );_dfb !=nil {break ;};_ccf .Logf ("\u0025\u0073",_dcc );if saveBaseline {_ccf .Logf ("\u0043\u006fp\u0079\u0069\u006eg\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_ecf ,_dcc );_ccc :=CopyFile (_ecf ,_dcc );if _ccc !=nil {_ccf .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_dcc ,_ccc );
};if _beg {_gbf :=_dc .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_eceb ,_dgb );_dadd :=_cf .Join (baselineRenderPath ,_dc .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_gd ,_dgb ));_ccf .Logf ("\u0043\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u004d\u0053\u0020\u0057\u006f\u0072\u0064 \u0072e\u0073\u0075\u006c\u0074\u0073\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_gbf ,_dadd );
_cded :=CopyFile (_gbf ,_dadd );if _cded !=nil {_ccf .Logf ("\u0045\u0052\u0052\u004f\u0052\u0020\u0063\u006f\u0070\u0079\u0069\u006eg\u0020\u0074\u006f \u0025\u0073\u003a\u0020\u0025\u0076\u002c\u0020\u0068\u0061\u0076i\u006e\u0067\u0020d\u0069\u0066\u0066\u0065r\u0065\u006e\u0074\u0020\u0070\u0061\u0067\u0065\u0020\u0073\u0069\u007a\u0065\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u002c\u0020\u0072\u0065\u0070\u006c\u0061\u0063\u0069\u006eg\u0020\u0069\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0062\u006ca\u006e\u006b\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0069\u006e\u0073\u0074\u0065\u0061\u0064",_dadd ,_cded );
if _dca :=_fdd (_dcc ,_dadd );_dca !=nil {_ccf .Fatalf ("\u0045\u0052\u0052\u004f\u0052\u0020c\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u0065\u006d\u0070\u0074\u0079 \u0069\u006d\u0061\u0067\u0065\u0020\u0025s\u003a\u0020\u0025\u0076",_dadd ,_dca );
};};_ccf .Logf ("\u0043\u006fm\u0062\u0069\u006e\u0069\u006eg\u0020\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0077\u0069\u0074\u0068\u0020\u004d\u0053\u0020\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u0025\u0073\u0020\u0061\u006e\u0064\u0020\u0025\u0073",_dcc ,_dadd );
_cdec ,_cded :=CombinePNGFiles (_dcc ,_dadd );if _ad .IsNotExist (_cded ){_ccf .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_cdec {_ccf .Fatal ("\u0055n\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063\u006f\u006db\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0073");
};_ccf .Logf ("\u0043\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0069\u0066f \u0055n\u0069\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u0072\u0065\u0073\u0075l\u0074\u0073\u0020\u0077\u0069\u0074\u0068\u0020\u004d\u0053\u0020\u004f\u0066\u0066\u0069\u0063\u0065 \u0025\u0073\u0020\u0061\u006e\u0064\u0020\u0025\u0073",_dcc ,_dadd );
_cdec ,_edg ,_eef ,_deb ,_cded :=CreatePNGDiff (_dcc ,_dadd );if _cded !=nil &&_ff .Is (_cded ,ErrImageSizeNotMatch ){_ccf .Fatalf ("\u0045\u0072\u0072\u006fr\u0020\u006f\u006e\u0020\u0063\u0072\u0065\u0061\u0074\u0065 \u0050N\u0047\u0020\u0044\u0069\u0066\u0066\u003a \u0025\u0076",_cded );
};if _cdec {_ccf .Logf ("\u0049\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073\u000a",_edg );_ccf .Logf ("D\u0069\u0066\u0066\u0020Pe\u0072c\u0065\u006e\u0074\u003a\u0020%\u0032\u002e\u0066\u0025\u0025\u000a",_eef );_ccf .Logf ("\u0044i\u0066f\u0020\u0054\u006f\u0074\u0061\u006c\u003a\u0020\u0025\u0066\u000a",_deb );
_ab :=_cf .Base (_edg );_bgc ,_ffc :=currentHashMap .Read (_ab );if _ffc &&(_bgc .DiffPercent < _eef ||_bgc .DiffTotal < _deb ){_ccf .Logf ("\u004e\u0065\u0077\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0068\u0061\u0076\u0069\u006e\u0067 h\u0069g\u0068\u0065\u0072\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006ec\u0065\u0020\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0066\u0020\u0061\u006e\u0064 \u0074\u006f\u0074\u0061\u006c\u0020\u0025\u0066\u000a",_eef ,_deb );
};_ecfc ,_fbae :=HashFile (_edg );_gb .NoError (_ccf ,_fbae );_abb :=_gef (_ccf ,_edg );if !_ffc ||_bgc .Value !=_ecfc ||_bgc .ResultSize !=_abb ||_bgc .DiffPercent !=_eef ||_bgc .DiffTotal !=_deb {_edd :=ReferenceEntry {Timestamp :_ag .Now ().UTC ().Unix (),Value :_ecfc ,ResultSize :_abb ,DiffPercent :_eef ,DiffTotal :_deb };
currentHashMap .Write (_ab ,_edd );if _fbae =refFile .Update (currentHashMap );_fbae !=nil {_ccf .Logf ("\u0055\u0070\u0064\u0061\u0074\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e\u0020f\u0069\u006c\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_fbae );
};};};};continue ;};_ccf .Run (_dc .Sprintf ("\u0070\u0061\u0067\u0065\u0025\u0064",_dgb ),func (_gac *_e .T ){_gac .Logf ("\u0043o\u006dp\u0061\u0072\u0069\u006e\u0067 \u0025\u0073 \u0076\u0073\u0020\u0025\u0073",_ecf ,_dcc );_edc ,_beb :=ComparePNGFiles (_ecf ,_dcc );
if _ad .IsNotExist (_beb ){_gac .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_edc {_gac .Fatal ("\u0077\u0072\u006f\u006eg \u0070\u0061\u0067\u0065\u0020\u0072\u0065\u006e\u0064\u0065\u0072\u0065\u0064");
};});};});};