//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package formatutils ;import (_c "fmt";_a "github.com/unidoc/unioffice/schema/soo/wml";_g "strconv";_d "strings";);func _dg (_aae int64 ,_ca *_a .CT_NumFmt )(_cfd string ){if _ca ==nil {return ;};_aee :=_ca .ValAttr ;switch _aee {case _a .ST_NumberFormatNone :_cfd ="";
case _a .ST_NumberFormatDecimal :_cfd =_g .Itoa (int (_aae ));case _a .ST_NumberFormatDecimalZero :_cfd =_g .Itoa (int (_aae ));if _aae < 10{_cfd ="\u0030"+_cfd ;};case _a .ST_NumberFormatUpperRoman :var (_cee =_aae %10;_ddf =(_aae %100)/10;_eee =(_aae %1000)/100;
_dca =_aae /1000;);_cfd =_cgf [_dca ]+_cgg [_eee ]+_cf [_ddf ]+_eb [_cee ];case _a .ST_NumberFormatLowerRoman :var (_fae =_aae %10;_b =(_aae %100)/10;_ga =(_aae %1000)/100;_ef =_aae /1000;);_cfd =_cgf [_ef ]+_cgg [_ga ]+_cf [_b ]+_eb [_fae ];_cfd =_d .ToLower (_cfd );
case _a .ST_NumberFormatUpperLetter :_bg :=_aae %780;if _bg ==0{_bg =780;};_gg :=(_bg -1)/26;_bb :=(_bg -1)%26;_gc :=_cfg [_gg +_bb ];_cfd =string (_gc );case _a .ST_NumberFormatLowerLetter :_ddc :=_aae %780;if _ddc ==0{_ddc =780;};_db :=(_ddc -1)/26;_gge :=(_ddc -1)%26;
_bf :=_cfg [_db +_gge ];_cfd =_d .ToLower (string (_bf ));default:_cfd ="";};return ;};func _ee (_fa string )(_ag []string ){for _ab :=0;_ab < len (_fa )-2;_ab ++{if string (_fa [_ab ])=="\u0025"{if !_d .Contains (string (_fa [_ab +2:]),"\u0025"){if _ab ==0{_ag =append (_ag ,_c .Sprintf ("\u0025\u0073\u0025\u0073\u0025\u0073",string (_fa [_ab ]),string (_fa [_ab +1]),string (_fa [_ab +2:])));
}else {_ag =append (_ag ,_c .Sprintf ("\u0025\u0073\u0025\u0073\u0025\u0073\u0025\u0073",string (_fa [_ab -1]),string (_fa [_ab ]),string (_fa [_ab +1]),string (_fa [_ab +2:])));};}else {_ag =append (_ag ,_c .Sprintf ("\u0025\u0073\u0025\u0073\u0025\u0073",string (_fa [_ab ]),string (_fa [_ab +1]),string (_fa [_ab +2])));
};};};return ;};var (_eb =[]string {"","\u0049","\u0049\u0049","\u0049\u0049\u0049","\u0049\u0056","\u0056","\u0056\u0049","\u0056\u0049\u0049","\u0056\u0049\u0049\u0049","\u0049\u0058"};_cf =[]string {"","\u0058","\u0058\u0058","\u0058\u0058\u0058","\u0058\u004c","\u004c","\u004c\u0058","\u004c\u0058\u0058","\u004c\u0058\u0058\u0058","\u0058\u0043"};
_cgg =[]string {"","\u0043","\u0043\u0043","\u0043\u0043\u0043","\u0043\u0044","\u0044","\u0044\u0043","\u0044\u0043\u0043","\u0044\u0043\u0043\u0043","\u0043\u004d","\u004d"};_cgf =[]string {"","\u004d","\u004d\u004d","\u004d\u004d\u004d","\u004d\u004d\u004d\u004d","\u004d\u004d\u004dM\u004d","\u004d\u004d\u004d\u004d\u004d\u004d","\u004dM\u004d\u004d\u004d\u004d\u004d","\u004d\u004d\u004d\u004d\u004d\u004d\u004d\u004d","\u004dM\u004d\u004d\u004d\u004d\u004d\u004dM","\u004d\u004d\u004d\u004d\u004d\u004d\u004d\u004d\u004d\u004d"};
_df =[]string {"\u006f\u006e\u0065","\u0074\u0077\u006f","\u0074\u0068\u0072e\u0065","\u0066\u006f\u0075\u0072","\u0066\u0069\u0076\u0065","\u0073\u0069\u0078","\u0073\u0065\u0076e\u006e","\u0065\u0069\u0067h\u0074","\u006e\u0069\u006e\u0065","\u0074\u0065\u006e","\u0065\u006c\u0065\u0076\u0065\u006e","\u0074\u0077\u0065\u006c\u0076\u0065","\u0074\u0068\u0069\u0072\u0074\u0065\u0065\u006e","\u0066\u006f\u0075\u0072\u0074\u0065\u0065\u006e","\u0066i\u0066\u0074\u0065\u0065\u006e","\u0073i\u0078\u0074\u0065\u0065\u006e","\u0073e\u0076\u0065\u006e\u0074\u0065\u0065n","\u0065\u0069\u0067\u0068\u0074\u0065\u0065\u006e","\u006e\u0069\u006e\u0065\u0074\u0065\u0065\u006e"};
_gf =[]string {"\u0074\u0065\u006e","\u0074\u0077\u0065\u006e\u0074\u0079","\u0074\u0068\u0069\u0072\u0074\u0079","\u0066\u006f\u0072t\u0079","\u0066\u0069\u0066t\u0079","\u0073\u0069\u0078t\u0079","\u0073e\u0076\u0065\u006e\u0074\u0079","\u0065\u0069\u0067\u0068\u0074\u0079","\u006e\u0069\u006e\u0065\u0074\u0079"};
_ed =[]string {"\u0066\u0069\u0072s\u0074","\u0073\u0065\u0063\u006f\u006e\u0064","\u0074\u0068\u0069r\u0064","\u0066\u006f\u0075\u0072\u0074\u0068","\u0066\u0069\u0066t\u0068","\u0073\u0069\u0078t\u0068","\u0073e\u0076\u0065\u006e\u0074\u0068","\u0065\u0069\u0067\u0068\u0074\u0068","\u006e\u0069\u006et\u0068","\u0074\u0065\u006et\u0068","\u0065\u006c\u0065\u0076\u0065\u006e\u0074\u0068","\u0074w\u0065\u006c\u0066\u0074\u0068","\u0074\u0068\u0069\u0072\u0074\u0065\u0065\u006e\u0074\u0068","\u0066\u006f\u0075\u0072\u0074\u0065\u0065\u006e\u0074\u0068","\u0066i\u0066\u0074\u0065\u0065\u006e\u0074h","\u0073i\u0078\u0074\u0065\u0065\u006e\u0074h","s\u0065\u0076\u0065\u006e\u0074\u0065\u0065\u006e\u0074\u0068","\u0065\u0069\u0067\u0068\u0074\u0065\u0065\u006e\u0074\u0068","\u006e\u0069\u006e\u0065\u0074\u0065\u0065\u006e\u0074\u0068"};
_cd =[]string {"\u0074\u0065\u006et\u0068","\u0074w\u0065\u006e\u0074\u0069\u0065\u0074h","\u0074h\u0069\u0072\u0074\u0069\u0065\u0074h","\u0066\u006f\u0072\u0074\u0069\u0065\u0074\u0068","\u0066\u0069\u0066\u0074\u0069\u0065\u0074\u0068","\u0073\u0069\u0078\u0074\u0069\u0065\u0074\u0068","\u0073\u0065\u0076\u0065\u006e\u0074\u0069\u0065\u0074\u0068","\u0065i\u0067\u0068\u0074\u0069\u0065\u0074h","\u006ei\u006e\u0065\u0074\u0069\u0065\u0074h"};
_cfg ="\u0041\u0042\u0043\u0044\u0045\u0046\u0047\u0048\u0049\u004a\u004bL\u004d\u004e\u004f\u0050\u0051\u0052\u0053\u0054\u0055\u0056W\u0058\u0059\u005a";);func FormatNumberingText (currentNumber int64 ,ilvl int64 ,lvlText string ,numFmt *_a .CT_NumFmt ,levelNumbers map[int64 ]int64 )string {_ae :=_ee (lvlText );
_cg :=_dg (currentNumber ,numFmt );_f :=int64 (0);for _ce ,_aa :=range _ae {_dd :=_c .Sprintf ("\u0025\u0025\u0025\u0064",_ce +1);if len (_ae )==1{_dd =_c .Sprintf ("\u0025\u0025\u0025\u0064",ilvl +1);_ae [_ce ]=_d .Replace (_aa ,_dd ,_cg ,1);break ;};
if ilvl > 0&&ilvl > _f &&_ce < (len (_ae )-1){_dc :=_dg (levelNumbers [_f ],numFmt );_ae [_ce ]=_d .Replace (_aa ,_dd ,_dc ,1);_f ++;}else {_ae [_ce ]=_d .Replace (_aa ,_dd ,_cg ,1);};};return _d .Join (_ae ,"");};func StringToNumbers (str string )(int ,bool ){_aeg :=0;
_cdb :=false ;for _ ,_dcf :=range []byte (str ){_dcf -='0';if _dcf > 9{continue ;};_aeg =_aeg *10+int (_dcf );_cdb =true ;};return _aeg ,_cdb ;};