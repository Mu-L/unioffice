//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package formatutils ;import (_e "fmt";_bd "github.com/unidoc/unioffice/v2/schema/soo/wml";_d "strconv";_f "strings";);func _c (_gd string )(_be []string ){for _df :=0;_df < len (_gd )-2;_df ++{if string (_gd [_df ])=="\u0025"{if !_f .Contains (string (_gd [_df +2:]),"\u0025"){if _df ==0{_be =append (_be ,_e .Sprintf ("\u0025\u0073\u0025\u0073\u0025\u0073",string (_gd [_df ]),string (_gd [_df +1]),string (_gd [_df +2:])));
}else {_be =append (_be ,_e .Sprintf ("\u0025\u0073\u0025\u0073\u0025\u0073\u0025\u0073",string (_gd [_df -1]),string (_gd [_df ]),string (_gd [_df +1]),string (_gd [_df +2:])));};}else {_be =append (_be ,_e .Sprintf ("\u0025\u0073\u0025\u0073\u0025\u0073",string (_gd [_df ]),string (_gd [_df +1]),string (_gd [_df +2])));
};};};return ;};func StringToNumbers (str string )(int ,bool ){_fb :=0;_fde :=false ;for _ ,_gce :=range []byte (str ){_gce -='0';if _gce > 9{continue ;};_fb =_fb *10+int (_gce );_fde =true ;};return _fb ,_fde ;};func _dc (_ec int64 ,_gc *_bd .CT_NumFmt )(_cg string ){if _gc ==nil {return ;
};_da :=_gc .ValAttr ;switch _da {case _bd .ST_NumberFormatNone :_cg ="";case _bd .ST_NumberFormatDecimal :_cg =_d .Itoa (int (_ec ));case _bd .ST_NumberFormatDecimalZero :_cg =_d .Itoa (int (_ec ));if _ec < 10{_cg ="\u0030"+_cg ;};case _bd .ST_NumberFormatUpperRoman :var (_ddf =_ec %10;
_bed =(_ec %100)/10;_db =(_ec %1000)/100;_ea =_ec /1000;);_cg =_bb [_ea ]+_bdf [_db ]+_gb [_bed ]+_ff [_ddf ];case _bd .ST_NumberFormatLowerRoman :var (_fe =_ec %10;_eg =(_ec %100)/10;_ddfg =(_ec %1000)/100;_af =_ec /1000;);_cg =_bb [_af ]+_bdf [_ddfg ]+_gb [_eg ]+_ff [_fe ];
_cg =_f .ToLower (_cg );case _bd .ST_NumberFormatUpperLetter :_ccg :=_ec %780;if _ccg ==0{_ccg =780;};_bda :=(_ccg -1)/26;_ab :=(_ccg -1)%26;_fee :=_de [_bda +_ab ];_cg =string (_fee );case _bd .ST_NumberFormatLowerLetter :_dfa :=_ec %780;if _dfa ==0{_dfa =780;
};_eaf :=(_dfa -1)/26;_ddb :=(_dfa -1)%26;_cca :=_de [_eaf +_ddb ];_cg =_f .ToLower (string (_cca ));default:_cg ="";};return ;};var (_ff =[]string {"","\u0049","\u0049\u0049","\u0049\u0049\u0049","\u0049\u0056","\u0056","\u0056\u0049","\u0056\u0049\u0049","\u0056\u0049\u0049\u0049","\u0049\u0058"};
_gb =[]string {"","\u0058","\u0058\u0058","\u0058\u0058\u0058","\u0058\u004c","\u004c","\u004c\u0058","\u004c\u0058\u0058","\u004c\u0058\u0058\u0058","\u0058\u0043"};_bdf =[]string {"","\u0043","\u0043\u0043","\u0043\u0043\u0043","\u0043\u0044","\u0044","\u0044\u0043","\u0044\u0043\u0043","\u0044\u0043\u0043\u0043","\u0043\u004d","\u004d"};
_bb =[]string {"","\u004d","\u004d\u004d","\u004d\u004d\u004d","\u004d\u004d\u004d\u004d","\u004d\u004d\u004dM\u004d","\u004d\u004d\u004d\u004d\u004d\u004d","\u004dM\u004d\u004d\u004d\u004d\u004d","\u004d\u004d\u004d\u004d\u004d\u004d\u004d\u004d","\u004dM\u004d\u004d\u004d\u004d\u004d\u004dM","\u004d\u004d\u004d\u004d\u004d\u004d\u004d\u004d\u004d\u004d"};
_beb =[]string {"\u006f\u006e\u0065","\u0074\u0077\u006f","\u0074\u0068\u0072e\u0065","\u0066\u006f\u0075\u0072","\u0066\u0069\u0076\u0065","\u0073\u0069\u0078","\u0073\u0065\u0076e\u006e","\u0065\u0069\u0067h\u0074","\u006e\u0069\u006e\u0065","\u0074\u0065\u006e","\u0065\u006c\u0065\u0076\u0065\u006e","\u0074\u0077\u0065\u006c\u0076\u0065","\u0074\u0068\u0069\u0072\u0074\u0065\u0065\u006e","\u0066\u006f\u0075\u0072\u0074\u0065\u0065\u006e","\u0066i\u0066\u0074\u0065\u0065\u006e","\u0073i\u0078\u0074\u0065\u0065\u006e","\u0073e\u0076\u0065\u006e\u0074\u0065\u0065n","\u0065\u0069\u0067\u0068\u0074\u0065\u0065\u006e","\u006e\u0069\u006e\u0065\u0074\u0065\u0065\u006e"};
_cc =[]string {"\u0074\u0065\u006e","\u0074\u0077\u0065\u006e\u0074\u0079","\u0074\u0068\u0069\u0072\u0074\u0079","\u0066\u006f\u0072t\u0079","\u0066\u0069\u0066t\u0079","\u0073\u0069\u0078t\u0079","\u0073e\u0076\u0065\u006e\u0074\u0079","\u0065\u0069\u0067\u0068\u0074\u0079","\u006e\u0069\u006e\u0065\u0074\u0079"};
_ad =[]string {"\u0066\u0069\u0072s\u0074","\u0073\u0065\u0063\u006f\u006e\u0064","\u0074\u0068\u0069r\u0064","\u0066\u006f\u0075\u0072\u0074\u0068","\u0066\u0069\u0066t\u0068","\u0073\u0069\u0078t\u0068","\u0073e\u0076\u0065\u006e\u0074\u0068","\u0065\u0069\u0067\u0068\u0074\u0068","\u006e\u0069\u006et\u0068","\u0074\u0065\u006et\u0068","\u0065\u006c\u0065\u0076\u0065\u006e\u0074\u0068","\u0074w\u0065\u006c\u0066\u0074\u0068","\u0074\u0068\u0069\u0072\u0074\u0065\u0065\u006e\u0074\u0068","\u0066\u006f\u0075\u0072\u0074\u0065\u0065\u006e\u0074\u0068","\u0066i\u0066\u0074\u0065\u0065\u006e\u0074h","\u0073i\u0078\u0074\u0065\u0065\u006e\u0074h","s\u0065\u0076\u0065\u006e\u0074\u0065\u0065\u006e\u0074\u0068","\u0065\u0069\u0067\u0068\u0074\u0065\u0065\u006e\u0074\u0068","\u006e\u0069\u006e\u0065\u0074\u0065\u0065\u006e\u0074\u0068"};
_agc =[]string {"\u0074\u0065\u006et\u0068","\u0074w\u0065\u006e\u0074\u0069\u0065\u0074h","\u0074h\u0069\u0072\u0074\u0069\u0065\u0074h","\u0066\u006f\u0072\u0074\u0069\u0065\u0074\u0068","\u0066\u0069\u0066\u0074\u0069\u0065\u0074\u0068","\u0073\u0069\u0078\u0074\u0069\u0065\u0074\u0068","\u0073\u0065\u0076\u0065\u006e\u0074\u0069\u0065\u0074\u0068","\u0065i\u0067\u0068\u0074\u0069\u0065\u0074h","\u006ei\u006e\u0065\u0074\u0069\u0065\u0074h"};
_de ="\u0041\u0042\u0043\u0044\u0045\u0046\u0047\u0048\u0049\u004a\u004bL\u004d\u004e\u004f\u0050\u0051\u0052\u0053\u0054\u0055\u0056W\u0058\u0059\u005a";);func Initials (text string )string {if text ==""{return "";};_ce :=_f .Split (text ,"\u0020");_gbb :=_f .Builder {};
for _ ,_egd :=range _ce {_gbb .WriteByte (_egd [0]);};return _gbb .String ();};func FormatNumberingText (currentNumber int64 ,ilvl int64 ,lvlText string ,numFmt *_bd .CT_NumFmt ,levelNumbers map[int64 ]int64 )string {_a :=_c (lvlText );_bdb :=_dc (currentNumber ,numFmt );
_fd :=int64 (0);for _ae ,_g :=range _a {_dd :=_e .Sprintf ("\u0025\u0025\u0025\u0064",_ae +1);if len (_a )==1{_dd =_e .Sprintf ("\u0025\u0025\u0025\u0064",ilvl +1);_a [_ae ]=_f .Replace (_g ,_dd ,_bdb ,1);break ;};if ilvl > 0&&ilvl > _fd &&_ae < (len (_a )-1){_ag :=_dc (levelNumbers [_fd ],numFmt );
_a [_ae ]=_f .Replace (_g ,_dd ,_ag ,1);_fd ++;}else {_a [_ae ]=_f .Replace (_g ,_dd ,_bdb ,1);};};return _f .Join (_a ,"");};