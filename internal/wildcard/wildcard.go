//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard ;func Index (pattern ,name string )(_fdf int ){if pattern ==""||pattern =="\u002a"{return 0;};_ae :=make ([]rune ,0,len (name ));_ec :=make ([]rune ,0,len (pattern ));for _ ,_eg :=range name {_ae =append (_ae ,_eg );};for _ ,_gb :=range pattern {_ec =append (_ec ,_gb );
};return _gbg (_ae ,_ec ,0);};func _ab (_fea ,_df []rune ,_ed bool )bool {for len (_df )> 0{switch _df [0]{default:if len (_fea )==0||_fea [0]!=_df [0]{return false ;};case '?':if len (_fea )==0&&!_ed {return false ;};case '*':return _ab (_fea ,_df [1:],_ed )||(len (_fea )> 0&&_ab (_fea [1:],_df ,_ed ));
};_fea =_fea [1:];_df =_df [1:];};return len (_fea )==0&&len (_df )==0;};func Match (pattern ,name string )(_a bool ){if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_c :=make ([]rune ,0,len (name ));_bf :=make ([]rune ,0,len (pattern ));
for _ ,_fc :=range name {_c =append (_c ,_fc );};for _ ,_gc :=range pattern {_bf =append (_bf ,_gc );};_d :=false ;return _ab (_c ,_bf ,_d );};func _gbg (_eff ,_cc []rune ,_eed int )int {for len (_cc )> 0{switch _cc [0]{default:if len (_eff )==0{return -1;
};if _eff [0]!=_cc [0]{return _gbg (_eff [1:],_cc ,_eed +1);};case '?':if len (_eff )==0{return -1;};case '*':if len (_eff )==0{return -1;};_abg :=_gbg (_eff ,_cc [1:],_eed );if _abg !=-1{return _eed ;}else {_abg =_gbg (_eff [1:],_cc ,_eed );if _abg !=-1{return _eed ;
}else {return -1;};};};_eff =_eff [1:];_cc =_cc [1:];};return _eed ;};func MatchSimple (pattern ,name string )bool {if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_f :=make ([]rune ,0,len (name ));_ee :=make ([]rune ,0,len (pattern ));
for _ ,_fa :=range name {_f =append (_f ,_fa );};for _ ,_b :=range pattern {_ee =append (_ee ,_b );};_g :=true ;return _ab (_f ,_ee ,_g );};