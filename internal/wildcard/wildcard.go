//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard ;func Index (pattern ,name string )(_cb int ){if pattern ==""||pattern =="\u002a"{return 0;};_gc :=make ([]rune ,0,len (name ));_bbf :=make ([]rune ,0,len (pattern ));for _ ,_ab :=range name {_gc =append (_gc ,_ab );};for _ ,_dc :=range pattern {_bbf =append (_bbf ,_dc );
};return _ga (_gc ,_bbf ,0);};func _ga (_cd ,_dd []rune ,_cdd int )int {for len (_dd )> 0{switch _dd [0]{default:if len (_cd )==0{return -1;};if _cd [0]!=_dd [0]{return _ga (_cd [1:],_dd ,_cdd +1);};case '?':if len (_cd )==0{return -1;};case '*':if len (_cd )==0{return -1;
};_eb :=_ga (_cd ,_dd [1:],_cdd );if _eb !=-1{return _cdd ;}else {_eb =_ga (_cd [1:],_dd ,_cdd );if _eb !=-1{return _cdd ;}else {return -1;};};};_cd =_cd [1:];_dd =_dd [1:];};return _cdd ;};func MatchSimple (pattern ,name string )bool {if pattern ==""{return name ==pattern ;
};if pattern =="\u002a"{return true ;};_f :=make ([]rune ,0,len (name ));_bb :=make ([]rune ,0,len (pattern ));for _ ,_fe :=range name {_f =append (_f ,_fe );};for _ ,_df :=range pattern {_bb =append (_bb ,_df );};_g :=true ;return _ce (_f ,_bb ,_g );};
func _ce (_feg ,_bf []rune ,_bdd bool )bool {for len (_bf )> 0{switch _bf [0]{default:if len (_feg )==0||_feg [0]!=_bf [0]{return false ;};case '?':if len (_feg )==0&&!_bdd {return false ;};case '*':return _ce (_feg ,_bf [1:],_bdd )||(len (_feg )> 0&&_ce (_feg [1:],_bf ,_bdd ));
};_feg =_feg [1:];_bf =_bf [1:];};return len (_feg )==0&&len (_bf )==0;};func Match (pattern ,name string )(_bd bool ){if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_e :=make ([]rune ,0,len (name ));_dfd :=make ([]rune ,0,len (pattern ));
for _ ,_c :=range name {_e =append (_e ,_c );};for _ ,_a :=range pattern {_dfd =append (_dfd ,_a );};_ca :=false ;return _ce (_e ,_dfd ,_ca );};