//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard ;func Index (pattern ,name string )(_eee int ){if pattern ==""||pattern =="\u002a"{return 0;};_be :=make ([]rune ,0,len (name ));_aa :=make ([]rune ,0,len (pattern ));for _ ,_bc :=range name {_be =append (_be ,_bc );};for _ ,_de :=range pattern {_aa =append (_aa ,_de );
};return _aeb (_be ,_aa ,0);};func MatchSimple (pattern ,name string )bool {if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_f :=make ([]rune ,0,len (name ));_e :=make ([]rune ,0,len (pattern ));for _ ,_ee :=range name {_f =append (_f ,_ee );
};for _ ,_g :=range pattern {_e =append (_e ,_g );};_ga :=true ;return _ae (_f ,_e ,_ga );};func _ae (_df ,_ac []rune ,_fe bool )bool {for len (_ac )> 0{switch _ac [0]{default:if len (_df )==0||_df [0]!=_ac [0]{return false ;};case '?':if len (_df )==0&&!_fe {return false ;
};case '*':return _ae (_df ,_ac [1:],_fe )||(len (_df )> 0&&_ae (_df [1:],_ac ,_fe ));};_df =_df [1:];_ac =_ac [1:];};return len (_df )==0&&len (_ac )==0;};func _aeb (_ff ,_fd []rune ,_cg int )int {for len (_fd )> 0{switch _fd [0]{default:if len (_ff )==0{return -1;
};if _ff [0]!=_fd [0]{return _aeb (_ff [1:],_fd ,_cg +1);};case '?':if len (_ff )==0{return -1;};case '*':if len (_ff )==0{return -1;};_cf :=_aeb (_ff ,_fd [1:],_cg );if _cf !=-1{return _cg ;}else {_cf =_aeb (_ff [1:],_fd ,_cg );if _cf !=-1{return _cg ;
}else {return -1;};};};_ff =_ff [1:];_fd =_fd [1:];};return _cg ;};func Match (pattern ,name string )(_d bool ){if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_gc :=make ([]rune ,0,len (name ));_c :=make ([]rune ,0,len (pattern ));
for _ ,_eg :=range name {_gc =append (_gc ,_eg );};for _ ,_ab :=range pattern {_c =append (_c ,_ab );};_ed :=false ;return _ae (_gc ,_c ,_ed );};