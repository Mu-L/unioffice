//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard ;func _af (_fgd ,_ad []rune ,_dc int )int {for len (_ad )> 0{switch _ad [0]{default:if len (_fgd )==0{return -1;};if _fgd [0]!=_ad [0]{return _af (_fgd [1:],_ad ,_dc +1);};case '?':if len (_fgd )==0{return -1;};case '*':if len (_fgd )==0{return -1;
};_fc :=_af (_fgd ,_ad [1:],_dc );if _fc !=-1{return _dc ;}else {_fc =_af (_fgd [1:],_ad ,_dc );if _fc !=-1{return _dc ;}else {return -1;};};};_fgd =_fgd [1:];_ad =_ad [1:];};return _dc ;};func _bb (_da ,_gb []rune ,_gg bool )bool {for len (_gb )> 0{switch _gb [0]{default:if len (_da )==0||_da [0]!=_gb [0]{return false ;
};case '?':if len (_da )==0&&!_gg {return false ;};case '*':return _bb (_da ,_gb [1:],_gg )||(len (_da )> 0&&_bb (_da [1:],_gb ,_gg ));};_da =_da [1:];_gb =_gb [1:];};return len (_da )==0&&len (_gb )==0;};func Match (pattern ,name string )(_gd bool ){if pattern ==""{return name ==pattern ;
};if pattern =="\u002a"{return true ;};_f :=make ([]rune ,0,len (name ));_fg :=make ([]rune ,0,len (pattern ));for _ ,_cc :=range name {_f =append (_f ,_cc );};for _ ,_ge :=range pattern {_fg =append (_fg ,_ge );};_e :=false ;return _bb (_f ,_fg ,_e );
};func MatchSimple (pattern ,name string )bool {if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_d :=make ([]rune ,0,len (name ));_c :=make ([]rune ,0,len (pattern ));for _ ,_gf :=range name {_d =append (_d ,_gf );};for _ ,_gfd :=range pattern {_c =append (_c ,_gfd );
};_dbc :=true ;return _bb (_d ,_c ,_dbc );};func Index (pattern ,name string )(_eg int ){if pattern ==""||pattern =="\u002a"{return 0;};_bg :=make ([]rune ,0,len (name ));_de :=make ([]rune ,0,len (pattern ));for _ ,_geg :=range name {_bg =append (_bg ,_geg );
};for _ ,_egc :=range pattern {_de =append (_de ,_egc );};return _af (_bg ,_de ,0);};