//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard ;func _gfb (_bd ,_cff []rune ,_dc int )int {for len (_cff )> 0{switch _cff [0]{default:if len (_bd )==0{return -1;};if _bd [0]!=_cff [0]{return _gfb (_bd [1:],_cff ,_dc +1);};case '?':if len (_bd )==0{return -1;};case '*':if len (_bd )==0{return -1;
};_ea :=_gfb (_bd ,_cff [1:],_dc );if _ea !=-1{return _dc ;}else {_ea =_gfb (_bd [1:],_cff ,_dc );if _ea !=-1{return _dc ;}else {return -1;};};};_bd =_bd [1:];_cff =_cff [1:];};return _dc ;};func _cda (_cb ,_bgf []rune ,_gf bool )bool {for len (_bgf )> 0{switch _bgf [0]{default:if len (_cb )==0||_cb [0]!=_bgf [0]{return false ;
};case '?':if len (_cb )==0&&!_gf {return false ;};case '*':return _cda (_cb ,_bgf [1:],_gf )||(len (_cb )> 0&&_cda (_cb [1:],_bgf ,_gf ));};_cb =_cb [1:];_bgf =_bgf [1:];};return len (_cb )==0&&len (_bgf )==0;};func Index (pattern ,name string )(_gfd int ){if pattern ==""||pattern =="\u002a"{return 0;
};_bb :=make ([]rune ,0,len (name ));_cea :=make ([]rune ,0,len (pattern ));for _ ,_dge :=range name {_bb =append (_bb ,_dge );};for _ ,_db :=range pattern {_cea =append (_cea ,_db );};return _gfb (_bb ,_cea ,0);};func MatchSimple (pattern ,name string )bool {if pattern ==""{return name ==pattern ;
};if pattern =="\u002a"{return true ;};_e :=make ([]rune ,0,len (name ));_ce :=make ([]rune ,0,len (pattern ));for _ ,_b :=range name {_e =append (_e ,_b );};for _ ,_ca :=range pattern {_ce =append (_ce ,_ca );};_cf :=true ;return _cda (_e ,_ce ,_cf );
};func Match (pattern ,name string )(_cg bool ){if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_d :=make ([]rune ,0,len (name ));_fa :=make ([]rune ,0,len (pattern ));for _ ,_bg :=range name {_d =append (_d ,_bg );};for _ ,_df :=range pattern {_fa =append (_fa ,_df );
};_g :=false ;return _cda (_d ,_fa ,_g );};