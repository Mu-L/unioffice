//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

/*
Package document provides creation, reading, and writing of ECMA 376 Open
Office XML documents.

Example:

	doc := document.New()
	para := doc.AddParagraph()
	run := para.AddRun()
	run.SetText("foo")
	doc.SaveToFile("foo.docx")
*/
package document ;import (_g "archive/zip";_af "bytes";_da "errors";_ede "fmt";_c "github.com/unidoc/unioffice";_dd "github.com/unidoc/unioffice/color";_aee "github.com/unidoc/unioffice/common";_daf "github.com/unidoc/unioffice/common/axcontrol";_ec "github.com/unidoc/unioffice/common/logger";
_de "github.com/unidoc/unioffice/common/tempstorage";_ce "github.com/unidoc/unioffice/internal/formatutils";_efc "github.com/unidoc/unioffice/internal/license";_ebf "github.com/unidoc/unioffice/measurement";_ba "github.com/unidoc/unioffice/schema/schemas.microsoft.com/office/activeX";
_bb "github.com/unidoc/unioffice/schema/soo/dml";_fd "github.com/unidoc/unioffice/schema/soo/dml/chart";_fe "github.com/unidoc/unioffice/schema/soo/dml/picture";_bg "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_gc "github.com/unidoc/unioffice/schema/soo/pkg/relationships";
_eb "github.com/unidoc/unioffice/schema/soo/wml";_cg "github.com/unidoc/unioffice/schema/urn/schemas_microsoft_com/vml";_ad "github.com/unidoc/unioffice/vmldrawing";_f "github.com/unidoc/unioffice/zippkg";_dc "image";_b "image/jpeg";_ab "io";_d "math/rand";
_eg "os";_ef "path/filepath";_a "regexp";_ae "strings";_ed "unicode";);

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_gbbf RunProperties )CharacterSpacingMeasure ()string {if _dafe :=_gbbf ._fdggb .Spacing ;_dafe !=nil {_cabd :=_dafe .ValAttr ;if _cabd .ST_UniversalMeasure !=nil {return *_cabd .ST_UniversalMeasure ;};};return "";};

// AddDrawingAnchored adds an anchored (floating) drawing from an ImageRef.
func (_adfcb Run )AddDrawingAnchored (img _aee .ImageRef )(AnchoredDrawing ,error ){_acfgb :=_adfcb .newIC ();_acfgb .Drawing =_eb .NewCT_Drawing ();_eadbfg :=_eb .NewWdAnchor ();_bcdc :=AnchoredDrawing {_adfcb ._ecdb ,_eadbfg };_eadbfg .SimplePosAttr =_c .Bool (false );
_eadbfg .AllowOverlapAttr =true ;_eadbfg .CNvGraphicFramePr =_bb .NewCT_NonVisualGraphicFrameProperties ();_acfgb .Drawing .Anchor =append (_acfgb .Drawing .Anchor ,_eadbfg );_eadbfg .Graphic =_bb .NewGraphic ();_eadbfg .Graphic .GraphicData =_bb .NewCT_GraphicalObjectData ();
_eadbfg .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";
_eadbfg .SimplePos .XAttr .ST_CoordinateUnqualified =_c .Int64 (0);_eadbfg .SimplePos .YAttr .ST_CoordinateUnqualified =_c .Int64 (0);_eadbfg .PositionH .RelativeFromAttr =_eb .WdST_RelFromHPage ;_eadbfg .PositionH .Choice =&_eb .WdCT_PosHChoice {};_eadbfg .PositionH .Choice .PosOffset =_c .Int32 (0);
_eadbfg .PositionV .RelativeFromAttr =_eb .WdST_RelFromVPage ;_eadbfg .PositionV .Choice =&_eb .WdCT_PosVChoice {};_eadbfg .PositionV .Choice .PosOffset =_c .Int32 (0);_eadbfg .Extent .CxAttr =int64 (float64 (img .Size ().X *_ebf .Pixel72 )/_ebf .EMU );
_eadbfg .Extent .CyAttr =int64 (float64 (img .Size ().Y *_ebf .Pixel72 )/_ebf .EMU );_eadbfg .Choice =&_eb .WdEG_WrapTypeChoice {};_eadbfg .Choice .WrapSquare =_eb .NewWdCT_WrapSquare ();_eadbfg .Choice .WrapSquare .WrapTextAttr =_eb .WdST_WrapTextBothSides ;
_beeg :=0x7FFFFFFF&_d .Uint32 ();_eadbfg .DocPr .IdAttr =_beeg ;_efab :=_fe .NewPic ();_efab .NvPicPr .CNvPr .IdAttr =_beeg ;_gedce :=img .RelID ();if _gedce ==""{return _bcdc ,_da .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");
};_eadbfg .Graphic .GraphicData .Any =append (_eadbfg .Graphic .GraphicData .Any ,_efab );_efab .BlipFill =_bb .NewCT_BlipFillProperties ();_efab .BlipFill .Blip =_bb .NewCT_Blip ();_efab .BlipFill .Blip .EmbedAttr =&_gedce ;_efab .BlipFill .Stretch =_bb .NewCT_StretchInfoProperties ();
_efab .BlipFill .Stretch .FillRect =_bb .NewCT_RelativeRect ();_efab .SpPr =_bb .NewCT_ShapeProperties ();_efab .SpPr .Xfrm =_bb .NewCT_Transform2D ();_efab .SpPr .Xfrm .Off =_bb .NewCT_Point2D ();_efab .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_c .Int64 (0);
_efab .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_c .Int64 (0);_efab .SpPr .Xfrm .Ext =_bb .NewCT_PositiveSize2D ();_efab .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_ebf .Point );_efab .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_ebf .Point );
_efab .SpPr .PrstGeom =_bb .NewCT_PresetGeometry2D ();_efab .SpPr .PrstGeom .PrstAttr =_bb .ST_ShapeTypeRect ;return _bcdc ,nil ;};const (OnOffValueUnset OnOffValue =iota ;OnOffValueOff ;OnOffValueOn ;);

// PossibleValues returns the possible values for a FormFieldTypeDropDown.
func (_ggcg FormField )PossibleValues ()[]string {if _ggcg ._bbdab .DdList ==nil {return nil ;};_bbaaa :=[]string {};for _ ,_dcdae :=range _ggcg ._bbdab .DdList .ListEntry {if _dcdae ==nil {continue ;};_bbaaa =append (_bbaaa ,_dcdae .ValAttr );};return _bbaaa ;
};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_gcga TableStyleProperties )SetCellSpacingPercent (pct float64 ){_gcga ._bbdb .TblCellSpacing =_eb .NewCT_TblWidth ();_gcga ._bbdb .TblCellSpacing .TypeAttr =_eb .ST_TblWidthPct ;_gcga ._bbdb .TblCellSpacing .WAttr =&_eb .ST_MeasurementOrPercent {};
_gcga ._bbdb .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_gcga ._bbdb .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (pct *50));};

// PutNodeAfter put node to position after relativeTo.
func (_cdbfb *Document )PutNodeAfter (relativeTo ,node Node ){_cdbfb .putNode (relativeTo ,node ,false )};

// Cell is a table cell within a document (not a spreadsheet)
type Cell struct{_dcda *Document ;_cgga *_eb .CT_Tc ;};var _abe =[...]uint8 {0,20,37,58,79};

// SetUISortOrder controls the order the style is displayed in the UI.
func (_daaf Style )SetUISortOrder (order int ){_daaf ._dadg .UiPriority =_eb .NewCT_DecimalNumber ();_daaf ._dadg .UiPriority .ValAttr =int64 (order );};

// BoldValue returns the precise nature of the bold setting (unset, off or on).
func (_gaebe RunProperties )BoldValue ()OnOffValue {return _ecbef (_gaebe ._fdggb .B )};

// SetBefore sets the spacing that comes before the paragraph.
func (_eegcd ParagraphSpacing )SetBefore (before _ebf .Distance ){_eegcd ._adcd .BeforeAttr =&_bg .ST_TwipsMeasure {};_eegcd ._adcd .BeforeAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (before /_ebf .Twips ));};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_cbgg TableProperties )SetCellSpacingAuto (){_cbgg ._ggcad .TblCellSpacing =_eb .NewCT_TblWidth ();_cbgg ._ggcad .TblCellSpacing .TypeAttr =_eb .ST_TblWidthAuto ;};

// SetStrict is a shortcut for document.SetConformance,
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_fceae Document )SetStrict (strict bool ){if strict {_fceae ._cbd .ConformanceAttr =_bg .ST_ConformanceClassStrict ;}else {_fceae ._cbd .ConformanceAttr =_bg .ST_ConformanceClassTransitional ;};};

// SetTop sets the cell top margin
func (_ega CellMargins )SetTop (d _ebf .Distance ){_ega ._aag .Top =_eb .NewCT_TblWidth ();_afe (_ega ._aag .Top ,d );};

// SetHorizontalBanding controls the conditional formatting for horizontal banding.
func (_gbfae TableLook )SetHorizontalBanding (on bool ){if !on {_gbfae ._bcdcb .NoHBandAttr =&_bg .ST_OnOff {};_gbfae ._bcdcb .NoHBandAttr .ST_OnOff1 =_bg .ST_OnOff1On ;}else {_gbfae ._bcdcb .NoHBandAttr =&_bg .ST_OnOff {};_gbfae ._bcdcb .NoHBandAttr .ST_OnOff1 =_bg .ST_OnOff1Off ;
};};func _edaf (_dgfd []*_eb .EG_ContentBlockContent ,_begc *TableInfo )[]TextItem {_bcee :=[]TextItem {};for _ ,_bbcb :=range _dgfd {if _egegb :=_bbcb .Sdt ;_egegb !=nil {if _cfebb :=_egegb .SdtContent ;_cfebb !=nil {_bcee =append (_bcee ,_ecgc (_cfebb .P ,_begc ,nil )...);
};};_bcee =append (_bcee ,_ecgc (_bbcb .P ,_begc ,nil )...);for _ ,_aefg :=range _bbcb .Tbl {for _acaf ,_afeb :=range _aefg .EG_ContentRowContent {for _ ,_adea :=range _afeb .Tr {for _cbfab ,_edfee :=range _adea .EG_ContentCellContent {for _ ,_cedd :=range _edfee .Tc {_gead :=&TableInfo {Table :_aefg ,Row :_adea ,Cell :_cedd ,RowIndex :_acaf ,ColIndex :_cbfab };
for _ ,_deebb :=range _cedd .EG_BlockLevelElts {_bcee =append (_bcee ,_edaf (_deebb .EG_ContentBlockContent ,_gead )...);};};};};};};};return _bcee ;};

// Footers returns the footers defined in the document.
func (_bfe *Document )Footers ()[]Footer {_gcgf :=[]Footer {};for _ ,_bgf :=range _bfe ._fcga {_gcgf =append (_gcgf ,Footer {_bfe ,_bgf });};return _gcgf ;};

// SetStrikeThrough sets the run to strike-through.
func (_ggcd RunProperties )SetStrikeThrough (b bool ){if !b {_ggcd ._fdggb .Strike =nil ;}else {_ggcd ._fdggb .Strike =_eb .NewCT_OnOff ();};};

// Properties returns the cell properties.
func (_dag Cell )Properties ()CellProperties {if _dag ._cgga .TcPr ==nil {_dag ._cgga .TcPr =_eb .NewCT_TcPr ();};return CellProperties {_dag ._cgga .TcPr };};

// ParagraphSpacing controls the spacing for a paragraph and its lines.
type ParagraphSpacing struct{_adcd *_eb .CT_Spacing };

// Numbering return numbering that being use by paragraph.
func (_acca Paragraph )Numbering ()Numbering {_acca .ensurePPr ();_ebef :=NewNumbering ();if _acca ._ggec .PPr .NumPr !=nil {_bdgf :=int64 (-1);_adcfd :=int64 (-1);if _acca ._ggec .PPr .NumPr .NumId !=nil {_bdgf =_acca ._ggec .PPr .NumPr .NumId .ValAttr ;
};for _ ,_baba :=range _acca ._ddfge .Numbering ._aedgf .Num {if _bdgf < 0{break ;};if _baba .NumIdAttr ==_bdgf {if _baba .AbstractNumId !=nil {_adcfd =_baba .AbstractNumId .ValAttr ;_ebef ._aedgf .Num =append (_ebef ._aedgf .Num ,_baba );break ;};};};
for _ ,_aebb :=range _acca ._ddfge .Numbering ._aedgf .AbstractNum {if _adcfd < 0{break ;};if _aebb .AbstractNumIdAttr ==_adcfd {_ebef ._aedgf .AbstractNum =append (_ebef ._aedgf .AbstractNum ,_aebb );break ;};};};return _ebef ;};func _aegb (_fefbd *_eb .CT_P ,_eegb map[string ]string ){for _ ,_fedcd :=range _fefbd .EG_PContent {if _fedcd .Hyperlink !=nil &&_fedcd .Hyperlink .IdAttr !=nil {if _agac ,_febb :=_eegb [*_fedcd .Hyperlink .IdAttr ];
_febb {*_fedcd .Hyperlink .IdAttr =_agac ;};};};};

// AddParagraph adds a new paragraph to the document body.
func (_efdd *Document )AddParagraph ()Paragraph {_cgbd :=_eb .NewEG_BlockLevelElts ();_efdd ._cbd .Body .EG_BlockLevelElts =append (_efdd ._cbd .Body .EG_BlockLevelElts ,_cgbd );_agdb :=_eb .NewEG_ContentBlockContent ();_cgbd .EG_ContentBlockContent =append (_cgbd .EG_ContentBlockContent ,_agdb );
_bgfd :=_eb .NewCT_P ();_agdb .P =append (_agdb .P ,_bgfd );return Paragraph {_efdd ,_bgfd };};

// TableWidth controls width values in table settings.
type TableWidth struct{_fgee *_eb .CT_TblWidth };func _gggea ()*_cg .OfcLock {_baae :=_cg .NewOfcLock ();_baae .ExtAttr =_cg .ST_ExtEdit ;_baae .TextAttr =_bg .ST_TrueFalseTrue ;_baae .ShapetypeAttr =_bg .ST_TrueFalseTrue ;return _baae ;};

// ExtractFromFooter returns text from the document footer as an array of TextItems.
func ExtractFromFooter (footer *_eb .Ftr )[]TextItem {return _edaf (footer .EG_ContentBlockContent ,nil )};

// Font returns the name of paragraph font family.
func (_gdgeg ParagraphProperties )Font ()string {if _gacdgf :=_gdgeg ._fbde .RPr .RFonts ;_gacdgf !=nil {if _gacdgf .AsciiAttr !=nil {return *_gacdgf .AsciiAttr ;}else if _gacdgf .HAnsiAttr !=nil {return *_gacdgf .HAnsiAttr ;}else if _gacdgf .CsAttr !=nil {return *_gacdgf .CsAttr ;
};};return "";};

// X returns the inner wrapped XML type.
func (_ecc Bookmark )X ()*_eb .CT_Bookmark {return _ecc ._agc };

// SetFirstColumn controls the conditional formatting for the first column in a table.
func (_abeg TableLook )SetFirstColumn (on bool ){if !on {_abeg ._bcdcb .FirstColumnAttr =&_bg .ST_OnOff {};_abeg ._bcdcb .FirstColumnAttr .ST_OnOff1 =_bg .ST_OnOff1Off ;}else {_abeg ._bcdcb .FirstColumnAttr =&_bg .ST_OnOff {};_abeg ._bcdcb .FirstColumnAttr .ST_OnOff1 =_bg .ST_OnOff1On ;
};};func (_ebea Paragraph )addFldChar ()*_eb .CT_FldChar {_geeag :=_ebea .AddRun ();_affbg :=_geeag .X ();_cgfd :=_eb .NewEG_RunInnerContent ();_dgffcc :=_eb .NewCT_FldChar ();_cgfd .FldChar =_dgffcc ;_affbg .EG_RunInnerContent =append (_affbg .EG_RunInnerContent ,_cgfd );
return _dgffcc ;};

// Validate validates the structure and in cases where it't possible, the ranges
// of elements within a document. A validation error dones't mean that the
// document won't work in MS Word or LibreOffice, but it's worth checking into.
func (_fdac *Document )Validate ()error {if _fdac ==nil ||_fdac ._cbd ==nil {return _da .New ("\u0064o\u0063\u0075m\u0065\u006e\u0074\u0020n\u006f\u0074\u0020i\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0065d \u0063\u006f\u0072r\u0065\u0063t\u006c\u0079\u002c\u0020\u006e\u0069l\u0020\u0062a\u0073\u0065");
};for _ ,_eaafe :=range []func ()error {_fdac .validateTableCells ,_fdac .validateBookmarks }{if _edac :=_eaafe ();_edac !=nil {return _edac ;};};if _aadg :=_fdac ._cbd .Validate ();_aadg !=nil {return _aadg ;};return nil ;};

// GetChartSpaceByRelId returns a *crt.ChartSpace with the associated relation ID in the
// document.
func (_dbdg *Document )GetChartSpaceByRelId (relId string )*_fd .ChartSpace {_degb :=_dbdg ._ada .GetTargetByRelId (relId );for _ ,_bgca :=range _dbdg ._dac {if _degb ==_bgca .Target (){return _bgca ._aeed ;};};return nil ;};

// Index returns the index of the header within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_geefc Header )Index ()int {for _ffgbe ,_agbe :=range _geefc ._dcdf ._abg {if _agbe ==_geefc ._ccaed {return _ffgbe ;};};return -1;};

// NewWatermarkText generates a new WatermarkText.
func NewWatermarkText ()WatermarkText {_fcbf :=_cg .NewShapetype ();_egdag :=_cg .NewEG_ShapeElements ();_egdag .Formulas =_cgded ();_egdag .Path =_adba ();_egdag .Textpath =_gadc ();_egdag .Handles =_ggbba ();_egdag .Lock =_gggea ();_fcbf .EG_ShapeElements =[]*_cg .EG_ShapeElements {_egdag };
var (_cfcg ="_\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0031\u0033\u0036";_bdeg ="2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030";_fefcg =float32 (136.0);_bdfe ="\u0031\u0030\u00380\u0030";_dcabf ="m\u0040\u0037\u002c\u006c\u0040\u0038,\u006d\u0040\u0035\u002c\u0032\u0031\u0036\u0030\u0030l\u0040\u0036\u002c2\u00316\u0030\u0030\u0065";
);_fcbf .IdAttr =&_cfcg ;_fcbf .CoordsizeAttr =&_bdeg ;_fcbf .SptAttr =&_fefcg ;_fcbf .AdjAttr =&_bdfe ;_fcbf .PathAttr =&_dcabf ;_afba :=_cg .NewShape ();_abgce :=_cg .NewEG_ShapeElements ();_abgce .Textpath =_cecad ();_afba .EG_ShapeElements =[]*_cg .EG_ShapeElements {_abgce };
var (_afad ="\u0050\u006f\u0077\u0065\u0072\u0050l\u0075\u0073\u0057\u0061\u0074\u0065\u0072\u004d\u0061\u0072\u006b\u004f\u0062j\u0065\u0063\u0074\u0031\u0033\u0036\u00380\u0030\u0038\u0038\u0036";_adagg ="\u005f\u0078\u00300\u0030\u0030\u005f\u0073\u0032\u0030\u0035\u0031";
_gdbe ="\u0023\u005f\u00780\u0030\u0030\u0030\u005f\u0074\u0031\u0033\u0036";_dgdg ="";_dafd ="\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u003a\u0061\u0062\u0073\u006f\u006c\u0075\u0074\u0065\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065f\u0074:\u0030\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074o\u0070\u003a\u0030\u003b\u0077\u0069\u0064\u0074\u0068\u003a\u0034\u0036\u0038\u0070\u0074;\u0068\u0065\u0069\u0067\u0068\u0074\u003a\u0032\u0033\u0034\u0070\u0074\u003b\u007a\u002d\u0069\u006ede\u0078\u003a\u002d\u0032\u0035\u0031\u0036\u0035\u0031\u0030\u0037\u0032\u003b\u006d\u0073\u006f\u002d\u0077\u0072\u0061\u0070\u002d\u0065\u0064\u0069\u0074\u0065\u0064\u003a\u0066\u003b\u006d\u0073\u006f\u002d\u0077\u0069\u0064\u0074\u0068\u002d\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0030\u003b\u006d\u0073\u006f\u002d\u0068\u0065\u0069\u0067h\u0074-p\u0065\u0072\u0063\u0065\u006et\u003a\u0030\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070o\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u002d\u0072\u0065l\u0061\u0074\u0069\u0076\u0065:\u006d\u0061\u0072\u0067\u0069n\u003b\u006d\u0073o\u002d\u0070\u006f\u0073\u0069\u0074\u0069o\u006e-\u0076\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076\u0065r\u0074\u0069\u0063\u0061\u006c\u002d\u0072e\u006c\u0061\u0074i\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e\u003b\u006d\u0073\u006f\u002d\u0077\u0069\u0064\u0074\u0068\u002d\u0070\u0065\u0072\u0063e\u006e\u0074\u003a\u0030\u003b\u006d\u0073\u006f\u002dh\u0065\u0069\u0067\u0068t\u002dp\u0065\u0072\u0063\u0065\u006et\u003a0";
_faee ="\u0073\u0069\u006c\u0076\u0065\u0072";);_afba .IdAttr =&_afad ;_afba .SpidAttr =&_adagg ;_afba .TypeAttr =&_gdbe ;_afba .AltAttr =&_dgdg ;_afba .StyleAttr =&_dafd ;_afba .AllowincellAttr =_bg .ST_TrueFalseFalse ;_afba .FillcolorAttr =&_faee ;_afba .StrokedAttr =_bg .ST_TrueFalseFalse ;
_gefc :=_eb .NewCT_Picture ();_gefc .Any =[]_c .Any {_fcbf ,_afba };return WatermarkText {_ggfc :_gefc ,_caafd :_afba ,_fdbc :_fcbf };};

// ItalicValue returns the precise nature of the italic setting (unset, off or on).
func (_cbba RunProperties )ItalicValue ()OnOffValue {return _ecbef (_cbba ._fdggb .I )};

// Paragraphs returns the paragraphs defined in a footer.
func (_gdeac Footer )Paragraphs ()[]Paragraph {_eggg :=[]Paragraph {};for _ ,_dabdc :=range _gdeac ._cece .EG_ContentBlockContent {for _ ,_cdcddd :=range _dabdc .P {_eggg =append (_eggg ,Paragraph {_gdeac ._gfag ,_cdcddd });};};for _ ,_ggab :=range _gdeac .Tables (){for _ ,_bbge :=range _ggab .Rows (){for _ ,_abdc :=range _bbge .Cells (){_eggg =append (_eggg ,_abdc .Paragraphs ()...);
};};};return _eggg ;};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_fdc CellBorders )SetInsideVertical (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_fdc ._df .InsideV =_eb .NewCT_Border ();_bdba (_fdc ._df .InsideV ,t ,c ,thickness );};

// Index returns the index of the footer within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_ebgg Footer )Index ()int {for _edge ,_fgca :=range _ebgg ._gfag ._fcga {if _fgca ==_ebgg ._cece {return _edge ;};};return -1;};

// DrawingInline return a slice of InlineDrawings.
func (_dgbc Run )DrawingInline ()[]InlineDrawing {_gagd :=[]InlineDrawing {};for _ ,_febf :=range _dgbc ._edbgc .EG_RunInnerContent {if _febf .Drawing ==nil {continue ;};for _ ,_ceaf :=range _febf .Drawing .Inline {_gagd =append (_gagd ,InlineDrawing {_dgbc ._ecdb ,_ceaf });
};};return _gagd ;};

// NewSettings constructs a new empty Settings
func NewSettings ()Settings {_bedf :=_eb .NewSettings ();_bedf .Compat =_eb .NewCT_Compat ();_afedg :=_eb .NewCT_CompatSetting ();_afedg .NameAttr =_c .String ("\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074y\u004d\u006f\u0064\u0065");
_afedg .UriAttr =_c .String ("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006fff\u0069\u0063\u0065/\u0077o\u0072\u0064");_afedg .ValAttr =_c .String ("\u0031\u0035");
_bedf .Compat .CompatSetting =append (_bedf .Compat .CompatSetting ,_afedg );return Settings {_bedf };};

// SetYOffset sets the Y offset for an image relative to the origin.
func (_fce AnchoredDrawing )SetYOffset (y _ebf .Distance ){_fce ._ac .PositionV .Choice =&_eb .WdCT_PosVChoice {};_fce ._ac .PositionV .Choice .PosOffset =_c .Int32 (int32 (y /_ebf .EMU ));};

// Name returns the name of the bookmark whcih is the document unique ID that
// identifies the bookmark.
func (_ccf Bookmark )Name ()string {return _ccf ._agc .NameAttr };

// Properties returns the numbering level paragraph properties.
func (_bece NumberingLevel )Properties ()ParagraphStyleProperties {if _bece ._cgbe .PPr ==nil {_bece ._cgbe .PPr =_eb .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_bece ._cgbe .PPr };};func _ddaa (_bgc *_eb .CT_TblWidth ,_ge float64 ){_bgc .TypeAttr =_eb .ST_TblWidthPct ;
_bgc .WAttr =&_eb .ST_MeasurementOrPercent {};_bgc .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_bgc .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (_ge *50));};

// AddText adds text to a run.
func (_gdfda Run )AddText (s string ){_fgdab :=_eb .NewEG_RunInnerContent ();_gdfda ._edbgc .EG_RunInnerContent =append (_gdfda ._edbgc .EG_RunInnerContent ,_fgdab );_fgdab .T =_eb .NewCT_Text ();if _c .NeedsSpacePreserve (s ){_aacc :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";
_fgdab .T .SpaceAttr =&_aacc ;};_fgdab .T .Content =s ;};

// Italic returns true if paragraph font is italic.
func (_fcffb ParagraphProperties )Italic ()bool {_ebcea :=_fcffb ._fbde .RPr ;return _bbea (_ebcea .I )||_bbea (_ebcea .ICs );};

// AddCell adds a cell to a row and returns it
func (_bcdad Row )AddCell ()Cell {_caeg :=_eb .NewEG_ContentCellContent ();_bcdad ._ecfe .EG_ContentCellContent =append (_bcdad ._ecfe .EG_ContentCellContent ,_caeg );_bgee :=_eb .NewCT_Tc ();_caeg .Tc =append (_caeg .Tc ,_bgee );return Cell {_bcdad ._ceeae ,_bgee };
};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_fffecc TableProperties )SetCellSpacingPercent (pct float64 ){_fffecc ._ggcad .TblCellSpacing =_eb .NewCT_TblWidth ();_fffecc ._ggcad .TblCellSpacing .TypeAttr =_eb .ST_TblWidthPct ;_fffecc ._ggcad .TblCellSpacing .WAttr =&_eb .ST_MeasurementOrPercent {};
_fffecc ._ggcad .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_fffecc ._ggcad .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (pct *50));};

// SetKerning sets the run's font kerning.
func (_aeeb RunProperties )SetKerning (size _ebf .Distance ){_aeeb ._fdggb .Kern =_eb .NewCT_HpsMeasure ();_aeeb ._fdggb .Kern .ValAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (size /_ebf .HalfPoint ));};

// ReplaceTextByRegexp replace the text within node using regexp expression.
func (_abce *Node )ReplaceTextByRegexp (rgx *_a .Regexp ,newText string ){switch _beag :=_abce .X ().(type ){case *Paragraph :for _ ,_cbed :=range _beag .Runs (){for _ ,_fdgd :=range _cbed ._edbgc .EG_RunInnerContent {if _fdgd .T !=nil {_ecggaa :=_fdgd .T .Content ;
_ecggaa =rgx .ReplaceAllString (_ecggaa ,newText );_fdgd .T .Content =_ecggaa ;};};};};for _ ,_cgaf :=range _abce .Children {_cgaf .ReplaceTextByRegexp (rgx ,newText );};};

// Copy makes a deep copy of the document by saving and reading it back.
// It can be useful to avoid sharing common data between two documents.
func (_efdgb *Document )Copy ()(*Document ,error ){_edbe :=_af .NewBuffer ([]byte {});_eacf :=_efdgb .save (_edbe ,_efdgb ._fgd );if _eacf !=nil {return nil ,_eacf ;};_eeed :=_edbe .Bytes ();_gacg :=_af .NewReader (_eeed );return _aeda (_gacg ,int64 (_gacg .Len ()),_efdgb ._fgd );
};

// SetLayoutInCell sets the layoutInCell attribute of anchor.
func (_cec AnchoredDrawing )SetLayoutInCell (val bool ){_cec ._ac .LayoutInCellAttr =val };

// SetAll sets all of the borders to a given value.
func (_bcdaa TableBorders )SetAll (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_bcdaa .SetBottom (t ,c ,thickness );_bcdaa .SetLeft (t ,c ,thickness );_bcdaa .SetRight (t ,c ,thickness );_bcdaa .SetTop (t ,c ,thickness );_bcdaa .SetInsideHorizontal (t ,c ,thickness );
_bcdaa .SetInsideVertical (t ,c ,thickness );};

// Styles returns all styles.
func (_ebae Styles )Styles ()[]Style {_eecaa :=[]Style {};for _ ,_deba :=range _ebae ._gegd .Style {_eecaa =append (_eecaa ,Style {_deba });};return _eecaa ;};

// SetName marks sets a name attribute for a FormField.
func (_efgfc FormField )SetName (name string ){_eebe :=_eb .NewCT_FFName ();_eebe .ValAttr =&name ;_efgfc ._bbdab .Name =[]*_eb .CT_FFName {_eebe };};

// AddTable adds a table to the table cell.
func (_cd Cell )AddTable ()Table {_ddf :=_eb .NewEG_BlockLevelElts ();_cd ._cgga .EG_BlockLevelElts =append (_cd ._cgga .EG_BlockLevelElts ,_ddf );_afb :=_eb .NewEG_ContentBlockContent ();_ddf .EG_ContentBlockContent =append (_ddf .EG_ContentBlockContent ,_afb );
_cff :=_eb .NewCT_Tbl ();_afb .Tbl =append (_afb .Tbl ,_cff );return Table {_cd ._dcda ,_cff };};

// GetNumberingLevelByIds returns a NumberingLevel by its NumId and LevelId attributes
// or an empty one if not found.
func (_gcdgf *Document )GetNumberingLevelByIds (numId ,levelId int64 )NumberingLevel {for _ ,_fdge :=range _gcdgf .Numbering ._aedgf .Num {if _fdge !=nil &&_fdge .NumIdAttr ==numId {_bbdf :=_fdge .AbstractNumId .ValAttr ;for _ ,_gfeg :=range _gcdgf .Numbering ._aedgf .AbstractNum {if _gfeg .AbstractNumIdAttr ==_bbdf {if _gfeg .NumStyleLink !=nil &&len (_gfeg .Lvl )==0{if _ffda ,_cbbdd :=_gcdgf .Styles .SearchStyleById (_gfeg .NumStyleLink .ValAttr );
_cbbdd {if _ffda .ParagraphProperties ().NumId ()> -1{return _gcdgf .GetNumberingLevelByIds (_ffda .ParagraphProperties ().NumId (),levelId );};};};for _ ,_dfgf :=range _gfeg .Lvl {if _dfgf .IlvlAttr ==levelId {return NumberingLevel {_dfgf };};};};};};
};return NumberingLevel {};};

// SetThemeShade sets the shade based off the theme color.
func (_cdg Color )SetThemeShade (s uint8 ){_acd :=_ede .Sprintf ("\u0025\u0030\u0032\u0078",s );_cdg ._acg .ThemeShadeAttr =&_acd ;};

// X returns the inner wml.CT_PBdr
func (_adeg ParagraphBorders )X ()*_eb .CT_PBdr {return _adeg ._fafc };

// Borders allows controlling individual cell borders.
func (_ecf CellProperties )Borders ()CellBorders {if _ecf ._ced .TcBorders ==nil {_ecf ._ced .TcBorders =_eb .NewCT_TcBorders ();};return CellBorders {_ecf ._ced .TcBorders };};

// ExtractFromHeader returns text from the document header as an array of TextItems.
func ExtractFromHeader (header *_eb .Hdr )[]TextItem {return _edaf (header .EG_ContentBlockContent ,nil )};

// RemoveParagraph removes a paragraph from a footer.
func (_cagfe Header )RemoveParagraph (p Paragraph ){for _ ,_ffdbg :=range _cagfe ._ccaed .EG_ContentBlockContent {for _cafdf ,_abdb :=range _ffdbg .P {if _abdb ==p ._ggec {copy (_ffdbg .P [_cafdf :],_ffdbg .P [_cafdf +1:]);_ffdbg .P =_ffdbg .P [0:len (_ffdbg .P )-1];
return ;};};};};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_cbffef Paragraph )Style ()string {if _cbffef ._ggec .PPr !=nil &&_cbffef ._ggec .PPr .PStyle !=nil {return _cbffef ._ggec .PPr .PStyle .ValAttr ;};return "";};

// ParagraphProperties returns the paragraph properties controlling text formatting within the table.
func (_adefc TableConditionalFormatting )ParagraphProperties ()ParagraphStyleProperties {if _adefc ._eadcf .PPr ==nil {_adefc ._eadcf .PPr =_eb .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_adefc ._eadcf .PPr };};

// NewTableWidth returns a newly intialized TableWidth
func NewTableWidth ()TableWidth {return TableWidth {_eb .NewCT_TblWidth ()}};

// GetImage returns the ImageRef associated with an AnchoredDrawing.
func (_fc AnchoredDrawing )GetImage ()(_aee .ImageRef ,bool ){_fcg :=_fc ._ac .Graphic .GraphicData .Any ;if len (_fcg )> 0{_cge ,_aa :=_fcg [0].(*_fe .Pic );if _aa {if _cge .BlipFill !=nil &&_cge .BlipFill .Blip !=nil &&_cge .BlipFill .Blip .EmbedAttr !=nil {return _fc ._fa .GetImageByRelID (*_cge .BlipFill .Blip .EmbedAttr );
};};};return _aee .ImageRef {},false ;};

// SetDoubleStrikeThrough sets the run to double strike-through.
func (_egcgg RunProperties )SetDoubleStrikeThrough (b bool ){if !b {_egcgg ._fdggb .Dstrike =nil ;}else {_egcgg ._fdggb .Dstrike =_eb .NewCT_OnOff ();};};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_abdbb ParagraphSpacing )SetLineSpacing (d _ebf .Distance ,rule _eb .ST_LineSpacingRule ){if rule ==_eb .ST_LineSpacingRuleUnset {_abdbb ._adcd .LineRuleAttr =_eb .ST_LineSpacingRuleUnset ;_abdbb ._adcd .LineAttr =nil ;}else {_abdbb ._adcd .LineRuleAttr =rule ;
_abdbb ._adcd .LineAttr =&_eb .ST_SignedTwipsMeasure {};_abdbb ._adcd .LineAttr .Int64 =_c .Int64 (int64 (d /_ebf .Twips ));};};

// SetLayout controls the table layout. wml.ST_TblLayoutTypeAutofit corresponds
// to "Automatically resize to fit contents" being checked, while
// wml.ST_TblLayoutTypeFixed corresponds to it being unchecked.
func (_gbeg TableProperties )SetLayout (l _eb .ST_TblLayoutType ){if l ==_eb .ST_TblLayoutTypeUnset ||l ==_eb .ST_TblLayoutTypeAutofit {_gbeg ._ggcad .TblLayout =nil ;}else {_gbeg ._ggcad .TblLayout =_eb .NewCT_TblLayoutType ();_gbeg ._ggcad .TblLayout .TypeAttr =l ;
};};

// NewNumbering constructs a new numbering.
func NewNumbering ()Numbering {_gfbd :=_eb .NewNumbering ();return Numbering {_gfbd }};func (_fbea *Document )insertStyleFromNode (_gbgde Node ){if _gbgde .Style .X ()!=nil {if _ ,_adfc :=_fbea .Styles .SearchStyleById (_gbgde .Style .StyleID ());!_adfc {_fbea .Styles .InsertStyle (_gbgde .Style );
_bded :=_gbgde .Style .ParagraphProperties ();_fbea .insertNumberingFromStyleProperties (_gbgde ._cfgd .Numbering ,_bded );};};};

// X returns the inner wrapped XML type.
func (_cgfc Header )X ()*_eb .Hdr {return _cgfc ._ccaed };

// Footnotes returns the footnotes defined in the document.
func (_ecfd *Document )Footnotes ()[]Footnote {_gcf :=[]Footnote {};for _ ,_geb :=range _ecfd ._fbc .CT_Footnotes .Footnote {_gcf =append (_gcf ,Footnote {_ecfd ,_geb });};return _gcf ;};

// SetTarget sets the URL target of the hyperlink.
func (_bafb HyperLink )SetTarget (url string ){_gbead :=_bafb ._gcfd .AddHyperlink (url );_bafb ._fagd .IdAttr =_c .String (_aee .Relationship (_gbead ).ID ());_bafb ._fagd .AnchorAttr =nil ;};func _ecbef (_fcbba *_eb .CT_OnOff )OnOffValue {if _fcbba ==nil {return OnOffValueUnset ;
};if _fcbba .ValAttr !=nil &&_fcbba .ValAttr .Bool !=nil &&*_fcbba .ValAttr .Bool ==false {return OnOffValueOff ;};return OnOffValueOn ;};func _bdba (_fgbga *_eb .CT_Border ,_cbdg _eb .ST_Border ,_efgcc _dd .Color ,_geaf _ebf .Distance ){_fgbga .ValAttr =_cbdg ;
_fgbga .ColorAttr =&_eb .ST_HexColor {};if _efgcc .IsAuto (){_fgbga .ColorAttr .ST_HexColorAuto =_eb .ST_HexColorAutoAuto ;}else {_fgbga .ColorAttr .ST_HexColorRGB =_efgcc .AsRGBString ();};if _geaf !=_ebf .Zero {_fgbga .SzAttr =_c .Uint64 (uint64 (_geaf /_ebf .Point *8));
};};

// SetTableIndent sets the Table Indent from the Leading Margin
func (_cegc TableStyleProperties )SetTableIndent (ind _ebf .Distance ){_cegc ._bbdb .TblInd =_eb .NewCT_TblWidth ();_cegc ._bbdb .TblInd .TypeAttr =_eb .ST_TblWidthDxa ;_cegc ._bbdb .TblInd .WAttr =&_eb .ST_MeasurementOrPercent {};_cegc ._bbdb .TblInd .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};
_cegc ._bbdb .TblInd .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (ind /_ebf .Dxa ));};

// FindNodeByStyleId return slice of node base on style id.
func (_eeccc *Nodes )FindNodeByStyleId (styleId string )[]Node {_abaeb :=[]Node {};for _ ,_adgbf :=range _eeccc ._afgbd {switch _acdgg :=_adgbf ._beea .(type ){case *Paragraph :if _acdgg !=nil &&_acdgg .Style ()==styleId {_abaeb =append (_abaeb ,_adgbf );
};case *Table :if _acdgg !=nil &&_acdgg .Style ()==styleId {_abaeb =append (_abaeb ,_adgbf );};};_dacc :=Nodes {_afgbd :_adgbf .Children };_abaeb =append (_abaeb ,_dacc .FindNodeByStyleId (styleId )...);};return _abaeb ;};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_ebaga RunProperties )RStyle ()string {if _ebaga ._fdggb .RStyle !=nil {return _ebaga ._fdggb .RStyle .ValAttr ;};return "";};

// Footnote returns the footnote based on the ID; this can be used nicely with
// the run.IsFootnote() functionality.
func (_dccc *Document )Footnote (id int64 )Footnote {for _ ,_egba :=range _dccc .Footnotes (){if _egba .id ()==id {return _egba ;};};return Footnote {};};

// Append appends a document d0 to a document d1. All settings, headers and footers remain the same as in the document d0 if they exist there, otherwise they are taken from the d1.
func (_ccge *Document )Append (d1orig *Document )error {_dddb ,_fccef :=d1orig .Copy ();if _fccef !=nil {return _fccef ;};_ccge .DocBase =_ccge .DocBase .Append (_dddb .DocBase );if _dddb ._cbd .ConformanceAttr !=_bg .ST_ConformanceClassStrict {_ccge ._cbd .ConformanceAttr =_dddb ._cbd .ConformanceAttr ;
};_deg :=_ccge ._ada .X ().Relationship ;_fddb :=_dddb ._ada .X ().Relationship ;_geeg :=_dddb ._cbd .Body ;_eaec :=map[string ]string {};_eaae :=map[int64 ]int64 {};_aadd :=map[int64 ]int64 {};for _ ,_cgad :=range _fddb {_gdaf :=true ;_bcdg :=_cgad .IdAttr ;
_cgbdb :=_cgad .TargetAttr ;_aadgf :=_cgad .TypeAttr ;_fbcd :=_aadgf ==_c .ImageType ;_aeab :=_aadgf ==_c .HyperLinkType ;var _dagg string ;for _ ,_abbe :=range _deg {if _abbe .TypeAttr ==_aadgf &&_abbe .TargetAttr ==_cgbdb {_gdaf =false ;_dagg =_abbe .IdAttr ;
break ;};};if _fbcd {_cacd :="\u0077\u006f\u0072d\u002f"+_cgbdb ;for _ ,_fegbg :=range _dddb .DocBase .Images {if _fegbg .Target ()==_cacd {_adec ,_cacg :=_aee .ImageFromStorage (_fegbg .Path ());if _cacg !=nil {return _cacg ;};_cgcb ,_cacg :=_ccge .AddImage (_adec );
if _cacg !=nil {return _cacg ;};_dagg =_cgcb .RelID ();break ;};};}else if _gdaf {if _aeab {_afd :=_ccge ._ada .AddHyperlink (_cgbdb );_dagg =_aee .Relationship (_afd ).ID ();}else {_eacdc :=_ccge ._ada .AddRelationship (_cgbdb ,_aadgf );_dagg =_eacdc .X ().IdAttr ;
};};if _bcdg !=_dagg {_eaec [_bcdg ]=_dagg ;};};if _geeg .SectPr !=nil {for _ ,_ecd :=range _geeg .SectPr .EG_HdrFtrReferences {if _ecd .HeaderReference !=nil {if _cfga ,_ebfb :=_eaec [_ecd .HeaderReference .IdAttr ];_ebfb {_ecd .HeaderReference .IdAttr =_cfga ;
_ccge ._cgcc =append (_ccge ._cgcc ,_aee .NewRelationships ());};}else if _ecd .FooterReference !=nil {if _cace ,_fgda :=_eaec [_ecd .FooterReference .IdAttr ];_fgda {_ecd .FooterReference .IdAttr =_cace ;_ccge ._dde =append (_ccge ._dde ,_aee .NewRelationships ());
};};};};_gfa ,_bagag :=_ccge ._edd ,_dddb ._edd ;if _gfa !=nil {if _bagag !=nil {if _gfa .Endnote !=nil {if _bagag .Endnote !=nil {_ecab :=int64 (len (_gfa .Endnote )+1);for _ ,_ebdg :=range _bagag .Endnote {_ceg :=_ebdg .IdAttr ;if _ceg > 0{_ebdg .IdAttr =_ecab ;
_gfa .Endnote =append (_gfa .Endnote ,_ebdg );_aadd [_ceg ]=_ecab ;_ecab ++;};};};}else {_gfa .Endnote =_bagag .Endnote ;};};}else if _bagag !=nil {_gfa =_bagag ;};_ccge ._edd =_gfa ;_bcdd ,_cgdbg :=_ccge ._fbc ,_dddb ._fbc ;if _bcdd !=nil {if _cgdbg !=nil {if _bcdd .Footnote !=nil {if _cgdbg .Footnote !=nil {_dbec :=int64 (len (_bcdd .Footnote )+1);
for _ ,_deeb :=range _cgdbg .Footnote {_cfac :=_deeb .IdAttr ;if _cfac > 0{_deeb .IdAttr =_dbec ;_bcdd .Footnote =append (_bcdd .Footnote ,_deeb );_eaae [_cfac ]=_dbec ;_dbec ++;};};};}else {_bcdd .Footnote =_cgdbg .Footnote ;};};}else if _cgdbg !=nil {_bcdd =_cgdbg ;
};_ccge ._fbc =_bcdd ;for _ ,_effc :=range _geeg .EG_BlockLevelElts {for _ ,_cdfd :=range _effc .EG_ContentBlockContent {for _ ,_bdgb :=range _cdfd .P {_abgd (_bdgb ,_eaec );_aegb (_bdgb ,_eaec );_acef (_bdgb ,_eaae ,_aadd );};for _ ,_dfge :=range _cdfd .Tbl {_aaf (_dfge ,_eaec );
_bgge (_dfge ,_eaec );_egca (_dfge ,_eaae ,_aadd );};};};_ccge ._cbd .Body .EG_BlockLevelElts =append (_ccge ._cbd .Body .EG_BlockLevelElts ,_dddb ._cbd .Body .EG_BlockLevelElts ...);if _ccge ._cbd .Body .SectPr ==nil {_ccge ._cbd .Body .SectPr =_dddb ._cbd .Body .SectPr ;
}else {var _ggbg ,_bfcgf bool ;for _ ,_ecgb :=range _ccge ._cbd .Body .SectPr .EG_HdrFtrReferences {if _ecgb .HeaderReference !=nil {_ggbg =true ;}else if _ecgb .FooterReference !=nil {_bfcgf =true ;};};if !_ggbg {for _ ,_ffdc :=range _dddb ._cbd .Body .SectPr .EG_HdrFtrReferences {if _ffdc .HeaderReference !=nil {_ccge ._cbd .Body .SectPr .EG_HdrFtrReferences =append (_ccge ._cbd .Body .SectPr .EG_HdrFtrReferences ,_ffdc );
break ;};};};if !_bfcgf {for _ ,_eccg :=range _dddb ._cbd .Body .SectPr .EG_HdrFtrReferences {if _eccg .FooterReference !=nil {_ccge ._cbd .Body .SectPr .EG_HdrFtrReferences =append (_ccge ._cbd .Body .SectPr .EG_HdrFtrReferences ,_eccg );break ;};};};
if _ccge ._cbd .Body .SectPr .Cols ==nil &&_dddb ._cbd .Body .SectPr .Cols !=nil {_ccge ._cbd .Body .SectPr .Cols =_dddb ._cbd .Body .SectPr .Cols ;};};_fbaa :=_ccge .Numbering ._aedgf ;_dafaeb :=_dddb .Numbering ._aedgf ;if _fbaa ==nil &&_dafaeb !=nil {_fbaa =_dafaeb ;
};_ccge .Numbering ._aedgf =_fbaa ;if _ccge .Styles ._gegd ==nil &&_dddb .Styles ._gegd !=nil {_ccge .Styles ._gegd =_dddb .Styles ._gegd ;};_ccge ._ccfe =append (_ccge ._ccfe ,_dddb ._ccfe ...);_ccge ._cag =append (_ccge ._cag ,_dddb ._cag ...);if len (_ccge ._abg )==0{_ccge ._abg =_dddb ._abg ;
};if len (_ccge ._fcga )==0{_ccge ._fcga =_dddb ._fcga ;};_adgf :=_ccge ._ccc ;_feea :=_dddb ._ccc ;if _adgf !=nil {if _feea !=nil {if _adgf .Divs !=nil {if _feea .Divs !=nil {_adgf .Divs .Div =append (_adgf .Divs .Div ,_feea .Divs .Div ...);};}else {_adgf .Divs =_feea .Divs ;
};};_adgf .Frameset =nil ;}else if _feea !=nil {_adgf =_feea ;_adgf .Frameset =nil ;};_ccge ._ccc =_adgf ;_cdggd :=_ccge ._cbf ;_cdfdc :=_dddb ._cbf ;if _cdggd !=nil {if _cdfdc !=nil {if _cdggd .Font !=nil {if _cdfdc .Font !=nil {for _ ,_dgaeb :=range _cdfdc .Font {_cfbfb :=true ;
for _ ,_gaabf :=range _cdggd .Font {if _gaabf .NameAttr ==_dgaeb .NameAttr {_cfbfb =false ;break ;};};if _cfbfb {_cdggd .Font =append (_cdggd .Font ,_dgaeb );};};};}else {_cdggd .Font =_cdfdc .Font ;};};}else if _cdfdc !=nil {_cdggd =_cdfdc ;};_ccge ._cbf =_cdggd ;
return nil ;};func _bbea (_eaafg *_eb .CT_OnOff )bool {return _eaafg !=nil };

// SetOffset sets the offset of the image relative to the origin, which by
// default this is the top-left corner of the page. Offset is incompatible with
// SetAlignment, whichever is called last is applied.
func (_fcb AnchoredDrawing )SetOffset (x ,y _ebf .Distance ){_fcb .SetXOffset (x );_fcb .SetYOffset (y )};

// SetCalcOnExit marks if a FormField should be CalcOnExit or not.
func (_gfdd FormField )SetCalcOnExit (calcOnExit bool ){_bdgd :=_eb .NewCT_OnOff ();_bdgd .ValAttr =&_bg .ST_OnOff {Bool :&calcOnExit };_gfdd ._bbdab .CalcOnExit =[]*_eb .CT_OnOff {_bdgd };};

// SetUpdateFieldsOnOpen controls if fields are recalculated upon opening the
// document. This is useful for things like a table of contents as the library
// only adds the field code and relies on Word/LibreOffice to actually compute
// the content.
func (_dbaa Settings )SetUpdateFieldsOnOpen (b bool ){if !b {_dbaa ._afcae .UpdateFields =nil ;}else {_dbaa ._afcae .UpdateFields =_eb .NewCT_OnOff ();};};

// Nodes contains slice of Node element.
type Nodes struct{_afgbd []Node };

// SetSpacing sets the spacing that comes before and after the paragraph.
// Deprecated: See Spacing() instead which allows finer control.
func (_ccfba ParagraphProperties )SetSpacing (before ,after _ebf .Distance ){if _ccfba ._fbde .Spacing ==nil {_ccfba ._fbde .Spacing =_eb .NewCT_Spacing ();};_ccfba ._fbde .Spacing .BeforeAttr =&_bg .ST_TwipsMeasure {};_ccfba ._fbde .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (before /_ebf .Twips ));
_ccfba ._fbde .Spacing .AfterAttr =&_bg .ST_TwipsMeasure {};_ccfba ._fbde .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (after /_ebf .Twips ));};

// Endnote returns the endnote based on the ID; this can be used nicely with
// the run.IsEndnote() functionality.
func (_ageab *Document )Endnote (id int64 )Endnote {for _ ,_dgb :=range _ageab .Endnotes (){if _dgb .id ()==id {return _dgb ;};};return Endnote {};};

// X returns the inner wrapped XML type.
func (_dbdc Numbering )X ()*_eb .Numbering {return _dbdc ._aedgf };

// X returns the inner wrapped XML type.
func (_gbgb CellProperties )X ()*_eb .CT_TcPr {return _gbgb ._ced };

// SetKeepWithNext controls if this paragraph should be kept with the next.
func (_cedb ParagraphProperties )SetKeepWithNext (b bool ){if !b {_cedb ._fbde .KeepNext =nil ;}else {_cedb ._fbde .KeepNext =_eb .NewCT_OnOff ();};};

// SetLeft sets the left border to a specified type, color and thickness.
func (_fbgbf ParagraphBorders )SetLeft (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_fbgbf ._fafc .Left =_eb .NewCT_Border ();_afgff (_fbgbf ._fafc .Left ,t ,c ,thickness );};

// SetHeader sets a section header.
func (_acfgg Section )SetHeader (h Header ,t _eb .ST_HdrFtr ){_fccg :=_eb .NewEG_HdrFtrReferences ();_acfgg ._adef .EG_HdrFtrReferences =append (_acfgg ._adef .EG_HdrFtrReferences ,_fccg );_fccg .HeaderReference =_eb .NewCT_HdrFtrRef ();_fccg .HeaderReference .TypeAttr =t ;
_gfded :=_acfgg ._efdff ._ada .FindRIDForN (h .Index (),_c .HeaderType );if _gfded ==""{_ec .Log .Debug ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0068\u0065\u0061\u0064\u0065r \u0049\u0044");
};_fccg .HeaderReference .IdAttr =_gfded ;};

// SetTopPct sets the cell top margin
func (_dfd CellMargins )SetTopPct (pct float64 ){_dfd ._aag .Top =_eb .NewCT_TblWidth ();_ddaa (_dfd ._aag .Top ,pct );};func (_fgdd Paragraph )addBeginFldChar (_geaca string )*_eb .CT_FFData {_aade :=_fgdd .addFldChar ();_aade .FldCharTypeAttr =_eb .ST_FldCharTypeBegin ;
_aade .FfData =_eb .NewCT_FFData ();_dcff :=_eb .NewCT_FFName ();_dcff .ValAttr =&_geaca ;_aade .FfData .Name =[]*_eb .CT_FFName {_dcff };return _aade .FfData ;};

// SetWrapPathStart sets wrapPath start value.
func (_bgg AnchorDrawWrapOptions )SetWrapPathStart (coordinate *_bb .CT_Point2D ){_bgg ._ddb =coordinate ;};func (_dgdf Document )mergeFields ()[]mergeFieldInfo {_cgbge :=[]Paragraph {};_gadbe :=[]mergeFieldInfo {};for _ ,_cege :=range _dgdf .Tables (){for _ ,_fcedd :=range _cege .Rows (){for _ ,_bbca :=range _fcedd .Cells (){_cgbge =append (_cgbge ,_bbca .Paragraphs ()...);
};};};_cgbge =append (_cgbge ,_dgdf .Paragraphs ()...);for _ ,_bbeb :=range _dgdf .Headers (){_cgbge =append (_cgbge ,_bbeb .Paragraphs ()...);for _ ,_aaaf :=range _bbeb .Tables (){for _ ,_abgeg :=range _aaaf .Rows (){for _ ,_fgbb :=range _abgeg .Cells (){_cgbge =append (_cgbge ,_fgbb .Paragraphs ()...);
};};};};for _ ,_aeaba :=range _dgdf .Footers (){_cgbge =append (_cgbge ,_aeaba .Paragraphs ()...);for _ ,_aeagb :=range _aeaba .Tables (){for _ ,_bfegd :=range _aeagb .Rows (){for _ ,_bbad :=range _bfegd .Cells (){_cgbge =append (_cgbge ,_bbad .Paragraphs ()...);
};};};};for _ ,_gfff :=range _cgbge {_bbag :=_gfff .Runs ();_cbced :=-1;_gggda :=-1;_eabg :=-1;_fafad :=mergeFieldInfo {};for _ ,_ddbbg :=range _gfff ._ggec .EG_PContent {for _ ,_baac :=range _ddbbg .FldSimple {if _ae .Contains (_baac .InstrAttr ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){_egea :=_dgea (_baac .InstrAttr );
_egea ._ecceg =true ;_egea ._gfef =_gfff ;_egea ._bfce =_ddbbg ;_gadbe =append (_gadbe ,_egea );};};};for _ceceb :=0;_ceceb < len (_bbag );_ceceb ++{_ggcbe :=_bbag [_ceceb ];for _ ,_febd :=range _ggcbe .X ().EG_RunInnerContent {if _febd .FldChar !=nil {switch _febd .FldChar .FldCharTypeAttr {case _eb .ST_FldCharTypeBegin :_cbced =_ceceb ;
case _eb .ST_FldCharTypeSeparate :_gggda =_ceceb ;case _eb .ST_FldCharTypeEnd :_eabg =_ceceb ;if _fafad ._eeedg !=""{_fafad ._gfef =_gfff ;_fafad ._bfeg =_cbced ;_fafad ._bcbd =_eabg ;_fafad ._eagb =_gggda ;_gadbe =append (_gadbe ,_fafad );};_cbced =-1;
_gggda =-1;_eabg =-1;_fafad =mergeFieldInfo {};};}else if _febd .InstrText !=nil &&_ae .Contains (_febd .InstrText .Content ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){if _cbced !=-1&&_eabg ==-1{_fafad =_dgea (_febd .InstrText .Content );
};};};};};return _gadbe ;};func (_baa *Document )tables (_fgf *_eb .EG_ContentBlockContent )[]Table {_fdcg :=[]Table {};for _ ,_cbfb :=range _fgf .Tbl {_fdcg =append (_fdcg ,Table {_baa ,_cbfb });for _ ,_bde :=range _cbfb .EG_ContentRowContent {for _ ,_gdce :=range _bde .Tr {for _ ,_bbb :=range _gdce .EG_ContentCellContent {for _ ,_ged :=range _bbb .Tc {for _ ,_ade :=range _ged .EG_BlockLevelElts {for _ ,_ebb :=range _ade .EG_ContentBlockContent {for _ ,_agdc :=range _baa .tables (_ebb ){_fdcg =append (_fdcg ,_agdc );
};};};};};};};};return _fdcg ;};var _acdb =false ;func _bcgfg (_gggf *_bb .CT_Blip ,_ecabg map[string ]string ){if _gggf .EmbedAttr !=nil {if _efbb ,_gacgg :=_ecabg [*_gggf .EmbedAttr ];_gacgg {*_gggf .EmbedAttr =_efbb ;};};};

// AnchoredDrawing is an absolutely positioned image within a document page.
type AnchoredDrawing struct{_fa *Document ;_ac *_eb .WdAnchor ;};

// SetLinkedStyle sets the style that this style is linked to.
func (_acbgc Style )SetLinkedStyle (name string ){if name ==""{_acbgc ._dadg .Link =nil ;}else {_acbgc ._dadg .Link =_eb .NewCT_String ();_acbgc ._dadg .Link .ValAttr =name ;};};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_fcgd TableBorders )SetBottom (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_fcgd ._bdab .Bottom =_eb .NewCT_Border ();_bdba (_fcgd ._bdab .Bottom ,t ,c ,thickness );};

// AddWatermarkPicture adds new watermark picture to document.
func (_gae *Document )AddWatermarkPicture (imageRef _aee .ImageRef )WatermarkPicture {var _ebdf []Header ;if _gaca ,_ecff :=_gae .BodySection ().GetHeader (_eb .ST_HdrFtrDefault );_ecff {_ebdf =append (_ebdf ,_gaca );};if _aagf ,_dgdb :=_gae .BodySection ().GetHeader (_eb .ST_HdrFtrEven );
_dgdb {_ebdf =append (_ebdf ,_aagf );};if _dgce ,_cfgf :=_gae .BodySection ().GetHeader (_eb .ST_HdrFtrFirst );_cfgf {_ebdf =append (_ebdf ,_dgce );};if len (_ebdf )< 1{_cccf :=_gae .AddHeader ();_gae .BodySection ().SetHeader (_cccf ,_eb .ST_HdrFtrDefault );
_ebdf =append (_ebdf ,_cccf );};var _dfbgd error ;_bcd :=NewWatermarkPicture ();for _ ,_edbg :=range _ebdf {imageRef ,_dfbgd =_edbg .AddImageRef (imageRef );if _dfbgd !=nil {return WatermarkPicture {};};_edefd :=_edbg .Paragraphs ();if len (_edefd )< 1{_eede :=_edbg .AddParagraph ();
_eede .AddRun ().AddText ("");};for _ ,_bead :=range _edbg .X ().EG_ContentBlockContent {for _ ,_bcdf :=range _bead .P {for _ ,_ccce :=range _bcdf .EG_PContent {for _ ,_gdgae :=range _ccce .EG_ContentRunContent {if _gdgae .R ==nil {continue ;};for _ ,_afef :=range _gdgae .R .EG_RunInnerContent {_afef .Pict =_bcd ._debae ;
break ;};};};};};};_bcd .SetPicture (imageRef );return _bcd ;};

// ParagraphProperties are the properties for a paragraph.
type ParagraphProperties struct{_gefda *Document ;_fbde *_eb .CT_PPr ;};

// SetWidthAuto sets the the table width to automatic.
func (_degc TableProperties )SetWidthAuto (){_degc ._ggcad .TblW =_eb .NewCT_TblWidth ();_degc ._ggcad .TblW .TypeAttr =_eb .ST_TblWidthAuto ;};

// SetPictureSize set watermark picture size with given width and height.
func (_aceb *WatermarkPicture )SetPictureSize (width ,height int64 ){if _aceb ._befe !=nil {_ffef :=_aceb .GetShapeStyle ();_ffef .SetWidth (float64 (width )*_ebf .Point );_ffef .SetHeight (float64 (height )*_ebf .Point );_aceb .SetShapeStyle (_ffef );
};};

// SetFormat sets the numbering format.
func (_ddcc NumberingLevel )SetFormat (f _eb .ST_NumberFormat ){if _ddcc ._cgbe .NumFmt ==nil {_ddcc ._cgbe .NumFmt =_eb .NewCT_NumFmt ();};_ddcc ._cgbe .NumFmt .ValAttr =f ;};

// Clear clears the styes.
func (_aaadd Styles )Clear (){_aaadd ._gegd .DocDefaults =nil ;_aaadd ._gegd .LatentStyles =nil ;_aaadd ._gegd .Style =nil ;};

// SetTextWrapNone unsets text wrapping so the image can float on top of the
// text. When used in conjunction with X/Y Offset relative to the page it can be
// used to place a logo at the top of a page at an absolute position that
// doesn't interfere with text.
func (_fed AnchoredDrawing )SetTextWrapNone (){_fed ._ac .Choice =&_eb .WdEG_WrapTypeChoice {};_fed ._ac .Choice .WrapNone =_eb .NewWdCT_WrapNone ();};

// VerticalAlign returns the value of paragraph vertical align.
func (_dgfb ParagraphProperties )VerticalAlignment ()_bg .ST_VerticalAlignRun {if _dcbe :=_dgfb ._fbde .RPr .VertAlign ;_dcbe !=nil {return _dcbe .ValAttr ;};return 0;};

// FindNodeByStyleName return slice of node base on style name.
func (_ccebc *Nodes )FindNodeByStyleName (styleName string )[]Node {_adca :=[]Node {};for _ ,_gegg :=range _ccebc ._afgbd {switch _dfag :=_gegg ._beea .(type ){case *Paragraph :if _dfag !=nil {if _gage ,_aced :=_gegg ._cfgd .Styles .SearchStyleByName (styleName );
_aced {_fefg :=_dfag .Style ();if _fefg ==_gage .StyleID (){_adca =append (_adca ,_gegg );};};};case *Table :if _dfag !=nil {if _ececb ,_fccce :=_gegg ._cfgd .Styles .SearchStyleByName (styleName );_fccce {_fbgc :=_dfag .Style ();if _fbgc ==_ececb .StyleID (){_adca =append (_adca ,_gegg );
};};};};_fabg :=Nodes {_afgbd :_gegg .Children };_adca =append (_adca ,_fabg .FindNodeByStyleName (styleName )...);};return _adca ;};

// GetWrapPathStart return wrapPath start value.
func (_cae AnchorDrawWrapOptions )GetWrapPathStart ()*_bb .CT_Point2D {return _cae ._ddb };

// FormField is a form within a document. It references the document, so changes
// to the form field wil be reflected in the document if it is saved.
type FormField struct{_bbdab *_eb .CT_FFData ;_gedcf *_eb .EG_RunInnerContent ;};

// AddTable adds a new table to the document body.
func (_bbd *Document )AddTable ()Table {_fcec :=_eb .NewEG_BlockLevelElts ();_bbd ._cbd .Body .EG_BlockLevelElts =append (_bbd ._cbd .Body .EG_BlockLevelElts ,_fcec );_afec :=_eb .NewEG_ContentBlockContent ();_fcec .EG_ContentBlockContent =append (_fcec .EG_ContentBlockContent ,_afec );
_add :=_eb .NewCT_Tbl ();_afec .Tbl =append (_afec .Tbl ,_add );return Table {_bbd ,_add };};

// RowProperties are the properties for a row within a table
type RowProperties struct{_ebcag *_eb .CT_TrPr };func (_gbaab Paragraph )addInstrText (_fdaee string )*_eb .CT_Text {_cccc :=_gbaab .AddRun ();_dfcb :=_cccc .X ();_bcgde :=_eb .NewEG_RunInnerContent ();_ccabc :=_eb .NewCT_Text ();_fcfba :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";
_ccabc .SpaceAttr =&_fcfba ;_ccabc .Content ="\u0020"+_fdaee +"\u0020";_bcgde .InstrText =_ccabc ;_dfcb .EG_RunInnerContent =append (_dfcb .EG_RunInnerContent ,_bcgde );return _ccabc ;};

// X returns the inner wrapped XML type.
func (_eebfd Fonts )X ()*_eb .CT_Fonts {return _eebfd ._gfcg };

// X returns the inner wrapped XML type.
func (_bdeda HyperLink )X ()*_eb .CT_Hyperlink {return _bdeda ._fagd };func _gdcc (_dgbd *Document )map[int64 ]map[int64 ]int64 {_gacdg :=_dgbd .Paragraphs ();_fafa :=make (map[int64 ]map[int64 ]int64 ,0);for _ ,_bbbg :=range _gacdg {_bcdab :=_eaff (_dgbd ,_bbbg );
if _bcdab .NumberingLevel !=nil &&_bcdab .AbstractNumId !=nil {_acabc :=*_bcdab .AbstractNumId ;if _ ,_egagb :=_fafa [_acabc ];_egagb {if _eedac :=_bcdab .NumberingLevel .X ();_eedac !=nil {if _ ,_ffce :=_fafa [_acabc ][_eedac .IlvlAttr ];_ffce {_fafa [_acabc ][_eedac .IlvlAttr ]++;
}else {_fafa [_acabc ][_eedac .IlvlAttr ]=1;};};}else {if _dfacg :=_bcdab .NumberingLevel .X ();_dfacg !=nil {_fafa [_acabc ]=map[int64 ]int64 {_dfacg .IlvlAttr :1};};};};};return _fafa ;};

// Table is a table within a document.
type Table struct{_dfdb *Document ;_ffceg *_eb .CT_Tbl ;};

// NumberingDefinition defines a numbering definition for a list of pragraphs.
type NumberingDefinition struct{_degbd *_eb .CT_AbstractNum };

// Tables returns the tables defined in the document.
func (_egf *Document )Tables ()[]Table {_ffc :=[]Table {};if _egf ._cbd .Body ==nil {return nil ;};for _ ,_afcg :=range _egf ._cbd .Body .EG_BlockLevelElts {for _ ,_dff :=range _afcg .EG_ContentBlockContent {for _ ,_fedc :=range _egf .tables (_dff ){_ffc =append (_ffc ,_fedc );
};};};return _ffc ;};

// Type returns the type of the field.
func (_gbcd FormField )Type ()FormFieldType {if _gbcd ._bbdab .TextInput !=nil {return FormFieldTypeText ;}else if _gbcd ._bbdab .CheckBox !=nil {return FormFieldTypeCheckBox ;}else if _gbcd ._bbdab .DdList !=nil {return FormFieldTypeDropDown ;};return FormFieldTypeUnknown ;
};func (_efdf *Document )GetFontBytesByRelId (relID string )([]byte ,error ){if relID ==""{return nil ,nil ;};_dcaff :=_efdf ._dga .GetTargetByRelId (relID );_dcaff ="\u0077\u006f\u0072d\u002f"+_dcaff ;for _ ,_ffcd :=range _efdf .ExtraFiles {if _ffcd .ZipPath ==_dcaff {_fdfe ,_cadf :=_eg .ReadFile (_ffcd .DiskPath );
if _cadf !=nil {return nil ,_ede .Errorf ("e\u0072r\u006f\u0072\u0020\u0072\u0065\u0061\u0064\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",_ffcd .DiskPath ,_cadf );};return _fdfe ,nil ;};};return nil ,_ede .Errorf ("\u0066\u006fn\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u0074\u006f\u0072\u0061\u0067\u0065: \u0025\u0073",_dcaff );
};

// SetSize sets size attribute for a FormFieldTypeCheckBox in pt.
func (_gabb FormField )SetSize (size uint64 ){size *=2;if _gabb ._bbdab .CheckBox !=nil {_gabb ._bbdab .CheckBox .Choice =_eb .NewCT_FFCheckBoxChoice ();_gabb ._bbdab .CheckBox .Choice .Size =_eb .NewCT_HpsMeasure ();_gabb ._bbdab .CheckBox .Choice .Size .ValAttr =_eb .ST_HpsMeasure {ST_UnsignedDecimalNumber :&size };
};};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_efgc Footer )AddImage (i _aee .Image )(_aee .ImageRef ,error ){var _egge _aee .Relationships ;for _bff ,_ecbb :=range _efgc ._gfag ._fcga {if _ecbb ==_efgc ._cece {_egge =_efgc ._gfag ._dde [_bff ];};};_edfa :=_aee .MakeImageRef (i ,&_efgc ._gfag .DocBase ,_egge );
if i .Data ==nil &&i .Path ==""{return _edfa ,_da .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _edfa ,_da .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};if i .Size .X ==0||i .Size .Y ==0{return _edfa ,_da .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_efgc ._gfag .Images =append (_efgc ._gfag .Images ,_edfa );
_caaad :=_ede .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_efgc ._gfag .Images ),i .Format );_ecfg :=_egge .AddRelationship (_caaad ,_c .ImageType );_edfa .SetRelID (_ecfg .X ().IdAttr );return _edfa ,nil ;
};

// X returns the inner wrapped XML type.
func (_fdde Paragraph )X ()*_eb .CT_P {return _fdde ._ggec };

// SetUnhideWhenUsed controls if a semi hidden style becomes visible when used.
func (_cfad Style )SetUnhideWhenUsed (b bool ){if b {_cfad ._dadg .UnhideWhenUsed =_eb .NewCT_OnOff ();}else {_cfad ._dadg .UnhideWhenUsed =nil ;};};

// SetStartIndent controls the start indent of the paragraph.
func (_gceda ParagraphStyleProperties )SetStartIndent (m _ebf .Distance ){if _gceda ._gdbb .Ind ==nil {_gceda ._gdbb .Ind =_eb .NewCT_Ind ();};if m ==_ebf .Zero {_gceda ._gdbb .Ind .StartAttr =nil ;}else {_gceda ._gdbb .Ind .StartAttr =&_eb .ST_SignedTwipsMeasure {};
_gceda ._gdbb .Ind .StartAttr .Int64 =_c .Int64 (int64 (m /_ebf .Twips ));};};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_daff *Document )AddImage (i _aee .Image )(_aee .ImageRef ,error ){_fcag :=_aee .MakeImageRef (i ,&_daff .DocBase ,_daff ._ada );if i .Data ==nil &&i .Path ==""{return _fcag ,_da .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");
};if i .Format ==""{return _fcag ,_da .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _fcag ,_da .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");
};if i .Path !=""{_egef :=_de .Add (i .Path );if _egef !=nil {return _fcag ,_egef ;};};_daff .Images =append (_daff .Images ,_fcag );_afcf :=_ede .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_daff .Images ),i .Format );
_bed :=_daff ._ada .AddRelationship (_afcf ,_c .ImageType );_daff .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_daff .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");
_daff .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_daff .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_daff .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );
_fcag .SetRelID (_bed .X ().IdAttr );_fcag .SetTarget (_afcf );return _fcag ,nil ;};

// X returns the inner wrapped XML type.
func (_egg AnchoredDrawing )X ()*_eb .WdAnchor {return _egg ._ac };

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_cfaca TableBorders )SetInsideVertical (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_cfaca ._bdab .InsideV =_eb .NewCT_Border ();_bdba (_cfaca ._bdab .InsideV ,t ,c ,thickness );};func (_beccc *WatermarkPicture )getShapeType ()*_c .XSDAny {return _beccc .getInnerElement ("\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e");
};func _bcgg (_eafd Paragraph )*_eb .CT_NumPr {_eafd .ensurePPr ();if _eafd ._ggec .PPr .NumPr ==nil {return nil ;};return _eafd ._ggec .PPr .NumPr ;};func _dgea (_ggbce string )mergeFieldInfo {_ggbcg :=[]string {};_dcdce :=_af .Buffer {};_agff :=-1;for _dbdbbb ,_ggdg :=range _ggbce {switch _ggdg {case ' ':if _dcdce .Len ()!=0{_ggbcg =append (_ggbcg ,_dcdce .String ());
};_dcdce .Reset ();case '"':if _agff !=-1{_ggbcg =append (_ggbcg ,_ggbce [_agff +1:_dbdbbb ]);_agff =-1;}else {_agff =_dbdbbb ;};default:_dcdce .WriteRune (_ggdg );};};if _dcdce .Len ()!=0{_ggbcg =append (_ggbcg ,_dcdce .String ());};_egdb :=mergeFieldInfo {};
for _afgda :=0;_afgda < len (_ggbcg )-1;_afgda ++{_ccdf :=_ggbcg [_afgda ];switch _ccdf {case "\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044":_egdb ._eeedg =_ggbcg [_afgda +1];_afgda ++;case "\u005c\u0066":_egdb ._cfab =_ggbcg [_afgda +1];
_afgda ++;case "\u005c\u0062":_egdb ._ffdg =_ggbcg [_afgda +1];_afgda ++;case "\u005c\u002a":switch _ggbcg [_afgda +1]{case "\u0055\u0070\u0070e\u0072":_egdb ._beed =true ;case "\u004c\u006f\u0077e\u0072":_egdb ._fcgab =true ;case "\u0043\u0061\u0070\u0073":_egdb ._cgdee =true ;
case "\u0046\u0069\u0072\u0073\u0074\u0043\u0061\u0070":_egdb ._dffd =true ;};_afgda ++;};};return _egdb ;};

// SetTargetByRef sets the URL target of the hyperlink and is more efficient if a link
// destination will be used many times.
func (_dcea HyperLink )SetTargetByRef (link _aee .Hyperlink ){_dcea ._fagd .IdAttr =_c .String (_aee .Relationship (link ).ID ());_dcea ._fagd .AnchorAttr =nil ;};

// Document is a text document that can be written out in the OOXML .docx
// format. It can be opened from a file on disk and modified, or created from
// scratch.
type Document struct{_aee .DocBase ;_cbd *_eb .Document ;Settings Settings ;Numbering Numbering ;Styles Styles ;_abg []*_eb .Hdr ;_cgcc []_aee .Relationships ;_fcga []*_eb .Ftr ;_dde []_aee .Relationships ;_ada _aee .Relationships ;_ccfe []*_bb .Theme ;
_ccc *_eb .WebSettings ;_cbf *_eb .Fonts ;_dga _aee .Relationships ;_edd *_eb .Endnotes ;_fbc *_eb .Footnotes ;_cag []*_daf .Control ;_dac []*chart ;_fgd string ;};

// SearchStyleByName return style by its name.
func (_baced Styles )SearchStyleByName (name string )(Style ,bool ){for _ ,_dfbf :=range _baced ._gegd .Style {if _dfbf .Name !=nil {if _dfbf .Name .ValAttr ==name {return Style {_dfbf },true ;};};};return Style {},false ;};

// SetLeft sets the left border to a specified type, color and thickness.
func (_bba CellBorders )SetLeft (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_bba ._df .Left =_eb .NewCT_Border ();_bdba (_bba ._df .Left ,t ,c ,thickness );};

// SetAfter sets the spacing that comes after the paragraph.
func (_eaecc ParagraphSpacing )SetAfter (after _ebf .Distance ){_eaecc ._adcd .AfterAttr =&_bg .ST_TwipsMeasure {};_eaecc ._adcd .AfterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (after /_ebf .Twips ));};

// AddTab adds tab to a run and can be used with the the Paragraph's tab stops.
func (_fdda Run )AddTab (){_gaeb :=_fdda .newIC ();_gaeb .Tab =_eb .NewCT_Empty ()};func (_bgbd *Document )putNode (_bagbg ,_gaff Node ,_bfaa bool )bool {_bgbd .insertImageFromNode (_gaff );_bgbd .insertStyleFromNode (_gaff );switch _eebf :=_gaff ._beea .(type ){case *Paragraph :if _afefb ,_gdad :=_bagbg .X ().(*Paragraph );
_gdad {_bgbd .appendParagraph (_afefb ,*_eebf ,_bfaa );return true ;}else {for _ ,_dabd :=range _bagbg .Children {if _fcdef :=_bgbd .putNode (_dabd ,_gaff ,_bfaa );_fcdef {break ;};};};case *Table :if _ggbge ,_cbcca :=_bagbg .X ().(*Paragraph );_cbcca {_bdcg :=_bgbd .appendTable (_ggbge ,*_eebf ,_bfaa );
_bdcg ._ffceg =_eebf ._ffceg ;return true ;}else {for _ ,_gcca :=range _bagbg .Children {if _ggd :=_bgbd .putNode (_gcca ,_gaff ,_bfaa );_ggd {break ;};};};};return false ;};

// NumberingLevel is the definition for numbering for a particular level within
// a NumberingDefinition.
type NumberingLevel struct{_cgbe *_eb .CT_Lvl };

// X returns the inner wrapped XML type.
func (_effa RunProperties )X ()*_eb .CT_RPr {return _effa ._fdggb };

// GetHighlight returns the HighlightColor.
func (_cbcdd RunProperties )GetHighlight ()_eb .ST_HighlightColor {if _cbcdd ._fdggb .Highlight !=nil {return _cbcdd ._fdggb .Highlight .ValAttr ;};return _eb .ST_HighlightColorNone ;};

// Styles is the document wide styles contained in styles.xml.
type Styles struct{_gegd *_eb .Styles };

// Type returns the type of the style.
func (_bcafd Style )Type ()_eb .ST_StyleType {return _bcafd ._dadg .TypeAttr };

// Properties returns the row properties.
func (_bfcb Row )Properties ()RowProperties {if _bfcb ._ecfe .TrPr ==nil {_bfcb ._ecfe .TrPr =_eb .NewCT_TrPr ();};return RowProperties {_bfcb ._ecfe .TrPr };};

// Paragraphs returns the paragraphs defined in a header.
func (_agae Header )Paragraphs ()[]Paragraph {_ggbc :=[]Paragraph {};for _ ,_cebg :=range _agae ._ccaed .EG_ContentBlockContent {for _ ,_abdca :=range _cebg .P {_ggbc =append (_ggbc ,Paragraph {_agae ._dcdf ,_abdca });};};for _ ,_dfad :=range _agae .Tables (){for _ ,_gdfbf :=range _dfad .Rows (){for _ ,_cffgf :=range _gdfbf .Cells (){_ggbc =append (_ggbc ,_cffgf .Paragraphs ()...);
};};};return _ggbc ;};

// SearchStylesById returns style by its id.
func (_gabd Styles )SearchStyleById (id string )(Style ,bool ){for _ ,_bcgb :=range _gabd ._gegd .Style {if _bcgb .StyleIdAttr !=nil {if *_bcgb .StyleIdAttr ==id {return Style {_bcgb },true ;};};};return Style {},false ;};

// SetBetween sets the between border to a specified type, color and thickness between paragraph.
func (_gbggg ParagraphBorders )SetBetween (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_gbggg ._fafc .Between =_eb .NewCT_Border ();_afgff (_gbggg ._fafc .Between ,t ,c ,thickness );};

// AbstractNumberID returns the ID that is unique within all numbering
// definitions that is used to assign the definition to a paragraph.
func (_gdec NumberingDefinition )AbstractNumberID ()int64 {return _gdec ._degbd .AbstractNumIdAttr };

// AddHyperlink adds a hyperlink to a document. Adding the hyperlink to a document
// and setting it on a cell is more efficient than setting hyperlinks directly
// on a cell.
func (_addd Document )AddHyperlink (url string )_aee .Hyperlink {return _addd ._ada .AddHyperlink (url )};

// SetName sets the name of the bookmark. This is the name that is used to
// reference the bookmark from hyperlinks.
func (_gg Bookmark )SetName (name string ){_gg ._agc .NameAttr =name };

// Name returns the name of the field.
func (_cggdd FormField )Name ()string {return *_cggdd ._bbdab .Name [0].ValAttr };

// SetRowBandSize sets the number of Rows in the row band
func (_ecga TableStyleProperties )SetRowBandSize (rows int64 ){_ecga ._bbdb .TblStyleRowBandSize =_eb .NewCT_DecimalNumber ();_ecga ._bbdb .TblStyleRowBandSize .ValAttr =rows ;};

// AddFootnote will create a new footnote and attach it to the Paragraph in the
// location at the end of the previous run (footnotes create their own run within
// the paragraph). The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the footnote later.
func (_bdce Paragraph )AddFootnote (text string )Footnote {var _afeeb int64 ;if _bdce ._ddfge .HasFootnotes (){for _ ,_dafce :=range _bdce ._ddfge .Footnotes (){if _dafce .id ()> _afeeb {_afeeb =_dafce .id ();};};_afeeb ++;}else {_bdce ._ddfge .addFootnotes ();
_afeeb =1;};_gbafd :=_eb .NewCT_FtnEdn ();_efeb :=_eb .NewCT_FtnEdnRef ();_efeb .IdAttr =_afeeb ;_bdce ._ddfge ._fbc .CT_Footnotes .Footnote =append (_bdce ._ddfge ._fbc .CT_Footnotes .Footnote ,_gbafd );_bbgb :=_bdce .AddRun ();_fdadf :=_bbgb .Properties ();
_fdadf .SetStyle (_bfb );_bbgb ._edbgc .EG_RunInnerContent =[]*_eb .EG_RunInnerContent {_eb .NewEG_RunInnerContent ()};_bbgb ._edbgc .EG_RunInnerContent [0].FootnoteReference =_efeb ;_adecc :=Footnote {_bdce ._ddfge ,_gbafd };_adecc ._bbff .IdAttr =_afeeb ;
_adecc ._bbff .EG_BlockLevelElts =[]*_eb .EG_BlockLevelElts {_eb .NewEG_BlockLevelElts ()};_cbbcg :=_adecc .AddParagraph ();_cbbcg .Properties ().SetStyle (FootnoteTextStyleId );_cbbcg ._ggec .PPr .RPr =_eb .NewCT_ParaRPr ();_gada :=_cbbcg .AddRun ();_ddeb :=_gada .Properties ();
_ddeb .SetStyle (_bfb );_gada .AddFootnoteReference ();_aadc :=_cbbcg .AddRun ();_aadc .AddText ("\u0020");_aadc =_cbbcg .AddRun ();_aadc .AddText (text );return _adecc ;};

// SetAlignment sets the alignment of a table within the page.
func (_dgee TableProperties )SetAlignment (align _eb .ST_JcTable ){if align ==_eb .ST_JcTableUnset {_dgee ._ggcad .Jc =nil ;}else {_dgee ._ggcad .Jc =_eb .NewCT_JcTable ();_dgee ._ggcad .Jc .ValAttr =align ;};};

// Endnote is an individual endnote reference within the document.
type Endnote struct{_bfgc *Document ;_gdfb *_eb .CT_FtnEdn ;};

// X returns the inner wrapped XML type.
func (_dfcbb TableStyleProperties )X ()*_eb .CT_TblPrBase {return _dfcbb ._bbdb };

// SetEnabled marks a FormField as enabled or disabled.
func (_ddce FormField )SetEnabled (enabled bool ){_dbece :=_eb .NewCT_OnOff ();_dbece .ValAttr =&_bg .ST_OnOff {Bool :&enabled };_ddce ._bbdab .Enabled =[]*_eb .CT_OnOff {_dbece };};

// Row is a row within a table within a document.
type Row struct{_ceeae *Document ;_ecfe *_eb .CT_Row ;};

// SetHeadingLevel sets a heading level and style based on the level to a
// paragraph.  The default styles for a new unioffice document support headings
// from level 1 to 8.
func (_edcc ParagraphProperties )SetHeadingLevel (idx int ){_edcc .SetStyle (_ede .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",idx ));if _edcc ._fbde .NumPr ==nil {_edcc ._fbde .NumPr =_eb .NewCT_NumPr ();};_edcc ._fbde .NumPr .Ilvl =_eb .NewCT_DecimalNumber ();
_edcc ._fbde .NumPr .Ilvl .ValAttr =int64 (idx );};

// FindNodeByCondition return node based on condition function,
// if wholeElements is true, its will extract childs as next node elements.
func (_dbeed *Nodes )FindNodeByCondition (f func (_efdbe *Node )bool ,wholeElements bool )[]Node {_gccf :=[]Node {};for _ ,_agabe :=range _dbeed ._afgbd {if f (&_agabe ){_gccf =append (_gccf ,_agabe );};if wholeElements {_accb :=Nodes {_afgbd :_agabe .Children };
_gccf =append (_gccf ,_accb .FindNodeByCondition (f ,wholeElements )...);};};return _gccf ;};

// EastAsiaFont returns the name of paragraph font family for East Asia.
func (_cdef ParagraphProperties )EastAsiaFont ()string {if _bgafae :=_cdef ._fbde .RPr .RFonts ;_bgafae !=nil {if _bgafae .EastAsiaAttr !=nil {return *_bgafae .EastAsiaAttr ;};};return "";};func _aaf (_fgbgd *_eb .CT_Tbl ,_gcecf map[string ]string ){for _ ,_bedb :=range _fgbgd .EG_ContentRowContent {for _ ,_fabb :=range _bedb .Tr {for _ ,_fcgfb :=range _fabb .EG_ContentCellContent {for _ ,_egfb :=range _fcgfb .Tc {for _ ,_acdge :=range _egfb .EG_BlockLevelElts {for _ ,_bef :=range _acdge .EG_ContentBlockContent {for _ ,_gdcb :=range _bef .P {_abgd (_gdcb ,_gcecf );
};for _ ,_fecd :=range _bef .Tbl {_aaf (_fecd ,_gcecf );};};};};};};};};const (FieldCurrentPage ="\u0050\u0041\u0047\u0045";FieldNumberOfPages ="\u004e\u0055\u004d\u0050\u0041\u0047\u0045\u0053";FieldDate ="\u0044\u0041\u0054\u0045";FieldCreateDate ="\u0043\u0052\u0045\u0041\u0054\u0045\u0044\u0041\u0054\u0045";
FieldEditTime ="\u0045\u0044\u0049\u0054\u0054\u0049\u004d\u0045";FieldPrintDate ="\u0050R\u0049\u004e\u0054\u0044\u0041\u0054E";FieldSaveDate ="\u0053\u0041\u0056\u0045\u0044\u0041\u0054\u0045";FieldTIme ="\u0054\u0049\u004d\u0045";FieldTOC ="\u0054\u004f\u0043";
);

// SetASCIITheme sets the font ASCII Theme.
func (_cbgd Fonts )SetASCIITheme (t _eb .ST_Theme ){_cbgd ._gfcg .AsciiThemeAttr =t };

// SetBehindDoc sets the behindDoc attribute of anchor.
func (_dcd AnchoredDrawing )SetBehindDoc (val bool ){_dcd ._ac .BehindDocAttr =val };

// ParagraphProperties returns the paragraph style properties.
func (_ecadc Style )ParagraphProperties ()ParagraphStyleProperties {if _ecadc ._dadg .PPr ==nil {_ecadc ._dadg .PPr =_eb .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_ecadc ._dadg .PPr };};

// IsEndnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_aecd Run )IsEndnote ()(bool ,int64 ){if _aecd ._edbgc .EG_RunInnerContent !=nil {if _aecd ._edbgc .EG_RunInnerContent [0].EndnoteReference !=nil {return true ,_aecd ._edbgc .EG_RunInnerContent [0].EndnoteReference .IdAttr ;};};return false ,0;};


// SaveToFile writes the document out to a file.
func (_ccfg *Document )SaveToFile (path string )error {_dgcb ,_acf :=_eg .Create (path );if _acf !=nil {return _acf ;};defer _dgcb .Close ();return _ccfg .Save (_dgcb );};func _gadc ()*_cg .Textpath {_abfe :=_cg .NewTextpath ();_abfe .OnAttr =_bg .ST_TrueFalseTrue ;
_abfe .FitshapeAttr =_bg .ST_TrueFalseTrue ;return _abfe ;};

// Definitions returns the defined numbering definitions.
func (_afde Numbering )Definitions ()[]NumberingDefinition {_ebag :=[]NumberingDefinition {};if _afde ._aedgf !=nil {for _ ,_bcggb :=range _afde ._aedgf .AbstractNum {_ebag =append (_ebag ,NumberingDefinition {_bcggb });};};return _ebag ;};

// RightToLeft returns true if paragraph text goes from right to left.
func (_egcgb ParagraphProperties )RightToLeft ()bool {return _bbea (_egcgb ._fbde .RPr .Rtl )};

// TableProperties are the properties for a table within a document
type TableProperties struct{_ggcad *_eb .CT_TblPr };

// IsFootnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_cabad Run )IsFootnote ()(bool ,int64 ){if _cabad ._edbgc .EG_RunInnerContent !=nil {if _cabad ._edbgc .EG_RunInnerContent [0].FootnoteReference !=nil {return true ,_cabad ._edbgc .EG_RunInnerContent [0].FootnoteReference .IdAttr ;};};return false ,0;
};

// SetStart sets the cell start margin
func (_egaa CellMargins )SetStart (d _ebf .Distance ){_egaa ._aag .Start =_eb .NewCT_TblWidth ();_afe (_egaa ._aag .Start ,d );};

// ClearContent clears any content in the run (text, tabs, breaks, etc.)
func (_gfgbb Run )ClearContent (){_gfgbb ._edbgc .EG_RunInnerContent =nil };func (_becd Styles )initializeDocDefaults (){_becd ._gegd .DocDefaults =_eb .NewCT_DocDefaults ();_becd ._gegd .DocDefaults .RPrDefault =_eb .NewCT_RPrDefault ();_becd ._gegd .DocDefaults .RPrDefault .RPr =_eb .NewCT_RPr ();
_ccff :=RunProperties {_becd ._gegd .DocDefaults .RPrDefault .RPr };_ccff .SetSize (12*_ebf .Point );_ccff .Fonts ().SetASCIITheme (_eb .ST_ThemeMajorAscii );_ccff .Fonts ().SetEastAsiaTheme (_eb .ST_ThemeMajorEastAsia );_ccff .Fonts ().SetHANSITheme (_eb .ST_ThemeMajorHAnsi );
_ccff .Fonts ().SetCSTheme (_eb .ST_ThemeMajorBidi );_ccff .X ().Lang =_eb .NewCT_Language ();_ccff .X ().Lang .ValAttr =_c .String ("\u0065\u006e\u002dU\u0053");_ccff .X ().Lang .EastAsiaAttr =_c .String ("\u0065\u006e\u002dU\u0053");_ccff .X ().Lang .BidiAttr =_c .String ("\u0061\u0072\u002dS\u0041");
_becd ._gegd .DocDefaults .PPrDefault =_eb .NewCT_PPrDefault ();};

// SetNumberingDefinition sets the numbering definition ID via a NumberingDefinition
// defined in numbering.xml
func (_ecfa Paragraph )SetNumberingDefinition (nd NumberingDefinition ){_ecfa .ensurePPr ();if _ecfa ._ggec .PPr .NumPr ==nil {_ecfa ._ggec .PPr .NumPr =_eb .NewCT_NumPr ();};_egdd :=_eb .NewCT_DecimalNumber ();_gfbg :=int64 (-1);for _ ,_efgfg :=range _ecfa ._ddfge .Numbering ._aedgf .Num {if _efgfg .AbstractNumId !=nil &&_efgfg .AbstractNumId .ValAttr ==nd .AbstractNumberID (){_gfbg =_efgfg .NumIdAttr ;
};};if _gfbg ==-1{_fffa :=_eb .NewCT_Num ();_ecfa ._ddfge .Numbering ._aedgf .Num =append (_ecfa ._ddfge .Numbering ._aedgf .Num ,_fffa );_fffa .NumIdAttr =int64 (len (_ecfa ._ddfge .Numbering ._aedgf .Num ));_fffa .AbstractNumId =_eb .NewCT_DecimalNumber ();
_fffa .AbstractNumId .ValAttr =nd .AbstractNumberID ();};_egdd .ValAttr =_gfbg ;_ecfa ._ggec .PPr .NumPr .NumId =_egdd ;};func (_egda *Document )insertImageFromNode (_badf Node ){for _ ,_aaad :=range _badf .AnchoredDrawings {if _ecce ,_feba :=_aaad .GetImage ();
_feba {_fgecc ,_cfgc :=_aee .ImageFromFile (_ecce .Path ());if _cfgc !=nil {_ec .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_cfgc );};
_dfde ,_cfgc :=_egda .AddImage (_fgecc );if _cfgc !=nil {_ec .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_cfgc );
};_cabag :=_egda ._ada .GetByRelId (_dfde .RelID ());_cabag .SetID (_ecce .RelID ());};};for _ ,_facfa :=range _badf .InlineDrawings {if _bgd ,_ddcf :=_facfa .GetImage ();_ddcf {_dgcad ,_efcd :=_aee .ImageFromFile (_bgd .Path ());if _efcd !=nil {_ec .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_efcd );
};_badg ,_efcd :=_egda .AddImage (_dgcad );if _efcd !=nil {_ec .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_efcd );
};_bebd :=_egda ._ada .GetByRelId (_badg .RelID ());_bebd .SetID (_bgd .RelID ());};};};

// SetRightToLeft sets the run text goes from right to left.
func (_cgfda RunProperties )SetRightToLeft (b bool ){if !b {_cgfda ._fdggb .Rtl =nil ;}else {_cgfda ._fdggb .Rtl =_eb .NewCT_OnOff ();};};

// Paragraphs returns the paragraphs defined in a footnote.
func (_abag Footnote )Paragraphs ()[]Paragraph {_aacbc :=[]Paragraph {};for _ ,_ebba :=range _abag .content (){for _ ,_bbdg :=range _ebba .P {_aacbc =append (_aacbc ,Paragraph {_abag ._bbde ,_bbdg });};};return _aacbc ;};

// SetAfterLineSpacing sets spacing below paragraph in line units.
func (_adafd Paragraph )SetAfterLineSpacing (d _ebf .Distance ){_adafd .ensurePPr ();if _adafd ._ggec .PPr .Spacing ==nil {_adafd ._ggec .PPr .Spacing =_eb .NewCT_Spacing ();};_defc :=_adafd ._ggec .PPr .Spacing ;_defc .AfterLinesAttr =_c .Int64 (int64 (d /_ebf .Twips ));
};

// CellMargins are the margins for an individual cell.
type CellMargins struct{_aag *_eb .CT_TcMar };

// Clear content of node element.
func (_dabc *Node )Clear (){_dabc ._beea =nil };

// CellProperties returns the cell properties.
func (_faegf TableConditionalFormatting )CellProperties ()CellProperties {if _faegf ._eadcf .TcPr ==nil {_faegf ._eadcf .TcPr =_eb .NewCT_TcPr ();};return CellProperties {_faegf ._eadcf .TcPr };};

// Borders allows manipulation of the table borders.
func (_bgfdgc TableProperties )Borders ()TableBorders {if _bgfdgc ._ggcad .TblBorders ==nil {_bgfdgc ._ggcad .TblBorders =_eb .NewCT_TblBorders ();};return TableBorders {_bgfdgc ._ggcad .TblBorders };};

// InitializeDefault constructs a default numbering.
func (_beeb Numbering )InitializeDefault (){_cdgfd :=_eb .NewCT_AbstractNum ();_cdgfd .MultiLevelType =_eb .NewCT_MultiLevelType ();_cdgfd .MultiLevelType .ValAttr =_eb .ST_MultiLevelTypeHybridMultilevel ;_beeb ._aedgf .AbstractNum =append (_beeb ._aedgf .AbstractNum ,_cdgfd );
_cdgfd .AbstractNumIdAttr =1;const _fcdgf =720;const _ffab =720;const _agcgg =360;for _acbge :=0;_acbge < 9;_acbge ++{_accbg :=_eb .NewCT_Lvl ();_accbg .IlvlAttr =int64 (_acbge );_accbg .Start =_eb .NewCT_DecimalNumber ();_accbg .Start .ValAttr =1;_accbg .NumFmt =_eb .NewCT_NumFmt ();
_accbg .NumFmt .ValAttr =_eb .ST_NumberFormatBullet ;_accbg .Suff =_eb .NewCT_LevelSuffix ();_accbg .Suff .ValAttr =_eb .ST_LevelSuffixNothing ;_accbg .LvlText =_eb .NewCT_LevelText ();_accbg .LvlText .ValAttr =_c .String ("\uf0b7");_accbg .LvlJc =_eb .NewCT_Jc ();
_accbg .LvlJc .ValAttr =_eb .ST_JcLeft ;_accbg .RPr =_eb .NewCT_RPr ();_accbg .RPr .RFonts =_eb .NewCT_Fonts ();_accbg .RPr .RFonts .AsciiAttr =_c .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_accbg .RPr .RFonts .HAnsiAttr =_c .String ("\u0053\u0079\u006d\u0062\u006f\u006c");
_accbg .RPr .RFonts .HintAttr =_eb .ST_HintDefault ;_accbg .PPr =_eb .NewCT_PPrGeneral ();_eeeg :=int64 (_acbge *_ffab +_fcdgf );_accbg .PPr .Ind =_eb .NewCT_Ind ();_accbg .PPr .Ind .LeftAttr =&_eb .ST_SignedTwipsMeasure {};_accbg .PPr .Ind .LeftAttr .Int64 =_c .Int64 (_eeeg );
_accbg .PPr .Ind .HangingAttr =&_bg .ST_TwipsMeasure {};_accbg .PPr .Ind .HangingAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (_agcgg ));_cdgfd .Lvl =append (_cdgfd .Lvl ,_accbg );};_aagedb :=_eb .NewCT_Num ();_aagedb .NumIdAttr =1;_aagedb .AbstractNumId =_eb .NewCT_DecimalNumber ();
_aagedb .AbstractNumId .ValAttr =1;_beeb ._aedgf .Num =append (_beeb ._aedgf .Num ,_aagedb );};func _aeda (_efb _ab .ReaderAt ,_dfae int64 ,_gbe string )(*Document ,error ){const _cceb ="\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0052\u0065\u0061\u0064";
if !_efc .GetLicenseKey ().IsLicensed ()&&!_acdb {_ede .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_ede .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");
return nil ,_da .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_edde :=New ();_edde .Numbering ._aedgf =nil ;if len (_gbe )> 0{_edde ._fgd =_gbe ;
}else {_feg ,_agef :=_efc .GenRefId ("\u0064\u0072");if _agef !=nil {_ec .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_agef );return nil ,_agef ;};_edde ._fgd =_feg ;};if _fafg :=_efc .Track (_edde ._fgd ,_cceb );_fafg !=nil {_ec .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fafg );
return nil ,_fafg ;};_abaa ,_fcffc :=_de .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0064\u006f\u0063\u0078");if _fcffc !=nil {return nil ,_fcffc ;};_edde .TmpPath =_abaa ;_cebf ,_fcffc :=_g .NewReader (_efb ,_dfae );if _fcffc !=nil {return nil ,_ede .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_fcffc );
};_dgae :=[]*_g .File {};_dgae =append (_dgae ,_cebf .File ...);_gaabd :=false ;for _ ,_bagb :=range _dgae {if _bagb .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_gaabd =true ;
break ;};};if _gaabd {_edde .CreateCustomProperties ();};_baeb :=_edde ._cbd .ConformanceAttr ;_efe :=_f .DecodeMap {};_efe .SetOnNewRelationshipFunc (_edde .onNewRelationship );_efe .AddTarget (_c .ContentTypesFilename ,_edde .ContentTypes .X (),"",0);
_efe .AddTarget (_c .BaseRelsFilename ,_edde .Rels .X (),"",0);if _gfga :=_efe .Decode (_dgae );_gfga !=nil {return nil ,_gfga ;};_edde ._cbd .ConformanceAttr =_baeb ;for _ ,_gcdc :=range _dgae {if _gcdc ==nil {continue ;};if _ccdc :=_edde .AddExtraFileFromZip (_gcdc );
_ccdc !=nil {return nil ,_ccdc ;};};if _gaabd {_gged :=false ;for _ ,_aec :=range _edde .Rels .X ().Relationship {if _aec .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_gged =true ;
break ;};};if !_gged {_edde .AddCustomRelationships ();};};return _edde ,nil ;};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_bdebf ParagraphProperties )SizeMeasure ()string {if _ebgdg :=_bdebf ._fbde .RPr .Sz ;_ebgdg !=nil {_cebff :=_ebgdg .ValAttr ;if _cebff .ST_PositiveUniversalMeasure !=nil {return *_cebff .ST_PositiveUniversalMeasure ;};};return "";};func _afe (_aff *_eb .CT_TblWidth ,_fcbb _ebf .Distance ){_aff .TypeAttr =_eb .ST_TblWidthDxa ;
_aff .WAttr =&_eb .ST_MeasurementOrPercent {};_aff .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_aff .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (_fcbb /_ebf .Dxa ));};

// X returns the inner wrapped XML type.
func (_dcae Footnote )X ()*_eb .CT_FtnEdn {return _dcae ._bbff };

// SetLeftIndent controls left indent of paragraph.
func (_dfebb Paragraph )SetLeftIndent (m _ebf .Distance ){_dfebb .ensurePPr ();_edbga :=_dfebb ._ggec .PPr ;if _edbga .Ind ==nil {_edbga .Ind =_eb .NewCT_Ind ();};if m ==_ebf .Zero {_edbga .Ind .LeftAttr =nil ;}else {_edbga .Ind .LeftAttr =&_eb .ST_SignedTwipsMeasure {};
_edbga .Ind .LeftAttr .Int64 =_c .Int64 (int64 (m /_ebf .Twips ));};};

// Paragraphs returns the paragraphs defined in the cell.
func (_fccf Cell )Paragraphs ()[]Paragraph {_cbc :=[]Paragraph {};for _ ,_cfe :=range _fccf ._cgga .EG_BlockLevelElts {for _ ,_cgde :=range _cfe .EG_ContentBlockContent {for _ ,_eeg :=range _cgde .P {_cbc =append (_cbc ,Paragraph {_fccf ._dcda ,_eeg });
};};};return _cbc ;};

// FormFieldType is the type of the form field.
//
//go:generate stringer -type=FormFieldType
type FormFieldType byte ;func (_aaga Footnote )id ()int64 {return _aaga ._bbff .IdAttr };

// Strike returns true if paragraph is striked.
func (_faea ParagraphProperties )Strike ()bool {return _bbea (_faea ._fbde .RPr .Strike )};

// Bold returns true if run font is bold.
func (_ccage RunProperties )Bold ()bool {_bfda :=_ccage ._fdggb ;return _bbea (_bfda .B )||_bbea (_bfda .BCs );};

// Run is a run of text within a paragraph that shares the same formatting.
type Run struct{_ecdb *Document ;_edbgc *_eb .CT_R ;};

// TextItem is used for keeping text with references to a paragraph and run or a table, a row and a cell where it is located.
type TextItem struct{Text string ;DrawingInfo *DrawingInfo ;Paragraph *_eb .CT_P ;Hyperlink *_eb .CT_Hyperlink ;Run *_eb .CT_R ;TableInfo *TableInfo ;};

// SetOutline sets the run to outlined text.
func (_dfecg RunProperties )SetOutline (b bool ){if !b {_dfecg ._fdggb .Outline =nil ;}else {_dfecg ._fdggb .Outline =_eb .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_dcgd ParagraphProperties )X ()*_eb .CT_PPr {return _dcgd ._fbde };

// Style return the table style.
func (_dfgcg Table )Style ()string {if _dfgcg ._ffceg .TblPr !=nil &&_dfgcg ._ffceg .TblPr .TblStyle !=nil {return _dfgcg ._ffceg .TblPr .TblStyle .ValAttr ;};return "";};

// Save writes the document to an io.Writer in the Zip package format.
func (_eed *Document )Save (w _ab .Writer )error {return _eed .save (w ,_eed ._fgd )};func (_gda *Document )syncFootnoteSettings (){_aeg :=[]int64 {};_deae :=_gda .Footnotes ();for _ ,_feef :=range _deae {if _feef .X ().TypeAttr !=_eb .ST_FtnEdnUnset &&_feef .X ().TypeAttr !=_eb .ST_FtnEdnNormal {_aeg =append (_aeg ,_feef .X ().IdAttr );
};};_gad :=_gda .Settings .X ().CT_Settings .FootnotePr ;if _gad ==nil {_gad =_eb .NewCT_FtnDocProps ();};if len (_aeg )==0{_gad .Footnote =nil ;return ;};_gad .Footnote =[]*_eb .CT_FtnEdnSepRef {};for _ ,_dad :=range _aeg {_bagdf :=_eb .NewCT_FtnEdnSepRef ();
_bagdf .IdAttr =_dad ;_gad .Footnote =append (_gad .Footnote ,_bagdf );};};

// Fonts allows manipulating a style or run's fonts.
type Fonts struct{_gfcg *_eb .CT_Fonts };

// X returns the inner wrapped XML type.
func (_agdba Settings )X ()*_eb .Settings {return _agdba ._afcae };

// WatermarkText is watermark text within the document.
type WatermarkText struct{_ggfc *_eb .CT_Picture ;_dcedf *_ad .TextpathStyle ;_caafd *_cg .Shape ;_fdbc *_cg .Shapetype ;};func (_egbac *Document )syncEndnoteSettings (){_cdaf :=[]int64 {};_affd :=_egbac .Endnotes ();for _ ,_gcec :=range _affd {if _gcec .X ().TypeAttr !=_eb .ST_FtnEdnUnset &&_gcec .X ().TypeAttr !=_eb .ST_FtnEdnNormal {_cdaf =append (_cdaf ,_gcec .X ().IdAttr );
};};_aba :=_egbac .Settings .X ().CT_Settings .EndnotePr ;if _aba ==nil {_aba =_eb .NewCT_EdnDocProps ();};if len (_cdaf )==0{_aba .Endnote =nil ;return ;};_aba .Endnote =[]*_eb .CT_FtnEdnSepRef {};for _ ,_eddg :=range _cdaf {_abae :=_eb .NewCT_FtnEdnSepRef ();
_abae .IdAttr =_eddg ;_aba .Endnote =append (_aba .Endnote ,_abae );};};

// SetVAlignment sets the vertical alignment for an anchored image.
func (_ca AnchoredDrawing )SetVAlignment (v _eb .WdST_AlignV ){_ca ._ac .PositionV .Choice =&_eb .WdCT_PosVChoice {};_ca ._ac .PositionV .Choice .Align =v ;};

// // SetBeforeLineSpacing sets spacing above paragraph in line units.
func (_dgda Paragraph )SetBeforeLineSpacing (d _ebf .Distance ){_dgda .ensurePPr ();if _dgda ._ggec .PPr .Spacing ==nil {_dgda ._ggec .PPr .Spacing =_eb .NewCT_Spacing ();};_gded :=_dgda ._ggec .PPr .Spacing ;_gded .BeforeLinesAttr =_c .Int64 (int64 (d /_ebf .Twips ));
};

// X returns the inner wrapped type
func (_cbb CellBorders )X ()*_eb .CT_TcBorders {return _cbb ._df };func _gbef (_cgbf *_eb .CT_P ,_dfda *_eb .CT_Hyperlink ,_cgbac *TableInfo ,_bebg *DrawingInfo ,_bcbc []*_eb .EG_PContent )[]TextItem {if len (_bcbc )==0{return []TextItem {TextItem {Text :"",DrawingInfo :_bebg ,Paragraph :_cgbf ,Hyperlink :_dfda ,Run :nil ,TableInfo :_cgbac }};
};_effcf :=[]TextItem {};for _ ,_bdbd :=range _bcbc {for _ ,_dcgf :=range _bdbd .FldSimple {if _dcgf !=nil {_effcf =append (_effcf ,_gbef (_cgbf ,_dfda ,_cgbac ,_bebg ,_dcgf .EG_PContent )...);};};if _acfd :=_bdbd .Hyperlink ;_acfd !=nil {_effcf =append (_effcf ,_afebd (_cgbf ,_acfd ,_cgbac ,_bebg ,_acfd .EG_ContentRunContent )...);
};_effcf =append (_effcf ,_afebd (_cgbf ,nil ,_cgbac ,_bebg ,_bdbd .EG_ContentRunContent )...);};return _effcf ;};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_eafga TableStyleProperties )SetCellSpacingAuto (){_eafga ._bbdb .TblCellSpacing =_eb .NewCT_TblWidth ();_eafga ._bbdb .TblCellSpacing .TypeAttr =_eb .ST_TblWidthAuto ;};

// IsItalic returns true if the run has been set to italics.
func (_edaa RunProperties )IsItalic ()bool {return _edaa .ItalicValue ()==OnOffValueOn };

// SetVerticalAlignment controls the vertical alignment of the run, this is used
// to control if text is superscript/subscript.
func (_dgaa RunProperties )SetVerticalAlignment (v _bg .ST_VerticalAlignRun ){if v ==_bg .ST_VerticalAlignRunUnset {_dgaa ._fdggb .VertAlign =nil ;}else {_dgaa ._fdggb .VertAlign =_eb .NewCT_VerticalAlignRun ();_dgaa ._fdggb .VertAlign .ValAttr =v ;};};


// SetStyle sets style to the text in watermark.
func (_agdeg *WatermarkText )SetStyle (style _ad .TextpathStyle ){_afdfd :=_agdeg .getShape ();if _agdeg ._caafd !=nil {_eagf :=_agdeg ._caafd .EG_ShapeElements ;if len (_eagf )> 0&&_eagf [0].Textpath !=nil {var _gabbc =style .String ();_eagf [0].Textpath .StyleAttr =&_gabbc ;
};return ;};_bebb :=_agdeg .findNode (_afdfd ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _adbae ,_fcefe :=range _bebb .Attrs {if _fcefe .Name .Local =="\u0073\u0074\u0079l\u0065"{_bebb .Attrs [_adbae ].Value =style .String ();};};};

// SetTextWrapThrough sets the text wrap to through with a give wrap type.
func (_db AnchoredDrawing )SetTextWrapThrough (option *AnchorDrawWrapOptions ){_db ._ac .Choice =&_eb .WdEG_WrapTypeChoice {};_db ._ac .Choice .WrapThrough =_eb .NewWdCT_WrapThrough ();_db ._ac .Choice .WrapThrough .WrapTextAttr =_eb .WdST_WrapTextBothSides ;
_cgba :=false ;_db ._ac .Choice .WrapThrough .WrapPolygon .EditedAttr =&_cgba ;if option ==nil {option =NewAnchorDrawWrapOptions ();};_db ._ac .Choice .WrapThrough .WrapPolygon .Start =option .GetWrapPathStart ();_db ._ac .Choice .WrapThrough .WrapPolygon .LineTo =option .GetWrapPathLineTo ();
_db ._ac .LayoutInCellAttr =true ;_db ._ac .AllowOverlapAttr =true ;};

// Footnote is an individual footnote reference within the document.
type Footnote struct{_bbde *Document ;_bbff *_eb .CT_FtnEdn ;};

// AddDrawingInline adds an inline drawing from an ImageRef.
func (_addg Run )AddDrawingInline (img _aee .ImageRef )(InlineDrawing ,error ){_cdda :=_addg .newIC ();_cdda .Drawing =_eb .NewCT_Drawing ();_dcffg :=_eb .NewWdInline ();_eddeb :=InlineDrawing {_addg ._ecdb ,_dcffg };_dcffg .CNvGraphicFramePr =_bb .NewCT_NonVisualGraphicFrameProperties ();
_cdda .Drawing .Inline =append (_cdda .Drawing .Inline ,_dcffg );_dcffg .Graphic =_bb .NewGraphic ();_dcffg .Graphic .GraphicData =_bb .NewCT_GraphicalObjectData ();_dcffg .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";
_dcffg .DistTAttr =_c .Uint32 (0);_dcffg .DistLAttr =_c .Uint32 (0);_dcffg .DistBAttr =_c .Uint32 (0);_dcffg .DistRAttr =_c .Uint32 (0);_dcffg .Extent .CxAttr =int64 (float64 (img .Size ().X *_ebf .Pixel72 )/_ebf .EMU );_dcffg .Extent .CyAttr =int64 (float64 (img .Size ().Y *_ebf .Pixel72 )/_ebf .EMU );
_gfcdd :=0x7FFFFFFF&_d .Uint32 ();_dcffg .DocPr .IdAttr =_gfcdd ;_dffdd :=_fe .NewPic ();_dffdd .NvPicPr .CNvPr .IdAttr =_gfcdd ;_acec :=img .RelID ();if _acec ==""{return _eddeb ,_da .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");
};_dcffg .Graphic .GraphicData .Any =append (_dcffg .Graphic .GraphicData .Any ,_dffdd );_dffdd .BlipFill =_bb .NewCT_BlipFillProperties ();_dffdd .BlipFill .Blip =_bb .NewCT_Blip ();_dffdd .BlipFill .Blip .EmbedAttr =&_acec ;_dffdd .BlipFill .Stretch =_bb .NewCT_StretchInfoProperties ();
_dffdd .BlipFill .Stretch .FillRect =_bb .NewCT_RelativeRect ();_dffdd .SpPr =_bb .NewCT_ShapeProperties ();_dffdd .SpPr .Xfrm =_bb .NewCT_Transform2D ();_dffdd .SpPr .Xfrm .Off =_bb .NewCT_Point2D ();_dffdd .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_c .Int64 (0);
_dffdd .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_c .Int64 (0);_dffdd .SpPr .Xfrm .Ext =_bb .NewCT_PositiveSize2D ();_dffdd .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_ebf .Point );_dffdd .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_ebf .Point );
_dffdd .SpPr .PrstGeom =_bb .NewCT_PresetGeometry2D ();_dffdd .SpPr .PrstGeom .PrstAttr =_bb .ST_ShapeTypeRect ;return _eddeb ,nil ;};

// Text returns the underlying text in the run.
func (_afcc Run )Text ()string {if len (_afcc ._edbgc .EG_RunInnerContent )==0{return "";};_cead :=_af .Buffer {};for _ ,_fbcbd :=range _afcc ._edbgc .EG_RunInnerContent {if _fbcbd .T !=nil {_cead .WriteString (_fbcbd .T .Content );};if _fbcbd .Tab !=nil {_cead .WriteByte ('\t');
};};return _cead .String ();};

// SetTop sets the top border to a specified type, color and thickness.
func (_gfddac TableBorders )SetTop (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_gfddac ._bdab .Top =_eb .NewCT_Border ();_bdba (_gfddac ._bdab .Top ,t ,c ,thickness );};

// CellBorders are the borders for an individual
type CellBorders struct{_df *_eb .CT_TcBorders };

// SetShadow sets the run to shadowed text.
func (_cedad RunProperties )SetShadow (b bool ){if !b {_cedad ._fdggb .Shadow =nil ;}else {_cedad ._fdggb .Shadow =_eb .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_bgef Row )X ()*_eb .CT_Row {return _bgef ._ecfe };

// SetChecked marks a FormFieldTypeCheckBox as checked or unchecked.
func (_bbgff FormField )SetChecked (b bool ){if _bbgff ._bbdab .CheckBox ==nil {return ;};if !b {_bbgff ._bbdab .CheckBox .Checked =nil ;}else {_bbgff ._bbdab .CheckBox .Checked =_eb .NewCT_OnOff ();};};

// InsertStyle insert style to styles.
func (_agcf Styles )InsertStyle (ss Style ){_agcf ._gegd .Style =append (_agcf ._gegd .Style ,ss .X ())};func _abgd (_bbce *_eb .CT_P ,_abaf map[string ]string ){for _ ,_aggfdf :=range _bbce .EG_PContent {for _ ,_eedec :=range _aggfdf .EG_ContentRunContent {if _eedec .R !=nil {for _ ,_egff :=range _eedec .R .EG_RunInnerContent {_deda :=_egff .Drawing ;
if _deda !=nil {for _ ,_begag :=range _deda .Anchor {for _ ,_aef :=range _begag .Graphic .GraphicData .Any {switch _fggf :=_aef .(type ){case *_fe .Pic :if _fggf .BlipFill !=nil &&_fggf .BlipFill .Blip !=nil {_bcgfg (_fggf .BlipFill .Blip ,_abaf );};default:};
};};for _ ,_cacbe :=range _deda .Inline {for _ ,_affca :=range _cacbe .Graphic .GraphicData .Any {switch _bggcb :=_affca .(type ){case *_fe .Pic :if _bggcb .BlipFill !=nil &&_bggcb .BlipFill .Blip !=nil {_bcgfg (_bggcb .BlipFill .Blip ,_abaf );};default:};
};};};};};};};};

// X return element of Node as interface, can be either *Paragraph, *Table and Run.
func (_fagfc *Node )X ()interface{}{return _fagfc ._beea };

// CharacterSpacingValue returns the value of characters spacing in twips (1/20 of point).
func (_cdegg ParagraphProperties )CharacterSpacingValue ()int64 {if _ebdbb :=_cdegg ._fbde .RPr .Spacing ;_ebdbb !=nil {_fedcf :=_ebdbb .ValAttr ;if _fedcf .Int64 !=nil {return *_fedcf .Int64 ;};};return int64 (0);};

// UnderlineColor returns the hex color value of paragraph underline.
func (_eagee ParagraphProperties )UnderlineColor ()string {if _ddcfe :=_eagee ._fbde .RPr .U ;_ddcfe !=nil {_fgag :=_ddcfe .ColorAttr ;if _fgag !=nil &&_fgag .ST_HexColorRGB !=nil {return *_fgag .ST_HexColorRGB ;};};return "";};

// NewStyles constructs a new empty Styles
func NewStyles ()Styles {return Styles {_eb .NewStyles ()}};

// AddRun adds a run of text to a hyperlink. This is the text that will be linked.
func (_ebedd HyperLink )AddRun ()Run {_cgagc :=_eb .NewEG_ContentRunContent ();_ebedd ._fagd .EG_ContentRunContent =append (_ebedd ._fagd .EG_ContentRunContent ,_cgagc );_ffacd :=_eb .NewCT_R ();_cgagc .R =_ffacd ;return Run {_ebedd ._gcfd ,_ffacd };};


// AddRun adds a run to a paragraph.
func (_gcbe Paragraph )AddRun ()Run {_dbac :=_eb .NewEG_PContent ();_gcbe ._ggec .EG_PContent =append (_gcbe ._ggec .EG_PContent ,_dbac );_fcead :=_eb .NewEG_ContentRunContent ();_dbac .EG_ContentRunContent =append (_dbac .EG_ContentRunContent ,_fcead );
_dgffc :=_eb .NewCT_R ();_fcead .R =_dgffc ;return Run {_gcbe ._ddfge ,_dgffc };};func _cgcfc ()*_cg .Formulas {_ffcdd :=_cg .NewFormulas ();_ffcdd .F =[]*_cg .CT_F {_ad .CreateFormula ("\u0069\u0066 \u006c\u0069\u006e\u0065\u0044\u0072\u0061\u0077\u006e\u0020\u0070\u0069\u0078\u0065\u006c\u004c\u0069\u006e\u0065\u0057\u0069\u0064th\u0020\u0030"),_ad .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0030\u0020\u0031\u0020\u0030"),_ad .CreateFormula ("\u0073\u0075\u006d\u0020\u0030\u0020\u0030\u0020\u0040\u0031"),_ad .CreateFormula ("p\u0072\u006f\u0064\u0020\u0040\u0032\u0020\u0031\u0020\u0032"),_ad .CreateFormula ("\u0070r\u006f\u0064\u0020\u0040\u0033\u0020\u0032\u0031\u0036\u0030\u0030 \u0070\u0069\u0078\u0065\u006c\u0057\u0069\u0064\u0074\u0068"),_ad .CreateFormula ("\u0070r\u006f\u0064\u0020\u00403\u0020\u0032\u0031\u0036\u00300\u0020p\u0069x\u0065\u006c\u0048\u0065\u0069\u0067\u0068t"),_ad .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0030\u0020\u0030\u0020\u0031"),_ad .CreateFormula ("p\u0072\u006f\u0064\u0020\u0040\u0036\u0020\u0031\u0020\u0032"),_ad .CreateFormula ("\u0070r\u006f\u0064\u0020\u0040\u0037\u0020\u0032\u0031\u0036\u0030\u0030 \u0070\u0069\u0078\u0065\u006c\u0057\u0069\u0064\u0074\u0068"),_ad .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0038\u0020\u0032\u00316\u0030\u0030\u0020\u0030"),_ad .CreateFormula ("\u0070r\u006f\u0064\u0020\u00407\u0020\u0032\u0031\u0036\u00300\u0020p\u0069x\u0065\u006c\u0048\u0065\u0069\u0067\u0068t"),_ad .CreateFormula ("\u0073u\u006d \u0040\u0031\u0030\u0020\u0032\u0031\u0036\u0030\u0030\u0020\u0030")};
return _ffcdd ;};

// Properties returns the run properties.
func (_ggcgg Run )Properties ()RunProperties {if _ggcgg ._edbgc .RPr ==nil {_ggcgg ._edbgc .RPr =_eb .NewCT_RPr ();};return RunProperties {_ggcgg ._edbgc .RPr };};

// Caps returns true if run font is capitalized.
func (_adead RunProperties )Caps ()bool {return _bbea (_adead ._fdggb .Caps )};

// SetTextWrapTopAndBottom sets the text wrap to top and bottom.
func (_bf AnchoredDrawing )SetTextWrapTopAndBottom (){_bf ._ac .Choice =&_eb .WdEG_WrapTypeChoice {};_bf ._ac .Choice .WrapTopAndBottom =_eb .NewWdCT_WrapTopBottom ();_bf ._ac .LayoutInCellAttr =true ;_bf ._ac .AllowOverlapAttr =true ;};

// FormFields extracts all of the fields from a document.  They can then be
// manipulated via the methods on the field and the document saved.
func (_eacd *Document )FormFields ()[]FormField {_baeg :=[]FormField {};for _ ,_gedb :=range _eacd .Paragraphs (){_dafa :=_gedb .Runs ();for _cbbcd ,_bbcd :=range _dafa {for _ ,_cfba :=range _bbcd ._edbgc .EG_RunInnerContent {if _cfba .FldChar ==nil ||_cfba .FldChar .FfData ==nil {continue ;
};if _cfba .FldChar .FldCharTypeAttr ==_eb .ST_FldCharTypeBegin {if len (_cfba .FldChar .FfData .Name )==0||_cfba .FldChar .FfData .Name [0].ValAttr ==nil {continue ;};_abd :=FormField {_bbdab :_cfba .FldChar .FfData };if _cfba .FldChar .FfData .TextInput !=nil {for _afecg :=_cbbcd +1;
_afecg < len (_dafa )-1;_afecg ++{if len (_dafa [_afecg ]._edbgc .EG_RunInnerContent )==0{continue ;};_bec :=_dafa [_afecg ]._edbgc .EG_RunInnerContent [0];if _bec .FldChar !=nil &&_bec .FldChar .FldCharTypeAttr ==_eb .ST_FldCharTypeSeparate {if len (_dafa [_afecg +1]._edbgc .EG_RunInnerContent )==0{continue ;
};if _dafa [_afecg +1]._edbgc .EG_RunInnerContent [0].FldChar ==nil {_abd ._gedcf =_dafa [_afecg +1]._edbgc .EG_RunInnerContent [0];break ;};};};};_baeg =append (_baeg ,_abd );};};};};for _ ,_edefb :=range _eacd .Headers (){for _ ,_efcg :=range _edefb .Paragraphs (){_fcgc :=_efcg .Runs ();
for _aaeb ,_fgfb :=range _fcgc {for _ ,_afge :=range _fgfb ._edbgc .EG_RunInnerContent {if _afge .FldChar ==nil ||_afge .FldChar .FfData ==nil {continue ;};if _afge .FldChar .FldCharTypeAttr ==_eb .ST_FldCharTypeBegin {if len (_afge .FldChar .FfData .Name )==0||_afge .FldChar .FfData .Name [0].ValAttr ==nil {continue ;
};_fbag :=FormField {_bbdab :_afge .FldChar .FfData };if _afge .FldChar .FfData .TextInput !=nil {for _gcdd :=_aaeb +1;_gcdd < len (_fcgc )-1;_gcdd ++{if len (_fcgc [_gcdd ]._edbgc .EG_RunInnerContent )==0{continue ;};_bccg :=_fcgc [_gcdd ]._edbgc .EG_RunInnerContent [0];
if _bccg .FldChar !=nil &&_bccg .FldChar .FldCharTypeAttr ==_eb .ST_FldCharTypeSeparate {if len (_fcgc [_gcdd +1]._edbgc .EG_RunInnerContent )==0{continue ;};if _fcgc [_gcdd +1]._edbgc .EG_RunInnerContent [0].FldChar ==nil {_fbag ._gedcf =_fcgc [_gcdd +1]._edbgc .EG_RunInnerContent [0];
break ;};};};};_baeg =append (_baeg ,_fbag );};};};};};for _ ,_fec :=range _eacd .Footers (){for _ ,_fgbg :=range _fec .Paragraphs (){_bege :=_fgbg .Runs ();for _eacb ,_dafae :=range _bege {for _ ,_bcag :=range _dafae ._edbgc .EG_RunInnerContent {if _bcag .FldChar ==nil ||_bcag .FldChar .FfData ==nil {continue ;
};if _bcag .FldChar .FldCharTypeAttr ==_eb .ST_FldCharTypeBegin {if len (_bcag .FldChar .FfData .Name )==0||_bcag .FldChar .FfData .Name [0].ValAttr ==nil {continue ;};_cefb :=FormField {_bbdab :_bcag .FldChar .FfData };if _bcag .FldChar .FfData .TextInput !=nil {for _bgfdg :=_eacb +1;
_bgfdg < len (_bege )-1;_bgfdg ++{if len (_bege [_bgfdg ]._edbgc .EG_RunInnerContent )==0{continue ;};_adagc :=_bege [_bgfdg ]._edbgc .EG_RunInnerContent [0];if _adagc .FldChar !=nil &&_adagc .FldChar .FldCharTypeAttr ==_eb .ST_FldCharTypeSeparate {if len (_bege [_bgfdg +1]._edbgc .EG_RunInnerContent )==0{continue ;
};if _bege [_bgfdg +1]._edbgc .EG_RunInnerContent [0].FldChar ==nil {_cefb ._gedcf =_bege [_bgfdg +1]._edbgc .EG_RunInnerContent [0];break ;};};};};_baeg =append (_baeg ,_cefb );};};};};};return _baeg ;};

// ExtractTextOptions extraction text options.
type ExtractTextOptions struct{

// WithNumbering extract numbering elements if set to `true`.
WithNumbering bool ;

// NumberingIndent default value of numbering indent.
NumberingIndent string ;

// RunsOnNewLine write each of runs text on new line if set to `true`.
RunsOnNewLine bool ;};

// SetMultiLevelType sets the multilevel type.
func (_agee NumberingDefinition )SetMultiLevelType (t _eb .ST_MultiLevelType ){if t ==_eb .ST_MultiLevelTypeUnset {_agee ._degbd .MultiLevelType =nil ;}else {_agee ._degbd .MultiLevelType =_eb .NewCT_MultiLevelType ();_agee ._degbd .MultiLevelType .ValAttr =t ;
};};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_cgdc RunProperties )SizeMeasure ()string {if _edbed :=_cgdc ._fdggb .Sz ;_edbed !=nil {_gbeb :=_edbed .ValAttr ;if _gbeb .ST_PositiveUniversalMeasure !=nil {return *_gbeb .ST_PositiveUniversalMeasure ;};};return "";};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_bafa Paragraph )SetFirstLineIndent (m _ebf .Distance ){_bafa .ensurePPr ();_accea :=_bafa ._ggec .PPr ;if _accea .Ind ==nil {_accea .Ind =_eb .NewCT_Ind ();};if m ==_ebf .Zero {_accea .Ind .FirstLineAttr =nil ;}else {_accea .Ind .FirstLineAttr =&_bg .ST_TwipsMeasure {};
_accea .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_ebf .Twips ));};};

// InsertRunBefore inserts a run in the paragraph before the relative run.
func (_fgcb Paragraph )InsertRunBefore (relativeTo Run )Run {return _fgcb .insertRun (relativeTo ,true )};

// AddHyperLink adds a new hyperlink to a parapgraph.
func (_bgeg Paragraph )AddHyperLink ()HyperLink {_aagg :=_eb .NewEG_PContent ();_bgeg ._ggec .EG_PContent =append (_bgeg ._ggec .EG_PContent ,_aagg );_aagg .Hyperlink =_eb .NewCT_Hyperlink ();return HyperLink {_bgeg ._ddfge ,_aagg .Hyperlink };};

// WatermarkPicture is watermark picture within document.
type WatermarkPicture struct{_debae *_eb .CT_Picture ;_becee *_ad .ShapeStyle ;_befe *_cg .Shape ;_dadga *_cg .Shapetype ;};const (FormFieldTypeUnknown FormFieldType =iota ;FormFieldTypeText ;FormFieldTypeCheckBox ;FormFieldTypeDropDown ;);

// SetAlignment sets the paragraph alignment
func (_eaaec NumberingLevel )SetAlignment (j _eb .ST_Jc ){if j ==_eb .ST_JcUnset {_eaaec ._cgbe .LvlJc =nil ;}else {_eaaec ._cgbe .LvlJc =_eb .NewCT_Jc ();_eaaec ._cgbe .LvlJc .ValAttr =j ;};};

// SetFontFamily sets the Ascii & HAnsi fonly family for a run.
func (_adacf RunProperties )SetFontFamily (family string ){if _adacf ._fdggb .RFonts ==nil {_adacf ._fdggb .RFonts =_eb .NewCT_Fonts ();};_adacf ._fdggb .RFonts .AsciiAttr =_c .String (family );_adacf ._fdggb .RFonts .HAnsiAttr =_c .String (family );_adacf ._fdggb .RFonts .EastAsiaAttr =_c .String (family );
};

// X return slice of node.
func (_ccad *Nodes )X ()[]Node {return _ccad ._afgbd };

// Properties returns the paragraph properties.
func (_deeed Paragraph )Properties ()ParagraphProperties {_deeed .ensurePPr ();return ParagraphProperties {_deeed ._ddfge ,_deeed ._ggec .PPr };};

// SetAlignment positions an anchored image via alignment.  Offset is
// incompatible with SetOffset, whichever is called last is applied.
func (_bc AnchoredDrawing )SetAlignment (h _eb .WdST_AlignH ,v _eb .WdST_AlignV ){_bc .SetHAlignment (h );_bc .SetVAlignment (v );};

// X returns the inner wml.CT_TblBorders
func (_cbfbe TableBorders )X ()*_eb .CT_TblBorders {return _cbfbe ._bdab };func (_gfg *chart )Target ()string {return _gfg ._eac };

// SetBottom sets the cell bottom margin
func (_gbg CellMargins )SetBottom (d _ebf .Distance ){_gbg ._aag .Bottom =_eb .NewCT_TblWidth ();_afe (_gbg ._aag .Bottom ,d );};

// SetWindowControl controls if the first or last line of the paragraph is
// allowed to display on a separate page.
func (_cegg ParagraphProperties )SetWindowControl (b bool ){if !b {_cegg ._fbde .WidowControl =nil ;}else {_cegg ._fbde .WidowControl =_eb .NewCT_OnOff ();};};

// CharacterSpacingValue returns the value of run's characters spacing in twips (1/20 of point).
func (_ebge RunProperties )CharacterSpacingValue ()int64 {if _cedbf :=_ebge ._fdggb .Spacing ;_cedbf !=nil {_geba :=_cedbf .ValAttr ;if _geba .Int64 !=nil {return *_geba .Int64 ;};};return int64 (0);};

// SetBottomPct sets the cell bottom margin
func (_dg CellMargins )SetBottomPct (pct float64 ){_dg ._aag .Bottom =_eb .NewCT_TblWidth ();_ddaa (_dg ._aag .Bottom ,pct );};

// AddBookmark adds a bookmark to a document that can then be used from a hyperlink. Name is a document
// unique name that identifies the bookmark so it can be referenced from hyperlinks.
func (_ebdc Paragraph )AddBookmark (name string )Bookmark {_ebfe :=_eb .NewEG_PContent ();_fefgc :=_eb .NewEG_ContentRunContent ();_ebfe .EG_ContentRunContent =append (_ebfe .EG_ContentRunContent ,_fefgc );_ebdfd :=_eb .NewEG_RunLevelElts ();_fefgc .EG_RunLevelElts =append (_fefgc .EG_RunLevelElts ,_ebdfd );
_gcea :=_eb .NewEG_RangeMarkupElements ();_dgcc :=_eb .NewCT_Bookmark ();_gcea .BookmarkStart =_dgcc ;_ebdfd .EG_RangeMarkupElements =append (_ebdfd .EG_RangeMarkupElements ,_gcea );_gcea =_eb .NewEG_RangeMarkupElements ();_gcea .BookmarkEnd =_eb .NewCT_MarkupRange ();
_ebdfd .EG_RangeMarkupElements =append (_ebdfd .EG_RangeMarkupElements ,_gcea );_ebdc ._ggec .EG_PContent =append (_ebdc ._ggec .EG_PContent ,_ebfe );_bfdc :=Bookmark {_dgcc };_bfdc .SetName (name );return _bfdc ;};

// RemoveFootnote removes a footnote from both the paragraph and the document
// the requested footnote must be anchored on the paragraph being referenced.
//
// After each removal, the rest of the footnote ids would be reordered.
func (_egacf Paragraph )RemoveFootnote (id int64 ){for _ ,_adgc :=range _egacf .Runs (){if _eafg ,_eagc :=_adgc .IsFootnote ();_eafg {if _eagc ==id {_egacf .RemoveRun (_adgc );break ;};};};_egacf ._ddfge .removeFootnote (id );};

// Paragraph is a paragraph within a document.
type Paragraph struct{_ddfge *Document ;_ggec *_eb .CT_P ;};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_ffae Header )AddImage (i _aee .Image )(_aee .ImageRef ,error ){var _aaee _aee .Relationships ;for _abff ,_fgacf :=range _ffae ._dcdf ._abg {if _fgacf ==_ffae ._ccaed {_aaee =_ffae ._dcdf ._cgcc [_abff ];};};_aaaa :=_aee .MakeImageRef (i ,&_ffae ._dcdf .DocBase ,_aaee );
if i .Data ==nil &&i .Path ==""{return _aaaa ,_da .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _aaaa ,_da .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};if i .Size .X ==0||i .Size .Y ==0{return _aaaa ,_da .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_ffae ._dcdf .Images =append (_ffae ._dcdf .Images ,_aaaa );
_faebg :=_ede .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_ffae ._dcdf .Images ),i .Format );_fadb :=_aaee .AddRelationship (_faebg ,_c .ImageType );_aaaa .SetRelID (_fadb .X ().IdAttr );return _aaaa ,nil ;
};func (_ccagc Paragraph )ensurePPr (){if _ccagc ._ggec .PPr ==nil {_ccagc ._ggec .PPr =_eb .NewCT_PPr ();};};

// SetVerticalBanding controls the conditional formatting for vertical banding.
func (_fggg TableLook )SetVerticalBanding (on bool ){if !on {_fggg ._bcdcb .NoVBandAttr =&_bg .ST_OnOff {};_fggg ._bcdcb .NoVBandAttr .ST_OnOff1 =_bg .ST_OnOff1On ;}else {_fggg ._bcdcb .NoVBandAttr =&_bg .ST_OnOff {};_fggg ._bcdcb .NoVBandAttr .ST_OnOff1 =_bg .ST_OnOff1Off ;
};};func (_dcfe *Document )insertNumberingFromStyleProperties (_bgdb Numbering ,_fedcg ParagraphStyleProperties ){_fabc :=_fedcg .NumId ();_ddbb :=int64 (-1);if _fabc > -1{for _ ,_abaec :=range _bgdb ._aedgf .Num {if _abaec .NumIdAttr ==_fabc {if _abaec .AbstractNumId !=nil {_ddbb =_abaec .AbstractNumId .ValAttr ;
_dcga :=false ;for _ ,_eeadc :=range _dcfe .Numbering ._aedgf .Num {if _eeadc .NumIdAttr ==_fabc {_dcga =true ;break ;};};if !_dcga {_dcfe .Numbering ._aedgf .Num =append (_dcfe .Numbering ._aedgf .Num ,_abaec );};break ;};};};for _ ,_ffgdc :=range _bgdb ._aedgf .AbstractNum {if _ffgdc .AbstractNumIdAttr ==_ddbb {_adac :=false ;
for _ ,_bbgad :=range _dcfe .Numbering ._aedgf .AbstractNum {if _bbgad .AbstractNumIdAttr ==_ddbb {_adac =true ;break ;};};if !_adac {_dcfe .Numbering ._aedgf .AbstractNum =append (_dcfe .Numbering ._aedgf .AbstractNum ,_ffgdc );};break ;};};};};

// SetWidthPercent sets the table to a width percentage.
func (_dgdfg TableProperties )SetWidthPercent (pct float64 ){_dgdfg ._ggcad .TblW =_eb .NewCT_TblWidth ();_dgdfg ._ggcad .TblW .TypeAttr =_eb .ST_TblWidthPct ;_dgdfg ._ggcad .TblW .WAttr =&_eb .ST_MeasurementOrPercent {};_dgdfg ._ggcad .TblW .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};
_dgdfg ._ggcad .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (pct *50));};

// Paragraphs returns all of the paragraphs in the document body including tables.
func (_cgdf *Document )Paragraphs ()[]Paragraph {_fad :=[]Paragraph {};if _cgdf ._cbd .Body ==nil {return nil ;};for _ ,_eeda :=range _cgdf ._cbd .Body .EG_BlockLevelElts {for _ ,_dcc :=range _eeda .EG_ContentBlockContent {for _ ,_fcca :=range _dcc .P {_fad =append (_fad ,Paragraph {_cgdf ,_fcca });
};};};for _ ,_cbded :=range _cgdf .Tables (){for _ ,_fdd :=range _cbded .Rows (){for _ ,_dagf :=range _fdd .Cells (){_fad =append (_fad ,_dagf .Paragraphs ()...);};};};return _fad ;};

// SetVerticalAlignment sets the vertical alignment of content within a table cell.
func (_cba CellProperties )SetVerticalAlignment (align _eb .ST_VerticalJc ){if align ==_eb .ST_VerticalJcUnset {_cba ._ced .VAlign =nil ;}else {_cba ._ced .VAlign =_eb .NewCT_VerticalJc ();_cba ._ced .VAlign .ValAttr =align ;};};

// X returns the inner wrapped XML type.
func (_becc NumberingDefinition )X ()*_eb .CT_AbstractNum {return _becc ._degbd };

// AddSection adds a new document section with an optional section break.  If t
// is ST_SectionMarkUnset, then no break will be inserted.
func (_dcbb ParagraphProperties )AddSection (t _eb .ST_SectionMark )Section {_dcbb ._fbde .SectPr =_eb .NewCT_SectPr ();if t !=_eb .ST_SectionMarkUnset {_dcbb ._fbde .SectPr .Type =_eb .NewCT_SectType ();_dcbb ._fbde .SectPr .Type .ValAttr =t ;};return Section {_dcbb ._gefda ,_dcbb ._fbde .SectPr };
};

// Properties returns the table properties.
func (_gcfdc Table )Properties ()TableProperties {if _gcfdc ._ffceg .TblPr ==nil {_gcfdc ._ffceg .TblPr =_eb .NewCT_TblPr ();};return TableProperties {_gcfdc ._ffceg .TblPr };};

// RemoveMailMerge removes any mail merge settings
func (_effag Settings )RemoveMailMerge (){_effag ._afcae .MailMerge =nil };

// X returns the inner wrapped XML type.
func (_gdeee Styles )X ()*_eb .Styles {return _gdeee ._gegd };

// SizeValue returns the value of run font size in points.
func (_agfd RunProperties )SizeValue ()float64 {if _fgaa :=_agfd ._fdggb .Sz ;_fgaa !=nil {_geff :=_fgaa .ValAttr ;if _geff .ST_UnsignedDecimalNumber !=nil {return float64 (*_geff .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// GetSize return the size of anchor on the page.
func (_cgd AnchoredDrawing )GetSize ()(_fac ,_bce int64 ){return _cgd ._ac .Extent .CxAttr ,_cgd ._ac .Extent .CyAttr ;};func _ccgad ()*_cg .Imagedata {_gbfg :=_cg .NewImagedata ();_fcagd :="\u0072\u0049\u0064\u0031";_befec :="\u0057A\u0054\u0045\u0052\u004d\u0041\u0052K";
_gbfg .IdAttr =&_fcagd ;_gbfg .TitleAttr =&_befec ;return _gbfg ;};

// AddDefinition adds a new numbering definition.
func (_bffb Numbering )AddDefinition ()NumberingDefinition {_cggcg :=_eb .NewCT_Num ();_aagb :=int64 (1);for _ ,_ebggb :=range _bffb .Definitions (){if _ebggb .AbstractNumberID ()>=_aagb {_aagb =_ebggb .AbstractNumberID ()+1;};};_gadg :=int64 (1);for _ ,_bfbgg :=range _bffb .X ().Num {if _bfbgg .NumIdAttr >=_gadg {_gadg =_bfbgg .NumIdAttr +1;
};};_cggcg .NumIdAttr =_gadg ;_cggcg .AbstractNumId =_eb .NewCT_DecimalNumber ();_cggcg .AbstractNumId .ValAttr =_aagb ;_gbf :=_eb .NewCT_AbstractNum ();_gbf .AbstractNumIdAttr =_aagb ;_bffb ._aedgf .AbstractNum =append (_bffb ._aedgf .AbstractNum ,_gbf );
_bffb ._aedgf .Num =append (_bffb ._aedgf .Num ,_cggcg );return NumberingDefinition {_gbf };};

// Spacing returns the paragraph spacing settings.
func (_ebbb ParagraphProperties )Spacing ()ParagraphSpacing {if _ebbb ._fbde .Spacing ==nil {_ebbb ._fbde .Spacing =_eb .NewCT_Spacing ();};return ParagraphSpacing {_ebbb ._fbde .Spacing };};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_afcb ParagraphBorders )SetBottom (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_afcb ._fafc .Bottom =_eb .NewCT_Border ();_afgff (_afcb ._fafc .Bottom ,t ,c ,thickness );};func (_ebfc *Document )reorderFootnote (){_geab :=int64 (1);
_dddd :=map[int64 ]int64 {};for _ ,_cffga :=range _ebfc ._fbc .Footnote {switch _cffga .TypeAttr {case _eb .ST_FtnEdnSeparator :_cffga .IdAttr =-1;break ;case _eb .ST_FtnEdnContinuationSeparator :_cffga .IdAttr =0;break ;default:_dddd [_cffga .IdAttr ]=_geab ;
_cffga .IdAttr =_geab ;_geab ++;};};for _ ,_bdge :=range _ebfc .Paragraphs (){for _ ,_gce :=range _bdge .Runs (){if _gfd ,_ccef :=_gce .IsFootnote ();_gfd {_gce .X ().EG_RunInnerContent [0].FootnoteReference .IdAttr =_dddd [_ccef ];};};};};func (_agbeb Paragraph )insertRun (_dcced Run ,_cgbb bool )Run {for _ ,_cgac :=range _agbeb ._ggec .EG_PContent {for _aadfc ,_aedgfc :=range _cgac .EG_ContentRunContent {if _aedgfc .R ==_dcced .X (){_ggac :=_eb .NewCT_R ();
_cgac .EG_ContentRunContent =append (_cgac .EG_ContentRunContent ,nil );if _cgbb {copy (_cgac .EG_ContentRunContent [_aadfc +1:],_cgac .EG_ContentRunContent [_aadfc :]);_cgac .EG_ContentRunContent [_aadfc ]=_eb .NewEG_ContentRunContent ();_cgac .EG_ContentRunContent [_aadfc ].R =_ggac ;
}else {copy (_cgac .EG_ContentRunContent [_aadfc +2:],_cgac .EG_ContentRunContent [_aadfc +1:]);_cgac .EG_ContentRunContent [_aadfc +1]=_eb .NewEG_ContentRunContent ();_cgac .EG_ContentRunContent [_aadfc +1].R =_ggac ;};return Run {_agbeb ._ddfge ,_ggac };
};if _aedgfc .Sdt !=nil &&_aedgfc .Sdt .SdtContent !=nil {for _ ,_bdgag :=range _aedgfc .Sdt .SdtContent .EG_ContentRunContent {if _bdgag .R ==_dcced .X (){_bbdgc :=_eb .NewCT_R ();_aedgfc .Sdt .SdtContent .EG_ContentRunContent =append (_aedgfc .Sdt .SdtContent .EG_ContentRunContent ,nil );
if _cgbb {copy (_aedgfc .Sdt .SdtContent .EG_ContentRunContent [_aadfc +1:],_aedgfc .Sdt .SdtContent .EG_ContentRunContent [_aadfc :]);_aedgfc .Sdt .SdtContent .EG_ContentRunContent [_aadfc ]=_eb .NewEG_ContentRunContent ();_aedgfc .Sdt .SdtContent .EG_ContentRunContent [_aadfc ].R =_bbdgc ;
}else {copy (_aedgfc .Sdt .SdtContent .EG_ContentRunContent [_aadfc +2:],_aedgfc .Sdt .SdtContent .EG_ContentRunContent [_aadfc +1:]);_aedgfc .Sdt .SdtContent .EG_ContentRunContent [_aadfc +1]=_eb .NewEG_ContentRunContent ();_aedgfc .Sdt .SdtContent .EG_ContentRunContent [_aadfc +1].R =_bbdgc ;
};return Run {_agbeb ._ddfge ,_bbdgc };};};};};};return _agbeb .AddRun ();};

// ParagraphBorders allows manipulation of borders on a paragraph.
type ParagraphBorders struct{_ceeb *Document ;_fafc *_eb .CT_PBdr ;};

// X returns the inner wrapped XML type.
func (_fffea Run )X ()*_eb .CT_R {return _fffea ._edbgc };

// AnchorDrawWrapOptions is options to set
// wrapPolygon for wrap text through and tight.
type AnchorDrawWrapOptions struct{_fg bool ;_ddb *_bb .CT_Point2D ;_fcc []*_bb .CT_Point2D ;};

// TableLook is the conditional formatting associated with a table style that
// has been assigned to a table.
type TableLook struct{_bcdcb *_eb .CT_TblLook };

// TableLook returns the table look, or conditional formatting applied to a table style.
func (_ebec TableProperties )TableLook ()TableLook {if _ebec ._ggcad .TblLook ==nil {_ebec ._ggcad .TblLook =_eb .NewCT_TblLook ();};return TableLook {_ebec ._ggcad .TblLook };};

// SetAlignment controls the paragraph alignment
func (_egbe ParagraphProperties )SetAlignment (align _eb .ST_Jc ){if align ==_eb .ST_JcUnset {_egbe ._fbde .Jc =nil ;}else {_egbe ._fbde .Jc =_eb .NewCT_Jc ();_egbe ._fbde .Jc .ValAttr =align ;};};func (_ddge *Document )addFootnoteSeparator (){_dea :=_eb .NewCT_FtnEdn ();
_dea .IdAttr =-1;_dea .TypeAttr =_eb .ST_FtnEdnSeparator ;_dbed :=Footnote {_ddge ,_dea };_dbed .X ().EG_BlockLevelElts =[]*_eb .EG_BlockLevelElts {_eb .NewEG_BlockLevelElts ()};_dbcd :=_dbed .AddParagraph ();_dbcd .X ().PPr =nil ;_bfbd :=_dbcd .AddRun ();
_cafdc :=_bfbd .newIC ();_cafdc .Separator =_eb .NewCT_Empty ();_ddge ._fbc .CT_Footnotes .Footnote =append (_ddge ._fbc .CT_Footnotes .Footnote ,_dea );_dea =_eb .NewCT_FtnEdn ();_dea .IdAttr =0;_dea .TypeAttr =_eb .ST_FtnEdnContinuationSeparator ;_dbed =Footnote {_ddge ,_dea };
_dbed .X ().EG_BlockLevelElts =[]*_eb .EG_BlockLevelElts {_eb .NewEG_BlockLevelElts ()};_dbcd =_dbed .AddParagraph ();_dbcd .X ().PPr =nil ;_bfbd =_dbcd .AddRun ();_cafdc =_bfbd .newIC ();_cafdc .ContinuationSeparator =_eb .NewCT_Empty ();_ddge ._fbc .CT_Footnotes .Footnote =append (_ddge ._fbc .CT_Footnotes .Footnote ,_dea );
};

// Tables returns the tables defined in the header.
func (_feca Header )Tables ()[]Table {_dfgc :=[]Table {};if _feca ._ccaed ==nil {return nil ;};for _ ,_ebeg :=range _feca ._ccaed .EG_ContentBlockContent {for _ ,_bdef :=range _feca ._dcdf .tables (_ebeg ){_dfgc =append (_dfgc ,_bdef );};};return _dfgc ;
};

// InsertParagraphBefore adds a new empty paragraph before the relativeTo
// paragraph.
func (_bega *Document )InsertParagraphBefore (relativeTo Paragraph )Paragraph {return _bega .insertParagraph (relativeTo ,true );};func (_gefdb *WatermarkPicture )findNode (_ceace *_c .XSDAny ,_bfgfg string )*_c .XSDAny {for _ ,_cbedc :=range _ceace .Nodes {if _cbedc .XMLName .Local ==_bfgfg {return _cbedc ;
};};return nil ;};

// SetStyle sets the font size.
func (_gfdf RunProperties )SetStyle (style string ){if style ==""{_gfdf ._fdggb .RStyle =nil ;}else {_gfdf ._fdggb .RStyle =_eb .NewCT_String ();_gfdf ._fdggb .RStyle .ValAttr =style ;};};

// Borders allows manipulation of the table borders.
func (_eegf TableStyleProperties )Borders ()TableBorders {if _eegf ._bbdb .TblBorders ==nil {_eegf ._bbdb .TblBorders =_eb .NewCT_TblBorders ();};return TableBorders {_eegf ._bbdb .TblBorders };};

// Font returns the name of run font family.
func (_babc RunProperties )Font ()string {if _fbbfc :=_babc ._fdggb .RFonts ;_fbbfc !=nil {if _fbbfc .AsciiAttr !=nil {return *_fbbfc .AsciiAttr ;}else if _fbbfc .HAnsiAttr !=nil {return *_fbbfc .HAnsiAttr ;}else if _fbbfc .CsAttr !=nil {return *_fbbfc .CsAttr ;
};};return "";};

// X returns the inner wrapped XML type.
func (_ggge TableWidth )X ()*_eb .CT_TblWidth {return _ggge ._fgee };

// Outline returns true if run outline is on.
func (_dbdda RunProperties )Outline ()bool {return _bbea (_dbdda ._fdggb .Outline )};

// SetHangingIndent controls special indent of paragraph.
func (_gcge Paragraph )SetHangingIndent (m _ebf .Distance ){_gcge .ensurePPr ();_cbfe :=_gcge ._ggec .PPr ;if _cbfe .Ind ==nil {_cbfe .Ind =_eb .NewCT_Ind ();};if m ==_ebf .Zero {_cbfe .Ind .HangingAttr =nil ;}else {_cbfe .Ind .HangingAttr =&_bg .ST_TwipsMeasure {};
_cbfe .Ind .HangingAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_ebf .Twips ));};};

// SetWidth sets the cell width to a specified width.
func (_bdc CellProperties )SetWidth (d _ebf .Distance ){_bdc ._ced .TcW =_eb .NewCT_TblWidth ();_bdc ._ced .TcW .TypeAttr =_eb .ST_TblWidthDxa ;_bdc ._ced .TcW .WAttr =&_eb .ST_MeasurementOrPercent {};_bdc ._ced .TcW .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};
_bdc ._ced .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (d /_ebf .Twips ));};

// ReplaceTextByRegexp replace text inside node using regexp.
func (_afcd *Nodes )ReplaceTextByRegexp (expr *_a .Regexp ,newText string ){for _ ,_gdee :=range _afcd ._afgbd {_gdee .ReplaceTextByRegexp (expr ,newText );};};func (_dgbf *WatermarkText )getShape ()*_c .XSDAny {return _dgbf .getInnerElement ("\u0073\u0068\u0061p\u0065");
};

// InsertParagraphAfter adds a new empty paragraph after the relativeTo
// paragraph.
func (_dee *Document )InsertParagraphAfter (relativeTo Paragraph )Paragraph {return _dee .insertParagraph (relativeTo ,false );};

// SetEndIndent controls the end indentation.
func (_efdba ParagraphProperties )SetEndIndent (m _ebf .Distance ){if _efdba ._fbde .Ind ==nil {_efdba ._fbde .Ind =_eb .NewCT_Ind ();};if m ==_ebf .Zero {_efdba ._fbde .Ind .EndAttr =nil ;}else {_efdba ._fbde .Ind .EndAttr =&_eb .ST_SignedTwipsMeasure {};
_efdba ._fbde .Ind .EndAttr .Int64 =_c .Int64 (int64 (m /_ebf .Twips ));};};

// SetHANSITheme sets the font H ANSI Theme.
func (_gcdcg Fonts )SetHANSITheme (t _eb .ST_Theme ){_gcdcg ._gfcg .HAnsiThemeAttr =t };

// SetPossibleValues sets possible values for a FormFieldTypeDropDown.
func (_gfac FormField )SetPossibleValues (values []string ){if _gfac ._bbdab .DdList !=nil {for _ ,_ebgd :=range values {_feeaf :=_eb .NewCT_String ();_feeaf .ValAttr =_ebgd ;_gfac ._bbdab .DdList .ListEntry =append (_gfac ._bbdab .DdList .ListEntry ,_feeaf );
};};};

// Levels returns all of the numbering levels defined in the definition.
func (_aaec NumberingDefinition )Levels ()[]NumberingLevel {_cddg :=[]NumberingLevel {};for _ ,_gaaba :=range _aaec ._degbd .Lvl {_cddg =append (_cddg ,NumberingLevel {_gaaba });};return _cddg ;};

// SetToolTip sets the tooltip text for a hyperlink.
func (_daab HyperLink )SetToolTip (text string ){if text ==""{_daab ._fagd .TooltipAttr =nil ;}else {_daab ._fagd .TooltipAttr =_c .String (text );};};

// PutNodeBefore put node to position before relativeTo.
func (_aebd *Document )PutNodeBefore (relativeTo ,node Node ){_aebd .putNode (relativeTo ,node ,true )};

// SetWrapPathLineTo sets wrapPath lineTo value.
func (_cc AnchorDrawWrapOptions )SetWrapPathLineTo (coordinates []*_bb .CT_Point2D ){_cc ._fcc =coordinates ;};func _cgded ()*_cg .Formulas {_ceadf :=_cg .NewFormulas ();_ceadf .F =[]*_cg .CT_F {_ad .CreateFormula ("\u0073\u0075\u006d\u0020\u0023\u0030\u0020\u0030\u00201\u0030\u0038\u0030\u0030"),_ad .CreateFormula ("p\u0072\u006f\u0064\u0020\u0023\u0030\u0020\u0032\u0020\u0031"),_ad .CreateFormula ("\u0073\u0075\u006d\u0020\u0032\u0031\u0036\u0030\u0030 \u0030\u0020\u0040\u0031"),_ad .CreateFormula ("\u0073\u0075\u006d\u0020\u0030\u0020\u0030\u0020\u0040\u0032"),_ad .CreateFormula ("\u0073\u0075\u006d\u0020\u0032\u0031\u0036\u0030\u0030 \u0030\u0020\u0040\u0033"),_ad .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0040\u0033\u0020\u0030"),_ad .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0032\u0031\u00360\u0030\u0020\u0040\u0031"),_ad .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0030\u0020\u0040\u0032"),_ad .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0040\u0034\u00202\u0031\u0036\u0030\u0030"),_ad .CreateFormula ("\u006di\u0064\u0020\u0040\u0035\u0020\u00406"),_ad .CreateFormula ("\u006di\u0064\u0020\u0040\u0038\u0020\u00405"),_ad .CreateFormula ("\u006di\u0064\u0020\u0040\u0037\u0020\u00408"),_ad .CreateFormula ("\u006di\u0064\u0020\u0040\u0036\u0020\u00407"),_ad .CreateFormula ("s\u0075\u006d\u0020\u0040\u0036\u0020\u0030\u0020\u0040\u0035")};
return _ceadf ;};

// DocText is an array of extracted text items which has some methods for representing extracted text.
type DocText struct{Items []TextItem ;_ecbc []listItemInfo ;_dafge map[int64 ]map[int64 ]int64 ;};

// RunProperties returns the run properties controlling text formatting within the table.
func (_daacf TableConditionalFormatting )RunProperties ()RunProperties {if _daacf ._eadcf .RPr ==nil {_daacf ._eadcf .RPr =_eb .NewCT_RPr ();};return RunProperties {_daacf ._eadcf .RPr };};func (_aabe *Document )getWatermarkHeaderInnerContentPictures ()[]*_eb .CT_Picture {var _gbea []*_eb .CT_Picture ;
for _ ,_gffd :=range _aabe .Headers (){for _ ,_gdaa :=range _gffd .X ().EG_ContentBlockContent {for _ ,_accf :=range _gdaa .P {for _ ,_fcea :=range _accf .EG_PContent {for _ ,_agbc :=range _fcea .EG_ContentRunContent {if _agbc .R ==nil {continue ;};for _ ,_gcag :=range _agbc .R .EG_RunInnerContent {if _gcag .Pict ==nil {continue ;
};_dfac :=false ;for _ ,_cgcfb :=range _gcag .Pict .Any {_geceb ,_dbcee :=_cgcfb .(*_c .XSDAny );if _dbcee &&_geceb .XMLName .Local =="\u0073\u0068\u0061p\u0065"{_dfac =true ;};};if _dfac {_gbea =append (_gbea ,_gcag .Pict );};};};};};};};return _gbea ;
};

// AddHeader creates a header associated with the document, but doesn't add it
// to the document for display.
func (_gdg *Document )AddHeader ()Header {_ddff :=_eb .NewHdr ();_gdg ._abg =append (_gdg ._abg ,_ddff );_gcd :=_ede .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_gdg ._abg ));_gdg ._ada .AddRelationship (_gcd ,_c .HeaderType );
_gdg .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_gcd ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");
_gdg ._cgcc =append (_gdg ._cgcc ,_aee .NewRelationships ());return Header {_gdg ,_ddff };};

// SetBold sets the run to bold.
func (_fdgf RunProperties )SetBold (b bool ){if !b {_fdgf ._fdggb .B =nil ;_fdgf ._fdggb .BCs =nil ;}else {_fdgf ._fdggb .B =_eb .NewCT_OnOff ();_fdgf ._fdggb .BCs =_eb .NewCT_OnOff ();};};

// SetHAlignment sets the horizontal alignment for an anchored image.
func (_cgg AnchoredDrawing )SetHAlignment (h _eb .WdST_AlignH ){_cgg ._ac .PositionH .Choice =&_eb .WdCT_PosHChoice {};_cgg ._ac .PositionH .Choice .Align =h ;};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_gfdb TableBorders )SetInsideHorizontal (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_gfdb ._bdab .InsideH =_eb .NewCT_Border ();_bdba (_gfdb ._bdab .InsideH ,t ,c ,thickness );};

// SetAll sets all of the borders to a given value.
func (_abffc ParagraphBorders )SetAll (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_abffc .SetBottom (t ,c ,thickness );_abffc .SetLeft (t ,c ,thickness );_abffc .SetRight (t ,c ,thickness );_abffc .SetTop (t ,c ,thickness );};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_fgafa ParagraphProperties )SetFirstLineIndent (m _ebf .Distance ){if _fgafa ._fbde .Ind ==nil {_fgafa ._fbde .Ind =_eb .NewCT_Ind ();};if m ==_ebf .Zero {_fgafa ._fbde .Ind .FirstLineAttr =nil ;}else {_fgafa ._fbde .Ind .FirstLineAttr =&_bg .ST_TwipsMeasure {};
_fgafa ._fbde .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_ebf .Twips ));};};

// InitializeDefault constructs the default styles.
func (_bcac Styles )InitializeDefault (){_bcac .initializeDocDefaults ();_bcac .initializeStyleDefaults ();};

// SetProperties sets the `RunProperties` to the `Run` element
func (_gccab Run )SetProperties (rp RunProperties ){if rp ._fdggb ==nil {_gccab ._edbgc .RPr =_eb .NewCT_RPr ();}else {_ccdfe :=&_eb .CT_RPr {};if rp ._fdggb .RStyle !=nil {_ccdfe .RStyle =&_eb .CT_String {ValAttr :rp ._fdggb .RStyle .ValAttr };};if rp ._fdggb .RFonts !=nil {_ccdfe .RFonts =&_eb .CT_Fonts {HintAttr :rp ._fdggb .RFonts .HintAttr ,AsciiAttr :rp ._fdggb .RFonts .AsciiAttr ,HAnsiAttr :rp ._fdggb .RFonts .HAnsiAttr ,EastAsiaAttr :rp ._fdggb .RFonts .EastAsiaAttr ,CsAttr :rp ._fdggb .RFonts .CsAttr ,AsciiThemeAttr :rp ._fdggb .RFonts .AsciiThemeAttr ,HAnsiThemeAttr :rp ._fdggb .RFonts .HAnsiThemeAttr ,EastAsiaThemeAttr :rp ._fdggb .RFonts .EastAsiaThemeAttr ,CsthemeAttr :rp ._fdggb .RFonts .CsthemeAttr };
};if rp ._fdggb .B !=nil {_ccdfe .B =&_eb .CT_OnOff {};if rp ._fdggb .B .ValAttr !=nil {_gcde :=*rp ._fdggb .B .ValAttr ;_ccdfe .B .ValAttr =&_gcde ;};};if rp ._fdggb .BCs !=nil {_ccdfe .BCs =&_eb .CT_OnOff {};if rp ._fdggb .BCs .ValAttr !=nil {_daebd :=*rp ._fdggb .BCs .ValAttr ;
_ccdfe .BCs .ValAttr =&_daebd ;};};if rp ._fdggb .I !=nil {_ccdfe .I =&_eb .CT_OnOff {};if rp ._fdggb .I .ValAttr !=nil {_ccfaa :=*rp ._fdggb .I .ValAttr ;_ccdfe .I .ValAttr =&_ccfaa ;};};if rp ._fdggb .ICs !=nil {_ccdfe .ICs =&_eb .CT_OnOff {};if rp ._fdggb .ICs .ValAttr !=nil {_bbgfe :=*rp ._fdggb .ICs .ValAttr ;
_ccdfe .ICs .ValAttr =&_bbgfe ;};};if rp ._fdggb .Caps !=nil {_ccdfe .Caps =&_eb .CT_OnOff {};if rp ._fdggb .Caps .ValAttr !=nil {_bgage :=*rp ._fdggb .Caps .ValAttr ;_ccdfe .Caps .ValAttr =&_bgage ;};};if rp ._fdggb .SmallCaps !=nil {_ccdfe .SmallCaps =&_eb .CT_OnOff {};
if rp ._fdggb .SmallCaps .ValAttr !=nil {_cegef :=*rp ._fdggb .SmallCaps .ValAttr ;_ccdfe .SmallCaps .ValAttr =&_cegef ;};};if rp ._fdggb .Strike !=nil {_ccdfe .Strike =&_eb .CT_OnOff {};if rp ._fdggb .Strike .ValAttr !=nil {_bcgc :=*rp ._fdggb .Strike .ValAttr ;
_ccdfe .Strike .ValAttr =&_bcgc ;};};if rp ._fdggb .Dstrike !=nil {_ccdfe .Dstrike =&_eb .CT_OnOff {};if rp ._fdggb .Dstrike .ValAttr !=nil {_dbcba :=*rp ._fdggb .Dstrike .ValAttr ;_ccdfe .Dstrike .ValAttr =&_dbcba ;};};if rp ._fdggb .Outline !=nil {_ccdfe .Outline =&_eb .CT_OnOff {};
if rp ._fdggb .Outline .ValAttr !=nil {_ccba :=*rp ._fdggb .Outline .ValAttr ;_ccdfe .Outline .ValAttr =&_ccba ;};};if rp ._fdggb .Shadow !=nil {_ccdfe .Shadow =&_eb .CT_OnOff {};if rp ._fdggb .Shadow .ValAttr !=nil {_gcddb :=*rp ._fdggb .Shadow .ValAttr ;
_ccdfe .Shadow .ValAttr =&_gcddb ;};};if rp ._fdggb .Emboss !=nil {_ccdfe .Emboss =&_eb .CT_OnOff {};if rp ._fdggb .Emboss .ValAttr !=nil {_egbace :=*rp ._fdggb .Emboss .ValAttr ;_ccdfe .Emboss .ValAttr =&_egbace ;};};if rp ._fdggb .Imprint !=nil {_ccdfe .Imprint =&_eb .CT_OnOff {};
if rp ._fdggb .Imprint .ValAttr !=nil {_dfcfa :=*rp ._fdggb .Imprint .ValAttr ;_ccdfe .Imprint .ValAttr =&_dfcfa ;};};if rp ._fdggb .NoProof !=nil {_ccdfe .NoProof =&_eb .CT_OnOff {};if rp ._fdggb .NoProof .ValAttr !=nil {_fadg :=*rp ._fdggb .NoProof .ValAttr ;
_ccdfe .NoProof .ValAttr =&_fadg ;};};if rp ._fdggb .SnapToGrid !=nil {_ccdfe .SnapToGrid =&_eb .CT_OnOff {};if rp ._fdggb .SnapToGrid .ValAttr !=nil {_ceaad :=*rp ._fdggb .SnapToGrid .ValAttr ;_ccdfe .SnapToGrid .ValAttr =&_ceaad ;};};if rp ._fdggb .Vanish !=nil {_ccdfe .Vanish =&_eb .CT_OnOff {};
if rp ._fdggb .Vanish .ValAttr !=nil {_fdff :=*rp ._fdggb .Vanish .ValAttr ;_ccdfe .Vanish .ValAttr =&_fdff ;};};if rp ._fdggb .WebHidden !=nil {_ccdfe .WebHidden =&_eb .CT_OnOff {};if rp ._fdggb .WebHidden .ValAttr !=nil {_bfdeg :=*rp ._fdggb .WebHidden .ValAttr ;
_ccdfe .WebHidden .ValAttr =&_bfdeg ;};};if rp ._fdggb .Color !=nil {_ccdfe .Color =&_eb .CT_Color {ValAttr :rp ._fdggb .Color .ValAttr ,ThemeColorAttr :rp ._fdggb .Color .ThemeColorAttr ,ThemeTintAttr :rp ._fdggb .Color .ThemeTintAttr ,ThemeShadeAttr :rp ._fdggb .Color .ThemeShadeAttr };
};if rp ._fdggb .Spacing !=nil {_ccdfe .Spacing =&_eb .CT_SignedTwipsMeasure {ValAttr :rp ._fdggb .Spacing .ValAttr };};if rp ._fdggb .W !=nil {_ccdfe .W =&_eb .CT_TextScale {ValAttr :rp ._fdggb .W .ValAttr };};if rp ._fdggb .Kern !=nil {_ccdfe .Kern =&_eb .CT_HpsMeasure {ValAttr :rp ._fdggb .Kern .ValAttr };
};if rp ._fdggb .Position !=nil {_ccdfe .Position =&_eb .CT_SignedHpsMeasure {ValAttr :rp ._fdggb .Position .ValAttr };};if rp ._fdggb .Sz !=nil {_ccdfe .Sz =&_eb .CT_HpsMeasure {ValAttr :rp ._fdggb .Sz .ValAttr };};if rp ._fdggb .SzCs !=nil {_ccdfe .SzCs =&_eb .CT_HpsMeasure {ValAttr :rp ._fdggb .SzCs .ValAttr };
};if rp ._fdggb .Highlight !=nil {_ccdfe .Highlight =&_eb .CT_Highlight {ValAttr :rp ._fdggb .Highlight .ValAttr };};if rp ._fdggb .U !=nil {_ccdfe .U =&_eb .CT_Underline {ValAttr :rp ._fdggb .U .ValAttr ,ColorAttr :rp ._fdggb .U .ColorAttr ,ThemeColorAttr :rp ._fdggb .U .ThemeColorAttr ,ThemeTintAttr :rp ._fdggb .U .ThemeTintAttr ,ThemeShadeAttr :rp ._fdggb .U .ThemeShadeAttr };
};if rp ._fdggb .Effect !=nil {_ccdfe .Effect =&_eb .CT_TextEffect {ValAttr :rp ._fdggb .Effect .ValAttr };};if rp ._fdggb .Bdr !=nil {_ccdfe .Bdr =&_eb .CT_Border {ValAttr :rp ._fdggb .Bdr .ValAttr ,ColorAttr :rp ._fdggb .Bdr .ColorAttr ,ThemeColorAttr :rp ._fdggb .Bdr .ThemeColorAttr ,ThemeTintAttr :rp ._fdggb .Bdr .ThemeTintAttr ,ThemeShadeAttr :rp ._fdggb .Bdr .ThemeShadeAttr ,SzAttr :rp ._fdggb .Bdr .SzAttr ,SpaceAttr :rp ._fdggb .Bdr .SpaceAttr ,ShadowAttr :rp ._fdggb .Bdr .ShadowAttr ,FrameAttr :rp ._fdggb .Bdr .FrameAttr };
};if rp ._fdggb .Shd !=nil {_ccdfe .Shd =&_eb .CT_Shd {ValAttr :rp ._fdggb .Shd .ValAttr ,ColorAttr :rp ._fdggb .Shd .ColorAttr ,ThemeColorAttr :rp ._fdggb .Shd .ThemeColorAttr ,ThemeTintAttr :rp ._fdggb .Shd .ThemeTintAttr ,ThemeShadeAttr :rp ._fdggb .Shd .ThemeShadeAttr ,FillAttr :rp ._fdggb .Shd .FillAttr ,ThemeFillAttr :rp ._fdggb .Shd .ThemeFillAttr ,ThemeFillTintAttr :rp ._fdggb .Shd .ThemeFillTintAttr ,ThemeFillShadeAttr :rp ._fdggb .Shd .ThemeFillShadeAttr };
};if rp ._fdggb .FitText !=nil {_ccdfe .FitText =&_eb .CT_FitText {ValAttr :rp ._fdggb .FitText .ValAttr ,IdAttr :rp ._fdggb .FitText .IdAttr };};if rp ._fdggb .VertAlign !=nil {_ccdfe .VertAlign =&_eb .CT_VerticalAlignRun {ValAttr :rp ._fdggb .VertAlign .ValAttr };
};if rp ._fdggb .Rtl !=nil {_ccdfe .Rtl =&_eb .CT_OnOff {ValAttr :rp ._fdggb .Rtl .ValAttr };};if rp ._fdggb .Cs !=nil {_ccdfe .Cs =&_eb .CT_OnOff {ValAttr :rp ._fdggb .Cs .ValAttr };};if rp ._fdggb .Em !=nil {_ccdfe .Em =&_eb .CT_Em {ValAttr :rp ._fdggb .Em .ValAttr };
};if rp ._fdggb .Lang !=nil {_ccdfe .Lang =&_eb .CT_Language {ValAttr :rp ._fdggb .Lang .ValAttr ,EastAsiaAttr :rp ._fdggb .Lang .EastAsiaAttr ,BidiAttr :rp ._fdggb .Lang .BidiAttr };};if rp ._fdggb .EastAsianLayout !=nil {_ccdfe .EastAsianLayout =&_eb .CT_EastAsianLayout {IdAttr :rp ._fdggb .EastAsianLayout .IdAttr ,CombineAttr :rp ._fdggb .EastAsianLayout .CombineAttr ,CombineBracketsAttr :rp ._fdggb .EastAsianLayout .CombineBracketsAttr ,VertAttr :rp ._fdggb .EastAsianLayout .VertAttr ,VertCompressAttr :rp ._fdggb .EastAsianLayout .VertCompressAttr };
};if rp ._fdggb .SpecVanish !=nil {_ccdfe .SpecVanish =&_eb .CT_OnOff {ValAttr :rp ._fdggb .SpecVanish .ValAttr };};if rp ._fdggb .OMath !=nil {_ccdfe .OMath =&_eb .CT_OnOff {ValAttr :rp ._fdggb .OMath .ValAttr };};_gccab ._edbgc .RPr =_ccdfe ;};};

// X returns the inner wrapped XML type.
func (_eacgc InlineDrawing )X ()*_eb .WdInline {return _eacgc ._gbbc };

// SetVerticalMerge controls the vertical merging of cells.
func (_cca CellProperties )SetVerticalMerge (mergeVal _eb .ST_Merge ){if mergeVal ==_eb .ST_MergeUnset {_cca ._ced .VMerge =nil ;}else {_cca ._ced .VMerge =_eb .NewCT_VMerge ();_cca ._ced .VMerge .ValAttr =mergeVal ;};};

// DrawingInfo is used for keep information about a drawing wrapping a textbox where the text is located.
type DrawingInfo struct{Drawing *_eb .CT_Drawing ;Width int64 ;Height int64 ;};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_afg CellBorders )SetInsideHorizontal (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_afg ._df .InsideH =_eb .NewCT_Border ();_bdba (_afg ._df .InsideH ,t ,c ,thickness );};

// SetColor sets the text color.
func (_dbdde RunProperties )SetColor (c _dd .Color ){_dbdde ._fdggb .Color =_eb .NewCT_Color ();_dbdde ._fdggb .Color .ValAttr .ST_HexColorRGB =c .AsRGBString ();};

// SetEffect sets a text effect on the run.
func (_cbga RunProperties )SetEffect (e _eb .ST_TextEffect ){if e ==_eb .ST_TextEffectUnset {_cbga ._fdggb .Effect =nil ;}else {_cbga ._fdggb .Effect =_eb .NewCT_TextEffect ();_cbga ._fdggb .Effect .ValAttr =e ;};};

// Underline returns the type of paragraph underline.
func (_aecb ParagraphProperties )Underline ()_eb .ST_Underline {if _fedec :=_aecb ._fbde .RPr .U ;_fedec !=nil {return _fedec .ValAttr ;};return 0;};

// SetTop sets the top border to a specified type, color and thickness.
func (_ddbg CellBorders )SetTop (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_ddbg ._df .Top =_eb .NewCT_Border ();_bdba (_ddbg ._df .Top ,t ,c ,thickness );};

// SetRight sets the right border to a specified type, color and thickness.
func (_bda CellBorders )SetRight (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_bda ._df .Right =_eb .NewCT_Border ();_bdba (_bda ._df .Right ,t ,c ,thickness );};

// EastAsiaFont returns the name of run font family for East Asia.
func (_ccdbd RunProperties )EastAsiaFont ()string {if _dcafc :=_ccdbd ._fdggb .RFonts ;_dcafc !=nil {if _dcafc .EastAsiaAttr !=nil {return *_dcafc .EastAsiaAttr ;};};return "";};func (_ffgde Footnote )content ()[]*_eb .EG_ContentBlockContent {var _dcde []*_eb .EG_ContentBlockContent ;
for _ ,_afdf :=range _ffgde ._bbff .EG_BlockLevelElts {_dcde =append (_dcde ,_afdf .EG_ContentBlockContent ...);};return _dcde ;};

// ReplaceText replace text inside node.
func (_acfc *Nodes )ReplaceText (oldText ,newText string ){for _ ,_dadd :=range _acfc ._afgbd {_dadd .ReplaceText (oldText ,newText );};};

// SetTblHeader set row properties for repeat table row on every new page value.
func (_gabbg RowProperties )SetTblHeader (val bool ){if !val {_gabbg ._ebcag .TblHeader =nil ;}else {_bgaa :=_eb .NewCT_OnOff ();_gabbg ._ebcag .TblHeader =[]*_eb .CT_OnOff {_bgaa };};};type mergeFieldInfo struct{_eeedg string ;_cfab string ;_ffdg string ;
_beed bool ;_fcgab bool ;_dffd bool ;_cgdee bool ;_gfef Paragraph ;_bfeg ,_eagb ,_bcbd int ;_bfce *_eb .EG_PContent ;_ecceg bool ;};

// ComplexSizeValue returns the value of run font size for complex fonts in points.
func (_dgga RunProperties )ComplexSizeValue ()float64 {if _gbge :=_dgga ._fdggb .SzCs ;_gbge !=nil {_bgfge :=_gbge .ValAttr ;if _bgfge .ST_UnsignedDecimalNumber !=nil {return float64 (*_bgfge .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// Value returns the tring value of a FormFieldTypeText or FormFieldTypeDropDown.
func (_ecgga FormField )Value ()string {if _ecgga ._bbdab .TextInput !=nil &&_ecgga ._gedcf .T !=nil {return _ecgga ._gedcf .T .Content ;}else if _ecgga ._bbdab .DdList !=nil &&_ecgga ._bbdab .DdList .Result !=nil {_ddbba :=_ecgga .PossibleValues ();_agefc :=int (_ecgga ._bbdab .DdList .Result .ValAttr );
if _agefc < len (_ddbba ){return _ddbba [_agefc ];};}else if _ecgga ._bbdab .CheckBox !=nil {if _ecgga .IsChecked (){return "\u0074\u0072\u0075\u0065";};return "\u0066\u0061\u006cs\u0065";};return "";};

// SetCantSplit set row properties for Can't Split value.
func (_gfcgc RowProperties )SetCantSplit (val bool ){if !val {_gfcgc ._ebcag .CantSplit =nil ;}else {_fgfa :=_eb .NewCT_OnOff ();_gfcgc ._ebcag .CantSplit =[]*_eb .CT_OnOff {_fgfa };};};

// X returns the inner wrapped XML type.
func (_gfcc Style )X ()*_eb .CT_Style {return _gfcc ._dadg };

// Section is the beginning of a new section.
type Section struct{_efdff *Document ;_adef *_eb .CT_SectPr ;};

// SetRightIndent controls right indent of paragraph.
func (_eagbd Paragraph )SetRightIndent (m _ebf .Distance ){_eagbd .ensurePPr ();_fbcdd :=_eagbd ._ggec .PPr ;if _fbcdd .Ind ==nil {_fbcdd .Ind =_eb .NewCT_Ind ();};if m ==_ebf .Zero {_fbcdd .Ind .RightAttr =nil ;}else {_fbcdd .Ind .RightAttr =&_eb .ST_SignedTwipsMeasure {};
_fbcdd .Ind .RightAttr .Int64 =_c .Int64 (int64 (m /_ebf .Twips ));};};

// SetEmboss sets the run to embossed text.
func (_bbfg RunProperties )SetEmboss (b bool ){if !b {_bbfg ._fdggb .Emboss =nil ;}else {_bbfg ._fdggb .Emboss =_eb .NewCT_OnOff ();};};

// SetPicture sets the watermark picture.
func (_gdfce *WatermarkPicture )SetPicture (imageRef _aee .ImageRef ){_gbdb :=imageRef .RelID ();_aefb :=_gdfce .getShape ();if _gdfce ._befe !=nil {_eacba :=_gdfce ._befe .EG_ShapeElements ;if len (_eacba )> 0&&_eacba [0].Imagedata !=nil {_eacba [0].Imagedata .IdAttr =&_gbdb ;
};}else {_fffb :=_gdfce .findNode (_aefb ,"\u0069m\u0061\u0067\u0065\u0064\u0061\u0074a");for _feab ,_geffc :=range _fffb .Attrs {if _geffc .Name .Local =="\u0069\u0064"{_fffb .Attrs [_feab ].Value =_gbdb ;};};};};

// SetLeft sets the cell left margin
func (_cac CellMargins )SetLeft (d _ebf .Distance ){_cac ._aag .Left =_eb .NewCT_TblWidth ();_afe (_cac ._aag .Left ,d );};func (_fbbd *WatermarkPicture )getInnerElement (_dbbf string )*_c .XSDAny {for _ ,_egaca :=range _fbbd ._debae .Any {_cbcf ,_defd :=_egaca .(*_c .XSDAny );
if _defd &&(_cbcf .XMLName .Local ==_dbbf ||_cbcf .XMLName .Local =="\u0076\u003a"+_dbbf ){return _cbcf ;};};return nil ;};

// AddBreak adds a line break to a run.
func (_bbfbg Run )AddBreak (){_dage :=_bbfbg .newIC ();_dage .Br =_eb .NewCT_Br ()};

// SetHangingIndent controls the indentation of the non-first lines in a paragraph.
func (_edacd ParagraphProperties )SetHangingIndent (m _ebf .Distance ){if _edacd ._fbde .Ind ==nil {_edacd ._fbde .Ind =_eb .NewCT_Ind ();};if m ==_ebf .Zero {_edacd ._fbde .Ind .HangingAttr =nil ;}else {_edacd ._fbde .Ind .HangingAttr =&_bg .ST_TwipsMeasure {};
_edacd ._fbde .Ind .HangingAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_ebf .Twips ));};};

// Node is document element node,
// contains Paragraph or Table element.
type Node struct{_cfgd *Document ;_beea interface{};Style Style ;AnchoredDrawings []AnchoredDrawing ;InlineDrawings []InlineDrawing ;Children []Node ;};func (_fbffd *WatermarkText )getShapeType ()*_c .XSDAny {return _fbffd .getInnerElement ("\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e");
};

// X returns the inner wrapped XML type.
func (_ceacc Table )X ()*_eb .CT_Tbl {return _ceacc ._ffceg };

// SetStyle sets the table style name.
func (_gecc TableProperties )SetStyle (name string ){if name ==""{_gecc ._ggcad .TblStyle =nil ;}else {_gecc ._ggcad .TblStyle =_eb .NewCT_String ();_gecc ._ggcad .TblStyle .ValAttr =name ;};};

// SetTextWrapTight sets the text wrap to tight with a give wrap type.
func (_efd AnchoredDrawing )SetTextWrapTight (option *AnchorDrawWrapOptions ){_efd ._ac .Choice =&_eb .WdEG_WrapTypeChoice {};_efd ._ac .Choice .WrapTight =_eb .NewWdCT_WrapTight ();_efd ._ac .Choice .WrapTight .WrapTextAttr =_eb .WdST_WrapTextBothSides ;
_bae :=false ;_efd ._ac .Choice .WrapTight .WrapPolygon .EditedAttr =&_bae ;if option ==nil {option =NewAnchorDrawWrapOptions ();};_efd ._ac .Choice .WrapTight .WrapPolygon .LineTo =option .GetWrapPathLineTo ();_efd ._ac .Choice .WrapTight .WrapPolygon .Start =option .GetWrapPathStart ();
_efd ._ac .LayoutInCellAttr =true ;_efd ._ac .AllowOverlapAttr =true ;};

// Endnotes returns the endnotes defined in the document.
func (_gag *Document )Endnotes ()[]Endnote {_dede :=[]Endnote {};for _ ,_begd :=range _gag ._edd .CT_Endnotes .Endnote {_dede =append (_dede ,Endnote {_gag ,_begd });};return _dede ;};

// InsertRowBefore inserts a row before another row
func (_edaaa Table )InsertRowBefore (r Row )Row {for _bgeed ,_cacabb :=range _edaaa ._ffceg .EG_ContentRowContent {if len (_cacabb .Tr )> 0&&r .X ()==_cacabb .Tr [0]{_ggff :=_eb .NewEG_ContentRowContent ();_edaaa ._ffceg .EG_ContentRowContent =append (_edaaa ._ffceg .EG_ContentRowContent ,nil );
copy (_edaaa ._ffceg .EG_ContentRowContent [_bgeed +1:],_edaaa ._ffceg .EG_ContentRowContent [_bgeed :]);_edaaa ._ffceg .EG_ContentRowContent [_bgeed ]=_ggff ;_eagdd :=_eb .NewCT_Row ();_ggff .Tr =append (_ggff .Tr ,_eagdd );return Row {_edaaa ._dfdb ,_eagdd };
};};return _edaaa .AddRow ();};

// SetTop sets the top border to a specified type, color and thickness.
func (_dbdbg ParagraphBorders )SetTop (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_dbdbg ._fafc .Top =_eb .NewCT_Border ();_afgff (_dbdbg ._fafc .Top ,t ,c ,thickness );};

// BodySection returns the default body section used for all preceding
// paragraphs until the previous Section. If there is no previous sections, the
// body section applies to the entire document.
func (_egc *Document )BodySection ()Section {if _egc ._cbd .Body .SectPr ==nil {_egc ._cbd .Body .SectPr =_eb .NewCT_SectPr ();};return Section {_egc ,_egc ._cbd .Body .SectPr };};

// SetColor sets a specific color or auto.
func (_gee Color )SetColor (v _dd .Color ){if v .IsAuto (){_gee ._acg .ValAttr .ST_HexColorAuto =_eb .ST_HexColorAutoAuto ;_gee ._acg .ValAttr .ST_HexColorRGB =nil ;}else {_gee ._acg .ValAttr .ST_HexColorAuto =_eb .ST_HexColorAutoUnset ;_gee ._acg .ValAttr .ST_HexColorRGB =v .AsRGBString ();
};};

// SetFooter sets a section footer.
func (_adae Section )SetFooter (f Footer ,t _eb .ST_HdrFtr ){_edfag :=_eb .NewEG_HdrFtrReferences ();_adae ._adef .EG_HdrFtrReferences =append (_adae ._adef .EG_HdrFtrReferences ,_edfag );_edfag .FooterReference =_eb .NewCT_HdrFtrRef ();_edfag .FooterReference .TypeAttr =t ;
_dfcgc :=_adae ._efdff ._ada .FindRIDForN (f .Index (),_c .FooterType );if _dfcgc ==""{_ec .Log .Debug ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0066\u006f\u006f\u0074\u0065r \u0049\u0044");
};_edfag .FooterReference .IdAttr =_dfcgc ;};func (_fab *Document )removeFootnote (_beg int64 ){_fgea :=_fab ._fbc ;var _afbb int ;for _fcdf ,_beee :=range _fgea .CT_Footnotes .Footnote {if _beee .IdAttr ==_beg {_afbb =_fcdf ;break ;};};_fgea .CT_Footnotes .Footnote [_afbb ]=nil ;
_fgea .CT_Footnotes .Footnote [_afbb ]=_fgea .CT_Footnotes .Footnote [len (_fgea .CT_Footnotes .Footnote )-1];_fgea .CT_Footnotes .Footnote =_fgea .CT_Footnotes .Footnote [:len (_fgea .CT_Footnotes .Footnote )-1];_fab .reorderFootnote ();_fab .syncFootnoteSettings ();
};

// SetAlignment controls the paragraph alignment
func (_gffb ParagraphStyleProperties )SetAlignment (align _eb .ST_Jc ){if align ==_eb .ST_JcUnset {_gffb ._gdbb .Jc =nil ;}else {_gffb ._gdbb .Jc =_eb .NewCT_Jc ();_gffb ._gdbb .Jc .ValAttr =align ;};};

// AddFieldWithFormatting adds a field (automatically computed text) to the
// document with field specifc formatting.
func (_ddgaga Run )AddFieldWithFormatting (code string ,fmt string ,isDirty bool ){_bdbb :=_ddgaga .newIC ();_bdbb .FldChar =_eb .NewCT_FldChar ();_bdbb .FldChar .FldCharTypeAttr =_eb .ST_FldCharTypeBegin ;if isDirty {_bdbb .FldChar .DirtyAttr =&_bg .ST_OnOff {};
_bdbb .FldChar .DirtyAttr .Bool =_c .Bool (true );};_bdbb =_ddgaga .newIC ();_bdbb .InstrText =_eb .NewCT_Text ();if fmt !=""{_bdbb .InstrText .Content =code +"\u0020"+fmt ;}else {_bdbb .InstrText .Content =code ;};_bdbb =_ddgaga .newIC ();_bdbb .FldChar =_eb .NewCT_FldChar ();
_bdbb .FldChar .FldCharTypeAttr =_eb .ST_FldCharTypeEnd ;};

// SetLeftPct sets the cell left margin
func (_ceb CellMargins )SetLeftPct (pct float64 ){_ceb ._aag .Left =_eb .NewCT_TblWidth ();_ddaa (_ceb ._aag .Left ,pct );};

// GetColor returns the color.Color object representing the run color.
func (_bbdfe RunProperties )GetColor ()_dd .Color {if _gbdgf :=_bbdfe ._fdggb .Color ;_gbdgf !=nil {_dggc :=_gbdgf .ValAttr ;if _dggc .ST_HexColorRGB !=nil {return _dd .FromHex (*_dggc .ST_HexColorRGB );};};return _dd .Color {};};

// Clear removes all of the content from within a run.
func (_baffg Run )Clear (){_baffg ._edbgc .EG_RunInnerContent =nil };

// SetSize sets the size of the displayed image on the page.
func (_cgb AnchoredDrawing )SetSize (w ,h _ebf .Distance ){_cgb ._ac .Extent .CxAttr =int64 (float64 (w *_ebf .Pixel72 )/_ebf .EMU );_cgb ._ac .Extent .CyAttr =int64 (float64 (h *_ebf .Pixel72 )/_ebf .EMU );};

// Borders returns the ParagraphBorders for setting-up border on paragraph.
func (_dbege Paragraph )Borders ()ParagraphBorders {_dbege .ensurePPr ();if _dbege ._ggec .PPr .PBdr ==nil {_dbege ._ggec .PPr .PBdr =_eb .NewCT_PBdr ();};return ParagraphBorders {_dbege ._ddfge ,_dbege ._ggec .PPr .PBdr };};

// TableBorders allows manipulation of borders on a table.
type TableBorders struct{_bdab *_eb .CT_TblBorders };func _fcd ()(*_bb .CT_Point2D ,[]*_bb .CT_Point2D ){var (_accc int64 =0;_fca int64 =21600;);_gb :=_bb .ST_Coordinate {ST_CoordinateUnqualified :&_accc ,ST_UniversalMeasure :nil };_cgc :=_bb .ST_Coordinate {ST_CoordinateUnqualified :&_fca ,ST_UniversalMeasure :nil };
_caef :=_bb .NewCT_Point2D ();_caef .XAttr =_gb ;_caef .YAttr =_gb ;_bca :=[]*_bb .CT_Point2D {&_bb .CT_Point2D {XAttr :_gb ,YAttr :_cgc },&_bb .CT_Point2D {XAttr :_cgc ,YAttr :_cgc },&_bb .CT_Point2D {XAttr :_cgc ,YAttr :_gb },_caef };return _caef ,_bca ;
};

// SizeValue returns the value of paragraph font size in points.
func (_degeb ParagraphProperties )SizeValue ()float64 {if _gggaa :=_degeb ._fbde .RPr .Sz ;_gggaa !=nil {_fegf :=_gggaa .ValAttr ;if _fegf .ST_UnsignedDecimalNumber !=nil {return float64 (*_fegf .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// Style is a style within the styles.xml file.
type Style struct{_dadg *_eb .CT_Style };

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_aafga ParagraphProperties )Style ()string {if _aafga ._fbde .PStyle !=nil {return _aafga ._fbde .PStyle .ValAttr ;};return "";};func _deaec (_bcaa *Document ,_bfafg []*_eb .CT_P ,_daag *TableInfo ,_bcgdf *DrawingInfo )[]Node {_eddc :=[]Node {};for _ ,_fcgbf :=range _bfafg {_dbda :=Paragraph {_bcaa ,_fcgbf };
_bbfb :=Node {_cfgd :_bcaa ,_beea :&_dbda };if _ecbeb ,_fdccc :=_bcaa .Styles .SearchStyleById (_dbda .Style ());_fdccc {_bbfb .Style =_ecbeb ;};for _ ,_ddggd :=range _dbda .Runs (){_bbfb .Children =append (_bbfb .Children ,Node {_cfgd :_bcaa ,_beea :_ddggd ,AnchoredDrawings :_ddggd .DrawingAnchored (),InlineDrawings :_ddggd .DrawingInline ()});
};_eddc =append (_eddc ,_bbfb );};return _eddc ;};

// ParagraphStyleProperties is the styling information for a paragraph.
type ParagraphStyleProperties struct{_gdbb *_eb .CT_PPrGeneral };

// SetName sets the name of the style.
func (_efecd Style )SetName (name string ){_efecd ._dadg .Name =_eb .NewCT_String ();_efecd ._dadg .Name .ValAttr =name ;};

// SetRight sets the right border to a specified type, color and thickness.
func (_ffec ParagraphBorders )SetRight (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_ffec ._fafc .Right =_eb .NewCT_Border ();_afgff (_ffec ._fafc .Right ,t ,c ,thickness );};

// IsBold returns true if the run has been set to bold.
func (_bcabd RunProperties )IsBold ()bool {return _bcabd .BoldValue ()==OnOffValueOn };

// Caps returns true if paragraph font is capitalized.
func (_ccga ParagraphProperties )Caps ()bool {return _bbea (_ccga ._fbde .RPr .Caps )};

// RunProperties returns the RunProperties controlling numbering level font, etc.
func (_gdfd NumberingLevel )RunProperties ()RunProperties {if _gdfd ._cgbe .RPr ==nil {_gdfd ._cgbe .RPr =_eb .NewCT_RPr ();};return RunProperties {_gdfd ._cgbe .RPr };};

// AddTabStop adds a tab stop to the paragraph.
func (_bbebd ParagraphStyleProperties )AddTabStop (position _ebf .Distance ,justificaton _eb .ST_TabJc ,leader _eb .ST_TabTlc ){if _bbebd ._gdbb .Tabs ==nil {_bbebd ._gdbb .Tabs =_eb .NewCT_Tabs ();};_gagc :=_eb .NewCT_TabStop ();_gagc .LeaderAttr =leader ;
_gagc .ValAttr =justificaton ;_gagc .PosAttr .Int64 =_c .Int64 (int64 (position /_ebf .Twips ));_bbebd ._gdbb .Tabs .Tab =append (_bbebd ._gdbb .Tabs .Tab ,_gagc );};

// FindNodeByText return node based on matched text and return a slice of node.
func (_ceeag *Nodes )FindNodeByText (text string )[]Node {_fbfef :=[]Node {};for _ ,_dfdg :=range _ceeag ._afgbd {if _ae .TrimSpace (_dfdg .Text ())==text {_fbfef =append (_fbfef ,_dfdg );};_abfc :=Nodes {_afgbd :_dfdg .Children };_fbfef =append (_fbfef ,_abfc .FindNodeByText (text )...);
};return _fbfef ;};

// RemoveParagraph removes a paragraph from a footer.
func (_fece Footer )RemoveParagraph (p Paragraph ){for _ ,_gbafe :=range _fece ._cece .EG_ContentBlockContent {for _dgge ,_dbgb :=range _gbafe .P {if _dbgb ==p ._ggec {copy (_gbafe .P [_dgge :],_gbafe .P [_dgge +1:]);_gbafe .P =_gbafe .P [0:len (_gbafe .P )-1];
return ;};};};};

// DrawingAnchored returns a slice of AnchoredDrawings.
func (_fafb Run )DrawingAnchored ()[]AnchoredDrawing {_abcf :=[]AnchoredDrawing {};for _ ,_cbbeb :=range _fafb ._edbgc .EG_RunInnerContent {if _cbbeb .Drawing ==nil {continue ;};for _ ,_fegg :=range _cbbeb .Drawing .Anchor {_abcf =append (_abcf ,AnchoredDrawing {_fafb ._ecdb ,_fegg });
};};return _abcf ;};

// Fonts returns the style's Fonts.
func (_ecfbd RunProperties )Fonts ()Fonts {if _ecfbd ._fdggb .RFonts ==nil {_ecfbd ._fdggb .RFonts =_eb .NewCT_Fonts ();};return Fonts {_ecfbd ._fdggb .RFonts };};func (_edbd *Document )insertTable (_eca Paragraph ,_agd bool )Table {_fbe :=_edbd ._cbd .Body ;
if _fbe ==nil {return _edbd .AddTable ();};_fee :=_eca .X ();for _cffg ,_ccab :=range _fbe .EG_BlockLevelElts {for _ ,_cecd :=range _ccab .EG_ContentBlockContent {for _agca ,_cce :=range _cecd .P {if _cce ==_fee {_eab :=_eb .NewCT_Tbl ();_caf :=_eb .NewEG_BlockLevelElts ();
_fdg :=_eb .NewEG_ContentBlockContent ();_caf .EG_ContentBlockContent =append (_caf .EG_ContentBlockContent ,_fdg );_fdg .Tbl =append (_fdg .Tbl ,_eab );_fbe .EG_BlockLevelElts =append (_fbe .EG_BlockLevelElts ,nil );if _agd {copy (_fbe .EG_BlockLevelElts [_cffg +1:],_fbe .EG_BlockLevelElts [_cffg :]);
_fbe .EG_BlockLevelElts [_cffg ]=_caf ;if _agca !=0{_dbc :=_eb .NewEG_BlockLevelElts ();_ddef :=_eb .NewEG_ContentBlockContent ();_dbc .EG_ContentBlockContent =append (_dbc .EG_ContentBlockContent ,_ddef );_ddef .P =_cecd .P [:_agca ];_fbe .EG_BlockLevelElts =append (_fbe .EG_BlockLevelElts ,nil );
copy (_fbe .EG_BlockLevelElts [_cffg +1:],_fbe .EG_BlockLevelElts [_cffg :]);_fbe .EG_BlockLevelElts [_cffg ]=_dbc ;};_cecd .P =_cecd .P [_agca :];}else {copy (_fbe .EG_BlockLevelElts [_cffg +2:],_fbe .EG_BlockLevelElts [_cffg +1:]);_fbe .EG_BlockLevelElts [_cffg +1]=_caf ;
if _agca !=len (_cecd .P )-1{_ebe :=_eb .NewEG_BlockLevelElts ();_ccfd :=_eb .NewEG_ContentBlockContent ();_ebe .EG_ContentBlockContent =append (_ebe .EG_ContentBlockContent ,_ccfd );_ccfd .P =_cecd .P [_agca +1:];_fbe .EG_BlockLevelElts =append (_fbe .EG_BlockLevelElts ,nil );
copy (_fbe .EG_BlockLevelElts [_cffg +3:],_fbe .EG_BlockLevelElts [_cffg +2:]);_fbe .EG_BlockLevelElts [_cffg +2]=_ebe ;};_cecd .P =_cecd .P [:_agca +1];};return Table {_edbd ,_eab };};};for _ ,_fbf :=range _cecd .Tbl {_fdb :=_ggc (_fbf ,_fee ,_agd );if _fdb !=nil {return Table {_edbd ,_fdb };
};};};};return _edbd .AddTable ();};

// SetCharacterSpacing sets the run's Character Spacing Adjustment.
func (_cgbgd RunProperties )SetCharacterSpacing (size _ebf .Distance ){_cgbgd ._fdggb .Spacing =_eb .NewCT_SignedTwipsMeasure ();_cgbgd ._fdggb .Spacing .ValAttr .Int64 =_c .Int64 (int64 (size /_ebf .Twips ));};

// SetPageBreakBefore controls if there is a page break before this paragraph.
func (_ecdfb ParagraphProperties )SetPageBreakBefore (b bool ){if !b {_ecdfb ._fbde .PageBreakBefore =nil ;}else {_ecdfb ._fbde .PageBreakBefore =_eb .NewCT_OnOff ();};};

// GetFooter gets a section Footer for given type
func (_bdaed Section )GetFooter (t _eb .ST_HdrFtr )(Footer ,bool ){for _ ,_bcbf :=range _bdaed ._adef .EG_HdrFtrReferences {if _bcbf .FooterReference .TypeAttr ==t {for _ ,_fdfa :=range _bdaed ._efdff .Footers (){_acff :=_bdaed ._efdff ._ada .FindRIDForN (_fdfa .Index (),_c .FooterType );
if _acff ==_bcbf .FooterReference .IdAttr {return _fdfa ,true ;};};};};return Footer {},false ;};

// SetHighlight highlights text in a specified color.
func (_gaffa RunProperties )SetHighlight (c _eb .ST_HighlightColor ){_gaffa ._fdggb .Highlight =_eb .NewCT_Highlight ();_gaffa ._fdggb .Highlight .ValAttr =c ;};func (_cda *Document )removeEndnote (_facc int64 ){_cgdb :=_cda ._edd ;var _acga int ;for _ggca ,_egcc :=range _cgdb .CT_Endnotes .Endnote {if _egcc .IdAttr ==_facc {_acga =_ggca ;
break ;};};_cgdb .CT_Endnotes .Endnote [_acga ]=nil ;_cgdb .CT_Endnotes .Endnote [_acga ]=_cgdb .CT_Endnotes .Endnote [len (_cgdb .CT_Endnotes .Endnote )-1];_cgdb .CT_Endnotes .Endnote =_cgdb .CT_Endnotes .Endnote [:len (_cgdb .CT_Endnotes .Endnote )-1];
_cda .reorderEndnote ();_cda .syncEndnoteSettings ();};func _cecad ()*_cg .Textpath {_cfggc :=_cg .NewTextpath ();_afgca :="\u0066\u006f\u006e\u0074\u002d\u0066\u0061\u006d\u0069l\u0079\u003a\u0022\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0022\u003b\u0066\u006f\u006e\u0074\u002d\u0073\u0069\u007a\u0065\u003a\u00366\u0070\u0074;\u0066\u006fn\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074\u003a\u0062\u006f\u006c\u0064;f\u006f\u006e\u0074\u002d\u0073\u0074\u0079\u006c\u0065:\u0069\u0074\u0061\u006c\u0069\u0063";
_cfggc .StyleAttr =&_afgca ;_eagbe :="\u0041\u0053\u0041\u0050";_cfggc .StringAttr =&_eagbe ;return _cfggc ;};

// NumId return numbering numId that being use by style properties.
func (_eebff ParagraphStyleProperties )NumId ()int64 {if _eebff ._gdbb .NumPr !=nil {if _eebff ._gdbb .NumPr .NumId !=nil {return _eebff ._gdbb .NumPr .NumId .ValAttr ;};};return -1;};

// Imprint returns true if run imprint is on.
func (_gaac RunProperties )Imprint ()bool {return _bbea (_gaac ._fdggb .Imprint )};

// GetKerning returns the kerning (character spacing) of a run
func (_fccfc RunProperties )GetKerning ()_ebf .Distance {if _fccfc ._fdggb .Kern !=nil {return _ebf .Distance (float64 (*_fccfc ._fdggb .Kern .ValAttr .ST_UnsignedDecimalNumber )*_ebf .HalfPoint );};return 0;};

// Themes returns document's themes.
func (_faff *Document )Themes ()[]*_bb .Theme {return _faff ._ccfe };

// SetNextStyle sets the style that the next paragraph will use.
func (_fbdc Style )SetNextStyle (name string ){if name ==""{_fbdc ._dadg .Next =nil ;}else {_fbdc ._dadg .Next =_eb .NewCT_String ();_fbdc ._dadg .Next .ValAttr =name ;};};

// AddEndnoteReference adds a footnote reference to a run.
func (_aeff Run )AddEndnoteReference (){_bacf :=_aeff .newIC ();_bacf .EndnoteRef =&_eb .CT_Empty {}};

// RunProperties controls run styling properties.
type RunProperties struct{_fdggb *_eb .CT_RPr };func (_dfbb *Document )validateBookmarks ()error {_egd :=make (map[string ]struct{});for _ ,_dbce :=range _dfbb .Bookmarks (){if _ ,_gcae :=_egd [_dbce .Name ()];_gcae {return _ede .Errorf ("d\u0075\u0070\u006c\u0069\u0063\u0061t\u0065\u0020\u0062\u006f\u006f\u006b\u006d\u0061\u0072k\u0020\u0025\u0073 \u0066o\u0075\u006e\u0064",_dbce .Name ());
};_egd [_dbce .Name ()]=struct{}{};};return nil ;};

// SetDefaultValue sets the default value of a FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_ebfgd FormField )SetDefaultValue (v string ){if _ebfgd ._bbdab .DdList !=nil {for _aafg ,_deeg :=range _ebfgd .PossibleValues (){if _deeg ==v {_ebfgd ._bbdab .DdList .Default =_eb .NewCT_DecimalNumber ();_ebfgd ._bbdab .DdList .Default .ValAttr =int64 (_aafg );
break ;};};};};

// SetRight sets the right border to a specified type, color and thickness.
func (_gaeba TableBorders )SetRight (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_gaeba ._bdab .Right =_eb .NewCT_Border ();_bdba (_gaeba ._bdab .Right ,t ,c ,thickness );};

// SetNumberingDefinitionByID sets the numbering definition ID directly, which must
// match an ID defined in numbering.xml
func (_fagb Paragraph )SetNumberingDefinitionByID (abstractNumberID int64 ){_fagb .ensurePPr ();if _fagb ._ggec .PPr .NumPr ==nil {_fagb ._ggec .PPr .NumPr =_eb .NewCT_NumPr ();};_gdgc :=_eb .NewCT_DecimalNumber ();_gdgc .ValAttr =int64 (abstractNumberID );
_fagb ._ggec .PPr .NumPr .NumId =_gdgc ;};

// SetItalic sets the run to italic.
func (_fffec RunProperties )SetItalic (b bool ){if !b {_fffec ._fdggb .I =nil ;_fffec ._fdggb .ICs =nil ;}else {_fffec ._fdggb .I =_eb .NewCT_OnOff ();_fffec ._fdggb .ICs =_eb .NewCT_OnOff ();};};

// Control returns an *axcontrol.Control object contained in the run or the nil value in case of no controls.
func (_acbfa Run )Control ()*_daf .Control {if _baeda :=_acbfa ._edbgc .EG_RunInnerContent ;_baeda !=nil {if _dbgbg :=_baeda [0].Object ;_dbgbg !=nil {if _adged :=_dbgbg .Choice ;_adged !=nil {if _gbgf :=_adged .Control ;_gbgf !=nil {if _gbgf .IdAttr !=nil {_dbcga :=_acbfa ._ecdb .GetDocRelTargetByID (*_gbgf .IdAttr );
for _ ,_cefe :=range _acbfa ._ecdb ._cag {if _dbcga ==_cefe .TargetAttr {return _cefe ;};};};};};};};return nil ;};

// X returns the inner wrapped XML type.
func (_gbaa *Document )X ()*_eb .Document {return _gbaa ._cbd };

// RemoveRun removes a child run from a paragraph.
func (_aedag Paragraph )RemoveRun (r Run ){for _ ,_cbffe :=range _aedag ._ggec .EG_PContent {for _ebagg ,_gcfg :=range _cbffe .EG_ContentRunContent {if _gcfg .R ==r ._edbgc {copy (_cbffe .EG_ContentRunContent [_ebagg :],_cbffe .EG_ContentRunContent [_ebagg +1:]);
_cbffe .EG_ContentRunContent =_cbffe .EG_ContentRunContent [0:len (_cbffe .EG_ContentRunContent )-1];};if _gcfg .Sdt !=nil &&_gcfg .Sdt .SdtContent !=nil {for _ggfd ,_ffdce :=range _gcfg .Sdt .SdtContent .EG_ContentRunContent {if _ffdce .R ==r ._edbgc {copy (_gcfg .Sdt .SdtContent .EG_ContentRunContent [_ggfd :],_gcfg .Sdt .SdtContent .EG_ContentRunContent [_ggfd +1:]);
_gcfg .Sdt .SdtContent .EG_ContentRunContent =_gcfg .Sdt .SdtContent .EG_ContentRunContent [0:len (_gcfg .Sdt .SdtContent .EG_ContentRunContent )-1];};};};};};};

// RemoveParagraph removes a paragraph from the footnote.
func (_cccd Footnote )RemoveParagraph (p Paragraph ){for _ ,_gbac :=range _cccd .content (){for _fadf ,_aedf :=range _gbac .P {if _aedf ==p ._ggec {copy (_gbac .P [_fadf :],_gbac .P [_fadf +1:]);_gbac .P =_gbac .P [0:len (_gbac .P )-1];return ;};};};};
func (_caaa *Document )onNewRelationship (_aeag *_f .DecodeMap ,_ddabf ,_ggeg string ,_efed []*_g .File ,_gdbd *_gc .Relationship ,_bfaf _f .Target )error {_bdbg :=_c .DocTypeDocument ;switch _ggeg {case _c .OfficeDocumentType ,_c .OfficeDocumentTypeStrict :_caaa ._cbd =_eb .NewDocument ();
_aeag .AddTarget (_ddabf ,_caaa ._cbd ,_ggeg ,0);_aeag .AddTarget (_f .RelationsPathFor (_ddabf ),_caaa ._ada .X (),_ggeg ,0);_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,0);case _c .CorePropertiesType :_aeag .AddTarget (_ddabf ,_caaa .CoreProperties .X (),_ggeg ,0);
_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,0);case _c .CorePropertiesAltType :_aeag .AddTarget (_ddabf ,_caaa .CoreProperties .X (),_c .CorePropertiesType ,0);_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_c .CorePropertiesType ,0);
case _c .CustomPropertiesType :_aeag .AddTarget (_ddabf ,_caaa .CustomProperties .X (),_ggeg ,0);_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,0);case _c .ExtendedPropertiesType ,_c .ExtendedPropertiesTypeStrict :_aeag .AddTarget (_ddabf ,_caaa .AppProperties .X (),_ggeg ,0);
_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,0);case _c .ThumbnailType ,_c .ThumbnailTypeStrict :for _bbcc ,_cfbf :=range _efed {if _cfbf ==nil {continue ;};if _cfbf .Name ==_ddabf {_bdf ,_afea :=_cfbf .Open ();if _afea !=nil {return _ede .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_afea );
};_caaa .Thumbnail ,_ ,_afea =_dc .Decode (_bdf );_bdf .Close ();if _afea !=nil {return _ede .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_afea );
};_efed [_bbcc ]=nil ;};};case _c .SettingsType ,_c .SettingsTypeStrict :_aeag .AddTarget (_ddabf ,_caaa .Settings .X (),_ggeg ,0);_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,0);case _c .NumberingType ,_c .NumberingTypeStrict :_caaa .Numbering =NewNumbering ();
_aeag .AddTarget (_ddabf ,_caaa .Numbering .X (),_ggeg ,0);_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,0);case _c .StylesType ,_c .StylesTypeStrict :_caaa .Styles .Clear ();_aeag .AddTarget (_ddabf ,_caaa .Styles .X (),_ggeg ,0);
_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,0);case _c .HeaderType ,_c .HeaderTypeStrict :_ceba :=_eb .NewHdr ();_aeag .AddTarget (_ddabf ,_ceba ,_ggeg ,uint32 (len (_caaa ._abg )));_caaa ._abg =append (_caaa ._abg ,_ceba );_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,len (_caaa ._abg ));
_aadb :=_aee .NewRelationships ();_aeag .AddTarget (_f .RelationsPathFor (_ddabf ),_aadb .X (),_ggeg ,0);_caaa ._cgcc =append (_caaa ._cgcc ,_aadb );case _c .FooterType ,_c .FooterTypeStrict :_edee :=_eb .NewFtr ();_aeag .AddTarget (_ddabf ,_edee ,_ggeg ,uint32 (len (_caaa ._fcga )));
_caaa ._fcga =append (_caaa ._fcga ,_edee );_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,len (_caaa ._fcga ));_ddfe :=_aee .NewRelationships ();_aeag .AddTarget (_f .RelationsPathFor (_ddabf ),_ddfe .X (),_ggeg ,0);_caaa ._dde =append (_caaa ._dde ,_ddfe );
case _c .ThemeType ,_c .ThemeTypeStrict :_dacg :=_bb .NewTheme ();_aeag .AddTarget (_ddabf ,_dacg ,_ggeg ,uint32 (len (_caaa ._ccfe )));_caaa ._ccfe =append (_caaa ._ccfe ,_dacg );_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,len (_caaa ._ccfe ));
case _c .WebSettingsType ,_c .WebSettingsTypeStrict :_caaa ._ccc =_eb .NewWebSettings ();_aeag .AddTarget (_ddabf ,_caaa ._ccc ,_ggeg ,0);_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,0);case _c .FontTableType ,_c .FontTableTypeStrict :_caaa ._cbf =_eb .NewFonts ();
_aeag .AddTarget (_ddabf ,_caaa ._cbf ,_ggeg ,0);_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,0);_gcff :=_aee .NewRelationships ();_aeag .AddTarget (_f .RelationsPathFor (_ddabf ),_gcff .X (),_ggeg ,0);_caaa ._dga =_gcff ;case _c .EndNotesType ,_c .EndNotesTypeStrict :_caaa ._edd =_eb .NewEndnotes ();
_aeag .AddTarget (_ddabf ,_caaa ._edd ,_ggeg ,0);_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,0);case _c .FootNotesType ,_c .FootNotesTypeStrict :_caaa ._fbc =_eb .NewFootnotes ();_aeag .AddTarget (_ddabf ,_caaa ._fbc ,_ggeg ,0);_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,0);
case _c .ImageType ,_c .ImageTypeStrict :var _gddb _aee .ImageRef ;for _gafdd ,_ffdd :=range _efed {if _ffdd ==nil {continue ;};_ebgb :=_ae .TrimPrefix (_ffdd .Name ,"\u0077\u006f\u0072d\u002f");if _caca :=_ae .TrimPrefix (_ddabf ,"\u0077\u006f\u0072d\u002f");
_ebgb ==_caca {_ebaag ,_aceg :=_f .ExtractToDiskTmp (_ffdd ,_caaa .TmpPath );if _aceg !=nil {return _aceg ;};_fbdf :=_ef .Ext (_ffdd .Name );_dafcc :=_aee .Image {};if _fbdf [1:]!="\u0065\u006d\u0066"{_dfab ,_bbaa :=_aee .ImageFromStorage (_ebaag );if _bbaa !=nil {return _bbaa ;
};_dafcc =_dfab ;}else {_dafcc .Path =_ebaag ;_dafcc .Format =_fbdf [1:];};_gddb =_aee .MakeImageRef (_dafcc ,&_caaa .DocBase ,_caaa ._ada );_efed [_gafdd ]=nil ;};};if _gddb .Format ()!=""{_fbad :="\u002e"+_ae .ToLower (_gddb .Format ());_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,len (_caaa .Images )+1);
if _eagd :=_ef .Ext (_gdbd .TargetAttr );_eagd !=_fbad {_gdbd .TargetAttr =_gdbd .TargetAttr [0:len (_gdbd .TargetAttr )-len (_eagd )]+_fbad ;};_gddb .SetTarget ("\u0077\u006f\u0072d\u002f"+_gdbd .TargetAttr );_caaa .Images =append (_caaa .Images ,_gddb );
};case _c .ControlType ,_c .ControlTypeStrict :_gfec :=_ba .NewOcx ();_fff :=_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,len (_caaa ._cag )+1);_fcccg :="\u0077\u006f\u0072d\u002f"+_fff [:len (_fff )-4]+"\u002e\u0062\u0069\u006e";for _ceff ,_ggae :=range _efed {if _ggae ==nil {continue ;
};if _ggae .Name ==_fcccg {_cacb ,_cbbb :=_f .ExtractToDiskTmp (_ggae ,_caaa .TmpPath );if _cbbb !=nil {return _cbbb ;};_gdcg ,_cbbb :=_daf .ImportFromFile (_cacb );if _cbbb ==nil {_gdcg .TargetAttr =_fff ;_gdcg .Ocx =_gfec ;_caaa ._cag =append (_caaa ._cag ,_gdcg );
_aeag .AddTarget (_ddabf ,_gfec ,_ggeg ,uint32 (len (_caaa ._cag )));_gdbd .TargetAttr =_fff ;_efed [_ceff ]=nil ;}else {_ec .Log .Debug ("c\u0061\u006e\u006e\u006f\u0074\u0020r\u0065\u0061\u0064\u0020\u0062\u0069\u006e\u0020\u0066i\u006c\u0065\u003a \u0025s\u0020\u0025\u0073",_fcccg ,_cbbb .Error ());
};break ;};};case _c .ChartType :_adfd :=chart {_aeed :_fd .NewChartSpace ()};_adbc :=uint32 (len (_caaa ._dac ));_aeag .AddTarget (_ddabf ,_adfd ._aeed ,_ggeg ,_adbc );_caaa ._dac =append (_caaa ._dac ,&_adfd );_gdbd .TargetAttr =_c .RelativeFilename (_bdbg ,_bfaf .Typ ,_ggeg ,len (_caaa ._dac ));
_adfd ._eac =_gdbd .TargetAttr ;default:_ec .Log .Debug ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_ggeg ,_ddabf );
};return nil ;};

// SetBasedOn sets the style that this style is based on.
func (_fegc Style )SetBasedOn (name string ){if name ==""{_fegc ._dadg .BasedOn =nil ;}else {_fegc ._dadg .BasedOn =_eb .NewCT_String ();_fegc ._dadg .BasedOn .ValAttr =name ;};};func (_eeaf Paragraph )addSeparateFldChar ()*_eb .CT_FldChar {_feeb :=_eeaf .addFldChar ();
_feeb .FldCharTypeAttr =_eb .ST_FldCharTypeSeparate ;return _feeb ;};

// SetTextWrapBehindText sets the text wrap to behind text.
func (_fb AnchoredDrawing )SetTextWrapBehindText (){_fb ._ac .Choice =&_eb .WdEG_WrapTypeChoice {};_fb ._ac .Choice .WrapNone =_eb .NewWdCT_WrapNone ();_fb ._ac .BehindDocAttr =true ;_fb ._ac .LayoutInCellAttr =true ;_fb ._ac .AllowOverlapAttr =true ;};


// X returns the inner wrapped XML type.
func (_ececg TableProperties )X ()*_eb .CT_TblPr {return _ececg ._ggcad };

// Open opens and reads a document from a file (.docx).
func Open (filename string )(*Document ,error ){_gbdg ,_geaa :=_eg .Open (filename );if _geaa !=nil {return nil ,_ede .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_geaa );};defer _gbdg .Close ();
_dcdd ,_geaa :=_eg .Stat (filename );if _geaa !=nil {return nil ,_ede .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_geaa );};_ =_dcdd ;return Read (_gbdg ,_dcdd .Size ());};

// AddParagraph adds a paragraph to the header.
func (_fbcg Header )AddParagraph ()Paragraph {_gaga :=_eb .NewEG_ContentBlockContent ();_fbcg ._ccaed .EG_ContentBlockContent =append (_fbcg ._ccaed .EG_ContentBlockContent ,_gaga );_edda :=_eb .NewCT_P ();_gaga .P =append (_gaga .P ,_edda );return Paragraph {_fbcg ._dcdf ,_edda };
};

// SetAfterSpacing sets spacing below paragraph.
func (_fagg Paragraph )SetAfterSpacing (d _ebf .Distance ){_fagg .ensurePPr ();if _fagg ._ggec .PPr .Spacing ==nil {_fagg ._ggec .PPr .Spacing =_eb .NewCT_Spacing ();};_dabef :=_fagg ._ggec .PPr .Spacing ;_dabef .AfterAttr =&_bg .ST_TwipsMeasure {};_dabef .AfterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (d /_ebf .Twips ));
};

// SetAllowOverlapAttr sets the allowOverlap attribute of anchor.
func (_gff AnchoredDrawing )SetAllowOverlapAttr (val bool ){_gff ._ac .AllowOverlapAttr =val };

// SetTextWrapSquare sets the text wrap to square with a given wrap type.
func (_dda AnchoredDrawing )SetTextWrapSquare (t _eb .WdST_WrapText ){_dda ._ac .Choice =&_eb .WdEG_WrapTypeChoice {};_dda ._ac .Choice .WrapSquare =_eb .NewWdCT_WrapSquare ();_dda ._ac .Choice .WrapSquare .WrapTextAttr =t ;};

// HasFootnotes returns a bool based on the presence or abscence of footnotes within
// the document.
func (_gac *Document )HasFootnotes ()bool {return _gac ._fbc !=nil };

// Settings controls the document settings.
type Settings struct{_afcae *_eb .Settings };

// SetValue sets the width value.
func (_cgea TableWidth )SetValue (m _ebf .Distance ){_cgea ._fgee .WAttr =&_eb .ST_MeasurementOrPercent {};_cgea ._fgee .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_cgea ._fgee .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (m /_ebf .Twips ));
_cgea ._fgee .TypeAttr =_eb .ST_TblWidthDxa ;};

// SetKeepNext controls if the paragraph is kept with the next paragraph.
func (_afgc ParagraphStyleProperties )SetKeepNext (b bool ){if !b {_afgc ._gdbb .KeepNext =nil ;}else {_afgc ._gdbb .KeepNext =_eb .NewCT_OnOff ();};};

// SetFirstLineIndent controls the first line indent of the paragraph.
func (_cgeg ParagraphStyleProperties )SetFirstLineIndent (m _ebf .Distance ){if _cgeg ._gdbb .Ind ==nil {_cgeg ._gdbb .Ind =_eb .NewCT_Ind ();};if m ==_ebf .Zero {_cgeg ._gdbb .Ind .FirstLineAttr =nil ;}else {_cgeg ._gdbb .Ind .FirstLineAttr =&_bg .ST_TwipsMeasure {};
_cgeg ._gdbb .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_ebf .Twips ));};};func _ggbba ()*_cg .Handles {_baea :=_cg .NewHandles ();_badfd :=_cg .NewCT_H ();_gfccf :="\u0023\u0030\u002c\u0062\u006f\u0074\u0074\u006f\u006dR\u0069\u0067\u0068\u0074";
_badfd .PositionAttr =&_gfccf ;_agdfg :="\u0036\u0036\u0032\u0039\u002c\u0031\u0034\u0039\u0037\u0031";_badfd .XrangeAttr =&_agdfg ;_baea .H =[]*_cg .CT_H {_badfd };return _baea ;};

// MergeFields returns the list of all mail merge fields found in the document.
func (_dagfg Document )MergeFields ()[]string {_cggc :=map[string ]struct{}{};for _ ,_ebgf :=range _dagfg .mergeFields (){_cggc [_ebgf ._eeedg ]=struct{}{};};_ggbe :=[]string {};for _bffc :=range _cggc {_ggbe =append (_ggbe ,_bffc );};return _ggbe ;};

// SetRight sets the cell right margin
func (_cfb CellMargins )SetRight (d _ebf .Distance ){_cfb ._aag .Right =_eb .NewCT_TblWidth ();_afe (_cfb ._aag .Right ,d );};

// TableProperties returns the table style properties.
func (_accaf Style )TableProperties ()TableStyleProperties {if _accaf ._dadg .TblPr ==nil {_accaf ._dadg .TblPr =_eb .NewCT_TblPrBase ();};return TableStyleProperties {_accaf ._dadg .TblPr };};func (_cbg *Document )save (_bbg _ab .Writer ,_gdgb string )error {const _faf ="\u0064o\u0063u\u006d\u0065\u006e\u0074\u003a\u0064\u002e\u0053\u0061\u0076\u0065";
if _bcg :=_cbg ._cbd .Validate ();_bcg !=nil {_ec .Log .Warning ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_bcg );
};_afgb :=_c .DocTypeDocument ;if !_efc .GetLicenseKey ().IsLicensed ()&&!_acdb {_ede .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");
_ede .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");
return _da .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_cbg ._fgd )==0{if len (_gdgb )> 0{_cbg ._fgd =_gdgb ;}else {_fgdf ,_abc :=_efc .GenRefId ("\u0064\u0077");
if _abc !=nil {_ec .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_abc );return _abc ;};_cbg ._fgd =_fgdf ;};};if _gfb :=_efc .Track (_cbg ._fgd ,_faf );_gfb !=nil {_ec .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_gfb );return _gfb ;
};_cggb :=_g .NewWriter (_bbg );defer _cggb .Close ();if _gbag :=_f .MarshalXML (_cggb ,_c .BaseRelsFilename ,_cbg .Rels .X ());_gbag !=nil {return _gbag ;};if _gbagc :=_f .MarshalXMLByType (_cggb ,_afgb ,_c .ExtendedPropertiesType ,_cbg .AppProperties .X ());
_gbagc !=nil {return _gbagc ;};if _ga :=_f .MarshalXMLByType (_cggb ,_afgb ,_c .CorePropertiesType ,_cbg .CoreProperties .X ());_ga !=nil {return _ga ;};if _cbg .CustomProperties .X ()!=nil {if _efdb :=_f .MarshalXMLByType (_cggb ,_afgb ,_c .CustomPropertiesType ,_cbg .CustomProperties .X ());
_efdb !=nil {return _efdb ;};};if _cbg .Thumbnail !=nil {_bgfb ,_egb :=_cggb .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _egb !=nil {return _egb ;};if _gde :=_b .Encode (_bgfb ,_cbg .Thumbnail ,nil );
_gde !=nil {return _gde ;};};if _fbb :=_f .MarshalXMLByType (_cggb ,_afgb ,_c .SettingsType ,_cbg .Settings .X ());_fbb !=nil {return _fbb ;};_bdg :=_c .AbsoluteFilename (_afgb ,_c .OfficeDocumentType ,0);if _fbbe :=_f .MarshalXML (_cggb ,_bdg ,_cbg ._cbd );
_fbbe !=nil {return _fbbe ;};if _cbe :=_f .MarshalXML (_cggb ,_f .RelationsPathFor (_bdg ),_cbg ._ada .X ());_cbe !=nil {return _cbe ;};if _cbg .Numbering .X ()!=nil {if _adc :=_f .MarshalXMLByType (_cggb ,_afgb ,_c .NumberingType ,_cbg .Numbering .X ());
_adc !=nil {return _adc ;};};if _bgfe :=_f .MarshalXMLByType (_cggb ,_afgb ,_c .StylesType ,_cbg .Styles .X ());_bgfe !=nil {return _bgfe ;};if _cbg ._ccc !=nil {if _cef :=_f .MarshalXMLByType (_cggb ,_afgb ,_c .WebSettingsType ,_cbg ._ccc );_cef !=nil {return _cef ;
};};if _cbg ._cbf !=nil {if _caa :=_f .MarshalXMLByType (_cggb ,_afgb ,_c .FontTableType ,_cbg ._cbf );_caa !=nil {return _caa ;};};if _cbg ._edd !=nil {if _adf :=_f .MarshalXMLByType (_cggb ,_afgb ,_c .EndNotesType ,_cbg ._edd );_adf !=nil {return _adf ;
};};if _cbg ._fbc !=nil {if _ggf :=_f .MarshalXMLByType (_cggb ,_afgb ,_c .FootNotesType ,_cbg ._fbc );_ggf !=nil {return _ggf ;};};for _efcb ,_eeb :=range _cbg ._ccfe {if _aga :=_f .MarshalXMLByTypeIndex (_cggb ,_afgb ,_c .ThemeType ,_efcb +1,_eeb );_aga !=nil {return _aga ;
};};for _bcgf ,_afa :=range _cbg ._cag {_aebe ,_cad :=_afa .ExportToByteArray ();if _cad !=nil {return _cad ;};_gcdg :="\u0077\u006f\u0072d\u002f"+_afa .TargetAttr [:len (_afa .TargetAttr )-4]+"\u002e\u0062\u0069\u006e";if _adcg :=_f .AddFileFromBytes (_cggb ,_gcdg ,_aebe );
_adcg !=nil {return _adcg ;};if _dded :=_f .MarshalXMLByTypeIndex (_cggb ,_afgb ,_c .ControlType ,_bcgf +1,_afa .Ocx );_dded !=nil {return _dded ;};};for _afgf ,_cgf :=range _cbg ._abg {_gcc :=_c .AbsoluteFilename (_afgb ,_c .HeaderType ,_afgf +1);if _eec :=_f .MarshalXML (_cggb ,_gcc ,_cgf );
_eec !=nil {return _eec ;};if !_cbg ._cgcc [_afgf ].IsEmpty (){_f .MarshalXML (_cggb ,_f .RelationsPathFor (_gcc ),_cbg ._cgcc [_afgf ].X ());};};for _cdgg ,_adgd :=range _cbg ._fcga {_gdb :=_c .AbsoluteFilename (_afgb ,_c .FooterType ,_cdgg +1);if _dfc :=_f .MarshalXMLByTypeIndex (_cggb ,_afgb ,_c .FooterType ,_cdgg +1,_adgd );
_dfc !=nil {return _dfc ;};if !_cbg ._dde [_cdgg ].IsEmpty (){_f .MarshalXML (_cggb ,_f .RelationsPathFor (_gdb ),_cbg ._dde [_cdgg ].X ());};};for _efdg ,_abga :=range _cbg .Images {if _gca :=_aee .AddImageToZip (_cggb ,_abga ,_efdg +1,_c .DocTypeDocument );
_gca !=nil {return _gca ;};};for _dbf ,_aca :=range _cbg ._dac {_bfbf :=_c .AbsoluteFilename (_afgb ,_c .ChartType ,_dbf +1);_f .MarshalXML (_cggb ,_bfbf ,_aca ._aeed );};if _ecfb :=_f .MarshalXML (_cggb ,_c .ContentTypesFilename ,_cbg .ContentTypes .X ());
_ecfb !=nil {return _ecfb ;};if _dba :=_cbg .WriteExtraFiles (_cggb );_dba !=nil {return _dba ;};return _cggb .Close ();};

// InlineDrawing is an inlined image within a run.
type InlineDrawing struct{_faeg *Document ;_gbbc *_eb .WdInline ;};

// Underline returns the type of run underline.
func (_gbdcb RunProperties )Underline ()_eb .ST_Underline {if _beae :=_gbdcb ._fdggb .U ;_beae !=nil {return _beae .ValAttr ;};return 0;};

// SetBeforeSpacing sets spacing above paragraph.
func (_dbbg Paragraph )SetBeforeSpacing (d _ebf .Distance ){_dbbg .ensurePPr ();if _dbbg ._ggec .PPr .Spacing ==nil {_dbbg ._ggec .PPr .Spacing =_eb .NewCT_Spacing ();};_fgbd :=_dbbg ._ggec .PPr .Spacing ;_fgbd .BeforeAttr =&_bg .ST_TwipsMeasure {};_fgbd .BeforeAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (d /_ebf .Twips ));
};

// SetWidthAuto sets the the cell width to automatic.
func (_edeb CellProperties )SetWidthAuto (){_edeb ._ced .TcW =_eb .NewCT_TblWidth ();_edeb ._ced .TcW .TypeAttr =_eb .ST_TblWidthAuto ;};func (_bfc *Document )InsertTableBefore (relativeTo Paragraph )Table {return _bfc .insertTable (relativeTo ,true );
};

// AppendNode append node to document element.
func (_gebb *Document )AppendNode (node Node ){_gebb .insertImageFromNode (node );_gebb .insertStyleFromNode (node );for _ ,_fcda :=range node .Children {_gebb .insertImageFromNode (_fcda );_gebb .insertStyleFromNode (_fcda );};switch _gfbb :=node .X ().(type ){case *Paragraph :_gebb .appendParagraph (nil ,*_gfbb ,false );
case *Table :_gebb .appendTable (nil ,*_gfbb ,false );};if node ._cfgd !=nil {if node ._cfgd ._ccfe !=nil {if _gdeag :=_gebb ._ada .FindRIDForN (0,_c .ThemeType );_gdeag ==""{if _dccd :=node ._cfgd ._ada .FindRIDForN (0,_c .ThemeType );_dccd !=""{_gebb ._ccfe =append (_gebb ._ccfe ,node ._cfgd ._ccfe ...);
_gafa :=node ._cfgd ._ada .GetTargetByRelId (_dccd );_gebb .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_gafa ,"\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e/\u0076\u006e\u0064.\u006f\u0070e\u006e\u0078\u006d\u006c\u0066\u006fr\u006dat\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0074\u0068\u0065\u006d\u0065\u002b\u0078\u006d\u006c");
_gebb ._ada .AddRelationship (_gafa ,_c .ThemeType );};};};_dbcg :=_gebb ._cbf ;_fabf :=node ._cfgd ._cbf ;if _dbcg !=nil {if _fabf !=nil {if _dbcg .Font !=nil {if _fabf .Font !=nil {for _ ,_agega :=range _fabf .Font {_dcfb :=true ;for _ ,_gfgf :=range _dbcg .Font {if _gfgf .NameAttr ==_agega .NameAttr {_dcfb =false ;
break ;};};if _dcfb {_dbcg .Font =append (_dbcg .Font ,_agega );};};};}else {_dbcg .Font =_fabf .Font ;};};}else if _fabf !=nil {_dbcg =_fabf ;};_gebb ._cbf =_dbcg ;if _gbb :=_gebb ._ada .FindRIDForN (0,_c .FontTableType );_gbb ==""{_gebb .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006e\u0074\u0054\u0061\u0062\u006c\u0065\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u0066\u006f\u006e\u0074T\u0061\u0062\u006c\u0065\u002b\u0078m\u006c");
_gebb ._ada .AddRelationship ("\u0066\u006f\u006e\u0074\u0054\u0061\u0062\u006c\u0065\u002e\u0078\u006d\u006c",_c .FontTableType );};};};

// RightToLeft returns true if run text goes from right to left.
func (_adfe RunProperties )RightToLeft ()bool {return _bbea (_adfe ._fdggb .Rtl )};

// Shadow returns true if paragraph shadow is on.
func (_gccb ParagraphProperties )Shadow ()bool {return _bbea (_gccb ._fbde .RPr .Shadow )};

// Color returns the style's Color.
func (_ceec RunProperties )Color ()Color {if _ceec ._fdggb .Color ==nil {_ceec ._fdggb .Color =_eb .NewCT_Color ();};return Color {_ceec ._fdggb .Color };};

// NewWatermarkPicture generates new WatermarkPicture.
func NewWatermarkPicture ()WatermarkPicture {_fcadbg :=_cg .NewShapetype ();_dddcb :=_cg .NewEG_ShapeElements ();_dddcb .Formulas =_cgcfc ();_dddcb .Path =_fdfc ();_dddcb .Lock =_bbbc ();_fcadbg .EG_ShapeElements =[]*_cg .EG_ShapeElements {_dddcb };var (_dfege ="\u005f\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0037\u0035";
_dgceb ="2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030";_fcggf =float32 (75.0);_gfbfb ="\u006d\u0040\u0034\u00405l\u0040\u0034\u0040\u0031\u0031\u0040\u0039\u0040\u0031\u0031\u0040\u0039\u0040\u0035x\u0065";);_fcadbg .IdAttr =&_dfege ;_fcadbg .CoordsizeAttr =&_dgceb ;
_fcadbg .SptAttr =&_fcggf ;_fcadbg .PreferrelativeAttr =_bg .ST_TrueFalseTrue ;_fcadbg .PathAttr =&_gfbfb ;_fcadbg .FilledAttr =_bg .ST_TrueFalseFalse ;_fcadbg .StrokedAttr =_bg .ST_TrueFalseFalse ;_cffea :=_cg .NewShape ();_cgfec :=_cg .NewEG_ShapeElements ();
_cgfec .Imagedata =_ccgad ();_cffea .EG_ShapeElements =[]*_cg .EG_ShapeElements {_cgfec };var (_bagda ="\u0057\u006f\u0072\u0064\u0050\u0069\u0063\u0074\u0075\u0072e\u0057\u0061\u0074\u0065\u0072\u006d\u0061r\u006b\u0031\u0036\u0033\u0032\u0033\u0031\u0036\u0035\u0039\u0035";
_bgde ="\u005f\u0078\u00300\u0030\u0030\u005f\u0073\u0032\u0030\u0035\u0031";_bcbdg ="#\u005f\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0037\u0035";_gbaabb ="";_ccbaf ="\u0070os\u0069t\u0069o\u006e\u003a\u0061\u0062\u0073\u006fl\u0075\u0074\u0065\u003bm\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074\u003a\u0030\u003bma\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070\u003a\u0030\u003b\u0077\u0069\u0064\u0074\u0068\u003a\u0030\u0070\u0074;\u0068e\u0069\u0067\u0068\u0074\u003a\u0030\u0070\u0074\u003b\u007a\u002d\u0069\u006ed\u0065\u0078:\u002d\u0032\u00351\u0036\u0035\u0038\u0032\u0034\u0030\u003b\u006d\u0073o-\u0070\u006f\u0073i\u0074\u0069\u006f\u006e-\u0068\u006f\u0072\u0069\u007a\u006fn\u0074\u0061l\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003bm\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u002drela\u0074\u0069\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076\u0065\u0072t\u0069c\u0061l\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e-\u0076\u0065r\u0074\u0069c\u0061l\u002d\u0072\u0065\u006c\u0061\u0074i\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e";
);_cffea .IdAttr =&_bagda ;_cffea .SpidAttr =&_bgde ;_cffea .TypeAttr =&_bcbdg ;_cffea .AltAttr =&_gbaabb ;_cffea .StyleAttr =&_ccbaf ;_cffea .AllowincellAttr =_bg .ST_TrueFalseFalse ;_bcgfd :=_eb .NewCT_Picture ();_bcgfd .Any =[]_c .Any {_fcadbg ,_cffea };
return WatermarkPicture {_debae :_bcgfd ,_befe :_cffea ,_dadga :_fcadbg };};

// SetXOffset sets the X offset for an image relative to the origin.
func (_cf AnchoredDrawing )SetXOffset (x _ebf .Distance ){_cf ._ac .PositionH .Choice =&_eb .WdCT_PosHChoice {};_cf ._ac .PositionH .Choice .PosOffset =_c .Int32 (int32 (x /_ebf .EMU ));};

// SetValue sets the value of a FormFieldTypeText or FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_ddga FormField )SetValue (v string ){if _ddga ._bbdab .DdList !=nil {for _effe ,_ccdb :=range _ddga .PossibleValues (){if _ccdb ==v {_ddga ._bbdab .DdList .Result =_eb .NewCT_DecimalNumber ();_ddga ._bbdab .DdList .Result .ValAttr =int64 (_effe );
break ;};};}else if _ddga ._bbdab .TextInput !=nil {_ddga ._gedcf .T =_eb .NewCT_Text ();_ddga ._gedcf .T .Content =v ;};};func (_eabd *Document )appendParagraph (_cdga *Paragraph ,_cbbc Paragraph ,_ead bool )Paragraph {_dcbf :=_eb .NewEG_BlockLevelElts ();
_eabd ._cbd .Body .EG_BlockLevelElts =append (_eabd ._cbd .Body .EG_BlockLevelElts ,_dcbf );_faa :=_eb .NewEG_ContentBlockContent ();_dcbf .EG_ContentBlockContent =append (_dcbf .EG_ContentBlockContent ,_faa );if _cdga !=nil {_cfc :=_cdga .X ();for _ ,_bgb :=range _eabd ._cbd .Body .EG_BlockLevelElts {for _ ,_fdf :=range _bgb .EG_ContentBlockContent {for _caba ,_affc :=range _fdf .P {if _affc ==_cfc {_dbd :=_cbbc .X ();
_fdf .P =append (_fdf .P ,nil );if _ead {copy (_fdf .P [_caba +1:],_fdf .P [_caba :]);_fdf .P [_caba ]=_dbd ;}else {copy (_fdf .P [_caba +2:],_fdf .P [_caba +1:]);_fdf .P [_caba +1]=_dbd ;};break ;};};for _ ,_fgb :=range _fdf .Tbl {for _ ,_gaa :=range _fgb .EG_ContentRowContent {for _ ,_agcb :=range _gaa .Tr {for _ ,_ffd :=range _agcb .EG_ContentCellContent {for _ ,_dcf :=range _ffd .Tc {for _ ,_cafd :=range _dcf .EG_BlockLevelElts {for _ ,_adad :=range _cafd .EG_ContentBlockContent {for _eeca ,_dgf :=range _adad .P {if _dgf ==_cfc {_dcaf :=_cbbc .X ();
_adad .P =append (_adad .P ,nil );if _ead {copy (_adad .P [_eeca +1:],_adad .P [_eeca :]);_adad .P [_eeca ]=_dcaf ;}else {copy (_adad .P [_eeca +2:],_adad .P [_eeca +1:]);_adad .P [_eeca +1]=_dcaf ;};break ;};};};};};};};};};if _fdf .Sdt !=nil &&_fdf .Sdt .SdtContent !=nil &&_fdf .Sdt .SdtContent .P !=nil {for _aab ,_ecac :=range _fdf .Sdt .SdtContent .P {if _ecac ==_cfc {_fcab :=_cbbc .X ();
_fdf .Sdt .SdtContent .P =append (_fdf .Sdt .SdtContent .P ,nil );if _ead {copy (_fdf .Sdt .SdtContent .P [_aab +1:],_fdf .Sdt .SdtContent .P [_aab :]);_fdf .Sdt .SdtContent .P [_aab ]=_fcab ;}else {copy (_fdf .Sdt .SdtContent .P [_aab +2:],_fdf .Sdt .SdtContent .P [_aab +1:]);
_fdf .Sdt .SdtContent .P [_aab +1]=_fcab ;};break ;};};};};};}else {_faa .P =append (_faa .P ,_cbbc .X ());};_dbe :=_cbbc .Properties ();if _cgag ,_edef :=_dbe .Section ();_edef {var (_gfge map[string ]string ;_dbcb map[string ]string ;);_afbg :=_cgag .X ().EG_HdrFtrReferences ;
for _ ,_agegd :=range _afbg {if _agegd .HeaderReference !=nil {_gfge =map[string ]string {_agegd .HeaderReference .IdAttr :_cgag ._efdff ._ada .GetTargetByRelId (_agegd .HeaderReference .IdAttr )};};if _agegd .FooterReference !=nil {_dbcb =map[string ]string {_agegd .FooterReference .IdAttr :_cgag ._efdff ._ada .GetTargetByRelId (_agegd .FooterReference .IdAttr )};
};};var _fcabc map[int ]_aee .ImageRef ;for _ ,_gga :=range _cgag ._efdff .Headers (){for _ffb ,_cgbg :=range _gfge {_adcf :=_ede .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",(_gga .Index ()+1));if _adcf ==_cgbg {_fbg :=_ede .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",_gga .Index ());
_eabd ._abg =append (_eabd ._abg ,_gga .X ());_ccd :=_eabd ._ada .AddRelationship (_fbg ,_c .HeaderType );_ccd .SetID (_ffb );_eabd .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_fbg ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");
_eabd ._cgcc =append (_eabd ._cgcc ,_aee .NewRelationships ());_gab :=_gga .Paragraphs ();for _ ,_ebg :=range _gab {for _ ,_eba :=range _ebg .Runs (){_edfe :=_eba .DrawingAnchored ();for _ ,_edec :=range _edfe {if _ecad ,_gfe :=_edec .GetImage ();_gfe {_fcabc =map[int ]_aee .ImageRef {_gga .Index ():_ecad };
};};_ggg :=_eba .DrawingInline ();for _ ,_bdd :=range _ggg {if _eage ,_adcc :=_bdd .GetImage ();_adcc {_fcabc =map[int ]_aee .ImageRef {_gga .Index ():_eage };};};};};};};};for _gffc ,_aeea :=range _fcabc {for _ ,_fdcc :=range _eabd .Headers (){if (_fdcc .Index ()+1)==_gffc {_bea ,_eda :=_aee .ImageFromFile (_aeea .Path ());
if _eda !=nil {_ec .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_eda );};if _ ,_eda =_fdcc .AddImage (_bea );_eda !=nil {_ec .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_eda );
};};for _ ,_ccg :=range _fdcc .Paragraphs (){if _ffag ,_fbfe :=_cgag ._efdff .Styles .SearchStyleById (_ccg .Style ());_fbfe {if _ ,_cfg :=_eabd .Styles .SearchStyleById (_ccg .Style ());!_cfg {_eabd .Styles .InsertStyle (_ffag );};};};};};var _dge map[int ]_aee .ImageRef ;
for _ ,_cbcc :=range _cgag ._efdff .Footers (){for _def ,_fcf :=range _dbcb {_ebfg :=_ede .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",(_cbcc .Index ()+1));if _ebfg ==_fcf {_cbfba :=_ede .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",_cbcc .Index ());
_eabd ._fcga =append (_eabd ._fcga ,_cbcc .X ());_faae :=_eabd ._ada .AddRelationship (_cbfba ,_c .FooterType );_faae .SetID (_def );_eabd .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_cbfba ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");
_eabd ._dde =append (_eabd ._dde ,_aee .NewRelationships ());_fceff :=_cbcc .Paragraphs ();for _ ,_decb :=range _fceff {for _ ,_cabc :=range _decb .Runs (){_adgdd :=_cabc .DrawingAnchored ();for _ ,_afga :=range _adgdd {if _aagc ,_ecg :=_afga .GetImage ();
_ecg {_dge =map[int ]_aee .ImageRef {_cbcc .Index ():_aagc };};};_fcce :=_cabc .DrawingInline ();for _ ,_gaab :=range _fcce {if _gdca ,_egag :=_gaab .GetImage ();_egag {_dge =map[int ]_aee .ImageRef {_cbcc .Index ():_gdca };};};};};};};};for _bfae ,_baf :=range _dge {for _ ,_gaae :=range _eabd .Footers (){if (_gaae .Index ()+1)==_bfae {_bfca ,_aae :=_aee .ImageFromFile (_baf .Path ());
if _aae !=nil {_ec .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_aae );};if _ ,_aae =_gaae .AddImage (_bfca );_aae !=nil {_ec .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_aae );
};};for _ ,_adfg :=range _gaae .Paragraphs (){if _gaaef ,_gdfe :=_cgag ._efdff .Styles .SearchStyleById (_adfg .Style ());_gdfe {if _ ,_fcde :=_eabd .Styles .SearchStyleById (_adfg .Style ());!_fcde {_eabd .Styles .InsertStyle (_gaaef );};};};};};};_bcf :=_cbbc .Numbering ();
_eabd .Numbering ._aedgf .AbstractNum =append (_eabd .Numbering ._aedgf .AbstractNum ,_bcf ._aedgf .AbstractNum ...);_eabd .Numbering ._aedgf .Num =append (_eabd .Numbering ._aedgf .Num ,_bcf ._aedgf .Num ...);return Paragraph {_eabd ,_cbbc .X ()};};

// SetName sets the name of the image, visible in the properties of the image
// within Word.
func (_afc AnchoredDrawing )SetName (name string ){_afc ._ac .DocPr .NameAttr =name ;for _ ,_ag :=range _afc ._ac .Graphic .GraphicData .Any {if _be ,_edb :=_ag .(*_fe .Pic );_edb {_be .NvPicPr .CNvPr .DescrAttr =_c .String (name );};};};

// Bookmarks returns all of the bookmarks defined in the document.
func (_ffbf Document )Bookmarks ()[]Bookmark {if _ffbf ._cbd .Body ==nil {return nil ;};_cbce :=[]Bookmark {};for _ ,_fde :=range _ffbf ._cbd .Body .EG_BlockLevelElts {for _ ,_cde :=range _fde .EG_ContentBlockContent {for _ ,_bgea :=range _dfeb (_cde ){_cbce =append (_cbce ,_bgea );
};};};return _cbce ;};

// SetStartIndent controls the start indentation.
func (_caea ParagraphProperties )SetStartIndent (m _ebf .Distance ){if _caea ._fbde .Ind ==nil {_caea ._fbde .Ind =_eb .NewCT_Ind ();};if m ==_ebf .Zero {_caea ._fbde .Ind .StartAttr =nil ;}else {_caea ._fbde .Ind .StartAttr =&_eb .ST_SignedTwipsMeasure {};
_caea ._fbde .Ind .StartAttr .Int64 =_c .Int64 (int64 (m /_ebf .Twips ));};};

// MailMerge finds mail merge fields and replaces them with the text provided.  It also removes
// the mail merge source info from the document settings.
func (_afaf *Document )MailMerge (mergeContent map[string ]string ){_egac :=_afaf .mergeFields ();_fbcb :=map[Paragraph ][]Run {};for _ ,_gced :=range _egac {_egggg ,_afca :=mergeContent [_gced ._eeedg ];if _afca {if _gced ._beed {_egggg =_ae .ToUpper (_egggg );
}else if _gced ._fcgab {_egggg =_ae .ToLower (_egggg );}else if _gced ._cgdee {_egggg =_ae .Title (_egggg );}else if _gced ._dffd {_cdcgf :=_af .Buffer {};for _bggfb ,_bdaa :=range _egggg {if _bggfb ==0{_cdcgf .WriteRune (_ed .ToUpper (_bdaa ));}else {_cdcgf .WriteRune (_bdaa );
};};_egggg =_cdcgf .String ();};if _egggg !=""&&_gced ._ffdg !=""{_egggg =_gced ._ffdg +_egggg ;};if _egggg !=""&&_gced ._cfab !=""{_egggg =_egggg +_gced ._cfab ;};};if _gced ._ecceg {if len (_gced ._bfce .FldSimple )==1&&len (_gced ._bfce .FldSimple [0].EG_PContent )==1&&len (_gced ._bfce .FldSimple [0].EG_PContent [0].EG_ContentRunContent )==1{_cgedg :=&_eb .EG_ContentRunContent {};
_cgedg .R =_gced ._bfce .FldSimple [0].EG_PContent [0].EG_ContentRunContent [0].R ;_gced ._bfce .FldSimple =nil ;_gfde :=Run {_afaf ,_cgedg .R };_gfde .ClearContent ();_gfde .AddText (_egggg );_gced ._bfce .EG_ContentRunContent =append (_gced ._bfce .EG_ContentRunContent ,_cgedg );
};}else {_egcca :=_gced ._gfef .Runs ();for _fdag :=_gced ._bfeg ;_fdag <=_gced ._bcbd ;_fdag ++{if _fdag ==_gced ._eagb +1{_egcca [_fdag ].ClearContent ();_egcca [_fdag ].AddText (_egggg );}else {_fbcb [_gced ._gfef ]=append (_fbcb [_gced ._gfef ],_egcca [_fdag ]);
};};};};for _dfgd ,_bdae :=range _fbcb {for _ ,_cagfa :=range _bdae {_dfgd .RemoveRun (_cagfa );};};_afaf .Settings .RemoveMailMerge ();};

// SetEastAsiaTheme sets the font East Asia Theme.
func (_acbe Fonts )SetEastAsiaTheme (t _eb .ST_Theme ){_acbe ._gfcg .EastAsiaThemeAttr =t };

// Margins allows controlling individual cell margins.
func (_agf CellProperties )Margins ()CellMargins {if _agf ._ced .TcMar ==nil {_agf ._ced .TcMar =_eb .NewCT_TcMar ();};return CellMargins {_agf ._ced .TcMar };};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_ddbbgc ParagraphProperties )SetKeepOnOnePage (b bool ){if !b {_ddbbgc ._fbde .KeepLines =nil ;}else {_ddbbgc ._fbde .KeepLines =_eb .NewCT_OnOff ();};};func (_ddgb *Document )appendTable (_cga *Paragraph ,_bggf Table ,_bfa bool )Table {_facf :=_ddgb ._cbd .Body ;
_cefg :=_eb .NewEG_BlockLevelElts ();_ddgb ._cbd .Body .EG_BlockLevelElts =append (_ddgb ._cbd .Body .EG_BlockLevelElts ,_cefg );_geg :=_eb .NewEG_ContentBlockContent ();_cefg .EG_ContentBlockContent =append (_cefg .EG_ContentBlockContent ,_geg );if _cga !=nil {_cfa :=_cga .X ();
for _gea ,_dgd :=range _facf .EG_BlockLevelElts {for _ ,_bge :=range _dgd .EG_ContentBlockContent {for _fcef ,_cada :=range _geg .P {if _cada ==_cfa {_fced :=_bggf .X ();_acce :=_eb .NewEG_BlockLevelElts ();_bbac :=_eb .NewEG_ContentBlockContent ();_acce .EG_ContentBlockContent =append (_acce .EG_ContentBlockContent ,_bbac );
_bbac .Tbl =append (_bbac .Tbl ,_fced );_facf .EG_BlockLevelElts =append (_facf .EG_BlockLevelElts ,nil );if _bfa {copy (_facf .EG_BlockLevelElts [_gea +1:],_facf .EG_BlockLevelElts [_gea :]);_facf .EG_BlockLevelElts [_gea ]=_acce ;if _fcef !=0{_cbbd :=_eb .NewEG_BlockLevelElts ();
_aad :=_eb .NewEG_ContentBlockContent ();_cbbd .EG_ContentBlockContent =append (_cbbd .EG_ContentBlockContent ,_aad );_aad .P =_bge .P [:_fcef ];_facf .EG_BlockLevelElts =append (_facf .EG_BlockLevelElts ,nil );copy (_facf .EG_BlockLevelElts [_gea +1:],_facf .EG_BlockLevelElts [_gea :]);
_facf .EG_BlockLevelElts [_gea ]=_cbbd ;};_bge .P =_bge .P [_fcef :];}else {copy (_facf .EG_BlockLevelElts [_gea +2:],_facf .EG_BlockLevelElts [_gea +1:]);_facf .EG_BlockLevelElts [_gea +1]=_acce ;if _fcef !=len (_bge .P )-1{_dcb :=_eb .NewEG_BlockLevelElts ();
_cee :=_eb .NewEG_ContentBlockContent ();_dcb .EG_ContentBlockContent =append (_dcb .EG_ContentBlockContent ,_cee );_cee .P =_bge .P [_fcef +1:];_facf .EG_BlockLevelElts =append (_facf .EG_BlockLevelElts ,nil );copy (_facf .EG_BlockLevelElts [_gea +3:],_facf .EG_BlockLevelElts [_gea +2:]);
_facf .EG_BlockLevelElts [_gea +2]=_dcb ;};_bge .P =_bge .P [:_fcef +1];};break ;};};for _ ,_efg :=range _bge .Tbl {_bdac :=_ggc (_efg ,_cfa ,_bfa );if _bdac !=nil {break ;};};};};}else {_geg .Tbl =append (_geg .Tbl ,_bggf .X ());};return Table {_ddgb ,_bggf .X ()};
};

// ExtractText returns text from the document as a DocText object.
func (_acfa *Document )ExtractText ()*DocText {_ffeg :=[]TextItem {};for _ ,_fagf :=range _acfa ._cbd .Body .EG_BlockLevelElts {_ffeg =append (_ffeg ,_edaf (_fagf .EG_ContentBlockContent ,nil )...);};var _bgag []listItemInfo ;_dedee :=_acfa .Paragraphs ();
for _ ,_bfbg :=range _dedee {_edca :=_eaff (_acfa ,_bfbg );_bgag =append (_bgag ,_edca );};_feac :=_gdcc (_acfa );return &DocText {Items :_ffeg ,_ecbc :_bgag ,_dafge :_feac };};func _afgff (_gebd *_eb .CT_Border ,_dada _eb .ST_Border ,_fcbc _dd .Color ,_eefe _ebf .Distance ){_gebd .ValAttr =_dada ;
_gebd .ColorAttr =&_eb .ST_HexColor {};if _fcbc .IsAuto (){_gebd .ColorAttr .ST_HexColorAuto =_eb .ST_HexColorAutoAuto ;}else {_gebd .ColorAttr .ST_HexColorRGB =_fcbc .AsRGBString ();};if _eefe !=_ebf .Zero {_gebd .SzAttr =_c .Uint64 (uint64 (_eefe /_ebf .Point *8));
};};

// SetOutlineLvl sets outline level of paragraph.
func (_agffb Paragraph )SetOutlineLvl (lvl int64 ){_agffb .ensurePPr ();if _agffb ._ggec .PPr .OutlineLvl ==nil {_agffb ._ggec .PPr .OutlineLvl =_eb .NewCT_DecimalNumber ();};_fgff :=lvl -1;_agffb ._ggec .PPr .OutlineLvl .ValAttr =_fgff ;};

// GetHeader gets a section Header for given type t [ST_HdrFtrDefault, ST_HdrFtrEven, ST_HdrFtrFirst]
func (_afdc Section )GetHeader (t _eb .ST_HdrFtr )(Header ,bool ){for _ ,_cedg :=range _afdc ._adef .EG_HdrFtrReferences {if _cedg .HeaderReference .TypeAttr ==t {for _ ,_afced :=range _afdc ._efdff .Headers (){_aegg :=_afdc ._efdff ._ada .FindRIDForN (_afced .Index (),_c .HeaderType );
if _aegg ==_cedg .HeaderReference .IdAttr {return _afced ,true ;};};};};return Header {},false ;};

// SetLineSpacing controls the line spacing of the paragraph.
func (_ddgeba ParagraphStyleProperties )SetLineSpacing (m _ebf .Distance ,rule _eb .ST_LineSpacingRule ){if _ddgeba ._gdbb .Spacing ==nil {_ddgeba ._gdbb .Spacing =_eb .NewCT_Spacing ();};if rule ==_eb .ST_LineSpacingRuleUnset {_ddgeba ._gdbb .Spacing .LineRuleAttr =_eb .ST_LineSpacingRuleUnset ;
_ddgeba ._gdbb .Spacing .LineAttr =nil ;}else {_ddgeba ._gdbb .Spacing .LineRuleAttr =rule ;_ddgeba ._gdbb .Spacing .LineAttr =&_eb .ST_SignedTwipsMeasure {};_ddgeba ._gdbb .Spacing .LineAttr .Int64 =_c .Int64 (int64 (m /_ebf .Twips ));};};

// SetSmallCaps sets the run to small caps.
func (_geae RunProperties )SetSmallCaps (b bool ){if !b {_geae ._fdggb .SmallCaps =nil ;}else {_geae ._fdggb .SmallCaps =_eb .NewCT_OnOff ();};};func _adba ()*_cg .Path {_dcbaa :=_cg .NewPath ();_dcbaa .TextpathokAttr =_bg .ST_TrueFalseTrue ;_dcbaa .ConnecttypeAttr =_cg .OfcST_ConnectTypeCustom ;
_defa :="\u0040\u0039\u002c0;\u0040\u0031\u0030\u002c\u0031\u0030\u0038\u0030\u0030;\u00401\u0031,\u00321\u0036\u0030\u0030\u003b\u0040\u0031\u0032\u002c\u0031\u0030\u0038\u0030\u0030";_dcbaa .ConnectlocsAttr =&_defa ;_bcbfd :="\u0032\u0037\u0030,\u0031\u0038\u0030\u002c\u0039\u0030\u002c\u0030";
_dcbaa .ConnectanglesAttr =&_bcbfd ;return _dcbaa ;};

// X returns the internally wrapped *wml.CT_SectPr.
func (_feefg Section )X ()*_eb .CT_SectPr {return _feefg ._adef };

// AddDropdownList adds dropdown list form field to the paragraph and returns it.
func (_acgdc Paragraph )AddDropdownList (name string )FormField {_ceca :=_acgdc .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0044\u0052\u004f\u0050\u0044\u004f\u0057\u004e");_ceca ._bbdab .DdList =_eb .NewCT_FFDDList ();return _ceca ;};func _ecgc (_fae []*_eb .CT_P ,_cceg *TableInfo ,_gdba *DrawingInfo )[]TextItem {_deed :=[]TextItem {};
for _ ,_dddbb :=range _fae {_deed =append (_deed ,_gbef (_dddbb ,nil ,_cceg ,_gdba ,_dddbb .EG_PContent )...);};return _deed ;};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_cbbe ParagraphProperties )RStyle ()string {if _cbbe ._fbde .RPr .RStyle !=nil {return _cbbe ._fbde .RPr .RStyle .ValAttr ;};return "";};

// UnderlineColor returns the hex color value of run underline.
func (_cabcf RunProperties )UnderlineColor ()string {if _egbc :=_cabcf ._fdggb .U ;_egbc !=nil {_gbab :=_egbc .ColorAttr ;if _gbab !=nil &&_gbab .ST_HexColorRGB !=nil {return *_gbab .ST_HexColorRGB ;};};return "";};

// SetSpacing sets the spacing that comes before and after the paragraph.
func (_ffbb ParagraphStyleProperties )SetSpacing (before ,after _ebf .Distance ){if _ffbb ._gdbb .Spacing ==nil {_ffbb ._gdbb .Spacing =_eb .NewCT_Spacing ();};if before ==_ebf .Zero {_ffbb ._gdbb .Spacing .BeforeAttr =nil ;}else {_ffbb ._gdbb .Spacing .BeforeAttr =&_bg .ST_TwipsMeasure {};
_ffbb ._gdbb .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (before /_ebf .Twips ));};if after ==_ebf .Zero {_ffbb ._gdbb .Spacing .AfterAttr =nil ;}else {_ffbb ._gdbb .Spacing .AfterAttr =&_bg .ST_TwipsMeasure {};_ffbb ._gdbb .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (after /_ebf .Twips ));
};};

// SetTextStyleBold set text style of watermark to bold.
func (_bbcee *WatermarkText )SetTextStyleBold (value bool ){if _bbcee ._caafd !=nil {_dcef :=_bbcee .GetStyle ();_dcef .SetBold (value );_bbcee .SetStyle (_dcef );};};

// Paragraphs returns the paragraphs defined in an endnote.
func (_fecdd Endnote )Paragraphs ()[]Paragraph {_gef :=[]Paragraph {};for _ ,_eddgc :=range _fecdd .content (){for _ ,_gbdf :=range _eddgc .P {_gef =append (_gef ,Paragraph {_fecdd ._bfgc ,_gbdf });};};return _gef ;};

// SetFollowImageShape sets wrapPath to follow image shape,
// if nil return wrapPath that follow image size.
func (_efa AnchorDrawWrapOptions )SetFollowImageShape (val bool ){_efa ._fg =val ;if !val {_gd ,_ddd :=_fcd ();_efa ._ddb =_gd ;_efa ._fcc =_ddd ;};};

// SetRightPct sets the cell right margin
func (_afbd CellMargins )SetRightPct (pct float64 ){_afbd ._aag .Right =_eb .NewCT_TblWidth ();_ddaa (_afbd ._aag .Right ,pct );};

// SetHeight allows controlling the height of a row within a table.
func (_ebdad RowProperties )SetHeight (ht _ebf .Distance ,rule _eb .ST_HeightRule ){if rule ==_eb .ST_HeightRuleUnset {_ebdad ._ebcag .TrHeight =nil ;}else {_aedb :=_eb .NewCT_Height ();_aedb .HRuleAttr =rule ;_aedb .ValAttr =&_bg .ST_TwipsMeasure {};_aedb .ValAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (ht /_ebf .Twips ));
_ebdad ._ebcag .TrHeight =[]*_eb .CT_Height {_aedb };};};

// GetText returns text in the watermark.
func (_dbecc *WatermarkText )GetText ()string {_deff :=_dbecc .getShape ();if _dbecc ._caafd !=nil {_aada :=_dbecc ._caafd .EG_ShapeElements ;if len (_aada )> 0&&_aada [0].Textpath !=nil {return *_aada [0].Textpath .StringAttr ;};}else {_deegc :=_dbecc .findNode (_deff ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");
for _ ,_caddf :=range _deegc .Attrs {if _caddf .Name .Local =="\u0073\u0074\u0072\u0069\u006e\u0067"{return _caddf .Value ;};};};return "";};func (_eecf *Document )addEndnotes (){_eecf ._edd =_eb .NewEndnotes ();_eecf .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0065\u006e\u0064n\u006f\u0074e\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0065\u006e\u0064\u006e\u006f\u0074\u0065\u0073\u002b\u0078\u006d\u006c");
_eecf ._ada .AddRelationship ("\u002fw\u006fr\u0064\u002f\u0065\u006e\u0064n\u006f\u0074e\u0073\u002e\u0078\u006d\u006c",_c .EndNotesType );_aeedb :=_eecf .Styles .AddStyle (EndnoteTextStyleId ,_eb .ST_StyleTypeParagraph ,false );_aeedb .SetName ("\u0045\u006e\u0064n\u006f\u0074\u0065\u0020\u0054\u0065\u0078\u0074");
_aeedb .SetBasedOn ("\u004e\u006f\u0072\u006d\u0061\u006c");_eagg :=_aeedb .ParagraphProperties ();_eagg .X ().SuppressLineNumbers =&_eb .CT_OnOff {};_aac :=_aeedb .RunProperties ();_aac .X ().Sz =&_eb .CT_HpsMeasure {ValAttr :_eb .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_cgcf }};
_aac .X ().SzCs =&_eb .CT_HpsMeasure {ValAttr :_eb .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_cgcf }};_dfa :=_eecf .Styles .AddStyle (_gge ,_eb .ST_StyleTypeCharacter ,false );_dfa .SetName ("\u0045\u006e\u0064\u006e\u006f\u0074\u0065\u0020\u0052\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");
_ggfb :=_dfa .RunProperties ();_ggfb .X ().VertAlign =&_eb .CT_VerticalAlignRun {ValAttr :_bg .ST_VerticalAlignRunSuperscript };_eecf .addEndnoteSeparator ();};func _egca (_cffc *_eb .CT_Tbl ,_adde ,_eaeec map[int64 ]int64 ){for _ ,_cbbce :=range _cffc .EG_ContentRowContent {for _ ,_geeae :=range _cbbce .Tr {for _ ,_abfb :=range _geeae .EG_ContentCellContent {for _ ,_cecde :=range _abfb .Tc {for _ ,_badb :=range _cecde .EG_BlockLevelElts {for _ ,_cgaa :=range _badb .EG_ContentBlockContent {for _ ,_cgfg :=range _cgaa .P {_acef (_cgfg ,_adde ,_eaeec );
};for _ ,_eecc :=range _cgaa .Tbl {_egca (_eecc ,_adde ,_eaeec );};};};};};};};};

// Pict returns the pict object.
func (_bcfcb *WatermarkText )Pict ()*_eb .CT_Picture {return _bcfcb ._ggfc };

// AddParagraph adds a paragraph to the footnote.
func (_bdgg Footnote )AddParagraph ()Paragraph {_egbaa :=_eb .NewEG_ContentBlockContent ();_abcc :=len (_bdgg ._bbff .EG_BlockLevelElts [0].EG_ContentBlockContent );_bdgg ._bbff .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_bdgg ._bbff .EG_BlockLevelElts [0].EG_ContentBlockContent ,_egbaa );
_gbcg :=_eb .NewCT_P ();var _gffcc *_eb .CT_String ;if _abcc !=0{_effb :=len (_bdgg ._bbff .EG_BlockLevelElts [0].EG_ContentBlockContent [_abcc -1].P );_gffcc =_bdgg ._bbff .EG_BlockLevelElts [0].EG_ContentBlockContent [_abcc -1].P [_effb -1].PPr .PStyle ;
}else {_gffcc =_eb .NewCT_String ();_gffcc .ValAttr =FootnoteTextStyleId ;};_egbaa .P =append (_egbaa .P ,_gbcg );_dcaeg :=Paragraph {_bdgg ._bbde ,_gbcg };_dcaeg ._ggec .PPr =_eb .NewCT_PPr ();_dcaeg ._ggec .PPr .PStyle =_gffcc ;_dcaeg ._ggec .PPr .RPr =_eb .NewCT_ParaRPr ();
return _dcaeg ;};

// SetSemiHidden controls if the style is hidden in the UI.
func (_ccaba Style )SetSemiHidden (b bool ){if b {_ccaba ._dadg .SemiHidden =_eb .NewCT_OnOff ();}else {_ccaba ._dadg .SemiHidden =nil ;};};

// SetCSTheme sets the font complex script theme.
func (_feaa Fonts )SetCSTheme (t _eb .ST_Theme ){_feaa ._gfcg .CsthemeAttr =t };type listItemInfo struct{FromStyle *Style ;FromParagraph *Paragraph ;AbstractNumId *int64 ;NumberingLevel *NumberingLevel ;};

// SetStyle sets the style of a paragraph and is identical to setting it on the
// paragraph's Properties()
func (_acfad Paragraph )SetStyle (s string ){_acfad .ensurePPr ();if s ==""{_acfad ._ggec .PPr .PStyle =nil ;}else {_acfad ._ggec .PPr .PStyle =_eb .NewCT_String ();_acfad ._ggec .PPr .PStyle .ValAttr =s ;};};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_fegad ParagraphProperties )CharacterSpacingMeasure ()string {if _abcea :=_fegad ._fbde .RPr .Spacing ;_abcea !=nil {_cdcdc :=_abcea .ValAttr ;if _cdcdc .ST_UniversalMeasure !=nil {return *_cdcdc .ST_UniversalMeasure ;};};return "";};

// DocRels returns document relationship.
func (_acde *Document )DocRels ()_aee .Relationships {return _acde ._ada };

// GetDocRelTargetByID returns TargetAttr of document relationship given its IdAttr.
func (_fedb *Document )GetDocRelTargetByID (idAttr string )string {for _ ,_dbaed :=range _fedb ._ada .X ().Relationship {if _dbaed .IdAttr ==idAttr {return _dbaed .TargetAttr ;};};return "";};

// SetLastColumn controls the conditional formatting for the last column in a table.
func (_fgdb TableLook )SetLastColumn (on bool ){if !on {_fgdb ._bcdcb .LastColumnAttr =&_bg .ST_OnOff {};_fgdb ._bcdcb .LastColumnAttr .ST_OnOff1 =_bg .ST_OnOff1Off ;}else {_fgdb ._bcdcb .LastColumnAttr =&_bg .ST_OnOff {};_fgdb ._bcdcb .LastColumnAttr .ST_OnOff1 =_bg .ST_OnOff1On ;
};};

// Italic returns true if run font is italic.
func (_dgeg RunProperties )Italic ()bool {_ebdgg :=_dgeg ._fdggb ;return _bbea (_ebdgg .I )||_bbea (_ebdgg .ICs );};func (_bbgf *Document )insertParagraph (_ffg Paragraph ,_bga bool )Paragraph {if _bbgf ._cbd .Body ==nil {return _bbgf .AddParagraph ();
};_bcda :=_ffg .X ();for _ ,_fefb :=range _bbgf ._cbd .Body .EG_BlockLevelElts {for _ ,_fcdg :=range _fefb .EG_ContentBlockContent {for _ceaa ,_gafe :=range _fcdg .P {if _gafe ==_bcda {_defe :=_eb .NewCT_P ();_fcdg .P =append (_fcdg .P ,nil );if _bga {copy (_fcdg .P [_ceaa +1:],_fcdg .P [_ceaa :]);
_fcdg .P [_ceaa ]=_defe ;}else {copy (_fcdg .P [_ceaa +2:],_fcdg .P [_ceaa +1:]);_fcdg .P [_ceaa +1]=_defe ;};return Paragraph {_bbgf ,_defe };};};for _ ,_acdg :=range _fcdg .Tbl {for _ ,_bbe :=range _acdg .EG_ContentRowContent {for _ ,_ccbc :=range _bbe .Tr {for _ ,_aedg :=range _ccbc .EG_ContentCellContent {for _ ,_bbdac :=range _aedg .Tc {for _ ,_eded :=range _bbdac .EG_BlockLevelElts {for _ ,_ffddd :=range _eded .EG_ContentBlockContent {for _aegf ,_aacg :=range _ffddd .P {if _aacg ==_bcda {_adfdd :=_eb .NewCT_P ();
_ffddd .P =append (_ffddd .P ,nil );if _bga {copy (_ffddd .P [_aegf +1:],_ffddd .P [_aegf :]);_ffddd .P [_aegf ]=_adfdd ;}else {copy (_ffddd .P [_aegf +2:],_ffddd .P [_aegf +1:]);_ffddd .P [_aegf +1]=_adfdd ;};return Paragraph {_bbgf ,_adfdd };};};};};
};};};};};if _fcdg .Sdt !=nil &&_fcdg .Sdt .SdtContent !=nil &&_fcdg .Sdt .SdtContent .P !=nil {for _bddf ,_fefe :=range _fcdg .Sdt .SdtContent .P {if _fefe ==_bcda {_gbcb :=_eb .NewCT_P ();_fcdg .Sdt .SdtContent .P =append (_fcdg .Sdt .SdtContent .P ,nil );
if _bga {copy (_fcdg .Sdt .SdtContent .P [_bddf +1:],_fcdg .Sdt .SdtContent .P [_bddf :]);_fcdg .Sdt .SdtContent .P [_bddf ]=_gbcb ;}else {copy (_fcdg .Sdt .SdtContent .P [_bddf +2:],_fcdg .Sdt .SdtContent .P [_bddf +1:]);_fcdg .Sdt .SdtContent .P [_bddf +1]=_gbcb ;
};return Paragraph {_bbgf ,_gbcb };};};};};};return _bbgf .AddParagraph ();};

// SetLastRow controls the conditional formatting for the last row in a table.
// This is called the 'Total' row within Word.
func (_ddbbb TableLook )SetLastRow (on bool ){if !on {_ddbbb ._bcdcb .LastRowAttr =&_bg .ST_OnOff {};_ddbbb ._bcdcb .LastRowAttr .ST_OnOff1 =_bg .ST_OnOff1Off ;}else {_ddbbb ._bcdcb .LastRowAttr =&_bg .ST_OnOff {};_ddbbb ._bcdcb .LastRowAttr .ST_OnOff1 =_bg .ST_OnOff1On ;
};};const _ebfdc ="\u0046\u006f\u0072\u006d\u0046\u0069\u0065l\u0064\u0054\u0079\u0070\u0065\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0046\u006fr\u006dF\u0069\u0065\u006c\u0064\u0054\u0079p\u0065\u0054\u0065\u0078\u0074\u0046\u006fr\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0043\u0068\u0065\u0063\u006b\u0042\u006f\u0078\u0046\u006f\u0072\u006d\u0046i\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0044\u0072\u006f\u0070\u0044\u006fw\u006e";


// read reads a document from an io.Reader.
func Read (r _ab .ReaderAt ,size int64 )(*Document ,error ){return _aeda (r ,size ,"")};

// SetTextStyleItalic set text style of watermark to italic.
func (_agdee *WatermarkText )SetTextStyleItalic (value bool ){if _agdee ._caafd !=nil {_abac :=_agdee .GetStyle ();_abac .SetItalic (value );_agdee .SetStyle (_abac );};};

// AddLevel adds a new numbering level to a NumberingDefinition.
func (_daeb NumberingDefinition )AddLevel ()NumberingLevel {_feefe :=_eb .NewCT_Lvl ();_feefe .Start =&_eb .CT_DecimalNumber {ValAttr :1};_feefe .IlvlAttr =int64 (len (_daeb ._degbd .Lvl ));_daeb ._degbd .Lvl =append (_daeb ._degbd .Lvl ,_feefe );return NumberingLevel {_feefe };
};

// GetStyleByID returns Style by it's IdAttr.
func (_ebed *Document )GetStyleByID (id string )Style {for _ ,_bbeaf :=range _ebed .Styles ._gegd .Style {if _bbeaf .StyleIdAttr !=nil &&*_bbeaf .StyleIdAttr ==id {return Style {_bbeaf };};};return Style {};};

// TextWithOptions extract text with options.
func (_dbeg *DocText )TextWithOptions (options ExtractTextOptions )string {_eedb :=make (map[int64 ]map[int64 ]int64 ,0);_dcee :=_af .NewBuffer ([]byte {});_bcdgf :=int64 (0);_acfdd :=int64 (0);_aagff :=int64 (0);for _bgafa ,_dcceb :=range _dbeg .Items {_afff :=false ;
if _dcceb .Text !=""{if _bgafa > 0{if _dcceb .Paragraph !=_dbeg .Items [_bgafa -1].Paragraph {_afff =true ;};if !options .RunsOnNewLine &&_afff {_dcee .WriteString ("\u000a");}else if options .RunsOnNewLine {_dcee .WriteString ("\u000a");};}else {_afff =true ;
};if options .WithNumbering {if _afff {for _ ,_geca :=range _dbeg ._ecbc {if _geca .FromParagraph ==nil {continue ;};if _geca .FromParagraph .X ()==_dcceb .Paragraph {if _efge :=_geca .NumberingLevel .X ();_efge !=nil {if _geca .AbstractNumId !=nil &&_dbeg ._dafge [*_geca .AbstractNumId ][_efge .IlvlAttr ]> 0{if _ ,_dfef :=_eedb [*_geca .AbstractNumId ];
_dfef {if _ ,_cfef :=_eedb [*_geca .AbstractNumId ][_efge .IlvlAttr ];_cfef {_eedb [*_geca .AbstractNumId ][_efge .IlvlAttr ]++;}else {_eedb [*_geca .AbstractNumId ][_efge .IlvlAttr ]=1;};}else {_eedb [*_geca .AbstractNumId ]=map[int64 ]int64 {_efge .IlvlAttr :1};
};if _bcdgf ==_geca .NumberingLevel .X ().IlvlAttr &&_efge .IlvlAttr > 0{_acfdd ++;}else {_acfdd =_eedb [*_geca .AbstractNumId ][_efge .IlvlAttr ];if _efge .IlvlAttr > _bcdgf &&_aagff ==*_geca .AbstractNumId {_acfdd =1;};};_agefb :="";if _efge .LvlText .ValAttr !=nil {_agefb =*_efge .LvlText .ValAttr ;
};_gffa :=_ce .FormatNumberingText (_acfdd ,_efge .IlvlAttr ,_agefb ,_efge .NumFmt ,_eedb [*_geca .AbstractNumId ]);_dcee .WriteString (_gffa );_dbeg ._dafge [*_geca .AbstractNumId ][_efge .IlvlAttr ]--;_bcdgf =_efge .IlvlAttr ;_aagff =*_geca .AbstractNumId ;
if options .NumberingIndent !=""{_dcee .WriteString (options .NumberingIndent );};};};break ;};};};};_dcee .WriteString (_dcceb .Text );};};return _dcee .String ();};

// GetImageObjByRelId returns a common.Image with the associated relation ID in the
// document.
func (_fgfeb *Document )GetImageObjByRelId (relId string )(_aee .Image ,error ){_eead :=_fgfeb ._ada .GetTargetByRelIdAndType (relId ,_c .ImageType );if _eead ==""{for _ ,_aeba :=range _fgfeb ._cgcc {_eead =_aeba .GetTargetByRelIdAndType (relId ,_c .ImageType );
};};if _eead ==""{for _ ,_dgff :=range _fgfeb ._dde {_eead =_dgff .GetTargetByRelIdAndType (relId ,_c .ImageType );};};return _fgfeb .DocBase .GetImageBytesByTarget (_eead );};

// SetPrimaryStyle marks the style as a primary style.
func (_aabed Style )SetPrimaryStyle (b bool ){if b {_aabed ._dadg .QFormat =_eb .NewCT_OnOff ();}else {_aabed ._dadg .QFormat =nil ;};};

// Clear clears all content within a header
func (_gffg Header )Clear (){_gffg ._ccaed .EG_ContentBlockContent =nil };

// DoubleStrike returns true if run is double striked.
func (_abgc RunProperties )DoubleStrike ()bool {return _bbea (_abgc ._fdggb .Dstrike )};

// Tables returns the tables defined in the footer.
func (_dgdd Footer )Tables ()[]Table {_adeac :=[]Table {};if _dgdd ._cece ==nil {return nil ;};for _ ,_bgecf :=range _dgdd ._cece .EG_ContentBlockContent {for _ ,_dbag :=range _dgdd ._gfag .tables (_bgecf ){_adeac =append (_adeac ,_dbag );};};return _adeac ;
};

// AddFooter creates a Footer associated with the document, but doesn't add it
// to the document for display.
func (_cfd *Document )AddFooter ()Footer {_aea :=_eb .NewFtr ();_cfd ._fcga =append (_cfd ._fcga ,_aea );_ffa :=_ede .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_cfd ._fcga ));_cfd ._ada .AddRelationship (_ffa ,_c .FooterType );
_cfd .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_ffa ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");
_cfd ._dde =append (_cfd ._dde ,_aee .NewRelationships ());return Footer {_cfd ,_aea };};

// Color controls the run or styles color.
type Color struct{_acg *_eb .CT_Color };

// AddCheckBox adds checkbox form field to the paragraph and returns it.
func (_bcgdb Paragraph )AddCheckBox (name string )FormField {_bffe :=_bcgdb .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0043\u0048\u0045\u0043\u004b\u0042\u004f\u0058");_bffe ._bbdab .CheckBox =_eb .NewCT_FFCheckBox ();return _bffe ;};

// Name returns the name of the style if set.
func (_gcgg Style )Name ()string {if _gcgg ._dadg .Name ==nil {return "";};return _gcgg ._dadg .Name .ValAttr ;};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_fea *Document )GetImageByRelID (relID string )(_aee .ImageRef ,bool ){_ddc :=_fea ._ada .GetTargetByRelId (relID );_cabca :="";for _ ,_bdga :=range _fea ._cgcc {if _cabca !=""{break ;};_cabca =_bdga .GetTargetByRelId (relID );};for _ ,_ddgeb :=range _fea .Images {if _ddgeb .RelID ()==relID {return _ddgeb ,true ;
};if _ddc !=""{_geac :=_ae .Replace (_ddgeb .Target (),"\u0077\u006f\u0072d\u002f","",1);if _geac ==_ddc {if _ddgeb .RelID ()==""{_ddgeb .SetRelID (relID );};return _ddgeb ,true ;};};if _cabca !=""{_eece :=_ae .Replace (_ddgeb .Target (),"\u0077\u006f\u0072d\u002f","",1);
if _eece ==_cabca {if _ddgeb .RelID ()==""{_ddgeb .SetRelID (relID );};return _ddgeb ,true ;};};};return _aee .ImageRef {},false ;};

// AddStyle adds a new empty style, if styleID is already exists, it will return the style.
func (_cebe Styles )AddStyle (styleID string ,t _eb .ST_StyleType ,isDefault bool )Style {if _feebf ,_efag :=_cebe .SearchStyleById (styleID );_efag {return _feebf ;};_gffe :=_eb .NewCT_Style ();_gffe .TypeAttr =t ;if isDefault {_gffe .DefaultAttr =&_bg .ST_OnOff {};
_gffe .DefaultAttr .Bool =_c .Bool (isDefault );};_gffe .StyleIdAttr =_c .String (styleID );_cebe ._gegd .Style =append (_cebe ._gegd .Style ,_gffe );return Style {_gffe };};

// Cells returns the cells defined in the table.
func (_cgagca Row )Cells ()[]Cell {_dddc :=[]Cell {};for _ ,_bfgf :=range _cgagca ._ecfe .EG_ContentCellContent {for _ ,_cgfcc :=range _bfgf .Tc {_dddc =append (_dddc ,Cell {_cgagca ._ceeae ,_cgfcc });};if _bfgf .Sdt !=nil &&_bfgf .Sdt .SdtContent !=nil {for _ ,_aege :=range _bfgf .Sdt .SdtContent .Tc {_dddc =append (_dddc ,Cell {_cgagca ._ceeae ,_aege });
};};};return _dddc ;};

// Close closes the document, removing any temporary files that might have been
// created when opening a document.
func (_fbcc *Document )Close ()error {if _fbcc .TmpPath !=""{return _de .RemoveAll (_fbcc .TmpPath );};return nil ;};

// ParagraphStyles returns only the paragraph styles.
func (_ggda Styles )ParagraphStyles ()[]Style {_effce :=[]Style {};for _ ,_gfdc :=range _ggda ._gegd .Style {if _gfdc .TypeAttr !=_eb .ST_StyleTypeParagraph {continue ;};_effce =append (_effce ,Style {_gfdc });};return _effce ;};

// StructuredDocumentTags returns the structured document tags in the document
// which are commonly used in document templates.
func (_bee *Document )StructuredDocumentTags ()[]StructuredDocumentTag {_gdfc :=[]StructuredDocumentTag {};for _ ,_aeec :=range _bee ._cbd .Body .EG_BlockLevelElts {for _ ,_dffb :=range _aeec .EG_ContentBlockContent {if _dffb .Sdt !=nil {_gdfc =append (_gdfc ,StructuredDocumentTag {_bee ,_dffb .Sdt });
};};};return _gdfc ;};

// SetStartPct sets the cell start margin
func (_ddgd CellMargins )SetStartPct (pct float64 ){_ddgd ._aag .Start =_eb .NewCT_TblWidth ();_ddaa (_ddgd ._aag .Start ,pct );};

// TableConditionalFormatting returns a conditional formatting object of a given
// type.  Calling this method repeatedly will return the same object.
func (_gceg Style )TableConditionalFormatting (typ _eb .ST_TblStyleOverrideType )TableConditionalFormatting {for _ ,_cadd :=range _gceg ._dadg .TblStylePr {if _cadd .TypeAttr ==typ {return TableConditionalFormatting {_cadd };};};_afece :=_eb .NewCT_TblStylePr ();
_afece .TypeAttr =typ ;_gceg ._dadg .TblStylePr =append (_gceg ._dadg .TblStylePr ,_afece );return TableConditionalFormatting {_afece };};

// GetColor returns the color.Color object representing the run color.
func (_ebagf ParagraphProperties )GetColor ()_dd .Color {if _efefd :=_ebagf ._fbde .RPr .Color ;_efefd !=nil {_ddedf :=_efefd .ValAttr ;if _ddedf .ST_HexColorRGB !=nil {return _dd .FromHex (*_ddedf .ST_HexColorRGB );};};return _dd .Color {};};

// SetText sets the text to be used in bullet mode.
func (_afda NumberingLevel )SetText (t string ){if t ==""{_afda ._cgbe .LvlText =nil ;}else {_afda ._cgbe .LvlText =_eb .NewCT_LevelText ();_afda ._cgbe .LvlText .ValAttr =_c .String (t );};};

// GetRightToLeft returns true if the run text is displayed from right to left.
func (_gcabd RunProperties )GetRightToLeft ()bool {return _bbea (_gcabd ._fdggb .Rtl )};

// Bookmark is a bookmarked location within a document that can be referenced
// with a hyperlink.
type Bookmark struct{_agc *_eb .CT_Bookmark };

// StructuredDocumentTag are a tagged bit of content in a document.
type StructuredDocumentTag struct{_gbdfa *Document ;_dffg *_eb .CT_SdtBlock ;};

// FontTable returns document fontTable element.
func (_cgbcf *Document )FontTable ()*_eb .Fonts {return _cgbcf ._cbf };

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_aded ParagraphStyleProperties )SetKeepOnOnePage (b bool ){if !b {_aded ._gdbb .KeepLines =nil ;}else {_aded ._gdbb .KeepLines =_eb .NewCT_OnOff ();};};

// Clear resets the numbering.
func (_eceb Numbering )Clear (){_eceb ._aedgf .AbstractNum =nil ;_eceb ._aedgf .Num =nil ;_eceb ._aedgf .NumIdMacAtCleanup =nil ;_eceb ._aedgf .NumPicBullet =nil ;};

// SetPictureWashout set washout to watermark picture.
func (_acag *WatermarkPicture )SetPictureWashout (isWashout bool ){if _acag ._befe !=nil {_faccg :=_acag ._befe .EG_ShapeElements ;if len (_faccg )> 0&&_faccg [0].Imagedata !=nil {if isWashout {_dbbad :="\u0031\u0039\u0036\u0036\u0031\u0066";_bdbdc :="\u0032\u0032\u0039\u0033\u0038\u0066";
_faccg [0].Imagedata .GainAttr =&_dbbad ;_faccg [0].Imagedata .BlacklevelAttr =&_bdbdc ;};};};};func _bgge (_abgef *_eb .CT_Tbl ,_ffgb map[string ]string ){for _ ,_adge :=range _abgef .EG_ContentRowContent {for _ ,_aaff :=range _adge .Tr {for _ ,_bbga :=range _aaff .EG_ContentCellContent {for _ ,_cddd :=range _bbga .Tc {for _ ,_bgaf :=range _cddd .EG_BlockLevelElts {for _ ,_cefa :=range _bgaf .EG_ContentBlockContent {for _ ,_dcab :=range _cefa .P {_aegb (_dcab ,_ffgb );
};for _ ,_ffgd :=range _cefa .Tbl {_bgge (_ffgd ,_ffgb );};};};};};};};};

// SetBeforeAuto controls if spacing before a paragraph is automatically determined.
func (_aefe ParagraphSpacing )SetBeforeAuto (b bool ){if b {_aefe ._adcd .BeforeAutospacingAttr =&_bg .ST_OnOff {};_aefe ._adcd .BeforeAutospacingAttr .Bool =_c .Bool (true );}else {_aefe ._adcd .BeforeAutospacingAttr =nil ;};};

// SetLeft sets the left border to a specified type, color and thickness.
func (_dacce TableBorders )SetLeft (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_dacce ._bdab .Left =_eb .NewCT_Border ();_bdba (_dacce ._bdab .Left ,t ,c ,thickness );};func _dfeb (_dbb *_eb .EG_ContentBlockContent )[]Bookmark {_bafd :=[]Bookmark {};
for _ ,_cedc :=range _dbb .P {for _ ,_gaba :=range _cedc .EG_PContent {for _ ,_bage :=range _gaba .EG_ContentRunContent {for _ ,_gbdc :=range _bage .EG_RunLevelElts {for _ ,_bcca :=range _gbdc .EG_RangeMarkupElements {if _bcca .BookmarkStart !=nil {_bafd =append (_bafd ,Bookmark {_bcca .BookmarkStart });
};};};};};};for _ ,_bcab :=range _dbb .EG_RunLevelElts {for _ ,_cebc :=range _bcab .EG_RangeMarkupElements {if _cebc .BookmarkStart !=nil {_bafd =append (_bafd ,Bookmark {_cebc .BookmarkStart });};};};for _ ,_gggca :=range _dbb .Tbl {for _ ,_cdde :=range _gggca .EG_ContentRowContent {for _ ,_gcffd :=range _cdde .Tr {for _ ,_adcb :=range _gcffd .EG_ContentCellContent {for _ ,_afae :=range _adcb .Tc {for _ ,_ddfc :=range _afae .EG_BlockLevelElts {for _ ,_beb :=range _ddfc .EG_ContentBlockContent {for _ ,_cdf :=range _dfeb (_beb ){_bafd =append (_bafd ,_cdf );
};};};};};};};};return _bafd ;};func (_bbcgb Endnote )content ()[]*_eb .EG_ContentBlockContent {var _ccee []*_eb .EG_ContentBlockContent ;for _ ,_cddeb :=range _bbcgb ._gdfb .EG_BlockLevelElts {_ccee =append (_ccee ,_cddeb .EG_ContentBlockContent ...);
};return _ccee ;};

// Section return paragraph properties section value.
func (_abcca ParagraphProperties )Section ()(Section ,bool ){if _abcca ._fbde .SectPr !=nil {return Section {_abcca ._gefda ,_abcca ._fbde .SectPr },true ;};return Section {},false ;};

// SetPageSizeAndOrientation sets the page size and orientation for a section.
func (_cbbeg Section )SetPageSizeAndOrientation (w ,h _ebf .Distance ,orientation _eb .ST_PageOrientation ){if _cbbeg ._adef .PgSz ==nil {_cbbeg ._adef .PgSz =_eb .NewCT_PageSz ();};_cbbeg ._adef .PgSz .OrientAttr =orientation ;if orientation ==_eb .ST_PageOrientationLandscape {_cbbeg ._adef .PgSz .WAttr =&_bg .ST_TwipsMeasure {};
_cbbeg ._adef .PgSz .WAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (h /_ebf .Twips ));_cbbeg ._adef .PgSz .HAttr =&_bg .ST_TwipsMeasure {};_cbbeg ._adef .PgSz .HAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (w /_ebf .Twips ));}else {_cbbeg ._adef .PgSz .WAttr =&_bg .ST_TwipsMeasure {};
_cbbeg ._adef .PgSz .WAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (w /_ebf .Twips ));_cbbeg ._adef .PgSz .HAttr =&_bg .ST_TwipsMeasure {};_cbbeg ._adef .PgSz .HAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (h /_ebf .Twips ));};};

// SetCellSpacing sets the cell spacing within a table.
func (_cedbg TableProperties )SetCellSpacing (m _ebf .Distance ){_cedbg ._ggcad .TblCellSpacing =_eb .NewCT_TblWidth ();_cedbg ._ggcad .TblCellSpacing .TypeAttr =_eb .ST_TblWidthDxa ;_cedbg ._ggcad .TblCellSpacing .WAttr =&_eb .ST_MeasurementOrPercent {};
_cedbg ._ggcad .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_cedbg ._ggcad .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (m /_ebf .Dxa ));};

// InsertRowAfter inserts a row after another row
func (_dega Table )InsertRowAfter (r Row )Row {for _fagc ,_fcfc :=range _dega ._ffceg .EG_ContentRowContent {if len (_fcfc .Tr )> 0&&r .X ()==_fcfc .Tr [0]{_babfc :=_eb .NewEG_ContentRowContent ();if len (_dega ._ffceg .EG_ContentRowContent )< _fagc +2{return _dega .AddRow ();
};_dega ._ffceg .EG_ContentRowContent =append (_dega ._ffceg .EG_ContentRowContent ,nil );copy (_dega ._ffceg .EG_ContentRowContent [_fagc +2:],_dega ._ffceg .EG_ContentRowContent [_fagc +1:]);_dega ._ffceg .EG_ContentRowContent [_fagc +1]=_babfc ;_bagf :=_eb .NewCT_Row ();
_babfc .Tr =append (_babfc .Tr ,_bagf );return Row {_dega ._dfdb ,_bagf };};};return _dega .AddRow ();};

// Rows returns the rows defined in the table.
func (_ecdcc Table )Rows ()[]Row {_bcec :=[]Row {};for _ ,_ffdgg :=range _ecdcc ._ffceg .EG_ContentRowContent {for _ ,_fceb :=range _ffdgg .Tr {_bcec =append (_bcec ,Row {_ecdcc ._dfdb ,_fceb });};if _ffdgg .Sdt !=nil &&_ffdgg .Sdt .SdtContent !=nil {for _ ,_effg :=range _ffdgg .Sdt .SdtContent .Tr {_bcec =append (_bcec ,Row {_ecdcc ._dfdb ,_effg });
};};};return _bcec ;};

// Text returns text from the document as one string separated with line breaks.
func (_eaeg *DocText )Text ()string {_faeb :=_af .NewBuffer ([]byte {});for _ ,_dgeb :=range _eaeg .Items {if _dgeb .Text !=""{_faeb .WriteString (_dgeb .Text );_faeb .WriteString ("\u000a");};};return _faeb .String ();};

// SetNumberingLevel sets the numbering level of a paragraph.  If used, then the
// NumberingDefinition must also be set via SetNumberingDefinition or
// SetNumberingDefinitionByID.
func (_bcfd Paragraph )SetNumberingLevel (listLevel int ){_bcfd .ensurePPr ();if _bcfd ._ggec .PPr .NumPr ==nil {_bcfd ._ggec .PPr .NumPr =_eb .NewCT_NumPr ();};_fccefd :=_eb .NewCT_DecimalNumber ();_fccefd .ValAttr =int64 (listLevel );_bcfd ._ggec .PPr .NumPr .Ilvl =_fccefd ;
};

// SetTargetBookmark sets the bookmark target of the hyperlink.
func (_abfa HyperLink )SetTargetBookmark (bm Bookmark ){_abfa ._fagd .AnchorAttr =_c .String (bm .Name ());_abfa ._fagd .IdAttr =nil ;};func (_egfbf Styles )initializeStyleDefaults (){_bcfcc :=_egfbf .AddStyle ("\u004e\u006f\u0072\u006d\u0061\u006c",_eb .ST_StyleTypeParagraph ,true );
_bcfcc .SetName ("\u004e\u006f\u0072\u006d\u0061\u006c");_bcfcc .SetPrimaryStyle (true );_ggdeb :=_egfbf .AddStyle ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074",_eb .ST_StyleTypeCharacter ,true );_ggdeb .SetName ("\u0044\u0065\u0066\u0061ul\u0074\u0020\u0050\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0020\u0046\u006fn\u0074");
_ggdeb .SetUISortOrder (1);_ggdeb .SetSemiHidden (true );_ggdeb .SetUnhideWhenUsed (true );_egadf :=_egfbf .AddStyle ("\u0054i\u0074\u006c\u0065\u0043\u0068\u0061r",_eb .ST_StyleTypeCharacter ,false );_egadf .SetName ("\u0054\u0069\u0074\u006c\u0065\u0020\u0043\u0068\u0061\u0072");
_egadf .SetBasedOn (_ggdeb .StyleID ());_egadf .SetLinkedStyle ("\u0054\u0069\u0074l\u0065");_egadf .SetUISortOrder (10);_egadf .RunProperties ().Fonts ().SetASCIITheme (_eb .ST_ThemeMajorAscii );_egadf .RunProperties ().Fonts ().SetEastAsiaTheme (_eb .ST_ThemeMajorEastAsia );
_egadf .RunProperties ().Fonts ().SetHANSITheme (_eb .ST_ThemeMajorHAnsi );_egadf .RunProperties ().Fonts ().SetCSTheme (_eb .ST_ThemeMajorBidi );_egadf .RunProperties ().SetSize (28*_ebf .Point );_egadf .RunProperties ().SetKerning (14*_ebf .Point );_egadf .RunProperties ().SetCharacterSpacing (-10*_ebf .Twips );
_eefd :=_egfbf .AddStyle ("\u0054\u0069\u0074l\u0065",_eb .ST_StyleTypeParagraph ,false );_eefd .SetName ("\u0054\u0069\u0074l\u0065");_eefd .SetBasedOn (_bcfcc .StyleID ());_eefd .SetNextStyle (_bcfcc .StyleID ());_eefd .SetLinkedStyle (_egadf .StyleID ());
_eefd .SetUISortOrder (10);_eefd .SetPrimaryStyle (true );_eefd .ParagraphProperties ().SetContextualSpacing (true );_eefd .RunProperties ().Fonts ().SetASCIITheme (_eb .ST_ThemeMajorAscii );_eefd .RunProperties ().Fonts ().SetEastAsiaTheme (_eb .ST_ThemeMajorEastAsia );
_eefd .RunProperties ().Fonts ().SetHANSITheme (_eb .ST_ThemeMajorHAnsi );_eefd .RunProperties ().Fonts ().SetCSTheme (_eb .ST_ThemeMajorBidi );_eefd .RunProperties ().SetSize (28*_ebf .Point );_eefd .RunProperties ().SetKerning (14*_ebf .Point );_eefd .RunProperties ().SetCharacterSpacing (-10*_ebf .Twips );
_dadaf :=_egfbf .AddStyle ("T\u0061\u0062\u006c\u0065\u004e\u006f\u0072\u006d\u0061\u006c",_eb .ST_StyleTypeTable ,false );_dadaf .SetName ("\u004e\u006f\u0072m\u0061\u006c\u0020\u0054\u0061\u0062\u006c\u0065");_dadaf .SetUISortOrder (99);_dadaf .SetSemiHidden (true );
_dadaf .SetUnhideWhenUsed (true );_dadaf .X ().TblPr =_eb .NewCT_TblPrBase ();_dcba :=NewTableWidth ();_dadaf .X ().TblPr .TblInd =_dcba .X ();_dcba .SetValue (0*_ebf .Dxa );_dadaf .X ().TblPr .TblCellMar =_eb .NewCT_TblCellMar ();_dcba =NewTableWidth ();
_dadaf .X ().TblPr .TblCellMar .Top =_dcba .X ();_dcba .SetValue (0*_ebf .Dxa );_dcba =NewTableWidth ();_dadaf .X ().TblPr .TblCellMar .Bottom =_dcba .X ();_dcba .SetValue (0*_ebf .Dxa );_dcba =NewTableWidth ();_dadaf .X ().TblPr .TblCellMar .Left =_dcba .X ();
_dcba .SetValue (108*_ebf .Dxa );_dcba =NewTableWidth ();_dadaf .X ().TblPr .TblCellMar .Right =_dcba .X ();_dcba .SetValue (108*_ebf .Dxa );_ceef :=_egfbf .AddStyle ("\u004e\u006f\u004c\u0069\u0073\u0074",_eb .ST_StyleTypeNumbering ,false );_ceef .SetName ("\u004eo\u0020\u004c\u0069\u0073\u0074");
_ceef .SetUISortOrder (1);_ceef .SetSemiHidden (true );_ceef .SetUnhideWhenUsed (true );_feee :=[]_ebf .Distance {16,13,12,11,11,11,11,11,11};_bcbb :=[]_ebf .Distance {240,40,40,40,40,40,40,40,40};for _abded :=0;_abded < 9;_abded ++{_eegdg :=_ede .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",_abded +1);
_gbgba :=_egfbf .AddStyle (_eegdg +"\u0043\u0068\u0061\u0072",_eb .ST_StyleTypeCharacter ,false );_gbgba .SetName (_ede .Sprintf ("\u0048e\u0061d\u0069\u006e\u0067\u0020\u0025\u0064\u0020\u0043\u0068\u0061\u0072",_abded +1));_gbgba .SetBasedOn (_ggdeb .StyleID ());
_gbgba .SetLinkedStyle (_eegdg );_gbgba .SetUISortOrder (9+_abded );_gbgba .RunProperties ().SetSize (_feee [_abded ]*_ebf .Point );_aebf :=_egfbf .AddStyle (_eegdg ,_eb .ST_StyleTypeParagraph ,false );_aebf .SetName (_ede .Sprintf ("\u0068\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0025\u0064",_abded +1));
_aebf .SetNextStyle (_bcfcc .StyleID ());_aebf .SetLinkedStyle (_aebf .StyleID ());_aebf .SetUISortOrder (9+_abded );_aebf .SetPrimaryStyle (true );_aebf .ParagraphProperties ().SetKeepNext (true );_aebf .ParagraphProperties ().SetSpacing (_bcbb [_abded ]*_ebf .Twips ,0);
_aebf .ParagraphProperties ().SetOutlineLevel (_abded );_aebf .RunProperties ().SetSize (_feee [_abded ]*_ebf .Point );};};

// RunProperties returns the run style properties.
func (_faed Style )RunProperties ()RunProperties {if _faed ._dadg .RPr ==nil {_faed ._dadg .RPr =_eb .NewCT_RPr ();};return RunProperties {_faed ._dadg .RPr };};

// SetAlignment set alignment of paragraph.
func (_geefa Paragraph )SetAlignment (alignment _eb .ST_Jc ){_geefa .ensurePPr ();if _geefa ._ggec .PPr .Jc ==nil {_geefa ._ggec .PPr .Jc =_eb .NewCT_Jc ();};_geefa ._ggec .PPr .Jc .ValAttr =alignment ;};func (_ffbfe FormFieldType )String ()string {if _ffbfe >=FormFieldType (len (_abe )-1){return _ede .Sprintf ("\u0046\u006f\u0072\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_ffbfe );
};return _ebfdc [_abe [_ffbfe ]:_abe [_ffbfe +1]];};

// IgnoreSpaceBetweenParagraphOfSameStyle sets contextual spacing.
func (_caaf Paragraph )IgnoreSpaceBetweenParagraphOfSameStyle (){_caaf .ensurePPr ();if _caaf ._ggec .PPr .ContextualSpacing ==nil {_caaf ._ggec .PPr .ContextualSpacing =_eb .NewCT_OnOff ();};_caaf ._ggec .PPr .ContextualSpacing .ValAttr =&_bg .ST_OnOff {ST_OnOff1 :_bg .ST_OnOff1On };
};

// MultiLevelType returns the multilevel type, or ST_MultiLevelTypeUnset if not set.
func (_ffeb NumberingDefinition )MultiLevelType ()_eb .ST_MultiLevelType {if _ffeb ._degbd .MultiLevelType !=nil {return _ffeb ._degbd .MultiLevelType .ValAttr ;}else {return _eb .ST_MultiLevelTypeUnset ;};};

// DoubleStrike returns true if paragraph is double striked.
func (_fcdfb ParagraphProperties )DoubleStrike ()bool {return _bbea (_fcdfb ._fbde .RPr .Dstrike )};

// HasEndnotes returns a bool based on the presence or abscence of endnotes within
// the document.
func (_decf *Document )HasEndnotes ()bool {return _decf ._edd !=nil };

// SetPageMargins sets the page margins for a section
func (_affff Section )SetPageMargins (top ,right ,bottom ,left ,header ,footer ,gutter _ebf .Distance ){_gdgeb :=_eb .NewCT_PageMar ();_gdgeb .TopAttr .Int64 =_c .Int64 (int64 (top /_ebf .Twips ));_gdgeb .BottomAttr .Int64 =_c .Int64 (int64 (bottom /_ebf .Twips ));
_gdgeb .RightAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (right /_ebf .Twips ));_gdgeb .LeftAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (left /_ebf .Twips ));_gdgeb .HeaderAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (header /_ebf .Twips ));
_gdgeb .FooterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (footer /_ebf .Twips ));_gdgeb .GutterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (gutter /_ebf .Twips ));_affff ._adef .PgMar =_gdgeb ;};func (_daaa Run )newIC ()*_eb .EG_RunInnerContent {_adedd :=_eb .NewEG_RunInnerContent ();
_daaa ._edbgc .EG_RunInnerContent =append (_daaa ._edbgc .EG_RunInnerContent ,_adedd );return _adedd ;};func (_ffbd Paragraph )addEndFldChar ()*_eb .CT_FldChar {_ggga :=_ffbd .addFldChar ();_ggga .FldCharTypeAttr =_eb .ST_FldCharTypeEnd ;return _ggga ;
};

// SetThemeColor sets the color from the theme.
func (_aeb Color )SetThemeColor (t _eb .ST_ThemeColor ){_aeb ._acg .ThemeColorAttr =t };func (_aabd Paragraph )addFldCharsForField (_dcbd ,_gfbf string )FormField {_bbcaf :=_aabd .addBeginFldChar (_dcbd );_dgcg :=FormField {_bbdab :_bbcaf };_gcbad :=_aabd ._ddfge .Bookmarks ();
_dgcca :=int64 (len (_gcbad ));if _dcbd !=""{_aabd .addStartBookmark (_dgcca ,_dcbd );};_aabd .addInstrText (_gfbf );_aabd .addSeparateFldChar ();if _gfbf =="\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054"{_gaaa :=_aabd .AddRun ();_bebf :=_eb .NewEG_RunInnerContent ();
_gaaa ._edbgc .EG_RunInnerContent =[]*_eb .EG_RunInnerContent {_bebf };_dgcg ._gedcf =_bebf ;};_aabd .addEndFldChar ();if _dcbd !=""{_aabd .addEndBookmark (_dgcca );};return _dgcg ;};

// AddPageBreak adds a page break to a run.
func (_cgbcfa Run )AddPageBreak (){_face :=_cgbcfa .newIC ();_face .Br =_eb .NewCT_Br ();_face .Br .TypeAttr =_eb .ST_BrTypePage ;};

// TableStyleProperties are table properties as defined in a style.
type TableStyleProperties struct{_bbdb *_eb .CT_TblPrBase };

// Shadow returns true if run shadow is on.
func (_cdec RunProperties )Shadow ()bool {return _bbea (_cdec ._fdggb .Shadow )};func (_efde Paragraph )addStartBookmark (_abec int64 ,_gcdf string )*_eb .CT_Bookmark {_gcfe :=_eb .NewEG_PContent ();_efde ._ggec .EG_PContent =append (_efde ._ggec .EG_PContent ,_gcfe );
_gbagg :=_eb .NewEG_ContentRunContent ();_cbacg :=_eb .NewEG_RunLevelElts ();_baff :=_eb .NewEG_RangeMarkupElements ();_dcge :=_eb .NewCT_Bookmark ();_dcge .NameAttr =_gcdf ;_dcge .IdAttr =_abec ;_baff .BookmarkStart =_dcge ;_gcfe .EG_ContentRunContent =append (_gcfe .EG_ContentRunContent ,_gbagg );
_gbagg .EG_RunLevelElts =append (_gbagg .EG_RunLevelElts ,_cbacg );_cbacg .EG_RangeMarkupElements =append (_cbacg .EG_RangeMarkupElements ,_baff );return _dcge ;};

// ClearColor clears the text color.
func (_fdbg RunProperties )ClearColor (){_fdbg ._fdggb .Color =nil };

// GetWrapPathLineTo return wrapPath lineTo value.
func (_gdf AnchorDrawWrapOptions )GetWrapPathLineTo ()[]*_bb .CT_Point2D {return _gdf ._fcc };

// AddFootnoteReference adds a footnote reference to a run.
func (_fgafae Run )AddFootnoteReference (){_gbfa :=_fgafae .newIC ();_gbfa .FootnoteRef =&_eb .CT_Empty {};};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_eb .CT_Tbl ;Row *_eb .CT_Row ;Cell *_eb .CT_Tc ;RowIndex int ;ColIndex int ;};func _afebd (_fcefd *_eb .CT_P ,_ggede *_eb .CT_Hyperlink ,_cgca *TableInfo ,_edff *DrawingInfo ,_ggde []*_eb .EG_ContentRunContent )[]TextItem {_fdgg :=[]TextItem {};
for _ ,_beda :=range _ggde {if _cdeg :=_beda .Sdt ;_cdeg !=nil {if _dceb :=_cdeg .SdtContent ;_dceb !=nil {_fdgg =append (_fdgg ,_afebd (_fcefd ,_ggede ,_cgca ,_edff ,_dceb .EG_ContentRunContent )...);};};if _bfdf :=_beda .R ;_bfdf !=nil {_gcab :=_af .NewBuffer ([]byte {});
for _ ,_ecgg :=range _bfdf .EG_RunInnerContent {if _ecgg .Br !=nil {_gcab .WriteString ("\u000a");};if _ecgg .Tab !=nil {_gcab .WriteString ("\u0009");};if _ecgg .T !=nil {_gcab .WriteString (_ecgg .T .Content );};if _ecgg .Pict !=nil &&len (_ecgg .Pict .Any )> 0{for _ ,_cagc :=range _ecgg .Pict .Any {if _ceed ,_cfgg :=_cagc .(*_cg .Shape );
_cfgg {for _ ,_eebb :=range _ceed .EG_ShapeElements {if _agde :=_eebb .Textbox ;_agde !=nil {if _agde .TxbxContent !=nil {_fdgg =append (_fdgg ,_edaf (_agde .TxbxContent .EG_ContentBlockContent ,nil )...);};};};};};};};_fdgg =append (_fdgg ,TextItem {Text :_gcab .String (),DrawingInfo :_edff ,Paragraph :_fcefd ,Hyperlink :_ggede ,Run :_bfdf ,TableInfo :_cgca });
for _ ,_bedd :=range _bfdf .Extra {if _cbbcc ,_cdgf :=_bedd .(*_eb .AlternateContentRun );_cdgf {_gecb :=&DrawingInfo {Drawing :_cbbcc .Choice .Drawing };for _ ,_efgf :=range _gecb .Drawing .Anchor {for _ ,_aefga :=range _efgf .Graphic .GraphicData .Any {if _gdgbb ,_dbff :=_aefga .(*_eb .WdWsp );
_dbff {if _gdgbb .WChoice !=nil {if _babfb :=_gdgbb .SpPr ;_babfb !=nil {if _fcgbd :=_babfb .Xfrm ;_fcgbd !=nil {if _bfdg :=_fcgbd .Ext ;_bfdg !=nil {_gecb .Width =_bfdg .CxAttr ;_gecb .Height =_bfdg .CyAttr ;};};};for _ ,_dbdbb :=range _gdgbb .WChoice .Txbx .TxbxContent .EG_ContentBlockContent {_fdgg =append (_fdgg ,_ecgc (_dbdbb .P ,_cgca ,_gecb )...);
};};};};};};};};};return _fdgg ;};

// SetShading controls the cell shading.
func (_baga CellProperties )SetShading (shd _eb .ST_Shd ,foreground ,fill _dd .Color ){if shd ==_eb .ST_ShdUnset {_baga ._ced .Shd =nil ;}else {_baga ._ced .Shd =_eb .NewCT_Shd ();_baga ._ced .Shd .ValAttr =shd ;_baga ._ced .Shd .ColorAttr =&_eb .ST_HexColor {};
if foreground .IsAuto (){_baga ._ced .Shd .ColorAttr .ST_HexColorAuto =_eb .ST_HexColorAutoAuto ;}else {_baga ._ced .Shd .ColorAttr .ST_HexColorRGB =foreground .AsRGBString ();};_baga ._ced .Shd .FillAttr =&_eb .ST_HexColor {};if fill .IsAuto (){_baga ._ced .Shd .FillAttr .ST_HexColorAuto =_eb .ST_HexColorAutoAuto ;
}else {_baga ._ced .Shd .FillAttr .ST_HexColorRGB =fill .AsRGBString ();};};};

// AddEndnote will create a new endnote and attach it to the Paragraph in the
// location at the end of the previous run (endnotes create their own run within
// the paragraph. The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the endnote later.
func (_acbf Paragraph )AddEndnote (text string )Endnote {var _fbfg int64 ;if _acbf ._ddfge .HasEndnotes (){for _ ,_cgcae :=range _acbf ._ddfge .Endnotes (){if _cgcae .id ()> _fbfg {_fbfg =_cgcae .id ();};};_fbfg ++;}else {_acbf ._ddfge .addEndnotes ();
_fbfg =1;};_edffb :=_eb .NewCT_FtnEdn ();_bgcf :=_eb .NewCT_FtnEdnRef ();_bgcf .IdAttr =_fbfg ;_acbf ._ddfge ._edd .CT_Endnotes .Endnote =append (_acbf ._ddfge ._edd .CT_Endnotes .Endnote ,_edffb );_effca :=_acbf .AddRun ();_cdbeg :=_effca .Properties ();
_cdbeg .SetStyle (_gge );_effca ._edbgc .EG_RunInnerContent =[]*_eb .EG_RunInnerContent {_eb .NewEG_RunInnerContent ()};_effca ._edbgc .EG_RunInnerContent [0].EndnoteReference =_bgcf ;_cdcgc :=Endnote {_acbf ._ddfge ,_edffb };_cdcgc ._gdfb .IdAttr =_fbfg ;
_cdcgc ._gdfb .EG_BlockLevelElts =[]*_eb .EG_BlockLevelElts {_eb .NewEG_BlockLevelElts ()};_edgd :=_cdcgc .AddParagraph ();_edgd .Properties ().SetStyle (EndnoteTextStyleId );_edgd ._ggec .PPr .RPr =_eb .NewCT_ParaRPr ();_eebc :=_edgd .AddRun ();_fgdg :=_eebc .Properties ();
_fgdg .SetStyle (_gge );_eebc .AddEndnoteReference ();_bceaf :=_edgd .AddRun ();_bceaf .AddText ("\u0020");_bceaf =_edgd .AddRun ();_bceaf .AddText (text );return _cdcgc ;};

// NewAnchorDrawWrapOptions return anchor drawing options property.
func NewAnchorDrawWrapOptions ()*AnchorDrawWrapOptions {_gcg :=&AnchorDrawWrapOptions {};if !_gcg ._fg {_acc ,_ea :=_fcd ();_gcg ._ddb =_acc ;_gcg ._fcc =_ea ;};return _gcg ;};

// SetLeftIndent controls the left indent of the paragraph.
func (_bbfe ParagraphStyleProperties )SetLeftIndent (m _ebf .Distance ){if _bbfe ._gdbb .Ind ==nil {_bbfe ._gdbb .Ind =_eb .NewCT_Ind ();};if m ==_ebf .Zero {_bbfe ._gdbb .Ind .LeftAttr =nil ;}else {_bbfe ._gdbb .Ind .LeftAttr =&_eb .ST_SignedTwipsMeasure {};
_bbfe ._gdbb .Ind .LeftAttr .Int64 =_c .Int64 (int64 (m /_ebf .Twips ));};};

// Emboss returns true if paragraph emboss is on.
func (_gbdce ParagraphProperties )Emboss ()bool {return _bbea (_gbdce ._fbde .RPr .Emboss )};

// Text return node and its child text,
func (_fefd *Node )Text ()string {_acba :=_af .NewBuffer ([]byte {});switch _dbge :=_fefd .X ().(type ){case *Paragraph :for _ ,_decg :=range _dbge .Runs (){if _decg .Text ()!=""{_acba .WriteString (_decg .Text ());_acba .WriteString ("\u000a");};};};for _ ,_beba :=range _fefd .Children {_acba .WriteString (_beba .Text ());
};return _acba .String ();};

// SetStyle sets the style of a paragraph.
func (_eccegb ParagraphProperties )SetStyle (s string ){if s ==""{_eccegb ._fbde .PStyle =nil ;}else {_eccegb ._fbde .PStyle =_eb .NewCT_String ();_eccegb ._fbde .PStyle .ValAttr =s ;};};func (_fag Endnote )id ()int64 {return _fag ._gdfb .IdAttr };

// X returns the inner wrapped XML type.
func (_bd Cell )X ()*_eb .CT_Tc {return _bd ._cgga };

// AddParagraph adds a paragraph to the table cell.
func (_cb Cell )AddParagraph ()Paragraph {_ee :=_eb .NewEG_BlockLevelElts ();_cb ._cgga .EG_BlockLevelElts =append (_cb ._cgga .EG_BlockLevelElts ,_ee );_abf :=_eb .NewEG_ContentBlockContent ();_ee .EG_ContentBlockContent =append (_ee .EG_ContentBlockContent ,_abf );
_eggf :=_eb .NewCT_P ();_abf .P =append (_abf .P ,_eggf );return Paragraph {_cb ._dcda ,_eggf };};

// New constructs an empty document that content can be added to.
func New ()*Document {_cdc :=&Document {_cbd :_eb .NewDocument ()};_cdc .ContentTypes =_aee .NewContentTypes ();_cdc ._cbd .Body =_eb .NewCT_Body ();_cdc ._cbd .ConformanceAttr =_bg .ST_ConformanceClassTransitional ;_cdc ._ada =_aee .NewRelationships ();
_cdc ._dga =_aee .NewRelationships ();_cdc .AppProperties =_aee .NewAppProperties ();_cdc .CoreProperties =_aee .NewCoreProperties ();_cdc .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0064\u006f\u0063u\u006d\u0065n\u0074\u002e\u0078\u006d\u006c","\u0061p\u0070\u006c\u0069c\u0061\u0074\u0069o\u006e/v\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072dp\u0072o\u0063\u0065\u0073\u0073\u0069\u006eg\u006d\u006c\u002e\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u002e\u006d\u0061\u0069\u006e\u002bx\u006d\u006c");
_cdc .Settings =NewSettings ();_cdc ._ada .AddRelationship ("\u0073\u0065\u0074t\u0069\u006e\u0067\u0073\u002e\u0078\u006d\u006c",_c .SettingsType );_cdc .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0073\u0065\u0074t\u0069\u006eg\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002b\u0078\u006d\u006c");
_cdc .Rels =_aee .NewRelationships ();_cdc .Rels .AddRelationship (_c .RelativeFilename (_c .DocTypeDocument ,"",_c .CorePropertiesType ,0),_c .CorePropertiesType );_cdc .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c",_c .ExtendedPropertiesType );
_cdc .Rels .AddRelationship ("\u0077\u006f\u0072\u0064\u002f\u0064\u006f\u0063\u0075\u006d\u0065\u006et\u002e\u0078\u006d\u006c",_c .OfficeDocumentType );_cdc .Numbering =NewNumbering ();_cdc .Numbering .InitializeDefault ();_cdc .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u006e\u0075\u006d\u0062e\u0072\u0069\u006e\u0067\u002b\u0078m\u006c");
_cdc ._ada .AddRelationship ("\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c",_c .NumberingType );_cdc .Styles =NewStyles ();_cdc .Styles .InitializeDefault ();_cdc .ContentTypes .AddOverride ("\u002f\u0077o\u0072\u0064\u002fs\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0073\u0074\u0079\u006ce\u0073\u002b\u0078\u006d\u006c");
_cdc ._ada .AddRelationship ("\u0073\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c",_c .StylesType );_cdc ._cbd .Body =_eb .NewCT_Body ();return _cdc ;};

// GetEffect returns the effect of the run.
func (_egfff RunProperties )GetEffect ()_eb .ST_TextEffect {if _egfff ._fdggb .Effect ==nil {return _eb .ST_TextEffectUnset ;};return _egfff ._fdggb .Effect .ValAttr ;};

// X returns the inner wrapped XML type.
func (_cbaa Footer )X ()*_eb .Ftr {return _cbaa ._cece };

// Outline returns true if paragraph outline is on.
func (_adgeb ParagraphProperties )Outline ()bool {return _bbea (_adgeb ._fbde .RPr .Outline )};

// GetTargetByRelId returns a target path with the associated relation ID in the
// document.
func (_adaf *Document )GetTargetByRelId (idAttr string )string {return _adaf ._ada .GetTargetByRelId (idAttr );};

// SetWidthPercent sets the cell to a width percentage.
func (_gbgd CellProperties )SetWidthPercent (pct float64 ){_gbgd ._ced .TcW =_eb .NewCT_TblWidth ();_gbgd ._ced .TcW .TypeAttr =_eb .ST_TblWidthPct ;_gbgd ._ced .TcW .WAttr =&_eb .ST_MeasurementOrPercent {};_gbgd ._ced .TcW .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};
_gbgd ._ced .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (pct *50));};

// ComplexSizeValue returns the value of paragraph font size for complex fonts in points.
func (_ggbb ParagraphProperties )ComplexSizeValue ()float64 {if _gfcd :=_ggbb ._fbde .RPr .SzCs ;_gfcd !=nil {_ebfba :=_gfcd .ValAttr ;if _ebfba .ST_UnsignedDecimalNumber !=nil {return float64 (*_ebfba .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetColumnSpan sets the number of Grid Columns Spanned by the Cell.  This is used
// to give the appearance of merged cells.
func (_afee CellProperties )SetColumnSpan (cols int ){if cols ==0{_afee ._ced .GridSpan =nil ;}else {_afee ._ced .GridSpan =_eb .NewCT_DecimalNumber ();_afee ._ced .GridSpan .ValAttr =int64 (cols );};};

// SetContextualSpacing controls whether to Ignore Spacing Above and Below When
// Using Identical Styles
func (_gcbbe ParagraphStyleProperties )SetContextualSpacing (b bool ){if !b {_gcbbe ._gdbb .ContextualSpacing =nil ;}else {_gcbbe ._gdbb .ContextualSpacing =_eb .NewCT_OnOff ();};};

// SetImprint sets the run to imprinted text.
func (_bgfg RunProperties )SetImprint (b bool ){if !b {_bgfg ._fdggb .Imprint =nil ;}else {_bgfg ._fdggb .Imprint =_eb .NewCT_OnOff ();};};

// Emboss returns true if run emboss is on.
func (_adff RunProperties )Emboss ()bool {return _bbea (_adff ._fdggb .Emboss )};var (FootnoteTextStyleId ="\u0046\u006f\u006ft\u006e\u006f\u0074\u0065\u0054\u0065\u0078\u0074";_bfb ="\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0052\u0065\u0066\u0065r\u0065\u006e\u0063\u0065";
EndnoteTextStyleId ="E\u006e\u0064\u006e\u006f\u0074\u0065\u0054\u0065\u0078\u0074";_gge ="\u0045\u006ed\u006e\u006f\u0074e\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065";_cgcf =uint64 (20););

// SetWidth sets the table with to a specified width.
func (_fdgc TableProperties )SetWidth (d _ebf .Distance ){_fdgc ._ggcad .TblW =_eb .NewCT_TblWidth ();_fdgc ._ggcad .TblW .TypeAttr =_eb .ST_TblWidthDxa ;_fdgc ._ggcad .TblW .WAttr =&_eb .ST_MeasurementOrPercent {};_fdgc ._ggcad .TblW .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};
_fdgc ._ggcad .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (d /_ebf .Twips ));};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_fcdad RunProperties )ComplexSizeMeasure ()string {if _cffe :=_fcdad ._fdggb .SzCs ;_cffe !=nil {_gfecb :=_cffe .ValAttr ;if _gfecb .ST_PositiveUniversalMeasure !=nil {return *_gfecb .ST_PositiveUniversalMeasure ;};};return "";};

// Strike returns true if run is striked.
func (_cgfe RunProperties )Strike ()bool {return _bbea (_cgfe ._fdggb .Strike )};

// X returns the inner wrapped XML type.
func (_aagef Endnote )X ()*_eb .CT_FtnEdn {return _aagef ._gdfb };

// Pict returns the pict object.
func (_afgcf *WatermarkPicture )Pict ()*_eb .CT_Picture {return _afgcf ._debae };

// Runs returns all of the runs in a paragraph.
func (_fgacfc Paragraph )Runs ()[]Run {_eegbb :=[]Run {};for _ ,_dgced :=range _fgacfc ._ggec .EG_PContent {if _dgced .Hyperlink !=nil &&_dgced .Hyperlink .EG_ContentRunContent !=nil {for _ ,_fdggg :=range _dgced .Hyperlink .EG_ContentRunContent {if _fdggg .R !=nil {_eegbb =append (_eegbb ,Run {_fgacfc ._ddfge ,_fdggg .R });
};};};for _ ,_acggb :=range _dgced .EG_ContentRunContent {if _acggb .R !=nil {_eegbb =append (_eegbb ,Run {_fgacfc ._ddfge ,_acggb .R });};if _acggb .Sdt !=nil &&_acggb .Sdt .SdtContent !=nil {for _ ,_eefg :=range _acggb .Sdt .SdtContent .EG_ContentRunContent {if _eefg .R !=nil {_eegbb =append (_eegbb ,Run {_fgacfc ._ddfge ,_eefg .R });
};};};};};return _eegbb ;};

// Numbering is the document wide numbering styles contained in numbering.xml.
type Numbering struct{_aedgf *_eb .Numbering };

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_bbcgbc Paragraph )SetLineSpacing (d _ebf .Distance ,rule _eb .ST_LineSpacingRule ){_bbcgbc .ensurePPr ();if _bbcgbc ._ggec .PPr .Spacing ==nil {_bbcgbc ._ggec .PPr .Spacing =_eb .NewCT_Spacing ();};_gcgb :=_bbcgbc ._ggec .PPr .Spacing ;if rule ==_eb .ST_LineSpacingRuleUnset {_gcgb .LineRuleAttr =_eb .ST_LineSpacingRuleUnset ;
_gcgb .LineAttr =nil ;}else {_gcgb .LineRuleAttr =rule ;_gcgb .LineAttr =&_eb .ST_SignedTwipsMeasure {};_gcgb .LineAttr .Int64 =_c .Int64 (int64 (d /_ebf .Twips ));};};

// GetShapeStyle returns string style of the shape in watermark and format it to ShapeStyle.
func (_fagge *WatermarkPicture )GetShapeStyle ()_ad .ShapeStyle {if _fagge ._befe !=nil &&_fagge ._befe .StyleAttr !=nil {return _ad .NewShapeStyle (*_fagge ._befe .StyleAttr );};return _ad .NewShapeStyle ("");};

// AddParagraph adds a paragraph to the endnote.
func (_cbge Endnote )AddParagraph ()Paragraph {_ffde :=_eb .NewEG_ContentBlockContent ();_edga :=len (_cbge ._gdfb .EG_BlockLevelElts [0].EG_ContentBlockContent );_cbge ._gdfb .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_cbge ._gdfb .EG_BlockLevelElts [0].EG_ContentBlockContent ,_ffde );
_fcede :=_eb .NewCT_P ();var _gefd *_eb .CT_String ;if _edga !=0{_bgfbd :=len (_cbge ._gdfb .EG_BlockLevelElts [0].EG_ContentBlockContent [_edga -1].P );_gefd =_cbge ._gdfb .EG_BlockLevelElts [0].EG_ContentBlockContent [_edga -1].P [_bgfbd -1].PPr .PStyle ;
}else {_gefd =_eb .NewCT_String ();_gefd .ValAttr ="\u0045n\u0064\u006e\u006f\u0074\u0065";};_ffde .P =append (_ffde .P ,_fcede );_afbe :=Paragraph {_cbge ._bfgc ,_fcede };_afbe ._ggec .PPr =_eb .NewCT_PPr ();_afbe ._ggec .PPr .PStyle =_gefd ;_afbe ._ggec .PPr .RPr =_eb .NewCT_ParaRPr ();
return _afbe ;};

// SetAll sets all of the borders to a given value.
func (_ff CellBorders )SetAll (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_ff .SetBottom (t ,c ,thickness );_ff .SetLeft (t ,c ,thickness );_ff .SetRight (t ,c ,thickness );_ff .SetTop (t ,c ,thickness );_ff .SetInsideHorizontal (t ,c ,thickness );
_ff .SetInsideVertical (t ,c ,thickness );};

// StyleID returns the style ID.
func (_fccgg Style )StyleID ()string {if _fccgg ._dadg .StyleIdAttr ==nil {return "";};return *_fccgg ._dadg .StyleIdAttr ;};func (_febbf *WatermarkText )findNode (_fdfg *_c .XSDAny ,_fcage string )*_c .XSDAny {for _ ,_cefbb :=range _fdfg .Nodes {if _cefbb .XMLName .Local ==_fcage {return _cefbb ;
};};return nil ;};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_gbcgg ParagraphProperties )ComplexSizeMeasure ()string {if _fgcf :=_gbcgg ._fbde .RPr .SzCs ;_fgcf !=nil {_edfd :=_fgcf .ValAttr ;if _edfd .ST_PositiveUniversalMeasure !=nil {return *_edfd .ST_PositiveUniversalMeasure ;};};return "";};

// AddRow adds a row to a table.
func (_cefec Table )AddRow ()Row {_ebdae :=_eb .NewEG_ContentRowContent ();_cefec ._ffceg .EG_ContentRowContent =append (_cefec ._ffceg .EG_ContentRowContent ,_ebdae );_cafg :=_eb .NewCT_Row ();_ebdae .Tr =append (_ebdae .Tr ,_cafg );return Row {_cefec ._dfdb ,_cafg };
};

// RemoveParagraph removes a paragraph from a document.
func (_ebbc *Document )RemoveParagraph (p Paragraph ){if _ebbc ._cbd .Body ==nil {return ;};for _ ,_agcg :=range _ebbc ._cbd .Body .EG_BlockLevelElts {for _ ,_efga :=range _agcg .EG_ContentBlockContent {for _bcc ,_dfe :=range _efga .P {if _dfe ==p ._ggec {copy (_efga .P [_bcc :],_efga .P [_bcc +1:]);
_efga .P =_efga .P [0:len (_efga .P )-1];return ;};};if _efga .Sdt !=nil &&_efga .Sdt .SdtContent !=nil &&_efga .Sdt .SdtContent .P !=nil {for _bbc ,_bggc :=range _efga .Sdt .SdtContent .P {if _bggc ==p ._ggec {copy (_efga .P [_bbc :],_efga .P [_bbc +1:]);
_efga .P =_efga .P [0:len (_efga .P )-1];return ;};};};};};for _ ,_cbea :=range _ebbc .Tables (){for _ ,_ecbe :=range _cbea .Rows (){for _ ,_fbff :=range _ecbe .Cells (){for _ ,_agea :=range _fbff ._cgga .EG_BlockLevelElts {for _ ,_geea :=range _agea .EG_ContentBlockContent {for _ece ,_aaa :=range _geea .P {if _aaa ==p ._ggec {copy (_geea .P [_ece :],_geea .P [_ece +1:]);
_geea .P =_geea .P [0:len (_geea .P )-1];return ;};};};};};};};for _ ,_dabe :=range _ebbc .Headers (){_dabe .RemoveParagraph (p );};for _ ,_gedd :=range _ebbc .Footers (){_gedd .RemoveParagraph (p );};};func (_cab *chart )X ()*_fd .ChartSpace {return _cab ._aeed };


// SetFirstRow controls the conditional formatting for the first row in a table.
func (_dfeg TableLook )SetFirstRow (on bool ){if !on {_dfeg ._bcdcb .FirstRowAttr =&_bg .ST_OnOff {};_dfeg ._bcdcb .FirstRowAttr .ST_OnOff1 =_bg .ST_OnOff1Off ;}else {_dfeg ._bcdcb .FirstRowAttr =&_bg .ST_OnOff {};_dfeg ._bcdcb .FirstRowAttr .ST_OnOff1 =_bg .ST_OnOff1On ;
};};

// TableConditionalFormatting controls the conditional formatting within a table
// style.
type TableConditionalFormatting struct{_eadcf *_eb .CT_TblStylePr };

// AddParagraph adds a paragraph to the footer.
func (_ccda Footer )AddParagraph ()Paragraph {_eecfb :=_eb .NewEG_ContentBlockContent ();_ccda ._cece .EG_ContentBlockContent =append (_ccda ._cece .EG_ContentBlockContent ,_eecfb );_cagf :=_eb .NewCT_P ();_eecfb .P =append (_eecfb .P ,_cagf );return Paragraph {_ccda ._gfag ,_cagf };
};

// Footer is a footer for a document section.
type Footer struct{_gfag *Document ;_cece *_eb .Ftr ;};

// Nodes return the document's element as nodes.
func (_cfgbd *Document )Nodes ()Nodes {_dgde :=[]Node {};for _ ,_efbf :=range _cfgbd ._cbd .Body .EG_BlockLevelElts {_dgde =append (_dgde ,_dae (_cfgbd ,_efbf .EG_ContentBlockContent ,nil )...);};if _cfgbd ._cbd .Body .SectPr !=nil {_dgde =append (_dgde ,Node {_beea :_cfgbd ._cbd .Body .SectPr });
};_cdcg :=Nodes {_afgbd :_dgde };return _cdcg ;};

// OpenTemplate opens a document, removing all content so it can be used as a
// template.  Since Word removes unused styles from a document upon save, to
// create a template in Word add a paragraph with every style of interest.  When
// opened with OpenTemplate the document's styles will be available but the
// content will be gone.
func OpenTemplate (filename string )(*Document ,error ){_ebac ,_cbac :=Open (filename );if _cbac !=nil {return nil ,_cbac ;};_ebac ._cbd .Body =_eb .NewCT_Body ();return _ebac ,nil ;};

// X returns the inner wrapped XML type.
func (_dfec NumberingLevel )X ()*_eb .CT_Lvl {return _dfec ._cgbe };func _bbbc ()*_cg .OfcLock {_eaafa :=_cg .NewOfcLock ();_eaafa .ExtAttr =_cg .ST_ExtEdit ;_eaafa .AspectratioAttr =_bg .ST_TrueFalseTrue ;return _eaafa ;};func (_affb *Document )reorderEndnote (){_ddea :=int64 (1);
_ccde :=map[int64 ]int64 {};for _ ,_aacb :=range _affb ._edd .Endnote {switch _aacb .TypeAttr {case _eb .ST_FtnEdnSeparator :_aacb .IdAttr =-1;break ;case _eb .ST_FtnEdnContinuationSeparator :_aacb .IdAttr =0;break ;default:_ccde [_aacb .IdAttr ]=_ddea ;
_aacb .IdAttr =_ddea ;_ddea ++;};};for _ ,_cgge :=range _affb .Paragraphs (){for _ ,_gbgbc :=range _cgge .Runs (){if _baec ,_eebd :=_gbgbc .IsEndnote ();_baec {_gbgbc .X ().EG_RunInnerContent [0].EndnoteReference .IdAttr =_ccde [_eebd ];};};};};

// Clear clears all content within a footer
func (_ebfa Footer )Clear (){_ebfa ._cece .EG_ContentBlockContent =nil };

// AddImageRef add ImageRef to header as relationship, returning ImageRef
// that can be used to be placed as header content.
func (_cbaf Header )AddImageRef (r _aee .ImageRef )(_aee .ImageRef ,error ){var _gcad _aee .Relationships ;for _ebcb ,_dacd :=range _cbaf ._dcdf ._abg {if _dacd ==_cbaf ._ccaed {_gcad =_cbaf ._dcdf ._cgcc [_ebcb ];};};_ccgd :=_gcad .AddRelationship (r .Target (),_c .ImageType );
r .SetRelID (_ccgd .X ().IdAttr );return r ,nil ;};

// IsChecked returns true if a FormFieldTypeCheckBox is checked.
func (_ceac FormField )IsChecked ()bool {if _ceac ._bbdab .CheckBox ==nil {return false ;};if _ceac ._bbdab .CheckBox .Checked !=nil {return true ;};return false ;};

// SetUnderline controls underline for a run style.
func (_gfgbg RunProperties )SetUnderline (style _eb .ST_Underline ,c _dd .Color ){if style ==_eb .ST_UnderlineUnset {_gfgbg ._fdggb .U =nil ;}else {_gfgbg ._fdggb .U =_eb .NewCT_Underline ();_gfgbg ._fdggb .U .ColorAttr =&_eb .ST_HexColor {};_gfgbg ._fdggb .U .ColorAttr .ST_HexColorRGB =c .AsRGBString ();
_gfgbg ._fdggb .U .ValAttr =style ;};};

// AddWatermarkText adds new watermark text to the document.
func (_acgd *Document )AddWatermarkText (text string )WatermarkText {var _dfbe []Header ;if _ccfa ,_bbda :=_acgd .BodySection ().GetHeader (_eb .ST_HdrFtrDefault );_bbda {_dfbe =append (_dfbe ,_ccfa );};if _ggb ,_agad :=_acgd .BodySection ().GetHeader (_eb .ST_HdrFtrEven );
_agad {_dfbe =append (_dfbe ,_ggb );};if _fede ,_ddbc :=_acgd .BodySection ().GetHeader (_eb .ST_HdrFtrFirst );_ddbc {_dfbe =append (_dfbe ,_fede );};if len (_dfbe )< 1{_cgbc :=_acgd .AddHeader ();_acgd .BodySection ().SetHeader (_cgbc ,_eb .ST_HdrFtrDefault );
_dfbe =append (_dfbe ,_cgbc );};_cdca :=NewWatermarkText ();for _ ,_gggg :=range _dfbe {_ace :=_gggg .Paragraphs ();if len (_ace )< 1{_cddc :=_gggg .AddParagraph ();_cddc .AddRun ().AddText ("");};for _ ,_bddb :=range _gggg .X ().EG_ContentBlockContent {for _ ,_egad :=range _bddb .P {for _ ,_gdd :=range _egad .EG_PContent {for _ ,_ceeg :=range _gdd .EG_ContentRunContent {if _ceeg .R ==nil {continue ;
};for _ ,_aage :=range _ceeg .R .EG_RunInnerContent {_aage .Pict =_cdca ._ggfc ;break ;};};};};};};_cdca .SetText (text );return _cdca ;};

// HyperLink is a link within a document.
type HyperLink struct{_gcfd *Document ;_fagd *_eb .CT_Hyperlink ;};

// X returns the inner wrapped XML type.
func (_dbbgg ParagraphStyleProperties )X ()*_eb .CT_PPrGeneral {return _dbbgg ._gdbb };

// Headers returns the headers defined in the document.
func (_eef *Document )Headers ()[]Header {_age :=[]Header {};for _ ,_gdc :=range _eef ._abg {_age =append (_age ,Header {_eef ,_gdc });};return _age ;};

// SetOutlineLevel sets the outline level of this style.
func (_gcfb ParagraphStyleProperties )SetOutlineLevel (lvl int ){_gcfb ._gdbb .OutlineLvl =_eb .NewCT_DecimalNumber ();_gcfb ._gdbb .OutlineLvl .ValAttr =int64 (lvl );};func _ggc (_cbgf *_eb .CT_Tbl ,_eag *_eb .CT_P ,_dab bool )*_eb .CT_Tbl {for _ ,_ccb :=range _cbgf .EG_ContentRowContent {for _ ,_cea :=range _ccb .Tr {for _ ,_fgg :=range _cea .EG_ContentCellContent {for _ ,_cagd :=range _fgg .Tc {for _cafc ,_ebd :=range _cagd .EG_BlockLevelElts {for _ ,_eaa :=range _ebd .EG_ContentBlockContent {for _efac ,_agdf :=range _eaa .P {if _agdf ==_eag {_fccc :=_eb .NewEG_BlockLevelElts ();
_ded :=_eb .NewEG_ContentBlockContent ();_fccc .EG_ContentBlockContent =append (_fccc .EG_ContentBlockContent ,_ded );_cbfa :=_eb .NewCT_Tbl ();_ded .Tbl =append (_ded .Tbl ,_cbfa );_cagd .EG_BlockLevelElts =append (_cagd .EG_BlockLevelElts ,nil );if _dab {copy (_cagd .EG_BlockLevelElts [_cafc +1:],_cagd .EG_BlockLevelElts [_cafc :]);
_cagd .EG_BlockLevelElts [_cafc ]=_fccc ;if _efac !=0{_fgc :=_eb .NewEG_BlockLevelElts ();_ecb :=_eb .NewEG_ContentBlockContent ();_fgc .EG_ContentBlockContent =append (_fgc .EG_ContentBlockContent ,_ecb );_ecb .P =_eaa .P [:_efac ];_cagd .EG_BlockLevelElts =append (_cagd .EG_BlockLevelElts ,nil );
copy (_cagd .EG_BlockLevelElts [_cafc +1:],_cagd .EG_BlockLevelElts [_cafc :]);_cagd .EG_BlockLevelElts [_cafc ]=_fgc ;};_eaa .P =_eaa .P [_efac :];}else {copy (_cagd .EG_BlockLevelElts [_cafc +2:],_cagd .EG_BlockLevelElts [_cafc +1:]);_cagd .EG_BlockLevelElts [_cafc +1]=_fccc ;
if _efac !=len (_eaa .P )-1{_bab :=_eb .NewEG_BlockLevelElts ();_cfeb :=_eb .NewEG_ContentBlockContent ();_bab .EG_ContentBlockContent =append (_bab .EG_ContentBlockContent ,_cfeb );_cfeb .P =_eaa .P [_efac +1:];_cagd .EG_BlockLevelElts =append (_cagd .EG_BlockLevelElts ,nil );
copy (_cagd .EG_BlockLevelElts [_cafc +3:],_cagd .EG_BlockLevelElts [_cafc +2:]);_cagd .EG_BlockLevelElts [_cafc +2]=_bab ;}else {_fge :=_eb .NewEG_BlockLevelElts ();_bfee :=_eb .NewEG_ContentBlockContent ();_fge .EG_ContentBlockContent =append (_fge .EG_ContentBlockContent ,_bfee );
_bfee .P =[]*_eb .CT_P {_eb .NewCT_P ()};_cagd .EG_BlockLevelElts =append (_cagd .EG_BlockLevelElts ,nil );copy (_cagd .EG_BlockLevelElts [_cafc +3:],_cagd .EG_BlockLevelElts [_cafc +2:]);_cagd .EG_BlockLevelElts [_cafc +2]=_fge ;};_eaa .P =_eaa .P [:_efac +1];
};return _cbfa ;};};for _ ,_gaf :=range _eaa .Tbl {_dgc :=_ggc (_gaf ,_eag ,_dab );if _dgc !=nil {return _dgc ;};};};};};};};};return nil ;};

// AddField adds a field (automatically computed text) to the document.
func (_bagg Run )AddField (code string ){_bagg .AddFieldWithFormatting (code ,"",true )};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_adg CellBorders )SetBottom (t _eb .ST_Border ,c _dd .Color ,thickness _ebf .Distance ){_adg ._df .Bottom =_eb .NewCT_Border ();_bdba (_adg ._df .Bottom ,t ,c ,thickness );};func (_ebdbf *Document )addFootnotes (){_ebdbf ._fbc =_eb .NewFootnotes ();
_ebdbf ._fbc .CT_Footnotes =_eb .CT_Footnotes {};_ebdbf ._fbc .Footnote =make ([]*_eb .CT_FtnEdn ,0);_ebdbf .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074n\u006f\u0074\u0065\u0073\u002b\u0078m\u006c");
_ebdbf ._ada .AddRelationship ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0073\u002e\u0078\u006d\u006c",_c .FootNotesType );_fcceg :=_ebdbf .Styles .AddStyle (FootnoteTextStyleId ,_eb .ST_StyleTypeParagraph ,false );_fcceg .SetName ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0020\u0054\u0065\u0078\u0074");
_fcceg .SetBasedOn ("\u004e\u006f\u0072\u006d\u0061\u006c");_gdge :=_fcceg .ParagraphProperties ();_gdge .X ().SuppressLineNumbers =&_eb .CT_OnOff {};_bbcg :=_fcceg .RunProperties ();_bbcg .X ().Sz =&_eb .CT_HpsMeasure {ValAttr :_eb .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_cgcf }};
_bbcg .X ().SzCs =&_eb .CT_HpsMeasure {ValAttr :_eb .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_cgcf }};_fadc :=_ebdbf .Styles .AddStyle (_bfb ,_eb .ST_StyleTypeCharacter ,false );_fadc .SetName ("\u0046o\u006ft\u006e\u006f\u0074\u0065\u0020R\u0065\u0066e\u0072\u0065\u006e\u0063\u0065");
_dfbg :=_fadc .RunProperties ();_dfbg .X ().VertAlign =&_eb .CT_VerticalAlignRun {ValAttr :_bg .ST_VerticalAlignRunSuperscript };_ebdbf .addFootnoteSeparator ();};

// CellProperties are a table cells properties within a document.
type CellProperties struct{_ced *_eb .CT_TcPr };

// GetStyle returns string style of the text in watermark and format it to TextpathStyle.
func (_gccaa *WatermarkText )GetStyle ()_ad .TextpathStyle {_babg :=_gccaa .getShape ();if _gccaa ._caafd !=nil {_feddd :=_gccaa ._caafd .EG_ShapeElements ;if len (_feddd )> 0&&_feddd [0].Textpath !=nil {return _ad .NewTextpathStyle (*_feddd [0].Textpath .StyleAttr );
};}else {_bdcee :=_gccaa .findNode (_babg ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _ ,_dabdb :=range _bdcee .Attrs {if _dabdb .Name .Local =="\u0073\u0074\u0079l\u0065"{return _ad .NewTextpathStyle (_dabdb .Value );};};};return _ad .NewTextpathStyle ("");
};

// SetHangingIndent controls the hanging indent of the paragraph.
func (_deaa ParagraphStyleProperties )SetHangingIndent (m _ebf .Distance ){if _deaa ._gdbb .Ind ==nil {_deaa ._gdbb .Ind =_eb .NewCT_Ind ();};if m ==_ebf .Zero {_deaa ._gdbb .Ind .HangingAttr =nil ;}else {_deaa ._gdbb .Ind .HangingAttr =&_bg .ST_TwipsMeasure {};
_deaa ._gdbb .Ind .HangingAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_ebf .Twips ));};};

// Bold returns true if paragraph font is bold.
func (_cbged ParagraphProperties )Bold ()bool {_egdbf :=_cbged ._fbde .RPr ;return _bbea (_egdbf .B )||_bbea (_egdbf .BCs );};

// RemoveEndnote removes a endnote from both the paragraph and the document
// the requested endnote must be anchored on the paragraph being referenced.
//
// After each removal, the rest of the endnote ids would be reordered.
func (_abgee Paragraph )RemoveEndnote (id int64 ){for _ ,_bfegde :=range _abgee .Runs (){if _gccd ,_gbgg :=_bfegde .IsEndnote ();_gccd {if _gbgg ==id {_abgee .RemoveRun (_bfegde );break ;};};};_abgee ._ddfge .removeEndnote (id );};

// SetColumnBandSize sets the number of Columns in the column band
func (_ccdae TableStyleProperties )SetColumnBandSize (cols int64 ){_ccdae ._bbdb .TblStyleColBandSize =_eb .NewCT_DecimalNumber ();_ccdae ._bbdb .TblStyleColBandSize .ValAttr =cols ;};

// SetText sets the watermark text.
func (_bdbf *WatermarkText )SetText (text string ){_fcfcb :=_bdbf .getShape ();if _bdbf ._caafd !=nil {_cgcg :=_bdbf ._caafd .EG_ShapeElements ;if len (_cgcg )> 0&&_cgcg [0].Textpath !=nil {_cgcg [0].Textpath .StringAttr =&text ;};}else {_afdfc :=_bdbf .findNode (_fcfcb ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");
for _cceed ,_bedg :=range _afdfc .Attrs {if _bedg .Name .Local =="\u0073\u0074\u0072\u0069\u006e\u0067"{_afdfc .Attrs [_cceed ].Value =text ;};};};};

// SetShapeStyle sets style to the element v:shape in watermark.
func (_gdbaf *WatermarkPicture )SetShapeStyle (shapeStyle _ad .ShapeStyle ){if _gdbaf ._befe !=nil {_ddgf :=shapeStyle .String ();_gdbaf ._befe .StyleAttr =&_ddgf ;};};func (_ebde *WatermarkPicture )getShape ()*_c .XSDAny {return _ebde .getInnerElement ("\u0073\u0068\u0061p\u0065");
};

// SetAfterAuto controls if spacing after a paragraph is automatically determined.
func (_accag ParagraphSpacing )SetAfterAuto (b bool ){if b {_accag ._adcd .AfterAutospacingAttr =&_bg .ST_OnOff {};_accag ._adcd .AfterAutospacingAttr .Bool =_c .Bool (true );}else {_accag ._adcd .AfterAutospacingAttr =nil ;};};func (_fba *Document )validateTableCells ()error {for _ ,_ebfd :=range _fba ._cbd .Body .EG_BlockLevelElts {for _ ,_fbac :=range _ebfd .EG_ContentBlockContent {for _ ,_eebdc :=range _fbac .Tbl {for _ ,_baag :=range _eebdc .EG_ContentRowContent {for _ ,_fgaf :=range _baag .Tr {_aadf :=false ;
for _ ,_gfgb :=range _fgaf .EG_ContentCellContent {_cdd :=false ;for _ ,_bac :=range _gfgb .Tc {_aadf =true ;for _ ,_ege :=range _bac .EG_BlockLevelElts {for _ ,_adadb :=range _ege .EG_ContentBlockContent {if len (_adadb .P )> 0{_cdd =true ;break ;};};
};};if !_cdd {return _da .New ("t\u0061\u0062\u006c\u0065\u0020\u0063e\u006c\u006c\u0020\u006d\u0075\u0073t\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0061\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061p\u0068");};};if !_aadf {return _da .New ("\u0074\u0061b\u006c\u0065\u0020\u0072\u006f\u0077\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020ce\u006c\u006c");
};};};};};};return nil ;};

// GetImage returns the ImageRef associated with an InlineDrawing.
func (_eggeb InlineDrawing )GetImage ()(_aee .ImageRef ,bool ){_fddd :=_eggeb ._gbbc .Graphic .GraphicData .Any ;if len (_fddd )> 0{_bbabe ,_badfa :=_fddd [0].(*_fe .Pic );if _badfa {if _bbabe .BlipFill !=nil &&_bbabe .BlipFill .Blip !=nil &&_bbabe .BlipFill .Blip .EmbedAttr !=nil {return _eggeb ._faeg .GetImageByRelID (*_bbabe .BlipFill .Blip .EmbedAttr );
};};};return _aee .ImageRef {},false ;};func _eaff (_eegd *Document ,_abaga Paragraph )listItemInfo {if _eegd .Numbering .X ()==nil {return listItemInfo {};};if len (_eegd .Numbering .Definitions ())< 1{return listItemInfo {};};_adbdb :=_bcgg (_abaga );
if _adbdb ==nil {return listItemInfo {};};_cacc :=_eegd .GetNumberingLevelByIds (_adbdb .NumId .ValAttr ,_adbdb .Ilvl .ValAttr );if _fafd :=_cacc .X ();_fafd ==nil {return listItemInfo {};};_edbc :=int64 (0);for _ ,_gaadb :=range _eegd .Numbering ._aedgf .Num {if _gaadb !=nil &&_gaadb .NumIdAttr ==_adbdb .NumId .ValAttr {_edbc =_gaadb .AbstractNumId .ValAttr ;
};};return listItemInfo {FromParagraph :&_abaga ,AbstractNumId :&_edbc ,NumberingLevel :&_cacc };};func _dae (_ccggc *Document ,_adbb []*_eb .EG_ContentBlockContent ,_daef *TableInfo )[]Node {_aaafg :=[]Node {};for _ ,_eacge :=range _adbb {if _dbdd :=_eacge .Sdt ;
_dbdd !=nil {if _dege :=_dbdd .SdtContent ;_dege !=nil {_aaafg =append (_aaafg ,_deaec (_ccggc ,_dege .P ,_daef ,nil )...);};};_aaafg =append (_aaafg ,_deaec (_ccggc ,_eacge .P ,_daef ,nil )...);for _ ,_bceag :=range _eacge .Tbl {_bcaf :=Table {_ccggc ,_bceag };
_fbgb ,_ :=_ccggc .Styles .SearchStyleById (_bcaf .Style ());_bada :=[]Node {};for _abddf ,_facaf :=range _bceag .EG_ContentRowContent {for _ ,_fedbf :=range _facaf .Tr {for _efba ,_aedd :=range _fedbf .EG_ContentCellContent {for _ ,_dabg :=range _aedd .Tc {_ebdgb :=&TableInfo {Table :_bceag ,Row :_fedbf ,Cell :_dabg ,RowIndex :_abddf ,ColIndex :_efba };
for _ ,_febac :=range _dabg .EG_BlockLevelElts {_bada =append (_bada ,_dae (_ccggc ,_febac .EG_ContentBlockContent ,_ebdgb )...);};};};};};_aaafg =append (_aaafg ,Node {_cfgd :_ccggc ,_beea :&_bcaf ,Style :_fbgb ,Children :_bada });};};return _aaafg ;};
func (_gagb Paragraph )addEndBookmark (_cdaa int64 )*_eb .CT_MarkupRange {_bfggb :=_eb .NewEG_PContent ();_gagb ._ggec .EG_PContent =append (_gagb ._ggec .EG_PContent ,_bfggb );_cadb :=_eb .NewEG_ContentRunContent ();_adgdf :=_eb .NewEG_RunLevelElts ();
_bggeb :=_eb .NewEG_RangeMarkupElements ();_bcabb :=_eb .NewCT_MarkupRange ();_bcabb .IdAttr =_cdaa ;_bggeb .BookmarkEnd =_bcabb ;_bfggb .EG_ContentRunContent =append (_bfggb .EG_ContentRunContent ,_cadb );_cadb .EG_RunLevelElts =append (_cadb .EG_RunLevelElts ,_adgdf );
_adgdf .EG_RangeMarkupElements =append (_adgdf .EG_RangeMarkupElements ,_bggeb );return _bcabb ;};func (_dgab *WatermarkPicture )getShapeImagedata ()*_c .XSDAny {return _dgab .getInnerElement ("\u0069m\u0061\u0067\u0065\u0064\u0061\u0074a");};

// SetTextWrapInFrontOfText sets the text wrap to in front of text.
func (_bag AnchoredDrawing )SetTextWrapInFrontOfText (){_bag ._ac .Choice =&_eb .WdEG_WrapTypeChoice {};_bag ._ac .Choice .WrapNone =_eb .NewWdCT_WrapNone ();_bag ._ac .BehindDocAttr =false ;_bag ._ac .LayoutInCellAttr =true ;_bag ._ac .AllowOverlapAttr =true ;
};

// RemoveParagraph removes a paragraph from the endnote.
func (_gddf Endnote )RemoveParagraph (p Paragraph ){for _ ,_ecca :=range _gddf .content (){for _ebbf ,_fgbe :=range _ecca .P {if _fgbe ==p ._ggec {copy (_ecca .P [_ebbf :],_ecca .P [_ebbf +1:]);_ecca .P =_ecca .P [0:len (_ecca .P )-1];return ;};};};};func _fdfc ()*_cg .Path {_gcffc :=_cg .NewPath ();
_gcffc .ExtrusionokAttr =_bg .ST_TrueFalseTrue ;_gcffc .GradientshapeokAttr =_bg .ST_TrueFalseTrue ;_gcffc .ConnecttypeAttr =_cg .OfcST_ConnectTypeRect ;return _gcffc ;};

// VerticalAlign returns the value of run vertical align.
func (_abcg RunProperties )VerticalAlignment ()_bg .ST_VerticalAlignRun {if _caccb :=_abcg ._fdggb .VertAlign ;_caccb !=nil {return _caccb .ValAttr ;};return 0;};

// SetConformance sets conformance attribute of the document
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_decbd Document )SetConformance (conformanceAttr _bg .ST_ConformanceClass ){_decbd ._cbd .ConformanceAttr =conformanceAttr ;};

// AddTextInput adds text input form field to the paragraph and returns it.
func (_aafd Paragraph )AddTextInput (name string )FormField {_ccaeb :=_aafd .addFldCharsForField (name ,"\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054");_ccaeb ._bbdab .TextInput =_eb .NewCT_FFTextInput ();return _ccaeb ;};

// SetSize sets the size of the displayed image on the page.
func (_eadbf InlineDrawing )SetSize (w ,h _ebf .Distance ){_eadbf ._gbbc .Extent .CxAttr =int64 (float64 (w *_ebf .Pixel72 )/_ebf .EMU );_eadbf ._gbbc .Extent .CyAttr =int64 (float64 (h *_ebf .Pixel72 )/_ebf .EMU );};

// ReplaceText replace the text inside node.
func (_dcdaeg *Node )ReplaceText (oldText ,newText string ){switch _fcacd :=_dcdaeg .X ().(type ){case *Paragraph :for _ ,_efbd :=range _fcacd .Runs (){for _ ,_ceea :=range _efbd ._edbgc .EG_RunInnerContent {if _ceea .T !=nil {_aebc :=_ceea .T .Content ;
_aebc =_ae .ReplaceAll (_aebc ,oldText ,newText );_ceea .T .Content =_aebc ;};};};};for _ ,_badc :=range _dcdaeg .Children {_badc .ReplaceText (oldText ,newText );};};func (_afbda *WatermarkText )getInnerElement (_ceeac string )*_c .XSDAny {for _ ,_gdgd :=range _afbda ._ggfc .Any {_eddcb ,_fdab :=_gdgd .(*_c .XSDAny );
if _fdab &&(_eddcb .XMLName .Local ==_ceeac ||_eddcb .XMLName .Local =="\u0076\u003a"+_ceeac ){return _eddcb ;};};return nil ;};

// SetOrigin sets the origin of the image.  It defaults to ST_RelFromHPage and
// ST_RelFromVPage
func (_gf AnchoredDrawing )SetOrigin (h _eb .WdST_RelFromH ,v _eb .WdST_RelFromV ){_gf ._ac .PositionH .RelativeFromAttr =h ;_gf ._ac .PositionV .RelativeFromAttr =v ;};func (_dbad *Document )addEndnoteSeparator (){_ecage :=_eb .NewCT_FtnEdn ();_ecage .IdAttr =-1;
_ecage .TypeAttr =_eb .ST_FtnEdnSeparator ;_agce :=Footnote {_dbad ,_ecage };_agce .X ().EG_BlockLevelElts =[]*_eb .EG_BlockLevelElts {_eb .NewEG_BlockLevelElts ()};_ecacf :=_agce .AddParagraph ();_ecacf .X ().PPr =nil ;_eaga :=_ecacf .AddRun ();_fdca :=_eaga .newIC ();
_fdca .Separator =_eb .NewCT_Empty ();_dbad ._edd .CT_Endnotes .Endnote =append (_dbad ._edd .CT_Endnotes .Endnote ,_ecage );_ecage =_eb .NewCT_FtnEdn ();_ecage .IdAttr =0;_ecage .TypeAttr =_eb .ST_FtnEdnContinuationSeparator ;_agce =Footnote {_dbad ,_ecage };
_agce .X ().EG_BlockLevelElts =[]*_eb .EG_BlockLevelElts {_eb .NewEG_BlockLevelElts ()};_ecacf =_agce .AddParagraph ();_ecacf .X ().PPr =nil ;_eaga =_ecacf .AddRun ();_fdca =_eaga .newIC ();_fdca .ContinuationSeparator =_eb .NewCT_Empty ();_dbad ._edd .CT_Endnotes .Endnote =append (_dbad ._edd .CT_Endnotes .Endnote ,_ecage );
};func (_fef *Document )InsertTableAfter (relativeTo Paragraph )Table {return _fef .insertTable (relativeTo ,false );};type chart struct{_aeed *_fd .ChartSpace ;_cged string ;_eac string ;};

// SetSize sets the font size for a run.
func (_bbeg RunProperties )SetSize (size _ebf .Distance ){_bbeg ._fdggb .Sz =_eb .NewCT_HpsMeasure ();_bbeg ._fdggb .Sz .ValAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (size /_ebf .HalfPoint ));_bbeg ._fdggb .SzCs =_eb .NewCT_HpsMeasure ();_bbeg ._fdggb .SzCs .ValAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (size /_ebf .HalfPoint ));
};

// X returns the inner wrapped XML type.
func (_dgebg TableConditionalFormatting )X ()*_eb .CT_TblStylePr {return _dgebg ._eadcf };

// InsertRunAfter inserts a run in the paragraph after the relative run.
func (_bgbgg Paragraph )InsertRunAfter (relativeTo Run )Run {return _bgbgg .insertRun (relativeTo ,false );};

// SetAllCaps sets the run to all caps.
func (_becb RunProperties )SetAllCaps (b bool ){if !b {_becb ._fdggb .Caps =nil ;}else {_becb ._fdggb .Caps =_eb .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_bagd Color )X ()*_eb .CT_Color {return _bagd ._acg };

// X returns the inner wrapped XML type.
func (_eeef TableLook )X ()*_eb .CT_TblLook {return _eeef ._bcdcb };

// FindNodeByText return node based on matched text and return a slice of node.
func (_deee *Nodes )FindNodeByRegexp (r *_a .Regexp )[]Node {_ddcd :=[]Node {};for _ ,_agfec :=range _deee ._afgbd {if r .MatchString (_agfec .Text ()){_ddcd =append (_ddcd ,_agfec );};_aggb :=Nodes {_afgbd :_agfec .Children };_ddcd =append (_ddcd ,_aggb .FindNodeByRegexp (r )...);
};return _ddcd ;};

// Paragraphs returns the paragraphs within a structured document tag.
func (_cfeg StructuredDocumentTag )Paragraphs ()[]Paragraph {if _cfeg ._dffg .SdtContent ==nil {return nil ;};_fefc :=[]Paragraph {};for _ ,_fagbb :=range _cfeg ._dffg .SdtContent .P {_fefc =append (_fefc ,Paragraph {_cfeg ._gbdfa ,_fagbb });};return _fefc ;
};func _acef (_dced *_eb .CT_P ,_egaf ,_dccf map[int64 ]int64 ){for _ ,_ecfff :=range _dced .EG_PContent {for _ ,_daba :=range _ecfff .EG_ContentRunContent {if _daba .R !=nil {for _ ,_dgca :=range _daba .R .EG_RunInnerContent {_babf :=_dgca .EndnoteReference ;
if _babf !=nil &&_babf .IdAttr > 0{if _ecec ,_dcgc :=_dccf [_babf .IdAttr ];_dcgc {_babf .IdAttr =_ecec ;};};_bcfcg :=_dgca .FootnoteReference ;if _bcfcg !=nil &&_bcfcg .IdAttr > 0{if _ggcbd ,_abdf :=_egaf [_bcfcg .IdAttr ];_abdf {_bcfcg .IdAttr =_ggcbd ;
};};};};};};};

// OnOffValue represents an on/off value that can also be unset
type OnOffValue byte ;

// Header is a header for a document section.
type Header struct{_dcdf *Document ;_ccaed *_eb .Hdr ;};func (_eea *chart )RelId ()string {return _eea ._cged };

// AddTabStop adds a tab stop to the paragraph.  It controls the position of text when using Run.AddTab()
func (_gdeg ParagraphProperties )AddTabStop (position _ebf .Distance ,justificaton _eb .ST_TabJc ,leader _eb .ST_TabTlc ){if _gdeg ._fbde .Tabs ==nil {_gdeg ._fbde .Tabs =_eb .NewCT_Tabs ();};_bccd :=_eb .NewCT_TabStop ();_bccd .LeaderAttr =leader ;_bccd .ValAttr =justificaton ;
_bccd .PosAttr .Int64 =_c .Int64 (int64 (position /_ebf .Twips ));_gdeg ._fbde .Tabs .Tab =append (_gdeg ._fbde .Tabs .Tab ,_bccd );};