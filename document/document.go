//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

/*
Package document provides creation, reading, and writing of ECMA 376 Open
Office XML documents.

Example:

	doc := document.New()
	para := doc.AddParagraph()
	run := para.AddRun()
	run.SetText("foo")
	doc.SaveToFile("foo.docx")
*/
package document ;import (_gb "archive/zip";_fc "bytes";_d "encoding/xml";_a "errors";_b "fmt";_g "github.com/unidoc/unioffice/v2";_cb "github.com/unidoc/unioffice/v2/color";_ec "github.com/unidoc/unioffice/v2/common";_gc "github.com/unidoc/unioffice/v2/common/axcontrol";
_ede "github.com/unidoc/unioffice/v2/common/logger";_eb "github.com/unidoc/unioffice/v2/common/tempstorage";_dc "github.com/unidoc/unioffice/v2/internal/formatutils";_gbe "github.com/unidoc/unioffice/v2/internal/license";_ac "github.com/unidoc/unioffice/v2/measurement";
_ffe "github.com/unidoc/unioffice/v2/schema/schemas.microsoft.com/office/activeX";_fce "github.com/unidoc/unioffice/v2/schema/soo/dml";_db "github.com/unidoc/unioffice/v2/schema/soo/dml/chart";_fb "github.com/unidoc/unioffice/v2/schema/soo/dml/picture";
_gfa "github.com/unidoc/unioffice/v2/schema/soo/ofc/sharedTypes";_dd "github.com/unidoc/unioffice/v2/schema/soo/pkg/relationships";_be "github.com/unidoc/unioffice/v2/schema/soo/wml";_bd "github.com/unidoc/unioffice/v2/schema/urn/schemas_microsoft_com/vml";
_fa "github.com/unidoc/unioffice/v2/vmldrawing";_gf "github.com/unidoc/unioffice/v2/zippkg";_de "image";_efd "image/jpeg";_ff "io";_c "math/rand";_cd "os";_ef "path/filepath";_ed "regexp";_f "strconv";_cc "strings";_fd "time";_gg "unicode";);

// Borders returns the ParagraphBorders for setting-up border on paragraph.
func (_fcab Paragraph )Borders ()ParagraphBorders {_fcab .ensurePPr ();if _fcab ._bcaf .PPr .PBdr ==nil {_fcab ._bcaf .PPr .PBdr =_be .NewCT_PBdr ();};return ParagraphBorders {_fcab ._gfabf ,_fcab ._bcaf .PPr .PBdr };};

// Paragraphs returns all the paragraphs in the document body including tables.
func (_gag *Document )Paragraphs ()[]Paragraph {_dcaf :=[]Paragraph {};if _gag ._cgb .Body ==nil {return nil ;};for _ ,_fbbad :=range _gag ._cgb .Body .EG_BlockLevelElts {for _ ,_bdcb :=range _fbbad .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_bae :=range _bdcb .ContentBlockContentChoice .P {_dcaf =append (_dcaf ,Paragraph {_gag ,_bae });
};};};for _ ,_abcb :=range _gag .Tables (){for _ ,_caf :=range _abcb .Rows (){for _ ,_afee :=range _caf .Cells (){_dcaf =append (_dcaf ,_afee .Paragraphs ()...);};};};return _dcaf ;};

// GetWrapPathStart return wrapPath start value.
func (_dece AnchorDrawWrapOptions )GetWrapPathStart ()*_fce .CT_Point2D {return _dece ._ega };

// X returns the inner wrapped XML type.
func (_bfbb Footer )X ()*_be .Ftr {return _bfbb ._dgcd };

// Tables returns the tables defined in the footer.
func (_ggbc Footer )Tables ()[]Table {_eeef :=[]Table {};if _ggbc ._dgcd ==nil {return nil ;};for _ ,_ggdd :=range _ggbc ._dgcd .EG_BlockLevelElts {for _ ,_abaa :=range _ggdd .BlockLevelEltsChoice .EG_ContentBlockContent {_eeef =append (_eeef ,_ggbc ._bccb .tables (_abaa )...);
};};return _eeef ;};

// SetNextStyle sets the style that the next paragraph will use.
func (_dedc Style )SetNextStyle (name string ){if name ==""{_dedc ._gegdgf .Next =nil ;}else {_dedc ._gegdgf .Next =_be .NewCT_String ();_dedc ._gegdgf .Next .ValAttr =name ;};};

// DocRels returns document relationship.
func (_bdadf *Document )DocRels ()_ec .Relationships {return _bdadf ._dbe };

// ReplaceText replace the text inside node.
func (_bcde *Node )ReplaceText (oldText ,newText string ){switch _dgad :=_bcde .X ().(type ){case *Paragraph :for _ ,_cbbbf :=range _dgad .Runs (){for _ ,_dcbbg :=range _cbbbf ._fgad .EG_RunInnerContent {if _dcbbg .RunInnerContentChoice .T !=nil {_abbdc :=_dcbbg .RunInnerContentChoice .T .Content ;
_abbdc =_cc .ReplaceAll (_abbdc ,oldText ,newText );_dcbbg .RunInnerContentChoice .T .Content =_abbdc ;};};};};for _ ,_bcgba :=range _bcde .Children {_bcgba .ReplaceText (oldText ,newText );};};

// X returns the inner wrapped XML type.
func (_addd Color )X ()*_be .CT_Color {return _addd ._ddc };

// ReplaceTextByRegexp replace text inside node using regexp.
func (_fbcb *Nodes )ReplaceTextByRegexp (expr *_ed .Regexp ,newText string ){for _ ,_geef :=range _fbcb ._acab {_geef .ReplaceTextByRegexp (expr ,newText );};};

// RunProperties controls run styling properties.
type RunProperties struct{_dggdd *_be .CT_RPr };

// SetTarget sets the URL target of the hyperlink.
func (_dccdfc HyperLink )SetTarget (url string ){_dfbe :=_dccdfc ._bdagg .AddHyperlink (url );_dccdfc ._caddg .IdAttr =_g .String (_ec .Relationship (_dfbe ).ID ());_dccdfc ._caddg .AnchorAttr =nil ;};

// AddHTML adds a text that contains HTML tags to a paragraph.
//
// The following tags are supported:
//   - <b> or <strong> for bold text
//   - <i> or <em> for italic text
//   - <u> for underlined text
//   - <strike> for strikethrough text
//   - <mark> for highlighted text
//   - <sub> for subscript text
//   - <sup> for superscript text
func (_gecc Paragraph )AddHTML (s string ){var (_eccf *htmlNode ;_ecfb *Run ;);_bdbe :=_d .NewDecoder (_fc .NewReader ([]byte (s )));for {_cfcff ,_fdbdf :=_bdbe .Token ();if _fdbdf !=nil {break ;};switch _bbcc :=_cfcff .(type ){case _d .StartElement :if _ecfb !=nil &&_ecfb .Text ()!=""{if _eccf !=nil {_ggccg :=_eccf ;
for {if _ggccg ==nil {break ;};_dcbeg (_ecfb ,_ggccg ._gbfcb .Name .Local ,_ggccg );_ggccg =_ggccg ._gbaaa ;};_gbfcd :=_ecfb .Copy ();_ecfb =&_gbfcd ;}else {_ecfb =nil ;};};_eccf =&htmlNode {_gbfcb :_bbcc ,_gbaaa :_eccf };case _d .EndElement :if _eccf !=nil {_dcbeg (_ecfb ,_bbcc .Name .Local ,_eccf );
_eccf =_eccf ._gbaaa ;if _eccf ==nil {_ecfb =nil ;};};case _d .CharData :if _ecfb ==nil {_fbef :=_gecc .AddRun ();_ecfb =&_fbef ;}else if _eccf !=nil {_gedf :=_eccf ;for {if _gedf ==nil {break ;};_dcbeg (_ecfb ,_gedf ._gbfcb .Name .Local ,_gedf );_gedf =_gedf ._gbaaa ;
};_cfaee :=_gecc .AddRun ();_ecfb =&_cfaee ;};_ecfb .AddText (string (_bbcc ));};};};func (_adbb Paragraph )ensurePPr (){if _adbb ._bcaf .PPr ==nil {_adbb ._bcaf .PPr =_be .NewCT_PPr ();};};

// VerticalAlign returns the value of paragraph vertical align.
func (_bbdb ParagraphProperties )VerticalAlignment ()_gfa .ST_VerticalAlignRun {if _gdfbee :=_bbdb ._fbaa .RPr .VertAlign ;_gdfbee !=nil {return _gdfbee .ValAttr ;};return 0;};

// DocText is an array of extracted text items which has some methods for representing extracted text.
type DocText struct{Items []TextItem ;_bdada []listItemInfo ;_afgb map[int64 ]map[int64 ]int64 ;};

// Restart restarts the numbering
func (_cfdf *Numbering )Restart (nd *NumberingDefinition ){_becb :=nd ._dbgg .Lvl ;_cgddd :=_cfdf .AddDefinition ();nd ._dbgg =_cgddd ._dbgg ;nd ._dbgg .Lvl =_becb ;};

// SetBevelImageEffect sets the glow image effect.
func (_egg AnchoredDrawing )SetBevelImageEffect (){for _ ,_bge :=range _egg ._cg .Graphic .GraphicData .Any {if _ggff ,_fcbd :=_bge .(*_fb .Pic );_fcbd {_ggff .SpPr .Sp3d =_fce .NewCT_Shape3D ();_ggff .SpPr .Sp3d .BevelT =_fce .NewCT_Bevel ();_ggff .SpPr .Sp3d .BevelT .PrstAttr =_fce .ST_BevelPresetTypeConvex ;
_ggff .SpPr .Scene3d =_fce .NewCT_Scene3D ();_ggff .SpPr .Scene3d .Camera =_fce .NewCT_Camera ();_ggff .SpPr .Scene3d .Camera .PrstAttr =_fce .ST_PresetCameraTypeOrthographicFront ;_ggff .SpPr .Scene3d .LightRig =_fce .NewCT_LightRig ();_ggff .SpPr .Scene3d .LightRig .RigAttr =_fce .ST_LightRigTypeThreePt ;
_ggff .SpPr .Scene3d .LightRig .DirAttr =_fce .ST_LightRigDirectionT ;};};};

// X returns the inner wrapped XML type.
func (_afcg Run )X ()*_be .CT_R {return _afcg ._fgad };

// PutNodeAfter put node to position after relativeTo.
func (_ebff *Document )PutNodeAfter (relativeTo ,node Node ){_ebff .putNode (relativeTo ,node ,false )};

// X returns the inner wrapped XML type.
func (_cdge NumberingDefinition )X ()*_be .CT_AbstractNum {return _cdge ._dbgg };

// SetLastColumn controls the conditional formatting for the last column in a table.
func (_cccga TableLook )SetLastColumn (on bool ){if !on {_cccga ._gfded .LastColumnAttr =&_gfa .ST_OnOff {};_cccga ._gfded .LastColumnAttr .ST_OnOff1 =_gfa .ST_OnOff1Off ;}else {_cccga ._gfded .LastColumnAttr =&_gfa .ST_OnOff {};_cccga ._gfded .LastColumnAttr .ST_OnOff1 =_gfa .ST_OnOff1On ;
};};

// Name returns the name of the style if set.
func (_eeage Style )Name ()string {if _eeage ._gegdgf .Name ==nil {return "";};return _eeage ._gegdgf .Name .ValAttr ;};

// Bookmarks returns all the bookmarks defined in the document.
func (_gfac Document )Bookmarks ()[]Bookmark {if _gfac ._cgb .Body ==nil {return nil ;};_afgc :=[]Bookmark {};for _ ,_gfbf :=range _gfac ._cgb .Body .EG_BlockLevelElts {for _ ,_agde :=range _gfbf .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_fgde :=range _gacbf (_agde ){_afgc =append (_afgc ,_fgde );
};};};return _afgc ;};func _gdff (_cbbcf *_be .CT_Border ,_dfagf _be .ST_Border ,_gcaa _cb .Color ,_egdc _ac .Distance ){_cbbcf .ValAttr =_dfagf ;_cbbcf .ColorAttr =&_be .ST_HexColor {};if _gcaa .IsAuto (){_cbbcf .ColorAttr .ST_HexColorAuto =_be .ST_HexColorAutoAuto ;
}else {_cbbcf .ColorAttr .ST_HexColorRGB =_gcaa .AsRGBString ();};if _egdc !=_ac .Zero {_cbbcf .SzAttr =_g .Uint64 (uint64 (_egdc /_ac .Point *8));};};func (_fgecd Paragraph )addEndFldChar ()*_be .CT_FldChar {_ebbc :=_fgecd .addFldChar ();_ebbc .FldCharTypeAttr =_be .ST_FldCharTypeEnd ;
return _ebbc ;};

// SetItalic sets the run to italic.
func (_gcdd RunProperties )SetItalic (b bool ){if !b {_gcdd ._dggdd .I =nil ;_gcdd ._dggdd .ICs =nil ;}else {_gcdd ._dggdd .I =_be .NewCT_OnOff ();_gcdd ._dggdd .ICs =_be .NewCT_OnOff ();};};

// SetAfterAuto controls if spacing after a paragraph is automatically determined.
func (_ecaga ParagraphSpacing )SetAfterAuto (b bool ){if b {_ecaga ._aaec .AfterAutospacingAttr =&_gfa .ST_OnOff {};_ecaga ._aaec .AfterAutospacingAttr .Bool =_g .Bool (true );}else {_ecaga ._aaec .AfterAutospacingAttr =nil ;};};func _gdec (_gdfbe *_be .CT_P ,_ecc map[string ]string ){for _ ,_ccgde :=range _gdfbe .EG_PContent {if _ccgde .PContentChoice .Hyperlink !=nil &&_ccgde .PContentChoice .Hyperlink .IdAttr !=nil {if _cfeg ,_dbcf :=_ecc [*_ccgde .PContentChoice .Hyperlink .IdAttr ];
_dbcf {*_ccgde .PContentChoice .Hyperlink .IdAttr =_cfeg ;};};};};func _dbece (_agcf _ff .ReaderAt ,_baef int64 ,_cfbe string )(*Document ,error ){const _accf ="\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0052\u0065\u0061\u0064";if !_gbe .GetLicenseKey ().IsLicensed ()&&!_dfe {_b .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");
_b .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");
return nil ,_a .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_gdgc :="\u0075n\u006b\u006e\u006f\u0077\u006e";if _cfgf ,_aecc :=_agcf .(*_cd .File );
_aecc {_gdgc =_cfgf .Name ();};_gddb :=New ();_gddb .Numbering ._dcaac =nil ;if len (_cfbe )> 0{_gddb ._gca =_cfbe ;}else {_gaff ,_geddb :=_gbe .GenRefId ("\u0064\u0072");if _geddb !=nil {_ede .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_geddb );
return nil ,_geddb ;};_gddb ._gca =_gaff ;};if _ddac :=_gbe .Track (_gddb ._gca ,_accf ,_gdgc );_ddac !=nil {_ede .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_ddac );return nil ,_ddac ;};_fbcg ,_afbe :=_eb .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0064\u006f\u0063\u0078");
if _afbe !=nil {return nil ,_afbe ;};_gddb .TmpPath =_fbcg ;_fgcd ,_afbe :=_gb .NewReader (_agcf ,_baef );if _afbe !=nil {return nil ,_b .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_afbe );};_gaed :=[]*_gb .File {};
_gaed =append (_gaed ,_fgcd .File ...);_eegb :=false ;for _ ,_cacb :=range _gaed {if _cacb .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_eegb =true ;break ;};};if _eegb {_gddb .CreateCustomProperties ();
};_dcfg :=_gddb ._cgb .ConformanceAttr ;_dccf :=_gf .DecodeMap {};_dccf .SetOnNewRelationshipFunc (_gddb .onNewRelationship );_dccf .AddTarget (_g .ContentTypesFilename ,_gddb .ContentTypes .X (),"",0);_dccf .AddTarget (_g .BaseRelsFilename ,_gddb .Rels .X (),"",0);
if _bgdb :=_dccf .Decode (_gaed );_bgdb !=nil {return nil ,_bgdb ;};_gddb ._cgb .ConformanceAttr =_dcfg ;for _ ,_cbef :=range _gaed {if _cbef ==nil {continue ;};if _aefgg :=_gddb .AddExtraFileFromZip (_cbef );_aefgg !=nil {return nil ,_aefgg ;};};if _eegb {_egeb :=false ;
for _ ,_ccgb :=range _gddb .Rels .X ().Relationship {if _ccgb .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_egeb =true ;break ;};};if !_egeb {_gddb .AddCustomRelationships ();};
};return _gddb ,nil ;};

// AddDefinition adds a new numbering definition.
func (_gegfa Numbering )AddDefinition ()NumberingDefinition {_dceee :=_be .NewCT_Num ();_eddb :=int64 (1);for _ ,_ffbge :=range _gegfa .Definitions (){if _ffbge .AbstractNumberID ()>=_eddb {_eddb =_ffbge .AbstractNumberID ()+1;};};_fadf :=int64 (1);for _ ,_fdeee :=range _gegfa .X ().Num {if _fdeee .NumIdAttr >=_fadf {_fadf =_fdeee .NumIdAttr +1;
};};_dceee .NumIdAttr =_fadf ;_dceee .AbstractNumId =_be .NewCT_DecimalNumber ();_dceee .AbstractNumId .ValAttr =_eddb ;_bddfe :=_be .NewCT_AbstractNum ();_bddfe .AbstractNumIdAttr =_eddb ;_gegfa ._dcaac .AbstractNum =append (_gegfa ._dcaac .AbstractNum ,_bddfe );
_gegfa ._dcaac .Num =append (_gegfa ._dcaac .Num ,_dceee );return NumberingDefinition {_bddfe };};

// SetReflectionImageEffect sets the reflection image effect.
func (_ggf AnchoredDrawing )SetReflectionImageEffect (radius _ac .Distance ,opacity ,size float64 ){_dec :=_ac .ToEMU (float64 (radius ));_acg :="\u002d1\u0030\u0030\u0030\u0030\u0030";for _ ,_cea :=range _ggf ._cg .Graphic .GraphicData .Any {if _fdf ,_aa :=_cea .(*_fb .Pic );
_aa {_ggf .initializeEffectList (_fdf .SpPr );_fdf .SpPr .EffectPropertiesChoice .EffectLst .Reflection =_fce .NewCT_ReflectionEffect ();_fdf .SpPr .EffectPropertiesChoice .EffectLst .Reflection .BlurRadAttr =&_dec ;_fdf .SpPr .EffectPropertiesChoice .EffectLst .Reflection .AlgnAttr =_fce .ST_RectAlignmentBl ;
_gde :=false ;_fdf .SpPr .EffectPropertiesChoice .EffectLst .Reflection .RotWithShapeAttr =&_gde ;_fdf .SpPr .EffectPropertiesChoice .EffectLst .Reflection .StAAttr =&_fce .ST_PositiveFixedPercentage {};_fdf .SpPr .EffectPropertiesChoice .EffectLst .Reflection .StAAttr .ST_PositiveFixedPercentageDecimal =_g .Int32 (int32 (opacity *1000));
_fdf .SpPr .EffectPropertiesChoice .EffectLst .Reflection .EndPosAttr =&_fce .ST_PositiveFixedPercentage {};_fdf .SpPr .EffectPropertiesChoice .EffectLst .Reflection .EndPosAttr .ST_PositiveFixedPercentageDecimal =_g .Int32 (int32 (size *1000));_fdf .SpPr .EffectPropertiesChoice .EffectLst .Reflection .SyAttr =&_fce .ST_Percentage {};
_fdf .SpPr .EffectPropertiesChoice .EffectLst .Reflection .SyAttr .ST_Percentage =&_acg ;};};_ ,_fef :=_ggf .GetSize ();_fef =_fef *int64 (size )/100;_ggf .setEffectExtent (_fef ,_dec ,_dec ,_dec );};

// Document is a text document that can be written out in the OOXML .docx
// format. It can be opened from a file on disk and modified, or created from
// scratch.
type Document struct{_ec .DocBase ;_cgb *_be .Document ;Settings Settings ;Numbering Numbering ;Styles Styles ;_egc []*_be .Hdr ;_baa []_ec .Relationships ;_ccg []*_be .Ftr ;_abb []_ec .Relationships ;_dbe _ec .Relationships ;_acgc []*_fce .Theme ;_gdab *_be .WebSettings ;
_gaa *_be .Fonts ;_ege _ec .Relationships ;_dbc *_be .Endnotes ;_edf *_be .Footnotes ;_bdg []*_gc .Control ;_gbgb []*chart ;_ecff *_be .Comments ;_gca string ;};

// AddTable adds a table to the table cell.
func (_bgfa Cell )AddTable ()Table {_afa :=_be .NewEG_BlockLevelElts ();_bgfa ._ca .EG_BlockLevelElts =append (_bgfa ._ca .EG_BlockLevelElts ,_afa );_gga :=_be .NewEG_ContentBlockContent ();_afa .BlockLevelEltsChoice .EG_ContentBlockContent =append (_afa .BlockLevelEltsChoice .EG_ContentBlockContent ,_gga );
_aab :=_be .NewCT_Tbl ();_gga .ContentBlockContentChoice .Tbl =append (_gga .ContentBlockContentChoice .Tbl ,_aab );return Table {_bgfa ._fee ,_aab };};

// AddTable adds a new table to the document body.
func (_fbbc *Document )AddTable ()Table {_fgaf :=_be .NewEG_BlockLevelElts ();_fbbc ._cgb .Body .EG_BlockLevelElts =append (_fbbc ._cgb .Body .EG_BlockLevelElts ,_fgaf );_fegf :=_be .NewEG_ContentBlockContent ();_fgaf .BlockLevelEltsChoice .EG_ContentBlockContent =append (_fgaf .BlockLevelEltsChoice .EG_ContentBlockContent ,_fegf );
_edc :=_be .NewCT_Tbl ();_fegf .ContentBlockContentChoice .Tbl =append (_fegf .ContentBlockContentChoice .Tbl ,_edc );return Table {_fbbc ,_edc };};func _dcbeg (_fgagd *Run ,_cgefe string ,_dfeaa *htmlNode ){switch _cgefe {case "\u0062","\u0073\u0074\u0072\u006f\u006e\u0067":_fgagd .Properties ().SetBold (true );
case "\u0069","\u0065\u006d":_fgagd .Properties ().SetItalic (true );case "\u0075":_gdee :=_cb .Black ;for _ ,_dfbb :=range _dfeaa ._gbfcb .Attr {if _dfbb .Name .Local =="\u0063\u006f\u006co\u0072"{if _ceba ,_abee :=_cb .ColorMap [_dfbb .Value ];_abee {_gdee =_ceba ;
};};};_fgagd .Properties ().SetUnderline (_be .ST_UnderlineSingle ,_gdee );case "\u0073\u0074\u0072\u0069\u006b\u0065":_fgagd .Properties ().SetStrikeThrough (true );case "\u006d\u0061\u0072\u006b":_abca :=_be .ST_HighlightColorYellow ;for _ ,_eegg :=range _dfeaa ._gbfcb .Attr {if _eegg .Name .Local =="\u0063\u006f\u006co\u0072"{if _dgga ,_bcecf :=_cb .HighlightColorMap [_eegg .Value ];
_bcecf {_abca =_dgga ;};};};_fgagd .Properties ().SetHighlight (_abca );case "\u0073\u0075\u0062":_fgagd .Properties ().SetVerticalAlignment (_gfa .ST_VerticalAlignRunSubscript );case "\u0073\u0075\u0070":_fgagd .Properties ().SetVerticalAlignment (_gfa .ST_VerticalAlignRunSuperscript );
};};

// SetKeepWithNext controls if this paragraph should be kept with the next.
func (_bbedc ParagraphProperties )SetKeepWithNext (b bool ){if !b {_bbedc ._fbaa .KeepNext =nil ;}else {_bbedc ._fbaa .KeepNext =_be .NewCT_OnOff ();};};func (_abg *chart )RelId ()string {return _abg ._bcee };

// RemoveParagraph removes a paragraph from a footer.
func (_adgf Footer )RemoveParagraph (p Paragraph ){for _ ,_cddf :=range _adgf ._dgcd .EG_BlockLevelElts {for _ ,_cbdc :=range _cddf .BlockLevelEltsChoice .EG_ContentBlockContent {for _bafa ,_gggbf :=range _cbdc .ContentBlockContentChoice .P {if _gggbf ==p ._bcaf {copy (_cbdc .ContentBlockContentChoice .P [_bafa :],_cbdc .ContentBlockContentChoice .P [_bafa +1:]);
_cbdc .ContentBlockContentChoice .P =_cbdc .ContentBlockContentChoice .P [0:len (_cbdc .ContentBlockContentChoice .P )-1];return ;};};};};};

// SetTextWrapSquare sets the text wrap to square with a given wrap type.
func (_bg AnchoredDrawing )SetTextWrapSquare (t _be .WdST_WrapText ){_bg ._cg .WrapTypeChoice =&_be .WdEG_WrapTypeChoice {};_bg ._cg .WrapTypeChoice .WrapSquare =_be .NewWdCT_WrapSquare ();_bg ._cg .WrapTypeChoice .WrapSquare .WrapTextAttr =t ;};func (_bfdfc Paragraph )addEndComment (_ebcgg int64 )*_be .CT_MarkupRange {_cdaafc :=_be .NewEG_PContent ();
_bfdfc ._bcaf .EG_PContent =append (_bfdfc ._bcaf .EG_PContent ,_cdaafc );_egcgg :=_be .NewEG_ContentRunContent ();_fcdf :=_be .NewEG_RunLevelElts ();_fafab :=_be .NewEG_RangeMarkupElements ();_bcdea :=_be .NewCT_MarkupRange ();_bcdea .IdAttr =_ebcgg ;
_fafab .RangeMarkupElementsChoice .CommentRangeEnd =_bcdea ;_cdaafc .PContentChoice .EG_ContentRunContent =append (_cdaafc .PContentChoice .EG_ContentRunContent ,_egcgg );_egcgg .ContentRunContentChoice .EG_RunLevelElts =append (_egcgg .ContentRunContentChoice .EG_RunLevelElts ,_fcdf );
_fcdf .RunLevelEltsChoice .EG_RangeMarkupElements =append (_fcdf .RunLevelEltsChoice .EG_RangeMarkupElements ,_fafab );return _bcdea ;};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_deed Paragraph )SetLineSpacing (d _ac .Distance ,rule _be .ST_LineSpacingRule ){_deed .ensurePPr ();if _deed ._bcaf .PPr .Spacing ==nil {_deed ._bcaf .PPr .Spacing =_be .NewCT_Spacing ();};_aefga :=_deed ._bcaf .PPr .Spacing ;if rule ==_be .ST_LineSpacingRuleUnset {_aefga .LineRuleAttr =_be .ST_LineSpacingRuleUnset ;
_aefga .LineAttr =nil ;}else {_aefga .LineRuleAttr =rule ;_aefga .LineAttr =&_be .ST_SignedTwipsMeasure {};_aefga .LineAttr .Int64 =_g .Int64 (int64 (d /_ac .Twips ));};};

// CharacterSpacingValue returns the value of characters spacing in twips (1/20 of point).
func (_adea ParagraphProperties )CharacterSpacingValue ()int64 {if _agac :=_adea ._fbaa .RPr .Spacing ;_agac !=nil {_ebbf :=_agac .ValAttr ;if _ebbf .Int64 !=nil {return *_ebbf .Int64 ;};};return int64 (0);};

// IsEndnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_ddbf Run )IsEndnote ()(bool ,int64 ){if _ddbf ._fgad .EG_RunInnerContent !=nil {if _ddbf ._fgad .EG_RunInnerContent [0].RunInnerContentChoice .EndnoteReference !=nil {return true ,_ddbf ._fgad .EG_RunInnerContent [0].RunInnerContentChoice .EndnoteReference .IdAttr ;
};};return false ,0;};

// Rows returns the rows defined in the table.
func (_feeag Table )Rows ()[]Row {_gbgdb :=[]Row {};for _ ,_debcf :=range _feeag ._dbgfc .EG_ContentRowContent {for _ ,_defb :=range _debcf .ContentRowContentChoice .Tr {_gbgdb =append (_gbgdb ,Row {_feeag ._bbbfef ,_defb });};if _debcf .ContentRowContentChoice .Sdt !=nil &&_debcf .ContentRowContentChoice .Sdt .SdtContent !=nil {for _ ,_caegg :=range _debcf .ContentRowContentChoice .Sdt .SdtContent .EG_ContentRowContent {for _ ,_cdcc :=range _caegg .ContentRowContentChoice .Tr {_gbgdb =append (_gbgdb ,Row {_feeag ._bbbfef ,_cdcc });
};};};};return _gbgdb ;};

// SetPageSizeAndOrientation sets the page size and orientation for a section.
func (_fegg Section )SetPageSizeAndOrientation (w ,h _ac .Distance ,orientation _be .ST_PageOrientation ){if _fegg ._cffdd .PgSz ==nil {_fegg ._cffdd .PgSz =_be .NewCT_PageSz ();};_fegg ._cffdd .PgSz .OrientAttr =orientation ;if orientation ==_be .ST_PageOrientationLandscape {_fegg ._cffdd .PgSz .WAttr =&_gfa .ST_TwipsMeasure {};
_fegg ._cffdd .PgSz .WAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (h /_ac .Twips ));_fegg ._cffdd .PgSz .HAttr =&_gfa .ST_TwipsMeasure {};_fegg ._cffdd .PgSz .HAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (w /_ac .Twips ));}else {_fegg ._cffdd .PgSz .WAttr =&_gfa .ST_TwipsMeasure {};
_fegg ._cffdd .PgSz .WAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (w /_ac .Twips ));_fegg ._cffdd .PgSz .HAttr =&_gfa .ST_TwipsMeasure {};_fegg ._cffdd .PgSz .HAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (h /_ac .Twips ));};};func _agae (_bbgbe []*_be .EG_ContentBlockContent ,_bbabg *TableInfo )[]TextItem {_abbbf :=[]TextItem {};
for _ ,_cgga :=range _bbgbe {if _beba :=_cgga .ContentBlockContentChoice .Sdt ;_beba !=nil {if _fcbg :=_beba .SdtContent ;_fcbg !=nil {for _ ,_ebfd :=range _fcbg .EG_ContentBlockContent {_abbbf =append (_abbbf ,_adga (_ebfd .ContentBlockContentChoice .P ,_bbabg ,nil )...);
};};};_abbbf =append (_abbbf ,_adga (_cgga .ContentBlockContentChoice .P ,_bbabg ,nil )...);for _ ,_cebbe :=range _cgga .ContentBlockContentChoice .Tbl {for _edbb ,_bdff :=range _cebbe .EG_ContentRowContent {for _ ,_daeb :=range _bdff .ContentRowContentChoice .Tr {for _cadb ,_gdaba :=range _daeb .EG_ContentCellContent {for _ ,_bgaf :=range _gdaba .ContentCellContentChoice .Tc {_gbgg :=&TableInfo {Table :_cebbe ,Row :_daeb ,Cell :_bgaf ,RowIndex :_edbb ,ColIndex :_cadb };
for _ ,_aeagg :=range _bgaf .EG_BlockLevelElts {_abbbf =append (_abbbf ,_agae (_aeagg .BlockLevelEltsChoice .EG_ContentBlockContent ,_gbgg )...);};};};};};};};return _abbbf ;};

// Paragraphs returns the paragraphs defined in a header.
func (_agca Header )Paragraphs ()[]Paragraph {_fgaabg :=[]Paragraph {};for _ ,_ecgaa :=range _agca ._gbeec .EG_BlockLevelElts {for _ ,_eefe :=range _ecgaa .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_ffaf :=range _eefe .ContentBlockContentChoice .P {_fgaabg =append (_fgaabg ,Paragraph {_agca ._gegb ,_ffaf });
};};};for _ ,_dgb :=range _agca .Tables (){for _ ,_ddba :=range _dgb .Rows (){for _ ,_dced :=range _ddba .Cells (){_fgaabg =append (_fgaabg ,_dced .Paragraphs ()...);};};};return _fgaabg ;};

// Index returns the index of the footer within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_gegdg Footer )Index ()int {for _fbbaa ,_bbbe :=range _gegdg ._bccb ._ccg {if _bbbe ==_gegdg ._dgcd {return _fbbaa ;};};return -1;};

// X returns the inner wrapped XML type.
func (_cfdfb TableLook )X ()*_be .CT_TblLook {return _cfdfb ._gfded };

// SetOpacity sets opacity of watermark text in range 0.0 - 1.0, where is 1.0 is the default value.
func (_deegd *WatermarkText )SetOpacity (value float64 ){if _deegd ._cgddc !=nil {_aegfb :=_deegd ._cgddc .ShapeChoice ;for _ ,_eebgg :=range _aegfb {if _eebgg .ShapeElementsChoice .Fill !=nil {_aecee :=_f .Itoa ((int )(65536.0*value ))+"\u0066";_eebgg .ShapeElementsChoice .Fill .OpacityAttr =&_aecee ;
};};};};

// GetNumberingLevelByIds returns a NumberingLevel by its NumId and LevelId attributes
// or an empty one if not found.
func (_cdcb *Document )GetNumberingLevelByIds (numId ,levelId int64 )NumberingLevel {if _cdcb .Numbering ._dcaac ==nil {return NumberingLevel {};};for _ ,_cdcg :=range _cdcb .Numbering ._dcaac .Num {if _cdcg !=nil &&_cdcg .NumIdAttr ==numId {_ccecd :=_cdcg .AbstractNumId .ValAttr ;
for _ ,_fgbc :=range _cdcb .Numbering ._dcaac .AbstractNum {if _fgbc .AbstractNumIdAttr ==_ccecd {if _fgbc .NumStyleLink !=nil &&len (_fgbc .Lvl )==0{if _gbba ,_efgc :=_cdcb .Styles .SearchStyleById (_fgbc .NumStyleLink .ValAttr );_efgc {if _gbba .ParagraphProperties ().NumId ()> -1{return _cdcb .GetNumberingLevelByIds (_gbba .ParagraphProperties ().NumId (),levelId );
};};};for _ ,_ecgca :=range _fgbc .Lvl {if _ecgca .IlvlAttr ==levelId {return NumberingLevel {_ecgca };};};};};};};return NumberingLevel {};};

// Section return paragraph properties section value.
func (_fdcfg ParagraphProperties )Section ()(Section ,bool ){if _fdcfg ._fbaa .SectPr !=nil {return Section {_fdcfg ._ceacb ,_fdcfg ._fbaa .SectPr },true ;};return Section {},false ;};

// Shadow returns true if run shadow is on.
func (_befad RunProperties )Shadow ()bool {return _bgba (_befad ._dggdd .Shadow )};

// SetLeftPct sets the cell left margin
func (_aefg CellMargins )SetLeftPct (pct float64 ){_aefg ._adde .Left =_be .NewCT_TblWidth ();_efe (_aefg ._adde .Left ,pct );};

// ExtractTextOptions extraction text options.
type ExtractTextOptions struct{

// WithNumbering extract numbering elements if set to `true`.
WithNumbering bool ;

// NumberingIndent default value of numbering indent.
NumberingIndent string ;

// RunsOnNewLine write each of runs text on new line if set to `true`.
RunsOnNewLine bool ;};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_fgdec TableStyleProperties )SetCellSpacingPercent (pct float64 ){_fgdec ._eeda .TblCellSpacing =_be .NewCT_TblWidth ();_fgdec ._eeda .TblCellSpacing .TypeAttr =_be .ST_TblWidthPct ;_fgdec ._eeda .TblCellSpacing .WAttr =&_be .ST_MeasurementOrPercent {};
_fgdec ._eeda .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_be .ST_DecimalNumberOrPercent {};_fgdec ._eeda .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (pct *50));};func (_bba *Document )addFootnoteSeparator (){_fceg :=_be .NewCT_FtnEdn ();
_fceg .IdAttr =-1;_fceg .TypeAttr =_be .ST_FtnEdnSeparator ;_gead :=Footnote {_bba ,_fceg };_gead .X ().EG_BlockLevelElts =[]*_be .EG_BlockLevelElts {_be .NewEG_BlockLevelElts ()};_dfd :=_gead .AddParagraph ();_dfd .X ().PPr =nil ;_dda :=_dfd .AddRun ();
_gdaae :=_dda .newIC ();_gdaae .RunInnerContentChoice .Separator =_be .NewCT_Empty ();_bba ._edf .CT_Footnotes .Footnote =append (_bba ._edf .CT_Footnotes .Footnote ,_fceg );_fceg =_be .NewCT_FtnEdn ();_fceg .IdAttr =0;_fceg .TypeAttr =_be .ST_FtnEdnContinuationSeparator ;
_gead =Footnote {_bba ,_fceg };_gead .X ().EG_BlockLevelElts =[]*_be .EG_BlockLevelElts {_be .NewEG_BlockLevelElts ()};_dfd =_gead .AddParagraph ();_dfd .X ().PPr =nil ;_dda =_dfd .AddRun ();_gdaae =_dda .newIC ();_gdaae .RunInnerContentChoice .ContinuationSeparator =_be .NewCT_Empty ();
_bba ._edf .CT_Footnotes .Footnote =append (_bba ._edf .CT_Footnotes .Footnote ,_fceg );};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_fcfde RunProperties )CharacterSpacingMeasure ()string {if _dddf :=_fcfde ._dggdd .Spacing ;_dddf !=nil {_ceaca :=_dddf .ValAttr ;if _ceaca .ST_UniversalMeasure !=nil {return *_ceaca .ST_UniversalMeasure ;};};return "";};

// SetWidthPercent sets the cell to a width percentage.
func (_bdb CellProperties )SetWidthPercent (pct float64 ){_bdb ._fad .TcW =_be .NewCT_TblWidth ();_bdb ._fad .TcW .TypeAttr =_be .ST_TblWidthPct ;_bdb ._fad .TcW .WAttr =&_be .ST_MeasurementOrPercent {};_bdb ._fad .TcW .WAttr .ST_DecimalNumberOrPercent =&_be .ST_DecimalNumberOrPercent {};
_bdb ._fad .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (pct *50));};func (_gcef *Document )appendParagraph (_agfd *Paragraph ,_daea Paragraph ,_gagd bool )Paragraph {_gddc :=_be .NewEG_BlockLevelElts ();_gcef ._cgb .Body .EG_BlockLevelElts =append (_gcef ._cgb .Body .EG_BlockLevelElts ,_gddc );
_eaeb :=_be .NewEG_ContentBlockContent ();_gddc .BlockLevelEltsChoice .EG_ContentBlockContent =append (_gddc .BlockLevelEltsChoice .EG_ContentBlockContent ,_eaeb );if _agfd !=nil {_defd :=_agfd .X ();for _ ,_cgd :=range _gcef ._cgb .Body .EG_BlockLevelElts {for _ ,_dfae :=range _cgd .BlockLevelEltsChoice .EG_ContentBlockContent {for _gada ,_afag :=range _dfae .ContentBlockContentChoice .P {if _afag ==_defd {_cadc :=_daea .X ();
_dfae .ContentBlockContentChoice .P =append (_dfae .ContentBlockContentChoice .P ,nil );if _gagd {copy (_dfae .ContentBlockContentChoice .P [_gada +1:],_dfae .ContentBlockContentChoice .P [_gada :]);_dfae .ContentBlockContentChoice .P [_gada ]=_cadc ;}else {copy (_dfae .ContentBlockContentChoice .P [_gada +2:],_dfae .ContentBlockContentChoice .P [_gada +1:]);
_dfae .ContentBlockContentChoice .P [_gada +1]=_cadc ;};break ;};};for _ ,_eaef :=range _dfae .ContentBlockContentChoice .Tbl {for _ ,_efba :=range _eaef .EG_ContentRowContent {for _ ,_dcd :=range _efba .ContentRowContentChoice .Tr {for _ ,_fba :=range _dcd .EG_ContentCellContent {for _ ,_cgbg :=range _fba .ContentCellContentChoice .Tc {for _ ,_fefa :=range _cgbg .EG_BlockLevelElts {for _ ,_ebfc :=range _fefa .BlockLevelEltsChoice .EG_ContentBlockContent {for _ffac ,_bdgc :=range _ebfc .ContentBlockContentChoice .P {if _bdgc ==_defd {_gafd :=_daea .X ();
_ebfc .ContentBlockContentChoice .P =append (_ebfc .ContentBlockContentChoice .P ,nil );if _gagd {copy (_ebfc .ContentBlockContentChoice .P [_ffac +1:],_ebfc .ContentBlockContentChoice .P [_ffac :]);_ebfc .ContentBlockContentChoice .P [_ffac ]=_gafd ;}else {copy (_ebfc .ContentBlockContentChoice .P [_ffac +2:],_ebfc .ContentBlockContentChoice .P [_ffac +1:]);
_ebfc .ContentBlockContentChoice .P [_ffac +1]=_gafd ;};break ;};};};};};};};};};if _dfae .ContentBlockContentChoice .Sdt !=nil &&_dfae .ContentBlockContentChoice .Sdt .SdtContent !=nil {for _ ,_eaefc :=range _dfae .ContentBlockContentChoice .Sdt .SdtContent .EG_ContentBlockContent {for _gfga ,_fca :=range _eaefc .ContentBlockContentChoice .P {if _fca ==_defd {_eafg :=_daea .X ();
_eaefc .ContentBlockContentChoice .P =append (_eaefc .ContentBlockContentChoice .P ,nil );if _gagd {copy (_eaefc .ContentBlockContentChoice .P [_gfga +1:],_eaefc .ContentBlockContentChoice .P [_gfga :]);_eaefc .ContentBlockContentChoice .P [_gfga ]=_eafg ;
}else {copy (_eaefc .ContentBlockContentChoice .P [_gfga +2:],_eaefc .ContentBlockContentChoice .P [_gfga +1:]);_eaefc .ContentBlockContentChoice .P [_gfga +1]=_eafg ;};break ;};};};};};};}else {_eaeb .ContentBlockContentChoice .P =append (_eaeb .ContentBlockContentChoice .P ,_daea .X ());
};_accc :=_daea .Properties ();if _aga ,_ddgg :=_accc .Section ();_ddgg {var (_ece map[string ]string ;_aecf map[string ]string ;);_gcc :=_aga .X ().EG_HdrFtrReferences ;for _ ,_bdag :=range _gcc {if _bdag .HdrFtrReferencesChoice .HeaderReference !=nil {_ece =map[string ]string {_bdag .HdrFtrReferencesChoice .HeaderReference .IdAttr :_aga ._dfcf ._dbe .GetTargetByRelId (_bdag .HdrFtrReferencesChoice .HeaderReference .IdAttr )};
};if _bdag .HdrFtrReferencesChoice .FooterReference !=nil {_aecf =map[string ]string {_bdag .HdrFtrReferencesChoice .FooterReference .IdAttr :_aga ._dfcf ._dbe .GetTargetByRelId (_bdag .HdrFtrReferencesChoice .FooterReference .IdAttr )};};};var _dfga map[int ]_ec .ImageRef ;
for _ ,_fffc :=range _aga ._dfcf .Headers (){for _bdad ,_ggga :=range _ece {_aefe :=_b .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",(_fffc .Index ()+1));if _aefe ==_ggga {_edgf :=_b .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",_fffc .Index ());
_gcef ._egc =append (_gcef ._egc ,_fffc .X ());_cag :=_gcef ._dbe .AddRelationship (_edgf ,_g .HeaderType );_cag .SetID (_bdad );_gcef .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_edgf ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");
_gcef ._baa =append (_gcef ._baa ,_ec .NewRelationships ());_aead :=_fffc .Paragraphs ();for _ ,_fegc :=range _aead {for _ ,_daab :=range _fegc .Runs (){_gfb :=_daab .DrawingAnchored ();for _ ,_bcb :=range _gfb {if _bcda ,_cfgc :=_bcb .GetImage ();_cfgc {_dfga =map[int ]_ec .ImageRef {_fffc .Index ():_bcda };
};};_efab :=_daab .DrawingInline ();for _ ,_fdg :=range _efab {if _cfcf ,_gabd :=_fdg .GetImage ();_gabd {_dfga =map[int ]_ec .ImageRef {_fffc .Index ():_cfcf };};};};};};};};for _bdec ,_geaa :=range _dfga {for _ ,_gbad :=range _gcef .Headers (){if (_gbad .Index ()+1)==_bdec {_bfaf ,_ddbg :=_ec .ImageFromFile (_geaa .Path ());
if _ddbg !=nil {_ede .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_ddbg );};if _ ,_ddbg =_gbad .AddImage (_bfaf );_ddbg !=nil {_ede .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_ddbg );
};};for _ ,_egfb :=range _gbad .Paragraphs (){if _dge ,_fbdc :=_aga ._dfcf .Styles .SearchStyleById (_egfb .Style ());_fbdc {if _ ,_agdf :=_gcef .Styles .SearchStyleById (_egfb .Style ());!_agdf {_gcef .Styles .InsertStyle (_dge );};};};};};var _ddgaa map[int ]_ec .ImageRef ;
for _ ,_eggg :=range _aga ._dfcf .Footers (){for _abf ,_cfea :=range _aecf {_deg :=_b .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",(_eggg .Index ()+1));if _deg ==_cfea {_ggc :=_b .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",_eggg .Index ());
_gcef ._ccg =append (_gcef ._ccg ,_eggg .X ());_gbd :=_gcef ._dbe .AddRelationship (_ggc ,_g .FooterType );_gbd .SetID (_abf );_gcef .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_ggc ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");
_gcef ._abb =append (_gcef ._abb ,_ec .NewRelationships ());_bed :=_eggg .Paragraphs ();for _ ,_befb :=range _bed {for _ ,_bcge :=range _befb .Runs (){_daed :=_bcge .DrawingAnchored ();for _ ,_cffb :=range _daed {if _gegc ,_gfad :=_cffb .GetImage ();_gfad {_ddgaa =map[int ]_ec .ImageRef {_eggg .Index ():_gegc };
};};_ceg :=_bcge .DrawingInline ();for _ ,_gfgd :=range _ceg {if _cgc ,_edga :=_gfgd .GetImage ();_edga {_ddgaa =map[int ]_ec .ImageRef {_eggg .Index ():_cgc };};};};};};};};for _ddfb ,_cedd :=range _ddgaa {for _ ,_gbb :=range _gcef .Footers (){if (_gbb .Index ()+1)==_ddfb {_gggc ,_cdc :=_ec .ImageFromFile (_cedd .Path ());
if _cdc !=nil {_ede .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_cdc );};if _ ,_cdc =_gbb .AddImage (_gggc );_cdc !=nil {_ede .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_cdc );
};};for _ ,_decc :=range _gbb .Paragraphs (){if _cbfb ,_gdc :=_aga ._dfcf .Styles .SearchStyleById (_decc .Style ());_gdc {if _ ,_dbg :=_gcef .Styles .SearchStyleById (_decc .Style ());!_dbg {_gcef .Styles .InsertStyle (_cbfb );};};};};};};_edgbec :=_daea .Numbering ();
_gcef .Numbering ._dcaac .AbstractNum =append (_gcef .Numbering ._dcaac .AbstractNum ,_edgbec ._dcaac .AbstractNum ...);_gcef .Numbering ._dcaac .Num =append (_gcef .Numbering ._dcaac .Num ,_edgbec ._dcaac .Num ...);return Paragraph {_gcef ,_daea .X ()};
};func (_edge *Document )GetFontBytesByRelId (relID string )([]byte ,error ){if relID ==""{return nil ,nil ;};_fbff :=_edge ._ege .GetTargetByRelId (relID );_fbff ="\u0077\u006f\u0072d\u002f"+_fbff ;for _ ,_fafcb :=range _edge .ExtraFiles {if _fafcb .ZipPath ==_fbff {_adeb ,_bcebg :=_cd .ReadFile (_fafcb .StoragePath );
if _bcebg !=nil {return nil ,_b .Errorf ("e\u0072r\u006f\u0072\u0020\u0072\u0065\u0061\u0064\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",_fafcb .StoragePath ,_bcebg );};return _adeb ,nil ;};};return nil ,_b .Errorf ("\u0066\u006fn\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u0074\u006f\u0072\u0061\u0067\u0065: \u0025\u0073",_fbff );
};

// AddImageRef add ImageRef to header as relationship, returning ImageRef
// that can be used to be placed as header content.
func (_aaead Header )AddImageRef (r _ec .ImageRef )(_ec .ImageRef ,error ){var _gfba _ec .Relationships ;for _fcdda ,_bcdf :=range _aaead ._gegb ._egc {if _bcdf ==_aaead ._gbeec {_gfba =_aaead ._gegb ._baa [_fcdda ];};};_gdfdb :=_gfba .AddRelationship (r .Target (),_g .ImageType );
r .SetRelID (_gdfdb .X ().IdAttr );return r ,nil ;};

// SetColor sets the text color.
func (_gddag RunProperties )SetColor (c _cb .Color ){_gddag ._dggdd .Color =_be .NewCT_Color ();_gddag ._dggdd .Color .ValAttr .ST_HexColorRGB =c .AsRGBString ();};func (_cddd *Document )getWatermarkHeaderInnerContentPictures ()[]*_be .CT_Picture {var _ggaeb []*_be .CT_Picture ;
for _ ,_dfgf :=range _cddd .Headers (){for _ ,_eaaf :=range _dfgf .X ().EG_BlockLevelElts {for _ ,_fffa :=range _eaaf .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_fdbe :=range _fffa .ContentBlockContentChoice .P {for _ ,_cbbg :=range _fdbe .EG_PContent {for _ ,_dfag :=range _cbbg .PContentChoice .EG_ContentRunContent {if _dfag .ContentRunContentChoice .R ==nil {continue ;
};for _ ,_ecab :=range _dfag .ContentRunContentChoice .R .EG_RunInnerContent {if _ecab .RunInnerContentChoice .Pict ==nil {continue ;};_deagd :=false ;for _ ,_fcfb :=range _ecab .RunInnerContentChoice .Pict .Any {_dagd ,_ddgge :=_fcfb .(*_g .XSDAny );if _ddgge &&_dagd .XMLName .Local =="\u0073\u0068\u0061p\u0065"{_deagd =true ;
};};if _deagd {_ggaeb =append (_ggaeb ,_ecab .RunInnerContentChoice .Pict );};};};};};};};};return _ggaeb ;};

// SetDefaultValue sets the default value of a FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_dgaa FormField )SetDefaultValue (v string ){if _dgaa ._dbgb .FFDataChoice !=nil &&len (_dgaa ._dbgb .FFDataChoice )> 0{if _dgaa ._dbgb .FFDataChoice [0].DdList !=nil {for _efca ,_facad :=range _dgaa .PossibleValues (){if _facad ==v {_dgaa ._dbgb .FFDataChoice [0].DdList .Default =_be .NewCT_DecimalNumber ();
_dgaa ._dbgb .FFDataChoice [0].DdList .Default .ValAttr =int64 (_efca );break ;};};};};};

// SetVerticalMerge controls the vertical merging of cells.
func (_ggg CellProperties )SetVerticalMerge (mergeVal _be .ST_Merge ){if mergeVal ==_be .ST_MergeUnset {_ggg ._fad .VMerge =nil ;}else {_ggg ._fad .VMerge =_be .NewCT_VMerge ();_ggg ._fad .VMerge .ValAttr =mergeVal ;};};

// ParagraphSpacing controls the spacing for a paragraph and its lines.
type ParagraphSpacing struct{_aaec *_be .CT_Spacing };

// SetLeft sets the left border to a specified type, color and thickness.
func (_ddae ParagraphBorders )SetLeft (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_ddae ._edfd .Left =_be .NewCT_Border ();_fgdcg (_ddae ._edfd .Left ,t ,c ,thickness );};

// Paragraphs returns the paragraphs within a structured document tag.
func (_cfbb StructuredDocumentTag )Paragraphs ()[]Paragraph {if _cfbb ._dbge .SdtContent ==nil {return nil ;};_cfcad :=[]Paragraph {};for _ ,_bcff :=range _cfbb ._dbge .SdtContent .EG_ContentBlockContent {for _ ,_eecge :=range _bcff .ContentBlockContentChoice .P {_cfcad =append (_cfcad ,Paragraph {_cfbb ._ggabe ,_eecge });
};};return _cfcad ;};

// X returns the inner wrapped XML type.
func (_addc ParagraphStyleProperties )X ()*_be .CT_PPrGeneral {return _addc ._gbbb };

// Text returns text from the document as one string separated with line breaks.
func (_ccegd *DocText )Text ()string {_bcbge :=_fc .NewBuffer ([]byte {});for _ ,_fbbb :=range _ccegd .Items {if _fbbb .Text !=""{_bcbge .WriteString (_fbbb .Text );_bcbge .WriteString ("\u000a");};};return _bcbge .String ();};

// InsertRowBefore inserts a row before another row
func (_fccag Table )InsertRowBefore (r Row )Row {for _fegcf ,_dgagf :=range _fccag ._dbgfc .EG_ContentRowContent {if len (_dgagf .ContentRowContentChoice .Tr )> 0&&r .X ()==_dgagf .ContentRowContentChoice .Tr [0]{_added :=_be .NewEG_ContentRowContent ();
_fccag ._dbgfc .EG_ContentRowContent =append (_fccag ._dbgfc .EG_ContentRowContent ,nil );copy (_fccag ._dbgfc .EG_ContentRowContent [_fegcf +1:],_fccag ._dbgfc .EG_ContentRowContent [_fegcf :]);_fccag ._dbgfc .EG_ContentRowContent [_fegcf ]=_added ;_abdg :=_be .NewCT_Row ();
_added .ContentRowContentChoice .Tr =append (_added .ContentRowContentChoice .Tr ,_abdg );return Row {_fccag ._bbbfef ,_abdg };};};return _fccag .AddRow ();};

// NewWatermarkText generates a new WatermarkText.
func NewWatermarkText ()WatermarkText {_egcdd :=_bd .NewShapetype ();_gdacb :=_baecc ();_dbacd :=_dgdd ();_dgbbf :=_caff ();_acdfg :=_gcddg ();_gfabb :=_ccbgc ();_egcdd .EG_ShapeElements =[]*_bd .EG_ShapeElements {{ShapeElementsChoice :&_bd .EG_ShapeElementsChoice {Formulas :_gdacb }},{ShapeElementsChoice :&_bd .EG_ShapeElementsChoice {Path :_dbacd }},{ShapeElementsChoice :&_bd .EG_ShapeElementsChoice {Textpath :_dgbbf }},{ShapeElementsChoice :&_bd .EG_ShapeElementsChoice {Handles :_acdfg }},{ShapeElementsChoice :&_bd .EG_ShapeElementsChoice {Lock :_gfabb }}};
var (_adfa ="_\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0031\u0033\u0036";_gacbb ="2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030";_feeab =float32 (136.0);_faabe ="\u0031\u0030\u00380\u0030";_eegc ="m\u0040\u0037\u002c\u006c\u0040\u0038,\u006d\u0040\u0035\u002c\u0032\u0031\u0036\u0030\u0030l\u0040\u0036\u002c2\u00316\u0030\u0030\u0065";
);_egcdd .IdAttr =&_adfa ;_egcdd .CoordsizeAttr =&_gacbb ;_egcdd .SptAttr =&_feeab ;_egcdd .AdjAttr =&_faabe ;_egcdd .PathAttr =&_eegc ;_cefe :=_bd .NewShape ();_cefe .ShapeChoice =append (_cefe .ShapeChoice ,&_bd .CT_ShapeChoice {ShapeElementsChoice :&_bd .EG_ShapeElementsChoice {Fill :_afdc ()}});
_cefe .ShapeChoice =append (_cefe .ShapeChoice ,&_bd .CT_ShapeChoice {ShapeElementsChoice :&_bd .EG_ShapeElementsChoice {Textpath :_faggg ()}});var (_gaebf ="\u0050\u006f\u0077\u0065\u0072\u0050l\u0075\u0073\u0057\u0061\u0074\u0065\u0072\u004d\u0061\u0072\u006b\u004f\u0062j\u0065\u0063\u0074\u0031\u0033\u0036\u00380\u0030\u0038\u0038\u0036";
_bfef ="\u005f\u0078\u00300\u0030\u0030\u005f\u0073\u0032\u0030\u0035\u0031";_befaf ="\u0023\u005f\u00780\u0030\u0030\u0030\u005f\u0074\u0031\u0033\u0036";_adbg ="";_eebad ="\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u003a\u0061bs\u006f\u006c\u0075\u0074\u0065;\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065f\u0074\u003a\u0030\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070\u003a\u0030\u003b\u0077\u0069\u0064\u0074h\u003a\u0034\u0036\u0038\u0070\u0074\u003bh\u0065ig\u0068\u0074\u003a\u0032\u0033\u0034p\u0074\u003b\u007a\u002d\u0069\u006e\u0064\u0065x\u003a\u002d\u0032\u00351\u0036\u0035\u0031\u0030\u0037\u0032\u003b\u006d\u0073o\u002d\u0077r\u0061\u0070\u002d\u0065\u0064\u0069\u0074\u0065\u0064\u003a\u0066\u003b\u006d\u0073\u006f\u002d\u0077\u0069\u0064\u0074\u0068\u002d\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0030\u003b\u006d\u0073\u006f\u002dh\u0065\u0069\u0067\u0068\u0074\u002dp\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0030\u003b\u006d\u0073\u006f\u002dp\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u003a\u0063\u0065\u006e\u0074\u0065r\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006fn\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u002d\u0072\u0065\u006ca\u0074\u0069\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076e\u0072\u0074\u0069\u0063\u0061\u006c\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069o\u006e\u002d\u0076e\u0072\u0074\u0069\u0063\u0061\u006c-\u0072\u0065\u006c\u0061\u0074\u0069v\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e;\u006d\u0073\u006f\u002d\u0077\u0069\u0064\u0074\u0068-p\u0065\u0072\u0063\u0065\u006e\u0074:\u0030\u003b\u006d\u0073\u006f-\u0068\u0065\u0069\u0067\u0068\u0074\u002d\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0030\u003b";
_ggbad ="\u0073\u0069\u006c\u0076\u0065\u0072";);_cefe .IdAttr =&_gaebf ;_cefe .SpidAttr =&_bfef ;_cefe .TypeAttr =&_befaf ;_cefe .AltAttr =&_adbg ;_cefe .StyleAttr =&_eebad ;_cefe .AllowincellAttr =_gfa .ST_TrueFalseFalse ;_cefe .FillcolorAttr =&_ggbad ;
_cefe .StrokedAttr =_gfa .ST_TrueFalseF ;_afac :=_be .NewCT_Picture ();_afac .Any =[]_g .Any {_egcdd ,_cefe };return WatermarkText {_eedac :_afac ,_cgddc :_cefe ,_cbfe :_egcdd };};func (_gcad Paragraph )insertRun (_egef Run ,_eeagf bool )Run {for _ ,_agadb :=range _gcad ._bcaf .EG_PContent {for _afeaea ,_ecgf :=range _agadb .PContentChoice .EG_ContentRunContent {if _ecgf .ContentRunContentChoice .R ==_egef .X (){_dgdgaa :=_be .NewCT_R ();
_agadb .PContentChoice .EG_ContentRunContent =append (_agadb .PContentChoice .EG_ContentRunContent ,nil );if _eeagf {copy (_agadb .PContentChoice .EG_ContentRunContent [_afeaea +1:],_agadb .PContentChoice .EG_ContentRunContent [_afeaea :]);_agadb .PContentChoice .EG_ContentRunContent [_afeaea ]=_be .NewEG_ContentRunContent ();
_agadb .PContentChoice .EG_ContentRunContent [_afeaea ].ContentRunContentChoice .R =_dgdgaa ;}else {copy (_agadb .PContentChoice .EG_ContentRunContent [_afeaea +2:],_agadb .PContentChoice .EG_ContentRunContent [_afeaea +1:]);_agadb .PContentChoice .EG_ContentRunContent [_afeaea +1]=_be .NewEG_ContentRunContent ();
_agadb .PContentChoice .EG_ContentRunContent [_afeaea +1].ContentRunContentChoice .R =_dgdgaa ;};return Run {_gcad ._gfabf ,_dgdgaa };};if _ecgf .ContentRunContentChoice .Sdt !=nil &&_ecgf .ContentRunContentChoice .Sdt .SdtContent !=nil {for _ ,_aaaea :=range _ecgf .ContentRunContentChoice .Sdt .SdtContent .EG_PContent {for _ ,_ecfecg :=range _aaaea .PContentChoice .EG_ContentRunContent {if _ecfecg .ContentRunContentChoice .R ==_egef .X (){_dbdg :=_be .NewCT_R ();
_aaaea .PContentChoice .EG_ContentRunContent =append (_aaaea .PContentChoice .EG_ContentRunContent ,nil );if _eeagf {copy (_aaaea .PContentChoice .EG_ContentRunContent [_afeaea +1:],_aaaea .PContentChoice .EG_ContentRunContent [_afeaea :]);_aaaea .PContentChoice .EG_ContentRunContent [_afeaea ]=_be .NewEG_ContentRunContent ();
_aaaea .PContentChoice .EG_ContentRunContent [_afeaea ].ContentRunContentChoice .R =_dbdg ;}else {copy (_aaaea .PContentChoice .EG_ContentRunContent [_afeaea +2:],_aaaea .PContentChoice .EG_ContentRunContent [_afeaea +1:]);_aaaea .PContentChoice .EG_ContentRunContent [_afeaea +1]=_be .NewEG_ContentRunContent ();
_aaaea .PContentChoice .EG_ContentRunContent [_afeaea +1].ContentRunContentChoice .R =_dbdg ;};return Run {_gcad ._gfabf ,_dbdg };};};};};};};return _gcad .AddRun ();};

// Paragraphs returns the paragraphs defined in an endnote.
func (_fbaf Endnote )Paragraphs ()[]Paragraph {_bbeg :=[]Paragraph {};for _ ,_cgef :=range _fbaf .content (){for _ ,_fddef :=range _cgef .ContentBlockContentChoice .P {_bbeg =append (_bbeg ,Paragraph {_fbaf ._cbbge ,_fddef });};};return _bbeg ;};func (_gdba *Document )putNode (_caac ,_bgbg Node ,_dabb bool )bool {_gdba .insertImageFromNode (_bgbg );
_gdba .insertStyleFromNode (_bgbg );switch _edfc :=_bgbg ._bgcd .(type ){case *Paragraph :if _ecffb ,_cgeb :=_caac .X ().(*Paragraph );_cgeb {_gdba .appendParagraph (_ecffb ,*_edfc ,_dabb );return true ;}else {for _ ,_ggd :=range _caac .Children {if _efdb :=_gdba .putNode (_ggd ,_bgbg ,_dabb );
_efdb {break ;};};};case *Table :if _bdga ,_bdeca :=_caac .X ().(*Paragraph );_bdeca {_aagc :=_gdba .appendTable (_bdga ,*_edfc ,_dabb );_aagc ._dbgfc =_edfc ._dbgfc ;return true ;}else {for _ ,_dfef :=range _caac .Children {if _fceb :=_gdba .putNode (_dfef ,_bgbg ,_dabb );
_fceb {break ;};};};};return false ;};

// SetVerticalAlignment controls the vertical alignment of the run, this is used
// to control if text is superscript/subscript.
func (_gcbe RunProperties )SetVerticalAlignment (v _gfa .ST_VerticalAlignRun ){if v ==_gfa .ST_VerticalAlignRunUnset {_gcbe ._dggdd .VertAlign =nil ;}else {_gcbe ._dggdd .VertAlign =_be .NewCT_VerticalAlignRun ();_gcbe ._dggdd .VertAlign .ValAttr =v ;};
};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_dbag ParagraphStyleProperties )SetKeepOnOnePage (b bool ){if !b {_dbag ._gbbb .KeepLines =nil ;}else {_dbag ._gbbb .KeepLines =_be .NewCT_OnOff ();};};

// UnderlineColor returns the hex color value of paragraph underline.
func (_cceed ParagraphProperties )UnderlineColor ()string {if _bdbg :=_cceed ._fbaa .RPr .U ;_bdbg !=nil {_defdge :=_bdbg .ColorAttr ;if _defdge !=nil &&_defdge .ST_HexColorRGB !=nil {return *_defdge .ST_HexColorRGB ;};};return "";};

// SetLineSpacing controls the line spacing of the paragraph.
func (_gfege ParagraphStyleProperties )SetLineSpacing (m _ac .Distance ,rule _be .ST_LineSpacingRule ){if _gfege ._gbbb .Spacing ==nil {_gfege ._gbbb .Spacing =_be .NewCT_Spacing ();};if rule ==_be .ST_LineSpacingRuleUnset {_gfege ._gbbb .Spacing .LineRuleAttr =_be .ST_LineSpacingRuleUnset ;
_gfege ._gbbb .Spacing .LineAttr =nil ;}else {_gfege ._gbbb .Spacing .LineRuleAttr =rule ;_gfege ._gbbb .Spacing .LineAttr =&_be .ST_SignedTwipsMeasure {};_gfege ._gbbb .Spacing .LineAttr .Int64 =_g .Int64 (int64 (m /_ac .Twips ));};};func (_gbbbb *WatermarkText )getShapeType ()*_g .XSDAny {return _gbbbb .getInnerElement ("\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e");
};

// RunProperties returns the RunProperties controlling numbering level font, etc.
func (_ccdg NumberingLevel )RunProperties ()RunProperties {if _ccdg ._eabd .RPr ==nil {_ccdg ._eabd .RPr =_be .NewCT_RPr ();};return RunProperties {_ccdg ._eabd .RPr };};

// ExtractFromHeader returns text from the document header as an array of TextItems.
func ExtractFromHeader (header *_be .Hdr )[]TextItem {var _egfag []TextItem ;for _ ,_caee :=range header .EG_BlockLevelElts {_egfag =append (_egfag ,_agae (_caee .BlockLevelEltsChoice .EG_ContentBlockContent ,nil )...);};return _egfag ;};

// SetNumberingDefinitionByID sets the numbering definition ID directly, which must
// match an ID defined in numbering.xml
func (_cabcd Paragraph )SetNumberingDefinitionByID (abstractNumberID int64 ){_cabcd .ensurePPr ();if _cabcd ._bcaf .PPr .NumPr ==nil {_cabcd ._bcaf .PPr .NumPr =_be .NewCT_NumPr ();};_dacbd :=_be .NewCT_DecimalNumber ();_dacbd .ValAttr =int64 (abstractNumberID );
_cabcd ._bcaf .PPr .NumPr .NumId =_dacbd ;};func (_ffag Paragraph )addFldChar ()*_be .CT_FldChar {_eecd :=_ffag .AddRun ();_agff :=_eecd .X ();_gaacd :=_be .NewEG_RunInnerContent ();_fdfba :=_be .NewCT_FldChar ();_gaacd .RunInnerContentChoice .FldChar =_fdfba ;
_agff .EG_RunInnerContent =append (_agff .EG_RunInnerContent ,_gaacd );return _fdfba ;};func _gdce (_dgda *_be .CT_Tbl ,_bgbb ,_bfdda map[int64 ]int64 ){for _ ,_bfeb :=range _dgda .EG_ContentRowContent {for _ ,_geae :=range _bfeb .ContentRowContentChoice .Tr {for _ ,_geggc :=range _geae .EG_ContentCellContent {for _ ,_abga :=range _geggc .ContentCellContentChoice .Tc {for _ ,_dbba :=range _abga .EG_BlockLevelElts {for _ ,_aeeeb :=range _dbba .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_fcegc :=range _aeeeb .ContentBlockContentChoice .P {_febb (_fcegc ,_bgbb ,_bfdda );
};for _ ,_ade :=range _aeeeb .ContentBlockContentChoice .Tbl {_gdce (_ade ,_bgbb ,_bfdda );};};};};};};};};

// Definitions returns the defined numbering definitions.
func (_acbgg Numbering )Definitions ()[]NumberingDefinition {_gadc :=[]NumberingDefinition {};if _acbgg ._dcaac !=nil {for _ ,_gfadfb :=range _acbgg ._dcaac .AbstractNum {_gadc =append (_gadc ,NumberingDefinition {_gfadfb });};};return _gadc ;};

// CloseComment will close the comment.
func (_fecc Paragraph )CloseComment (commentId int64 ){_fecc .addEndComment (commentId );_bbecf :=_fecc .AddRun ();_bbecf .AddCommentReference (commentId );_cfgfa :=_bbecf .Properties ();_cfgfa .SetStyle (_agf );};

// Spacing returns the paragraph spacing settings.
func (_ccfae ParagraphProperties )Spacing ()ParagraphSpacing {if _ccfae ._fbaa .Spacing ==nil {_ccfae ._fbaa .Spacing =_be .NewCT_Spacing ();};return ParagraphSpacing {_ccfae ._fbaa .Spacing };};

// SetId sets the id of the image.
func (_ba AnchoredDrawing )SetId (id uint32 ){for _ ,_fe :=range _ba ._cg .Graphic .GraphicData .Any {if _efa ,_daf :=_fe .(*_fb .Pic );_daf {_efa .NvPicPr .CNvPr .IdAttr =id ;};};};

// MultiLevelType returns the multilevel type, or ST_MultiLevelTypeUnset if not set.
func (_egdge NumberingDefinition )MultiLevelType ()_be .ST_MultiLevelType {if _egdge ._dbgg .MultiLevelType !=nil {return _egdge ._dbgg .MultiLevelType .ValAttr ;}else {return _be .ST_MultiLevelTypeUnset ;};};

// ReplaceTextByRegexp replace the text within node using regexp expression.
func (_cdce *Node )ReplaceTextByRegexp (rgx *_ed .Regexp ,newText string ){switch _bcgd :=_cdce .X ().(type ){case *Paragraph :for _ ,_cbfg :=range _bcgd .Runs (){for _ ,_badd :=range _cbfg ._fgad .EG_RunInnerContent {if _badd .RunInnerContentChoice .T !=nil {_bbbec :=_badd .RunInnerContentChoice .T .Content ;
_bbbec =rgx .ReplaceAllString (_bbbec ,newText );_badd .RunInnerContentChoice .T .Content =_bbbec ;};};};};for _ ,_gcgf :=range _cdce .Children {_gcgf .ReplaceTextByRegexp (rgx ,newText );};};type mergeFieldInfo struct{_eegef string ;_gaca string ;_ggfde string ;
_fefb bool ;_deffa bool ;_ggfdeg bool ;_bcfc bool ;_fage Paragraph ;_gfbac ,_bcdfc ,_dbed int ;_eeag *_be .EG_PContent ;_babg bool ;};

// X returns the inner wrapped XML type.
func (_gdfca RunProperties )X ()*_be .CT_RPr {return _gdfca ._dggdd };

// InitializeDefault constructs the default styles.
func (_fefde Styles )InitializeDefault (){_fefde .initializeDocDefaults ();_fefde .initializeStyleDefaults ();};

// AddParagraph adds a paragraph to the footnote.
func (_edcc Footnote )AddParagraph ()Paragraph {_aeeb :=_be .NewEG_ContentBlockContent ();_ddfgd :=len (_edcc ._debf .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent );_edcc ._debf .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent =append (_edcc ._debf .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent ,_aeeb );
_debgc :=_be .NewCT_P ();var _aggge *_be .CT_String ;if _ddfgd !=0{_adfcf :=len (_edcc ._debf .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent [_ddfgd -1].ContentBlockContentChoice .P );_aggge =_edcc ._debf .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent [_ddfgd -1].ContentBlockContentChoice .P [_adfcf -1].PPr .PStyle ;
}else {_aggge =_be .NewCT_String ();_aggge .ValAttr =FootnoteTextStyleId ;};_aeeb .ContentBlockContentChoice .P =append (_aeeb .ContentBlockContentChoice .P ,_debgc );_begg :=Paragraph {_edcc ._afda ,_debgc };_begg ._bcaf .PPr =_be .NewCT_PPr ();_begg ._bcaf .PPr .PStyle =_aggge ;
_begg ._bcaf .PPr .RPr =_be .NewCT_ParaRPr ();return _begg ;};

// AddText adds text to a run.
func (_bbgc Run )AddText (s string ){_edffe :=_be .NewEG_RunInnerContent ();_bbgc ._fgad .EG_RunInnerContent =append (_bbgc ._fgad .EG_RunInnerContent ,_edffe );_edffe .RunInnerContentChoice .T =_be .NewCT_Text ();if _g .NeedsSpacePreserve (s ){_efccg :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";
_edffe .RunInnerContentChoice .T .SpaceAttr =&_efccg ;};_edffe .RunInnerContentChoice .T .Content =s ;};

// AddEndnote will create a new endnote and attach it to the Paragraph in the
// location at the end of the previous run (endnotes create their own run within
// the paragraph. The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the endnote later.
func (_acge Paragraph )AddEndnote (text string )Endnote {var _cegb int64 ;if _acge ._gfabf .HasEndnotes (){for _ ,_efbbe :=range _acge ._gfabf .Endnotes (){if _efbbe .id ()> _cegb {_cegb =_efbbe .id ();};};_cegb ++;}else {_acge ._gfabf .addEndnotes ();
_cegb =1;};_eadg :=_be .NewCT_FtnEdn ();_fgfcc :=_be .NewCT_FtnEdnRef ();_fgfcc .IdAttr =_cegb ;_acge ._gfabf ._dbc .CT_Endnotes .Endnote =append (_acge ._gfabf ._dbc .CT_Endnotes .Endnote ,_eadg );_dbff :=_acge .AddRun ();_bgafe :=_dbff .Properties ();
_bgafe .SetStyle (_gac );_dbff ._fgad .EG_RunInnerContent =[]*_be .EG_RunInnerContent {_be .NewEG_RunInnerContent ()};_dbff ._fgad .EG_RunInnerContent [0].RunInnerContentChoice .EndnoteReference =_fgfcc ;_cgeg :=Endnote {_acge ._gfabf ,_eadg };_cgeg ._dbda .IdAttr =_cegb ;
_cgeg ._dbda .EG_BlockLevelElts =[]*_be .EG_BlockLevelElts {_be .NewEG_BlockLevelElts ()};_bcefg :=_cgeg .AddParagraph ();_bcefg .Properties ().SetStyle (EndnoteTextStyleId );_bcefg ._bcaf .PPr .RPr =_be .NewCT_ParaRPr ();_acgeb :=_bcefg .AddRun ();_eabg :=_acgeb .Properties ();
_eabg .SetStyle (_gac );_acgeb .AddEndnoteReference ();_bebb :=_bcefg .AddRun ();_bebb .AddText ("\u0020");_bebb =_bcefg .AddRun ();_bebb .AddText (text );return _cgeg ;};func (_cebg *Document )insertParagraph (_ccgbb Paragraph ,_ddcc bool )Paragraph {if _cebg ._cgb .Body ==nil {return _cebg .AddParagraph ();
};_bafge :=_ccgbb .X ();for _ ,_cfbfd :=range _cebg ._cgb .Body .EG_BlockLevelElts {for _ ,_ddacb :=range _cfbfd .BlockLevelEltsChoice .EG_ContentBlockContent {for _bffb ,_faca :=range _ddacb .ContentBlockContentChoice .P {if _faca ==_bafge {_bcef :=_be .NewCT_P ();
_ddacb .ContentBlockContentChoice .P =append (_ddacb .ContentBlockContentChoice .P ,nil );if _ddcc {copy (_ddacb .ContentBlockContentChoice .P [_bffb +1:],_ddacb .ContentBlockContentChoice .P [_bffb :]);_ddacb .ContentBlockContentChoice .P [_bffb ]=_bcef ;
}else {copy (_ddacb .ContentBlockContentChoice .P [_bffb +2:],_ddacb .ContentBlockContentChoice .P [_bffb +1:]);_ddacb .ContentBlockContentChoice .P [_bffb +1]=_bcef ;};return Paragraph {_cebg ,_bcef };};};for _ ,_eced :=range _ddacb .ContentBlockContentChoice .Tbl {for _ ,_dgdga :=range _eced .EG_ContentRowContent {for _ ,_efbc :=range _dgdga .ContentRowContentChoice .Tr {for _ ,_fdfc :=range _efbc .EG_ContentCellContent {for _ ,_ddgf :=range _fdfc .ContentCellContentChoice .Tc {for _ ,_acff :=range _ddgf .EG_BlockLevelElts {for _ ,_gaag :=range _acff .BlockLevelEltsChoice .EG_ContentBlockContent {for _gabg ,_cbfda :=range _gaag .ContentBlockContentChoice .P {if _cbfda ==_bafge {_faae :=_be .NewCT_P ();
_gaag .ContentBlockContentChoice .P =append (_gaag .ContentBlockContentChoice .P ,nil );if _ddcc {copy (_gaag .ContentBlockContentChoice .P [_gabg +1:],_gaag .ContentBlockContentChoice .P [_gabg :]);_gaag .ContentBlockContentChoice .P [_gabg ]=_faae ;}else {copy (_gaag .ContentBlockContentChoice .P [_gabg +2:],_gaag .ContentBlockContentChoice .P [_gabg +1:]);
_gaag .ContentBlockContentChoice .P [_gabg +1]=_faae ;};return Paragraph {_cebg ,_faae };};};};};};};};};};if _ddacb .ContentBlockContentChoice .Sdt !=nil &&_ddacb .ContentBlockContentChoice .Sdt .SdtContent !=nil {for _ ,_caecb :=range _ddacb .ContentBlockContentChoice .Sdt .SdtContent .EG_ContentBlockContent {for _gfbg ,_gbda :=range _caecb .ContentBlockContentChoice .P {if _gbda ==_bafge {_ggffe :=_be .NewCT_P ();
_caecb .ContentBlockContentChoice .P =append (_caecb .ContentBlockContentChoice .P ,nil );if _ddcc {copy (_caecb .ContentBlockContentChoice .P [_gfbg +1:],_caecb .ContentBlockContentChoice .P [_gfbg :]);_caecb .ContentBlockContentChoice .P [_gfbg ]=_ggffe ;
}else {copy (_caecb .ContentBlockContentChoice .P [_gfbg +2:],_caecb .ContentBlockContentChoice .P [_gfbg +1:]);_caecb .ContentBlockContentChoice .P [_gfbg +1]=_ggffe ;};return Paragraph {_cebg ,_ggffe };};};};};};};return _cebg .AddParagraph ();};

// Copy makes a deep copy of the document by saving and reading it back.
// It can be useful to avoid sharing common data between two documents.
func (_gffeb *Document )Copy ()(*Document ,error ){_ggec :=_fc .NewBuffer ([]byte {});_daabe :=_gffeb .save (_ggec ,_gffeb ._gca );if _daabe !=nil {return nil ,_daabe ;};_efec :=_ggec .Bytes ();_dged :=_fc .NewReader (_efec );return _dbece (_dged ,int64 (_dged .Len ()),_gffeb ._gca );
};

// SetLeftIndent controls left indent of paragraph.
func (_cccb Paragraph )SetLeftIndent (m _ac .Distance ){_cccb .ensurePPr ();_egbd :=_cccb ._bcaf .PPr ;if _egbd .Ind ==nil {_egbd .Ind =_be .NewCT_Ind ();};if m ==_ac .Zero {_egbd .Ind .LeftAttr =nil ;}else {_egbd .Ind .LeftAttr =&_be .ST_SignedTwipsMeasure {};
_egbd .Ind .LeftAttr .Int64 =_g .Int64 (int64 (m /_ac .Twips ));};};func (_abdb Document )mergeFields ()[]mergeFieldInfo {_ebbe :=[]Paragraph {};_dccc :=[]mergeFieldInfo {};for _ ,_eaca :=range _abdb .Tables (){for _ ,_cdad :=range _eaca .Rows (){for _ ,_efcbg :=range _cdad .Cells (){_ebbe =append (_ebbe ,_efcbg .Paragraphs ()...);
};};};_ebbe =append (_ebbe ,_abdb .Paragraphs ()...);for _ ,_bcccb :=range _abdb .Headers (){_ebbe =append (_ebbe ,_bcccb .Paragraphs ()...);for _ ,_egfgc :=range _bcccb .Tables (){for _ ,_dfaafg :=range _egfgc .Rows (){for _ ,_ggeg :=range _dfaafg .Cells (){_ebbe =append (_ebbe ,_ggeg .Paragraphs ()...);
};};};};for _ ,_gebga :=range _abdb .Footers (){_ebbe =append (_ebbe ,_gebga .Paragraphs ()...);for _ ,_aeef :=range _gebga .Tables (){for _ ,_eagc :=range _aeef .Rows (){for _ ,_affgf :=range _eagc .Cells (){_ebbe =append (_ebbe ,_affgf .Paragraphs ()...);
};};};};for _ ,_dgage :=range _ebbe {_dcff :=_dgage .Runs ();_egegb :=-1;_bbeda :=-1;_bbec :=-1;_acfa :=mergeFieldInfo {};for _ ,_cbgg :=range _dgage ._bcaf .EG_PContent {for _ ,_bfdfd :=range _cbgg .PContentChoice .FldSimple {if _cc .Contains (_bfdfd .InstrAttr ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){_cbac :=_gfcgb (_bfdfd .InstrAttr );
_cbac ._babg =true ;_cbac ._fage =_dgage ;_cbac ._eeag =_cbgg ;_dccc =append (_dccc ,_cbac );};};};for _febbb :=0;_febbb < len (_dcff );_febbb ++{_cbgcc :=_dcff [_febbb ];for _ ,_badc :=range _cbgcc .X ().EG_RunInnerContent {if _badc .RunInnerContentChoice .FldChar !=nil {switch _badc .RunInnerContentChoice .FldChar .FldCharTypeAttr {case _be .ST_FldCharTypeBegin :_egegb =_febbb ;
case _be .ST_FldCharTypeSeparate :_bbeda =_febbb ;case _be .ST_FldCharTypeEnd :_bbec =_febbb ;if _acfa ._eegef !=""{_acfa ._fage =_dgage ;_acfa ._gfbac =_egegb ;_acfa ._dbed =_bbec ;_acfa ._bcdfc =_bbeda ;_dccc =append (_dccc ,_acfa );};_egegb =-1;_bbeda =-1;
_bbec =-1;_acfa =mergeFieldInfo {};};}else if _badc .RunInnerContentChoice .InstrText !=nil &&_cc .Contains (_badc .RunInnerContentChoice .InstrText .Content ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){if _egegb !=-1&&_bbec ==-1{_acfa =_gfcgb (_badc .RunInnerContentChoice .InstrText .Content );
};};};};};return _dccc ;};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_gabdb ParagraphProperties )RStyle ()string {if _gabdb ._fbaa .RPr .RStyle !=nil {return _gabdb ._fbaa .RPr .RStyle .ValAttr ;};return "";};

// GetText returns text in the watermark.
func (_efcce *WatermarkText )GetText ()string {_bcfe :=_efcce .getShape ();if _efcce ._cgddc !=nil {_ddgfe :=_efcce ._cgddc .ShapeChoice ;for _ ,_edfba :=range _ddgfe {if _edfba .ShapeElementsChoice .Textpath !=nil {return *_edfba .ShapeElementsChoice .Textpath .StringAttr ;
};};}else {_cbbgg :=_efcce .findNode (_bcfe ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _ ,_ceca :=range _cbbgg .Attrs {if _ceca .Name .Local =="\u0073\u0074\u0072\u0069\u006e\u0067"{return _ceca .Value ;};};};return "";};func (_cdf *Document )InsertTableBefore (relativeTo Paragraph )Table {return _cdf .insertTable (relativeTo ,true );
};

// SetWidth sets the table with to a specified width.
func (_aeggd TableProperties )SetWidth (d _ac .Distance ){_aeggd ._gdfab .TblW =_be .NewCT_TblWidth ();_aeggd ._gdfab .TblW .TypeAttr =_be .ST_TblWidthDxa ;_aeggd ._gdfab .TblW .WAttr =&_be .ST_MeasurementOrPercent {};_aeggd ._gdfab .TblW .WAttr .ST_DecimalNumberOrPercent =&_be .ST_DecimalNumberOrPercent {};
_aeggd ._gdfab .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (d /_ac .Twips ));};func (_fbfd *Document )reorderFootnote (){_gcac :=int64 (1);_baff :=map[int64 ]int64 {};for _ ,_ggcb :=range _fbfd ._edf .Footnote {switch _ggcb .TypeAttr {case _be .ST_FtnEdnSeparator :_ggcb .IdAttr =-1;
break ;case _be .ST_FtnEdnContinuationSeparator :_ggcb .IdAttr =0;break ;default:_baff [_ggcb .IdAttr ]=_gcac ;_ggcb .IdAttr =_gcac ;_gcac ++;};};for _ ,_cdb :=range _fbfd .Paragraphs (){for _ ,_bee :=range _cdb .Runs (){if _cadd ,_febd :=_bee .IsFootnote ();
_cadd {_bee .X ().EG_RunInnerContent [0].RunInnerContentChoice .FootnoteReference .IdAttr =_baff [_febd ];};};};};

// Name returns the name of the field.
func (_aaafb FormField )Name ()string {if _aaafb ._dbgb .FFDataChoice ==nil ||len (_aaafb ._dbgb .FFDataChoice )==0{return "";};return *_aaafb ._dbgb .FFDataChoice [0].Name .ValAttr ;};func _daae (_ffdab *_be .CT_P ,_feffa *_be .CT_Hyperlink ,_bbde *TableInfo ,_geba *DrawingInfo ,_fgaab []*_be .EG_PContent )[]TextItem {if len (_fgaab )==0{return []TextItem {TextItem {Text :"",DrawingInfo :_geba ,Paragraph :_ffdab ,Hyperlink :_feffa ,Run :nil ,TableInfo :_bbde }};
};_bbabd :=[]TextItem {};for _ ,_dfbaf :=range _fgaab {for _ ,_gdfe :=range _dfbaf .PContentChoice .FldSimple {if _gdfe !=nil {_bbabd =append (_bbabd ,_daae (_ffdab ,_feffa ,_bbde ,_geba ,_gdfe .EG_PContent )...);};};if _cgddb :=_dfbaf .PContentChoice .Hyperlink ;
_cgddb !=nil {_bbabd =append (_bbabd ,_baeb (_ffdab ,_cgddb ,_bbde ,_geba ,_cgddb .PContentChoice .EG_ContentRunContent )...);};_bbabd =append (_bbabd ,_baeb (_ffdab ,nil ,_bbde ,_geba ,_dfbaf .PContentChoice .EG_ContentRunContent )...);};return _bbabd ;
};

// SetToolTip sets the tooltip text for a hyperlink.
func (_ggdc HyperLink )SetToolTip (text string ){if text ==""{_ggdc ._caddg .TooltipAttr =nil ;}else {_ggdc ._caddg .TooltipAttr =_g .String (text );};};

// TableProperties returns the table style properties.
func (_fagef Style )TableProperties ()TableStyleProperties {if _fagef ._gegdgf .TblPr ==nil {_fagef ._gegdgf .TblPr =_be .NewCT_TblPrBase ();};return TableStyleProperties {_fagef ._gegdgf .TblPr };};func (_fffca *Document )syncFootnoteSettings (){_bbdc :=[]int64 {};
_eaad :=_fffca .Footnotes ();for _ ,_fbce :=range _eaad {if _fbce .X ().TypeAttr !=_be .ST_FtnEdnUnset &&_fbce .X ().TypeAttr !=_be .ST_FtnEdnNormal {_bbdc =append (_bbdc ,_fbce .X ().IdAttr );};};_dgac :=_fffca .Settings .X ().CT_Settings .FootnotePr ;
if _dgac ==nil {_dgac =_be .NewCT_FtnDocProps ();};if len (_bbdc )==0{_dgac .Footnote =nil ;return ;};_dgac .Footnote =[]*_be .CT_FtnEdnSepRef {};for _ ,_dbae :=range _bbdc {_ggge :=_be .NewCT_FtnEdnSepRef ();_ggge .IdAttr =_dbae ;_dgac .Footnote =append (_dgac .Footnote ,_ggge );
};};

// ParagraphStyleProperties is the styling information for a paragraph.
type ParagraphStyleProperties struct{_gbbb *_be .CT_PPrGeneral };

// CellBorders are the borders for an individual
type CellBorders struct{_bce *_be .CT_TcBorders };

// RunProperties returns the run style properties.
func (_cfggd Style )RunProperties ()RunProperties {if _cfggd ._gegdgf .RPr ==nil {_cfggd ._gegdgf .RPr =_be .NewCT_RPr ();};return RunProperties {_cfggd ._gegdgf .RPr };};

// SetYOffset sets the Y offset for an image relative to the origin.
func (_af AnchoredDrawing )SetYOffset (y _ac .Distance ){_af ._cg .PositionV .PosVChoice =&_be .WdCT_PosVChoice {};_af ._cg .PositionV .PosVChoice .PosOffset =_g .Int32 (int32 (y /_ac .EMU ));};

// SetAlignment controls the paragraph alignment
func (_bbee ParagraphStyleProperties )SetAlignment (align _be .ST_Jc ){if align ==_be .ST_JcUnset {_bbee ._gbbb .Jc =nil ;}else {_bbee ._gbbb .Jc =_be .NewCT_Jc ();_bbee ._gbbb .Jc .ValAttr =align ;};};

// AddAnnotationReference adds annotation reference to a run.
func (_gfec Run )AddAnnotationReference (){_cefbd :=_gfec .newIC ();_cefbd .RunInnerContentChoice .AnnotationRef =_be .NewCT_Empty ();};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_be .CT_Tbl ;Row *_be .CT_Row ;Cell *_be .CT_Tc ;RowIndex int ;ColIndex int ;};

// AddTOC adds a table of contents to the document and customize it according to TOCOptions if necessary.
func (_ecege Run )AddTOC (options *TOCOptions ){_gaffc :="";if options !=nil {if options .UseHyperlinks {_gaffc +="\u0020\u005c\u0068\u0020";};if options .OmitPageNumbers {_gaffc +="\u0020\u005c\u006e\u0020";};if options .HeadingLevel !=""{_gaffc +="\u0020\u005c\u006f \u0027"+options .HeadingLevel +"\u0027";
};};_ecege .AddFieldWithFormatting (FieldTOC ,_gaffc ,true );};

// Imprint returns true if run imprint is on.
func (_cagf RunProperties )Imprint ()bool {return _bgba (_cagf ._dggdd .Imprint )};

// Borders allows controlling individual cell borders.
func (_agda CellProperties )Borders ()CellBorders {if _agda ._fad .TcBorders ==nil {_agda ._fad .TcBorders =_be .NewCT_TcBorders ();};return CellBorders {_agda ._fad .TcBorders };};

// Paragraphs returns the paragraphs defined in a footnote.
func (_dgee Footnote )Paragraphs ()[]Paragraph {_dfeg :=[]Paragraph {};for _ ,_bgcc :=range _dgee .content (){for _ ,_abegd :=range _bgcc .ContentBlockContentChoice .P {_dfeg =append (_dfeg ,Paragraph {_dgee ._afda ,_abegd });};};return _dfeg ;};

// Bookmark is a bookmarked location within a document that can be referenced
// with a hyperlink.
type Bookmark struct{_bcgf *_be .CT_Bookmark };

// Styles is the document wide styles contained in styles.xml.
type Styles struct{_effe *_be .Styles };

// SetBeforeAuto controls if spacing before a paragraph is automatically determined.
func (_fcac ParagraphSpacing )SetBeforeAuto (b bool ){if b {_fcac ._aaec .BeforeAutospacingAttr =&_gfa .ST_OnOff {};_fcac ._aaec .BeforeAutospacingAttr .Bool =_g .Bool (true );}else {_fcac ._aaec .BeforeAutospacingAttr =nil ;};};

// SetAfterLineSpacing sets spacing below paragraph in line units.
func (_befe Paragraph )SetAfterLineSpacing (d _ac .Distance ){_befe .ensurePPr ();if _befe ._bcaf .PPr .Spacing ==nil {_befe ._bcaf .PPr .Spacing =_be .NewCT_Spacing ();};_dgdb :=_befe ._bcaf .PPr .Spacing ;_dgdb .AfterLinesAttr =_g .Int64 (int64 (d /_ac .Twips ));
};

// Clear resets the numbering.
func (_dfff Numbering )Clear (){_dfff ._dcaac .AbstractNum =nil ;_dfff ._dcaac .Num =nil ;_dfff ._dcaac .NumIdMacAtCleanup =nil ;_dfff ._dcaac .NumPicBullet =nil ;};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_ebcaf TableBorders )SetBottom (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_ebcaf ._ddbeg .Bottom =_be .NewCT_Border ();_gdff (_ebcaf ._ddbeg .Bottom ,t ,c ,thickness );};

// SetSoftEdgeImageEffect sets the soft edge image effect.
func (_aaa AnchoredDrawing )SetSoftEdgeImageEffect (radius _ac .Distance ){_cfb :=_ac .ToEMU (float64 (radius ));for _ ,_bgga :=range _aaa ._cg .Graphic .GraphicData .Any {if _df ,_gda :=_bgga .(*_fb .Pic );_gda {_aaa .initializeEffectList (_df .SpPr );
_df .SpPr .EffectPropertiesChoice .EffectLst .SoftEdge =_fce .NewCT_SoftEdgesEffect ();_df .SpPr .EffectPropertiesChoice .EffectLst .SoftEdge .RadAttr =_cfb ;};};};

// AddFieldWithFormatting adds a field (automatically computed text) to the
// document with field specifc formatting.
func (_aabee Run )AddFieldWithFormatting (code string ,fmt string ,isDirty bool ){_caadg :=_aabee .newIC ();_caadg .RunInnerContentChoice .FldChar =_be .NewCT_FldChar ();_caadg .RunInnerContentChoice .FldChar .FldCharTypeAttr =_be .ST_FldCharTypeBegin ;
if isDirty {_caadg .RunInnerContentChoice .FldChar .DirtyAttr =&_gfa .ST_OnOff {};_caadg .RunInnerContentChoice .FldChar .DirtyAttr .Bool =_g .Bool (true );};_caadg =_aabee .newIC ();_caadg .RunInnerContentChoice .InstrText =_be .NewCT_Text ();if fmt !=""{_caadg .RunInnerContentChoice .InstrText .Content =code +"\u0020"+fmt ;
}else {_caadg .RunInnerContentChoice .InstrText .Content =code ;};_caadg =_aabee .newIC ();_caadg .RunInnerContentChoice .FldChar =_be .NewCT_FldChar ();_caadg .RunInnerContentChoice .FldChar .FldCharTypeAttr =_be .ST_FldCharTypeEnd ;};func (_bgd *chart )Target ()string {return _bgd ._gea };


// RemoveParagraph removes a paragraph from the endnote.
func (_bcbab Endnote )RemoveParagraph (p Paragraph ){for _ ,_bccac :=range _bcbab .content (){for _egfga ,_faea :=range _bccac .ContentBlockContentChoice .P {if _faea ==p ._bcaf {copy (_bccac .ContentBlockContentChoice .P [_egfga :],_bccac .ContentBlockContentChoice .P [_egfga +1:]);
_bccac .ContentBlockContentChoice .P =_bccac .ContentBlockContentChoice .P [0:len (_bccac .ContentBlockContentChoice .P )-1];return ;};};};};func _dgdd ()*_bd .Path {_geeab :=_bd .NewPath ();_geeab .TextpathokAttr =_gfa .ST_TrueFalseTrue ;_geeab .ConnecttypeAttr =_bd .OfcST_ConnectTypeCustom ;
_cade :="\u0040\u0039\u002c0;\u0040\u0031\u0030\u002c\u0031\u0030\u0038\u0030\u0030;\u00401\u0031,\u00321\u0036\u0030\u0030\u003b\u0040\u0031\u0032\u002c\u0031\u0030\u0038\u0030\u0030";_geeab .ConnectlocsAttr =&_cade ;_efdgf :="\u0032\u0037\u0030,\u0031\u0038\u0030\u002c\u0039\u0030\u002c\u0030";
_geeab .ConnectanglesAttr =&_efdgf ;return _geeab ;};

// ComplexSizeValue returns the value of paragraph font size for complex fonts in points.
func (_egge ParagraphProperties )ComplexSizeValue ()float64 {if _bbae :=_egge ._fbaa .RPr .SzCs ;_bbae !=nil {_fefbf :=_bbae .ValAttr ;if _fefbf .ST_UnsignedDecimalNumber !=nil {return float64 (*_fefbf .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetTop sets the cell top margin
func (_dga CellMargins )SetTop (d _ac .Distance ){_dga ._adde .Top =_be .NewCT_TblWidth ();_eag (_dga ._adde .Top ,d );};func _gfcgb (_feae string )mergeFieldInfo {_gbbd :=[]string {};_fdcf :=_fc .Buffer {};_gfbd :=-1;for _cgda ,_agcb :=range _feae {switch _agcb {case ' ':if _fdcf .Len ()!=0{_gbbd =append (_gbbd ,_fdcf .String ());
};_fdcf .Reset ();case '"':if _gfbd !=-1{_gbbd =append (_gbbd ,_feae [_gfbd +1:_cgda ]);_gfbd =-1;}else {_gfbd =_cgda ;};default:_fdcf .WriteRune (_agcb );};};if _fdcf .Len ()!=0{_gbbd =append (_gbbd ,_fdcf .String ());};_fcgb :=mergeFieldInfo {};for _ggfc :=0;
_ggfc < len (_gbbd )-1;_ggfc ++{_eafga :=_gbbd [_ggfc ];switch _eafga {case "\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044":_fcgb ._eegef =_gbbd [_ggfc +1];_ggfc ++;case "\u005c\u0066":_fcgb ._gaca =_gbbd [_ggfc +1];_ggfc ++;case "\u005c\u0062":_fcgb ._ggfde =_gbbd [_ggfc +1];
_ggfc ++;case "\u005c\u002a":switch _gbbd [_ggfc +1]{case "\u0055\u0070\u0070e\u0072":_fcgb ._fefb =true ;case "\u004c\u006f\u0077e\u0072":_fcgb ._deffa =true ;case "\u0043\u0061\u0070\u0073":_fcgb ._bcfc =true ;case "\u0046\u0069\u0072\u0073\u0074\u0043\u0061\u0070":_fcgb ._ggfdeg =true ;
};_ggfc ++;};};return _fcgb ;};

// Comment returns comment associated with given id.
func (_dbcb *Document )Comment (id int64 )Comment {for _ ,_abec :=range _dbcb .Comments (){if _abec .id ()==id {return _abec ;};};return Comment {};};

// Open opens and reads a document from a file (.docx).
func Open (filename string )(*Document ,error ){_gcd ,_ddab :=_cd .Open (filename );if _ddab !=nil {return nil ,_b .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_ddab );};defer _gcd .Close ();
_bcba ,_ddab :=_cd .Stat (filename );if _ddab !=nil {return nil ,_b .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_ddab );};_ =_bcba ;return Read (_gcd ,_bcba .Size ());};

// FontTable returns document fontTable element.
func (_dgfe *Document )FontTable ()*_be .Fonts {return _dgfe ._gaa };

// Paragraph is a paragraph within a document.
type Paragraph struct{_gfabf *Document ;_bcaf *_be .CT_P ;};const _fgdd ="\u0046\u006f\u0072\u006d\u0046\u0069\u0065l\u0064\u0054\u0079\u0070\u0065\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0046\u006fr\u006dF\u0069\u0065\u006c\u0064\u0054\u0079p\u0065\u0054\u0065\u0078\u0074\u0046\u006fr\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0043\u0068\u0065\u0063\u006b\u0042\u006f\u0078\u0046\u006f\u0072\u006d\u0046i\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0044\u0072\u006f\u0070\u0044\u006fw\u006e";


// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_dfccg Header )AddImage (i _ec .Image )(_ec .ImageRef ,error ){var _bbbed _ec .Relationships ;for _cfeb ,_cfcbgb :=range _dfccg ._gegb ._egc {if _cfcbgb ==_dfccg ._gbeec {_bbbed =_dfccg ._gegb ._baa [_cfeb ];};};_befa :=_ec .MakeImageRef (i ,&_dfccg ._gegb .DocBase ,_bbbed );
if i .Data ==nil &&i .Path ==""{return _befa ,_a .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _befa ,_a .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};if i .Size .X ==0||i .Size .Y ==0{return _befa ,_a .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_dfccg ._gegb .Images =append (_dfccg ._gegb .Images ,_befa );
_ecec :=_b .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_dfccg ._gegb .Images ),i .Format );_dcee :=_bbbed .AddRelationship (_ecec ,_g .ImageType );_befa .SetRelID (_dcee .X ().IdAttr );return _befa ,nil ;
};func _bdgac (_bgdd *Document )map[int64 ]map[int64 ]int64 {_edefg :=_bgdd .Paragraphs ();_bdba :=make (map[int64 ]map[int64 ]int64 ,0);for _ ,_afced :=range _edefg {_degad :=_becgb (_bgdd ,_afced );if _degad .NumberingLevel !=nil &&_degad .AbstractNumId !=nil {_fcbfa :=*_degad .AbstractNumId ;
if _ ,_cafae :=_bdba [_fcbfa ];_cafae {if _ebce :=_degad .NumberingLevel .X ();_ebce !=nil {if _ ,_dfdb :=_bdba [_fcbfa ][_ebce .IlvlAttr ];_dfdb {_bdba [_fcbfa ][_ebce .IlvlAttr ]++;}else {_bdba [_fcbfa ][_ebce .IlvlAttr ]=1;};};}else {if _efbbb :=_degad .NumberingLevel .X ();
_efbbb !=nil {_bdba [_fcbfa ]=map[int64 ]int64 {_efbbb .IlvlAttr :1};};};};};return _bdba ;};

// StructuredDocumentTag are a tagged bit of content in a document.
type StructuredDocumentTag struct{_ggabe *Document ;_dbge *_be .CT_SdtBlock ;};

// AddBookmark adds a bookmark to a document that can then be used from a hyperlink. Name is a document
// unique name that identifies the bookmark so it can be referenced from hyperlinks.
func (_bgac Paragraph )AddBookmark (name string )Bookmark {_cfgfc :=_be .NewEG_PContent ();_fcdg :=_be .NewEG_ContentRunContent ();_cfgfc .PContentChoice .EG_ContentRunContent =append (_cfgfc .PContentChoice .EG_ContentRunContent ,_fcdg );_abaag :=_be .NewEG_RunLevelElts ();
_fcdg .ContentRunContentChoice .EG_RunLevelElts =append (_fcdg .ContentRunContentChoice .EG_RunLevelElts ,_abaag );_ecfbf :=_be .NewEG_RangeMarkupElements ();_cdbcd :=_be .NewCT_Bookmark ();_ecfbf .RangeMarkupElementsChoice .BookmarkStart =_cdbcd ;_abaag .RunLevelEltsChoice .EG_RangeMarkupElements =append (_abaag .RunLevelEltsChoice .EG_RangeMarkupElements ,_ecfbf );
_ecfbf =_be .NewEG_RangeMarkupElements ();_ecfbf .RangeMarkupElementsChoice .BookmarkEnd =_be .NewCT_MarkupRange ();_abaag .RunLevelEltsChoice .EG_RangeMarkupElements =append (_abaag .RunLevelEltsChoice .EG_RangeMarkupElements ,_ecfbf );_bgac ._bcaf .EG_PContent =append (_bgac ._bcaf .EG_PContent ,_cfgfc );
_bfcb :=Bookmark {_cdbcd };_bfcb .SetName (name );return _bfcb ;};

// AddLevel adds a new numbering level to a NumberingDefinition.
func (_bgcg NumberingDefinition )AddLevel ()NumberingLevel {_fgdg :=_be .NewCT_Lvl ();_fgdg .Start =&_be .CT_DecimalNumber {ValAttr :1};_fgdg .IlvlAttr =int64 (len (_bgcg ._dbgg .Lvl ));_bgcg ._dbgg .Lvl =append (_bgcg ._dbgg .Lvl ,_fgdg );return NumberingLevel {_fgdg };
};func _fdcee (_bcgbg Paragraph )*_be .CT_NumPr {_bcgbg .ensurePPr ();if _bcgbg ._bcaf .PPr .NumPr ==nil {return nil ;};return _bcgbg ._bcaf .PPr .NumPr ;};

// Endnote is an individual endnote reference within the document.
type Endnote struct{_cbbge *Document ;_dbda *_be .CT_FtnEdn ;};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_aeac *Document )GetImageByRelID (relID string )(_ec .ImageRef ,bool ){_fab :=_aeac ._dbe .GetTargetByRelId (relID );_aaaa :="";for _ ,_bded :=range _aeac ._baa {if _aaaa !=""{break ;};_aaaa =_bded .GetTargetByRelId (relID );};_ffga :="";for _ ,_effd :=range _aeac ._abb {if _ffga !=""{break ;
};_ffga =_effd .GetTargetByRelId (relID );};for _ ,_gdgee :=range _aeac .Images {if _gdgee .RelID ()==relID {return _gdgee ,true ;};if _fab !=""{_daeg :=_cc .Replace (_gdgee .Target (),"\u0077\u006f\u0072d\u002f","",1);if _daeg ==_fab {if _gdgee .RelID ()==""{_gdgee .SetRelID (relID );
};return _gdgee ,true ;};};if _aaaa !=""{_dbcee :=_cc .Replace (_gdgee .Target (),"\u0077\u006f\u0072d\u002f","",1);if _dbcee ==_aaaa {if _gdgee .RelID ()==""{_gdgee .SetRelID (relID );};return _gdgee ,true ;};};if _ffga !=""{_acdb :=_cc .Replace (_gdgee .Target (),"\u0077\u006f\u0072d\u002f","",1);
if _acdb ==_ffga {if _gdgee .RelID ()==""{_gdgee .SetRelID (relID );};return _gdgee ,true ;};};};return _ec .ImageRef {},false ;};

// DrawingInline return a slice of InlineDrawings.
func (_cabab Run )DrawingInline ()[]InlineDrawing {_fcaa :=[]InlineDrawing {};for _ ,_eeebf :=range _cabab ._fgad .EG_RunInnerContent {if _eeebf .RunInnerContentChoice .Drawing ==nil {continue ;};for _ ,_dgade :=range _eeebf .RunInnerContentChoice .Drawing .DrawingChoice {if _dgade .Inline ==nil {continue ;
};_fcaa =append (_fcaa ,InlineDrawing {_cabab ._cgbdg ,_dgade .Inline });};};return _fcaa ;};

// TableLook is the conditional formatting associated with a table style that
// has been assigned to a table.
type TableLook struct{_gfded *_be .CT_TblLook };

// SetLeft sets the cell left margin
func (_afd CellMargins )SetLeft (d _ac .Distance ){_afd ._adde .Left =_be .NewCT_TblWidth ();_eag (_afd ._adde .Left ,d );};

// SetTextWrapInFrontOfText sets the text wrap to in front of text.
func (_ab AnchoredDrawing )SetTextWrapInFrontOfText (){_ab ._cg .WrapTypeChoice =&_be .WdEG_WrapTypeChoice {};_ab ._cg .WrapTypeChoice .WrapNone =_be .NewWdCT_WrapNone ();_ab ._cg .BehindDocAttr =false ;_ab ._cg .LayoutInCellAttr =true ;_ab ._cg .AllowOverlapAttr =true ;
};func _febb (_ffdb *_be .CT_P ,_dcaa ,_dgag map[int64 ]int64 ){for _ ,_fdba :=range _ffdb .EG_PContent {for _ ,_cafd :=range _fdba .PContentChoice .EG_ContentRunContent {if _cafd .ContentRunContentChoice .R !=nil {for _ ,_dbdf :=range _cafd .ContentRunContentChoice .R .EG_RunInnerContent {_ggce :=_dbdf .RunInnerContentChoice .EndnoteReference ;
if _ggce !=nil &&_ggce .IdAttr > 0{if _gddeg ,_fbab :=_dgag [_ggce .IdAttr ];_fbab {_ggce .IdAttr =_gddeg ;};};_gggab :=_dbdf .RunInnerContentChoice .FootnoteReference ;if _gggab !=nil &&_gggab .IdAttr > 0{if _abfbd ,_abeg :=_dcaa [_gggab .IdAttr ];_abeg {_gggab .IdAttr =_abfbd ;
};};};};};};};

// SetBefore sets the spacing that comes before the paragraph.
func (_eecefc ParagraphSpacing )SetBefore (before _ac .Distance ){_eecefc ._aaec .BeforeAttr =&_gfa .ST_TwipsMeasure {};_eecefc ._aaec .BeforeAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (before /_ac .Twips ));};

// AddDropdownList adds dropdown list form field to the paragraph and returns it.
func (_dede Paragraph )AddDropdownList (name string )FormField {_bfdgd :=_dede .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0044\u0052\u004f\u0050\u0044\u004f\u0057\u004e");_bfdgd ._dbgb .FFDataChoice [0].DdList =_be .NewCT_FFDDList ();return _bfdgd ;
};

// GetStyleByID returns Style by it is IdAttr.
func (_ddgd *Document )GetStyleByID (id string )Style {for _ ,_bdccb :=range _ddgd .Styles ._effe .Style {if _bdccb .StyleIdAttr !=nil &&*_bdccb .StyleIdAttr ==id {return Style {_bdccb };};};return Style {};};func (_dbgf Styles )initializeDocDefaults (){_dbgf ._effe .DocDefaults =_be .NewCT_DocDefaults ();
_dbgf ._effe .DocDefaults .RPrDefault =_be .NewCT_RPrDefault ();_dbgf ._effe .DocDefaults .RPrDefault .RPr =_be .NewCT_RPr ();_bacfd :=RunProperties {_dbgf ._effe .DocDefaults .RPrDefault .RPr };_bacfd .SetSize (12*_ac .Point );_bacfd .Fonts ().SetASCIITheme (_be .ST_ThemeMajorAscii );
_bacfd .Fonts ().SetEastAsiaTheme (_be .ST_ThemeMajorEastAsia );_bacfd .Fonts ().SetHANSITheme (_be .ST_ThemeMajorHAnsi );_bacfd .Fonts ().SetCSTheme (_be .ST_ThemeMajorBidi );_bacfd .X ().Lang =_be .NewCT_Language ();_bacfd .X ().Lang .ValAttr =_g .String ("\u0065\u006e\u002dU\u0053");
_bacfd .X ().Lang .EastAsiaAttr =_g .String ("\u0065\u006e\u002dU\u0053");_bacfd .X ().Lang .BidiAttr =_g .String ("\u0061\u0072\u002dS\u0041");_dbgf ._effe .DocDefaults .PPrDefault =_be .NewCT_PPrDefault ();};

// NewTableWidth returns a newly intialized TableWidth
func NewTableWidth ()TableWidth {return TableWidth {_be .NewCT_TblWidth ()}};

// Style return the table style.
func (_ebacd Table )Style ()string {if _ebacd ._dbgfc .TblPr !=nil &&_ebacd ._dbgfc .TblPr .TblStyle !=nil {return _ebacd ._dbgfc .TblPr .TblStyle .ValAttr ;};return "";};

// GetShapeStyle returns string style of the shape in watermark and format it to ShapeStyle.
func (_bafd *WatermarkPicture )GetShapeStyle ()_fa .ShapeStyle {if _bafd ._egfee !=nil &&_bafd ._egfee .StyleAttr !=nil {return _fa .NewShapeStyle (*_bafd ._egfee .StyleAttr );};return _fa .NewShapeStyle ("");};func (_befc *Document )tables (_bcd *_be .EG_ContentBlockContent )[]Table {_bbbf :=[]Table {};
for _ ,_adbe :=range _bcd .ContentBlockContentChoice .Tbl {_bbbf =append (_bbbf ,Table {_befc ,_adbe });for _ ,_ccee :=range _adbe .EG_ContentRowContent {for _ ,_cabe :=range _ccee .ContentRowContentChoice .Tr {for _ ,_abd :=range _cabe .EG_ContentCellContent {for _ ,_ecaf :=range _abd .ContentCellContentChoice .Tc {for _ ,_gfae :=range _ecaf .EG_BlockLevelElts {for _ ,_gegga :=range _gfae .BlockLevelEltsChoice .EG_ContentBlockContent {_bbbf =append (_bbbf ,_befc .tables (_gegga )...);
};};};};};};};return _bbbf ;};

// AddCheckBox adds checkbox form field to the paragraph and returns it.
func (_feca Paragraph )AddCheckBox (name string )FormField {_cbbd :=_feca .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0043\u0048\u0045\u0043\u004b\u0042\u004f\u0058");_cbbd ._dbgb .FFDataChoice [0].CheckBox =_be .NewCT_FFCheckBox ();return _cbbd ;
};

// PutNodeBefore put node to position before relativeTo.
func (_debg *Document )PutNodeBefore (relativeTo ,node Node ){_debg .putNode (relativeTo ,node ,true )};

// RemoveParagraph removes a paragraph from a footer.
func (_fabb Header )RemoveParagraph (p Paragraph ){for _ ,_eeea :=range _fabb ._gbeec .EG_BlockLevelElts {for _ ,_gadb :=range _eeea .BlockLevelEltsChoice .EG_ContentBlockContent {for _ebca ,_gfcgg :=range _gadb .ContentBlockContentChoice .P {if _gfcgg ==p ._bcaf {copy (_gadb .ContentBlockContentChoice .P [_ebca :],_gadb .ContentBlockContentChoice .P [_ebca +1:]);
_gadb .ContentBlockContentChoice .P =_gadb .ContentBlockContentChoice .P [0:len (_gadb .ContentBlockContentChoice .P )-1];return ;};};};};};

// Properties returns the run properties.
func (_cggcc Run )Properties ()RunProperties {if _cggcc ._fgad .RPr ==nil {_cggcc ._fgad .RPr =_be .NewCT_RPr ();};return RunProperties {_cggcc ._fgad .RPr };};

// ExtractText returns text from the document as a DocText object.
func (_bffa *Document )ExtractText ()*DocText {_faeab :=[]TextItem {};for _ ,_ggcba :=range _bffa ._cgb .Body .EG_BlockLevelElts {_faeab =append (_faeab ,_agae (_ggcba .BlockLevelEltsChoice .EG_ContentBlockContent ,nil )...);};var _fbdb []listItemInfo ;
_cdgg :=_bffa .Paragraphs ();for _ ,_gfadf :=range _cdgg {_cbcb :=_becgb (_bffa ,_gfadf );_fbdb =append (_fbdb ,_cbcb );};_gbce :=_bdgac (_bffa );return &DocText {Items :_faeab ,_bdada :_fbdb ,_afgb :_gbce };};

// SetBasedOn sets the style that this style is based on.
func (_dbgbc Style )SetBasedOn (name string ){if name ==""{_dbgbc ._gegdgf .BasedOn =nil ;}else {_dbgbc ._gegdgf .BasedOn =_be .NewCT_String ();_dbgbc ._gegdgf .BasedOn .ValAttr =name ;};};func (_bcfa Endnote )content ()[]*_be .EG_ContentBlockContent {var _fegca []*_be .EG_ContentBlockContent ;
for _ ,_bccf :=range _bcfa ._dbda .EG_BlockLevelElts {_fegca =append (_fegca ,_bccf .BlockLevelEltsChoice .EG_ContentBlockContent ...);};return _fegca ;};

// Pict returns the pict object.
func (_cfcd *WatermarkText )Pict ()*_be .CT_Picture {return _cfcd ._eedac };func (_gdbaa *Document )insertStyleFromNode (_aegc Node ){if _aegc .Style .X ()!=nil {if _ ,_cbbe :=_gdbaa .Styles .SearchStyleById (_aegc .Style .StyleID ());!_cbbe {_gdbaa .Styles .InsertStyle (_aegc .Style );
_cgag :=_aegc .Style .ParagraphProperties ();_gdbaa .insertNumberingFromStyleProperties (_aegc ._dgabd .Numbering ,_cgag );};};};

// SetOutlineLevel sets the outline level of this style.
func (_dgagec ParagraphStyleProperties )SetOutlineLevel (lvl int ){_dgagec ._gbbb .OutlineLvl =_be .NewCT_DecimalNumber ();_dgagec ._gbbb .OutlineLvl .ValAttr =int64 (lvl );};var _dfe =false ;

// Pict returns the pict object.
func (_cdae *WatermarkPicture )Pict ()*_be .CT_Picture {return _cdae ._bcaag };

// SetInnerShadowImageEffect sets the inner shadow image effect.
func (_ce AnchoredDrawing )SetInnerShadowImageEffect (radius ,offset _ac .Distance ,c _cb .Color ,degrees float64 ){_gbc :=_ac .ToEMU (float64 (radius ));_bfa :=_ac .ToEMU (float64 (offset ));_eda :=int32 (degrees *60000);for _ ,_bgf :=range _ce ._cg .Graphic .GraphicData .Any {if _baf ,_cbf :=_bgf .(*_fb .Pic );
_cbf {_ce .initializeEffectList (_baf .SpPr );_baf .SpPr .EffectPropertiesChoice .EffectLst .InnerShdw =_fce .NewCT_InnerShadowEffect ();_baf .SpPr .EffectPropertiesChoice .EffectLst .InnerShdw .BlurRadAttr =&_gbc ;_baf .SpPr .EffectPropertiesChoice .EffectLst .InnerShdw .DistAttr =&_bfa ;
_baf .SpPr .EffectPropertiesChoice .EffectLst .InnerShdw .DirAttr =&_eda ;_baf .SpPr .EffectPropertiesChoice .EffectLst .InnerShdw .SrgbClr =_fce .NewCT_SRgbColor ();_baf .SpPr .EffectPropertiesChoice .EffectLst .InnerShdw .SrgbClr .ValAttr =*c .AsRGBString ();
};};};

// SetRight sets the right border to a specified type, color and thickness.
func (_dggfe TableBorders )SetRight (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_dggfe ._ddbeg .Right =_be .NewCT_Border ();_gdff (_dggfe ._ddbeg .Right ,t ,c ,thickness );};

// SetValue sets the value of a FormFieldTypeText or FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_cceb FormField )SetValue (v string ){if _cceb ._dbgb .FFDataChoice !=nil &&len (_cceb ._dbgb .FFDataChoice )> 0{if _cceb ._dbgb .FFDataChoice [0].DdList !=nil {for _gagc ,_adbec :=range _cceb .PossibleValues (){if _adbec ==v {_cceb ._dbgb .FFDataChoice [0].DdList .Result =_be .NewCT_DecimalNumber ();
_cceb ._dbgb .FFDataChoice [0].DdList .Result .ValAttr =int64 (_gagc );break ;};};}else if _cceb ._dbgb .FFDataChoice [0].TextInput !=nil {_cceb ._badfc .RunInnerContentChoice .T =_be .NewCT_Text ();_cceb ._badfc .RunInnerContentChoice .T .Content =v ;
};};};

// Outline returns true if paragraph outline is on.
func (_dbbfc ParagraphProperties )Outline ()bool {return _bgba (_dbbfc ._fbaa .RPr .Outline )};func (_fege *Document )syncEndnoteSettings (){_bbeb :=[]int64 {};_abgf :=_fege .Endnotes ();for _ ,_bag :=range _abgf {if _bag .X ().TypeAttr !=_be .ST_FtnEdnUnset &&_bag .X ().TypeAttr !=_be .ST_FtnEdnNormal {_bbeb =append (_bbeb ,_bag .X ().IdAttr );
};};_cfcg :=_fege .Settings .X ().CT_Settings .EndnotePr ;if _cfcg ==nil {_cfcg =_be .NewCT_EdnDocProps ();};if len (_bbeb )==0{_cfcg .Endnote =nil ;return ;};_cfcg .Endnote =[]*_be .CT_FtnEdnSepRef {};for _ ,_dfc :=range _bbeb {_aacc :=_be .NewCT_FtnEdnSepRef ();
_aacc .IdAttr =_dfc ;_cfcg .Endnote =append (_cfcg .Endnote ,_aacc );};};

// InsertRowAfter inserts a row after another row
func (_ffgb Table )InsertRowAfter (r Row )Row {for _gdcd ,_eegge :=range _ffgb ._dbgfc .EG_ContentRowContent {if len (_eegge .ContentRowContentChoice .Tr )> 0&&r .X ()==_eegge .ContentRowContentChoice .Tr [0]{_gdfde :=_be .NewEG_ContentRowContent ();if len (_ffgb ._dbgfc .EG_ContentRowContent )< _gdcd +2{return _ffgb .AddRow ();
};_ffgb ._dbgfc .EG_ContentRowContent =append (_ffgb ._dbgfc .EG_ContentRowContent ,nil );copy (_ffgb ._dbgfc .EG_ContentRowContent [_gdcd +2:],_ffgb ._dbgfc .EG_ContentRowContent [_gdcd +1:]);_ffgb ._dbgfc .EG_ContentRowContent [_gdcd +1]=_gdfde ;_cffbg :=_be .NewCT_Row ();
_gdfde .ContentRowContentChoice .Tr =append (_gdfde .ContentRowContentChoice .Tr ,_cffbg );return Row {_ffgb ._bbbfef ,_cffbg };};};return _ffgb .AddRow ();};func (_agbe *Document )reorderEndnote (){_ecad :=int64 (1);_ddfd :=map[int64 ]int64 {};for _ ,_gede :=range _agbe ._dbc .Endnote {switch _gede .TypeAttr {case _be .ST_FtnEdnSeparator :_gede .IdAttr =-1;
break ;case _be .ST_FtnEdnContinuationSeparator :_gede .IdAttr =0;break ;default:_ddfd [_gede .IdAttr ]=_ecad ;_gede .IdAttr =_ecad ;_ecad ++;};};for _ ,_eed :=range _agbe .Paragraphs (){for _ ,_ebe :=range _eed .Runs (){if _dbec ,_agad :=_ebe .IsEndnote ();
_dbec {_ebe .X ().EG_RunInnerContent [0].RunInnerContentChoice .EndnoteReference .IdAttr =_ddfd [_agad ];};};};};func _fgdcg (_gbdeg *_be .CT_Border ,_dafag _be .ST_Border ,_bgccf _cb .Color ,_ecgeg _ac .Distance ){_gbdeg .ValAttr =_dafag ;_gbdeg .ColorAttr =&_be .ST_HexColor {};
if _bgccf .IsAuto (){_gbdeg .ColorAttr .ST_HexColorAuto =_be .ST_HexColorAutoAuto ;}else {_gbdeg .ColorAttr .ST_HexColorRGB =_bgccf .AsRGBString ();};if _ecgeg !=_ac .Zero {_gbdeg .SzAttr =_g .Uint64 (uint64 (_ecgeg /_ac .Point *8));};};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_acaa Footer )AddImage (i _ec .Image )(_ec .ImageRef ,error ){var _fged _ec .Relationships ;for _dcagc ,_abaf :=range _acaa ._bccb ._ccg {if _abaf ==_acaa ._dgcd {_fged =_acaa ._bccb ._abb [_dcagc ];};};_cbed :=_ec .MakeImageRef (i ,&_acaa ._bccb .DocBase ,_fged );
if i .Data ==nil &&i .Path ==""{return _cbed ,_a .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _cbed ,_a .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};if i .Size .X ==0||i .Size .Y ==0{return _cbed ,_a .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_acaa ._bccb .Images =append (_acaa ._bccb .Images ,_cbed );
_cdbee :=_b .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_acaa ._bccb .Images ),i .Format );_gcaf :=_fged .AddRelationship (_cdbee ,_g .ImageType );_cbed .SetRelID (_gcaf .X ().IdAttr );return _cbed ,nil ;
};

// SetTargetByRef sets the URL target of the hyperlink and is more efficient if a link
// destination will be used many times.
func (_ddfa HyperLink )SetTargetByRef (link _ec .Hyperlink ){_ddfa ._caddg .IdAttr =_g .String (_ec .Relationship (link ).ID ());_ddfa ._caddg .AnchorAttr =nil ;};

// SetAfter sets the spacing that comes after the paragraph.
func (_ccgea ParagraphSpacing )SetAfter (after _ac .Distance ){_ccgea ._aaec .AfterAttr =&_gfa .ST_TwipsMeasure {};_ccgea ._aaec .AfterAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (after /_ac .Twips ));};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_gddg TableProperties )SetCellSpacingPercent (pct float64 ){_gddg ._gdfab .TblCellSpacing =_be .NewCT_TblWidth ();_gddg ._gdfab .TblCellSpacing .TypeAttr =_be .ST_TblWidthPct ;_gddg ._gdfab .TblCellSpacing .WAttr =&_be .ST_MeasurementOrPercent {};
_gddg ._gdfab .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_be .ST_DecimalNumberOrPercent {};_gddg ._gdfab .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (pct *50));};

// AddRun adds a run of text to a hyperlink. This is the text that will be linked.
func (_fgec HyperLink )AddRun ()Run {_gaeb :=_be .NewEG_ContentRunContent ();_fgec ._caddg .PContentChoice .EG_ContentRunContent =append (_fgec ._caddg .PContentChoice .EG_ContentRunContent ,_gaeb );_fbg :=_be .NewCT_R ();_gaeb .ContentRunContentChoice .R =_fbg ;
return Run {_fgec ._bdagg ,_fbg };};

// RemoveParagraph removes a paragraph from the footnote.
func (_efaf Footnote )RemoveParagraph (p Paragraph ){for _ ,_ecgee :=range _efaf .content (){for _gbdfd ,_bfgf :=range _ecgee .ContentBlockContentChoice .P {if _bfgf ==p ._bcaf {copy (_ecgee .ContentBlockContentChoice .P [_gbdfd :],_ecgee .ContentBlockContentChoice .P [_gbdfd +1:]);
_ecgee .ContentBlockContentChoice .P =_ecgee .ContentBlockContentChoice .P [0:len (_ecgee .ContentBlockContentChoice .P )-1];return ;};};};};

// SetFirstRow controls the conditional formatting for the first row in a table.
func (_gcedc TableLook )SetFirstRow (on bool ){if !on {_gcedc ._gfded .FirstRowAttr =&_gfa .ST_OnOff {};_gcedc ._gfded .FirstRowAttr .ST_OnOff1 =_gfa .ST_OnOff1Off ;}else {_gcedc ._gfded .FirstRowAttr =&_gfa .ST_OnOff {};_gcedc ._gfded .FirstRowAttr .ST_OnOff1 =_gfa .ST_OnOff1On ;
};};

// SetPicture sets the watermark picture.
func (_abed *WatermarkPicture )SetPicture (imageRef _ec .ImageRef ){_fbeg :=imageRef .RelID ();_fead :=_abed .getShape ();if _abed ._egfee !=nil {_fgcg :=_abed ._egfee .ShapeChoice ;if len (_fgcg )> 0&&_fgcg [0].ShapeElementsChoice .Imagedata !=nil {_fgcg [0].ShapeElementsChoice .Imagedata .IdAttr =&_fbeg ;
};}else {_acabf :=_abed .findNode (_fead ,"\u0069m\u0061\u0067\u0065\u0064\u0061\u0074a");for _abbbg ,_dcedb :=range _acabf .Attrs {if _dcedb .Name .Local =="\u0069\u0064"{_acabf .Attrs [_abbbg ].Value =_fbeg ;};};};};

// SetHANSITheme sets the font H ANSI Theme.
func (_aagcd Fonts )SetHANSITheme (t _be .ST_Theme ){_aagcd ._ggdb .HAnsiThemeAttr =t };

// TableStyleProperties are table properties as defined in a style.
type TableStyleProperties struct{_eeda *_be .CT_TblPrBase };

// SetTextWrapNone unsets text wrapping so the image can float on top of the
// text. When used in conjunction with X/Y Offset relative to the page it can be
// used to place a logo at the top of a page at an absolute position that
// doesn't interfere with text.
func (_bf AnchoredDrawing )SetTextWrapNone (){_bf ._cg .WrapTypeChoice =&_be .WdEG_WrapTypeChoice {};_bf ._cg .WrapTypeChoice .WrapNone =_be .NewWdCT_WrapNone ();};

// SetText sets the watermark text.
func (_decdg *WatermarkText )SetText (text string ){_eagcf :=_decdg .getShape ();if _decdg ._cgddc !=nil {_acccf :=_decdg ._cgddc .ShapeChoice ;for _ ,_edeba :=range _acccf {if _edeba .ShapeElementsChoice .Textpath !=nil {_edeba .ShapeElementsChoice .Textpath .StringAttr =&text ;
};};}else {_gbec :=_decdg .findNode (_eagcf ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _ebdag ,_ceaaf :=range _gbec .Attrs {if _ceaaf .Name .Local =="\u0073\u0074\u0072\u0069\u006e\u0067"{_gbec .Attrs [_ebdag ].Value =text ;};};};};type listItemInfo struct{FromStyle *Style ;
FromParagraph *Paragraph ;AbstractNumId *int64 ;NumberingLevel *NumberingLevel ;};

// Properties returns the table properties.
func (_gebbg Table )Properties ()TableProperties {if _gebbg ._dbgfc .TblPr ==nil {_gebbg ._dbgfc .TblPr =_be .NewCT_TblPr ();};return TableProperties {_gebbg ._dbgfc .TblPr };};

// Footnotes returns the footnotes defined in the document.
func (_fgda *Document )Footnotes ()[]Footnote {_gfgb :=[]Footnote {};for _ ,_dafb :=range _fgda ._edf .CT_Footnotes .Footnote {_gfgb =append (_gfgb ,Footnote {_fgda ,_dafb });};return _gfgb ;};

// AddTable adds a table to the header.
func (_fgddb Header )AddTable ()Table {_afaab :=_be .NewEG_ContentBlockContent ();_fgddb ._gbeec .EG_BlockLevelElts =append (_fgddb ._gbeec .EG_BlockLevelElts ,&_be .EG_BlockLevelElts {BlockLevelEltsChoice :&_be .EG_BlockLevelEltsChoice {EG_ContentBlockContent :[]*_be .EG_ContentBlockContent {_afaab }}});
_abba :=_be .NewCT_Tbl ();_afaab .ContentBlockContentChoice .Tbl =append (_afaab .ContentBlockContentChoice .Tbl ,_abba );return Table {_fgddb ._gegb ,_abba };};

// SetCharacterSpacing sets the run's Character Spacing Adjustment.
func (_gbage RunProperties )SetCharacterSpacing (size _ac .Distance ){_gbage ._dggdd .Spacing =_be .NewCT_SignedTwipsMeasure ();_gbage ._dggdd .Spacing .ValAttr .Int64 =_g .Int64 (int64 (size /_ac .Twips ));};

// Properties returns the numbering level paragraph properties.
func (_gadcb NumberingLevel )Properties ()ParagraphStyleProperties {if _gadcb ._eabd .PPr ==nil {_gadcb ._eabd .PPr =_be .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_gadcb ._eabd .PPr };};

// SetAlignment sets the alignment of a table within the page.
func (_cdee TableProperties )SetAlignment (align _be .ST_JcTable ){if align ==_be .ST_JcTableUnset {_cdee ._gdfab .Jc =nil ;}else {_cdee ._gdfab .Jc =_be .NewCT_JcTable ();_cdee ._gdfab .Jc .ValAttr =align ;};};func (_dgff Run )newIC ()*_be .EG_RunInnerContent {_gdfcg :=_be .NewEG_RunInnerContent ();
_dgff ._fgad .EG_RunInnerContent =append (_dgff ._fgad .EG_RunInnerContent ,_gdfcg );return _gdfcg ;};

// X returns the internally wrapped *wml.CT_SectPr.
func (_bbecc Section )X ()*_be .CT_SectPr {return _bbecc ._cffdd };

// X returns the inner wrapped XML type.
func (_egdgc InlineDrawing )X ()*_be .WdInline {return _egdgc ._adec };

// SetStrict is a shortcut for document.SetConformance,
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_aebb Document )SetStrict (strict bool ){if strict {_aebb ._cgb .ConformanceAttr =_gfa .ST_ConformanceClassStrict ;}else {_aebb ._cgb .ConformanceAttr =_gfa .ST_ConformanceClassTransitional ;};};

// X returns the inner wrapped XML type.
func (_gbfegf Style )X ()*_be .CT_Style {return _gbfegf ._gegdgf };

// Bold returns true if run font is bold.
func (_dgffc RunProperties )Bold ()bool {_bcag :=_dgffc ._dggdd ;return _bgba (_bcag .B )||_bgba (_bcag .BCs );};

// ItalicValue returns the precise nature of the italic setting (unset, off or on).
func (_adafe RunProperties )ItalicValue ()OnOffValue {return _aabf (_adafe ._dggdd .I )};

// Endnote returns the endnote based on the ID; this can be used nicely with
// the run.IsEndnote() functionality.
func (_aege *Document )Endnote (id int64 )Endnote {for _ ,_adffa :=range _aege .Endnotes (){if _adffa .id ()==id {return _adffa ;};};return Endnote {};};

// HasFootnotes returns a bool based on the presence or abscence of footnotes within
// the document.
func (_dcfda *Document )HasFootnotes ()bool {return _dcfda ._edf !=nil };

// SetTop sets the top border to a specified type, color and thickness.
func (_dag CellBorders )SetTop (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_dag ._bce .Top =_be .NewCT_Border ();_gdff (_dag ._bce .Top ,t ,c ,thickness );};

// SetName sets the name of the image, visible in the properties of the image
// within Word.
func (_ffd AnchoredDrawing )SetName (name string ){_ffd ._cg .DocPr .NameAttr =name ;for _ ,_feg :=range _ffd ._cg .Graphic .GraphicData .Any {if _fcb ,_ae :=_feg .(*_fb .Pic );_ae {_fcb .NvPicPr .CNvPr .DescrAttr =_g .String (name );};};};const (FieldCurrentPage ="\u0050\u0041\u0047\u0045";
FieldNumberOfPages ="\u004e\u0055\u004d\u0050\u0041\u0047\u0045\u0053";FieldDate ="\u0044\u0041\u0054\u0045";FieldCreateDate ="\u0043\u0052\u0045\u0041\u0054\u0045\u0044\u0041\u0054\u0045";FieldEditTime ="\u0045\u0044\u0049\u0054\u0054\u0049\u004d\u0045";
FieldPrintDate ="\u0050R\u0049\u004e\u0054\u0044\u0041\u0054E";FieldSaveDate ="\u0053\u0041\u0056\u0045\u0044\u0041\u0054\u0045";FieldTIme ="\u0054\u0049\u004d\u0045";FieldTOC ="\u0054\u004f\u0043";);

// SetAll sets all of the borders to a given value.
func (_edeb TableBorders )SetAll (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_edeb .SetBottom (t ,c ,thickness );_edeb .SetLeft (t ,c ,thickness );_edeb .SetRight (t ,c ,thickness );_edeb .SetTop (t ,c ,thickness );_edeb .SetInsideHorizontal (t ,c ,thickness );
_edeb .SetInsideVertical (t ,c ,thickness );};

// AddEndnoteReference adds a footnote reference to a run.
func (_degb Run )AddEndnoteReference (){_ecdbd :=_degb .newIC ();_ecdbd .RunInnerContentChoice .EndnoteRef =&_be .CT_Empty {};};

// TextWithOptions extract text with options.
func (_bgbf *DocText )TextWithOptions (options ExtractTextOptions )string {_cfgeg :=make (map[int64 ]map[int64 ]int64 ,0);_eaabf :=_fc .NewBuffer ([]byte {});_cfda :=int64 (0);_agfc :=int64 (0);_egb :=int64 (0);for _bdaa ,_eggb :=range _bgbf .Items {_agbb :=false ;
if _eggb .Text !=""{if _bdaa > 0{if _eggb .Paragraph !=_bgbf .Items [_bdaa -1].Paragraph {_agbb =true ;};if !options .RunsOnNewLine &&_agbb {_eaabf .WriteString ("\u000a");}else if options .RunsOnNewLine {_eaabf .WriteString ("\u000a");};}else {_agbb =true ;
};if options .WithNumbering {if _agbb {for _ ,_bgedd :=range _bgbf ._bdada {if _bgedd .FromParagraph ==nil {continue ;};if _bgedd .FromParagraph .X ()==_eggb .Paragraph {if _eggfeb :=_bgedd .NumberingLevel .X ();_eggfeb !=nil {if _bgedd .AbstractNumId !=nil &&_bgbf ._afgb [*_bgedd .AbstractNumId ][_eggfeb .IlvlAttr ]> 0{if _ ,_aedc :=_cfgeg [*_bgedd .AbstractNumId ];
_aedc {if _ ,_eefg :=_cfgeg [*_bgedd .AbstractNumId ][_eggfeb .IlvlAttr ];_eefg {_cfgeg [*_bgedd .AbstractNumId ][_eggfeb .IlvlAttr ]++;}else {_cfgeg [*_bgedd .AbstractNumId ][_eggfeb .IlvlAttr ]=1;};}else {_cfgeg [*_bgedd .AbstractNumId ]=map[int64 ]int64 {_eggfeb .IlvlAttr :1};
};if _cfda ==_bgedd .NumberingLevel .X ().IlvlAttr &&_eggfeb .IlvlAttr > 0{_agfc ++;}else {_agfc =_cfgeg [*_bgedd .AbstractNumId ][_eggfeb .IlvlAttr ];if _eggfeb .IlvlAttr > _cfda &&_egb ==*_bgedd .AbstractNumId {_agfc =1;};};_gbbgf :="";if _eggfeb .LvlText .ValAttr !=nil {_gbbgf =*_eggfeb .LvlText .ValAttr ;
};_fcbe :=_dc .FormatNumberingText (_agfc ,_eggfeb .IlvlAttr ,_gbbgf ,_eggfeb .NumFmt ,_cfgeg [*_bgedd .AbstractNumId ]);_eaabf .WriteString (_fcbe );_bgbf ._afgb [*_bgedd .AbstractNumId ][_eggfeb .IlvlAttr ]--;_cfda =_eggfeb .IlvlAttr ;_egb =*_bgedd .AbstractNumId ;
if options .NumberingIndent !=""{_eaabf .WriteString (options .NumberingIndent );};};};break ;};};};};_eaabf .WriteString (_eggb .Text );};};return _eaabf .String ();};

// SetPossibleValues sets possible values for a FormFieldTypeDropDown.
func (_begfd FormField )SetPossibleValues (values []string ){if _begfd ._dbgb .FFDataChoice !=nil &&len (_begfd ._dbgb .FFDataChoice )> 0&&_begfd ._dbgb .FFDataChoice [0].DdList !=nil {for _ ,_aded :=range values {_egbgb :=_be .NewCT_String ();_egbgb .ValAttr =_aded ;
_begfd ._dbgb .FFDataChoice [0].DdList .ListEntry =append (_begfd ._dbgb .FFDataChoice [0].DdList .ListEntry ,_egbgb );};};};

// ClearColor clears the text color.
func (_bcdfb RunProperties )ClearColor (){_bcdfb ._dggdd .Color =nil };

// Italic returns true if run font is italic.
func (_bggea RunProperties )Italic ()bool {_fcebc :=_bggea ._dggdd ;return _bgba (_fcebc .I )||_bgba (_fcebc .ICs );};

// Numbering is the document wide numbering styles contained in numbering.xml.
type Numbering struct{_dcaac *_be .Numbering };

// DrawingAnchored returns a slice of AnchoredDrawings.
func (_aeaga Run )DrawingAnchored ()[]AnchoredDrawing {_fgff :=[]AnchoredDrawing {};for _ ,_dcefe :=range _aeaga ._fgad .EG_RunInnerContent {if _dcefe .RunInnerContentChoice .Drawing ==nil {continue ;};for _ ,_dfaae :=range _dcefe .RunInnerContentChoice .Drawing .DrawingChoice {if _dfaae .Anchor ==nil {continue ;
};_fgff =append (_fgff ,AnchoredDrawing {_aeaga ._cgbdg ,_dfaae .Anchor });};};return _fgff ;};

// Emboss returns true if paragraph emboss is on.
func (_dagga ParagraphProperties )Emboss ()bool {return _bgba (_dagga ._fbaa .RPr .Emboss )};

// Clear clears all content within a header
func (_bgbbf Header )Clear (){_bgbbf ._gbeec .EG_BlockLevelElts =[]*_be .EG_BlockLevelElts {}};

// MergeFields returns the list of all mail merge fields found in the document.
func (_fffcc Document )MergeFields ()[]string {_aaed :=map[string ]struct{}{};for _ ,_fbcde :=range _fffcc .mergeFields (){_aaed [_fbcde ._eegef ]=struct{}{};};_eadb :=[]string {};for _dabgg :=range _aaed {_eadb =append (_eadb ,_dabgg );};return _eadb ;
};func (_ceaa Paragraph )addSeparateFldChar ()*_be .CT_FldChar {_fdaeg :=_ceaa .addFldChar ();_fdaeg .FldCharTypeAttr =_be .ST_FldCharTypeSeparate ;return _fdaeg ;};

// FormFieldType is the type of the form field.
//
//go:generate stringer -type=FormFieldType
type FormFieldType byte ;

// SetVAlignment sets the vertical alignment for an anchored image.
func (_fbe AnchoredDrawing )SetVAlignment (v _be .WdST_AlignV ){_fbe ._cg .PositionV .PosVChoice =&_be .WdCT_PosVChoice {};_fbe ._cg .PositionV .PosVChoice .Align =v ;};

// SetLinkedStyle sets the style that this style is linked to.
func (_afbf Style )SetLinkedStyle (name string ){if name ==""{_afbf ._gegdgf .Link =nil ;}else {_afbf ._gegdgf .Link =_be .NewCT_String ();_afbf ._gegdgf .Link .ValAttr =name ;};};func (_deca *Document )reorderComments (){_ggac :=int64 (1);_aafg :=map[int64 ]int64 {};
_abeb :=_deca ._ecff ;for _ ,_ebga :=range _abeb .CT_Comments .Comment {_aafg [_ebga .IdAttr ]=_ggac ;_ebga .IdAttr =_ggac ;_ggac ++;};for _ ,_gdac :=range _deca .Paragraphs (){for _ ,_fbfe :=range _gdac .X ().EG_PContent {for _ ,_aede :=range _fbfe .PContentChoice .EG_ContentRunContent {for _ ,_gdfd :=range _aede .ContentRunContentChoice .EG_RunLevelElts {for _ ,_efed :=range _gdfd .RunLevelEltsChoice .EG_RangeMarkupElements {if _efed .RangeMarkupElementsChoice .CommentRangeStart !=nil {_efed .RangeMarkupElementsChoice .CommentRangeStart .IdAttr =_aafg [_efed .RangeMarkupElementsChoice .CommentRangeStart .IdAttr ];
}else if _efed .RangeMarkupElementsChoice .CommentRangeEnd !=nil {_efed .RangeMarkupElementsChoice .CommentRangeEnd .IdAttr =_aafg [_efed .RangeMarkupElementsChoice .CommentRangeEnd .IdAttr ];};};};if _aede .ContentRunContentChoice .R !=nil {for _ ,_edaae :=range _aede .ContentRunContentChoice .R .EG_RunInnerContent {if _edaae .RunInnerContentChoice .CommentReference !=nil {_edaae .RunInnerContentChoice .CommentReference .IdAttr =_aafg [_edaae .RunInnerContentChoice .CommentReference .IdAttr ];
};};};};};};};

// AddParagraph adds a paragraph to the footer.
func (_ccde Footer )AddParagraph ()Paragraph {_eece :=_be .NewEG_ContentBlockContent ();_ccde ._dgcd .EG_BlockLevelElts =append (_ccde ._dgcd .EG_BlockLevelElts ,&_be .EG_BlockLevelElts {BlockLevelEltsChoice :&_be .EG_BlockLevelEltsChoice {EG_ContentBlockContent :[]*_be .EG_ContentBlockContent {_eece }}});
_abfdg :=_be .NewCT_P ();_eece .ContentBlockContentChoice .P =append (_eece .ContentBlockContentChoice .P ,_abfdg );return Paragraph {_ccde ._bccb ,_abfdg };};

// AppendNode append node to document element.
func (_bacb *Document )AppendNode (node Node ){_bacb .insertImageFromNode (node );_bacb .insertStyleFromNode (node );for _ ,_gdad :=range node .Children {_bacb .insertImageFromNode (_gdad );_bacb .insertStyleFromNode (_gdad );};switch _gfdc :=node .X ().(type ){case *Paragraph :_bacb .appendParagraph (nil ,*_gfdc ,false );
case *Table :_bacb .appendTable (nil ,*_gfdc ,false );};if node ._dgabd !=nil {if node ._dgabd ._acgc !=nil {if _bgdg :=_bacb ._dbe .FindRIDForN (0,_g .ThemeType );_bgdg ==""{if _aaeb :=node ._dgabd ._dbe .FindRIDForN (0,_g .ThemeType );_aaeb !=""{_bacb ._acgc =append (_bacb ._acgc ,node ._dgabd ._acgc ...);
_ccdf :=node ._dgabd ._dbe .GetTargetByRelId (_aaeb );_bacb .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_ccdf ,"\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e/\u0076\u006e\u0064.\u006f\u0070e\u006e\u0078\u006d\u006c\u0066\u006fr\u006dat\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0074\u0068\u0065\u006d\u0065\u002b\u0078\u006d\u006c");
_bacb ._dbe .AddRelationship (_ccdf ,_g .ThemeType );};};};_geeg :=_bacb ._gaa ;_bafc :=node ._dgabd ._gaa ;if _geeg !=nil {if _bafc !=nil {if _geeg .Font !=nil {if _bafc .Font !=nil {for _ ,_adab :=range _bafc .Font {_decfg :=true ;for _ ,_bfga :=range _geeg .Font {if _bfga .NameAttr ==_adab .NameAttr {_decfg =false ;
break ;};};if _decfg {_geeg .Font =append (_geeg .Font ,_adab );};};};}else {_geeg .Font =_bafc .Font ;};};}else if _bafc !=nil {_geeg =_bafc ;};_bacb ._gaa =_geeg ;if _ddfg :=_bacb ._dbe .FindRIDForN (0,_g .FontTableType );_ddfg ==""{_bacb .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006e\u0074\u0054\u0061\u0062\u006c\u0065\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u0066\u006f\u006e\u0074T\u0061\u0062\u006c\u0065\u002b\u0078m\u006c");
_bacb ._dbe .AddRelationship ("\u0066\u006f\u006e\u0074\u0054\u0061\u0062\u006c\u0065\u002e\u0078\u006d\u006c",_g .FontTableType );};};};

// SetFontFamily sets the Ascii & HAnsi fonly family for a run.
func (_cegfg RunProperties )SetFontFamily (family string ){if _cegfg ._dggdd .RFonts ==nil {_cegfg ._dggdd .RFonts =_be .NewCT_Fonts ();};_cegfg ._dggdd .RFonts .AsciiAttr =_g .String (family );_cegfg ._dggdd .RFonts .HAnsiAttr =_g .String (family );_cegfg ._dggdd .RFonts .EastAsiaAttr =_g .String (family );
};func _gcddg ()*_bd .Handles {_bfabc :=_bd .NewHandles ();_fbfdd :=_bd .NewCT_H ();_dcedd :="\u0023\u0030\u002c\u0062\u006f\u0074\u0074\u006f\u006dR\u0069\u0067\u0068\u0074";_fbfdd .PositionAttr =&_dcedd ;_fcbea :="\u0036\u0036\u0032\u0039\u002c\u0031\u0034\u0039\u0037\u0031";
_fbfdd .XrangeAttr =&_fcbea ;_bfabc .H =[]*_bd .CT_H {_fbfdd };return _bfabc ;};

// Read reads a document from an io.Reader.
func Read (r _ff .ReaderAt ,size int64 )(*Document ,error ){return _dbece (r ,size ,"")};

// Levels returns all of the numbering levels defined in the definition.
func (_acccda NumberingDefinition )Levels ()[]NumberingLevel {_daadg :=[]NumberingLevel {};for _ ,_ggebd :=range _acccda ._dbgg .Lvl {_daadg =append (_daadg ,NumberingLevel {_ggebd });};return _daadg ;};func (_fbd AnchoredDrawing )setEffectExtent (_dadb ,_ceb ,_dac ,_bca int64 ){if _fbd ._cg .EffectExtent ==nil {_fbd ._cg .EffectExtent =_be .NewWdCT_EffectExtent ();
}else {_dadb +=*_fbd ._cg .EffectExtent .BAttr .ST_CoordinateUnqualified ;_ceb +=*_fbd ._cg .EffectExtent .TAttr .ST_CoordinateUnqualified ;_dac +=*_fbd ._cg .EffectExtent .LAttr .ST_CoordinateUnqualified ;_bca +=*_fbd ._cg .EffectExtent .RAttr .ST_CoordinateUnqualified ;
};_fbd ._cg .EffectExtent .BAttr =_fce .ST_Coordinate {ST_CoordinateUnqualified :&_dadb };_fbd ._cg .EffectExtent .TAttr =_fce .ST_Coordinate {ST_CoordinateUnqualified :&_ceb };_fbd ._cg .EffectExtent .LAttr =_fce .ST_Coordinate {ST_CoordinateUnqualified :&_dac };
_fbd ._cg .EffectExtent .RAttr =_fce .ST_Coordinate {ST_CoordinateUnqualified :&_bca };};

// SetOuterShadowImageEffect sets the outer shadow image effect.
func (_faf AnchoredDrawing )SetOuterShadowImageEffect (radius ,offset _ac .Distance ,c _cb .Color ,degrees float64 ){_eac :=_ac .ToEMU (float64 (radius ));_gbg :=_ac .ToEMU (float64 (offset ));_bcg :=int32 (degrees *60000);for _ ,_agc :=range _faf ._cg .Graphic .GraphicData .Any {if _aeee ,_aeg :=_agc .(*_fb .Pic );
_aeg {_faf .initializeEffectList (_aeee .SpPr );_aeee .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw =_fce .NewCT_OuterShadowEffect ();_aeee .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw .BlurRadAttr =&_eac ;_aeee .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw .DistAttr =&_gbg ;
_aeee .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw .DirAttr =&_bcg ;_aeee .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw .SrgbClr =_fce .NewCT_SRgbColor ();_aeee .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw .SrgbClr .ValAttr =*c .AsRGBString ();
_aeee .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw .AlgnAttr =_fce .ST_RectAlignmentBl ;_agg :=false ;_aeee .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw .RotWithShapeAttr =&_agg ;};};_faf .setEffectExtent (_eac ,_eac ,_eac ,_eac );};

// AddWatermarkPicture adds new watermark picture to document.
func (_fbbdd *Document )AddWatermarkPicture (imageRef _ec .ImageRef )WatermarkPicture {var _bafg []Header ;if _feec ,_edaga :=_fbbdd .BodySection ().GetHeader (_be .ST_HdrFtrDefault );_edaga {_bafg =append (_bafg ,_feec );};if _decd ,_gdfa :=_fbbdd .BodySection ().GetHeader (_be .ST_HdrFtrEven );
_gdfa {_bafg =append (_bafg ,_decd );};if _fcadg ,_cfca :=_fbbdd .BodySection ().GetHeader (_be .ST_HdrFtrFirst );_cfca {_bafg =append (_bafg ,_fcadg );};if len (_bafg )< 1{_cggc :=_fbbdd .AddHeader ();_fbbdd .BodySection ().SetHeader (_cggc ,_be .ST_HdrFtrDefault );
_bafg =append (_bafg ,_cggc );};var _egeg error ;_bbc :=NewWatermarkPicture ();for _ ,_ggae :=range _bafg {imageRef ,_egeg =_ggae .AddImageRef (imageRef );if _egeg !=nil {return WatermarkPicture {};};_aeadd :=_ggae .Paragraphs ();if len (_aeadd )< 1{_dbbf :=_ggae .AddParagraph ();
_dbbf .AddRun ().AddText ("");};for _ ,_gacba :=range _ggae .X ().EG_BlockLevelElts {for _ ,_cdaac :=range _gacba .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_dfab :=range _cdaac .ContentBlockContentChoice .P {for _ ,_gafed :=range _dfab .EG_PContent {for _ ,_efae :=range _gafed .PContentChoice .EG_ContentRunContent {if _efae .ContentRunContentChoice .R ==nil {continue ;
};_efae .ContentRunContentChoice .R .EG_RunInnerContent =append (_efae .ContentRunContentChoice .R .EG_RunInnerContent ,&_be .EG_RunInnerContent {RunInnerContentChoice :&_be .EG_RunInnerContentChoice {Pict :_bbc ._bcaag }});};};};};};};_bbc .SetPicture (imageRef );
return _bbc ;};

// InsertParagraphBefore adds a new empty paragraph before the relativeTo
// paragraph.
func (_ecaa *Document )InsertParagraphBefore (relativeTo Paragraph )Paragraph {return _ecaa .insertParagraph (relativeTo ,true );};func _gbea (_fbdga *_be .CT_P ,_aacf map[string ]string ){for _ ,_gfcd :=range _fbdga .EG_PContent {for _ ,_gaaf :=range _gfcd .PContentChoice .EG_ContentRunContent {if _gaaf .ContentRunContentChoice .R !=nil {for _ ,_fddg :=range _gaaf .ContentRunContentChoice .R .EG_RunInnerContent {_fffge :=_fddg .RunInnerContentChoice .Drawing ;
if _fffge !=nil {for _ ,_gdeg :=range _fffge .DrawingChoice {if _gdeg .Anchor !=nil {_dcfgb :=_gdeg .Anchor ;for _ ,_cgbge :=range _dcfgb .Graphic .GraphicData .Any {switch _deaea :=_cgbge .(type ){case *_fb .Pic :if _deaea .BlipFill !=nil &&_deaea .BlipFill .Blip !=nil {_beag (_deaea .BlipFill .Blip ,_aacf );
};default:};};};if _gdeg .Inline !=nil {_fadb :=_gdeg .Inline ;for _ ,_acgcd :=range _fadb .Graphic .GraphicData .Any {switch _aaegc :=_acgcd .(type ){case *_fb .Pic :if _aaegc .BlipFill !=nil &&_aaegc .BlipFill .Blip !=nil {_beag (_aaegc .BlipFill .Blip ,_aacf );
};default:};};};};};};};};};};

// SaveToFile writes the document out to a file.
func (_gdea *Document )SaveToFile (path string )error {_gee ,_edad :=_cd .Create (path );if _edad !=nil {return _edad ;};defer _gee .Close ();return _gdea .Save (_gee );};

// SetTextWrapBehindText sets the text wrap to behind text.
func (_ada AnchoredDrawing )SetTextWrapBehindText (){_ada ._cg .WrapTypeChoice =&_be .WdEG_WrapTypeChoice {};_ada ._cg .WrapTypeChoice .WrapNone =_be .NewWdCT_WrapNone ();_ada ._cg .BehindDocAttr =true ;_ada ._cg .LayoutInCellAttr =true ;_ada ._cg .AllowOverlapAttr =true ;
};

// DoubleStrike returns true if run is double striked.
func (_bbfc RunProperties )DoubleStrike ()bool {return _bgba (_bbfc ._dggdd .Dstrike )};func _beag (_fcg *_fce .CT_Blip ,_bbce map[string ]string ){if _fcg .EmbedAttr !=nil {if _gggbe ,_gdbf :=_bbce [*_fcg .EmbedAttr ];_gdbf {*_fcg .EmbedAttr =_gggbe ;
};};};

// SetTextStyleBold sets text style of watermark to bold.
func (_gbbeg *WatermarkText )SetTextStyleBold (value bool ){_ffea :=_gbbeg .GetStyle ();_ffea .SetBold (value );_gbbeg .SetStyle (_ffea );};func (_ffafd Paragraph )addFldCharsForField (_debge ,_ddbga string )FormField {_deba :=_ffafd .addBeginFldChar (_debge );
_gdgd :=FormField {_dbgb :_deba };_agbec :=_ffafd ._gfabf .Bookmarks ();_gaec :=int64 (len (_agbec ));if _debge !=""{_ffafd .addStartBookmark (_gaec ,_debge );};_ffafd .addInstrText (_ddbga );_ffafd .addSeparateFldChar ();if _ddbga =="\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054"{_degc :=_ffafd .AddRun ();
_fcfc :=_be .NewEG_RunInnerContent ();_degc ._fgad .EG_RunInnerContent =[]*_be .EG_RunInnerContent {_fcfc };_gdgd ._badfc =_fcfc ;};_ffafd .addEndFldChar ();if _debge !=""{_ffafd .addEndBookmark (_gaec );};return _gdgd ;};

// X returns the inner wrapped XML type.
func (_gbbce Paragraph )X ()*_be .CT_P {return _gbbce ._bcaf };

// HasEndnotes returns a bool based on the presence or abscence of endnotes within
// the document.
func (_bbfb *Document )HasEndnotes ()bool {return _bbfb ._dbc !=nil };

// NumberingDefinition defines a numbering definition for a list of pragraphs.
type NumberingDefinition struct{_dbgg *_be .CT_AbstractNum };

// AnchoredDrawing is an absolutely positioned image within a document page.
type AnchoredDrawing struct{_fcd *Document ;_cg *_be .WdAnchor ;};

// TableBorders allows manipulation of borders on a table.
type TableBorders struct{_ddbeg *_be .CT_TblBorders };func (_dcbb Footnote )id ()int64 {return _dcbb ._debf .IdAttr };

// GetDocRelTargetByID returns TargetAttr of document relationship given its IdAttr.
func (_gcce *Document )GetDocRelTargetByID (idAttr string )string {for _ ,_gedg :=range _gcce ._dbe .X ().Relationship {if _gedg .IdAttr ==idAttr {return _gedg .TargetAttr ;};};return "";};

// AddTabStop adds a tab stop to the paragraph.
func (_aabb ParagraphStyleProperties )AddTabStop (position _ac .Distance ,justificaton _be .ST_TabJc ,leader _be .ST_TabTlc ){if _aabb ._gbbb .Tabs ==nil {_aabb ._gbbb .Tabs =_be .NewCT_Tabs ();};_bgee :=_be .NewCT_TabStop ();_bgee .LeaderAttr =leader ;
_bgee .ValAttr =justificaton ;_bgee .PosAttr .Int64 =_g .Int64 (int64 (position /_ac .Twips ));_aabb ._gbbb .Tabs .Tab =append (_aabb ._gbbb .Tabs .Tab ,_bgee );};

// Footer is a footer for a document section.
type Footer struct{_bccb *Document ;_dgcd *_be .Ftr ;};

// X returns the inner wrapped XML type.
func (_adcd NumberingLevel )X ()*_be .CT_Lvl {return _adcd ._eabd };

// TextItem is used for keeping text with references to a paragraph and run or a table, a row and a cell where it is located.
type TextItem struct{Text string ;DrawingInfo *DrawingInfo ;Paragraph *_be .CT_P ;Hyperlink *_be .CT_Hyperlink ;Run *_be .CT_R ;TableInfo *TableInfo ;};

// NewSettings constructs a new empty Settings
func NewSettings ()Settings {_dabf :=_be .NewSettings ();_dabf .Compat =_be .NewCT_Compat ();_ccgca :=_be .NewCT_CompatSetting ();_ccgca .NameAttr =_g .String ("\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074y\u004d\u006f\u0064\u0065");
_ccgca .UriAttr =_g .String ("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006fff\u0069\u0063\u0065/\u0077o\u0072\u0064");_ccgca .ValAttr =_g .String ("\u0031\u0035");
_dabf .Compat .CompatSetting =append (_dabf .Compat .CompatSetting ,_ccgca );return Settings {_dabf };};

// Run is a run of text within a paragraph that shares the same formatting.
type Run struct{_cgbdg *Document ;_fgad *_be .CT_R ;};

// X returns the inner wrapped XML type.
func (_afbg HyperLink )X ()*_be .CT_Hyperlink {return _afbg ._caddg };

// SetOutline sets the run to outlined text.
func (_abade RunProperties )SetOutline (b bool ){if !b {_abade ._dggdd .Outline =nil ;}else {_abade ._dggdd .Outline =_be .NewCT_OnOff ();};};func (_cgfc *WatermarkPicture )findNode (_abbbd *_g .XSDAny ,_dbceb string )*_g .XSDAny {for _ ,_ebbaf :=range _abbbd .Nodes {if _ebbaf .XMLName .Local ==_dbceb {return _ebbaf ;
};};return nil ;};

// SetLayout controls the table layout. wml.ST_TblLayoutTypeAutofit corresponds
// to "Automatically resize to fit contents" being checked, while
// wml.ST_TblLayoutTypeFixed corresponds to it being unchecked.
func (_cababa TableProperties )SetLayout (l _be .ST_TblLayoutType ){if l ==_be .ST_TblLayoutTypeUnset ||l ==_be .ST_TblLayoutTypeAutofit {_cababa ._gdfab .TblLayout =nil ;}else {_cababa ._gdfab .TblLayout =_be .NewCT_TblLayoutType ();_cababa ._gdfab .TblLayout .TypeAttr =l ;
};};func (_aegca *WatermarkText )getShape ()*_g .XSDAny {return _aegca .getInnerElement ("\u0073\u0068\u0061p\u0065");};

// SetTextWrapThrough sets the text wrap to through with a give wrap type.
func (_aee AnchoredDrawing )SetTextWrapThrough (option *AnchorDrawWrapOptions ){_aee ._cg .WrapTypeChoice =&_be .WdEG_WrapTypeChoice {};_aee ._cg .WrapTypeChoice .WrapThrough =_be .NewWdCT_WrapThrough ();_aee ._cg .WrapTypeChoice .WrapThrough .WrapTextAttr =_be .WdST_WrapTextBothSides ;
_daa :=false ;_aee ._cg .WrapTypeChoice .WrapThrough .WrapPolygon .EditedAttr =&_daa ;if option ==nil {option =NewAnchorDrawWrapOptions ();};_aee ._cg .WrapTypeChoice .WrapThrough .WrapPolygon .Start =option .GetWrapPathStart ();_aee ._cg .WrapTypeChoice .WrapThrough .WrapPolygon .LineTo =option .GetWrapPathLineTo ();
_aee ._cg .LayoutInCellAttr =true ;_aee ._cg .AllowOverlapAttr =true ;};

// SetRightToLeft sets the run text goes from right to left.
func (_bfaa RunProperties )SetRightToLeft (b bool ){if !b {_bfaa ._dggdd .Rtl =nil ;}else {_bfaa ._dggdd .Rtl =_be .NewCT_OnOff ();};};

// Cell is a table cell within a document (not a spreadsheet)
type Cell struct{_fee *Document ;_ca *_be .CT_Tc ;};

// MailMerge finds mail merge fields and replaces them with the text provided.  It also removes
// the mail merge source info from the document settings.
func (_debc *Document )MailMerge (mergeContent map[string ]string ){_gbcb :=_debc .mergeFields ();_bdgbf :=map[Paragraph ][]Run {};for _ ,_abdf :=range _gbcb {_ccfd ,_caaf :=mergeContent [_abdf ._eegef ];if _caaf {if _abdf ._fefb {_ccfd =_cc .ToUpper (_ccfd );
}else if _abdf ._deffa {_ccfd =_cc .ToLower (_ccfd );}else if _abdf ._bcfc {_ccfd =_cc .Title (_ccfd );}else if _abdf ._ggfdeg {_bdcg :=_fc .Buffer {};for _abegc ,_gdbbg :=range _ccfd {if _abegc ==0{_bdcg .WriteRune (_gg .ToUpper (_gdbbg ));}else {_bdcg .WriteRune (_gdbbg );
};};_ccfd =_bdcg .String ();};if _ccfd !=""&&_abdf ._ggfde !=""{_ccfd =_abdf ._ggfde +_ccfd ;};if _ccfd !=""&&_abdf ._gaca !=""{_ccfd =_ccfd +_abdf ._gaca ;};};if _abdf ._babg {if len (_abdf ._eeag .PContentChoice .FldSimple )==1&&len (_abdf ._eeag .PContentChoice .FldSimple [0].EG_PContent )==1&&len (_abdf ._eeag .PContentChoice .FldSimple [0].EG_PContent [0].PContentChoice .EG_ContentRunContent )==1{_ecbb :=_be .NewEG_ContentRunContent ();
_ecbb .ContentRunContentChoice .R =_abdf ._eeag .PContentChoice .FldSimple [0].EG_PContent [0].PContentChoice .EG_ContentRunContent [0].ContentRunContentChoice .R ;_abdf ._eeag .PContentChoice .FldSimple =nil ;_edcf :=Run {_debc ,_ecbb .ContentRunContentChoice .R };
_edcf .ClearContent ();_edcf .AddText (_ccfd );_abdf ._eeag .PContentChoice .EG_ContentRunContent =append (_abdf ._eeag .PContentChoice .EG_ContentRunContent ,_ecbb );};}else {_bgbc :=_abdf ._fage .Runs ();for _ddbe :=_abdf ._gfbac ;_ddbe <=_abdf ._dbed ;
_ddbe ++{if _ddbe ==_abdf ._bcdfc +1{_bgbc [_ddbe ].ClearContent ();_bgbc [_ddbe ].AddText (_ccfd );}else {_bdgbf [_abdf ._fage ]=append (_bdgbf [_abdf ._fage ],_bgbc [_ddbe ]);};};};};for _adfbc ,_eade :=range _bdgbf {for _ ,_bcgbgg :=range _eade {_adfbc .RemoveRun (_bcgbgg );
};};_debc .Settings .RemoveMailMerge ();};

// SetSpacing sets the spacing that comes before and after the paragraph.
func (_faeag ParagraphStyleProperties )SetSpacing (before ,after _ac .Distance ){if _faeag ._gbbb .Spacing ==nil {_faeag ._gbbb .Spacing =_be .NewCT_Spacing ();};if before ==_ac .Zero {_faeag ._gbbb .Spacing .BeforeAttr =nil ;}else {_faeag ._gbbb .Spacing .BeforeAttr =&_gfa .ST_TwipsMeasure {};
_faeag ._gbbb .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (before /_ac .Twips ));};if after ==_ac .Zero {_faeag ._gbbb .Spacing .AfterAttr =nil ;}else {_faeag ._gbbb .Spacing .AfterAttr =&_gfa .ST_TwipsMeasure {};_faeag ._gbbb .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (after /_ac .Twips ));
};};

// SetVerticalAlignment sets the vertical alignment of content within a table cell.
func (_abe CellProperties )SetVerticalAlignment (align _be .ST_VerticalJc ){if align ==_be .ST_VerticalJcUnset {_abe ._fad .VAlign =nil ;}else {_abe ._fad .VAlign =_be .NewCT_VerticalJc ();_abe ._fad .VAlign .ValAttr =align ;};};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_fcad *Document )AddImage (i _ec .Image )(_ec .ImageRef ,error ){_dcg :=_ec .MakeImageRef (i ,&_fcad .DocBase ,_fcad ._dbe );if i .Data ==nil &&i .Path ==""{return _dcg ,_a .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");
};if i .Format ==""{return _dcg ,_a .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _dcg ,_a .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");
};if i .Path !=""{_bbaa :=_eb .Add (i .Path );if _bbaa !=nil {return _dcg ,_bbaa ;};};_fcad .Images =append (_fcad .Images ,_dcg );_daec :=_b .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_fcad .Images ),i .Format );
_fac :=_fcad ._dbe .AddRelationship (_daec ,_g .ImageType );_fcad .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_fcad .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");
_fcad .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_fcad .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_fcad .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );
_dcg .SetRelID (_fac .X ().IdAttr );_dcg .SetTarget (_daec );return _dcg ,nil ;};

// X returns the inner wrapped XML type.
func (_ced Cell )X ()*_be .CT_Tc {return _ced ._ca };

// Node is document element node,
// contains Paragraph or Table element.
type Node struct{_dgabd *Document ;_bgcd interface{};Style Style ;AnchoredDrawings []AnchoredDrawing ;InlineDrawings []InlineDrawing ;Children []Node ;};func (_ebg Comment )id ()int64 {return _ebg ._ebdf .IdAttr };

// X returns the inner wrapped XML type.
func (_cggd ParagraphProperties )X ()*_be .CT_PPr {return _cggd ._fbaa };func _baecc ()*_bd .Formulas {_gbfed :=_bd .NewFormulas ();_gbfed .F =[]*_bd .CT_F {_fa .CreateFormula ("\u0073\u0075\u006d\u0020\u0023\u0030\u0020\u0030\u00201\u0030\u0038\u0030\u0030"),_fa .CreateFormula ("p\u0072\u006f\u0064\u0020\u0023\u0030\u0020\u0032\u0020\u0031"),_fa .CreateFormula ("\u0073\u0075\u006d\u0020\u0032\u0031\u0036\u0030\u0030 \u0030\u0020\u0040\u0031"),_fa .CreateFormula ("\u0073\u0075\u006d\u0020\u0030\u0020\u0030\u0020\u0040\u0032"),_fa .CreateFormula ("\u0073\u0075\u006d\u0020\u0032\u0031\u0036\u0030\u0030 \u0030\u0020\u0040\u0033"),_fa .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0040\u0033\u0020\u0030"),_fa .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0032\u0031\u00360\u0030\u0020\u0040\u0031"),_fa .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0030\u0020\u0040\u0032"),_fa .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0040\u0034\u00202\u0031\u0036\u0030\u0030"),_fa .CreateFormula ("\u006di\u0064\u0020\u0040\u0035\u0020\u00406"),_fa .CreateFormula ("\u006di\u0064\u0020\u0040\u0038\u0020\u00405"),_fa .CreateFormula ("\u006di\u0064\u0020\u0040\u0037\u0020\u00408"),_fa .CreateFormula ("\u006di\u0064\u0020\u0040\u0036\u0020\u00407"),_fa .CreateFormula ("s\u0075\u006d\u0020\u0040\u0036\u0020\u0030\u0020\u0040\u0035")};
return _gbfed ;};

// GetImage returns the ImageRef associated with an AnchoredDrawing.
func (_da AnchoredDrawing )GetImage ()(_ec .ImageRef ,bool ){_cf :=_da ._cg .Graphic .GraphicData .Any ;if len (_cf )> 0{_bc ,_eaf :=_cf [0].(*_fb .Pic );if _eaf {if _bc .BlipFill !=nil &&_bc .BlipFill .Blip !=nil &&_bc .BlipFill .Blip .EmbedAttr !=nil {return _da ._fcd .GetImageByRelID (*_bc .BlipFill .Blip .EmbedAttr );
};};};return _ec .ImageRef {},false ;};

// InsertStyle insert style to styles.
func (_dgfa Styles )InsertStyle (ss Style ){_dgfa ._effe .Style =append (_dgfa ._effe .Style ,ss .X ())};

// SetPrimaryStyle marks the style as a primary style.
func (_ffagc Style )SetPrimaryStyle (b bool ){if b {_ffagc ._gegdgf .QFormat =_be .NewCT_OnOff ();}else {_ffagc ._gegdgf .QFormat =nil ;};};

// StructuredDocumentTags returns the structured document tags in the document
// which are commonly used in document templates.
func (_ceae *Document )StructuredDocumentTags ()[]StructuredDocumentTag {_edgbe :=[]StructuredDocumentTag {};for _ ,_eef :=range _ceae ._cgb .Body .EG_BlockLevelElts {for _ ,_ffdd :=range _eef .BlockLevelEltsChoice .EG_ContentBlockContent {if _ffdd .ContentBlockContentChoice .Sdt !=nil {_edgbe =append (_edgbe ,StructuredDocumentTag {_ceae ,_ffdd .ContentBlockContentChoice .Sdt });
};};};return _edgbe ;};

// SetMultiLevelType sets the multilevel type.
func (_baea NumberingDefinition )SetMultiLevelType (t _be .ST_MultiLevelType ){if t ==_be .ST_MultiLevelTypeUnset {_baea ._dbgg .MultiLevelType =nil ;}else {_baea ._dbgg .MultiLevelType =_be .NewCT_MultiLevelType ();_baea ._dbgg .MultiLevelType .ValAttr =t ;
};};

// SetOrigin sets the origin of the image.  It defaults to ST_RelFromHPage and
// ST_RelFromVPage
func (_dcc AnchoredDrawing )SetOrigin (h _be .WdST_RelFromH ,v _be .WdST_RelFromV ){_dcc ._cg .PositionH .RelativeFromAttr =h ;_dcc ._cg .PositionV .RelativeFromAttr =v ;};

// SetTableIndent sets the Table Indent from the Leading Margin
func (_gcbd TableStyleProperties )SetTableIndent (ind _ac .Distance ){_gcbd ._eeda .TblInd =_be .NewCT_TblWidth ();_gcbd ._eeda .TblInd .TypeAttr =_be .ST_TblWidthDxa ;_gcbd ._eeda .TblInd .WAttr =&_be .ST_MeasurementOrPercent {};_gcbd ._eeda .TblInd .WAttr .ST_DecimalNumberOrPercent =&_be .ST_DecimalNumberOrPercent {};
_gcbd ._eeda .TblInd .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (ind /_ac .Dxa ));};

// RemoveParagraph removes a paragraph from a document.
func (_fae *Document )RemoveParagraph (p Paragraph ){if _fae ._cgb .Body ==nil {return ;};for _ ,_aced :=range _fae ._cgb .Body .EG_BlockLevelElts {for _ ,_cfge :=range _aced .BlockLevelEltsChoice .EG_ContentBlockContent {for _aabd ,_dacff :=range _cfge .ContentBlockContentChoice .P {if _dacff ==p ._bcaf {copy (_cfge .ContentBlockContentChoice .P [_aabd :],_cfge .ContentBlockContentChoice .P [_aabd +1:]);
_cfge .ContentBlockContentChoice .P =_cfge .ContentBlockContentChoice .P [0:len (_cfge .ContentBlockContentChoice .P )-1];return ;};};if _cfge .ContentBlockContentChoice .Sdt !=nil &&_cfge .ContentBlockContentChoice .Sdt .SdtContent !=nil {for _ ,_dce :=range _cfge .ContentBlockContentChoice .Sdt .SdtContent .EG_ContentBlockContent {for _ggb ,_gdde :=range _dce .ContentBlockContentChoice .P {if _gdde ==p ._bcaf {copy (_cfge .ContentBlockContentChoice .P [_ggb :],_cfge .ContentBlockContentChoice .P [_ggb +1:]);
_cfge .ContentBlockContentChoice .P =_cfge .ContentBlockContentChoice .P [0:len (_cfge .ContentBlockContentChoice .P )-1];return ;};};};};};};for _ ,_abbb :=range _fae .Tables (){for _ ,_fedg :=range _abbb .Rows (){for _ ,_acd :=range _fedg .Cells (){for _ ,_fbfb :=range _acd ._ca .EG_BlockLevelElts {for _ ,_dcfd :=range _fbfb .BlockLevelEltsChoice .EG_ContentBlockContent {for _fgcfa ,_geda :=range _dcfd .ContentBlockContentChoice .P {if _geda ==p ._bcaf {copy (_dcfd .ContentBlockContentChoice .P [_fgcfa :],_dcfd .ContentBlockContentChoice .P [_fgcfa +1:]);
_dcfd .ContentBlockContentChoice .P =_dcfd .ContentBlockContentChoice .P [0:len (_dcfd .ContentBlockContentChoice .P )-1];return ;};};};};};};};for _ ,_cfef :=range _fae .Headers (){_cfef .RemoveParagraph (p );};for _ ,_cfgg :=range _fae .Footers (){_cfgg .RemoveParagraph (p );
};};

// InsertRunAfter inserts a run in the paragraph after the relative run.
func (_gagac Paragraph )InsertRunAfter (relativeTo Run )Run {return _gagac .insertRun (relativeTo ,false );};

// GetColor returns the color.Color object representing the run color.
func (_bddc ParagraphProperties )GetColor ()_cb .Color {if _cbge :=_bddc ._fbaa .RPr .Color ;_cbge !=nil {_ffddf :=_cbge .ValAttr ;if _ffddf .ST_HexColorRGB !=nil {return _cb .FromHex (*_ffddf .ST_HexColorRGB );};};return _cb .Color {};};

// CellProperties are a table cells properties within a document.
type CellProperties struct{_fad *_be .CT_TcPr };

// Emboss returns true if run emboss is on.
func (_gbeef RunProperties )Emboss ()bool {return _bgba (_gbeef ._dggdd .Emboss )};

// Tables returns the tables defined in the document.
func (_gggb *Document )Tables ()[]Table {_dba :=[]Table {};if _gggb ._cgb .Body ==nil {return nil ;};for _ ,_dggd :=range _gggb ._cgb .Body .EG_BlockLevelElts {for _ ,_ffbc :=range _dggd .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_aedf :=range _gggb .tables (_ffbc ){_dba =append (_dba ,_aedf );
};};};return _dba ;};

// OnOffValue represents an on/off value that can also be unset
type OnOffValue byte ;

// Footnote returns the footnote based on the ID; this can be used nicely with
// the run.IsFootnote() functionality.
func (_dage *Document )Footnote (id int64 )Footnote {for _ ,_bdgcb :=range _dage .Footnotes (){if _bdgcb .id ()==id {return _bdgcb ;};};return Footnote {};};func (_bea *Document )appendTable (_gbf *Paragraph ,_aaab Table ,_bdf bool )Table {_ebaa :=_bea ._cgb .Body ;
_cdfc :=_be .NewEG_BlockLevelElts ();_bea ._cgb .Body .EG_BlockLevelElts =append (_bea ._cgb .Body .EG_BlockLevelElts ,_cdfc );_agb :=_be .NewEG_ContentBlockContent ();_cdfc .BlockLevelEltsChoice .EG_ContentBlockContent =append (_cdfc .BlockLevelEltsChoice .EG_ContentBlockContent ,_agb );
if _gbf !=nil {_gef :=_gbf .X ();for _gfd ,_cbd :=range _ebaa .EG_BlockLevelElts {for _ ,_gdbc :=range _cbd .BlockLevelEltsChoice .EG_ContentBlockContent {for _fda ,_ffbgf :=range _agb .ContentBlockContentChoice .P {if _ffbgf ==_gef {_bged :=_aaab .X ();
_fcbf :=_be .NewEG_BlockLevelElts ();_bcfb :=_be .NewEG_ContentBlockContent ();_fcbf .BlockLevelEltsChoice .EG_ContentBlockContent =append (_fcbf .BlockLevelEltsChoice .EG_ContentBlockContent ,_bcfb );_bcfb .ContentBlockContentChoice .Tbl =append (_bcfb .ContentBlockContentChoice .Tbl ,_bged );
_ebaa .EG_BlockLevelElts =append (_ebaa .EG_BlockLevelElts ,nil );if _bdf {copy (_ebaa .EG_BlockLevelElts [_gfd +1:],_ebaa .EG_BlockLevelElts [_gfd :]);_ebaa .EG_BlockLevelElts [_gfd ]=_fcbf ;if _fda !=0{_cee :=_be .NewEG_BlockLevelElts ();_afea :=_be .NewEG_ContentBlockContent ();
_cee .BlockLevelEltsChoice .EG_ContentBlockContent =append (_cee .BlockLevelEltsChoice .EG_ContentBlockContent ,_afea );_afea .ContentBlockContentChoice .P =_gdbc .ContentBlockContentChoice .P [:_fda ];_ebaa .EG_BlockLevelElts =append (_ebaa .EG_BlockLevelElts ,nil );
copy (_ebaa .EG_BlockLevelElts [_gfd +1:],_ebaa .EG_BlockLevelElts [_gfd :]);_ebaa .EG_BlockLevelElts [_gfd ]=_cee ;};_gdbc .ContentBlockContentChoice .P =_gdbc .ContentBlockContentChoice .P [_fda :];}else {copy (_ebaa .EG_BlockLevelElts [_gfd +2:],_ebaa .EG_BlockLevelElts [_gfd +1:]);
_ebaa .EG_BlockLevelElts [_gfd +1]=_fcbf ;if _fda !=len (_gdbc .ContentBlockContentChoice .P )-1{_ffeg :=_be .NewEG_BlockLevelElts ();_feea :=_be .NewEG_ContentBlockContent ();_ffeg .BlockLevelEltsChoice .EG_ContentBlockContent =append (_ffeg .BlockLevelEltsChoice .EG_ContentBlockContent ,_feea );
_feea .ContentBlockContentChoice .P =_gdbc .ContentBlockContentChoice .P [_fda +1:];_ebaa .EG_BlockLevelElts =append (_ebaa .EG_BlockLevelElts ,nil );copy (_ebaa .EG_BlockLevelElts [_gfd +3:],_ebaa .EG_BlockLevelElts [_gfd +2:]);_ebaa .EG_BlockLevelElts [_gfd +2]=_ffeg ;
};_gdbc .ContentBlockContentChoice .P =_gdbc .ContentBlockContentChoice .P [:_fda +1];};break ;};};for _ ,_bggd :=range _gdbc .ContentBlockContentChoice .Tbl {_cfed :=_afge (_bggd ,_gef ,_bdf );if _cfed !=nil {break ;};};};};}else {_agb .ContentBlockContentChoice .Tbl =append (_agb .ContentBlockContentChoice .Tbl ,_aaab .X ());
};return Table {_bea ,_aaab .X ()};};

// AddCommentReference adds comment reference to a run.
func (_acae Run )AddCommentReference (id int64 ){_aacbd :=_acae .newIC ();_aacbd .RunInnerContentChoice .CommentReference =_be .NewCT_Markup ();_aacbd .RunInnerContentChoice .CommentReference .IdAttr =id ;};func (_ggab *Document )insertTable (_dbce Paragraph ,_bbb bool )Table {_ebfe :=_ggab ._cgb .Body ;
if _ebfe ==nil {return _ggab .AddTable ();};_gdb :=_dbce .X ();for _acc ,_bfdf :=range _ebfe .EG_BlockLevelElts {for _ ,_dfee :=range _bfdf .BlockLevelEltsChoice .EG_ContentBlockContent {for _dagg ,_gcab :=range _dfee .ContentBlockContentChoice .P {if _gcab ==_gdb {_gcg :=_be .NewCT_Tbl ();
_ddef :=_be .NewEG_BlockLevelElts ();_fagg :=_be .NewEG_ContentBlockContent ();_ddef .BlockLevelEltsChoice .EG_ContentBlockContent =append (_ddef .BlockLevelEltsChoice .EG_ContentBlockContent ,_fagg );_fagg .ContentBlockContentChoice .Tbl =append (_fagg .ContentBlockContentChoice .Tbl ,_gcg );
_ebfe .EG_BlockLevelElts =append (_ebfe .EG_BlockLevelElts ,nil );if _bbb {copy (_ebfe .EG_BlockLevelElts [_acc +1:],_ebfe .EG_BlockLevelElts [_acc :]);_ebfe .EG_BlockLevelElts [_acc ]=_ddef ;if _dagg !=0{_gaac :=_be .NewEG_BlockLevelElts ();_fagc :=_be .NewEG_ContentBlockContent ();
_gaac .BlockLevelEltsChoice .EG_ContentBlockContent =append (_gaac .BlockLevelEltsChoice .EG_ContentBlockContent ,_fagc );_fagc .ContentBlockContentChoice .P =_dfee .ContentBlockContentChoice .P [:_dagg ];_ebfe .EG_BlockLevelElts =append (_ebfe .EG_BlockLevelElts ,nil );
copy (_ebfe .EG_BlockLevelElts [_acc +1:],_ebfe .EG_BlockLevelElts [_acc :]);_ebfe .EG_BlockLevelElts [_acc ]=_gaac ;};_dfee .ContentBlockContentChoice .P =_dfee .ContentBlockContentChoice .P [_dagg :];}else {copy (_ebfe .EG_BlockLevelElts [_acc +2:],_ebfe .EG_BlockLevelElts [_acc +1:]);
_ebfe .EG_BlockLevelElts [_acc +1]=_ddef ;if _dagg !=len (_dfee .ContentBlockContentChoice .P )-1{_dfg :=_be .NewEG_BlockLevelElts ();_aggf :=_be .NewEG_ContentBlockContent ();_dfg .BlockLevelEltsChoice .EG_ContentBlockContent =append (_dfg .BlockLevelEltsChoice .EG_ContentBlockContent ,_aggf );
_aggf .ContentBlockContentChoice .P =_dfee .ContentBlockContentChoice .P [_dagg +1:];_ebfe .EG_BlockLevelElts =append (_ebfe .EG_BlockLevelElts ,nil );copy (_ebfe .EG_BlockLevelElts [_acc +3:],_ebfe .EG_BlockLevelElts [_acc +2:]);_ebfe .EG_BlockLevelElts [_acc +2]=_dfg ;
};_dfee .ContentBlockContentChoice .P =_dfee .ContentBlockContentChoice .P [:_dagg +1];};return Table {_ggab ,_gcg };};};for _ ,_cdaa :=range _dfee .ContentBlockContentChoice .Tbl {_bfad :=_afge (_cdaa ,_gdb ,_bbb );if _bfad !=nil {return Table {_ggab ,_bfad };
};};};};return _ggab .AddTable ();};

// SetHeight allows controlling the height of a row within a table.
func (_fbefe RowProperties )SetHeight (ht _ac .Distance ,rule _be .ST_HeightRule ){if rule ==_be .ST_HeightRuleUnset {_fbefe ._bfdba .TrPrBaseChoice =nil ;}else {_gdfgd :=_be .NewCT_Height ();_gdfgd .HRuleAttr =rule ;_gdfgd .ValAttr =&_gfa .ST_TwipsMeasure {};
_gdfgd .ValAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (ht /_ac .Twips ));_fbefe ._bfdba .TrPrBaseChoice =[]*_be .CT_TrPrBaseChoice {&_be .CT_TrPrBaseChoice {TrHeight :_gdfgd }};};};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_aebge TableBorders )SetInsideVertical (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_aebge ._ddbeg .InsideV =_be .NewCT_Border ();_gdff (_aebge ._ddbeg .InsideV ,t ,c ,thickness );};

// X returns the inner wrapped XML type.
func (_gbggb Settings )X ()*_be .Settings {return _gbggb ._cedc };

// Underline returns the type of paragraph underline.
func (_eefa ParagraphProperties )Underline ()_be .ST_Underline {if _gfbcc :=_eefa ._fbaa .RPr .U ;_gfbcc !=nil {return _gfbcc .ValAttr ;};return 0;};

// Value returns the tring value of a FormFieldTypeText or FormFieldTypeDropDown.
func (_agdad FormField )Value ()string {if _agdad ._dbgb .FFDataChoice !=nil &&len (_agdad ._dbgb .FFDataChoice )> 0{if _agdad ._dbgb .FFDataChoice [0].TextInput !=nil &&_agdad ._badfc .RunInnerContentChoice .T !=nil {return _agdad ._badfc .RunInnerContentChoice .T .Content ;
}else if _agdad ._dbgb .FFDataChoice [0].DdList !=nil &&_agdad ._dbgb .FFDataChoice [0].DdList .Result !=nil {_defa :=_agdad .PossibleValues ();_cccgg :=int (_agdad ._dbgb .FFDataChoice [0].DdList .Result .ValAttr );if _cccgg < len (_defa ){return _defa [_cccgg ];
};}else if _agdad ._dbgb .FFDataChoice [0].CheckBox !=nil {if _agdad .IsChecked (){return "\u0074\u0072\u0075\u0065";};return "\u0066\u0061\u006cs\u0065";};};return "";};

// AnchorDrawWrapOptions is options to set
// wrapPolygon for wrap text through and tight.
type AnchorDrawWrapOptions struct{_efg bool ;_ega *_fce .CT_Point2D ;_eea []*_fce .CT_Point2D ;};

// SetRight sets the right border to a specified type, color and thickness.
func (_eedgb ParagraphBorders )SetRight (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_eedgb ._edfd .Right =_be .NewCT_Border ();_fgdcg (_eedgb ._edfd .Right ,t ,c ,thickness );};

// AddComment add comment to the paragraph.
func (_fcfe Paragraph )AddComment (author ,commentText string )int64 {var _dcgae int64 ;if _fcfe ._gfabf .HasComments (){for _ ,_ebfdd :=range _fcfe ._gfabf .Comments (){if _ebfdd .id ()> _dcgae {_dcgae =_ebfdd .id ();};};_dcgae ++;}else {_fcfe ._gfabf .addComments ();
_dcgae =1;};_fbffb :=_be .NewCT_Comment ();_dfbg :=_be .NewCT_Markup ();_cdgf :=_dc .Initials (author );_cebbb :=_fd .Now ();_fbffb .IdAttr =_dcgae ;_fbffb .AuthorAttr =author ;_fbffb .InitialsAttr =&_cdgf ;_fbffb .DateAttr =&_cebbb ;_dfbg .IdAttr =_dcgae ;
_fbffb .EG_BlockLevelElts =append (_fbffb .EG_BlockLevelElts ,_be .NewEG_BlockLevelElts ());_ebdaa :=Comment {_fcfe ._gfabf ,_fbffb };_afefg :=_ebdaa .AddParagraph ();_afefg .SetStyle (_bdge );_bdagf :=_afefg .AddRun ();_bdagf .AddAnnotationReference ();
_gggd :=_bdagf .Properties ();_gggd .SetStyle (_agf );_cffd :=_afefg .AddRun ();_cffd .AddText (commentText );_dbac :=_cffd .Properties ();_dbac .SetSize (_ac .Distance (_fbb ));_fcfe ._gfabf ._ecff .CT_Comments .Comment =append (_fcfe ._gfabf ._ecff .CT_Comments .Comment ,_fbffb );
_fcfe .addStartComment (_dcgae );return _dcgae ;};

// SetAll sets all of the borders to a given value.
func (_edged ParagraphBorders )SetAll (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_edged .SetBottom (t ,c ,thickness );_edged .SetLeft (t ,c ,thickness );_edged .SetRight (t ,c ,thickness );_edged .SetTop (t ,c ,thickness );};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_dfeag Paragraph )Style ()string {if _dfeag ._bcaf .PPr !=nil &&_dfeag ._bcaf .PPr .PStyle !=nil {return _dfeag ._bcaf .PPr .PStyle .ValAttr ;};return "";};func _edgeb (_gfca *Document ,_beef []*_be .EG_ContentBlockContent ,_babc *TableInfo )[]Node {_aaegcb :=[]Node {};
for _ ,_dgcdf :=range _beef {if _egfbc :=_dgcdf .ContentBlockContentChoice .Sdt ;_egfbc !=nil {if _acgb :=_egfbc .SdtContent ;_acgb !=nil {for _ ,_bdgcg :=range _acgb .EG_ContentBlockContent {_aaegcb =append (_aaegcb ,_dafg (_gfca ,_bdgcg .ContentBlockContentChoice .P ,_babc ,nil )...);
};};};_aaegcb =append (_aaegcb ,_dafg (_gfca ,_dgcdf .ContentBlockContentChoice .P ,_babc ,nil )...);for _ ,_abbag :=range _dgcdf .ContentBlockContentChoice .Tbl {_cbab :=Table {_gfca ,_abbag };_adddf ,_ :=_gfca .Styles .SearchStyleById (_cbab .Style ());
_ececb :=[]Node {};for _eggff ,_eaee :=range _abbag .EG_ContentRowContent {for _ ,_ebec :=range _eaee .ContentRowContentChoice .Tr {for _gbaa ,_bgbfc :=range _ebec .EG_ContentCellContent {for _ ,_bdgbff :=range _bgbfc .ContentCellContentChoice .Tc {_ffbca :=&TableInfo {Table :_abbag ,Row :_ebec ,Cell :_bdgbff ,RowIndex :_eggff ,ColIndex :_gbaa };
for _ ,_bfabg :=range _bdgbff .EG_BlockLevelElts {_ececb =append (_ececb ,_edgeb (_gfca ,_bfabg .BlockLevelEltsChoice .EG_ContentBlockContent ,_ffbca )...);};};};};};_aaegcb =append (_aaegcb ,Node {_dgabd :_gfca ,_bgcd :&_cbab ,Style :_adddf ,Children :_ececb });
};};return _aaegcb ;};

// SetEnabled marks a FormField as enabled or disabled.
func (_cafc FormField )SetEnabled (enabled bool ){_fcbfb :=_be .NewCT_OnOff ();_fcbfb .ValAttr =&_gfa .ST_OnOff {Bool :&enabled };_cafc ._dbgb .FFDataChoice =[]*_be .CT_FFDataChoice {&_be .CT_FFDataChoice {Enabled :_fcbfb }};};

// SetBorder sets the border of anchor.
func (_cda AnchoredDrawing )SetBorder (borderType _fce .ST_PresetLineDashVal ,c _cb .Color ,thickness _ac .Distance ){_bab :=_ac .ToEMU (float64 (thickness ));for _ ,_afg :=range _cda ._cg .Graphic .GraphicData .Any {if _bbg ,_ddg :=_afg .(*_fb .Pic );
_ddg {_bbg .SpPr .Ln =_fce .NewCT_LineProperties ();_bbg .SpPr .Ln .WAttr =_g .Int32 (int32 (_bab ));_bbg .SpPr .Ln .LineDashPropertiesChoice =_fce .NewEG_LineDashPropertiesChoice ();_bbg .SpPr .Ln .LineDashPropertiesChoice .PrstDash =_fce .NewCT_PresetLineDashProperties ();
_bbg .SpPr .Ln .LineDashPropertiesChoice .PrstDash .ValAttr =borderType ;_bbg .SpPr .Ln .LineFillPropertiesChoice =_fce .NewEG_LineFillPropertiesChoice ();_bbg .SpPr .Ln .LineFillPropertiesChoice .SolidFill =_fce .NewCT_SolidColorFillProperties ();_bbg .SpPr .Ln .LineFillPropertiesChoice .SolidFill .SrgbClr =_fce .NewCT_SRgbColor ();
_bbg .SpPr .Ln .LineFillPropertiesChoice .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};};_cda .setEffectExtent (_bab ,_bab ,_bab ,_bab );};

// SetStyle sets the style of a paragraph and is identical to setting it on the
// paragraph's Properties()
func (_eage Paragraph )SetStyle (s string ){_eage .ensurePPr ();if s ==""{_eage ._bcaf .PPr .PStyle =nil ;}else {_eage ._bcaf .PPr .PStyle =_be .NewCT_String ();_eage ._bcaf .PPr .PStyle .ValAttr =s ;};};

// SetAlignment set alignment of paragraph.
func (_gffa Paragraph )SetAlignment (alignment _be .ST_Jc ){_gffa .ensurePPr ();if _gffa ._bcaf .PPr .Jc ==nil {_gffa ._bcaf .PPr .Jc =_be .NewCT_Jc ();};_gffa ._bcaf .PPr .Jc .ValAttr =alignment ;};

// SetOutlineLvl sets outline level of paragraph.
func (_dbfg Paragraph )SetOutlineLvl (lvl int64 ){_dbfg .ensurePPr ();if _dbfg ._bcaf .PPr .OutlineLvl ==nil {_dbfg ._bcaf .PPr .OutlineLvl =_be .NewCT_DecimalNumber ();};_fbfae :=lvl -1;_dbfg ._bcaf .PPr .OutlineLvl .ValAttr =_fbfae ;};

// SetTop sets the top border to a specified type, color and thickness.
func (_bddff TableBorders )SetTop (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_bddff ._ddbeg .Top =_be .NewCT_Border ();_gdff (_bddff ._ddbeg .Top ,t ,c ,thickness );};func _dafg (_bcga *Document ,_bace []*_be .CT_P ,_aacg *TableInfo ,_acdf *DrawingInfo )[]Node {_bbfd :=[]Node {};
for _ ,_cabf :=range _bace {_bced :=Paragraph {_bcga ,_cabf };_gaee :=Node {_dgabd :_bcga ,_bgcd :&_bced };if _eeead ,_abgd :=_bcga .Styles .SearchStyleById (_bced .Style ());_abgd {_gaee .Style =_eeead ;};for _ ,_ceag :=range _bced .Runs (){_gaee .Children =append (_gaee .Children ,Node {_dgabd :_bcga ,_bgcd :_ceag ,AnchoredDrawings :_ceag .DrawingAnchored (),InlineDrawings :_ceag .DrawingInline ()});
};_bbfd =append (_bbfd ,_gaee );};return _bbfd ;};

// SetAll sets all of the borders to a given value.
func (_beg CellBorders )SetAll (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_beg .SetBottom (t ,c ,thickness );_beg .SetLeft (t ,c ,thickness );_beg .SetRight (t ,c ,thickness );_beg .SetTop (t ,c ,thickness );_beg .SetInsideHorizontal (t ,c ,thickness );
_beg .SetInsideVertical (t ,c ,thickness );};func _bgba (_effg *_be .CT_OnOff )bool {return _effg !=nil };

// SetSmallCaps sets the run to small caps.
func (_cebf RunProperties )SetSmallCaps (b bool ){if !b {_cebf ._dggdd .SmallCaps =nil ;}else {_cebf ._dggdd .SmallCaps =_be .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_bagge Fonts )X ()*_be .CT_Fonts {return _bagge ._ggdb };func _ccbgc ()*_bd .OfcLock {_fcabg :=_bd .NewOfcLock ();_fcabg .ExtAttr =_bd .ST_ExtEdit ;_fcabg .TextAttr =_gfa .ST_TrueFalseTrue ;_fcabg .ShapetypeAttr =_gfa .ST_TrueFalseTrue ;return _fcabg ;
};

// SetCantSplit set row properties for Can't Split value.
func (_cfdae RowProperties )SetCantSplit (val bool ){if !val {_cfdae ._bfdba .TrPrBaseChoice =nil ;}else {_cfdae ._bfdba .TrPrBaseChoice =[]*_be .CT_TrPrBaseChoice {&_be .CT_TrPrBaseChoice {CantSplit :_be .NewCT_OnOff ()}};};};func (_bfce *WatermarkPicture )getShapeType ()*_g .XSDAny {return _bfce .getInnerElement ("\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e");
};

// SetGlowImageEffect sets the glow image effect.
func (_gba AnchoredDrawing )SetGlowImageEffect (radius _ac .Distance ,c _cb .Color ){_dcfe :=_ac .ToEMU (float64 (radius ));for _ ,_feb :=range _gba ._cg .Graphic .GraphicData .Any {if _aec ,_eeb :=_feb .(*_fb .Pic );_eeb {_gba .initializeEffectList (_aec .SpPr );
_aec .SpPr .EffectPropertiesChoice .EffectLst .Glow =_fce .NewCT_GlowEffect ();_aec .SpPr .EffectPropertiesChoice .EffectLst .Glow .RadAttr =&_dcfe ;_aec .SpPr .EffectPropertiesChoice .EffectLst .Glow .SrgbClr =_fce .NewCT_SRgbColor ();_aec .SpPr .EffectPropertiesChoice .EffectLst .Glow .SrgbClr .ValAttr =*c .AsRGBString ();
};};_gba .setEffectExtent (_dcfe ,_dcfe ,_dcfe ,_dcfe );};

// IsFootnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_afae Run )IsFootnote ()(bool ,int64 ){if _afae ._fgad .EG_RunInnerContent !=nil {if _afae ._fgad .EG_RunInnerContent [0].RunInnerContentChoice .FootnoteReference !=nil {return true ,_afae ._fgad .EG_RunInnerContent [0].RunInnerContentChoice .FootnoteReference .IdAttr ;
};};return false ,0;};

// SetFontSize sets font size of watermark text.
func (_accb *WatermarkText )SetFontSize (value int64 ){_cdca :=_accb .GetStyle ();_cdca .SetFontSize (value );_accb .SetStyle (_cdca );if _accb ._cgddc !=nil &&_accb ._cgddc .StyleAttr !=nil {_gadg :=*_accb ._cgddc .StyleAttr ;_gadg =_cc .ReplaceAll (_gadg ,"\u0077i\u0064\u0074\u0068\u003a4\u0036\u0038\u0070\u0074\u003bh\u0065i\u0067h\u0074\u003a\u0032\u0033\u0034\u0070\u0074;",_b .Sprintf ("\u0077\u0069\u0064th\u003a\u0025\u0064\u0070\u0074\u003b\u0068\u0065\u0069\u0067\u0068\u0074\u003a\u0025\u0064\u0070\u0074\u003b",int64 (len (_accb .GetText ()))*value ,2*value ));
_accb ._cgddc .StyleAttr =&_gadg ;};};

// Settings controls the document settings.
type Settings struct{_cedc *_be .Settings };func (_ccab *Node )Remove (){switch _eaage :=_ccab .X ().(type ){case *Paragraph :_ccab ._dgabd .RemoveParagraph (*_eaage );case *Table :_ccab ._dgabd .RemoveTable (*_eaage );default:_ede .Log .Debug ("\u004e\u006f\u0064e \u0074\u0079\u0070\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064");
};for _ ,_efcf :=range _ccab .Children {_efcf .Remove ();};};

// Nodes contains slice of Node element.
type Nodes struct{_acab []Node };

// ReplaceText replace text inside node.
func (_ccbg *Nodes )ReplaceText (oldText ,newText string ){for _ ,_cccd :=range _ccbg ._acab {_cccd .ReplaceText (oldText ,newText );};};

// SetCalcOnExit marks if a FormField should be CalcOnExit or not.
func (_cabd FormField )SetCalcOnExit (calcOnExit bool ){_gbcef :=_be .NewCT_OnOff ();_gbcef .ValAttr =&_gfa .ST_OnOff {Bool :&calcOnExit };_cabd ._dbgb .FFDataChoice =[]*_be .CT_FFDataChoice {&_be .CT_FFDataChoice {CalcOnExit :_gbcef }};};

// SetNumberingLevel sets the numbering level of a paragraph.  If used, then the
// NumberingDefinition must also be set via SetNumberingDefinition or
// SetNumberingDefinitionByID.
func (_cggg Paragraph )SetNumberingLevel (listLevel int ){_cggg .ensurePPr ();if _cggg ._bcaf .PPr .NumPr ==nil {_cggg ._bcaf .PPr .NumPr =_be .NewCT_NumPr ();};_adfde :=_be .NewCT_DecimalNumber ();_adfde .ValAttr =int64 (listLevel );_cggg ._bcaf .PPr .NumPr .Ilvl =_adfde ;
};

// Name returns the name of the bookmark whcih is the document unique ID that
// identifies the bookmark.
func (_fgc Bookmark )Name ()string {return _fgc ._bcgf .NameAttr };

// SetSpacing sets the spacing that comes before and after the paragraph.
// Deprecated: See Spacing() instead which allows finer control.
func (_bcefa ParagraphProperties )SetSpacing (before ,after _ac .Distance ){if _bcefa ._fbaa .Spacing ==nil {_bcefa ._fbaa .Spacing =_be .NewCT_Spacing ();};_bcefa ._fbaa .Spacing .BeforeAttr =&_gfa .ST_TwipsMeasure {};_bcefa ._fbaa .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (before /_ac .Twips ));
_bcefa ._fbaa .Spacing .AfterAttr =&_gfa .ST_TwipsMeasure {};_bcefa ._fbaa .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (after /_ac .Twips ));};

// Endnotes returns the endnotes defined in the document.
func (_bcfbe *Document )Endnotes ()[]Endnote {_feaa :=[]Endnote {};for _ ,_bga :=range _bcfbe ._dbc .CT_Endnotes .Endnote {_feaa =append (_feaa ,Endnote {_bcfbe ,_bga });};return _feaa ;};

// FormFields extracts all the fields from a document.  They can then be
// manipulated via the methods on the field and the document saved.
func (_eaba *Document )FormFields ()[]FormField {_bacc :=[]FormField {};for _ ,_dffb :=range _eaba .Paragraphs (){_dgec :=_dffb .Runs ();for _egcg ,_daaf :=range _dgec {for _ ,_gddbb :=range _daaf ._fgad .EG_RunInnerContent {if _gddbb .RunInnerContentChoice .FldChar ==nil ||_gddbb .RunInnerContentChoice .FldChar .FldCharChoice .FfData ==nil {continue ;
};if _gddbb .RunInnerContentChoice .FldChar .FldCharTypeAttr ==_be .ST_FldCharTypeBegin {_fffd :=false ;for _ ,_bceg :=range _gddbb .RunInnerContentChoice .FldChar .FldCharChoice .FfData .FFDataChoice {if _bceg .Name ==nil ||_bceg .Name .ValAttr ==nil {continue ;
};_fffd =true ;break ;};if !_fffd {continue ;};_ecd :=FormField {_dbgb :_gddbb .RunInnerContentChoice .FldChar .FldCharChoice .FfData };for _ ,_aefff :=range _gddbb .RunInnerContentChoice .FldChar .FldCharChoice .FfData .FFDataChoice {if _aefff .TextInput ==nil {continue ;
};for _facg :=_egcg +1;_facg < len (_dgec )-1;_facg ++{if len (_dgec [_facg ]._fgad .EG_RunInnerContent )==0{continue ;};_fdbd :=_dgec [_facg ]._fgad .EG_RunInnerContent [0];if _fdbd .RunInnerContentChoice .FldChar !=nil &&_fdbd .RunInnerContentChoice .FldChar .FldCharTypeAttr ==_be .ST_FldCharTypeSeparate {if len (_dgec [_facg +1]._fgad .EG_RunInnerContent )==0{continue ;
};if _dgec [_facg +1]._fgad .EG_RunInnerContent [0].RunInnerContentChoice .FldChar ==nil {_ecd ._badfc =_dgec [_facg +1]._fgad .EG_RunInnerContent [0];break ;};};};};_bacc =append (_bacc ,_ecd );};};};};for _ ,_fcdc :=range _eaba .Headers (){for _ ,_aggad :=range _fcdc .Paragraphs (){_eaafd :=_aggad .Runs ();
for _dafa ,_bfdd :=range _eaafd {for _ ,_cacd :=range _bfdd ._fgad .EG_RunInnerContent {if _cacd .RunInnerContentChoice .FldChar ==nil ||_cacd .RunInnerContentChoice .FldChar .FldCharChoice .FfData ==nil {continue ;};if _cacd .RunInnerContentChoice .FldChar .FldCharTypeAttr ==_be .ST_FldCharTypeBegin {_bcae :=false ;
for _ ,_dgfc :=range _cacd .RunInnerContentChoice .FldChar .FldCharChoice .FfData .FFDataChoice {if _dgfc .Name ==nil ||_dgfc .Name .ValAttr ==nil {continue ;};_bcae =true ;break ;};if !_bcae {continue ;};_fbfa :=FormField {_dbgb :_cacd .RunInnerContentChoice .FldChar .FldCharChoice .FfData };
for _ ,_bfeg :=range _cacd .RunInnerContentChoice .FldChar .FldCharChoice .FfData .FFDataChoice {if _bfeg .TextInput ==nil {continue ;};for _degf :=_dafa +1;_degf < len (_eaafd )-1;_degf ++{if len (_eaafd [_degf ]._fgad .EG_RunInnerContent )==0{continue ;
};_acfea :=_eaafd [_degf ]._fgad .EG_RunInnerContent [0];if _acfea .RunInnerContentChoice .FldChar !=nil &&_acfea .RunInnerContentChoice .FldChar .FldCharTypeAttr ==_be .ST_FldCharTypeSeparate {if len (_eaafd [_degf +1]._fgad .EG_RunInnerContent )==0{continue ;
};if _eaafd [_degf +1]._fgad .EG_RunInnerContent [0].RunInnerContentChoice .FldChar ==nil {_fbfa ._badfc =_eaafd [_degf +1]._fgad .EG_RunInnerContent [0];break ;};};};};_bacc =append (_bacc ,_fbfa );};};};};};for _ ,_adaf :=range _eaba .Footers (){for _ ,_bfae :=range _adaf .Paragraphs (){_cabc :=_bfae .Runs ();
for _cdbf ,_dgdg :=range _cabc {for _ ,_bbac :=range _dgdg ._fgad .EG_RunInnerContent {if _bbac .RunInnerContentChoice .FldChar ==nil ||_bbac .RunInnerContentChoice .FldChar .FldCharChoice .FfData ==nil {continue ;};if _bbac .RunInnerContentChoice .FldChar .FldCharTypeAttr ==_be .ST_FldCharTypeBegin {_afbd :=false ;
for _ ,_ggcbc :=range _bbac .RunInnerContentChoice .FldChar .FldCharChoice .FfData .FFDataChoice {if _ggcbc .Name ==nil ||_ggcbc .Name .ValAttr ==nil {continue ;};_afbd =true ;break ;};if !_afbd {continue ;};_ggaef :=FormField {_dbgb :_bbac .RunInnerContentChoice .FldChar .FldCharChoice .FfData };
for _ ,_bbdf :=range _bbac .RunInnerContentChoice .FldChar .FldCharChoice .FfData .FFDataChoice {if _bbdf .TextInput ==nil {continue ;};for _accd :=_cdbf +1;_accd < len (_cabc )-1;_accd ++{if len (_cabc [_accd ]._fgad .EG_RunInnerContent )==0{continue ;
};_fdfa :=_cabc [_accd ]._fgad .EG_RunInnerContent [0];if _fdfa .RunInnerContentChoice .FldChar !=nil &&_fdfa .RunInnerContentChoice .FldChar .FldCharTypeAttr ==_be .ST_FldCharTypeSeparate {if len (_cabc [_accd +1]._fgad .EG_RunInnerContent )==0{continue ;
};if _cabc [_accd +1]._fgad .EG_RunInnerContent [0].RunInnerContentChoice .FldChar ==nil {_ggaef ._badfc =_cabc [_accd +1]._fgad .EG_RunInnerContent [0];break ;};};};};_bacc =append (_bacc ,_ggaef );};};};};};return _bacc ;};

// SetTopPct sets the cell top margin
func (_cba CellMargins )SetTopPct (pct float64 ){_cba ._adde .Top =_be .NewCT_TblWidth ();_efe (_cba ._adde .Top ,pct );};

// GetWrapPathLineTo return wrapPath lineTo value.
func (_bcf AnchorDrawWrapOptions )GetWrapPathLineTo ()[]*_fce .CT_Point2D {return _bcf ._eea };

// Save writes the document to an io.Writer in the Zip package format.
func (_bdcd *Document )Save (w _ff .Writer )error {return _bdcd .save (w ,_bdcd ._gca )};

// SetBold sets the run to bold.
func (_bgfc RunProperties )SetBold (b bool ){if !b {_bgfc ._dggdd .B =nil ;_bgfc ._dggdd .BCs =nil ;}else {_bgfc ._dggdd .B =_be .NewCT_OnOff ();_bgfc ._dggdd .BCs =_be .NewCT_OnOff ();};};

// Borders allows manipulation of the table borders.
func (_aceg TableStyleProperties )Borders ()TableBorders {if _aceg ._eeda .TblBorders ==nil {_aceg ._eeda .TblBorders =_be .NewCT_TblBorders ();};return TableBorders {_aceg ._eeda .TblBorders };};

// SetContextualSpacing controls whether to Ignore Spacing Above and Below When
// Using Identical Styles
func (_gcgc ParagraphStyleProperties )SetContextualSpacing (b bool ){if !b {_gcgc ._gbbb .ContextualSpacing =nil ;}else {_gcgc ._gbbb .ContextualSpacing =_be .NewCT_OnOff ();};};

// Close closes the document, removing any temporary files that might have been
// created when opening a document.
func (_cfd *Document )Close ()error {if _cfd .TmpPath !=""{return _eb .RemoveAll (_cfd .TmpPath );};return nil ;};type chart struct{_cdda *_db .ChartSpace ;_bcee string ;_gea string ;};

// SetColumnSpan sets the number of Grid Columns Spanned by the Cell.  This is used
// to give the appearance of merged cells.
func (_ggad CellProperties )SetColumnSpan (cols int ){if cols ==0{_ggad ._fad .GridSpan =nil ;}else {_ggad ._fad .GridSpan =_be .NewCT_DecimalNumber ();_ggad ._fad .GridSpan .ValAttr =int64 (cols );};};

// SetStyle sets the style of a paragraph.
func (_acagc ParagraphProperties )SetStyle (s string ){if s ==""{_acagc ._fbaa .PStyle =nil ;}else {_acagc ._fbaa .PStyle =_be .NewCT_String ();_acagc ._fbaa .PStyle .ValAttr =s ;};};

// BoldValue returns the precise nature of the bold setting (unset, off or on).
func (_cecf RunProperties )BoldValue ()OnOffValue {return _aabf (_cecf ._dggdd .B )};

// SetSize sets the size of the displayed image on the page.
func (_afe AnchoredDrawing )SetSize (w ,h _ac .Distance ){_afe ._cg .Extent .CxAttr =int64 (float64 (w *_ac .Pixel72 )/_ac .EMU );_afe ._cg .Extent .CyAttr =int64 (float64 (h *_ac .Pixel72 )/_ac .EMU );};

// InitializeDefault constructs a default numbering.
func (_bcbbb Numbering )InitializeDefault (){_dbeg :=_be .NewCT_AbstractNum ();_dbeg .MultiLevelType =_be .NewCT_MultiLevelType ();_dbeg .MultiLevelType .ValAttr =_be .ST_MultiLevelTypeHybridMultilevel ;_bcbbb ._dcaac .AbstractNum =append (_bcbbb ._dcaac .AbstractNum ,_dbeg );
_dbeg .AbstractNumIdAttr =1;const _cfdd =720;const _ddeb =720;const _gcba =360;for _addf :=0;_addf < 9;_addf ++{_fgbf :=_be .NewCT_Lvl ();_fgbf .IlvlAttr =int64 (_addf );_fgbf .Start =_be .NewCT_DecimalNumber ();_fgbf .Start .ValAttr =1;_fgbf .NumFmt =_be .NewCT_NumFmt ();
_fgbf .NumFmt .ValAttr =_be .ST_NumberFormatBullet ;_fgbf .Suff =_be .NewCT_LevelSuffix ();_fgbf .Suff .ValAttr =_be .ST_LevelSuffixNothing ;_fgbf .LvlText =_be .NewCT_LevelText ();_fgbf .LvlText .ValAttr =_g .String ("\uf0b7");_fgbf .LvlJc =_be .NewCT_Jc ();
_fgbf .LvlJc .ValAttr =_be .ST_JcLeft ;_fgbf .RPr =_be .NewCT_RPr ();_fgbf .RPr .RFonts =_be .NewCT_Fonts ();_fgbf .RPr .RFonts .AsciiAttr =_g .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_fgbf .RPr .RFonts .HAnsiAttr =_g .String ("\u0053\u0079\u006d\u0062\u006f\u006c");
_fgbf .RPr .RFonts .HintAttr =_be .ST_HintDefault ;_fgbf .PPr =_be .NewCT_PPrGeneral ();_dbfa :=int64 (_addf *_ddeb +_cfdd );_fgbf .PPr .Ind =_be .NewCT_Ind ();_fgbf .PPr .Ind .LeftAttr =&_be .ST_SignedTwipsMeasure {};_fgbf .PPr .Ind .LeftAttr .Int64 =_g .Int64 (_dbfa );
_fgbf .PPr .Ind .HangingAttr =&_gfa .ST_TwipsMeasure {};_fgbf .PPr .Ind .HangingAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (_gcba ));_dbeg .Lvl =append (_dbeg .Lvl ,_fgbf );};_efeea :=_be .NewCT_Num ();_efeea .NumIdAttr =1;_efeea .AbstractNumId =_be .NewCT_DecimalNumber ();
_efeea .AbstractNumId .ValAttr =1;_bcbbb ._dcaac .Num =append (_bcbbb ._dcaac .Num ,_efeea );};

// InlineDrawing is an inlined image within a run.
type InlineDrawing struct{_cgced *Document ;_adec *_be .WdInline ;};

// CellProperties returns the cell properties.
func (_edbbe TableConditionalFormatting )CellProperties ()CellProperties {if _edbbe ._afbcf .TcPr ==nil {_edbbe ._afbcf .TcPr =_be .NewCT_TcPr ();};return CellProperties {_edbbe ._afbcf .TcPr };};

// EastAsiaFont returns the name of paragraph font family for East Asia.
func (_bdebe ParagraphProperties )EastAsiaFont ()string {if _eeeg :=_bdebe ._fbaa .RPr .RFonts ;_eeeg !=nil {if _eeeg .EastAsiaAttr !=nil {return *_eeeg .EastAsiaAttr ;};};return "";};

// SetUnderline controls underline for a run style.
func (_fddb RunProperties )SetUnderline (style _be .ST_Underline ,c _cb .Color ){if style ==_be .ST_UnderlineUnset {_fddb ._dggdd .U =nil ;}else {_fddb ._dggdd .U =_be .NewCT_Underline ();_fddb ._dggdd .U .ColorAttr =&_be .ST_HexColor {};_fddb ._dggdd .U .ColorAttr .ST_HexColorRGB =c .AsRGBString ();
_fddb ._dggdd .U .ValAttr =style ;};};

// ParagraphProperties returns the paragraph properties controlling text formatting within the table.
func (_cdgeg TableConditionalFormatting )ParagraphProperties ()ParagraphStyleProperties {if _cdgeg ._afbcf .PPr ==nil {_cdgeg ._afbcf .PPr =_be .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_cdgeg ._afbcf .PPr };};func _cfec (_eacgf *_be .CT_Tbl ,_cccge map[string ]string ){for _ ,_dfgfc :=range _eacgf .EG_ContentRowContent {for _ ,_gbeb :=range _dfgfc .ContentRowContentChoice .Tr {for _ ,_aeag :=range _gbeb .EG_ContentCellContent {for _ ,_bbfge :=range _aeag .ContentCellContentChoice .Tc {for _ ,_cbgc :=range _bbfge .EG_BlockLevelElts {for _ ,_bfdc :=range _cbgc .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_ceec :=range _bfdc .ContentBlockContentChoice .P {_gbea (_ceec ,_cccge );
};for _ ,_fefd :=range _bfdc .ContentBlockContentChoice .Tbl {_cfec (_fefd ,_cccge );};};};};};};};};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_ggfdc ParagraphProperties )Style ()string {if _ggfdc ._fbaa .PStyle !=nil {return _ggfdc ._fbaa .PStyle .ValAttr ;};return "";};

// GetHeader gets a section Header for given type t [ST_HdrFtrDefault, ST_HdrFtrEven, ST_HdrFtrFirst]
func (_bgace Section )GetHeader (t _be .ST_HdrFtr )(Header ,bool ){for _ ,_bfgc :=range _bgace ._cffdd .EG_HdrFtrReferences {if _bfgc .HdrFtrReferencesChoice .HeaderReference ==nil {continue ;};if _bfgc .HdrFtrReferencesChoice .HeaderReference .TypeAttr ==t {for _ ,_abfdf :=range _bgace ._dfcf .Headers (){_fefc :=_bgace ._dfcf ._dbe .FindRIDForN (_abfdf .Index (),_g .HeaderType );
if _fefc ==_bfgc .HdrFtrReferencesChoice .HeaderReference .IdAttr {return _abfdf ,true ;};};};};return Header {},false ;};

// X returns the inner wrapped XML type.
func (_adad Footnote )X ()*_be .CT_FtnEdn {return _adad ._debf };func (_cdfcf *Document )addComments (){_cdfcf ._ecff =_be .NewComments ();_cdfcf ._ecff .CT_Comments =*_be .NewCT_Comments ();_cdfcf ._ecff .Comment =make ([]*_be .CT_Comment ,0);_cdfcf .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0063\u006f\u006dm\u0065\u006et\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0063\u006f\u006d\u006d\u0065\u006e\u0074\u0073\u002b\u0078\u006d\u006c");
_cdfcf ._dbe .AddRelationship ("\u0063\u006f\u006dm\u0065\u006e\u0074\u0073\u002e\u0078\u006d\u006c",_g .CommentsType );_cge :=_cdfcf .Styles .AddStyle (_agf ,_be .ST_StyleTypeParagraph ,false );_cge .SetName ("\u0043\u006f\u006d\u006d\u0065\u006e\u0074\u0020\u0052\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");
_cge .SetBasedOn ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074");_fgb :=_cge .RunProperties ();_fgb .X ().Sz =&_be .CT_HpsMeasure {ValAttr :_be .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_fbb }};_fgb .X ().SzCs =&_be .CT_HpsMeasure {ValAttr :_be .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_fbb }};
_deag :=_cdfcf .Styles .AddStyle (_bdge ,_be .ST_StyleTypeParagraph ,false );_deag .SetName ("\u0043\u006f\u006dm\u0065\u006e\u0074\u0020\u0054\u0065\u0078\u0074");_deag .SetBasedOn ("\u004e\u006f\u0072\u006d\u0061\u006c");_deag .SetLinkedStyle (_gebc );
_bfc :=_deag .RunProperties ();_bfc .X ().Sz =&_be .CT_HpsMeasure {ValAttr :_be .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_dagb }};_bfc .X ().SzCs =&_be .CT_HpsMeasure {ValAttr :_be .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_dagb }};_deec :=_cdfcf .Styles .AddStyle (_bdge ,_be .ST_StyleTypeParagraph ,false );
_deec .SetName ("\u0043\u006f\u006d\u006d\u0065\u006e\u0074\u0020\u0054\u0065\u0078\u0074 \u0043\u0068\u0061\u0072");_deec .SetBasedOn ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074");_deec .SetLinkedStyle (_bdge );
_gegf :=_deec .RunProperties ();_gegf .X ().Sz =&_be .CT_HpsMeasure {ValAttr :_be .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_dagb }};_gegf .X ().SzCs =&_be .CT_HpsMeasure {ValAttr :_be .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_dagb }};_dcb :=_cdfcf .Styles .AddStyle (_bdge ,_be .ST_StyleTypeParagraph ,false );
_dcb .SetName ("\u0043o\u006dm\u0065\u006e\u0074\u0020\u0053\u0075\u0062\u006a\u0065\u0063\u0074");_dcb .SetBasedOn (_bdge );_dcb .SetLinkedStyle (_gfaa );_dcb .SetNextStyle (_bdge );_bff :=_dcb .RunProperties ();_bff .SetBold (true );};

// IgnoreSpaceBetweenParagraphOfSameStyle sets contextual spacing.
func (_ceafg Paragraph )IgnoreSpaceBetweenParagraphOfSameStyle (){_ceafg .ensurePPr ();if _ceafg ._bcaf .PPr .ContextualSpacing ==nil {_ceafg ._bcaf .PPr .ContextualSpacing =_be .NewCT_OnOff ();};_ceafg ._bcaf .PPr .ContextualSpacing .ValAttr =&_gfa .ST_OnOff {ST_OnOff1 :_gfa .ST_OnOff1On };
};

// RightToLeft returns true if run text goes from right to left.
func (_bgab RunProperties )RightToLeft ()bool {return _bgba (_bgab ._dggdd .Rtl )};

// SetColor sets a specific color or auto.
func (_bgeb Color )SetColor (v _cb .Color ){if v .IsAuto (){_bgeb ._ddc .ValAttr .ST_HexColorAuto =_be .ST_HexColorAutoAuto ;_bgeb ._ddc .ValAttr .ST_HexColorRGB =nil ;}else {_bgeb ._ddc .ValAttr .ST_HexColorAuto =_be .ST_HexColorAutoUnset ;_bgeb ._ddc .ValAttr .ST_HexColorRGB =v .AsRGBString ();
};};

// SetLeftIndent controls the left indent of the paragraph.
func (_cgegd ParagraphStyleProperties )SetLeftIndent (m _ac .Distance ){if _cgegd ._gbbb .Ind ==nil {_cgegd ._gbbb .Ind =_be .NewCT_Ind ();};if m ==_ac .Zero {_cgegd ._gbbb .Ind .LeftAttr =nil ;}else {_cgegd ._gbbb .Ind .LeftAttr =&_be .ST_SignedTwipsMeasure {};
_cgegd ._gbbb .Ind .LeftAttr .Int64 =_g .Int64 (int64 (m /_ac .Twips ));};};

// ParagraphBorders allows manipulation of borders on a paragraph.
type ParagraphBorders struct{_gbebf *Document ;_edfd *_be .CT_PBdr ;};

// TOCOptions specify options for table of contents customization.
type TOCOptions struct{

// UseHyperlinks makes the table of contents entries hyperlinks.
UseHyperlinks bool ;

// OmitPageNumbers allows omitting page numbers from the table of contents.
OmitPageNumbers bool ;

// HeadingLevel uses paragraphs formatted with all of the specified range of built-in heading styles.
// "3-3" is to show only third heading level, for instance.
HeadingLevel string ;};

// ParagraphStyles returns only the paragraph styles.
func (_ggfca Styles )ParagraphStyles ()[]Style {_cdbeb :=[]Style {};for _ ,_agcab :=range _ggfca ._effe .Style {if _agcab .TypeAttr !=_be .ST_StyleTypeParagraph {continue ;};_cdbeb =append (_cdbeb ,Style {_agcab });};return _cdbeb ;};

// SetLastRow controls the conditional formatting for the last row in a table.
// This is called the 'Total' row within Word.
func (_fcda TableLook )SetLastRow (on bool ){if !on {_fcda ._gfded .LastRowAttr =&_gfa .ST_OnOff {};_fcda ._gfded .LastRowAttr .ST_OnOff1 =_gfa .ST_OnOff1Off ;}else {_fcda ._gfded .LastRowAttr =&_gfa .ST_OnOff {};_fcda ._gfded .LastRowAttr .ST_OnOff1 =_gfa .ST_OnOff1On ;
};};

// SetAllCaps sets the run to all caps.
func (_dgcaa RunProperties )SetAllCaps (b bool ){if !b {_dgcaa ._dggdd .Caps =nil ;}else {_dgcaa ._dggdd .Caps =_be .NewCT_OnOff ();};};func _afdc ()*_bd .Fill {_fcace :=_bd .NewFill ();_fcace .AngleAttr =_g .Float64 (0);return _fcace };func (_fbfbf *Document )addEndnoteSeparator (){_begf :=_be .NewCT_FtnEdn ();
_begf .IdAttr =-1;_begf .TypeAttr =_be .ST_FtnEdnSeparator ;_bfdg :=Footnote {_fbfbf ,_begf };_bfdg .X ().EG_BlockLevelElts =[]*_be .EG_BlockLevelElts {_be .NewEG_BlockLevelElts ()};_accg :=_bfdg .AddParagraph ();_accg .X ().PPr =nil ;_afca :=_accg .AddRun ();
_ceac :=_afca .newIC ();_ceac .RunInnerContentChoice .Separator =_be .NewCT_Empty ();_fbfbf ._dbc .CT_Endnotes .Endnote =append (_fbfbf ._dbc .CT_Endnotes .Endnote ,_begf );_begf =_be .NewCT_FtnEdn ();_begf .IdAttr =0;_begf .TypeAttr =_be .ST_FtnEdnContinuationSeparator ;
_bfdg =Footnote {_fbfbf ,_begf };_bfdg .X ().EG_BlockLevelElts =[]*_be .EG_BlockLevelElts {_be .NewEG_BlockLevelElts ()};_accg =_bfdg .AddParagraph ();_accg .X ().PPr =nil ;_afca =_accg .AddRun ();_ceac =_afca .newIC ();_ceac .RunInnerContentChoice .ContinuationSeparator =_be .NewCT_Empty ();
_fbfbf ._dbc .CT_Endnotes .Endnote =append (_fbfbf ._dbc .CT_Endnotes .Endnote ,_begf );};

// X returns the inner wrapped XML type.
func (_bda CellProperties )X ()*_be .CT_TcPr {return _bda ._fad };

// GetHighlight returns the HighlightColor.
func (_ddff RunProperties )GetHighlight ()_be .ST_HighlightColor {if _ddff ._dggdd .Highlight !=nil {return _ddff ._dggdd .Highlight .ValAttr ;};return _be .ST_HighlightColorNone ;};

// X returns the inner wml.CT_TblBorders
func (_egbf TableBorders )X ()*_be .CT_TblBorders {return _egbf ._ddbeg };

// Margins allows controlling individual cell margins.
func (_ffef CellProperties )Margins ()CellMargins {if _ffef ._fad .TcMar ==nil {_ffef ._fad .TcMar =_be .NewCT_TcMar ();};return CellMargins {_ffef ._fad .TcMar };};func _afge (_bbd *_be .CT_Tbl ,_aaaf *_be .CT_P ,_abc bool )*_be .CT_Tbl {for _ ,_fbc :=range _bbd .EG_ContentRowContent {for _ ,_aggcd :=range _fbc .ContentRowContentChoice .Tr {for _ ,_bbf :=range _aggcd .EG_ContentCellContent {for _ ,_gfee :=range _bbf .ContentCellContentChoice .Tc {for _ddb ,_cad :=range _gfee .EG_BlockLevelElts {for _ ,_aed :=range _cad .BlockLevelEltsChoice .EG_ContentBlockContent {for _fgafb ,_ace :=range _aed .ContentBlockContentChoice .P {if _ace ==_aaaf {_ccfb :=_be .NewEG_BlockLevelElts ();
_efbe :=_be .NewEG_ContentBlockContent ();_ccfb .BlockLevelEltsChoice .EG_ContentBlockContent =append (_ccfb .BlockLevelEltsChoice .EG_ContentBlockContent ,_efbe );_gfeb :=_be .NewCT_Tbl ();_efbe .ContentBlockContentChoice .Tbl =append (_efbe .ContentBlockContentChoice .Tbl ,_gfeb );
_gfee .EG_BlockLevelElts =append (_gfee .EG_BlockLevelElts ,nil );if _abc {copy (_gfee .EG_BlockLevelElts [_ddb +1:],_gfee .EG_BlockLevelElts [_ddb :]);_gfee .EG_BlockLevelElts [_ddb ]=_ccfb ;if _fgafb !=0{_edee :=_be .NewEG_BlockLevelElts ();_deaf :=_be .NewEG_ContentBlockContent ();
_edee .BlockLevelEltsChoice .EG_ContentBlockContent =append (_edee .BlockLevelEltsChoice .EG_ContentBlockContent ,_deaf );_deaf .ContentBlockContentChoice .P =_aed .ContentBlockContentChoice .P [:_fgafb ];_gfee .EG_BlockLevelElts =append (_gfee .EG_BlockLevelElts ,nil );
copy (_gfee .EG_BlockLevelElts [_ddb +1:],_gfee .EG_BlockLevelElts [_ddb :]);_gfee .EG_BlockLevelElts [_ddb ]=_edee ;};_aed .ContentBlockContentChoice .P =_aed .ContentBlockContentChoice .P [_fgafb :];}else {copy (_gfee .EG_BlockLevelElts [_ddb +2:],_gfee .EG_BlockLevelElts [_ddb +1:]);
_gfee .EG_BlockLevelElts [_ddb +1]=_ccfb ;if _fgafb !=len (_aed .ContentBlockContentChoice .P )-1{_ebgb :=_be .NewEG_BlockLevelElts ();_afb :=_be .NewEG_ContentBlockContent ();_ebgb .BlockLevelEltsChoice .EG_ContentBlockContent =append (_ebgb .BlockLevelEltsChoice .EG_ContentBlockContent ,_afb );
_afb .ContentBlockContentChoice .P =_aed .ContentBlockContentChoice .P [_fgafb +1:];_gfee .EG_BlockLevelElts =append (_gfee .EG_BlockLevelElts ,nil );copy (_gfee .EG_BlockLevelElts [_ddb +3:],_gfee .EG_BlockLevelElts [_ddb +2:]);_gfee .EG_BlockLevelElts [_ddb +2]=_ebgb ;
}else {_dae :=_be .NewEG_BlockLevelElts ();_gegg :=_be .NewEG_ContentBlockContent ();_dae .BlockLevelEltsChoice .EG_ContentBlockContent =append (_dae .BlockLevelEltsChoice .EG_ContentBlockContent ,_gegg );_gegg .ContentBlockContentChoice .P =[]*_be .CT_P {_be .NewCT_P ()};
_gfee .EG_BlockLevelElts =append (_gfee .EG_BlockLevelElts ,nil );copy (_gfee .EG_BlockLevelElts [_ddb +3:],_gfee .EG_BlockLevelElts [_ddb +2:]);_gfee .EG_BlockLevelElts [_ddb +2]=_dae ;};_aed .ContentBlockContentChoice .P =_aed .ContentBlockContentChoice .P [:_fgafb +1];
};return _gfeb ;};};for _ ,_acfe :=range _aed .ContentBlockContentChoice .Tbl {_gfc :=_afge (_acfe ,_aaaf ,_abc );if _gfc !=nil {return _gfc ;};};};};};};};};return nil ;};

// Strike returns true if paragraph is striked.
func (_fceggb ParagraphProperties )Strike ()bool {return _bgba (_fceggb ._fbaa .RPr .Strike )};

// Type returns the type of the style.
func (_ebef Style )Type ()_be .ST_StyleType {return _ebef ._gegdgf .TypeAttr };

// GetKerning returns the kerning (character spacing) of a run
func (_bdgd RunProperties )GetKerning ()_ac .Distance {if _bdgd ._dggdd .Kern !=nil {return _ac .Distance (float64 (*_bdgd ._dggdd .Kern .ValAttr .ST_UnsignedDecimalNumber )*_ac .HalfPoint );};return 0;};

// SetName sets the name of the bookmark. This is the name that is used to
// reference the bookmark from hyperlinks.
func (_bac Bookmark )SetName (name string ){_bac ._bcgf .NameAttr =name };

// AddHyperlink adds a hyperlink to a document. Adding the hyperlink to a document
// and setting it on a cell is more efficient than setting hyperlinks directly
// on a cell.
func (_gbdf Document )AddHyperlink (url string )_ec .Hyperlink {return _gbdf ._dbe .AddHyperlink (url )};func (_bgb *Document )addFootnotes (){_bgb ._edf =_be .NewFootnotes ();_bgb ._edf .CT_Footnotes =_be .CT_Footnotes {};_bgb ._edf .Footnote =make ([]*_be .CT_FtnEdn ,0);
_bgb .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074n\u006f\u0074\u0065\u0073\u002b\u0078m\u006c");
_bgb ._dbe .AddRelationship ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0073\u002e\u0078\u006d\u006c",_g .FootNotesType );_ddd :=_bgb .Styles .AddStyle (FootnoteTextStyleId ,_be .ST_StyleTypeParagraph ,false );_ddd .SetName ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0020\u0054\u0065\u0078\u0074");
_ddd .SetBasedOn ("\u004e\u006f\u0072\u006d\u0061\u006c");_cdgdb :=_ddd .ParagraphProperties ();_cdgdb .X ().SuppressLineNumbers =&_be .CT_OnOff {};_gdg :=_ddd .RunProperties ();_gdg .X ().Sz =&_be .CT_HpsMeasure {ValAttr :_be .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_gfab }};
_gdg .X ().SzCs =&_be .CT_HpsMeasure {ValAttr :_be .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_gfab }};_fbfc :=_bgb .Styles .AddStyle (_dbca ,_be .ST_StyleTypeCharacter ,false );_fbfc .SetName ("\u0046o\u006ft\u006e\u006f\u0074\u0065\u0020R\u0065\u0066e\u0072\u0065\u006e\u0063\u0065");
_feef :=_fbfc .RunProperties ();_feef .X ().VertAlign =&_be .CT_VerticalAlignRun {ValAttr :_gfa .ST_VerticalAlignRunSuperscript };_bgb .addFootnoteSeparator ();};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_fcf CellBorders )SetInsideHorizontal (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_fcf ._bce .InsideH =_be .NewCT_Border ();_gdff (_fcf ._bce .InsideH ,t ,c ,thickness );};

// SetUISortOrder controls the order the style is displayed in the UI.
func (_facde Style )SetUISortOrder (order int ){_facde ._gegdgf .UiPriority =_be .NewCT_DecimalNumber ();_facde ._gegdgf .UiPriority .ValAttr =int64 (order );};

// GetRightToLeft returns true if the run text is displayed from right to left.
func (_ggcd RunProperties )GetRightToLeft ()bool {return _bgba (_ggcd ._dggdd .Rtl )};

// SetTblHeader set row properties for repeat table row on every new page value.
func (_ecdb RowProperties )SetTblHeader (val bool ){if !val {_ecdb ._bfdba .TrPrBaseChoice =nil ;}else {_ecdb ._bfdba .TrPrBaseChoice =[]*_be .CT_TrPrBaseChoice {&_be .CT_TrPrBaseChoice {TblHeader :_be .NewCT_OnOff ()}};};};

// TableLook returns the table look, or conditional formatting applied to a table style.
func (_ecfd TableProperties )TableLook ()TableLook {if _ecfd ._gdfab .TblLook ==nil {_ecfd ._gdfab .TblLook =_be .NewCT_TblLook ();};return TableLook {_ecfd ._gdfab .TblLook };};

// AddParagraph adds a paragraph to the header.
func (_bfdbd Header )AddParagraph ()Paragraph {_eeeb :=_be .NewEG_ContentBlockContent ();_bfdbd ._gbeec .EG_BlockLevelElts =append (_bfdbd ._gbeec .EG_BlockLevelElts ,&_be .EG_BlockLevelElts {BlockLevelEltsChoice :&_be .EG_BlockLevelEltsChoice {EG_ContentBlockContent :[]*_be .EG_ContentBlockContent {_eeeb }}});
_agaee :=_be .NewCT_P ();_eeeb .ContentBlockContentChoice .P =append (_eeeb .ContentBlockContentChoice .P ,_agaee );return Paragraph {_bfdbd ._gegb ,_agaee };};

// X returns the inner wrapped XML type.
func (_gfcc Table )X ()*_be .CT_Tbl {return _gfcc ._dbgfc };

// SetRightIndent controls right indent of paragraph.
func (_dceb Paragraph )SetRightIndent (m _ac .Distance ){_dceb .ensurePPr ();_ffcca :=_dceb ._bcaf .PPr ;if _ffcca .Ind ==nil {_ffcca .Ind =_be .NewCT_Ind ();};if m ==_ac .Zero {_ffcca .Ind .RightAttr =nil ;}else {_ffcca .Ind .RightAttr =&_be .ST_SignedTwipsMeasure {};
_ffcca .Ind .RightAttr .Int64 =_g .Int64 (int64 (m /_ac .Twips ));};};func (_ebge *Document )removeEndnote (_bcca int64 ){_fdce :=_ebge ._dbc ;var _bdadd int ;for _cacc ,_dgc :=range _fdce .CT_Endnotes .Endnote {if _dgc .IdAttr ==_bcca {_bdadd =_cacc ;
break ;};};_fdce .CT_Endnotes .Endnote [_bdadd ]=nil ;_fdce .CT_Endnotes .Endnote [_bdadd ]=_fdce .CT_Endnotes .Endnote [len (_fdce .CT_Endnotes .Endnote )-1];_fdce .CT_Endnotes .Endnote =_fdce .CT_Endnotes .Endnote [:len (_fdce .CT_Endnotes .Endnote )-1];
_ebge .reorderEndnote ();_ebge .syncEndnoteSettings ();};

// FindNodeByRegexp return node based on matched text and return a slice of node.
func (_abea *Nodes )FindNodeByRegexp (r *_ed .Regexp )[]Node {_fgddc :=[]Node {};for _ ,_fafa :=range _abea ._acab {if r .MatchString (_fafa .Text ()){_fgddc =append (_fgddc ,_fafa );};_dbfb :=Nodes {_acab :_fafa .Children };_fgddc =append (_fgddc ,_dbfb .FindNodeByRegexp (r )...);
};return _fgddc ;};

// IsBold returns true if the run has been set to bold.
func (_dfdg RunProperties )IsBold ()bool {return _dfdg .BoldValue ()==OnOffValueOn };

// AddCell adds a cell to a row and returns it
func (_deab Row )AddCell ()Cell {_egga :=_be .NewEG_ContentCellContent ();_deab ._gebe .EG_ContentCellContent =append (_deab ._gebe .EG_ContentCellContent ,_egga );_ceaec :=_be .NewCT_Tc ();_egga .ContentCellContentChoice .Tc =append (_egga .ContentCellContentChoice .Tc ,_ceaec );
return Cell {_deab ._cace ,_ceaec };};

// SetSize sets the font size for a run.
func (_ffbee RunProperties )SetSize (size _ac .Distance ){_ffbee ._dggdd .Sz =_be .NewCT_HpsMeasure ();_ffbee ._dggdd .Sz .ValAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (size /_ac .HalfPoint ));_ffbee ._dggdd .SzCs =_be .NewCT_HpsMeasure ();_ffbee ._dggdd .SzCs .ValAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (size /_ac .HalfPoint ));
};

// Clear removes all the content from within a run.
func (_dgbd Run )Clear (){_dgbd ._fgad .EG_RunInnerContent =nil };

// AddRun adds a run to a paragraph.
func (_cfde Paragraph )AddRun ()Run {_eaabc :=_be .NewEG_PContent ();_cfde ._bcaf .EG_PContent =append (_cfde ._bcaf .EG_PContent ,_eaabc );_dggf :=_be .NewEG_ContentRunContent ();_eaabc .PContentChoice .EG_ContentRunContent =append (_eaabc .PContentChoice .EG_ContentRunContent ,_dggf );
_aebac :=_be .NewCT_R ();_dggf .ContentRunContentChoice .R =_aebac ;return Run {_cfde ._gfabf ,_aebac };};

// RemoveMailMerge removes any mail merge settings
func (_cafgg Settings )RemoveMailMerge (){_cafgg ._cedc .MailMerge =nil };

// AddTabStop adds a tab stop to the paragraph.  It controls the position of text when using Run.AddTab()
func (_bfbbf ParagraphProperties )AddTabStop (position _ac .Distance ,justificaton _be .ST_TabJc ,leader _be .ST_TabTlc ){if _bfbbf ._fbaa .Tabs ==nil {_bfbbf ._fbaa .Tabs =_be .NewCT_Tabs ();};_dafbf :=_be .NewCT_TabStop ();_dafbf .LeaderAttr =leader ;
_dafbf .ValAttr =justificaton ;_dafbf .PosAttr .Int64 =_g .Int64 (int64 (position /_ac .Twips ));_bfbbf ._fbaa .Tabs .Tab =append (_bfbbf ._fbaa .Tabs .Tab ,_dafbf );};

// SetLeft sets the left border to a specified type, color and thickness.
func (_fgfe CellBorders )SetLeft (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_fgfe ._bce .Left =_be .NewCT_Border ();_gdff (_fgfe ._bce .Left ,t ,c ,thickness );};

// SetName sets the name of the style.
func (_bdab Style )SetName (name string ){_bdab ._gegdgf .Name =_be .NewCT_String ();_bdab ._gegdgf .Name .ValAttr =name ;};

// Fonts returns the style's Fonts.
func (_bbaba RunProperties )Fonts ()Fonts {if _bbaba ._dggdd .RFonts ==nil {_bbaba ._dggdd .RFonts =_be .NewCT_Fonts ();};return Fonts {_bbaba ._dggdd .RFonts };};

// SetBehindDoc sets the behindDoc attribute of anchor.
func (_efb AnchoredDrawing )SetBehindDoc (val bool ){_efb ._cg .BehindDocAttr =val };

// Headers returns the headers defined in the document.
func (_edgb *Document )Headers ()[]Header {_bcc :=[]Header {};for _ ,_eabc :=range _edgb ._egc {_bcc =append (_bcc ,Header {_edgb ,_eabc });};return _bcc ;};

// Caps returns true if paragraph font is capitalized.
func (_caeef ParagraphProperties )Caps ()bool {return _bgba (_caeef ._fbaa .RPr .Caps )};

// SetSize sets size attribute for a FormFieldTypeCheckBox in pt.
func (_edd FormField )SetSize (size uint64 ){if _edd ._dbgb .FFDataChoice ==nil ||len (_edd ._dbgb .FFDataChoice )==0||_edd ._dbgb .FFDataChoice [0].CheckBox ==nil {return ;};size *=2;_edd ._dbgb .FFDataChoice [0].CheckBox .FFCheckBoxChoice =_be .NewCT_FFCheckBoxChoice ();
_edd ._dbgb .FFDataChoice [0].CheckBox .FFCheckBoxChoice .Size =_be .NewCT_HpsMeasure ();_edd ._dbgb .FFDataChoice [0].CheckBox .FFCheckBoxChoice .Size .ValAttr =_be .ST_HpsMeasure {ST_UnsignedDecimalNumber :&size };};

// SetAlignment controls the paragraph alignment
func (_ggaf ParagraphProperties )SetAlignment (align _be .ST_Jc ){if align ==_be .ST_JcUnset {_ggaf ._fbaa .Jc =nil ;}else {_ggaf ._fbaa .Jc =_be .NewCT_Jc ();_ggaf ._fbaa .Jc .ValAttr =align ;};};

// EastAsiaFont returns the name of run font family for East Asia.
func (_cdabb RunProperties )EastAsiaFont ()string {if _aaaac :=_cdabb ._dggdd .RFonts ;_aaaac !=nil {if _aaaac .EastAsiaAttr !=nil {return *_aaaac .EastAsiaAttr ;};};return "";};

// SetKeepNext controls if the paragraph is kept with the next paragraph.
func (_afbag ParagraphStyleProperties )SetKeepNext (b bool ){if !b {_afbag ._gbbb .KeepNext =nil ;}else {_afbag ._gbbb .KeepNext =_be .NewCT_OnOff ();};};

// SetAfterSpacing sets spacing below paragraph.
func (_decce Paragraph )SetAfterSpacing (d _ac .Distance ){_decce .ensurePPr ();if _decce ._bcaf .PPr .Spacing ==nil {_decce ._bcaf .PPr .Spacing =_be .NewCT_Spacing ();};_bceeg :=_decce ._bcaf .PPr .Spacing ;_bceeg .AfterAttr =&_gfa .ST_TwipsMeasure {};
_bceeg .AfterAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (d /_ac .Twips ));};

// SetHangingIndent controls the hanging indent of the paragraph.
func (_cagd ParagraphStyleProperties )SetHangingIndent (m _ac .Distance ){if _cagd ._gbbb .Ind ==nil {_cagd ._gbbb .Ind =_be .NewCT_Ind ();};if m ==_ac .Zero {_cagd ._gbbb .Ind .HangingAttr =nil ;}else {_cagd ._gbbb .Ind .HangingAttr =&_gfa .ST_TwipsMeasure {};
_cagd ._gbbb .Ind .HangingAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (m /_ac .Twips ));};};func _fdfbf (_debe *_be .CT_Tbl ,_edgab map[string ]string ){for _ ,_gbbc :=range _debe .EG_ContentRowContent {for _ ,_bcdaf :=range _gbbc .ContentRowContentChoice .Tr {for _ ,_cdbd :=range _bcdaf .EG_ContentCellContent {for _ ,_gacfd :=range _cdbd .ContentCellContentChoice .Tc {for _ ,_ccec :=range _gacfd .EG_BlockLevelElts {for _ ,_efdg :=range _ccec .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_ggee :=range _efdg .ContentBlockContentChoice .P {_gdec (_ggee ,_edgab );
};for _ ,_fec :=range _efdg .ContentBlockContentChoice .Tbl {_fdfbf (_fec ,_edgab );};};};};};};};};

// Control returns an *axcontrol.Control object contained in the run or the nil value in case of no controls.
func (_acdc Run )Control ()*_gc .Control {if _beeaa :=_acdc ._fgad .EG_RunInnerContent ;_beeaa !=nil {if _fddec :=_beeaa [0].RunInnerContentChoice .Object ;_fddec !=nil {if _dgbbd :=_fddec .ObjectChoice ;_dgbbd !=nil {if _bfdfdb :=_dgbbd .Control ;_bfdfdb !=nil {if _bfdfdb .IdAttr !=nil {_gbeae :=_acdc ._cgbdg .GetDocRelTargetByID (*_bfdfdb .IdAttr );
for _ ,_cagc :=range _acdc ._cgbdg ._bdg {if _gbeae ==_cagc .TargetAttr {return _cagc ;};};};};};};};return nil ;};func (_gbfef *WatermarkText )getInnerElement (_eacc string )*_g .XSDAny {for _ ,_bbbfb :=range _gbfef ._eedac .Any {_acac ,_bgafg :=_bbbfb .(*_g .XSDAny );
if _bgafg &&(_acac .XMLName .Local ==_eacc ||_acac .XMLName .Local =="\u0076\u003a"+_eacc ){return _acac ;};};return nil ;};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_acca ParagraphBorders )SetBottom (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_acca ._edfd .Bottom =_be .NewCT_Border ();_fgdcg (_acca ._edfd .Bottom ,t ,c ,thickness );};

// AddParagraph adds a paragraph to the comment.
func (_bbe Comment )AddParagraph ()Paragraph {_geg :=_be .NewEG_ContentBlockContent ();_bbe ._ebdf .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent =append (_bbe ._ebdf .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent ,_geg );
_aag :=_be .NewCT_P ();_geg .ContentBlockContentChoice .P =append (_geg .ContentBlockContentChoice .P ,_aag );_addb :=Paragraph {_bbe ._ebdc ,_aag };_addb ._bcaf .PPr =_be .NewCT_PPr ();_addb ._bcaf .PPr .RPr =_be .NewCT_ParaRPr ();return _addb ;};

// Clear content of node element.
func (_ecdg *Node )Clear (){_ecdg ._bgcd =nil };

// Font returns the name of run font family.
func (_fbffd RunProperties )Font ()string {if _fddf :=_fbffd ._dggdd .RFonts ;_fddf !=nil {if _fddf .AsciiAttr !=nil {return *_fddf .AsciiAttr ;}else if _fddf .HAnsiAttr !=nil {return *_fddf .HAnsiAttr ;}else if _fddf .CsAttr !=nil {return *_fddf .CsAttr ;
};};return "";};

// UnderlineColor returns the hex color value of run underline.
func (_acbab RunProperties )UnderlineColor ()string {if _geag :=_acbab ._dggdd .U ;_geag !=nil {_eeefg :=_geag .ColorAttr ;if _eeefg !=nil &&_eeefg .ST_HexColorRGB !=nil {return *_eeefg .ST_HexColorRGB ;};};return "";};

// Italic returns true if paragraph font is italic.
func (_cgbb ParagraphProperties )Italic ()bool {_bede :=_cgbb ._fbaa .RPr ;return _bgba (_bede .I )||_bgba (_bede .ICs );};

// CellMargins are the margins for an individual cell.
type CellMargins struct{_adde *_be .CT_TcMar };

// Cells returns the cells defined in the table.
func (_bbbff Row )Cells ()[]Cell {_fefg :=[]Cell {};for _ ,_dcace :=range _bbbff ._gebe .EG_ContentCellContent {for _ ,_faaeb :=range _dcace .ContentCellContentChoice .Tc {_fefg =append (_fefg ,Cell {_bbbff ._cace ,_faaeb });};if _dcace .ContentCellContentChoice .Sdt !=nil &&_dcace .ContentCellContentChoice .Sdt .SdtContent !=nil {for _ ,_adead :=range _dcace .ContentCellContentChoice .Sdt .SdtContent .EG_ContentCellContent {for _ ,_gfabd :=range _adead .ContentCellContentChoice .Tc {_fefg =append (_fefg ,Cell {_bbbff ._cace ,_gfabd });
};};};};return _fefg ;};

// GetEffect returns the effect of the run.
func (_geefb RunProperties )GetEffect ()_be .ST_TextEffect {if _geefb ._dggdd .Effect ==nil {return _be .ST_TextEffectUnset ;};return _geefb ._dggdd .Effect .ValAttr ;};

// GetTargetByRelId returns a target path with the associated relation ID in the
// document.
func (_cdgb *Document )GetTargetByRelId (idAttr string )string {return _cdgb ._dbe .GetTargetByRelId (idAttr );};

// AddParagraph adds a paragraph to the table cell.
func (_fgcf Cell )AddParagraph ()Paragraph {_eacg :=_be .NewEG_BlockLevelElts ();_fgcf ._ca .EG_BlockLevelElts =append (_fgcf ._ca .EG_BlockLevelElts ,_eacg );_aggc :=_be .NewEG_ContentBlockContent ();_eacg .BlockLevelEltsChoice .EG_ContentBlockContent =append (_eacg .BlockLevelEltsChoice .EG_ContentBlockContent ,_aggc );
_ffbg :=_be .NewCT_P ();_aggc .ContentBlockContentChoice .P =append (_aggc .ContentBlockContentChoice .P ,_ffbg );return Paragraph {_fgcf ._fee ,_ffbg };};

// GetSize return the size of anchor on the page.
func (_cfc AnchoredDrawing )GetSize ()(_dbb ,_ecf int64 ){return _cfc ._cg .Extent .CxAttr ,_cfc ._cg .Extent .CyAttr ;};

// Tables returns the tables defined in the header.
func (_baaa Header )Tables ()[]Table {_cbde :=[]Table {};if _baaa ._gbeec ==nil {return nil ;};for _ ,_dbbe :=range _baaa ._gbeec .EG_BlockLevelElts {for _ ,_deecf :=range _dbbe .BlockLevelEltsChoice .EG_ContentBlockContent {_cbde =append (_cbde ,_baaa ._gegb .tables (_deecf )...);
};};return _cbde ;};func (_ccfg *Document )insertImageFromNode (_bgae Node ){for _ ,_cgdd :=range _bgae .AnchoredDrawings {if _ggfe ,_acag :=_cgdd .GetImage ();_acag {_dfca ,_gdfg :=_ec .ImageFromFile (_ggfe .Path ());if _gdfg !=nil {_ede .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_gdfg );
};_gfeg ,_gdfg :=_ccfg .AddImage (_dfca );if _gdfg !=nil {_ede .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_gdfg );
};_ded :=_ccfg ._dbe .GetByRelId (_gfeg .RelID ());_ded .SetID (_ggfe .RelID ());};};for _ ,_efge :=range _bgae .InlineDrawings {if _dfbd ,_fgaaf :=_efge .GetImage ();_fgaaf {_dfaa ,_gfbc :=_ec .ImageFromFile (_dfbd .Path ());if _gfbc !=nil {_ede .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_gfbc );
};_beabe ,_gfbc :=_ccfg .AddImage (_dfaa );if _gfbc !=nil {_ede .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_gfbc );
};_gbacc :=_ccfg ._dbe .GetByRelId (_beabe .RelID ());_gbacc .SetID (_dfbd .RelID ());};};};

// RemoveFootnote removes a footnote from both the paragraph and the document
// the requested footnote must be anchored on the paragraph being referenced.
//
// After each removal, the rest of the footnote ids would be reordered.
func (_dagge Paragraph )RemoveFootnote (id int64 ){for _ ,_cdfa :=range _dagge .Runs (){if _dccdff ,_bffaf :=_cdfa .IsFootnote ();_dccdff {if _bffaf ==id {_dagge .RemoveRun (_cdfa );break ;};};};_dagge ._gfabf .removeFootnote (id );};

// IsItalic returns true if the run has been set to italics.
func (_gadcgg RunProperties )IsItalic ()bool {return _gadcgg .ItalicValue ()==OnOffValueOn };

// Set3DRotationImageEffect sets the 3D rotation image effect.
func (_ged AnchoredDrawing )Set3DRotationImageEffect (){for _ ,_geb :=range _ged ._cg .Graphic .GraphicData .Any {if _aeb ,_fgf :=_geb .(*_fb .Pic );_fgf {_aeb .SpPr .Scene3d =_fce .NewCT_Scene3D ();_aeb .SpPr .Scene3d .Camera =_fce .NewCT_Camera ();_aeb .SpPr .Scene3d .Camera .PrstAttr =_fce .ST_PresetCameraTypeIsometricRightUp ;
_aeb .SpPr .Scene3d .LightRig =_fce .NewCT_LightRig ();_aeb .SpPr .Scene3d .LightRig .RigAttr =_fce .ST_LightRigTypeThreePt ;_aeb .SpPr .Scene3d .LightRig .DirAttr =_fce .ST_LightRigDirectionT ;};};};

// SetStyle sets style to the text in watermark.
func (_gbdd *WatermarkText )SetStyle (style _fa .TextpathStyle ){_dbabc :=_gbdd .getShape ();if _gbdd ._cgddc !=nil {_eefc :=_gbdd ._cgddc .ShapeChoice ;for _ ,_fadge :=range _eefc {if _fadge .ShapeElementsChoice .Textpath !=nil {var _ddgaf =style .String ();
_fadge .ShapeElementsChoice .Textpath .StyleAttr =&_ddgaf ;};};return ;};_gbbff :=_gbdd .findNode (_dbabc ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _ebcgf ,_bgfee :=range _gbbff .Attrs {if _bgfee .Name .Local =="\u0073\u0074\u0079l\u0065"{_gbbff .Attrs [_ebcgf ].Value =style .String ();
};};};

// AbstractNumberID returns the ID that is unique within all numbering
// definitions that is used to assign the definition to a paragraph.
func (_cfaeg NumberingDefinition )AbstractNumberID ()int64 {return _cfaeg ._dbgg .AbstractNumIdAttr };

// AddFooter creates a Footer associated with the document, but doesn't add it
// to the document for display.
func (_efdf *Document )AddFooter ()Footer {_bdbf :=_be .NewFtr ();_efdf ._ccg =append (_efdf ._ccg ,_bdbf );_dca :=_b .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_efdf ._ccg ));_efdf ._dbe .AddRelationship (_dca ,_g .FooterType );
_efdf .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_dca ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");
_efdf ._abb =append (_efdf ._abb ,_ec .NewRelationships ());return Footer {_efdf ,_bdbf };};

// X returns the inner wrapped XML type.
func (_aeebg TableProperties )X ()*_be .CT_TblPr {return _aeebg ._gdfab };

// SetShadow sets the run to shadowed text.
func (_facf RunProperties )SetShadow (b bool ){if !b {_facf ._dggdd .Shadow =nil ;}else {_facf ._dggdd .Shadow =_be .NewCT_OnOff ();};};

// SetThemeColor sets the color from the theme.
func (_eca Color )SetThemeColor (t _be .ST_ThemeColor ){_eca ._ddc .ThemeColorAttr =t };

// SetThemeShade sets the shade based off the theme color.
func (_gcfg Color )SetThemeShade (s uint8 ){_aea :=_b .Sprintf ("\u0025\u0030\u0032\u0078",s );_gcfg ._ddc .ThemeShadeAttr =&_aea ;};

// Row is a row within a table within a document.
type Row struct{_cace *Document ;_gebe *_be .CT_Row ;};

// SetShading controls the cell shading.
func (_bdc CellProperties )SetShading (shd _be .ST_Shd ,foreground ,fill _cb .Color ){if shd ==_be .ST_ShdUnset {_bdc ._fad .Shd =nil ;}else {_bdc ._fad .Shd =_be .NewCT_Shd ();_bdc ._fad .Shd .ValAttr =shd ;_bdc ._fad .Shd .ColorAttr =&_be .ST_HexColor {};
if foreground .IsAuto (){_bdc ._fad .Shd .ColorAttr .ST_HexColorAuto =_be .ST_HexColorAutoAuto ;}else {_bdc ._fad .Shd .ColorAttr .ST_HexColorRGB =foreground .AsRGBString ();};_bdc ._fad .Shd .FillAttr =&_be .ST_HexColor {};if fill .IsAuto (){_bdc ._fad .Shd .FillAttr .ST_HexColorAuto =_be .ST_HexColorAutoAuto ;
}else {_bdc ._fad .Shd .FillAttr .ST_HexColorRGB =fill .AsRGBString ();};};};

// Header is a header for a document section.
type Header struct{_gegb *Document ;_gbeec *_be .Hdr ;};

// Strike returns true if run is striked.
func (_bdgad RunProperties )Strike ()bool {return _bgba (_bdgad ._dggdd .Strike )};

// X return slice of node.
func (_fdgf *Nodes )X ()[]Node {return _fdgf ._acab };func _adf ()(*_fce .CT_Point2D ,[]*_fce .CT_Point2D ){var (_bfg int64 =0;_bdd int64 =21600;);_dg :=_fce .ST_Coordinate {ST_CoordinateUnqualified :&_bfg ,ST_UniversalMeasure :nil };_ffc :=_fce .ST_Coordinate {ST_CoordinateUnqualified :&_bdd ,ST_UniversalMeasure :nil };
_ccd :=_fce .NewCT_Point2D ();_ccd .XAttr =_dg ;_ccd .YAttr =_dg ;_ffda :=[]*_fce .CT_Point2D {&_fce .CT_Point2D {XAttr :_dg ,YAttr :_ffc },&_fce .CT_Point2D {XAttr :_ffc ,YAttr :_ffc },&_fce .CT_Point2D {XAttr :_ffc ,YAttr :_dg },_ccd };return _ccd ,_ffda ;
};

// SetDoubleStrikeThrough sets the run to double strike-through.
func (_daga RunProperties )SetDoubleStrikeThrough (b bool ){if !b {_daga ._dggdd .Dstrike =nil ;}else {_daga ._dggdd .Dstrike =_be .NewCT_OnOff ();};};

// ParagraphProperties returns the paragraph style properties.
func (_cadbc Style )ParagraphProperties ()ParagraphStyleProperties {if _cadbc ._gegdgf .PPr ==nil {_cadbc ._gegdgf .PPr =_be .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_cadbc ._gegdgf .PPr };};func (_fbba *Document )save (_aac _ff .Writer ,_dgab string )error {const _bceb ="\u0064o\u0063u\u006d\u0065\u006e\u0074\u003a\u0064\u002e\u0053\u0061\u0076\u0065";
if _bcfg :=_fbba ._cgb .Validate ();_bcfg !=nil {_ede .Log .Warning ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_bcfg );
};_dfa :=_g .DocTypeDocument ;if !_gbe .GetLicenseKey ().IsLicensed ()&&!_dfe {_b .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");
_b .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");
return _a .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_adb :="\u0075n\u006b\u006e\u006f\u0077\u006e";if _edae ,_gdda :=_aac .(*_cd .File );
_gdda {_adb =_edae .Name ();};if len (_fbba ._gca )==0{if len (_dgab )> 0{_fbba ._gca =_dgab ;}else {_faag ,_cfg :=_gbe .GenRefId ("\u0064\u0077");if _cfg !=nil {_ede .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cfg );return _cfg ;};_fbba ._gca =_faag ;
};};if _cfe :=_gbe .Track (_fbba ._gca ,_bceb ,_adb );_cfe !=nil {_ede .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cfe );return _cfe ;};_bef :=_gb .NewWriter (_aac );defer _bef .Close ();if _eae :=_gf .MarshalXML (_bef ,_g .BaseRelsFilename ,_fbba .Rels .X ());
_eae !=nil {return _eae ;};if _def :=_gf .MarshalXMLByType (_bef ,_dfa ,_g .ExtendedPropertiesType ,_fbba .AppProperties .X ());_def !=nil {return _def ;};if _dacf :=_gf .MarshalXMLByType (_bef ,_dfa ,_g .CorePropertiesType ,_fbba .CoreProperties .X ());
_dacf !=nil {return _dacf ;};if _fbba .CustomProperties .X ()!=nil {if _bfe :=_gf .MarshalXMLByType (_bef ,_dfa ,_g .CustomPropertiesType ,_fbba .CustomProperties .X ());_bfe !=nil {return _bfe ;};};if _fbba .Thumbnail !=nil {_abbc ,_fcff :=_bef .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");
if _fcff !=nil {return _fcff ;};if _bec :=_efd .Encode (_abbc ,_fbba .Thumbnail ,nil );_bec !=nil {return _bec ;};};if _fdc :=_gf .MarshalXMLByType (_bef ,_dfa ,_g .SettingsType ,_fbba .Settings .X ());_fdc !=nil {return _fdc ;};_aff :=_g .AbsoluteFilename (_dfa ,_g .OfficeDocumentType ,0);
if _ccf :=_gf .MarshalXML (_bef ,_aff ,_fbba ._cgb );_ccf !=nil {return _ccf ;};if _gebd :=_gf .MarshalXML (_bef ,_gf .RelationsPathFor (_aff ),_fbba ._dbe .X ());_gebd !=nil {return _gebd ;};if _fbba .Numbering .X ()!=nil {if _cbg :=_gf .MarshalXMLByType (_bef ,_dfa ,_g .NumberingType ,_fbba .Numbering .X ());
_cbg !=nil {return _cbg ;};};if _eaa :=_gf .MarshalXMLByType (_bef ,_dfa ,_g .StylesType ,_fbba .Styles .X ());_eaa !=nil {return _eaa ;};if _fbba ._gdab !=nil {if _bdgg :=_gf .MarshalXMLByType (_bef ,_dfa ,_g .WebSettingsType ,_fbba ._gdab );_bdgg !=nil {return _bdgg ;
};};if _fbba ._gaa !=nil {if _bdcc :=_gf .MarshalXMLByType (_bef ,_dfa ,_g .FontTableType ,_fbba ._gaa );_bdcc !=nil {return _bdcc ;};};if _fbba ._dbc !=nil {if _cff :=_gf .MarshalXMLByType (_bef ,_dfa ,_g .EndNotesType ,_fbba ._dbc );_cff !=nil {return _cff ;
};};if _fbba ._edf !=nil {if _fgfa :=_gf .MarshalXMLByType (_bef ,_dfa ,_g .FootNotesType ,_fbba ._edf );_fgfa !=nil {return _fgfa ;};};if _fbba ._ecff !=nil {if _bfdb :=_gf .MarshalXMLByType (_bef ,_dfa ,_g .CommentsContentType ,_fbba ._ecff );_bfdb !=nil {return _bfdb ;
};};for _gacb ,_aggb :=range _fbba ._acgc {if _fdcc :=_gf .MarshalXMLByTypeIndex (_bef ,_dfa ,_g .ThemeType ,_gacb +1,_aggb );_fdcc !=nil {return _fdcc ;};};for _ecfff ,_fga :=range _fbba ._bdg {_aefa ,_fcdb :=_fga .ExportToByteArray ();if _fcdb !=nil {return _fcdb ;
};_ddeg :="\u0077\u006f\u0072d\u002f"+_fga .TargetAttr [:len (_fga .TargetAttr )-4]+"\u002e\u0062\u0069\u006e";if _faad :=_gf .AddFileFromBytes (_bef ,_ddeg ,_aefa );_faad !=nil {return _faad ;};if _dcfed :=_gf .MarshalXMLByTypeIndex (_bef ,_dfa ,_g .ControlType ,_ecfff +1,_fga .Ocx );
_dcfed !=nil {return _dcfed ;};};for _ddf ,_gfe :=range _fbba ._egc {_gab :=_g .AbsoluteFilename (_dfa ,_g .HeaderType ,_ddf +1);if _gad :=_gf .MarshalXML (_bef ,_gab ,_gfe );_gad !=nil {return _gad ;};if !_fbba ._baa [_ddf ].IsEmpty (){_gf .MarshalXML (_bef ,_gf .RelationsPathFor (_gab ),_fbba ._baa [_ddf ].X ());
};};for _fadg ,_dff :=range _fbba ._ccg {_gedd :=_g .AbsoluteFilename (_dfa ,_g .FooterType ,_fadg +1);if _ddga :=_gf .MarshalXMLByTypeIndex (_bef ,_dfa ,_g .FooterType ,_fadg +1,_dff );_ddga !=nil {return _ddga ;};if !_fbba ._abb [_fadg ].IsEmpty (){_gf .MarshalXML (_bef ,_gf .RelationsPathFor (_gedd ),_fbba ._abb [_fadg ].X ());
};};for _cab ,_ffca :=range _fbba .Images {if _afc :=_ec .AddImageToZip (_bef ,_ffca ,_cab +1,_g .DocTypeDocument );_afc !=nil {return _afc ;};};for _cecd ,_egfg :=range _fbba ._gbgb {_eeaf :=_g .AbsoluteFilename (_dfa ,_g .ChartType ,_cecd +1);_gf .MarshalXML (_bef ,_eeaf ,_egfg ._cdda );
};if _fea :=_gf .MarshalXML (_bef ,_g .ContentTypesFilename ,_fbba .ContentTypes .X ());_fea !=nil {return _fea ;};if _cfgd :=_fbba .WriteExtraFiles (_bef );_cfgd !=nil {return _cfgd ;};return _bef .Close ();};func (_fbeb AnchoredDrawing )initializeEffectList (_aef *_fce .CT_ShapeProperties ){if _aef .EffectPropertiesChoice ==nil {_aef .EffectPropertiesChoice =_fce .NewEG_EffectPropertiesChoice ();
};if _aef .EffectPropertiesChoice .EffectLst ==nil {_aef .EffectPropertiesChoice .EffectLst =_fce .NewCT_EffectList ();};};

// SetLayoutInCell sets the layoutInCell attribute of anchor.
func (_dbf AnchoredDrawing )SetLayoutInCell (val bool ){_dbf ._cg .LayoutInCellAttr =val };

// X return element of Node as interface, can be either *Paragraph, *Table and Run.
func (_fbdbe *Node )X ()interface{}{return _fbdbe ._bgcd };

// InsertRunBefore inserts a run in the paragraph before the relative run.
func (_adcf Paragraph )InsertRunBefore (relativeTo Run )Run {return _adcf .insertRun (relativeTo ,true )};

// Nodes return the document's element as nodes.
func (_dfeef *Document )Nodes ()Nodes {_eecca :=[]Node {};for _ ,_gfbb :=range _dfeef ._cgb .Body .EG_BlockLevelElts {_eecca =append (_eecca ,_edgeb (_dfeef ,_gfbb .BlockLevelEltsChoice .EG_ContentBlockContent ,nil )...);};if _dfeef ._cgb .Body .SectPr !=nil {_eecca =append (_eecca ,Node {_bgcd :_dfeef ._cgb .Body .SectPr });
};_egfe :=Nodes {_acab :_eecca };return _egfe ;};

// ExtractFromFooter returns text from the document footer as an array of TextItems.
func ExtractFromFooter (footer *_be .Ftr )[]TextItem {var _gceeg []TextItem ;for _ ,_eafc :=range footer .EG_BlockLevelElts {_gceeg =append (_gceeg ,_agae (_eafc .BlockLevelEltsChoice .EG_ContentBlockContent ,nil )...);};return _gceeg ;};

// AddSection adds a new document section with an optional section break.  If t
// is ST_SectionMarkUnset, then no break will be inserted.
func (_gaad ParagraphProperties )AddSection (t _be .ST_SectionMark )Section {_gaad ._fbaa .SectPr =_be .NewCT_SectPr ();if t !=_be .ST_SectionMarkUnset {_gaad ._fbaa .SectPr .Type =_be .NewCT_SectType ();_gaad ._fbaa .SectPr .Type .ValAttr =t ;};return Section {_gaad ._ceacb ,_gaad ._fbaa .SectPr };
};

// SetAlignment sets the paragraph alignment
func (_ceaga NumberingLevel )SetAlignment (j _be .ST_Jc ){if j ==_be .ST_JcUnset {_ceaga ._eabd .LvlJc =nil ;}else {_ceaga ._eabd .LvlJc =_be .NewCT_Jc ();_ceaga ._eabd .LvlJc .ValAttr =j ;};};

// X returns the inner wrapped XML type.
func (_cded Row )X ()*_be .CT_Row {return _cded ._gebe };

// TableConditionalFormatting returns a conditional formatting object of a given
// type.  Calling this method repeatedly will return the same object.
func (_fgfde Style )TableConditionalFormatting (typ _be .ST_TblStyleOverrideType )TableConditionalFormatting {for _ ,_afcbf :=range _fgfde ._gegdgf .TblStylePr {if _afcbf .TypeAttr ==typ {return TableConditionalFormatting {_afcbf };};};_eeec :=_be .NewCT_TblStylePr ();
_eeec .TypeAttr =typ ;_fgfde ._gegdgf .TblStylePr =append (_fgfde ._gegdgf .TblStylePr ,_eeec );return TableConditionalFormatting {_eeec };};

// Properties returns the row properties.
func (_cacba Row )Properties ()RowProperties {if _cacba ._gebe .TrPr ==nil {_cacba ._gebe .TrPr =_be .NewCT_TrPr ();};return RowProperties {_cacba ._gebe .TrPr };};

// Bold returns true if paragraph font is bold.
func (_geea ParagraphProperties )Bold ()bool {_caacg :=_geea ._fbaa .RPr ;return _bgba (_caacg .B )||_bgba (_caacg .BCs );};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_cgee ParagraphProperties )SetFirstLineIndent (m _ac .Distance ){if _cgee ._fbaa .Ind ==nil {_cgee ._fbaa .Ind =_be .NewCT_Ind ();};if m ==_ac .Zero {_cgee ._fbaa .Ind .FirstLineAttr =nil ;}else {_cgee ._fbaa .Ind .FirstLineAttr =&_gfa .ST_TwipsMeasure {};
_cgee ._fbaa .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (m /_ac .Twips ));};};

// AddField adds a field (automatically computed text) to the document.
func (_gbbe Run )AddField (code string ){_gbbe .AddFieldWithFormatting (code ,"",true )};

// GetHeaderFooterImageObjByRelId returns a common.Image with the associated relation ID in the
// document, its header or footer.
func (_fgdc *Document )GetHeaderFooterImageObjByRelId (relId string ,isHeader ,isFooter bool )(_ec .Image ,error ){_agbf :="";if isHeader {for _ ,_ccgdc :=range _fgdc ._baa {if _agbf !=""{break ;};_agbf =_ccgdc .GetTargetByRelIdAndType (relId ,_g .ImageType );
};};if isFooter &&_agbf ==""{for _ ,_aadee :=range _fgdc ._abb {if _agbf !=""{break ;};_agbf =_aadee .GetTargetByRelIdAndType (relId ,_g .ImageType );};};if _agbf ==""{_agbf =_fgdc ._dbe .GetTargetByRelIdAndType (relId ,_g .ImageType );};return _fgdc .DocBase .GetImageBytesByTarget (_agbf );
};

// SetFontFamily sets font family of watermark text.
func (_egca *WatermarkText )SetFontFamily (value string ){_bebf :=_egca .GetStyle ();_bebf .SetFontFamily ("\u0022"+value +"\u0022");_egca .SetStyle (_bebf );};

// SetEffect sets a text effect on the run.
func (_egcc RunProperties )SetEffect (e _be .ST_TextEffect ){if e ==_be .ST_TextEffectUnset {_egcc ._dggdd .Effect =nil ;}else {_egcc ._dggdd .Effect =_be .NewCT_TextEffect ();_egcc ._dggdd .Effect .ValAttr =e ;};};

// SetWrapPathLineTo sets wrapPath lineTo value.
func (_gdd AnchorDrawWrapOptions )SetWrapPathLineTo (coordinates []*_fce .CT_Point2D ){_gdd ._eea =coordinates ;};

// Index returns the index of the header within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_cgce Header )Index ()int {for _dfabc ,_gacgc :=range _cgce ._gegb ._egc {if _gacgc ==_cgce ._gbeec {return _dfabc ;};};return -1;};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_deeb CellBorders )SetInsideVertical (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_deeb ._bce .InsideV =_be .NewCT_Border ();_gdff (_deeb ._bce .InsideV ,t ,c ,thickness );};func (_debd Paragraph )addStartBookmark (_agbbd int64 ,_efdad string )*_be .CT_Bookmark {_dcge :=_be .NewEG_PContent ();
_debd ._bcaf .EG_PContent =append (_debd ._bcaf .EG_PContent ,_dcge );_fadgf :=_be .NewEG_ContentRunContent ();_egggf :=_be .NewEG_RunLevelElts ();_cced :=_be .NewEG_RangeMarkupElements ();_bdbb :=_be .NewCT_Bookmark ();_bdbb .NameAttr =_efdad ;_bdbb .IdAttr =_agbbd ;
_cced .RangeMarkupElementsChoice .BookmarkStart =_bdbb ;_dcge .PContentChoice .EG_ContentRunContent =append (_dcge .PContentChoice .EG_ContentRunContent ,_fadgf );_fadgf .ContentRunContentChoice .EG_RunLevelElts =append (_fadgf .ContentRunContentChoice .EG_RunLevelElts ,_egggf );
_egggf .RunLevelEltsChoice .EG_RangeMarkupElements =append (_egggf .RunLevelEltsChoice .EG_RangeMarkupElements ,_cced );return _bdbb ;};

// RemoveEndnote removes a endnote from both the paragraph and the document
// the requested endnote must be anchored on the paragraph being referenced.
//
// After each removal, the rest of the endnote ids would be reordered.
func (_agdea Paragraph )RemoveEndnote (id int64 ){for _ ,_edagg :=range _agdea .Runs (){if _efda ,_ddefb :=_edagg .IsEndnote ();_efda {if _ddefb ==id {_agdea .RemoveRun (_edagg );break ;};};};_agdea ._gfabf .removeEndnote (id );};

// SetPictureSize set watermark picture size with given width and height.
func (_cgfed *WatermarkPicture )SetPictureSize (width ,height int64 ){if _cgfed ._egfee !=nil {_agbd :=_cgfed .GetShapeStyle ();_agbd .SetWidth (float64 (width )*_ac .Point );_agbd .SetHeight (float64 (height )*_ac .Point );_cgfed .SetShapeStyle (_agbd );
};};

// SetWidth sets the cell width to a specified width.
func (_cac CellProperties )SetWidth (d _ac .Distance ){_cac ._fad .TcW =_be .NewCT_TblWidth ();_cac ._fad .TcW .TypeAttr =_be .ST_TblWidthDxa ;_cac ._fad .TcW .WAttr =&_be .ST_MeasurementOrPercent {};_cac ._fad .TcW .WAttr .ST_DecimalNumberOrPercent =&_be .ST_DecimalNumberOrPercent {};
_cac ._fad .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (d /_ac .Twips ));};

// SetOffset sets the offset of the image relative to the origin, which by
// default this is the top-left corner of the page. Offset is incompatible with
// SetAlignment, whichever is called last is applied.
func (_gd AnchoredDrawing )SetOffset (x ,y _ac .Distance ){_gd .SetXOffset (x );_gd .SetYOffset (y )};

// RightToLeft returns true if paragraph text goes from right to left.
func (_dagc ParagraphProperties )RightToLeft ()bool {return _bgba (_dagc ._fbaa .RPr .Rtl )};

// X returns the inner wrapped XML type.
func (_eba Comment )X ()*_be .CT_Comment {return _eba ._ebdf };

// Comments get list of comments in the document.
func (_cde *Document )Comments ()[]Comment {_bfac :=[]Comment {};for _ ,_fgdaf :=range _cde ._ecff .Comment {_bfac =append (_bfac ,Comment {_cde ,_fgdaf });};return _bfac ;};const (OnOffValueUnset OnOffValue =iota ;OnOffValueOff ;OnOffValueOn ;);

// SetBetween sets the between border to a specified type, color and thickness between paragraph.
func (_bfea ParagraphBorders )SetBetween (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_bfea ._edfd .Between =_be .NewCT_Border ();_fgdcg (_bfea ._edfd .Between ,t ,c ,thickness );};

// NewStyles constructs a new empty Styles
func NewStyles ()Styles {return Styles {_be .NewStyles ()}};

// FindNodeByText return node based on matched text and return a slice of node.
func (_fdaf *Nodes )FindNodeByText (text string )[]Node {_dedd :=[]Node {};for _ ,_adafae :=range _fdaf ._acab {if _cc .TrimSpace (_adafae .Text ())==text {_dedd =append (_dedd ,_adafae );};_ebcgc :=Nodes {_acab :_adafae .Children };_dedd =append (_dedd ,_ebcgc .FindNodeByText (text )...);
};return _dedd ;};func (_abfb *Document )onNewRelationship (_bbbg *_gf .DecodeMap ,_fdde ,_ebfb string ,_gaacc []*_gb .File ,_gbbf *_dd .Relationship ,_acbac _gf .Target )error {_ebaae :=_g .DocTypeDocument ;switch _ebfb {case _g .OfficeDocumentType ,_g .OfficeDocumentTypeStrict :_abfb ._cgb =_be .NewDocument ();
_bbbg .AddTarget (_fdde ,_abfb ._cgb ,_ebfb ,0);_bbbg .AddTarget (_gf .RelationsPathFor (_fdde ),_abfb ._dbe .X (),_ebfb ,0);_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,0);case _g .CorePropertiesType :_bbbg .AddTarget (_fdde ,_abfb .CoreProperties .X (),_ebfb ,0);
_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,0);case _g .CorePropertiesAltType :_bbbg .AddTarget (_fdde ,_abfb .CoreProperties .X (),_g .CorePropertiesType ,0);_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_g .CorePropertiesType ,0);
case _g .CustomPropertiesType :_bbbg .AddTarget (_fdde ,_abfb .CustomProperties .X (),_ebfb ,0);_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,0);case _g .ExtendedPropertiesType ,_g .ExtendedPropertiesTypeStrict :_bbbg .AddTarget (_fdde ,_abfb .AppProperties .X (),_ebfb ,0);
_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,0);case _g .ThumbnailType ,_g .ThumbnailTypeStrict :for _eggc ,_fdea :=range _gaacc {if _fdea ==nil {continue ;};if _fdea .Name ==_fdde {_aeeg ,_aecb :=_fdea .Open ();if _aecb !=nil {return _b .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_aecb );
};_abfb .Thumbnail ,_ ,_aecb =_de .Decode (_aeeg );_aeeg .Close ();if _aecb !=nil {return _b .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_aecb );
};_gaacc [_eggc ]=nil ;};};case _g .SettingsType ,_g .SettingsTypeStrict :_bbbg .AddTarget (_fdde ,_abfb .Settings .X (),_ebfb ,0);_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,0);case _g .NumberingType ,_g .NumberingTypeStrict :_abfb .Numbering =NewNumbering ();
_bbbg .AddTarget (_fdde ,_abfb .Numbering .X (),_ebfb ,0);_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,0);case _g .StylesType ,_g .StylesTypeStrict :_abfb .Styles .Clear ();_bbbg .AddTarget (_fdde ,_abfb .Styles .X (),_ebfb ,0);
_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,0);case _g .HeaderType ,_g .HeaderTypeStrict :_gefe :=_be .NewHdr ();_bbbg .AddTarget (_fdde ,_gefe ,_ebfb ,uint32 (len (_abfb ._egc )));_abfb ._egc =append (_abfb ._egc ,_gefe );_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,len (_abfb ._egc ));
_beacg :=_ec .NewRelationships ();_bbbg .AddTarget (_gf .RelationsPathFor (_fdde ),_beacg .X (),_ebfb ,0);_abfb ._baa =append (_abfb ._baa ,_beacg );case _g .FooterType ,_g .FooterTypeStrict :_dgce :=_be .NewFtr ();_bbbg .AddTarget (_fdde ,_dgce ,_ebfb ,uint32 (len (_abfb ._ccg )));
_abfb ._ccg =append (_abfb ._ccg ,_dgce );_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,len (_abfb ._ccg ));_cgac :=_ec .NewRelationships ();_bbbg .AddTarget (_gf .RelationsPathFor (_fdde ),_cgac .X (),_ebfb ,0);_abfb ._abb =append (_abfb ._abb ,_cgac );
case _g .ThemeType ,_g .ThemeTypeStrict :_cadce :=_fce .NewTheme ();_bbbg .AddTarget (_fdde ,_cadce ,_ebfb ,uint32 (len (_abfb ._acgc )));_abfb ._acgc =append (_abfb ._acgc ,_cadce );_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,len (_abfb ._acgc ));
case _g .WebSettingsType ,_g .WebSettingsTypeStrict :_abfb ._gdab =_be .NewWebSettings ();_bbbg .AddTarget (_fdde ,_abfb ._gdab ,_ebfb ,0);_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,0);case _g .FontTableType ,_g .FontTableTypeStrict :_abfb ._gaa =_be .NewFonts ();
_bbbg .AddTarget (_fdde ,_abfb ._gaa ,_ebfb ,0);_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,0);case _g .FontEmbeddingType :_dfgd :=_ec .NewRelationships ();_bbbg .AddTarget (_gf .RelationsPathFor (_fdde ),_dfgd .X (),_ebfb ,0);
_abfb ._ege =_dfgd ;case _g .EndNotesType ,_g .EndNotesTypeStrict :_abfb ._dbc =_be .NewEndnotes ();_bbbg .AddTarget (_fdde ,_abfb ._dbc ,_ebfb ,0);_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,0);case _g .FootNotesType ,_g .FootNotesTypeStrict :_abfb ._edf =_be .NewFootnotes ();
_bbbg .AddTarget (_fdde ,_abfb ._edf ,_ebfb ,0);_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,0);case _g .CommentsType :_abfb ._ecff =_be .NewComments ();_bbbg .AddTarget (_fdde ,_abfb ._ecff ,_ebfb ,0);_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,0);
case _g .ImageType ,_g .ImageTypeStrict :var _gagb _ec .ImageRef ;for _afef ,_caec :=range _gaacc {if _caec ==nil {continue ;};_gcdc :=_cc .TrimPrefix (_caec .Name ,"\u0077\u006f\u0072d\u002f");if _edgfa :=_cc .TrimPrefix (_fdde ,"\u0077\u006f\u0072d\u002f");
_gcdc ==_edgfa {_geab ,_caea :=_gf .ExtractToDiskTmp (_caec ,_abfb .TmpPath );if _caea !=nil {return _caea ;};_feee :=_ef .Ext (_caec .Name );_acfb :=_ec .Image {};if _feee [1:]!="\u0065\u006d\u0066"{_cfbef ,_ebc :=_ec .ImageFromStorage (_geab );if _ebc !=nil {return _ebc ;
};_acfb =_cfbef ;}else {_acfb .Path =_geab ;};_acfb .Format =_feee [1:];_gagb =_ec .MakeImageRef (_acfb ,&_abfb .DocBase ,_abfb ._dbe );_gaacc [_afef ]=nil ;};};if _gagb .Format ()!=""{_ggfg :="\u002e"+_cc .ToLower (_gagb .Format ());_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,len (_abfb .Images )+1);
if _adfd :=_ef .Ext (_gbbf .TargetAttr );_adfd !=_ggfg {_gbbf .TargetAttr =_gbbf .TargetAttr [0:len (_gbbf .TargetAttr )-len (_adfd )]+_ggfg ;};_gagb .SetTarget ("\u0077\u006f\u0072d\u002f"+_gbbf .TargetAttr );_abfb .Images =append (_abfb .Images ,_gagb );
};case _g .ControlType ,_g .ControlTypeStrict :_edcg :=_ffe .NewOcx ();_cbdd :=_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,len (_abfb ._bdg )+1);_bgca :="\u0077\u006f\u0072d\u002f"+_cbdd [:len (_cbdd )-4]+"\u002e\u0062\u0069\u006e";for _ccda ,_cabce :=range _gaacc {if _cabce ==nil {continue ;
};if _cabce .Name ==_bgca {_eebf ,_adac :=_gf .ExtractToDiskTmp (_cabce ,_abfb .TmpPath );if _adac !=nil {return _adac ;};_aecgb ,_adac :=_gc .ImportFromFile (_eebf );if _adac ==nil {_aecgb .TargetAttr =_cbdd ;_aecgb .Ocx =_edcg ;_abfb ._bdg =append (_abfb ._bdg ,_aecgb );
_bbbg .AddTarget (_fdde ,_edcg ,_ebfb ,uint32 (len (_abfb ._bdg )));_gbbf .TargetAttr =_cbdd ;_gaacc [_ccda ]=nil ;}else {_ede .Log .Debug ("c\u0061\u006e\u006e\u006f\u0074\u0020r\u0065\u0061\u0064\u0020\u0062\u0069\u006e\u0020\u0066i\u006c\u0065\u003a \u0025s\u0020\u0025\u0073",_bgca ,_adac .Error ());
};break ;};};case _g .ChartType :_ggca :=chart {_cdda :_db .NewChartSpace ()};_gfeed :=uint32 (len (_abfb ._gbgb ));_bbbg .AddTarget (_fdde ,_ggca ._cdda ,_ebfb ,_gfeed );_abfb ._gbgb =append (_abfb ._gbgb ,&_ggca );_gbbf .TargetAttr =_g .RelativeFilename (_ebaae ,_acbac .Typ ,_ebfb ,len (_abfb ._gbgb ));
_ggca ._gea =_gbbf .TargetAttr ;default:_ede .Log .Debug ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_ebfb ,_fdde );
};return nil ;};

// Borders allows manipulation of the table borders.
func (_baaae TableProperties )Borders ()TableBorders {if _baaae ._gdfab .TblBorders ==nil {_baaae ._gdfab .TblBorders =_be .NewCT_TblBorders ();};return TableBorders {_baaae ._gdfab .TblBorders };};func _eag (_cbb *_be .CT_TblWidth ,_edaa _ac .Distance ){_cbb .TypeAttr =_be .ST_TblWidthDxa ;
_cbb .WAttr =&_be .ST_MeasurementOrPercent {};_cbb .WAttr .ST_DecimalNumberOrPercent =&_be .ST_DecimalNumberOrPercent {};_cbb .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (_edaa /_ac .Dxa ));};

// SetText sets the text to be used in bullet mode.
func (_ccfe NumberingLevel )SetText (t string ){if t ==""{_ccfe ._eabd .LvlText =nil ;}else {_ccfe ._eabd .LvlText =_be .NewCT_LevelText ();_ccfe ._eabd .LvlText .ValAttr =_g .String (t );};};

// OpenTemplate opens a document, removing all content so it can be used as a
// template.  Since Word removes unused styles from a document upon save, to
// create a template in Word add a paragraph with every style of interest.  When
// opened with OpenTemplate the document's styles will be available but the
// content will be gone.
func OpenTemplate (filename string )(*Document ,error ){_ecb ,_gbfb :=Open (filename );if _gbfb !=nil {return nil ,_gbfb ;};_ecb ._cgb .Body =_be .NewCT_Body ();return _ecb ,nil ;};

// Properties returns the paragraph properties.
func (_ecfa Paragraph )Properties ()ParagraphProperties {_ecfa .ensurePPr ();return ParagraphProperties {_ecfa ._gfabf ,_ecfa ._bcaf .PPr };};

// X returns the inner wrapped XML type.
func (_abad Numbering )X ()*_be .Numbering {return _abad ._dcaac };

// X returns the inner wrapped XML type.
func (_ea AnchoredDrawing )X ()*_be .WdAnchor {return _ea ._cg };

// AddTextInput adds text input form field to the paragraph and returns it.
func (_bcgeb Paragraph )AddTextInput (name string )FormField {_dcfb :=_bcgeb .addFldCharsForField (name ,"\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054");_dcfb ._dbgb .FFDataChoice [0].TextInput =_be .NewCT_FFTextInput ();return _dcfb ;};

// VerticalAlign returns the value of run vertical align.
func (_fgcc RunProperties )VerticalAlignment ()_gfa .ST_VerticalAlignRun {if _bgffb :=_fgcc ._dggdd .VertAlign ;_bgffb !=nil {return _bgffb .ValAttr ;};return 0;};

// HyperLink is a link within a document.
type HyperLink struct{_bdagg *Document ;_caddg *_be .CT_Hyperlink ;};

// SetTop sets the top border to a specified type, color and thickness.
func (_abfc ParagraphBorders )SetTop (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_abfc ._edfd .Top =_be .NewCT_Border ();_fgdcg (_abfc ._edfd .Top ,t ,c ,thickness );};

// TableConditionalFormatting controls the conditional formatting within a table
// style.
type TableConditionalFormatting struct{_afbcf *_be .CT_TblStylePr };

// NewWatermarkPicture generates new WatermarkPicture.
func NewWatermarkPicture ()WatermarkPicture {_gbeg :=_bd .NewShapetype ();_gacga :=_aaccd ();_begac :=_gfafc ();_eaefb :=_eaedg ();_gbeg .EG_ShapeElements =[]*_bd .EG_ShapeElements {{ShapeElementsChoice :&_bd .EG_ShapeElementsChoice {Formulas :_gacga }},{ShapeElementsChoice :&_bd .EG_ShapeElementsChoice {Path :_begac }},{ShapeElementsChoice :&_bd .EG_ShapeElementsChoice {Lock :_eaefb }}};
var (_dbeea ="\u005f\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0037\u0035";_affe ="2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030";_fbga =float32 (75.0);_dgba ="\u006d\u0040\u0034\u00405l\u0040\u0034\u0040\u0031\u0031\u0040\u0039\u0040\u0031\u0031\u0040\u0039\u0040\u0035x\u0065";
);_gbeg .IdAttr =&_dbeea ;_gbeg .CoordsizeAttr =&_affe ;_gbeg .SptAttr =&_fbga ;_gbeg .PreferrelativeAttr =_gfa .ST_TrueFalseTrue ;_gbeg .PathAttr =&_dgba ;_gbeg .FilledAttr =_gfa .ST_TrueFalseFalse ;_gbeg .StrokedAttr =_gfa .ST_TrueFalseFalse ;_dgdbb :=_bd .NewShape ();
_dgdbb .ShapeChoice =[]*_bd .CT_ShapeChoice {{ShapeElementsChoice :&_bd .EG_ShapeElementsChoice {Imagedata :_cfedc ()}}};var (_aece ="\u0057\u006f\u0072\u0064\u0050\u0069\u0063\u0074\u0075\u0072e\u0057\u0061\u0074\u0065\u0072\u006d\u0061r\u006b\u0031\u0036\u0033\u0032\u0033\u0031\u0036\u0035\u0039\u0035";
_ggbab ="\u005f\u0078\u00300\u0030\u0030\u005f\u0073\u0032\u0030\u0035\u0031";_adcga ="#\u005f\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0037\u0035";_agdd ="";_bffc ="\u0070os\u0069t\u0069o\u006e\u003a\u0061\u0062\u0073\u006fl\u0075\u0074\u0065\u003bm\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074\u003a\u0030\u003bma\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070\u003a\u0030\u003b\u0077\u0069\u0064\u0074\u0068\u003a\u0030\u0070\u0074;\u0068e\u0069\u0067\u0068\u0074\u003a\u0030\u0070\u0074\u003b\u007a\u002d\u0069\u006ed\u0065\u0078:\u002d\u0032\u00351\u0036\u0035\u0038\u0032\u0034\u0030\u003b\u006d\u0073o-\u0070\u006f\u0073i\u0074\u0069\u006f\u006e-\u0068\u006f\u0072\u0069\u007a\u006fn\u0074\u0061l\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003bm\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u002drela\u0074\u0069\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076\u0065\u0072t\u0069c\u0061l\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e-\u0076\u0065r\u0074\u0069c\u0061l\u002d\u0072\u0065\u006c\u0061\u0074i\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e";
);_dgdbb .IdAttr =&_aece ;_dgdbb .SpidAttr =&_ggbab ;_dgdbb .TypeAttr =&_adcga ;_dgdbb .AltAttr =&_agdd ;_dgdbb .StyleAttr =&_bffc ;_dgdbb .AllowincellAttr =_gfa .ST_TrueFalseFalse ;_gcefg :=_be .NewCT_Picture ();_gcefg .Any =[]_g .Any {_gbeg ,_dgdbb };
return WatermarkPicture {_bcaag :_gcefg ,_egfee :_dgdbb ,_ggeff :_gbeg };};

// SetStartPct sets the cell start margin
func (_dea CellMargins )SetStartPct (pct float64 ){_dea ._adde .Start =_be .NewCT_TblWidth ();_efe (_dea ._adde .Start ,pct );};

// NumberingLevel is the definition for numbering for a particular level within
// a NumberingDefinition.
type NumberingLevel struct{_eabd *_be .CT_Lvl };

// SetCellSpacing sets the cell spacing within a table.
func (_fgaaa TableProperties )SetCellSpacing (m _ac .Distance ){_fgaaa ._gdfab .TblCellSpacing =_be .NewCT_TblWidth ();_fgaaa ._gdfab .TblCellSpacing .TypeAttr =_be .ST_TblWidthDxa ;_fgaaa ._gdfab .TblCellSpacing .WAttr =&_be .ST_MeasurementOrPercent {};
_fgaaa ._gdfab .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_be .ST_DecimalNumberOrPercent {};_fgaaa ._gdfab .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (m /_ac .Dxa ));};

// FindNodeByStyleId return slice of node base on style id.
func (_dcbe *Nodes )FindNodeByStyleId (styleId string )[]Node {_cbdba :=[]Node {};for _ ,_fbgc :=range _dcbe ._acab {switch _geecd :=_fbgc ._bgcd .(type ){case *Paragraph :if _geecd !=nil &&_geecd .Style ()==styleId {_cbdba =append (_cbdba ,_fbgc );};case *Table :if _geecd !=nil &&_geecd .Style ()==styleId {_cbdba =append (_cbdba ,_fbgc );
};};_daafe :=Nodes {_acab :_fbgc .Children };_cbdba =append (_cbdba ,_daafe .FindNodeByStyleId (styleId )...);};return _cbdba ;};func (_fgbfd *WatermarkText )findNode (_eacba *_g .XSDAny ,_acbgb string )*_g .XSDAny {for _ ,_gaea :=range _eacba .Nodes {if _gaea .XMLName .Local ==_acbgb {return _gaea ;
};};return nil ;};

// ClearContent clears any content in the run (text, tabs, breaks, etc.)
func (_fbca Run )ClearContent (){_fbca ._fgad .EG_RunInnerContent =nil };

// Properties returns the cell properties.
func (_fcc Cell )Properties ()CellProperties {if _fcc ._ca .TcPr ==nil {_fcc ._ca .TcPr =_be .NewCT_TcPr ();};return CellProperties {_fcc ._ca .TcPr };};type htmlNode struct{_gbfcb _d .StartElement ;_gbaaa *htmlNode ;};

// Table is a table within a document.
type Table struct{_bbbfef *Document ;_dbgfc *_be .CT_Tbl ;};

// SetEmboss sets the run to embossed text.
func (_eabbb RunProperties )SetEmboss (b bool ){if !b {_eabbb ._dggdd .Emboss =nil ;}else {_eabbb ._dggdd .Emboss =_be .NewCT_OnOff ();};};

// SetRightPct sets the cell right margin
func (_bfb CellMargins )SetRightPct (pct float64 ){_bfb ._adde .Right =_be .NewCT_TblWidth ();_efe (_bfb ._adde .Right ,pct );};

// Fonts allows manipulating a style or run's fonts.
type Fonts struct{_ggdb *_be .CT_Fonts };func (_gbgd Paragraph )addBeginFldChar (_ecfc string )*_be .CT_FFData {_debb :=_gbgd .addFldChar ();_debb .FldCharTypeAttr =_be .ST_FldCharTypeBegin ;if _debb .FldCharChoice ==nil {_debb .FldCharChoice =_be .NewCT_FldCharChoice ();
};_debb .FldCharChoice .FfData =_be .NewCT_FFData ();_ecdeb :=_be .NewCT_FFName ();_ecdeb .ValAttr =&_ecfc ;_debb .FldCharChoice .FfData .FFDataChoice =[]*_be .CT_FFDataChoice {&_be .CT_FFDataChoice {Name :_ecdeb }};return _debb .FldCharChoice .FfData ;
};

// Paragraphs returns the paragraphs defined in a footer.
func (_bbabdd Footer )Paragraphs ()[]Paragraph {_afbef :=[]Paragraph {};for _ ,_bbbc :=range _bbabdd ._dgcd .EG_BlockLevelElts {for _ ,_dbecf :=range _bbbc .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_afbc :=range _dbecf .ContentBlockContentChoice .P {_afbef =append (_afbef ,Paragraph {_bbabdd ._bccb ,_afbc });
};};};for _ ,_ffed :=range _bbabdd .Tables (){for _ ,_ceda :=range _ffed .Rows (){for _ ,_ebbg :=range _ceda .Cells (){_afbef =append (_afbef ,_ebbg .Paragraphs ()...);};};};return _afbef ;};

// AddFootnote will create a new footnote and attach it to the Paragraph in the
// location at the end of the previous run (footnotes create their own run within
// the paragraph). The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the footnote later.
func (_gced Paragraph )AddFootnote (text string )Footnote {var _abecd int64 ;if _gced ._gfabf .HasFootnotes (){for _ ,_bbbcc :=range _gced ._gfabf .Footnotes (){if _bbbcc .id ()> _abecd {_abecd =_bbbcc .id ();};};_abecd ++;}else {_gced ._gfabf .addFootnotes ();
_abecd =1;};_dabbg :=_be .NewCT_FtnEdn ();_abcbb :=_be .NewCT_FtnEdnRef ();_abcbb .IdAttr =_abecd ;_gced ._gfabf ._edf .CT_Footnotes .Footnote =append (_gced ._gfabf ._edf .CT_Footnotes .Footnote ,_dabbg );_cbcdb :=_gced .AddRun ();_cbaa :=_cbcdb .Properties ();
_cbaa .SetStyle (_dbca );_cbcdb ._fgad .EG_RunInnerContent =[]*_be .EG_RunInnerContent {_be .NewEG_RunInnerContent ()};_cbcdb ._fgad .EG_RunInnerContent [0].RunInnerContentChoice .FootnoteReference =_abcbb ;_afefe :=Footnote {_gced ._gfabf ,_dabbg };_afefe ._debf .IdAttr =_abecd ;
_afefe ._debf .EG_BlockLevelElts =[]*_be .EG_BlockLevelElts {_be .NewEG_BlockLevelElts ()};_gdaea :=_afefe .AddParagraph ();_gdaea .Properties ().SetStyle (FootnoteTextStyleId );_gdaea ._bcaf .PPr .RPr =_be .NewCT_ParaRPr ();_feac :=_gdaea .AddRun ();_bgdbg :=_feac .Properties ();
_bgdbg .SetStyle (_dbca );_feac .AddFootnoteReference ();_dcac :=_gdaea .AddRun ();_dcac .AddText ("\u0020");_dcac =_gdaea .AddRun ();_dcac .AddText (text );return _afefe ;};

// X returns the inner wrapped XML type.
func (_bbca TableWidth )X ()*_be .CT_TblWidth {return _bbca ._gade };

// Caps returns true if run font is capitalized.
func (_gefa RunProperties )Caps ()bool {return _bgba (_gefa ._dggdd .Caps )};func (_cdbb *WatermarkPicture )getShapeImagedata ()*_g .XSDAny {return _cdbb .getInnerElement ("\u0069m\u0061\u0067\u0065\u0064\u0061\u0074a");};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_ccfcf ParagraphProperties )ComplexSizeMeasure ()string {if _ebdg :=_ccfcf ._fbaa .RPr .SzCs ;_ebdg !=nil {_cgcd :=_ebdg .ValAttr ;if _cgcd .ST_PositiveUniversalMeasure !=nil {return *_cgcd .ST_PositiveUniversalMeasure ;};};return "";};

// SetWrapPathStart sets wrapPath start value.
func (_gaf AnchorDrawWrapOptions )SetWrapPathStart (coordinate *_fce .CT_Point2D ){_gaf ._ega =coordinate ;};func (_dafd *WatermarkPicture )getInnerElement (_adeeg string )*_g .XSDAny {for _ ,_eabbf :=range _dafd ._bcaag .Any {_dfec ,_bddfg :=_eabbf .(*_g .XSDAny );
if _bddfg &&(_dfec .XMLName .Local ==_adeeg ||_dfec .XMLName .Local =="\u0076\u003a"+_adeeg ){return _dfec ;};};return nil ;};

// TableWidth controls width values in table settings.
type TableWidth struct{_gade *_be .CT_TblWidth };

// SetShapeStyle sets style to the element v:shape in watermark.
func (_gdafb *WatermarkPicture )SetShapeStyle (shapeStyle _fa .ShapeStyle ){if _gdafb ._egfee !=nil {_ecfdb :=shapeStyle .String ();_gdafb ._egfee .StyleAttr =&_ecfdb ;};};

// AddHeader creates a header associated with the document, but doesn't add it
// to the document for display.
func (_fff *Document )AddHeader ()Header {_aegg :=_be .NewHdr ();_fff ._egc =append (_fff ._egc ,_aegg );_ddca :=_b .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_fff ._egc ));_fff ._dbe .AddRelationship (_ddca ,_g .HeaderType );
_fff .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_ddca ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");
_fff ._baa =append (_fff ._baa ,_ec .NewRelationships ());return Header {_fff ,_aegg };};func (_fade *Document )removeFootnote (_acdg int64 ){_fdccf :=_fade ._edf ;var _ffcd int ;for _bgff ,_bgfae :=range _fdccf .CT_Footnotes .Footnote {if _bgfae .IdAttr ==_acdg {_ffcd =_bgff ;
break ;};};_fdccf .CT_Footnotes .Footnote [_ffcd ]=nil ;_fdccf .CT_Footnotes .Footnote [_ffcd ]=_fdccf .CT_Footnotes .Footnote [len (_fdccf .CT_Footnotes .Footnote )-1];_fdccf .CT_Footnotes .Footnote =_fdccf .CT_Footnotes .Footnote [:len (_fdccf .CT_Footnotes .Footnote )-1];
_fade .reorderFootnote ();_fade .syncFootnoteSettings ();};

// SetHeadingLevel sets a heading level and style based on the level to a
// paragraph.  The default styles for a new unioffice document support headings
// from level 1 to 8.
func (_eddf ParagraphProperties )SetHeadingLevel (idx int ){_eddf .SetStyle (_b .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",idx ));if _eddf ._fbaa .NumPr ==nil {_eddf ._fbaa .NumPr =_be .NewCT_NumPr ();};_eddf ._fbaa .NumPr .Ilvl =_be .NewCT_DecimalNumber ();
_eddf ._fbaa .NumPr .Ilvl .ValAttr =int64 (idx );};

// CharacterSpacingValue returns the value of run's characters spacing in twips (1/20 of point).
func (_bdfa RunProperties )CharacterSpacingValue ()int64 {if _acbc :=_bdfa ._dggdd .Spacing ;_acbc !=nil {_gcabd :=_acbc .ValAttr ;if _gcabd .Int64 !=nil {return *_gcabd .Int64 ;};};return int64 (0);};

// SetStyle sets the font size.
func (_ecfae RunProperties )SetStyle (style string ){if style ==""{_ecfae ._dggdd .RStyle =nil ;}else {_ecfae ._dggdd .RStyle =_be .NewCT_String ();_ecfae ._dggdd .RStyle .ValAttr =style ;};};

// New constructs an empty document that content can be added to.
func New ()*Document {_acb :=&Document {_cgb :_be .NewDocument ()};_acb .ContentTypes =_ec .NewContentTypes ();_acb ._cgb .Body =_be .NewCT_Body ();_acb ._cgb .ConformanceAttr =_gfa .ST_ConformanceClassTransitional ;_acb ._dbe =_ec .NewRelationships ();
_acb ._ege =_ec .NewRelationships ();_acb .AppProperties =_ec .NewAppProperties ();_acb .CoreProperties =_ec .NewCoreProperties ();_acb .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0064\u006f\u0063u\u006d\u0065n\u0074\u002e\u0078\u006d\u006c","\u0061p\u0070\u006c\u0069c\u0061\u0074\u0069o\u006e/v\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072dp\u0072o\u0063\u0065\u0073\u0073\u0069\u006eg\u006d\u006c\u002e\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u002e\u006d\u0061\u0069\u006e\u002bx\u006d\u006c");
_acb .Settings =NewSettings ();_acb ._dbe .AddRelationship ("\u0073\u0065\u0074t\u0069\u006e\u0067\u0073\u002e\u0078\u006d\u006c",_g .SettingsType );_acb .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0073\u0065\u0074t\u0069\u006eg\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002b\u0078\u006d\u006c");
_acb .Rels =_ec .NewRelationships ();_acb .Rels .AddRelationship (_g .RelativeFilename (_g .DocTypeDocument ,"",_g .CorePropertiesType ,0),_g .CorePropertiesType );_acb .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c",_g .ExtendedPropertiesType );
_acb .Rels .AddRelationship ("\u0077\u006f\u0072\u0064\u002f\u0064\u006f\u0063\u0075\u006d\u0065\u006et\u002e\u0078\u006d\u006c",_g .OfficeDocumentType );_acb .Numbering =NewNumbering ();_acb .Numbering .InitializeDefault ();_acb .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u006e\u0075\u006d\u0062e\u0072\u0069\u006e\u0067\u002b\u0078m\u006c");
_acb ._dbe .AddRelationship ("\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c",_g .NumberingType );_acb .Styles =NewStyles ();_acb .Styles .InitializeDefault ();_acb .ContentTypes .AddOverride ("\u002f\u0077o\u0072\u0064\u002fs\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0073\u0074\u0079\u006ce\u0073\u002b\u0078\u006d\u006c");
_acb ._dbe .AddRelationship ("\u0073\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c",_g .StylesType );_acb ._cgb .Body =_be .NewCT_Body ();return _acb ;};

// SetPageMargins sets the page margins for a section
func (_edabg Section )SetPageMargins (top ,right ,bottom ,left ,header ,footer ,gutter _ac .Distance ){_bfee :=_be .NewCT_PageMar ();_bfee .TopAttr .Int64 =_g .Int64 (int64 (top /_ac .Twips ));_bfee .BottomAttr .Int64 =_g .Int64 (int64 (bottom /_ac .Twips ));
_bfee .RightAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (right /_ac .Twips ));_bfee .LeftAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (left /_ac .Twips ));_bfee .HeaderAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (header /_ac .Twips ));
_bfee .FooterAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (footer /_ac .Twips ));_bfee .GutterAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (gutter /_ac .Twips ));_edabg ._cffdd .PgMar =_bfee ;};

// NewNumbering constructs a new numbering.
func NewNumbering ()Numbering {_baed :=_be .NewNumbering ();return Numbering {_baed }};

// SetAlignment positions an anchored image via alignment.  Offset is
// incompatible with SetOffset, whichever is called last is applied.
func (_dee AnchoredDrawing )SetAlignment (h _be .WdST_AlignH ,v _be .WdST_AlignV ){_dee .SetHAlignment (h );_dee .SetVAlignment (v );};

// X returns the inner wrapped XML type.
func (_efcd Endnote )X ()*_be .CT_FtnEdn {return _efcd ._dbda };

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_cdec Paragraph )SetFirstLineIndent (m _ac .Distance ){_cdec .ensurePPr ();_fadcf :=_cdec ._bcaf .PPr ;if _fadcf .Ind ==nil {_fadcf .Ind =_be .NewCT_Ind ();};if m ==_ac .Zero {_fadcf .Ind .FirstLineAttr =nil ;}else {_fadcf .Ind .FirstLineAttr =&_gfa .ST_TwipsMeasure {};
_fadcf .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (m /_ac .Twips ));};};

// SetPictureWashout set washout to watermark picture.
func (_daffd *WatermarkPicture )SetPictureWashout (isWashout bool ){if _daffd ._egfee !=nil {_gded :=_daffd ._egfee .ShapeChoice ;if len (_gded )> 0&&_gded [0].ShapeElementsChoice .Imagedata !=nil {if isWashout {_faaa :="\u0031\u0039\u0036\u0036\u0031\u0066";
_eaefa :="\u0032\u0032\u0039\u0033\u0038\u0066";_gded [0].ShapeElementsChoice .Imagedata .GainAttr =&_faaa ;_gded [0].ShapeElementsChoice .Imagedata .BlacklevelAttr =&_eaefa ;};};};};

// Outline returns true if run outline is on.
func (_ccced RunProperties )Outline ()bool {return _bgba (_ccced ._dggdd .Outline )};

// Section is the beginning of a new section.
type Section struct{_dfcf *Document ;_cffdd *_be .CT_SectPr ;};

// SetProperties sets the `RunProperties` to the `Run` element
func (_adae Run )SetProperties (rp RunProperties ){if rp ._dggdd ==nil {_adae ._fgad .RPr =_be .NewCT_RPr ();}else {_bdac :=_be .NewCT_RPr ();if rp ._dggdd .RStyle !=nil {_bdac .RStyle =&_be .CT_String {ValAttr :rp ._dggdd .RStyle .ValAttr };};if rp ._dggdd .RFonts !=nil {_bdac .RFonts =&_be .CT_Fonts {HintAttr :rp ._dggdd .RFonts .HintAttr ,AsciiAttr :rp ._dggdd .RFonts .AsciiAttr ,HAnsiAttr :rp ._dggdd .RFonts .HAnsiAttr ,EastAsiaAttr :rp ._dggdd .RFonts .EastAsiaAttr ,CsAttr :rp ._dggdd .RFonts .CsAttr ,AsciiThemeAttr :rp ._dggdd .RFonts .AsciiThemeAttr ,HAnsiThemeAttr :rp ._dggdd .RFonts .HAnsiThemeAttr ,EastAsiaThemeAttr :rp ._dggdd .RFonts .EastAsiaThemeAttr ,CsthemeAttr :rp ._dggdd .RFonts .CsthemeAttr };
};if rp ._dggdd .B !=nil {_bdac .B =&_be .CT_OnOff {};if rp ._dggdd .B .ValAttr !=nil {_edeg :=*rp ._dggdd .B .ValAttr ;_bdac .B .ValAttr =&_edeg ;};};if rp ._dggdd .BCs !=nil {_bdac .BCs =&_be .CT_OnOff {};if rp ._dggdd .BCs .ValAttr !=nil {_gcfec :=*rp ._dggdd .BCs .ValAttr ;
_bdac .BCs .ValAttr =&_gcfec ;};};if rp ._dggdd .I !=nil {_bdac .I =&_be .CT_OnOff {};if rp ._dggdd .I .ValAttr !=nil {_cddgg :=*rp ._dggdd .I .ValAttr ;_bdac .I .ValAttr =&_cddgg ;};};if rp ._dggdd .ICs !=nil {_bdac .ICs =&_be .CT_OnOff {};if rp ._dggdd .ICs .ValAttr !=nil {_cbbgb :=*rp ._dggdd .ICs .ValAttr ;
_bdac .ICs .ValAttr =&_cbbgb ;};};if rp ._dggdd .Caps !=nil {_bdac .Caps =&_be .CT_OnOff {};if rp ._dggdd .Caps .ValAttr !=nil {_adaaa :=*rp ._dggdd .Caps .ValAttr ;_bdac .Caps .ValAttr =&_adaaa ;};};if rp ._dggdd .SmallCaps !=nil {_bdac .SmallCaps =&_be .CT_OnOff {};
if rp ._dggdd .SmallCaps .ValAttr !=nil {_bddbe :=*rp ._dggdd .SmallCaps .ValAttr ;_bdac .SmallCaps .ValAttr =&_bddbe ;};};if rp ._dggdd .Strike !=nil {_bdac .Strike =&_be .CT_OnOff {};if rp ._dggdd .Strike .ValAttr !=nil {_faddf :=*rp ._dggdd .Strike .ValAttr ;
_bdac .Strike .ValAttr =&_faddf ;};};if rp ._dggdd .Dstrike !=nil {_bdac .Dstrike =&_be .CT_OnOff {};if rp ._dggdd .Dstrike .ValAttr !=nil {_bagec :=*rp ._dggdd .Dstrike .ValAttr ;_bdac .Dstrike .ValAttr =&_bagec ;};};if rp ._dggdd .Outline !=nil {_bdac .Outline =&_be .CT_OnOff {};
if rp ._dggdd .Outline .ValAttr !=nil {_bgfe :=*rp ._dggdd .Outline .ValAttr ;_bdac .Outline .ValAttr =&_bgfe ;};};if rp ._dggdd .Shadow !=nil {_bdac .Shadow =&_be .CT_OnOff {};if rp ._dggdd .Shadow .ValAttr !=nil {_cdgac :=*rp ._dggdd .Shadow .ValAttr ;
_bdac .Shadow .ValAttr =&_cdgac ;};};if rp ._dggdd .Emboss !=nil {_bdac .Emboss =&_be .CT_OnOff {};if rp ._dggdd .Emboss .ValAttr !=nil {_acada :=*rp ._dggdd .Emboss .ValAttr ;_bdac .Emboss .ValAttr =&_acada ;};};if rp ._dggdd .Imprint !=nil {_bdac .Imprint =&_be .CT_OnOff {};
if rp ._dggdd .Imprint .ValAttr !=nil {_fccd :=*rp ._dggdd .Imprint .ValAttr ;_bdac .Imprint .ValAttr =&_fccd ;};};if rp ._dggdd .NoProof !=nil {_bdac .NoProof =&_be .CT_OnOff {};if rp ._dggdd .NoProof .ValAttr !=nil {_edagga :=*rp ._dggdd .NoProof .ValAttr ;
_bdac .NoProof .ValAttr =&_edagga ;};};if rp ._dggdd .SnapToGrid !=nil {_bdac .SnapToGrid =&_be .CT_OnOff {};if rp ._dggdd .SnapToGrid .ValAttr !=nil {_eebdc :=*rp ._dggdd .SnapToGrid .ValAttr ;_bdac .SnapToGrid .ValAttr =&_eebdc ;};};if rp ._dggdd .Vanish !=nil {_bdac .Vanish =&_be .CT_OnOff {};
if rp ._dggdd .Vanish .ValAttr !=nil {_dbcff :=*rp ._dggdd .Vanish .ValAttr ;_bdac .Vanish .ValAttr =&_dbcff ;};};if rp ._dggdd .WebHidden !=nil {_bdac .WebHidden =&_be .CT_OnOff {};if rp ._dggdd .WebHidden .ValAttr !=nil {_fdacc :=*rp ._dggdd .WebHidden .ValAttr ;
_bdac .WebHidden .ValAttr =&_fdacc ;};};if rp ._dggdd .Color !=nil {_bdac .Color =&_be .CT_Color {ValAttr :rp ._dggdd .Color .ValAttr ,ThemeColorAttr :rp ._dggdd .Color .ThemeColorAttr ,ThemeTintAttr :rp ._dggdd .Color .ThemeTintAttr ,ThemeShadeAttr :rp ._dggdd .Color .ThemeShadeAttr };
};if rp ._dggdd .Spacing !=nil {_bdac .Spacing =&_be .CT_SignedTwipsMeasure {ValAttr :rp ._dggdd .Spacing .ValAttr };};if rp ._dggdd .W !=nil {_bdac .W =&_be .CT_TextScale {ValAttr :rp ._dggdd .W .ValAttr };};if rp ._dggdd .Kern !=nil {_bdac .Kern =&_be .CT_HpsMeasure {ValAttr :rp ._dggdd .Kern .ValAttr };
};if rp ._dggdd .Position !=nil {_bdac .Position =&_be .CT_SignedHpsMeasure {ValAttr :rp ._dggdd .Position .ValAttr };};if rp ._dggdd .Sz !=nil {_bdac .Sz =&_be .CT_HpsMeasure {ValAttr :rp ._dggdd .Sz .ValAttr };};if rp ._dggdd .SzCs !=nil {_bdac .SzCs =&_be .CT_HpsMeasure {ValAttr :rp ._dggdd .SzCs .ValAttr };
};if rp ._dggdd .Highlight !=nil {_bdac .Highlight =&_be .CT_Highlight {ValAttr :rp ._dggdd .Highlight .ValAttr };};if rp ._dggdd .U !=nil {_bdac .U =&_be .CT_Underline {ValAttr :rp ._dggdd .U .ValAttr ,ColorAttr :rp ._dggdd .U .ColorAttr ,ThemeColorAttr :rp ._dggdd .U .ThemeColorAttr ,ThemeTintAttr :rp ._dggdd .U .ThemeTintAttr ,ThemeShadeAttr :rp ._dggdd .U .ThemeShadeAttr };
};if rp ._dggdd .Effect !=nil {_bdac .Effect =&_be .CT_TextEffect {ValAttr :rp ._dggdd .Effect .ValAttr };};if rp ._dggdd .Bdr !=nil {_bdac .Bdr =&_be .CT_Border {ValAttr :rp ._dggdd .Bdr .ValAttr ,ColorAttr :rp ._dggdd .Bdr .ColorAttr ,ThemeColorAttr :rp ._dggdd .Bdr .ThemeColorAttr ,ThemeTintAttr :rp ._dggdd .Bdr .ThemeTintAttr ,ThemeShadeAttr :rp ._dggdd .Bdr .ThemeShadeAttr ,SzAttr :rp ._dggdd .Bdr .SzAttr ,SpaceAttr :rp ._dggdd .Bdr .SpaceAttr ,ShadowAttr :rp ._dggdd .Bdr .ShadowAttr ,FrameAttr :rp ._dggdd .Bdr .FrameAttr };
};if rp ._dggdd .Shd !=nil {_bdac .Shd =&_be .CT_Shd {ValAttr :rp ._dggdd .Shd .ValAttr ,ColorAttr :rp ._dggdd .Shd .ColorAttr ,ThemeColorAttr :rp ._dggdd .Shd .ThemeColorAttr ,ThemeTintAttr :rp ._dggdd .Shd .ThemeTintAttr ,ThemeShadeAttr :rp ._dggdd .Shd .ThemeShadeAttr ,FillAttr :rp ._dggdd .Shd .FillAttr ,ThemeFillAttr :rp ._dggdd .Shd .ThemeFillAttr ,ThemeFillTintAttr :rp ._dggdd .Shd .ThemeFillTintAttr ,ThemeFillShadeAttr :rp ._dggdd .Shd .ThemeFillShadeAttr };
};if rp ._dggdd .FitText !=nil {_bdac .FitText =&_be .CT_FitText {ValAttr :rp ._dggdd .FitText .ValAttr ,IdAttr :rp ._dggdd .FitText .IdAttr };};if rp ._dggdd .VertAlign !=nil {_bdac .VertAlign =&_be .CT_VerticalAlignRun {ValAttr :rp ._dggdd .VertAlign .ValAttr };
};if rp ._dggdd .Rtl !=nil {_bdac .Rtl =&_be .CT_OnOff {ValAttr :rp ._dggdd .Rtl .ValAttr };};if rp ._dggdd .Cs !=nil {_bdac .Cs =&_be .CT_OnOff {ValAttr :rp ._dggdd .Cs .ValAttr };};if rp ._dggdd .Em !=nil {_bdac .Em =&_be .CT_Em {ValAttr :rp ._dggdd .Em .ValAttr };
};if rp ._dggdd .Lang !=nil {_bdac .Lang =&_be .CT_Language {ValAttr :rp ._dggdd .Lang .ValAttr ,EastAsiaAttr :rp ._dggdd .Lang .EastAsiaAttr ,BidiAttr :rp ._dggdd .Lang .BidiAttr };};if rp ._dggdd .EastAsianLayout !=nil {_bdac .EastAsianLayout =&_be .CT_EastAsianLayout {IdAttr :rp ._dggdd .EastAsianLayout .IdAttr ,CombineAttr :rp ._dggdd .EastAsianLayout .CombineAttr ,CombineBracketsAttr :rp ._dggdd .EastAsianLayout .CombineBracketsAttr ,VertAttr :rp ._dggdd .EastAsianLayout .VertAttr ,VertCompressAttr :rp ._dggdd .EastAsianLayout .VertCompressAttr };
};if rp ._dggdd .SpecVanish !=nil {_bdac .SpecVanish =&_be .CT_OnOff {ValAttr :rp ._dggdd .SpecVanish .ValAttr };};if rp ._dggdd .OMath !=nil {_bdac .OMath =&_be .CT_OnOff {ValAttr :rp ._dggdd .OMath .ValAttr };};_adae ._fgad .RPr =_bdac ;};};

// SetLeft sets the left border to a specified type, color and thickness.
func (_ccfad TableBorders )SetLeft (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_ccfad ._ddbeg .Left =_be .NewCT_Border ();_gdff (_ccfad ._ddbeg .Left ,t ,c ,thickness );};func _adga (_bcbe []*_be .CT_P ,_gddf *TableInfo ,_cgff *DrawingInfo )[]TextItem {_edce :=[]TextItem {};
for _ ,_bbfef :=range _bcbe {_edce =append (_edce ,_daae (_bbfef ,nil ,_gddf ,_cgff ,_bbfef .EG_PContent )...);};return _edce ;};

// ComplexSizeValue returns the value of run font size for complex fonts in points.
func (_fbbcb RunProperties )ComplexSizeValue ()float64 {if _fcecc :=_fbbcb ._dggdd .SzCs ;_fcecc !=nil {_cbfbac :=_fcecc .ValAttr ;if _cbfbac .ST_UnsignedDecimalNumber !=nil {return float64 (*_cbfbac .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// RunProperties returns the run properties controlling text formatting within the table.
func (_fdaff TableConditionalFormatting )RunProperties ()RunProperties {if _fdaff ._afbcf .RPr ==nil {_fdaff ._afbcf .RPr =_be .NewCT_RPr ();};return RunProperties {_fdaff ._afbcf .RPr };};

// SetColumnBandSize sets the number of Columns in the column band
func (_beaa TableStyleProperties )SetColumnBandSize (cols int64 ){_beaa ._eeda .TblStyleColBandSize =_be .NewCT_DecimalNumber ();_beaa ._eeda .TblStyleColBandSize .ValAttr =cols ;};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_gdbe TableProperties )SetCellSpacingAuto (){_gdbe ._gdfab .TblCellSpacing =_be .NewCT_TblWidth ();_gdbe ._gdfab .TblCellSpacing .TypeAttr =_be .ST_TblWidthAuto ;};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_geefd RunProperties )ComplexSizeMeasure ()string {if _gfda :=_geefd ._dggdd .SzCs ;_gfda !=nil {_cgba :=_gfda .ValAttr ;if _cgba .ST_PositiveUniversalMeasure !=nil {return *_cgba .ST_PositiveUniversalMeasure ;};};return "";};

// SetName marks sets a name attribute for a FormField.
func (_bage FormField )SetName (name string ){_cdea :=_be .NewCT_FFName ();_cdea .ValAttr =&name ;_bage ._dbgb .FFDataChoice =[]*_be .CT_FFDataChoice {&_be .CT_FFDataChoice {Name :_cdea }};};

// SetFirstLineIndent controls the first line indent of the paragraph.
func (_gcff ParagraphStyleProperties )SetFirstLineIndent (m _ac .Distance ){if _gcff ._gbbb .Ind ==nil {_gcff ._gbbb .Ind =_be .NewCT_Ind ();};if m ==_ac .Zero {_gcff ._gbbb .Ind .FirstLineAttr =nil ;}else {_gcff ._gbbb .Ind .FirstLineAttr =&_gfa .ST_TwipsMeasure {};
_gcff ._gbbb .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (m /_ac .Twips ));};};var _gbfe =[...]uint8 {0,20,37,58,79};

// SetFormat sets the numbering format.
func (_gfbaf NumberingLevel )SetFormat (f _be .ST_NumberFormat ){if _gfbaf ._eabd .NumFmt ==nil {_gfbaf ._eabd .NumFmt =_be .NewCT_NumFmt ();};_gfbaf ._eabd .NumFmt .ValAttr =f ;};

// GetChartSpaceByRelId returns a *crt.ChartSpace with the associated relation ID in the
// document.
func (_aaaga *Document )GetChartSpaceByRelId (relId string )*_db .ChartSpace {_aaca :=_aaaga ._dbe .GetTargetByRelId (relId );for _ ,_gbcg :=range _aaaga ._gbgb {if _aaca ==_gbcg .Target (){return _gbcg ._cdda ;};};return nil ;};

// X returns the inner wml.CT_PBdr
func (_baeec ParagraphBorders )X ()*_be .CT_PBdr {return _baeec ._edfd };

// Themes returns document's themes.
func (_ccdd *Document )Themes ()[]*_fce .Theme {return _ccdd ._acgc };

// TableProperties are the properties for a table within a document
type TableProperties struct{_gdfab *_be .CT_TblPr };

// DoubleStrike returns true if paragraph is double striked.
func (_agfea ParagraphProperties )DoubleStrike ()bool {return _bgba (_agfea ._fbaa .RPr .Dstrike )};

// AddHTML adds HTML text to a run.
func (_gfacc Run )AddHTML (s string ){_bbgf :=_be .NewEG_RunInnerContent ();_gfacc ._fgad .EG_RunInnerContent =append (_gfacc ._fgad .EG_RunInnerContent ,_bbgf );_bbgf .RunInnerContentChoice .T =_be .NewCT_Text ();if _g .NeedsSpacePreserve (s ){_fdgbb :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";
_bbgf .RunInnerContentChoice .T .SpaceAttr =&_fdgbb ;};_dceg :=_gfacc .parseHTMLTag (s );_bbgf .RunInnerContentChoice .T .Content =_dceg ;};func (_accfa *WatermarkPicture )getShape ()*_g .XSDAny {return _accfa .getInnerElement ("\u0073\u0068\u0061p\u0065");
};

// SetHeader sets a section header.
func (_fedf Section )SetHeader (h Header ,t _be .ST_HdrFtr ){_bdfgc :=_be .NewEG_HdrFtrReferences ();_fedf ._cffdd .EG_HdrFtrReferences =append (_fedf ._cffdd .EG_HdrFtrReferences ,_bdfgc );_bdfgc .HdrFtrReferencesChoice .HeaderReference =_be .NewCT_HdrFtrRef ();
_bdfgc .HdrFtrReferencesChoice .HeaderReference .TypeAttr =t ;_fagd :=_fedf ._dfcf ._dbe .FindRIDForN (h .Index (),_g .HeaderType );if _fagd ==""{_ede .Log .Debug ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0068\u0065\u0061\u0064\u0065r \u0049\u0044");
};_bdfgc .HdrFtrReferencesChoice .HeaderReference .IdAttr =_fagd ;};

// AddDrawingAnchored adds an anchored (floating) drawing from an ImageRef.
func (_dcefg Run )AddDrawingAnchored (img _ec .ImageRef )(AnchoredDrawing ,error ){_aedga :=_dcefg .newIC ();_aedga .RunInnerContentChoice .Drawing =_be .NewCT_Drawing ();_addeb :=_be .NewWdAnchor ();_eafgf :=AnchoredDrawing {_dcefg ._cgbdg ,_addeb };_addeb .SimplePosAttr =_g .Bool (false );
_addeb .AllowOverlapAttr =true ;_addeb .CNvGraphicFramePr =_fce .NewCT_NonVisualGraphicFrameProperties ();_aedga .RunInnerContentChoice .Drawing .DrawingChoice =append (_aedga .RunInnerContentChoice .Drawing .DrawingChoice ,&_be .CT_DrawingChoice {Anchor :_addeb });
_addeb .Graphic =_fce .NewGraphic ();_addeb .Graphic .GraphicData =_fce .NewCT_GraphicalObjectData ();_addeb .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";
_addeb .SimplePos .XAttr .ST_CoordinateUnqualified =_g .Int64 (0);_addeb .SimplePos .YAttr .ST_CoordinateUnqualified =_g .Int64 (0);_addeb .PositionH .RelativeFromAttr =_be .WdST_RelFromHPage ;_addeb .PositionH .PosHChoice =&_be .WdCT_PosHChoice {};_addeb .PositionH .PosHChoice .PosOffset =_g .Int32 (0);
_addeb .PositionV .RelativeFromAttr =_be .WdST_RelFromVPage ;_addeb .PositionV .PosVChoice =&_be .WdCT_PosVChoice {};_addeb .PositionV .PosVChoice .PosOffset =_g .Int32 (0);_addeb .Extent .CxAttr =int64 (float64 (img .Size ().X *_ac .Pixel72 )/_ac .EMU );
_addeb .Extent .CyAttr =int64 (float64 (img .Size ().Y *_ac .Pixel72 )/_ac .EMU );_addeb .WrapTypeChoice =&_be .WdEG_WrapTypeChoice {};_addeb .WrapTypeChoice .WrapSquare =_be .NewWdCT_WrapSquare ();_addeb .WrapTypeChoice .WrapSquare .WrapTextAttr =_be .WdST_WrapTextBothSides ;
_acdgd :=0x7FFFFFFF&_c .Uint32 ();_addeb .DocPr .IdAttr =_acdgd ;_edgfd :=_fb .NewPic ();_edgfd .NvPicPr .CNvPr .IdAttr =_acdgd ;_faac :=img .RelID ();if _faac ==""{return _eafgf ,_a .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");
};_addeb .Graphic .GraphicData .Any =append (_addeb .Graphic .GraphicData .Any ,_edgfd );_edgfd .BlipFill =_fce .NewCT_BlipFillProperties ();_edgfd .BlipFill .Blip =_fce .NewCT_Blip ();_edgfd .BlipFill .Blip .EmbedAttr =&_faac ;_edgfd .BlipFill .FillModePropertiesChoice .Stretch =_fce .NewCT_StretchInfoProperties ();
_edgfd .BlipFill .FillModePropertiesChoice .Stretch .FillRect =_fce .NewCT_RelativeRect ();_edgfd .SpPr =_fce .NewCT_ShapeProperties ();_edgfd .SpPr .Xfrm =_fce .NewCT_Transform2D ();_edgfd .SpPr .Xfrm .Off =_fce .NewCT_Point2D ();_edgfd .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_g .Int64 (0);
_edgfd .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_g .Int64 (0);_edgfd .SpPr .Xfrm .Ext =_fce .NewCT_PositiveSize2D ();_edgfd .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_ac .Point );_edgfd .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_ac .Point );
_edgfd .SpPr .GeometryChoice .PrstGeom =_fce .NewCT_PresetGeometry2D ();_edgfd .SpPr .GeometryChoice .PrstGeom .PrstAttr =_fce .ST_ShapeTypeRect ;return _eafgf ,nil ;};

// AddTable adds a table to the footer.
func (_gdadg Footer )AddTable ()Table {_fcebd :=_be .NewEG_ContentBlockContent ();_gdadg ._dgcd .EG_BlockLevelElts =append (_gdadg ._dgcd .EG_BlockLevelElts ,&_be .EG_BlockLevelElts {BlockLevelEltsChoice :&_be .EG_BlockLevelEltsChoice {EG_ContentBlockContent :[]*_be .EG_ContentBlockContent {_fcebd }}});
_affca :=_be .NewCT_Tbl ();_fcebd .ContentBlockContentChoice .Tbl =append (_fcebd .ContentBlockContentChoice .Tbl ,_affca );return Table {_gdadg ._bccb ,_affca };};

// SetTargetBookmark sets the bookmark target of the hyperlink.
func (_fbcd HyperLink )SetTargetBookmark (bm Bookmark ){_fbcd ._caddg .AnchorAttr =_g .String (bm .Name ());_fbcd ._caddg .IdAttr =nil ;};

// X returns the inner wrapped XML type.
func (_fed Bookmark )X ()*_be .CT_Bookmark {return _fed ._bcgf };

// NumId return numbering numId that being use by style properties.
func (_dcgg ParagraphStyleProperties )NumId ()int64 {if _dcgg ._gbbb .NumPr !=nil {if _dcgg ._gbbb .NumPr .NumId !=nil {return _dcgg ._gbbb .NumPr .NumId .ValAttr ;};};return -1;};

// Text return node and its child text,
func (_cdga *Node )Text ()string {_fbbf :=_fc .NewBuffer ([]byte {});switch _fgfdga :=_cdga .X ().(type ){case *Paragraph :for _ ,_dbcd :=range _fgfdga .Runs (){if _dbcd .Text ()!=""{_fbbf .WriteString (_dbcd .Text ());_fbbf .WriteString ("\u000a");};};
};for _ ,_fdac :=range _cdga .Children {_fbbf .WriteString (_fdac .Text ());};return _fbbf .String ();};

// FindNodeByCondition return node based on condition function,
// if wholeElements is true, its will extract children as next node elements.
func (_ggef *Nodes )FindNodeByCondition (f func (_ecbd *Node )bool ,wholeElements bool )[]Node {_edgbg :=[]Node {};for _ ,_ccaa :=range _ggef ._acab {if f (&_ccaa ){_edgbg =append (_edgbg ,_ccaa );};if wholeElements {_gbfeg :=Nodes {_acab :_ccaa .Children };
_edgbg =append (_edgbg ,_gbfeg .FindNodeByCondition (f ,wholeElements )...);};};return _edgbg ;};

// Font returns the name of paragraph font family.
func (_dffba ParagraphProperties )Font ()string {if _gbag :=_dffba ._fbaa .RPr .RFonts ;_gbag !=nil {if _gbag .AsciiAttr !=nil {return *_gbag .AsciiAttr ;}else if _gbag .HAnsiAttr !=nil {return *_gbag .HAnsiAttr ;}else if _gbag .CsAttr !=nil {return *_gbag .CsAttr ;
};};return "";};

// GetColor returns the color.Color object representing the run color.
func (_ddfeg RunProperties )GetColor ()_cb .Color {if _dcad :=_ddfeg ._dggdd .Color ;_dcad !=nil {_dbdfg :=_dcad .ValAttr ;if _dbdfg .ST_HexColorRGB !=nil {return _cb .FromHex (*_dbdfg .ST_HexColorRGB );};};return _cb .Color {};};

// DrawingInfo is used for keep information about a drawing wrapping a textbox where the text is located.
type DrawingInfo struct{Drawing *_be .CT_Drawing ;Width int64 ;Height int64 ;};func _cfedc ()*_bd .Imagedata {_aagb :=_bd .NewImagedata ();_dffdb :="\u0072\u0049\u0064\u0031";_afeg :="\u0057A\u0054\u0045\u0052\u004d\u0041\u0052K";_aagb .IdAttr =&_dffdb ;
_aagb .TitleAttr =&_afeg ;return _aagb ;};

// Clear clears the styes.
func (_dcbee Styles )Clear (){_dcbee ._effe .DocDefaults =nil ;_dcbee ._effe .LatentStyles =nil ;_dcbee ._effe .Style =nil ;};func (_fcegg Endnote )id ()int64 {return _fcegg ._dbda .IdAttr };

// SetTextStyleItalic sets text style of watermark to italic.
func (_ccgae *WatermarkText )SetTextStyleItalic (value bool ){_ggde :=_ccgae .GetStyle ();_ggde .SetItalic (value );_ccgae .SetStyle (_ggde );};func _becgb (_fagb *Document ,_bcbb Paragraph )listItemInfo {if _fagb .Numbering .X ()==nil {return listItemInfo {};
};if len (_fagb .Numbering .Definitions ())< 1{return listItemInfo {};};_ggbcd :=_fdcee (_bcbb );if _ggbcd ==nil {return listItemInfo {};};_gbdb :=_fagb .GetNumberingLevelByIds (_ggbcd .NumId .ValAttr ,_ggbcd .Ilvl .ValAttr );if _fdgb :=_gbdb .X ();_fdgb ==nil {return listItemInfo {};
};_cdab :=int64 (0);for _ ,_baece :=range _fagb .Numbering ._dcaac .Num {if _baece !=nil &&_baece .NumIdAttr ==_ggbcd .NumId .ValAttr {_cdab =_baece .AbstractNumId .ValAttr ;};};return listItemInfo {FromParagraph :&_bcbb ,AbstractNumId :&_cdab ,NumberingLevel :&_gbdb };
};

// Numbering return numbering that being use by paragraph.
func (_cfggf Paragraph )Numbering ()Numbering {_cfggf .ensurePPr ();_bdggb :=NewNumbering ();if _cfggf ._bcaf .PPr .NumPr !=nil {_fgddd :=int64 (-1);_gegaf :=int64 (-1);if _cfggf ._bcaf .PPr .NumPr .NumId !=nil {_fgddd =_cfggf ._bcaf .PPr .NumPr .NumId .ValAttr ;
};for _ ,_dbee :=range _cfggf ._gfabf .Numbering ._dcaac .Num {if _fgddd < 0{break ;};if _dbee .NumIdAttr ==_fgddd {if _dbee .AbstractNumId !=nil {_gegaf =_dbee .AbstractNumId .ValAttr ;_bdggb ._dcaac .Num =append (_bdggb ._dcaac .Num ,_dbee );break ;};
};};for _ ,_gacd :=range _cfggf ._gfabf .Numbering ._dcaac .AbstractNum {if _gegaf < 0{break ;};if _gacd .AbstractNumIdAttr ==_gegaf {_bdggb ._dcaac .AbstractNum =append (_bdggb ._dcaac .AbstractNum ,_gacd );break ;};};};return _bdggb ;};

// GetImageObjByRelId returns a common.Image with the associated relation ID in the
// document.
func (_aaabd *Document )GetImageObjByRelId (relId string )(_ec .Image ,error ){_deeeb :=_aaabd ._dbe .GetTargetByRelIdAndType (relId ,_g .ImageType );if _deeeb ==""{for _ ,_beb :=range _aaabd ._baa {if _deeeb !=""{break ;};_deeeb =_beb .GetTargetByRelIdAndType (relId ,_g .ImageType );
};};if _deeeb ==""{for _ ,_aade :=range _aaabd ._abb {if _deeeb !=""{break ;};_deeeb =_aade .GetTargetByRelIdAndType (relId ,_g .ImageType );};};return _aaabd .DocBase .GetImageBytesByTarget (_deeeb );};

// X returns the inner wrapped type
func (_gcf CellBorders )X ()*_be .CT_TcBorders {return _gcf ._bce };

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_cddg CellBorders )SetBottom (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_cddg ._bce .Bottom =_be .NewCT_Border ();_gdff (_cddg ._bce .Bottom ,t ,c ,thickness );};func (_adeca Paragraph )addInstrText (_eeae string )*_be .CT_Text {_dbdgb :=_adeca .AddRun ();
_cgcbe :=_dbdgb .X ();_bgedg :=_be .NewEG_RunInnerContent ();_ffbgff :=_be .NewCT_Text ();_ecbc :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";_ffbgff .SpaceAttr =&_ecbc ;_ffbgff .Content ="\u0020"+_eeae +"\u0020";_bgedg .RunInnerContentChoice .InstrText =_ffbgff ;
_cgcbe .EG_RunInnerContent =append (_cgcbe .EG_RunInnerContent ,_bgedg );return _ffbgff ;};

// X returns the inner wrapped XML type.
func (_cafg Header )X ()*_be .Hdr {return _cafg ._gbeec };

// SetTextWrapTopAndBottom sets the text wrap to top and bottom.
func (_dcf AnchoredDrawing )SetTextWrapTopAndBottom (){_dcf ._cg .WrapTypeChoice =&_be .WdEG_WrapTypeChoice {};_dcf ._cg .WrapTypeChoice .WrapTopAndBottom =_be .NewWdCT_WrapTopBottom ();_dcf ._cg .LayoutInCellAttr =true ;_dcf ._cg .AllowOverlapAttr =true ;
};

// X returns the inner wrapped XML type.
func (_faga *Document )X ()*_be .Document {return _faga ._cgb };

// HasComments checks if the document contains comments.
func (_dbecc *Document )HasComments ()bool {return _dbecc ._ecff !=nil };

// PossibleValues returns the possible values for a FormFieldTypeDropDown.
func (_fbbdc FormField )PossibleValues ()[]string {if _fbbdc ._dbgb .FFDataChoice ==nil ||len (_fbbdc ._dbgb .FFDataChoice )==0||_fbbdc ._dbgb .FFDataChoice [0].DdList ==nil {return nil ;};_gfcg :=[]string {};for _ ,_bgcab :=range _fbbdc ._dbgb .FFDataChoice [0].DdList .ListEntry {if _bgcab ==nil {continue ;
};_gfcg =append (_gfcg ,_bgcab .ValAttr );};return _gfcg ;};

// Text returns the underlying text in the run.
func (_baac Run )Text ()string {if len (_baac ._fgad .EG_RunInnerContent )==0{return "";};_aabg :=_fc .Buffer {};for _ ,_bcdd :=range _baac ._fgad .EG_RunInnerContent {if _bcdd .RunInnerContentChoice .T !=nil {_aabg .WriteString (_bcdd .RunInnerContentChoice .T .Content );
};if _bcdd .RunInnerContentChoice .Tab !=nil {_aabg .WriteByte ('\t');};};return _aabg .String ();};

// AddRow adds a row to a table.
func (_bcea Table )AddRow ()Row {_bedaf :=_be .NewEG_ContentRowContent ();_bcea ._dbgfc .EG_ContentRowContent =append (_bcea ._dbgfc .EG_ContentRowContent ,_bedaf );_caaad :=_be .NewCT_Row ();_bedaf .ContentRowContentChoice .Tr =append (_bedaf .ContentRowContentChoice .Tr ,_caaad );
return Row {_bcea ._bbbfef ,_caaad };};

// SetStartIndent controls the start indentation.
func (_ecca ParagraphProperties )SetStartIndent (m _ac .Distance ){if _ecca ._fbaa .Ind ==nil {_ecca ._fbaa .Ind =_be .NewCT_Ind ();};if m ==_ac .Zero {_ecca ._fbaa .Ind .StartAttr =nil ;}else {_ecca ._fbaa .Ind .StartAttr =&_be .ST_SignedTwipsMeasure {};
_ecca ._fbaa .Ind .StartAttr .Int64 =_g .Int64 (int64 (m /_ac .Twips ));};};

// // SetBeforeLineSpacing sets spacing above paragraph in line units.
func (_gddcg Paragraph )SetBeforeLineSpacing (d _ac .Distance ){_gddcg .ensurePPr ();if _gddcg ._bcaf .PPr .Spacing ==nil {_gddcg ._bcaf .PPr .Spacing =_be .NewCT_Spacing ();};_fdced :=_gddcg ._bcaf .PPr .Spacing ;_fdced .BeforeLinesAttr =_g .Int64 (int64 (d /_ac .Twips ));
};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_fgced RunProperties )RStyle ()string {if _fgced ._dggdd .RStyle !=nil {return _fgced ._dggdd .RStyle .ValAttr ;};return "";};func _faggg ()*_bd .Textpath {_bgdbd :=_bd .NewTextpath ();_becc :="\u0066\u006f\u006e\u0074\u002d\u0066\u0061\u006d\u0069l\u0079\u003a\u0022\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0022\u003b\u0066\u006f\u006e\u0074\u002d\u0073\u0069\u007a\u0065\u003a\u00366\u0070\u0074;\u0066\u006fn\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074\u003a\u0062\u006f\u006c\u0064;f\u006f\u006e\u0074\u002d\u0073\u0074\u0079\u006c\u0065:\u0069\u0074\u0061\u006c\u0069\u0063";
_bgdbd .StyleAttr =&_becc ;_gafgd :="\u0041\u0053\u0041\u0050";_bgdbd .StringAttr =&_gafgd ;_bgdbd .FitshapeAttr =_gfa .ST_TrueFalseT ;return _bgdbd ;};

// SetHorizontalBanding controls the conditional formatting for horizontal banding.
func (_adgae TableLook )SetHorizontalBanding (on bool ){if !on {_adgae ._gfded .NoHBandAttr =&_gfa .ST_OnOff {};_adgae ._gfded .NoHBandAttr .ST_OnOff1 =_gfa .ST_OnOff1On ;}else {_adgae ._gfded .NoHBandAttr =&_gfa .ST_OnOff {};_adgae ._gfded .NoHBandAttr .ST_OnOff1 =_gfa .ST_OnOff1Off ;
};};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_gfbca ParagraphProperties )SetKeepOnOnePage (b bool ){if !b {_gfbca ._fbaa .KeepLines =nil ;}else {_gfbca ._fbaa .KeepLines =_be .NewCT_OnOff ();};};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_cbfa TableBorders )SetInsideHorizontal (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_cbfa ._ddbeg .InsideH =_be .NewCT_Border ();_gdff (_cbfa ._ddbeg .InsideH ,t ,c ,thickness );};

// Shadow returns true if paragraph shadow is on.
func (_eecb ParagraphProperties )Shadow ()bool {return _bgba (_eecb ._fbaa .RPr .Shadow )};

// SetXOffset sets the X offset for an image relative to the origin.
func (_edg AnchoredDrawing )SetXOffset (x _ac .Distance ){_edg ._cg .PositionH .PosHChoice =&_be .WdCT_PosHChoice {};_edg ._cg .PositionH .PosHChoice .PosOffset =_g .Int32 (int32 (x /_ac .EMU ));};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_fbbae ParagraphProperties )SizeMeasure ()string {if _afeff :=_fbbae ._fbaa .RPr .Sz ;_afeff !=nil {_ffce :=_afeff .ValAttr ;if _ffce .ST_PositiveUniversalMeasure !=nil {return *_ffce .ST_PositiveUniversalMeasure ;};};return "";};func _aaccd ()*_bd .Formulas {_edgeg :=_bd .NewFormulas ();
_edgeg .F =[]*_bd .CT_F {_fa .CreateFormula ("\u0069\u0066 \u006c\u0069\u006e\u0065\u0044\u0072\u0061\u0077\u006e\u0020\u0070\u0069\u0078\u0065\u006c\u004c\u0069\u006e\u0065\u0057\u0069\u0064th\u0020\u0030"),_fa .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0030\u0020\u0031\u0020\u0030"),_fa .CreateFormula ("\u0073\u0075\u006d\u0020\u0030\u0020\u0030\u0020\u0040\u0031"),_fa .CreateFormula ("p\u0072\u006f\u0064\u0020\u0040\u0032\u0020\u0031\u0020\u0032"),_fa .CreateFormula ("\u0070r\u006f\u0064\u0020\u0040\u0033\u0020\u0032\u0031\u0036\u0030\u0030 \u0070\u0069\u0078\u0065\u006c\u0057\u0069\u0064\u0074\u0068"),_fa .CreateFormula ("\u0070r\u006f\u0064\u0020\u00403\u0020\u0032\u0031\u0036\u00300\u0020p\u0069x\u0065\u006c\u0048\u0065\u0069\u0067\u0068t"),_fa .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0030\u0020\u0030\u0020\u0031"),_fa .CreateFormula ("p\u0072\u006f\u0064\u0020\u0040\u0036\u0020\u0031\u0020\u0032"),_fa .CreateFormula ("\u0070r\u006f\u0064\u0020\u0040\u0037\u0020\u0032\u0031\u0036\u0030\u0030 \u0070\u0069\u0078\u0065\u006c\u0057\u0069\u0064\u0074\u0068"),_fa .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0038\u0020\u0032\u00316\u0030\u0030\u0020\u0030"),_fa .CreateFormula ("\u0070r\u006f\u0064\u0020\u00407\u0020\u0032\u0031\u0036\u00300\u0020p\u0069x\u0065\u006c\u0048\u0065\u0069\u0067\u0068t"),_fa .CreateFormula ("\u0073u\u006d \u0040\u0031\u0030\u0020\u0032\u0031\u0036\u0030\u0030\u0020\u0030")};
return _edgeg ;};

// AddBreak adds a line break to a run.
func (_aebf Run )AddBreak (){_bfdbb :=_aebf .newIC ();_bfdbb .RunInnerContentChoice .Br =_be .NewCT_Br ();};

// SetUpdateFieldsOnOpen controls if fields are recalculated upon opening the
// document. This is useful for things like a table of contents as the library
// only adds the field code and relies on Word/LibreOffice to actually compute
// the content.
func (_gdbcd Settings )SetUpdateFieldsOnOpen (b bool ){if !b {_gdbcd ._cedc .UpdateFields =nil ;}else {_gdbcd ._cedc .UpdateFields =_be .NewCT_OnOff ();};};func (_bde *Document )InsertTableAfter (relativeTo Paragraph )Table {return _bde .insertTable (relativeTo ,false );
};

// Validate validates the structure and in cases where it't possible, the ranges
// of elements within a document. A validation error dones't mean that the
// document won't work in MS Word or LibreOffice, but it's worth checking into.
func (_ecg *Document )Validate ()error {if _ecg ==nil ||_ecg ._cgb ==nil {return _a .New ("\u0064o\u0063\u0075m\u0065\u006e\u0074\u0020n\u006f\u0074\u0020i\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0065d \u0063\u006f\u0072r\u0065\u0063t\u006c\u0079\u002c\u0020\u006e\u0069l\u0020\u0062a\u0073\u0065");
};for _ ,_gdfb :=range []func ()error {_ecg .validateTableCells ,_ecg .validateBookmarks }{if _bbaf :=_gdfb ();_bbaf !=nil {return _bbaf ;};};if _dfbf :=_ecg ._cgb .Validate ();_dfbf !=nil {return _dfbf ;};return nil ;};func _efe (_cfcc *_be .CT_TblWidth ,_agd float64 ){_cfcc .TypeAttr =_be .ST_TblWidthPct ;
_cfcc .WAttr =&_be .ST_MeasurementOrPercent {};_cfcc .WAttr .ST_DecimalNumberOrPercent =&_be .ST_DecimalNumberOrPercent {};_cfcc .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (_agd *50));};

// SetChecked marks a FormFieldTypeCheckBox as checked or unchecked.
func (_dccdf FormField )SetChecked (b bool ){if _dccdf ._dbgb .FFDataChoice ==nil ||len (_dccdf ._dbgb .FFDataChoice )==0||_dccdf ._dbgb .FFDataChoice [0].CheckBox ==nil {return ;};if !b {_dccdf ._dbgb .FFDataChoice [0].CheckBox .Checked =nil ;}else {_dccdf ._dbgb .FFDataChoice [0].CheckBox .Checked =_be .NewCT_OnOff ();
};};

// Footers returns the footers defined in the document.
func (_adc *Document )Footers ()[]Footer {_gff :=[]Footer {};for _ ,_gdaa :=range _adc ._ccg {_gff =append (_gff ,Footer {_adc ,_gdaa });};return _gff ;};

// SearchStyleByName return style by its name.
func (_deffg Styles )SearchStyleByName (name string )(Style ,bool ){for _ ,_fcddc :=range _deffg ._effe .Style {if _fcddc .Name !=nil {if _fcddc .Name .ValAttr ==name {return Style {_fcddc },true ;};};};return Style {},false ;};

// SetPageBreakBefore controls if there is a page break before this paragraph.
func (_ebace ParagraphProperties )SetPageBreakBefore (b bool ){if !b {_ebace ._fbaa .PageBreakBefore =nil ;}else {_ebace ._fbaa .PageBreakBefore =_be .NewCT_OnOff ();};};

// SetHangingIndent controls special indent of paragraph.
func (_cgec Paragraph )SetHangingIndent (m _ac .Distance ){_cgec .ensurePPr ();_ddefe :=_cgec ._bcaf .PPr ;if _ddefe .Ind ==nil {_ddefe .Ind =_be .NewCT_Ind ();};if m ==_ac .Zero {_ddefe .Ind .HangingAttr =nil ;}else {_ddefe .Ind .HangingAttr =&_gfa .ST_TwipsMeasure {};
_ddefe .Ind .HangingAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (m /_ac .Twips ));};};

// SetWidthPercent sets the table to a width percentage.
func (_bbbfg TableProperties )SetWidthPercent (pct float64 ){_bbbfg ._gdfab .TblW =_be .NewCT_TblWidth ();_bbbfg ._gdfab .TblW .TypeAttr =_be .ST_TblWidthPct ;_bbbfg ._gdfab .TblW .WAttr =&_be .ST_MeasurementOrPercent {};_bbbfg ._gdfab .TblW .WAttr .ST_DecimalNumberOrPercent =&_be .ST_DecimalNumberOrPercent {};
_bbbfg ._gdfab .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (pct *50));};

// BodySection returns the default body section used for all preceding
// paragraphs until the previous Section. If there is no previous sections, the
// body section applies to the entire document.
func (_fede *Document )BodySection ()Section {if _fede ._cgb .Body .SectPr ==nil {_fede ._cgb .Body .SectPr =_be .NewCT_SectPr ();};return Section {_fede ,_fede ._cgb .Body .SectPr };};

// X returns the inner wrapped XML type.
func (_dcadg Styles )X ()*_be .Styles {return _dcadg ._effe };

// RemoveTable remove table element from document.
func (_bdda *Document )RemoveTable (tbl Table ){if _bdda ._cgb .Body ==nil {return ;};for _ ,_gbgbg :=range _bdda ._cgb .Body .EG_BlockLevelElts {for _ ,_acce :=range _gbgbg .BlockLevelEltsChoice .EG_ContentBlockContent {for _deee ,_eagae :=range _acce .ContentBlockContentChoice .Tbl {if _eagae ==tbl ._dbgfc {copy (_acce .ContentBlockContentChoice .Tbl [_deee :],_acce .ContentBlockContentChoice .Tbl [_deee +1:]);
_acce .ContentBlockContentChoice .Tbl =_acce .ContentBlockContentChoice .Tbl [0:len (_acce .ContentBlockContentChoice .Tbl )-1];return ;};};if _acce .ContentBlockContentChoice .Sdt !=nil &&_acce .ContentBlockContentChoice .Sdt .SdtContent !=nil {for _ ,_bdea :=range _acce .ContentBlockContentChoice .Sdt .SdtContent .EG_ContentBlockContent {if _bdea .ContentBlockContentChoice .P !=nil {for _ddeff ,_eff :=range _bdea .ContentBlockContentChoice .Tbl {if _eff ==tbl ._dbgfc {copy (_acce .ContentBlockContentChoice .Tbl [_ddeff :],_acce .ContentBlockContentChoice .Tbl [_ddeff +1:]);
_acce .ContentBlockContentChoice .Tbl =_acce .ContentBlockContentChoice .Tbl [0:len (_acce .ContentBlockContentChoice .Tbl )-1];return ;};};};};};};};};

// Append appends a document d0 to a document d1. All settings, headers and footers remain the same as in the document d0 if they exist there, otherwise they are taken from the d1.
func (_gbfc *Document )Append (d1orig *Document )error {_gbee ,_fcdd :=d1orig .Copy ();if _fcdd !=nil {return _fcdd ;};_gbfc .DocBase =_gbfc .DocBase .Append (_gbee .DocBase );if _gbee ._cgb .ConformanceAttr !=_gfa .ST_ConformanceClassStrict {_gbfc ._cgb .ConformanceAttr =_gbee ._cgb .ConformanceAttr ;
};_fffdg :=_gbfc ._dbe .X ().Relationship ;_dgae :=_gbee ._dbe .X ().Relationship ;_afgd :=_gbee ._cgb .Body ;_becg :=map[string ]string {};_eafge :=map[int64 ]int64 {};_cagg :=map[int64 ]int64 {};for _ ,_bfbac :=range _dgae {_fccc :=true ;_dcfc :=_bfbac .IdAttr ;
_aedd :=_bfbac .TargetAttr ;_dgea :=_bfbac .TypeAttr ;_baca :=_dgea ==_g .ImageType ;_fgfdg :=_dgea ==_g .HyperLinkType ;var _cada string ;for _ ,_ebgg :=range _fffdg {if _ebgg .TypeAttr ==_dgea &&_ebgg .TargetAttr ==_aedd {_fccc =false ;_cada =_ebgg .IdAttr ;
break ;};};if _baca {_gbde :="\u0077\u006f\u0072d\u002f"+_aedd ;for _ ,_ebac :=range _gbee .DocBase .Images {if _ebac .Target ()==_gbde {_bcfbb ,_adca :=_ec .ImageFromStorage (_ebac .Path ());if _adca !=nil {return _adca ;};_dfgg ,_adca :=_gbfc .AddImage (_bcfbb );
if _adca !=nil {return _adca ;};_cada =_dfgg .RelID ();break ;};};}else if _fccc {if _fgfdg {_eee :=_gbfc ._dbe .AddHyperlink (_aedd );_cada =_ec .Relationship (_eee ).ID ();}else {_aacca :=_gbfc ._dbe .AddRelationship (_aedd ,_dgea );_cada =_aacca .X ().IdAttr ;
};};if _dcfc !=_cada {_becg [_dcfc ]=_cada ;};};if _afgd .SectPr !=nil {for _ ,_dffc :=range _afgd .SectPr .EG_HdrFtrReferences {if _dffc .HdrFtrReferencesChoice .HeaderReference !=nil {if _gedc ,_cegd :=_becg [_dffc .HdrFtrReferencesChoice .HeaderReference .IdAttr ];
_cegd {_dffc .HdrFtrReferencesChoice .HeaderReference .IdAttr =_gedc ;_gbfc ._baa =append (_gbfc ._baa ,_ec .NewRelationships ());};}else if _dffc .HdrFtrReferencesChoice .FooterReference !=nil {if _fafe ,_gffc :=_becg [_dffc .HdrFtrReferencesChoice .FooterReference .IdAttr ];
_gffc {_dffc .HdrFtrReferencesChoice .FooterReference .IdAttr =_fafe ;_gbfc ._abb =append (_gbfc ._abb ,_ec .NewRelationships ());};};};};_cgf ,_eecc :=_gbfc ._dbc ,_gbee ._dbc ;if _cgf !=nil {if _eecc !=nil {if _cgf .Endnote !=nil {if _eecc .Endnote !=nil {_adce :=int64 (len (_cgf .Endnote )+1);
for _ ,_eagf :=range _eecc .Endnote {_dggdg :=_eagf .IdAttr ;if _dggdg > 0{_eagf .IdAttr =_adce ;_cgf .Endnote =append (_cgf .Endnote ,_eagf );_cagg [_dggdg ]=_adce ;_adce ++;};};};}else {_cgf .Endnote =_eecc .Endnote ;};};}else if _eecc !=nil {_cgf =_eecc ;
};_gbfc ._dbc =_cgf ;_adfc ,_fbad :=_gbfc ._edf ,_gbee ._edf ;if _adfc !=nil {if _fbad !=nil {if _adfc .Footnote !=nil {if _fbad .Footnote !=nil {_bgge :=int64 (len (_adfc .Footnote )+1);for _ ,_edb :=range _fbad .Footnote {_cdbc :=_edb .IdAttr ;if _cdbc > 0{_edb .IdAttr =_bgge ;
_adfc .Footnote =append (_adfc .Footnote ,_edb );_eafge [_cdbc ]=_bgge ;_bgge ++;};};};}else {_adfc .Footnote =_fbad .Footnote ;};};}else if _fbad !=nil {_adfc =_fbad ;};_gbfc ._edf =_adfc ;for _ ,_aaea :=range _afgd .EG_BlockLevelElts {for _ ,_dagbe :=range _aaea .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_bddf :=range _dagbe .ContentBlockContentChoice .P {_gbea (_bddf ,_becg );
_gdec (_bddf ,_becg );_febb (_bddf ,_eafge ,_cagg );};for _ ,_efgb :=range _dagbe .ContentBlockContentChoice .Tbl {_cfec (_efgb ,_becg );_fdfbf (_efgb ,_becg );_gdce (_efgb ,_eafge ,_cagg );};};};_gbfc ._cgb .Body .EG_BlockLevelElts =append (_gbfc ._cgb .Body .EG_BlockLevelElts ,_gbee ._cgb .Body .EG_BlockLevelElts ...);
if _gbfc ._cgb .Body .SectPr ==nil {_gbfc ._cgb .Body .SectPr =_gbee ._cgb .Body .SectPr ;}else {var _bffg ,_cege bool ;for _ ,_bagb :=range _gbfc ._cgb .Body .SectPr .EG_HdrFtrReferences {if _bagb .HdrFtrReferencesChoice .HeaderReference !=nil {_bffg =true ;
}else if _bagb .HdrFtrReferencesChoice .FooterReference !=nil {_cege =true ;};};if !_bffg {for _ ,_cafa :=range _gbee ._cgb .Body .SectPr .EG_HdrFtrReferences {if _cafa .HdrFtrReferencesChoice .HeaderReference !=nil {_gbfc ._cgb .Body .SectPr .EG_HdrFtrReferences =append (_gbfc ._cgb .Body .SectPr .EG_HdrFtrReferences ,_cafa );
break ;};};};if !_cege {for _ ,_fbcf :=range _gbee ._cgb .Body .SectPr .EG_HdrFtrReferences {if _fbcf .HdrFtrReferencesChoice .FooterReference !=nil {_gbfc ._cgb .Body .SectPr .EG_HdrFtrReferences =append (_gbfc ._cgb .Body .SectPr .EG_HdrFtrReferences ,_fbcf );
break ;};};};if _gbfc ._cgb .Body .SectPr .Cols ==nil &&_gbee ._cgb .Body .SectPr .Cols !=nil {_gbfc ._cgb .Body .SectPr .Cols =_gbee ._cgb .Body .SectPr .Cols ;};};_gbded :=_gbfc .Numbering ._dcaac ;_aggfa :=_gbee .Numbering ._dcaac ;if _gbded ==nil &&_aggfa !=nil {_gbded =_aggfa ;
};_gbfc .Numbering ._dcaac =_gbded ;if _gbfc .Styles ._effe ==nil &&_gbee .Styles ._effe !=nil {_gbfc .Styles ._effe =_gbee .Styles ._effe ;};_gbfc ._acgc =append (_gbfc ._acgc ,_gbee ._acgc ...);_gbfc ._bdg =append (_gbfc ._bdg ,_gbee ._bdg ...);if len (_gbfc ._egc )==0{_gbfc ._egc =_gbee ._egc ;
};if len (_gbfc ._ccg )==0{_gbfc ._ccg =_gbee ._ccg ;};_dfea :=_gbfc ._gdab ;_aaag :=_gbee ._gdab ;if _dfea !=nil {if _aaag !=nil {if _dfea .Divs !=nil {if _aaag .Divs !=nil {_dfea .Divs .Div =append (_dfea .Divs .Div ,_aaag .Divs .Div ...);};}else {_dfea .Divs =_aaag .Divs ;
};};_dfea .Frameset =nil ;}else if _aaag !=nil {_dfea =_aaag ;_dfea .Frameset =nil ;};_gbfc ._gdab =_dfea ;_fffcf :=_gbfc ._gaa ;_acbg :=_gbee ._gaa ;if _fffcf !=nil {if _acbg !=nil {if _fffcf .Font !=nil {if _acbg .Font !=nil {for _ ,_abebd :=range _acbg .Font {_cefb :=true ;
for _ ,_dfaf :=range _fffcf .Font {if _dfaf .NameAttr ==_abebd .NameAttr {_cefb =false ;break ;};};if _cefb {_fffcf .Font =append (_fffcf .Font ,_abebd );};};};}else {_fffcf .Font =_acbg .Font ;};};}else if _acbg !=nil {_fffcf =_acbg ;};_gbfc ._gaa =_fffcf ;
return nil ;};

// WatermarkPicture is watermark picture within document.
type WatermarkPicture struct{_bcaag *_be .CT_Picture ;_gbdg *_fa .ShapeStyle ;_egfee *_bd .Shape ;_ggeff *_bd .Shapetype ;};

// SizeValue returns the value of run font size in points.
func (_dbcfd RunProperties )SizeValue ()float64 {if _abgb :=_dbcfd ._dggdd .Sz ;_abgb !=nil {_gddbd :=_abgb .ValAttr ;if _gddbd .ST_UnsignedDecimalNumber !=nil {return float64 (*_gddbd .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetValue sets the width value.
func (_bcagc TableWidth )SetValue (m _ac .Distance ){_bcagc ._gade .WAttr =&_be .ST_MeasurementOrPercent {};_bcagc ._gade .WAttr .ST_DecimalNumberOrPercent =&_be .ST_DecimalNumberOrPercent {};_bcagc ._gade .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (m /_ac .Twips ));
_bcagc ._gade .TypeAttr =_be .ST_TblWidthDxa ;};

// StyleID returns the style ID.
func (_abef Style )StyleID ()string {if _abef ._gegdgf .StyleIdAttr ==nil {return "";};return *_abef ._gegdgf .StyleIdAttr ;};

// SetStartIndent controls the start indent of the paragraph.
func (_eabb ParagraphStyleProperties )SetStartIndent (m _ac .Distance ){if _eabb ._gbbb .Ind ==nil {_eabb ._gbbb .Ind =_be .NewCT_Ind ();};if m ==_ac .Zero {_eabb ._gbbb .Ind .StartAttr =nil ;}else {_eabb ._gbbb .Ind .StartAttr =&_be .ST_SignedTwipsMeasure {};
_eabb ._gbbb .Ind .StartAttr .Int64 =_g .Int64 (int64 (m /_ac .Twips ));};};

// NewAnchorDrawWrapOptions return anchor drawing options property.
func NewAnchorDrawWrapOptions ()*AnchorDrawWrapOptions {_ebf :=&AnchorDrawWrapOptions {};if !_ebf ._efg {_cce ,_eab :=_adf ();_ebf ._ega =_cce ;_ebf ._eea =_eab ;};return _ebf ;};

// InsertParagraphAfter adds a new empty paragraph after the relativeTo
// paragraph.
func (_eggf *Document )InsertParagraphAfter (relativeTo Paragraph )Paragraph {return _eggf .insertParagraph (relativeTo ,false );};var (FootnoteTextStyleId ="\u0046\u006f\u006ft\u006e\u006f\u0074\u0065\u0054\u0065\u0078\u0074";_dbca ="\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0052\u0065\u0066\u0065r\u0065\u006e\u0063\u0065";
EndnoteTextStyleId ="E\u006e\u0064\u006e\u006f\u0074\u0065\u0054\u0065\u0078\u0074";_gac ="\u0045\u006ed\u006e\u006f\u0074e\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065";_gfab =uint64 (20);_agf ="\u0043\u006fm\u006d\u0065\u006et\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065";
_bdge ="C\u006f\u006d\u006d\u0065\u006e\u0074\u0054\u0065\u0078\u0074";_gebc ="\u0043o\u006dm\u0065\u006e\u0074\u0054\u0065\u0078\u0074\u0043\u0068\u0061\u0072";_fgd ="\u0043\u006f\u006d\u006d\u0065\u006e\u0074\u0053\u0075b\u006a\u0065\u0063\u0074";_gfaa ="\u0043o\u006dm\u0065\u006e\u0074\u0053\u0075b\u006a\u0065c\u0074\u0043\u0068\u0061\u0072";
_dagb =uint64 (20);_fbb =uint64 (16););

// SetKerning sets the run's font kerning.
func (_cffg RunProperties )SetKerning (size _ac .Distance ){_cffg ._dggdd .Kern =_be .NewCT_HpsMeasure ();_cffg ._dggdd .Kern .ValAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (size /_ac .HalfPoint ));};

// SetSize sets the size of the displayed image on the page.
func (_dbbc InlineDrawing )SetSize (w ,h _ac .Distance ){_dbbc ._adec .Extent .CxAttr =int64 (float64 (w *_ac .Pixel72 )/_ac .EMU );_dbbc ._adec .Extent .CyAttr =int64 (float64 (h *_ac .Pixel72 )/_ac .EMU );};

// SetASCIITheme sets the font ASCII Theme.
func (_bdgab Fonts )SetASCIITheme (t _be .ST_Theme ){_bdgab ._ggdb .AsciiThemeAttr =t };func (_gdge *Document )validateTableCells ()error {for _ ,_cbae :=range _gdge ._cgb .Body .EG_BlockLevelElts {for _ ,_bad :=range _cbae .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_cddb :=range _bad .ContentBlockContentChoice .Tbl {for _ ,_adbc :=range _cddb .EG_ContentRowContent {for _ ,_deccb :=range _adbc .ContentRowContentChoice .Tr {_caad :=false ;
for _ ,_baee :=range _deccb .EG_ContentCellContent {_dgf :=false ;for _ ,_cgcb :=range _baee .ContentCellContentChoice .Tc {_caad =true ;for _ ,_daeag :=range _cgcb .EG_BlockLevelElts {for _ ,_ggba :=range _daeag .BlockLevelEltsChoice .EG_ContentBlockContent {if len (_ggba .ContentBlockContentChoice .P )> 0{_dgf =true ;
break ;};};};};if !_dgf {return _a .New ("t\u0061\u0062\u006c\u0065\u0020\u0063e\u006c\u006c\u0020\u006d\u0075\u0073t\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0061\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061p\u0068");};};if !_caad {return _a .New ("\u0074\u0061b\u006c\u0065\u0020\u0072\u006f\u0077\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020ce\u006c\u006c");
};};};};};};return nil ;};

// AddStyle adds a new empty style, if styleID is already exists, it will return the style.
func (_dgbf Styles )AddStyle (styleID string ,t _be .ST_StyleType ,isDefault bool )Style {if _bbecfe ,_aabbe :=_dgbf .SearchStyleById (styleID );_aabbe {return _bbecfe ;};_fbfdbc :=_be .NewCT_Style ();_fbfdbc .TypeAttr =t ;if isDefault {_fbfdbc .DefaultAttr =&_gfa .ST_OnOff {};
_fbfdbc .DefaultAttr .Bool =_g .Bool (isDefault );};_fbfdbc .StyleIdAttr =_g .String (styleID );_dgbf ._effe .Style =append (_dgbf ._effe .Style ,_fbfdbc );return Style {_fbfdbc };};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_dgcg TableStyleProperties )SetCellSpacingAuto (){_dgcg ._eeda .TblCellSpacing =_be .NewCT_TblWidth ();_dgcg ._eeda .TblCellSpacing .TypeAttr =_be .ST_TblWidthAuto ;};

// SetSemiHidden controls if the style is hidden in the UI.
func (_cafad Style )SetSemiHidden (b bool ){if b {_cafad ._gegdgf .SemiHidden =_be .NewCT_OnOff ();}else {_cafad ._gegdgf .SemiHidden =nil ;};};func (_bdgb *Document )insertNumberingFromStyleProperties (_dadda Numbering ,_cbfdb ParagraphStyleProperties ){_efeba :=_cbfdb .NumId ();
_fegcb :=int64 (-1);if _efeba > -1{for _ ,_aedg :=range _dadda ._dcaac .Num {if _aedg .NumIdAttr ==_efeba {if _aedg .AbstractNumId !=nil {_fegcb =_aedg .AbstractNumId .ValAttr ;_cbea :=false ;for _ ,_cfbff :=range _bdgb .Numbering ._dcaac .Num {if _cfbff .NumIdAttr ==_efeba {_cbea =true ;
break ;};};if !_cbea {_bdgb .Numbering ._dcaac .Num =append (_bdgb .Numbering ._dcaac .Num ,_aedg );};break ;};};};for _ ,_dgecc :=range _dadda ._dcaac .AbstractNum {if _dgecc .AbstractNumIdAttr ==_fegcb {_ebgc :=false ;for _ ,_fcec :=range _bdgb .Numbering ._dcaac .AbstractNum {if _fcec .AbstractNumIdAttr ==_fegcb {_ebgc =true ;
break ;};};if !_ebgc {_bdgb .Numbering ._dcaac .AbstractNum =append (_bdgb .Numbering ._dcaac .AbstractNum ,_dgecc );};break ;};};};};

// AddWatermarkText adds new watermark text to the document.
func (_fcca *Document )AddWatermarkText (text string )WatermarkText {var _fgce []Header ;if _aefgga ,_bbbb :=_fcca .BodySection ().GetHeader (_be .ST_HdrFtrDefault );_bbbb {_fgce =append (_fgce ,_aefgga );};if _aafe ,_bdfc :=_fcca .BodySection ().GetHeader (_be .ST_HdrFtrEven );
_bdfc {_fgce =append (_fgce ,_aafe );};if _eedg ,_affc :=_fcca .BodySection ().GetHeader (_be .ST_HdrFtrFirst );_affc {_fgce =append (_fgce ,_eedg );};if len (_fgce )< 1{_cebb :=_fcca .AddHeader ();_fcca .BodySection ().SetHeader (_cebb ,_be .ST_HdrFtrDefault );
_fgce =append (_fgce ,_cebb );};_dcea :=NewWatermarkText ();for _ ,_acbd :=range _fgce {_ccgc :=_acbd .Paragraphs ();if len (_ccgc )< 1{_ggfd :=_acbd .AddParagraph ();_ggfd .AddRun ().AddText ("");};for _ ,_gafe :=range _acbd .X ().EG_BlockLevelElts {for _ ,_aebg :=range _gafe .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_ccge :=range _aebg .ContentBlockContentChoice .P {for _ ,_ebad :=range _ccge .EG_PContent {for _ ,_deb :=range _ebad .PContentChoice .EG_ContentRunContent {if _deb .ContentRunContentChoice .R ==nil {continue ;
};_deb .ContentRunContentChoice .R .EG_RunInnerContent =append (_deb .ContentRunContentChoice .R .EG_RunInnerContent ,&_be .EG_RunInnerContent {RunInnerContentChoice :&_be .EG_RunInnerContentChoice {Pict :_dcea ._eedac }});};};};};};};_dcea .SetText (text );
return _dcea ;};

// AddParagraph adds a new paragraph to the document body.
func (_daad *Document )AddParagraph ()Paragraph {_bcec :=_be .NewEG_BlockLevelElts ();_daad ._cgb .Body .EG_BlockLevelElts =append (_daad ._cgb .Body .EG_BlockLevelElts ,_bcec );_ccfba :=_be .NewEG_ContentBlockContent ();_bcec .BlockLevelEltsChoice .EG_ContentBlockContent =append (_bcec .BlockLevelEltsChoice .EG_ContentBlockContent ,_ccfba );
_cccg :=_be .NewCT_P ();_ccfba .ContentBlockContentChoice .P =append (_ccfba .ContentBlockContentChoice .P ,_cccg );return Paragraph {_daad ,_cccg };};func (_ceacg Footnote )content ()[]*_be .EG_ContentBlockContent {var _eeba []*_be .EG_ContentBlockContent ;
for _ ,_egbg :=range _ceacg ._debf .EG_BlockLevelElts {_eeba =append (_eeba ,_egbg .BlockLevelEltsChoice .EG_ContentBlockContent ...);};return _eeba ;};

// SetUnhideWhenUsed controls if a semi hidden style becomes visible when used.
func (_gegabg Style )SetUnhideWhenUsed (b bool ){if b {_gegabg ._gegdgf .UnhideWhenUsed =_be .NewCT_OnOff ();}else {_gegabg ._gegdgf .UnhideWhenUsed =nil ;};};

// Type returns the type of the field.
func (_eded FormField )Type ()FormFieldType {if _eded ._dbgb .FFDataChoice !=nil &&len (_eded ._dbgb .FFDataChoice )> 0{if _eded ._dbgb .FFDataChoice [0].TextInput !=nil {return FormFieldTypeText ;}else if _eded ._dbgb .FFDataChoice [0].CheckBox !=nil {return FormFieldTypeCheckBox ;
}else if _eded ._dbgb .FFDataChoice [0].DdList !=nil {return FormFieldTypeDropDown ;};};return FormFieldTypeUnknown ;};

// FindNodeByStyleName return slice of node base on style name.
func (_dgbb *Nodes )FindNodeByStyleName (styleName string )[]Node {_fgfea :=[]Node {};for _ ,_gcfe :=range _dgbb ._acab {switch _bggcb :=_gcfe ._bgcd .(type ){case *Paragraph :if _bggcb !=nil {if _dfbdc ,_dbde :=_gcfe ._dgabd .Styles .SearchStyleByName (styleName );
_dbde {_dcfdac :=_bggcb .Style ();if _dcfdac ==_dfbdc .StyleID (){_fgfea =append (_fgfea ,_gcfe );};};};case *Table :if _bggcb !=nil {if _geac ,_eadbb :=_gcfe ._dgabd .Styles .SearchStyleByName (styleName );_eadbb {_adee :=_bggcb .Style ();if _adee ==_geac .StyleID (){_fgfea =append (_fgfea ,_gcfe );
};};};};_baeff :=Nodes {_acab :_gcfe .Children };_fgfea =append (_fgfea ,_baeff .FindNodeByStyleName (styleName )...);};return _fgfea ;};

// SizeValue returns the value of paragraph font size in points.
func (_deac ParagraphProperties )SizeValue ()float64 {if _fddd :=_deac ._fbaa .RPr .Sz ;_fddd !=nil {_gbcgc :=_fddd .ValAttr ;if _gbcgc .ST_UnsignedDecimalNumber !=nil {return float64 (*_gbcgc .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// X returns the inner wrapped XML type.
func (_dfegbf TableStyleProperties )X ()*_be .CT_TblPrBase {return _dfegbf ._eeda };func _gfafc ()*_bd .Path {_cfcfd :=_bd .NewPath ();_cfcfd .ExtrusionokAttr =_gfa .ST_TrueFalseTrue ;_cfcfd .GradientshapeokAttr =_gfa .ST_TrueFalseTrue ;_cfcfd .ConnecttypeAttr =_bd .OfcST_ConnectTypeRect ;
return _cfcfd ;};

// SetTextWrapTight sets the text wrap to tight with a give wrap type.
func (_fg AnchoredDrawing )SetTextWrapTight (option *AnchorDrawWrapOptions ){_fg ._cg .WrapTypeChoice =&_be .WdEG_WrapTypeChoice {};_fg ._cg .WrapTypeChoice .WrapTight =_be .NewWdCT_WrapTight ();_fg ._cg .WrapTypeChoice .WrapTight .WrapTextAttr =_be .WdST_WrapTextBothSides ;
_ge :=false ;_fg ._cg .WrapTypeChoice .WrapTight .WrapPolygon .EditedAttr =&_ge ;if option ==nil {option =NewAnchorDrawWrapOptions ();};_fg ._cg .WrapTypeChoice .WrapTight .WrapPolygon .LineTo =option .GetWrapPathLineTo ();_fg ._cg .WrapTypeChoice .WrapTight .WrapPolygon .Start =option .GetWrapPathStart ();
_fg ._cg .LayoutInCellAttr =true ;_fg ._cg .AllowOverlapAttr =true ;};

// SetRowBandSize sets the number of Rows in the row band
func (_adge TableStyleProperties )SetRowBandSize (rows int64 ){_adge ._eeda .TblStyleRowBandSize =_be .NewCT_DecimalNumber ();_adge ._eeda .TblStyleRowBandSize .ValAttr =rows ;};

// Styles returns all styles.
func (_gbebfe Styles )Styles ()[]Style {_gbeab :=[]Style {};for _ ,_gace :=range _gbebfe ._effe .Style {_gbeab =append (_gbeab ,Style {_gace });};return _gbeab ;};

// SetStart sets the cell start margin
func (_fdd CellMargins )SetStart (d _ac .Distance ){_fdd ._adde .Start =_be .NewCT_TblWidth ();_eag (_fdd ._adde .Start ,d );};

// Runs returns all of the runs in a paragraph.
func (_bebe Paragraph )Runs ()[]Run {_ecce :=[]Run {};for _ ,_dcec :=range _bebe ._bcaf .EG_PContent {if _dcec .PContentChoice .Hyperlink !=nil &&_dcec .PContentChoice .Hyperlink .PContentChoice .EG_ContentRunContent !=nil {for _ ,_ebgbc :=range _dcec .PContentChoice .Hyperlink .PContentChoice .EG_ContentRunContent {if _ebgbc .ContentRunContentChoice .R !=nil {_ecce =append (_ecce ,Run {_bebe ._gfabf ,_ebgbc .ContentRunContentChoice .R });
};};};for _ ,_gdbfb :=range _dcec .PContentChoice .EG_ContentRunContent {if _gdbfb .ContentRunContentChoice .R !=nil {_ecce =append (_ecce ,Run {_bebe ._gfabf ,_gdbfb .ContentRunContentChoice .R });};if _gdbfb .ContentRunContentChoice .Sdt !=nil &&_gdbfb .ContentRunContentChoice .Sdt .SdtContent !=nil {for _ ,_cbdbe :=range _gdbfb .ContentRunContentChoice .Sdt .SdtContent .EG_PContent {for _ ,_fbfce :=range _cbdbe .PContentChoice .EG_ContentRunContent {if _fbfce .ContentRunContentChoice .R !=nil {_ecce =append (_ecce ,Run {_bebe ._gfabf ,_fbfce .ContentRunContentChoice .R });
};};};};};};return _ecce ;};

// Paragraphs returns the paragraphs defined in the cell.
func (_dde Cell )Paragraphs ()[]Paragraph {_caa :=[]Paragraph {};for _ ,_add :=range _dde ._ca .EG_BlockLevelElts {for _ ,_aae :=range _add .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_age :=range _aae .ContentBlockContentChoice .P {_caa =append (_caa ,Paragraph {_dde ._fee ,_age });
};};};return _caa ;};

// AddHyperLink adds a new hyperlink to a parapgraph.
func (_cbbc Paragraph )AddHyperLink ()HyperLink {_ccfdc :=_be .NewEG_PContent ();_cbbc ._bcaf .EG_PContent =append (_cbbc ._bcaf .EG_PContent ,_ccfdc );_ccfdc .PContentChoice .Hyperlink =_be .NewCT_Hyperlink ();return HyperLink {_cbbc ._gfabf ,_ccfdc .PContentChoice .Hyperlink };
};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_dbgd ParagraphSpacing )SetLineSpacing (d _ac .Distance ,rule _be .ST_LineSpacingRule ){if rule ==_be .ST_LineSpacingRuleUnset {_dbgd ._aaec .LineRuleAttr =_be .ST_LineSpacingRuleUnset ;_dbgd ._aaec .LineAttr =nil ;}else {_dbgd ._aaec .LineRuleAttr =rule ;
_dbgd ._aaec .LineAttr =&_be .ST_SignedTwipsMeasure {};_dbgd ._aaec .LineAttr .Int64 =_g .Int64 (int64 (d /_ac .Twips ));};};

// SetRight sets the cell right margin
func (_fcfd CellMargins )SetRight (d _ac .Distance ){_fcfd ._adde .Right =_be .NewCT_TblWidth ();_eag (_fcfd ._adde .Right ,d );};func _eaedg ()*_bd .OfcLock {_bgfceg :=_bd .NewOfcLock ();_bgfceg .ExtAttr =_bd .ST_ExtEdit ;_bgfceg .AspectratioAttr =_gfa .ST_TrueFalseTrue ;
return _bgfceg ;};

// WatermarkText is watermark text within the document.
type WatermarkText struct{_eedac *_be .CT_Picture ;_dfbdb *_fa .TextpathStyle ;_cgddc *_bd .Shape ;_cbfe *_bd .Shapetype ;};

// AddDrawingInline adds an inline drawing from an ImageRef.
func (_dffd Run )AddDrawingInline (img _ec .ImageRef )(InlineDrawing ,error ){_gccfa :=_dffd .newIC ();_gccfa .RunInnerContentChoice .Drawing =_be .NewCT_Drawing ();_efgcg :=_be .NewWdInline ();_agcg :=InlineDrawing {_dffd ._cgbdg ,_efgcg };_efgcg .CNvGraphicFramePr =_fce .NewCT_NonVisualGraphicFrameProperties ();
_gccfa .RunInnerContentChoice .Drawing .DrawingChoice =append (_gccfa .RunInnerContentChoice .Drawing .DrawingChoice ,&_be .CT_DrawingChoice {Inline :_efgcg });_efgcg .Graphic =_fce .NewGraphic ();_efgcg .Graphic .GraphicData =_fce .NewCT_GraphicalObjectData ();
_efgcg .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";
_efgcg .DistTAttr =_g .Uint32 (0);_efgcg .DistLAttr =_g .Uint32 (0);_efgcg .DistBAttr =_g .Uint32 (0);_efgcg .DistRAttr =_g .Uint32 (0);_efgcg .Extent .CxAttr =int64 (float64 (img .Size ().X *_ac .Pixel72 )/_ac .EMU );_efgcg .Extent .CyAttr =int64 (float64 (img .Size ().Y *_ac .Pixel72 )/_ac .EMU );
_ffgf :=0x7FFFFFFF&_c .Uint32 ();_efgcg .DocPr .IdAttr =_ffgf ;_gabgb :=_fb .NewPic ();_gabgb .NvPicPr .CNvPr .IdAttr =_ffgf ;_cfdb :=img .RelID ();if _cfdb ==""{return _agcg ,_a .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");
};_efgcg .Graphic .GraphicData .Any =append (_efgcg .Graphic .GraphicData .Any ,_gabgb );_gabgb .BlipFill =_fce .NewCT_BlipFillProperties ();_gabgb .BlipFill .Blip =_fce .NewCT_Blip ();_gabgb .BlipFill .Blip .EmbedAttr =&_cfdb ;_gabgb .BlipFill .FillModePropertiesChoice .Stretch =_fce .NewCT_StretchInfoProperties ();
_gabgb .BlipFill .FillModePropertiesChoice .Stretch .FillRect =_fce .NewCT_RelativeRect ();_gabgb .SpPr =_fce .NewCT_ShapeProperties ();_gabgb .SpPr .Xfrm =_fce .NewCT_Transform2D ();_gabgb .SpPr .Xfrm .Off =_fce .NewCT_Point2D ();_gabgb .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_g .Int64 (0);
_gabgb .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_g .Int64 (0);_gabgb .SpPr .Xfrm .Ext =_fce .NewCT_PositiveSize2D ();_gabgb .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_ac .Point );_gabgb .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_ac .Point );
_gabgb .SpPr .GeometryChoice .PrstGeom =_fce .NewCT_PresetGeometry2D ();_gabgb .SpPr .GeometryChoice .PrstGeom .PrstAttr =_fce .ST_ShapeTypeRect ;return _agcg ,nil ;};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_eeee RunProperties )SizeMeasure ()string {if _debdc :=_eeee ._dggdd .Sz ;_debdc !=nil {_fbcfa :=_debdc .ValAttr ;if _fbcfa .ST_PositiveUniversalMeasure !=nil {return *_fbcfa .ST_PositiveUniversalMeasure ;};};return "";};func (_cfcb *Document )validateBookmarks ()error {_dafe :=make (map[string ]struct{});
for _ ,_aedef :=range _cfcb .Bookmarks (){if _ ,_ecgc :=_dafe [_aedef .Name ()];_ecgc {return _b .Errorf ("d\u0075\u0070\u006c\u0069\u0063\u0061t\u0065\u0020\u0062\u006f\u006f\u006b\u006d\u0061\u0072k\u0020\u0025\u0073 \u0066o\u0075\u006e\u0064",_aedef .Name ());
};_dafe [_aedef .Name ()]=struct{}{};};return nil ;};

// Style is a style within the styles.xml file.
type Style struct{_gegdgf *_be .CT_Style };

// SetHighlight highlights text in a specified color.
func (_dfcg RunProperties )SetHighlight (c _be .ST_HighlightColor ){_dfcg ._dggdd .Highlight =_be .NewCT_Highlight ();_dfcg ._dggdd .Highlight .ValAttr =c ;};

// SetFirstColumn controls the conditional formatting for the first column in a table.
func (_fdbg TableLook )SetFirstColumn (on bool ){if !on {_fdbg ._gfded .FirstColumnAttr =&_gfa .ST_OnOff {};_fdbg ._gfded .FirstColumnAttr .ST_OnOff1 =_gfa .ST_OnOff1Off ;}else {_fdbg ._gfded .FirstColumnAttr =&_gfa .ST_OnOff {};_fdbg ._gfded .FirstColumnAttr .ST_OnOff1 =_gfa .ST_OnOff1On ;
};};

// IsChecked returns true if a FormFieldTypeCheckBox is checked.
func (_ecdd FormField )IsChecked ()bool {if _ecdd ._dbgb .FFDataChoice ==nil ||len (_ecdd ._dbgb .FFDataChoice )==0||_ecdd ._dbgb .FFDataChoice [0].CheckBox ==nil {return false ;};if _ecdd ._dbgb .FFDataChoice [0].CheckBox .Checked !=nil {return true ;
};return false ;};

// GetImage returns the ImageRef associated with an InlineDrawing.
func (_eeebe InlineDrawing )GetImage ()(_ec .ImageRef ,bool ){_ecgea :=_eeebe ._adec .Graphic .GraphicData .Any ;if len (_ecgea )> 0{for _ ,_dgfg :=range _ecgea {_egad ,_ggcc :=_dgfg .(*_fb .Pic );if _ggcc {if _egad .BlipFill !=nil &&_egad .BlipFill .Blip !=nil &&_egad .BlipFill .Blip .EmbedAttr !=nil {return _eeebe ._cgced .GetImageByRelID (*_egad .BlipFill .Blip .EmbedAttr );
};};};};return _ec .ImageRef {},false ;};

// SetImprint sets the run to imprinted text.
func (_becdb RunProperties )SetImprint (b bool ){if !b {_becdb ._dggdd .Imprint =nil ;}else {_becdb ._dggdd .Imprint =_be .NewCT_OnOff ();};};

// SetCSTheme sets the font complex script theme.
func (_fbadc Fonts )SetCSTheme (t _be .ST_Theme ){_fbadc ._ggdb .CsthemeAttr =t };

// SetAllowOverlapAttr sets the allowOverlap attribute of anchor.
func (_dad AnchoredDrawing )SetAllowOverlapAttr (val bool ){_dad ._cg .AllowOverlapAttr =val };

// FormField is a form within a document. It references the document, so changes
// to the form field wil be reflected in the document if it is saved.
type FormField struct{_dbgb *_be .CT_FFData ;_badfc *_be .EG_RunInnerContent ;};

// SetStyle sets the table style name.
func (_cacf TableProperties )SetStyle (name string ){if name ==""{_cacf ._gdfab .TblStyle =nil ;}else {_cacf ._gdfab .TblStyle =_be .NewCT_String ();_cacf ._gdfab .TblStyle .ValAttr =name ;};};

// Clear clears all content within a footer
func (_ggbg Footer )Clear (){_ggbg ._dgcd .EG_BlockLevelElts =[]*_be .EG_BlockLevelElts {}};

// SetWidthAuto sets the the cell width to automatic.
func (_fag CellProperties )SetWidthAuto (){_fag ._fad .TcW =_be .NewCT_TblWidth ();_fag ._fad .TcW .TypeAttr =_be .ST_TblWidthAuto ;};

// AddPageBreak adds a page break to a run.
func (_efbcb Run )AddPageBreak (){_feda :=_efbcb .newIC ();_feda .RunInnerContentChoice .Br =_be .NewCT_Br ();_feda .RunInnerContentChoice .Br .TypeAttr =_be .ST_BrTypePage ;};func (_bdee Paragraph )addEndBookmark (_ecdec int64 )*_be .CT_MarkupRange {_ggebdc :=_be .NewEG_PContent ();
_bdee ._bcaf .EG_PContent =append (_bdee ._bcaf .EG_PContent ,_ggebdc );_gfea :=_be .NewEG_ContentRunContent ();_ffde :=_be .NewEG_RunLevelElts ();_efcc :=_be .NewEG_RangeMarkupElements ();_ddfcc :=_be .NewCT_MarkupRange ();_ddfcc .IdAttr =_ecdec ;_efcc .RangeMarkupElementsChoice .BookmarkEnd =_ddfcc ;
_ggebdc .PContentChoice .EG_ContentRunContent =append (_ggebdc .PContentChoice .EG_ContentRunContent ,_gfea );_gfea .ContentRunContentChoice .EG_RunLevelElts =append (_gfea .ContentRunContentChoice .EG_RunLevelElts ,_ffde );_ffde .RunLevelEltsChoice .EG_RangeMarkupElements =append (_ffde .RunLevelEltsChoice .EG_RangeMarkupElements ,_efcc );
return _ddfcc ;};func (_bfd *chart )X ()*_db .ChartSpace {return _bfd ._cdda };func (_acbcd Styles )initializeStyleDefaults (){_aafcd :=_acbcd .AddStyle ("\u004e\u006f\u0072\u006d\u0061\u006c",_be .ST_StyleTypeParagraph ,true );_aafcd .SetName ("\u004e\u006f\u0072\u006d\u0061\u006c");
_aafcd .SetPrimaryStyle (true );_bdaaf :=_acbcd .AddStyle ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074",_be .ST_StyleTypeCharacter ,true );_bdaaf .SetName ("\u0044\u0065\u0066\u0061ul\u0074\u0020\u0050\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0020\u0046\u006fn\u0074");
_bdaaf .SetUISortOrder (1);_bdaaf .SetSemiHidden (true );_bdaaf .SetUnhideWhenUsed (true );_defg :=_acbcd .AddStyle ("\u0054i\u0074\u006c\u0065\u0043\u0068\u0061r",_be .ST_StyleTypeCharacter ,false );_defg .SetName ("\u0054\u0069\u0074\u006c\u0065\u0020\u0043\u0068\u0061\u0072");
_defg .SetBasedOn (_bdaaf .StyleID ());_defg .SetLinkedStyle ("\u0054\u0069\u0074l\u0065");_defg .SetUISortOrder (10);_defg .RunProperties ().Fonts ().SetASCIITheme (_be .ST_ThemeMajorAscii );_defg .RunProperties ().Fonts ().SetEastAsiaTheme (_be .ST_ThemeMajorEastAsia );
_defg .RunProperties ().Fonts ().SetHANSITheme (_be .ST_ThemeMajorHAnsi );_defg .RunProperties ().Fonts ().SetCSTheme (_be .ST_ThemeMajorBidi );_defg .RunProperties ().SetSize (28*_ac .Point );_defg .RunProperties ().SetKerning (14*_ac .Point );_defg .RunProperties ().SetCharacterSpacing (-10*_ac .Twips );
_bgad :=_acbcd .AddStyle ("\u0054\u0069\u0074l\u0065",_be .ST_StyleTypeParagraph ,false );_bgad .SetName ("\u0054\u0069\u0074l\u0065");_bgad .SetBasedOn (_aafcd .StyleID ());_bgad .SetNextStyle (_aafcd .StyleID ());_bgad .SetLinkedStyle (_defg .StyleID ());
_bgad .SetUISortOrder (10);_bgad .SetPrimaryStyle (true );_bgad .ParagraphProperties ().SetContextualSpacing (true );_bgad .RunProperties ().Fonts ().SetASCIITheme (_be .ST_ThemeMajorAscii );_bgad .RunProperties ().Fonts ().SetEastAsiaTheme (_be .ST_ThemeMajorEastAsia );
_bgad .RunProperties ().Fonts ().SetHANSITheme (_be .ST_ThemeMajorHAnsi );_bgad .RunProperties ().Fonts ().SetCSTheme (_be .ST_ThemeMajorBidi );_bgad .RunProperties ().SetSize (28*_ac .Point );_bgad .RunProperties ().SetKerning (14*_ac .Point );_bgad .RunProperties ().SetCharacterSpacing (-10*_ac .Twips );
_aafcf :=_acbcd .AddStyle ("T\u0061\u0062\u006c\u0065\u004e\u006f\u0072\u006d\u0061\u006c",_be .ST_StyleTypeTable ,false );_aafcf .SetName ("\u004e\u006f\u0072m\u0061\u006c\u0020\u0054\u0061\u0062\u006c\u0065");_aafcf .SetUISortOrder (99);_aafcf .SetSemiHidden (true );
_aafcf .SetUnhideWhenUsed (true );_aafcf .X ().TblPr =_be .NewCT_TblPrBase ();_fdbef :=NewTableWidth ();_aafcf .X ().TblPr .TblInd =_fdbef .X ();_fdbef .SetValue (0*_ac .Dxa );_aafcf .X ().TblPr .TblCellMar =_be .NewCT_TblCellMar ();_fdbef =NewTableWidth ();
_aafcf .X ().TblPr .TblCellMar .Top =_fdbef .X ();_fdbef .SetValue (0*_ac .Dxa );_fdbef =NewTableWidth ();_aafcf .X ().TblPr .TblCellMar .Bottom =_fdbef .X ();_fdbef .SetValue (0*_ac .Dxa );_fdbef =NewTableWidth ();_aafcf .X ().TblPr .TblCellMar .Left =_fdbef .X ();
_fdbef .SetValue (108*_ac .Dxa );_fdbef =NewTableWidth ();_aafcf .X ().TblPr .TblCellMar .Right =_fdbef .X ();_fdbef .SetValue (108*_ac .Dxa );_cafde :=_acbcd .AddStyle ("\u004e\u006f\u004c\u0069\u0073\u0074",_be .ST_StyleTypeNumbering ,false );_cafde .SetName ("\u004eo\u0020\u004c\u0069\u0073\u0074");
_cafde .SetUISortOrder (1);_cafde .SetSemiHidden (true );_cafde .SetUnhideWhenUsed (true );_bcebgd :=[]_ac .Distance {16,13,12,11,11,11,11,11,11};_eedc :=[]_ac .Distance {240,40,40,40,40,40,40,40,40};for _efedc :=0;_efedc < 9;_efedc ++{_aeadg :=_b .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",_efedc +1);
_defab :=_acbcd .AddStyle (_aeadg +"\u0043\u0068\u0061\u0072",_be .ST_StyleTypeCharacter ,false );_defab .SetName (_b .Sprintf ("\u0048e\u0061d\u0069\u006e\u0067\u0020\u0025\u0064\u0020\u0043\u0068\u0061\u0072",_efedc +1));_defab .SetBasedOn (_bdaaf .StyleID ());
_defab .SetLinkedStyle (_aeadg );_defab .SetUISortOrder (9+_efedc );_defab .RunProperties ().SetSize (_bcebgd [_efedc ]*_ac .Point );_gefaf :=_acbcd .AddStyle (_aeadg ,_be .ST_StyleTypeParagraph ,false );_gefaf .SetName (_b .Sprintf ("\u0068\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0025\u0064",_efedc +1));
_gefaf .SetNextStyle (_aafcd .StyleID ());_gefaf .SetLinkedStyle (_gefaf .StyleID ());_gefaf .SetUISortOrder (9+_efedc );_gefaf .SetPrimaryStyle (true );_gefaf .ParagraphProperties ().SetKeepNext (true );_gefaf .ParagraphProperties ().SetSpacing (_eedc [_efedc ]*_ac .Twips ,0);
_gefaf .ParagraphProperties ().SetOutlineLevel (_efedc );_gefaf .RunProperties ().SetSize (_bcebgd [_efedc ]*_ac .Point );};};

// SearchStylesById returns style by its id.
func (_dfdgc Styles )SearchStyleById (id string )(Style ,bool ){for _ ,_gaagd :=range _dfdgc ._effe .Style {if _gaagd .StyleIdAttr !=nil {if *_gaagd .StyleIdAttr ==id {return Style {_gaagd },true ;};};};return Style {},false ;};

// SetFooter sets a section footer.
func (_aecge Section )SetFooter (f Footer ,t _be .ST_HdrFtr ){_acdfa :=_be .NewEG_HdrFtrReferences ();_aecge ._cffdd .EG_HdrFtrReferences =append (_aecge ._cffdd .EG_HdrFtrReferences ,_acdfa );_acdfa .HdrFtrReferencesChoice .FooterReference =_be .NewCT_HdrFtrRef ();
_acdfa .HdrFtrReferencesChoice .FooterReference .TypeAttr =t ;_efcg :=_aecge ._dfcf ._dbe .FindRIDForN (f .Index (),_g .FooterType );if _efcg ==""{_ede .Log .Debug ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0066\u006f\u006f\u0074\u0065r \u0049\u0044");
};_acdfa .HdrFtrReferencesChoice .FooterReference .IdAttr =_efcg ;};

// SetWindowControl controls if the first or last line of the paragraph is
// allowed to display on a separate page.
func (_aacb ParagraphProperties )SetWindowControl (b bool ){if !b {_aacb ._fbaa .WidowControl =nil ;}else {_aacb ._fbaa .WidowControl =_be .NewCT_OnOff ();};};func (_ccgg *Document )addEndnotes (){_ccgg ._dbc =_be .NewEndnotes ();_ccgg .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0065\u006e\u0064n\u006f\u0074e\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0065\u006e\u0064\u006e\u006f\u0074\u0065\u0073\u002b\u0078\u006d\u006c");
_ccgg ._dbe .AddRelationship ("\u002fw\u006fr\u0064\u002f\u0065\u006e\u0064n\u006f\u0074e\u0073\u002e\u0078\u006d\u006c",_g .EndNotesType );_dacb :=_ccgg .Styles .AddStyle (EndnoteTextStyleId ,_be .ST_StyleTypeParagraph ,false );_dacb .SetName ("\u0045\u006e\u0064n\u006f\u0074\u0065\u0020\u0054\u0065\u0078\u0074");
_dacb .SetBasedOn ("\u004e\u006f\u0072\u006d\u0061\u006c");_fgg :=_dacb .ParagraphProperties ();_fgg .X ().SuppressLineNumbers =&_be .CT_OnOff {};_ffbe :=_dacb .RunProperties ();_ffbe .X ().Sz =&_be .CT_HpsMeasure {ValAttr :_be .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_gfab }};
_ffbe .X ().SzCs =&_be .CT_HpsMeasure {ValAttr :_be .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_gfab }};_fbbd :=_ccgg .Styles .AddStyle (_gac ,_be .ST_StyleTypeCharacter ,false );_fbbd .SetName ("\u0045\u006e\u0064\u006e\u006f\u0074\u0065\u0020\u0052\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");
_gfaea :=_fbbd .RunProperties ();_gfaea .X ().VertAlign =&_be .CT_VerticalAlignRun {ValAttr :_gfa .ST_VerticalAlignRunSuperscript };_ccgg .addEndnoteSeparator ();};

// GetStyle returns string style of the text in watermark and format it to TextpathStyle.
func (_bdfgf *WatermarkText )GetStyle ()_fa .TextpathStyle {_ebcb :=_bdfgf .getShape ();if _bdfgf ._cgddc !=nil {_egcgb :=_bdfgf ._cgddc .ShapeChoice ;for _ ,_eaged :=range _egcgb {if _eaged .ShapeElementsChoice .Textpath !=nil {return _fa .NewTextpathStyle (*_eaged .ShapeElementsChoice .Textpath .StyleAttr );
};};}else {_dcaab :=_bdfgf .findNode (_ebcb ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _ ,_cagb :=range _dcaab .Attrs {if _cagb .Name .Local =="\u0073\u0074\u0079l\u0065"{return _fa .NewTextpathStyle (_cagb .Value );};};};return _fa .NewTextpathStyle ("");
};func _baeb (_dcga *_be .CT_P ,_egdfa *_be .CT_Hyperlink ,_cfae *TableInfo ,_adace *DrawingInfo ,_cecc []*_be .EG_ContentRunContent )[]TextItem {_cgaf :=[]TextItem {};for _ ,_gged :=range _cecc {if _cbbb :=_gged .ContentRunContentChoice .Sdt ;_cbbb !=nil {if _gebge :=_cbbb .SdtContent ;
_gebge !=nil {for _ ,_gcde :=range _gebge .EG_PContent {_cgaf =append (_cgaf ,_baeb (_dcga ,_egdfa ,_cfae ,_adace ,_gcde .PContentChoice .EG_ContentRunContent )...);};};};if _gbdag :=_gged .ContentRunContentChoice .R ;_gbdag !=nil {_bbaac :=_fc .NewBuffer ([]byte {});
for _ ,_ecfe :=range _gbdag .EG_RunInnerContent {if _ecfe .RunInnerContentChoice .Br !=nil {_bbaac .WriteString ("\u000a");};if _ecfe .RunInnerContentChoice .Tab !=nil {_bbaac .WriteString ("\u0009");};if _ecfe .RunInnerContentChoice .T !=nil {_bbaac .WriteString (_ecfe .RunInnerContentChoice .T .Content );
};if _ecfe .RunInnerContentChoice .Pict !=nil &&len (_ecfe .RunInnerContentChoice .Pict .Any )> 0{for _ ,_cgbd :=range _ecfe .RunInnerContentChoice .Pict .Any {if _efcb ,_dega :=_cgbd .(*_bd .Shape );_dega {for _ ,_edef :=range _efcb .ShapeChoice {if _ddfdd :=_edef .ShapeElementsChoice .Textbox ;
_ddfdd !=nil {if _ddfdd .TxbxContent !=nil {for _ ,_fgdcd :=range _ddfdd .TxbxContent .EG_BlockLevelElts {_cgaf =append (_cgaf ,_agae (_fgdcd .BlockLevelEltsChoice .EG_ContentBlockContent ,nil )...);};};};};};};};};_cgaf =append (_cgaf ,TextItem {Text :_bbaac .String (),DrawingInfo :_adace ,Paragraph :_dcga ,Hyperlink :_egdfa ,Run :_gbdag ,TableInfo :_cfae });
for _ ,_fcba :=range _gbdag .Extra {if _faed ,_cegea :=_fcba .(*_be .AlternateContentRun );_cegea {_decb :=&DrawingInfo {Drawing :_faed .Choice .Drawing };for _ ,_bfddg :=range _decb .Drawing .DrawingChoice {if _bfddg .Anchor ==nil {continue ;};for _ ,_afeae :=range _bfddg .Anchor .Graphic .GraphicData .Any {if _ecgg ,_cgffb :=_afeae .(*_be .WdWsp );
_cgffb {if _ecgg .WordprocessingShapeChoice1 !=nil {if _ccddc :=_ecgg .SpPr ;_ccddc !=nil {if _ddde :=_ccddc .Xfrm ;_ddde !=nil {if _dcfeg :=_ddde .Ext ;_dcfeg !=nil {_decb .Width =_dcfeg .CxAttr ;_decb .Height =_dcfeg .CyAttr ;};};};for _ ,_cgcbb :=range _ecgg .WordprocessingShapeChoice1 .Txbx .TxbxContent .EG_BlockLevelElts {for _ ,_egcfa :=range _cgcbb .BlockLevelEltsChoice .EG_ContentBlockContent {_cgaf =append (_cgaf ,_adga (_egcfa .ContentBlockContentChoice .P ,_cfae ,_decb )...);
};};};};};};};};};};return _cgaf ;};

// SetStrikeThrough sets the run to strike-through.
func (_fcga RunProperties )SetStrikeThrough (b bool ){if !b {_fcga ._dggdd .Strike =nil ;}else {_fcga ._dggdd .Strike =_be .NewCT_OnOff ();};};

// SetConformance sets conformance attribute of the document
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_eabcb Document )SetConformance (conformanceAttr _gfa .ST_ConformanceClass ){_eabcb ._cgb .ConformanceAttr =conformanceAttr ;};

// SetHangingIndent controls the indentation of the non-first lines in a paragraph.
func (_dfbdf ParagraphProperties )SetHangingIndent (m _ac .Distance ){if _dfbdf ._fbaa .Ind ==nil {_dfbdf ._fbaa .Ind =_be .NewCT_Ind ();};if m ==_ac .Zero {_dfbdf ._fbaa .Ind .HangingAttr =nil ;}else {_dfbdf ._fbaa .Ind .HangingAttr =&_gfa .ST_TwipsMeasure {};
_dfbdf ._fbaa .Ind .HangingAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (m /_ac .Twips ));};};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_cefbb ParagraphProperties )CharacterSpacingMeasure ()string {if _dgfcf :=_cefbb ._fbaa .RPr .Spacing ;_dgfcf !=nil {_deedd :=_dgfcf .ValAttr ;if _deedd .ST_UniversalMeasure !=nil {return *_deedd .ST_UniversalMeasure ;};};return "";};

// RemoveRun removes a child run from a paragraph.
func (_dfegb Paragraph )RemoveRun (r Run ){for _ ,_eaadc :=range _dfegb ._bcaf .EG_PContent {for _ceaf ,_acfc :=range _eaadc .PContentChoice .EG_ContentRunContent {if _acfc .ContentRunContentChoice .R ==r ._fgad {copy (_eaadc .PContentChoice .EG_ContentRunContent [_ceaf :],_eaadc .PContentChoice .EG_ContentRunContent [_ceaf +1:]);
_eaadc .PContentChoice .EG_ContentRunContent =_eaadc .PContentChoice .EG_ContentRunContent [0:len (_eaadc .PContentChoice .EG_ContentRunContent )-1];};if _acfc .ContentRunContentChoice .Sdt !=nil &&_acfc .ContentRunContentChoice .Sdt .SdtContent !=nil {for _ ,_fcce :=range _acfc .ContentRunContentChoice .Sdt .SdtContent .EG_PContent {for _cfaegb ,_bggdd :=range _fcce .PContentChoice .EG_ContentRunContent {if _bggdd .ContentRunContentChoice .R ==r ._fgad {copy (_fcce .PContentChoice .EG_ContentRunContent [_cfaegb :],_fcce .PContentChoice .EG_ContentRunContent [_cfaegb +1:]);
_fcce .PContentChoice .EG_ContentRunContent =_fcce .PContentChoice .EG_ContentRunContent [0:len (_fcce .PContentChoice .EG_ContentRunContent )-1];};};};};};};};func _caff ()*_bd .Textpath {_cdgbe :=_bd .NewTextpath ();_cdgbe .OnAttr =_gfa .ST_TrueFalseTrue ;
_cdgbe .FitshapeAttr =_gfa .ST_TrueFalseTrue ;return _cdgbe ;};

// SetBottom sets the cell bottom margin
func (_dgg CellMargins )SetBottom (d _ac .Distance ){_dgg ._adde .Bottom =_be .NewCT_TblWidth ();_eag (_dgg ._adde .Bottom ,d );};

// SetNumberingDefinition sets the numbering definition ID via a NumberingDefinition
// defined in numbering.xml
func (_ceee Paragraph )SetNumberingDefinition (nd NumberingDefinition ){_ceee .ensurePPr ();if _ceee ._bcaf .PPr .NumPr ==nil {_ceee ._bcaf .PPr .NumPr =_be .NewCT_NumPr ();};_bagae :=_be .NewCT_DecimalNumber ();_fecb :=int64 (-1);for _ ,_cgdab :=range _ceee ._gfabf .Numbering ._dcaac .Num {if _cgdab .AbstractNumId !=nil &&_cgdab .AbstractNumId .ValAttr ==nd .AbstractNumberID (){_fecb =_cgdab .NumIdAttr ;
};};if _fecb ==-1{_edfgc :=_be .NewCT_Num ();_ceee ._gfabf .Numbering ._dcaac .Num =append (_ceee ._gfabf .Numbering ._dcaac .Num ,_edfgc );_edfgc .NumIdAttr =int64 (len (_ceee ._gfabf .Numbering ._dcaac .Num ));_edfgc .AbstractNumId =_be .NewCT_DecimalNumber ();
_edfgc .AbstractNumId .ValAttr =nd .AbstractNumberID ();_fecb =_edfgc .NumIdAttr ;};_bagae .ValAttr =_fecb ;_ceee ._bcaf .PPr .NumPr .NumId =_bagae ;};

// SetEndIndent controls the end indentation.
func (_aaedc ParagraphProperties )SetEndIndent (m _ac .Distance ){if _aaedc ._fbaa .Ind ==nil {_aaedc ._fbaa .Ind =_be .NewCT_Ind ();};if m ==_ac .Zero {_aaedc ._fbaa .Ind .EndAttr =nil ;}else {_aaedc ._fbaa .Ind .EndAttr =&_be .ST_SignedTwipsMeasure {};
_aaedc ._fbaa .Ind .EndAttr .Int64 =_g .Int64 (int64 (m /_ac .Twips ));};};func (_abfa FormFieldType )String ()string {if _abfa >=FormFieldType (len (_gbfe )-1){return _b .Sprintf ("\u0046\u006f\u0072\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_abfa );
};return _fgdd [_gbfe [_abfa ]:_gbfe [_abfa +1]];};

// AddFootnoteReference adds a footnote reference to a run.
func (_daff Run )AddFootnoteReference (){_cdead :=_daff .newIC ();_cdead .RunInnerContentChoice .FootnoteRef =&_be .CT_Empty {};};

// SetRight sets the right border to a specified type, color and thickness.
func (_eeg CellBorders )SetRight (t _be .ST_Border ,c _cb .Color ,thickness _ac .Distance ){_eeg ._bce .Right =_be .NewCT_Border ();_gdff (_eeg ._bce .Right ,t ,c ,thickness );};

// Footnote is an individual footnote reference within the document.
type Footnote struct{_afda *Document ;_debf *_be .CT_FtnEdn ;};

// SetWidthAuto sets the the table width to automatic.
func (_cfade TableProperties )SetWidthAuto (){_cfade ._gdfab .TblW =_be .NewCT_TblWidth ();_cfade ._gdfab .TblW .TypeAttr =_be .ST_TblWidthAuto ;};

// X returns the inner wrapped XML type.
func (_ebcd TableConditionalFormatting )X ()*_be .CT_TblStylePr {return _ebcd ._afbcf };

// Underline returns the type of run underline.
func (_gdfed RunProperties )Underline ()_be .ST_Underline {if _afcecd :=_gdfed ._dggdd .U ;_afcecd !=nil {return _afcecd .ValAttr ;};return 0;};func (_ecafb Paragraph )removeCommentRange (_fbcff int64 )bool {_acffg :=false ;for _ ,_becgd :=range _ecafb .X ().EG_PContent {for _ ,_cfdc :=range _becgd .PContentChoice .EG_ContentRunContent {for _ ,_bgaca :=range _cfdc .ContentRunContentChoice .EG_RunLevelElts {for _fgdab ,_gdag :=range _bgaca .RunLevelEltsChoice .EG_RangeMarkupElements {if !_acffg &&_gdag .RangeMarkupElementsChoice .CommentRangeStart !=nil &&_gdag .RangeMarkupElementsChoice .CommentRangeStart .IdAttr ==_fbcff {_afgdb :=_bgaca .RunLevelEltsChoice .EG_RangeMarkupElements [:_fgdab ];
_afgdb =append (_afgdb ,_bgaca .RunLevelEltsChoice .EG_RangeMarkupElements [_fgdab +1:len (_bgaca .RunLevelEltsChoice .EG_RangeMarkupElements )]...);_bgaca .RunLevelEltsChoice .EG_RangeMarkupElements =_afgdb ;_acffg =true ;};if _acffg &&_gdag .RangeMarkupElementsChoice .CommentRangeEnd !=nil &&_gdag .RangeMarkupElementsChoice .CommentRangeEnd .IdAttr ==_fbcff {_gegcd :=_bgaca .RunLevelEltsChoice .EG_RangeMarkupElements [:_fgdab ];
_gegcd =append (_gegcd ,_bgaca .RunLevelEltsChoice .EG_RangeMarkupElements [_fgdab +1:len (_bgaca .RunLevelEltsChoice .EG_RangeMarkupElements )]...);_bgaca .RunLevelEltsChoice .EG_RangeMarkupElements =_gegcd ;return true ;};};};};};return false ;};func (_fddc Paragraph )addStartComment (_gdadgd int64 )*_be .CT_MarkupRange {_gadcg :=_be .NewEG_PContent ();
_fddc ._bcaf .EG_PContent =append (_fddc ._bcaf .EG_PContent ,_gadcg );_fcbge :=_be .NewEG_ContentRunContent ();_bdbd :=_be .NewEG_RunLevelElts ();_acad :=_be .NewEG_RangeMarkupElements ();_bada :=_be .NewCT_MarkupRange ();_bada .IdAttr =_gdadgd ;_acad .RangeMarkupElementsChoice .CommentRangeStart =_bada ;
_gadcg .PContentChoice .EG_ContentRunContent =append (_gadcg .PContentChoice .EG_ContentRunContent ,_fcbge );_fcbge .ContentRunContentChoice .EG_RunLevelElts =append (_fcbge .ContentRunContentChoice .EG_RunLevelElts ,_bdbd );_bdbd .RunLevelEltsChoice .EG_RangeMarkupElements =append (_bdbd .RunLevelEltsChoice .EG_RangeMarkupElements ,_acad );
return _bada ;};

// SetFollowImageShape sets wrapPath to follow image shape,
// if nil return wrapPath that follow image size.
func (_aaf AnchorDrawWrapOptions )SetFollowImageShape (val bool ){_aaf ._efg =val ;if !val {_cca ,_ffb :=_adf ();_aaf ._ega =_cca ;_aaf ._eea =_ffb ;};};

// SetBeforeSpacing sets spacing above paragraph.
func (_gadac Paragraph )SetBeforeSpacing (d _ac .Distance ){_gadac .ensurePPr ();if _gadac ._bcaf .PPr .Spacing ==nil {_gadac ._bcaf .PPr .Spacing =_be .NewCT_Spacing ();};_ffab :=_gadac ._bcaf .PPr .Spacing ;_ffab .BeforeAttr =&_gfa .ST_TwipsMeasure {};
_ffab .BeforeAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (d /_ac .Twips ));};

// Color returns the style's Color.
func (_efbd RunProperties )Color ()Color {if _efbd ._dggdd .Color ==nil {_efbd ._dggdd .Color =_be .NewCT_Color ();};return Color {_efbd ._dggdd .Color };};

// AddTab adds tab to a run and can be used with the the Paragraph's tab stops.
func (_fdab Run )AddTab (){_gcbf :=_fdab .newIC ();_gcbf .RunInnerContentChoice .Tab =_be .NewCT_Empty ();};

// SetVerticalBanding controls the conditional formatting for vertical banding.
func (_gaab TableLook )SetVerticalBanding (on bool ){if !on {_gaab ._gfded .NoVBandAttr =&_gfa .ST_OnOff {};_gaab ._gfded .NoVBandAttr .ST_OnOff1 =_gfa .ST_OnOff1On ;}else {_gaab ._gfded .NoVBandAttr =&_gfa .ST_OnOff {};_gaab ._gfded .NoVBandAttr .ST_OnOff1 =_gfa .ST_OnOff1Off ;
};};func _aabf (_bagad *_be .CT_OnOff )OnOffValue {if _bagad ==nil {return OnOffValueUnset ;};if _bagad .ValAttr !=nil &&_bagad .ValAttr .Bool !=nil &&*_bagad .ValAttr .Bool ==false {return OnOffValueOff ;};return OnOffValueOn ;};

// AddParagraph adds a paragraph to the endnote.
func (_gbab Endnote )AddParagraph ()Paragraph {_gdcc :=_be .NewEG_ContentBlockContent ();_egcd :=len (_gbab ._dbda .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent );_gbab ._dbda .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent =append (_gbab ._dbda .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent ,_gdcc );
_ecde :=_be .NewCT_P ();var _abgc *_be .CT_String ;if _egcd !=0{_edfbc :=len (_gbab ._dbda .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent [_egcd -1].ContentBlockContentChoice .P );_abgc =_gbab ._dbda .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent [_egcd -1].ContentBlockContentChoice .P [_edfbc -1].PPr .PStyle ;
}else {_abgc =_be .NewCT_String ();_abgc .ValAttr ="\u0045n\u0064\u006e\u006f\u0074\u0065";};_gdcc .ContentBlockContentChoice .P =append (_gdcc .ContentBlockContentChoice .P ,_ecde );_baga :=Paragraph {_gbab ._cbbge ,_ecde };_baga ._bcaf .PPr =_be .NewCT_PPr ();
_baga ._bcaf .PPr .PStyle =_abgc ;_baga ._bcaf .PPr .RPr =_be .NewCT_ParaRPr ();return _baga ;};

// SetHAlignment sets the horizontal alignment for an anchored image.
func (_ad AnchoredDrawing )SetHAlignment (h _be .WdST_AlignH ){_ad ._cg .PositionH .PosHChoice =&_be .WdCT_PosHChoice {};_ad ._cg .PositionH .PosHChoice .Align =h ;};

// SetEastAsiaTheme sets the font East Asia Theme.
func (_ccb Fonts )SetEastAsiaTheme (t _be .ST_Theme ){_ccb ._ggdb .EastAsiaThemeAttr =t };

// RowProperties are the properties for a row within a table
type RowProperties struct{_bfdba *_be .CT_TrPr };

// SetColor sets color of watermark text.
func (_fgdeb *WatermarkText )SetColor (value string ){if _fgdeb ._cgddc !=nil {_fgdeb ._cgddc .FillcolorAttr =&value ;};};func _gacbf (_dcgb *_be .EG_ContentBlockContent )[]Bookmark {_dab :=[]Bookmark {};for _ ,_bcbg :=range _dcgb .ContentBlockContentChoice .P {for _ ,_efgd :=range _bcbg .EG_PContent {for _ ,_fdfb :=range _efgd .PContentChoice .EG_ContentRunContent {for _ ,_cceg :=range _fdfb .ContentRunContentChoice .EG_RunLevelElts {for _ ,_eaag :=range _cceg .RunLevelEltsChoice .EG_RangeMarkupElements {if _eaag .RangeMarkupElementsChoice .BookmarkStart !=nil {_dab =append (_dab ,Bookmark {_eaag .RangeMarkupElementsChoice .BookmarkStart });
};};};};};};for _ ,_eaed :=range _dcgb .ContentBlockContentChoice .EG_RunLevelElts {for _ ,_aggd :=range _eaed .RunLevelEltsChoice .EG_RangeMarkupElements {if _aggd .RangeMarkupElementsChoice .BookmarkStart !=nil {_dab =append (_dab ,Bookmark {_aggd .RangeMarkupElementsChoice .BookmarkStart });
};};};for _ ,_bfda :=range _dcgb .ContentBlockContentChoice .Tbl {for _ ,_dbaec :=range _bfda .EG_ContentRowContent {for _ ,_fccfa :=range _dbaec .ContentRowContentChoice .Tr {for _ ,_cgad :=range _fccfa .EG_ContentCellContent {for _ ,_gfde :=range _cgad .ContentCellContentChoice .Tc {for _ ,_fgaa :=range _gfde .EG_BlockLevelElts {for _ ,_gdbcc :=range _fgaa .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_aba :=range _gacbf (_gdbcc ){_dab =append (_dab ,_aba );
};};};};};};};};return _dab ;};

// GetFooter gets a section Footer for given type
func (_gceb Section )GetFooter (t _be .ST_HdrFtr )(Footer ,bool ){for _ ,_eebfc :=range _gceb ._cffdd .EG_HdrFtrReferences {if _eebfc .HdrFtrReferencesChoice .FooterReference ==nil {continue ;};if _eebfc .HdrFtrReferencesChoice .FooterReference .TypeAttr ==t {for _ ,_ceagb :=range _gceb ._dfcf .Footers (){_eacd :=_gceb ._dfcf ._dbe .FindRIDForN (_ceagb .Index (),_g .FooterType );
if _eacd ==_eebfc .HdrFtrReferencesChoice .FooterReference .IdAttr {return _ceagb ,true ;};};};};return Footer {},false ;};func (_bgdbe Run )parseHTMLTag (_abce string )string {_caaa :=_d .NewDecoder (_fc .NewReader ([]byte (_abce )));_gbacf :="";_fecd :=[]_d .StartElement {};
for {_abbce ,_ecgef :=_caaa .Token ();if _ecgef !=nil {break ;};switch _faab :=_abbce .(type ){case _d .StartElement :_fecd =append (_fecd ,_faab );case _d .EndElement :if _fecd [len (_fecd )-1].Name .Local ==_faab .Name .Local {_eeff :=_fecd [len (_fecd )-1];
_fecd =_fecd [:len (_fecd )-1];switch _faab .Name .Local {case "\u0062","\u0073\u0074\u0072\u006f\u006e\u0067":_bgdbe .Properties ().SetBold (true );case "\u0069","\u0065\u006d":_bgdbe .Properties ().SetItalic (true );case "\u0075":_egcdg :=_cb .Black ;
for _ ,_fcefa :=range _eeff .Attr {if _fcefa .Name .Local =="\u0063\u006f\u006co\u0072"{if _ffbd ,_cgbe :=_cb .ColorMap [_fcefa .Value ];_cgbe {_egcdg =_ffbd ;};};};_bgdbe .Properties ().SetUnderline (_be .ST_UnderlineSingle ,_egcdg );case "\u0073\u0074\u0072\u0069\u006b\u0065":_bgdbe .Properties ().SetStrikeThrough (true );
case "\u006d\u0061\u0072\u006b":_fbee :=_be .ST_HighlightColorYellow ;for _ ,_dfaaff :=range _eeff .Attr {if _dfaaff .Name .Local =="\u0063\u006f\u006co\u0072"{if _abfbf ,_ebded :=_cb .HighlightColorMap [_dfaaff .Value ];_ebded {_fbee =_abfbf ;};};};_bgdbe .Properties ().SetHighlight (_fbee );
case "\u0073\u0075\u0062":_bgdbe .Properties ().SetVerticalAlignment (_gfa .ST_VerticalAlignRunSubscript );case "\u0073\u0075\u0070":_bgdbe .Properties ().SetVerticalAlignment (_gfa .ST_VerticalAlignRunSuperscript );};};case _d .CharData :_gbacf +=string (_faab );
};};return _gbacf ;};

// SetBottomPct sets the cell bottom margin
func (_ebb CellMargins )SetBottomPct (pct float64 ){_ebb ._adde .Bottom =_be .NewCT_TblWidth ();_efe (_ebb ._adde .Bottom ,pct );};

// Copy returns a copy of the run.
func (_adeg Run )Copy ()Run {_ebfcb :=_be .NewCT_R ();_fbffa :=*_adeg ._fgad .RPr ;_ebfcb .RPr =&_fbffa ;for _ ,_aafa :=range _adeg ._fgad .EG_RunInnerContent {_cdabd :=_be .NewEG_RunInnerContent ();if _aafa .RunInnerContentChoice .T !=nil {_cdabd .RunInnerContentChoice .T =&_be .CT_Text {Content :_aafa .RunInnerContentChoice .T .Content ,SpaceAttr :_aafa .RunInnerContentChoice .T .SpaceAttr };
};_ebfcb .EG_RunInnerContent =append (_ebfcb .EG_RunInnerContent ,_cdabd );};return Run {_cgbdg :_adeg ._cgbdg ,_fgad :_ebfcb };};

// Color controls the run or styles color.
type Color struct{_ddc *_be .CT_Color };const (FormFieldTypeUnknown FormFieldType =iota ;FormFieldTypeText ;FormFieldTypeCheckBox ;FormFieldTypeDropDown ;);func (_gccg Paragraph )removeCommentRef (_ebee int64 )bool {for _ ,_ccedg :=range _gccg .X ().EG_PContent {for _ ,_efdgc :=range _ccedg .PContentChoice .EG_ContentRunContent {if _efdgc .ContentRunContentChoice .R !=nil {for _ ,_adcgf :=range _efdgc .ContentRunContentChoice .R .EG_RunInnerContent {if _adcgf .RunInnerContentChoice .CommentReference !=nil &&_adcgf .RunInnerContentChoice .CommentReference .IdAttr ==_ebee {_efdgc .ContentRunContentChoice .R =nil ;
return true ;};};};};};return false ;};

// SetDiagonalLayout enables or disables diagonal layout.
// By default, diagonal layout is disabled and we have horizontal layout.
func (_edefc *WatermarkText )EnableDiagonalLayout (value bool ){if _edefc ._cgddc !=nil &&_edefc ._cgddc .StyleAttr !=nil {_ddgc :=*_edefc ._cgddc .StyleAttr ;if value {_ddgc +="\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u003a\u0033\u0031\u0035\u003b";
}else {_ddgc =_cc .ReplaceAll (_ddgc ,"\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u003a\u0033\u0031\u0035\u003b","");};_edefc ._cgddc .StyleAttr =&_ddgc ;};};

// RemoveComment will remove comment with a given id from the document.
func (_dfcc *Document )RemoveComment (id int64 )bool {if !_dfcc .HasComments (){return false ;};_gccf :=_dfcc ._ecff ;var _abge int ;for _adbf ,_ecac :=range _gccf .CT_Comments .Comment {if _ecac .IdAttr ==id {_abge =_adbf ;break ;};};_dddg :=_gccf .CT_Comments .Comment [:_abge ];
_dddg =append (_dddg ,_gccf .CT_Comments .Comment [_abge +1:len (_gccf .CT_Comments .Comment )]...);_gccf .CT_Comments .Comment =_dddg ;for _ ,_dadd :=range _dfcc .Paragraphs (){if _dadd .removeCommentRange (id ){_dadd .removeCommentRef (id );break ;};
};_dfcc .reorderComments ();return true ;};

// Comment is run's comment component.
type Comment struct{_ebdc *Document ;_ebdf *_be .CT_Comment ;};

// ParagraphProperties are the properties for a paragraph.
type ParagraphProperties struct{_ceacb *Document ;_fbaa *_be .CT_PPr ;};