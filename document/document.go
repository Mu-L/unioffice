//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

/*
Package document provides creation, reading, and writing of ECMA 376 Open
Office XML documents.

Example:

	doc := document.New()
	para := doc.AddParagraph()
	run := para.AddRun()
	run.SetText("foo")
	doc.SaveToFile("foo.docx")
*/
package document ;import (_dcd "archive/zip";_ec "bytes";_f "encoding/xml";_cg "errors";_db "fmt";_c "github.com/unidoc/unioffice/v2";_ff "github.com/unidoc/unioffice/v2/color";_cd "github.com/unidoc/unioffice/v2/common";_ac "github.com/unidoc/unioffice/v2/common/axcontrol";
_dg "github.com/unidoc/unioffice/v2/common/logger";_bg "github.com/unidoc/unioffice/v2/common/tempstorage";_gb "github.com/unidoc/unioffice/v2/internal/formatutils";_ge "github.com/unidoc/unioffice/v2/internal/license";_bf "github.com/unidoc/unioffice/v2/measurement";
_ea "github.com/unidoc/unioffice/v2/schema/schemas.microsoft.com/office/activeX";_da "github.com/unidoc/unioffice/v2/schema/soo/dml";_gea "github.com/unidoc/unioffice/v2/schema/soo/dml/chart";_ggg "github.com/unidoc/unioffice/v2/schema/soo/dml/picture";
_bac "github.com/unidoc/unioffice/v2/schema/soo/ofc/sharedTypes";_fc "github.com/unidoc/unioffice/v2/schema/soo/pkg/relationships";_aag "github.com/unidoc/unioffice/v2/schema/soo/wml";_ccc "github.com/unidoc/unioffice/v2/schema/urn/schemas_microsoft_com/vml";
_gg "github.com/unidoc/unioffice/v2/vmldrawing";_aa "github.com/unidoc/unioffice/v2/zippkg";_ba "image";_dc "image/jpeg";_e "io";_d "math/rand";_ab "os";_ca "path/filepath";_cc "regexp";_g "strconv";_ag "strings";_b "time";_af "unicode";);

// ReplaceTextByRegexp replace text inside node using regexp.
func (_afcg *Nodes )ReplaceTextByRegexp (expr *_cc .Regexp ,newText string ){for _ ,_fcfb :=range _afcg ._aeecg {_fcfb .ReplaceTextByRegexp (expr ,newText );};};

// SetKeepWithNext controls if this paragraph should be kept with the next.
func (_ffcc ParagraphProperties )SetKeepWithNext (b bool ){if !b {_ffcc ._ggac .KeepNext =nil ;}else {_ffcc ._ggac .KeepNext =_aag .NewCT_OnOff ();};};

// RemoveTable remove table element from document.
func (_dege *Document )RemoveTable (tbl Table ){if _dege ._ffb .Body ==nil {return ;};for _ ,_cgba :=range _dege ._ffb .Body .EG_BlockLevelElts {for _ ,_ffbg :=range _cgba .BlockLevelEltsChoice .EG_ContentBlockContent {for _cgc ,_aaba :=range _ffbg .ContentBlockContentChoice .Tbl {if _aaba ==tbl ._bgcdd {copy (_ffbg .ContentBlockContentChoice .Tbl [_cgc :],_ffbg .ContentBlockContentChoice .Tbl [_cgc +1:]);
_ffbg .ContentBlockContentChoice .Tbl =_ffbg .ContentBlockContentChoice .Tbl [0:len (_ffbg .ContentBlockContentChoice .Tbl )-1];return ;};};if _ffbg .ContentBlockContentChoice .Sdt !=nil &&_ffbg .ContentBlockContentChoice .Sdt .SdtContent !=nil {for _ ,_ddbf :=range _ffbg .ContentBlockContentChoice .Sdt .SdtContent .EG_ContentBlockContent {if _ddbf .ContentBlockContentChoice .P !=nil {for _decc ,_bgc :=range _ddbf .ContentBlockContentChoice .Tbl {if _bgc ==tbl ._bgcdd {copy (_ffbg .ContentBlockContentChoice .Tbl [_decc :],_ffbg .ContentBlockContentChoice .Tbl [_decc +1:]);
_ffbg .ContentBlockContentChoice .Tbl =_ffbg .ContentBlockContentChoice .Tbl [0:len (_ffbg .ContentBlockContentChoice .Tbl )-1];return ;};};};};};};};};

// DocRels returns document relationship.
func (_bagd *Document )DocRels ()_cd .Relationships {return _bagd ._eeb };func (_cded Paragraph )ensurePPr (){if _cded ._dbgba .PPr ==nil {_cded ._dbgba .PPr =_aag .NewCT_PPr ();};};func (_bdd Comment )id ()int64 {return _bdd ._edac .IdAttr };

// HasComments checks if the document contains comments.
func (_ceaf *Document )HasComments ()bool {return _ceaf ._abb !=nil };

// Nodes return the document's element as nodes.
func (_ggfae *Document )Nodes ()Nodes {_gagd :=[]Node {};for _ ,_abcf :=range _ggfae ._ffb .Body .EG_BlockLevelElts {_gagd =append (_gagd ,_ebgc (_ggfae ,_abcf .BlockLevelEltsChoice .EG_ContentBlockContent ,nil )...);};if _ggfae ._ffb .Body .SectPr !=nil {_gagd =append (_gagd ,Node {_geed :_ggfae ._ffb .Body .SectPr });
};_dacge :=Nodes {_aeecg :_gagd };return _dacge ;};

// ExtractFromFooter returns text from the document footer as an array of TextItems.
func ExtractFromFooter (footer *_aag .Ftr )[]TextItem {var _cgabe []TextItem ;for _ ,_fceb :=range footer .EG_BlockLevelElts {_cgabe =append (_cgabe ,_efeb (_fceb .BlockLevelEltsChoice .EG_ContentBlockContent ,nil )...);};return _cgabe ;};

// SetStyle sets the table style name.
func (_dccgg TableProperties )SetStyle (name string ){if name ==""{_dccgg ._abgbf .TblStyle =nil ;}else {_dccgg ._abgbf .TblStyle =_aag .NewCT_String ();_dccgg ._abgbf .TblStyle .ValAttr =name ;};};

// SetHeader sets a section header.
func (_cffg Section )SetHeader (h Header ,t _aag .ST_HdrFtr ){_dgccf :=_aag .NewEG_HdrFtrReferences ();_cffg ._fcee .EG_HdrFtrReferences =append (_cffg ._fcee .EG_HdrFtrReferences ,_dgccf );_dgccf .HdrFtrReferencesChoice .HeaderReference =_aag .NewCT_HdrFtrRef ();
_dgccf .HdrFtrReferencesChoice .HeaderReference .TypeAttr =t ;_dbge :=_cffg ._cfbf ._eeb .FindRIDForN (h .Index (),_c .HeaderType );if _dbge ==""{_dg .Log .Debug ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0068\u0065\u0061\u0064\u0065r \u0049\u0044");
};_dgccf .HdrFtrReferencesChoice .HeaderReference .IdAttr =_dbge ;};

// FindNodeByStyleId return slice of node base on style id.
func (_cedc *Nodes )FindNodeByStyleId (styleId string )[]Node {_babg :=[]Node {};for _ ,_cgeag :=range _cedc ._aeecg {switch _cadc :=_cgeag ._geed .(type ){case *Paragraph :if _cadc !=nil &&_cadc .Style ()==styleId {_babg =append (_babg ,_cgeag );};case *Table :if _cadc !=nil &&_cadc .Style ()==styleId {_babg =append (_babg ,_cgeag );
};};_gbafd :=Nodes {_aeecg :_cgeag .Children };_babg =append (_babg ,_gbafd .FindNodeByStyleId (styleId )...);};return _babg ;};func (_bdcce *WatermarkPicture )findNode (_ddgac *_c .XSDAny ,_aebea string )*_c .XSDAny {for _ ,_dgdgd :=range _ddgac .Nodes {if _dgdgd .XMLName .Local ==_aebea {return _dgdgd ;
};};return nil ;};

// X return element of Node as interface, can be either *Paragraph, *Table and Run.
func (_bgabc *Node )X ()interface{}{return _bgabc ._geed };

// InsertStyle insert style to styles.
func (_ecgg Styles )InsertStyle (ss Style ){_ecgg ._gcdgc .Style =append (_ecgg ._gcdgc .Style ,ss .X ())};func _fedbb ()*_ccc .Path {_fgggf :=_ccc .NewPath ();_fgggf .TextpathokAttr =_bac .ST_TrueFalseTrue ;_fgggf .ConnecttypeAttr =_ccc .OfcST_ConnectTypeCustom ;
_cbbd :="\u0040\u0039\u002c0;\u0040\u0031\u0030\u002c\u0031\u0030\u0038\u0030\u0030;\u00401\u0031,\u00321\u0036\u0030\u0030\u003b\u0040\u0031\u0032\u002c\u0031\u0030\u0038\u0030\u0030";_fgggf .ConnectlocsAttr =&_cbbd ;_cfgb :="\u0032\u0037\u0030,\u0031\u0038\u0030\u002c\u0039\u0030\u002c\u0030";
_fgggf .ConnectanglesAttr =&_cfgb ;return _fgggf ;};func (_ecefe *Document )insertParagraph (_cgggc Paragraph ,_cgbd bool )Paragraph {if _ecefe ._ffb .Body ==nil {return _ecefe .AddParagraph ();};_gcff :=_cgggc .X ();for _ ,_aeec :=range _ecefe ._ffb .Body .EG_BlockLevelElts {for _ ,_dgeae :=range _aeec .BlockLevelEltsChoice .EG_ContentBlockContent {for _cdgac ,_fgbb :=range _dgeae .ContentBlockContentChoice .P {if _fgbb ==_gcff {_eacc :=_aag .NewCT_P ();
_dgeae .ContentBlockContentChoice .P =append (_dgeae .ContentBlockContentChoice .P ,nil );if _cgbd {copy (_dgeae .ContentBlockContentChoice .P [_cdgac +1:],_dgeae .ContentBlockContentChoice .P [_cdgac :]);_dgeae .ContentBlockContentChoice .P [_cdgac ]=_eacc ;
}else {copy (_dgeae .ContentBlockContentChoice .P [_cdgac +2:],_dgeae .ContentBlockContentChoice .P [_cdgac +1:]);_dgeae .ContentBlockContentChoice .P [_cdgac +1]=_eacc ;};return Paragraph {_ecefe ,_eacc };};};for _ ,_bfcbeb :=range _dgeae .ContentBlockContentChoice .Tbl {for _ ,_edfac :=range _bfcbeb .EG_ContentRowContent {for _ ,_cadgg :=range _edfac .ContentRowContentChoice .Tr {for _ ,_adb :=range _cadgg .EG_ContentCellContent {for _ ,_gdabe :=range _adb .ContentCellContentChoice .Tc {for _ ,_cfbcd :=range _gdabe .EG_BlockLevelElts {for _ ,_dcda :=range _cfbcd .BlockLevelEltsChoice .EG_ContentBlockContent {for _degd ,_agfbd :=range _dcda .ContentBlockContentChoice .P {if _agfbd ==_gcff {_dcbe :=_aag .NewCT_P ();
_dcda .ContentBlockContentChoice .P =append (_dcda .ContentBlockContentChoice .P ,nil );if _cgbd {copy (_dcda .ContentBlockContentChoice .P [_degd +1:],_dcda .ContentBlockContentChoice .P [_degd :]);_dcda .ContentBlockContentChoice .P [_degd ]=_dcbe ;}else {copy (_dcda .ContentBlockContentChoice .P [_degd +2:],_dcda .ContentBlockContentChoice .P [_degd +1:]);
_dcda .ContentBlockContentChoice .P [_degd +1]=_dcbe ;};return Paragraph {_ecefe ,_dcbe };};};};};};};};};};if _dgeae .ContentBlockContentChoice .Sdt !=nil &&_dgeae .ContentBlockContentChoice .Sdt .SdtContent !=nil {for _ ,_eaae :=range _dgeae .ContentBlockContentChoice .Sdt .SdtContent .EG_ContentBlockContent {for _gged ,_bfdf :=range _eaae .ContentBlockContentChoice .P {if _bfdf ==_gcff {_aaga :=_aag .NewCT_P ();
_eaae .ContentBlockContentChoice .P =append (_eaae .ContentBlockContentChoice .P ,nil );if _cgbd {copy (_eaae .ContentBlockContentChoice .P [_gged +1:],_eaae .ContentBlockContentChoice .P [_gged :]);_eaae .ContentBlockContentChoice .P [_gged ]=_aaga ;}else {copy (_eaae .ContentBlockContentChoice .P [_gged +2:],_eaae .ContentBlockContentChoice .P [_gged +1:]);
_eaae .ContentBlockContentChoice .P [_gged +1]=_aaga ;};return Paragraph {_ecefe ,_aaga };};};};};};};return _ecefe .AddParagraph ();};func (_eeae Paragraph )addBeginFldChar (_cbgbc string )*_aag .CT_FFData {_aceg :=_eeae .addFldChar ();_aceg .FldCharTypeAttr =_aag .ST_FldCharTypeBegin ;
if _aceg .FldCharChoice ==nil {_aceg .FldCharChoice =_aag .NewCT_FldCharChoice ();};_aceg .FldCharChoice .FfData =_aag .NewCT_FFData ();_bceeb :=_aag .NewCT_FFName ();_bceeb .ValAttr =&_cbgbc ;_aceg .FldCharChoice .FfData .FFDataChoice =[]*_aag .CT_FFDataChoice {&_aag .CT_FFDataChoice {Name :_bceeb }};
return _aceg .FldCharChoice .FfData ;};

// SetTopPct sets the cell top margin
func (_aaa CellMargins )SetTopPct (pct float64 ){_aaa ._fgef .Top =_aag .NewCT_TblWidth ();_faa (_aaa ._fgef .Top ,pct );};

// AddParagraph adds a paragraph to the footnote.
func (_ebegc Footnote )AddParagraph ()Paragraph {_deedcf :=_aag .NewEG_ContentBlockContent ();_efdc :=len (_ebegc ._deedc .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent );_ebegc ._deedc .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent =append (_ebegc ._deedc .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent ,_deedcf );
_dgdfd :=_aag .NewCT_P ();var _caca *_aag .CT_String ;if _efdc !=0{_gecef :=len (_ebegc ._deedc .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent [_efdc -1].ContentBlockContentChoice .P );_caca =_ebegc ._deedc .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent [_efdc -1].ContentBlockContentChoice .P [_gecef -1].PPr .PStyle ;
}else {_caca =_aag .NewCT_String ();_caca .ValAttr =FootnoteTextStyleId ;};_deedcf .ContentBlockContentChoice .P =append (_deedcf .ContentBlockContentChoice .P ,_dgdfd );_baggc :=Paragraph {_ebegc ._adae ,_dgdfd };_baggc ._dbgba .PPr =_aag .NewCT_PPr ();
_baggc ._dbgba .PPr .PStyle =_caca ;_baggc ._dbgba .PPr .RPr =_aag .NewCT_ParaRPr ();return _baggc ;};

// SetNumberingDefinition sets the numbering definition ID via a NumberingDefinition
// defined in numbering.xml
func (_ffaee Paragraph )SetNumberingDefinition (nd NumberingDefinition ){_ffaee .ensurePPr ();if _ffaee ._dbgba .PPr .NumPr ==nil {_ffaee ._dbgba .PPr .NumPr =_aag .NewCT_NumPr ();};_egbb :=_aag .NewCT_DecimalNumber ();_aeee :=int64 (-1);for _ ,_gfcbb :=range _ffaee ._gbga .Numbering ._gbda .Num {if _gfcbb .AbstractNumId !=nil &&_gfcbb .AbstractNumId .ValAttr ==nd .AbstractNumberID (){_aeee =_gfcbb .NumIdAttr ;
};};if _aeee ==-1{_egdad :=_aag .NewCT_Num ();_ffaee ._gbga .Numbering ._gbda .Num =append (_ffaee ._gbga .Numbering ._gbda .Num ,_egdad );_egdad .NumIdAttr =int64 (len (_ffaee ._gbga .Numbering ._gbda .Num ));_egdad .AbstractNumId =_aag .NewCT_DecimalNumber ();
_egdad .AbstractNumId .ValAttr =nd .AbstractNumberID ();_aeee =_egdad .NumIdAttr ;};_egbb .ValAttr =_aeee ;_ffaee ._dbgba .PPr .NumPr .NumId =_egbb ;};

// AddParagraph adds a paragraph to the comment.
func (_bdf Comment )AddParagraph ()Paragraph {_gdgb :=_aag .NewEG_ContentBlockContent ();_bdf ._edac .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent =append (_bdf ._edac .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent ,_gdgb );
_fbag :=_aag .NewCT_P ();_gdgb .ContentBlockContentChoice .P =append (_gdgb .ContentBlockContentChoice .P ,_fbag );_eba :=Paragraph {_bdf ._gbbg ,_fbag };_eba ._dbgba .PPr =_aag .NewCT_PPr ();_eba ._dbgba .PPr .RPr =_aag .NewCT_ParaRPr ();return _eba ;
};

// ExtractFromHeader returns text from the document header as an array of TextItems.
func ExtractFromHeader (header *_aag .Hdr )[]TextItem {var _aggce []TextItem ;for _ ,_gacc :=range header .EG_BlockLevelElts {_aggce =append (_aggce ,_efeb (_gacc .BlockLevelEltsChoice .EG_ContentBlockContent ,nil )...);};return _aggce ;};

// SetVerticalBanding controls the conditional formatting for vertical banding.
func (_dcbfe TableLook )SetVerticalBanding (on bool ){if !on {_dcbfe ._cagee .NoVBandAttr =&_bac .ST_OnOff {};_dcbfe ._cagee .NoVBandAttr .ST_OnOff1 =_bac .ST_OnOff1On ;}else {_dcbfe ._cagee .NoVBandAttr =&_bac .ST_OnOff {};_dcbfe ._cagee .NoVBandAttr .ST_OnOff1 =_bac .ST_OnOff1Off ;
};};

// Text returns the underlying text in the run.
func (_acbdf Run )Text ()string {if len (_acbdf ._dcgfd .EG_RunInnerContent )==0{return "";};_gaec :=_ec .Buffer {};for _ ,_ecbac :=range _acbdf ._dcgfd .EG_RunInnerContent {if _ecbac .RunInnerContentChoice .T !=nil {_gaec .WriteString (_ecbac .RunInnerContentChoice .T .Content );
};if _ecbac .RunInnerContentChoice .Tab !=nil {_gaec .WriteByte ('\t');};};return _gaec .String ();};

// AddLevel adds a new numbering level to a NumberingDefinition.
func (_eefcf NumberingDefinition )AddLevel ()NumberingLevel {_eaaca :=_aag .NewCT_Lvl ();_eaaca .Start =&_aag .CT_DecimalNumber {ValAttr :1};_eaaca .IlvlAttr =int64 (len (_eefcf ._aaee .Lvl ));_eefcf ._aaee .Lvl =append (_eefcf ._aaee .Lvl ,_eaaca );return NumberingLevel {_eaaca };
};var (FootnoteTextStyleId ="\u0046\u006f\u006ft\u006e\u006f\u0074\u0065\u0054\u0065\u0078\u0074";_ccge ="\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0052\u0065\u0066\u0065r\u0065\u006e\u0063\u0065";EndnoteTextStyleId ="E\u006e\u0064\u006e\u006f\u0074\u0065\u0054\u0065\u0078\u0074";
_gaf ="\u0045\u006ed\u006e\u006f\u0074e\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065";_bbf =uint64 (20);_gffg ="\u0043\u006fm\u006d\u0065\u006et\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065";_ebg ="C\u006f\u006d\u006d\u0065\u006e\u0074\u0054\u0065\u0078\u0074";
_fgd ="\u0043o\u006dm\u0065\u006e\u0074\u0054\u0065\u0078\u0074\u0043\u0068\u0061\u0072";_bdeb ="\u0043\u006f\u006d\u006d\u0065\u006e\u0074\u0053\u0075b\u006a\u0065\u0063\u0074";_bggc ="\u0043o\u006dm\u0065\u006e\u0074\u0053\u0075b\u006a\u0065c\u0074\u0043\u0068\u0061\u0072";
_egd =uint64 (20);_fca =uint64 (16););

// Validate validates the structure and in cases where it't possible, the ranges
// of elements within a document. A validation error dones't mean that the
// document won't work in MS Word or LibreOffice, but it's worth checking into.
func (_dgbd *Document )Validate ()error {if _dgbd ==nil ||_dgbd ._ffb ==nil {return _cg .New ("\u0064o\u0063\u0075m\u0065\u006e\u0074\u0020n\u006f\u0074\u0020i\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0065d \u0063\u006f\u0072r\u0065\u0063t\u006c\u0079\u002c\u0020\u006e\u0069l\u0020\u0062a\u0073\u0065");
};for _ ,_fdf :=range []func ()error {_dgbd .validateTableCells ,_dgbd .validateBookmarks }{if _fcga :=_fdf ();_fcga !=nil {return _fcga ;};};if _aagda :=_dgbd ._ffb .Validate ();_aagda !=nil {return _aagda ;};return nil ;};

// MergeFields returns the list of all mail merge fields found in the document.
func (_adef Document )MergeFields ()[]string {_fgga :=map[string ]struct{}{};for _ ,_fafgf :=range _adef .mergeFields (){_fgga [_fafgf ._bggcd ]=struct{}{};};_agdf :=[]string {};for _dddg :=range _fgga {_agdf =append (_agdf ,_dddg );};return _agdf ;};

// SetNumberingDefinitionByID sets the numbering definition ID directly, which must
// match an ID defined in numbering.xml
func (_dgcc Paragraph )SetNumberingDefinitionByID (abstractNumberID int64 ){_dgcc .ensurePPr ();if _dgcc ._dbgba .PPr .NumPr ==nil {_dgcc ._dbgba .PPr .NumPr =_aag .NewCT_NumPr ();};_gdad :=_aag .NewCT_DecimalNumber ();_gdad .ValAttr =int64 (abstractNumberID );
_dgcc ._dbgba .PPr .NumPr .NumId =_gdad ;};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_aeabe Paragraph )SetLineSpacing (d _bf .Distance ,rule _aag .ST_LineSpacingRule ){_aeabe .ensurePPr ();if _aeabe ._dbgba .PPr .Spacing ==nil {_aeabe ._dbgba .PPr .Spacing =_aag .NewCT_Spacing ();};_cfgg :=_aeabe ._dbgba .PPr .Spacing ;if rule ==_aag .ST_LineSpacingRuleUnset {_cfgg .LineRuleAttr =_aag .ST_LineSpacingRuleUnset ;
_cfgg .LineAttr =nil ;}else {_cfgg .LineRuleAttr =rule ;_cfgg .LineAttr =&_aag .ST_SignedTwipsMeasure {};_cfgg .LineAttr .Int64 =_c .Int64 (int64 (d /_bf .Twips ));};};

// Type returns the type of the style.
func (_ebcafg Style )Type ()_aag .ST_StyleType {return _ebcafg ._bcedg .TypeAttr };func (_bdaa *Document )addFootnotes (){_bdaa ._fbgg =_aag .NewFootnotes ();_bdaa ._fbgg .CT_Footnotes =_aag .CT_Footnotes {};_bdaa ._fbgg .Footnote =make ([]*_aag .CT_FtnEdn ,0);
_bdaa .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074n\u006f\u0074\u0065\u0073\u002b\u0078m\u006c");
_bdaa ._eeb .AddRelationship ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0073\u002e\u0078\u006d\u006c",_c .FootNotesType );_bba :=_bdaa .Styles .AddStyle (FootnoteTextStyleId ,_aag .ST_StyleTypeParagraph ,false );_bba .SetName ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0020\u0054\u0065\u0078\u0074");
_bba .SetBasedOn ("\u004e\u006f\u0072\u006d\u0061\u006c");_dbfg :=_bba .ParagraphProperties ();_dbfg .X ().SuppressLineNumbers =&_aag .CT_OnOff {};_dggf :=_bba .RunProperties ();_dggf .X ().Sz =&_aag .CT_HpsMeasure {ValAttr :_aag .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_bbf }};
_dggf .X ().SzCs =&_aag .CT_HpsMeasure {ValAttr :_aag .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_bbf }};_gdfg :=_bdaa .Styles .AddStyle (_ccge ,_aag .ST_StyleTypeCharacter ,false );_gdfg .SetName ("\u0046o\u006ft\u006e\u006f\u0074\u0065\u0020R\u0065\u0066e\u0072\u0065\u006e\u0063\u0065");
_gbdd :=_gdfg .RunProperties ();_gbdd .X ().VertAlign =&_aag .CT_VerticalAlignRun {ValAttr :_bac .ST_VerticalAlignRunSuperscript };_bdaa .addFootnoteSeparator ();};

// FindNodeByStyleName return slice of node base on style name.
func (_aeaae *Nodes )FindNodeByStyleName (styleName string )[]Node {_fbage :=[]Node {};for _ ,_fbgbd :=range _aeaae ._aeecg {switch _gebg :=_fbgbd ._geed .(type ){case *Paragraph :if _gebg !=nil {if _bcec ,_fgfd :=_fbgbd ._fgge .Styles .SearchStyleByName (styleName );
_fgfd {_acgcd :=_gebg .Style ();if _acgcd ==_bcec .StyleID (){_fbage =append (_fbage ,_fbgbd );};};};case *Table :if _gebg !=nil {if _cfbde ,_bdda :=_fbgbd ._fgge .Styles .SearchStyleByName (styleName );_bdda {_cagfe :=_gebg .Style ();if _cagfe ==_cfbde .StyleID (){_fbage =append (_fbage ,_fbgbd );
};};};};_afeee :=Nodes {_aeecg :_fbgbd .Children };_fbage =append (_fbage ,_afeee .FindNodeByStyleName (styleName )...);};return _fbage ;};func (_dfe *Document )removeFootnote (_ddbb int64 ){_eef :=_dfe ._fbgg ;var _efgd int ;for _fedcg ,_cgac :=range _eef .CT_Footnotes .Footnote {if _cgac .IdAttr ==_ddbb {_efgd =_fedcg ;
break ;};};_eef .CT_Footnotes .Footnote [_efgd ]=nil ;_eef .CT_Footnotes .Footnote [_efgd ]=_eef .CT_Footnotes .Footnote [len (_eef .CT_Footnotes .Footnote )-1];_eef .CT_Footnotes .Footnote =_eef .CT_Footnotes .Footnote [:len (_eef .CT_Footnotes .Footnote )-1];
_dfe .reorderFootnote ();_dfe .syncFootnoteSettings ();};func (_dbdb FormFieldType )String ()string {if _dbdb >=FormFieldType (len (_ffgg )-1){return _db .Sprintf ("\u0046\u006f\u0072\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_dbdb );
};return _ebcc [_ffgg [_dbdb ]:_ffgg [_dbdb +1]];};

// SetEffect sets a text effect on the run.
func (_cdaac RunProperties )SetEffect (e _aag .ST_TextEffect ){if e ==_aag .ST_TextEffectUnset {_cdaac ._gbeff .Effect =nil ;}else {_cdaac ._gbeff .Effect =_aag .NewCT_TextEffect ();_cdaac ._gbeff .Effect .ValAttr =e ;};};

// CellProperties returns the cell properties.
func (_eaeda TableConditionalFormatting )CellProperties ()CellProperties {if _eaeda ._gbgag .TcPr ==nil {_eaeda ._gbgag .TcPr =_aag .NewCT_TcPr ();};return CellProperties {_eaeda ._gbgag .TcPr };};func (_bdad *chart )RelId ()string {return _bdad ._bdb };


// SetColumnSpan sets the number of Grid Columns Spanned by the Cell.  This is used
// to give the appearance of merged cells.
func (_bgf CellProperties )SetColumnSpan (cols int ){if cols ==0{_bgf ._cfb .GridSpan =nil ;}else {_bgf ._cfb .GridSpan =_aag .NewCT_DecimalNumber ();_bgf ._cfb .GridSpan .ValAttr =int64 (cols );};};

// NewNumbering constructs a new numbering.
func NewNumbering ()Numbering {_bdeg :=_aag .NewNumbering ();return Numbering {_bdeg }};

// RemoveParagraph removes a paragraph from the endnote.
func (_dccdg Endnote )RemoveParagraph (p Paragraph ){for _ ,_cedf :=range _dccdg .content (){for _acab ,_gbcd :=range _cedf .ContentBlockContentChoice .P {if _gbcd ==p ._dbgba {copy (_cedf .ContentBlockContentChoice .P [_acab :],_cedf .ContentBlockContentChoice .P [_acab +1:]);
_cedf .ContentBlockContentChoice .P =_cedf .ContentBlockContentChoice .P [0:len (_cedf .ContentBlockContentChoice .P )-1];return ;};};};};func (_dfea Footnote )content ()[]*_aag .EG_ContentBlockContent {var _dcaa []*_aag .EG_ContentBlockContent ;for _ ,_efbb :=range _dfea ._deedc .EG_BlockLevelElts {_dcaa =append (_dcaa ,_efbb .BlockLevelEltsChoice .EG_ContentBlockContent ...);
};return _dcaa ;};

// RemoveComment will remove comment with a given id from the document.
func (_dbde *Document )RemoveComment (id int64 )bool {if !_dbde .HasComments (){return false ;};_efca :=_dbde ._abb ;var _ecg int ;for _accb ,_bceg :=range _efca .CT_Comments .Comment {if _bceg .IdAttr ==id {_ecg =_accb ;break ;};};_cafe :=_efca .CT_Comments .Comment [:_ecg ];
_cafe =append (_cafe ,_efca .CT_Comments .Comment [_ecg +1:len (_efca .CT_Comments .Comment )]...);_efca .CT_Comments .Comment =_cafe ;for _ ,_bcbf :=range _dbde .Paragraphs (){if _bcbf .removeCommentRange (id ){_bcbf .removeCommentRef (id );break ;};};
_dbde .reorderComments ();return true ;};

// SetWindowControl controls if the first or last line of the paragraph is
// allowed to display on a separate page.
func (_dddaa ParagraphProperties )SetWindowControl (b bool ){if !b {_dddaa ._ggac .WidowControl =nil ;}else {_dddaa ._ggac .WidowControl =_aag .NewCT_OnOff ();};};

// UnderlineColor returns the hex color value of run underline.
func (_eabbd RunProperties )UnderlineColor ()string {if _fabga :=_eabbd ._gbeff .U ;_fabga !=nil {_dgdg :=_fabga .ColorAttr ;if _dgdg !=nil &&_dgdg .ST_HexColorRGB !=nil {return *_dgdg .ST_HexColorRGB ;};};return "";};

// IsBold returns true if the run has been set to bold.
func (_agfac RunProperties )IsBold ()bool {return _agfac .BoldValue ()==OnOffValueOn };

// SetPictureSize set watermark picture size with given width and height.
func (_dgdad *WatermarkPicture )SetPictureSize (width ,height int64 ){if _dgdad ._ffefa !=nil {_fbeaa :=_dgdad .GetShapeStyle ();_fbeaa .SetWidth (float64 (width )*_bf .Point );_fbeaa .SetHeight (float64 (height )*_bf .Point );_dgdad .SetShapeStyle (_fbeaa );
};};

// Styles is the document wide styles contained in styles.xml.
type Styles struct{_gcdgc *_aag .Styles };

// AddParagraph adds a paragraph to the header.
func (_gfgd Header )AddParagraph ()Paragraph {_bfce :=_aag .NewEG_ContentBlockContent ();_gfgd ._dcaf .EG_BlockLevelElts =append (_gfgd ._dcaf .EG_BlockLevelElts ,&_aag .EG_BlockLevelElts {BlockLevelEltsChoice :&_aag .EG_BlockLevelEltsChoice {EG_ContentBlockContent :[]*_aag .EG_ContentBlockContent {_bfce }}});
_ddag :=_aag .NewCT_P ();_bfce .ContentBlockContentChoice .P =append (_bfce .ContentBlockContentChoice .P ,_ddag );return Paragraph {_gfgd ._dcae ,_ddag };};

// SetPossibleValues sets possible values for a FormFieldTypeDropDown.
func (_edad FormField )SetPossibleValues (values []string ){if len (_edad ._daga .FFDataChoice )> 0{for _ ,_cebc :=range _edad ._daga .FFDataChoice {if _cebc .DdList !=nil {for _ ,_ffcbc :=range values {_bgccg :=_aag .NewCT_String ();_bgccg .ValAttr =_ffcbc ;
_cebc .DdList .ListEntry =append (_cebc .DdList .ListEntry ,_bgccg );};};};};};func (_baffe Document )mergeFields ()[]mergeFieldInfo {_abcg :=[]Paragraph {};_aefag :=[]mergeFieldInfo {};for _ ,_bgbf :=range _baffe .Tables (){for _ ,_faae :=range _bgbf .Rows (){for _ ,_feeda :=range _faae .Cells (){_abcg =append (_abcg ,_feeda .Paragraphs ()...);
};};};_abcg =append (_abcg ,_baffe .Paragraphs ()...);for _ ,_bbedg :=range _baffe .Headers (){_abcg =append (_abcg ,_bbedg .Paragraphs ()...);for _ ,_eabf :=range _bbedg .Tables (){for _ ,_ceafg :=range _eabf .Rows (){for _ ,_gbcg :=range _ceafg .Cells (){_abcg =append (_abcg ,_gbcg .Paragraphs ()...);
};};};};for _ ,_becd :=range _baffe .Footers (){_abcg =append (_abcg ,_becd .Paragraphs ()...);for _ ,_aaggg :=range _becd .Tables (){for _ ,_dbbb :=range _aaggg .Rows (){for _ ,_eadg :=range _dbbb .Cells (){_abcg =append (_abcg ,_eadg .Paragraphs ()...);
};};};};for _ ,_ebcf :=range _abcg {_bbdf :=_ebcf .Runs ();_edcd :=-1;_cbbe :=-1;_dbdec :=-1;_cecf :=mergeFieldInfo {};for _ ,_gfbbf :=range _ebcf ._dbgba .EG_PContent {for _ ,_gcfc :=range _gfbbf .PContentChoice .FldSimple {if _ag .Contains (_gcfc .InstrAttr ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){_caade :=_dabfd (_gcfc .InstrAttr );
_caade ._dcfed =true ;_caade ._fdgea =_ebcf ;_caade ._ebacc =_gfbbf ;_aefag =append (_aefag ,_caade );};};};for _eaea :=0;_eaea < len (_bbdf );_eaea ++{_edcg :=_bbdf [_eaea ];for _ ,_agaaa :=range _edcg .X ().EG_RunInnerContent {if _agaaa .RunInnerContentChoice .FldChar !=nil {switch _agaaa .RunInnerContentChoice .FldChar .FldCharTypeAttr {case _aag .ST_FldCharTypeBegin :_edcd =_eaea ;
case _aag .ST_FldCharTypeSeparate :_cbbe =_eaea ;case _aag .ST_FldCharTypeEnd :_dbdec =_eaea ;if _cecf ._bggcd !=""{_cecf ._fdgea =_ebcf ;_cecf ._addg =_edcd ;_cecf ._ggfab =_dbdec ;_cecf ._gfcae =_cbbe ;_aefag =append (_aefag ,_cecf );};_edcd =-1;_cbbe =-1;
_dbdec =-1;_cecf =mergeFieldInfo {};};}else if _agaaa .RunInnerContentChoice .InstrText !=nil &&_ag .Contains (_agaaa .RunInnerContentChoice .InstrText .Content ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){if _edcd !=-1&&_dbdec ==-1{_cecf =_dabfd (_agaaa .RunInnerContentChoice .InstrText .Content );
};};};};};return _aefag ;};

// HyperLink is a link within a document.
type HyperLink struct{_caaf *Document ;_dbdaf *_aag .CT_Hyperlink ;};

// RemoveMailMerge removes any mail merge settings
func (_dgac Settings )RemoveMailMerge (){_dgac ._cecfe .MailMerge =nil };

// Paragraphs returns the paragraphs defined in a header.
func (_bafce Header )Paragraphs ()[]Paragraph {_gaffd :=[]Paragraph {};for _ ,_cfef :=range _bafce ._dcaf .EG_BlockLevelElts {for _ ,_efcb :=range _cfef .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_cega :=range _efcb .ContentBlockContentChoice .P {_gaffd =append (_gaffd ,Paragraph {_bafce ._dcae ,_cega });
};};};for _ ,_ffdgd :=range _bafce .Tables (){for _ ,_dbdad :=range _ffdgd .Rows (){for _ ,_feed :=range _dbdad .Cells (){_gaffd =append (_gaffd ,_feed .Paragraphs ()...);};};};return _gaffd ;};

// GetWrapPathLineTo return wrapPath lineTo value.
func (_eb AnchorDrawWrapOptions )GetWrapPathLineTo ()[]*_da .CT_Point2D {return _eb ._gde };

// MailMerge finds mail merge fields and replaces them with the text provided.  It also removes
// the mail merge source info from the document settings.
func (_edfeg *Document )MailMerge (mergeContent map[string ]string ){_abga :=_edfeg .mergeFields ();_dafgbc :=map[Paragraph ][]Run {};for _ ,_fbfa :=range _abga {_aeeg ,_gfefb :=mergeContent [_fbfa ._bggcd ];if _gfefb {if _fbfa ._bcdf {_aeeg =_ag .ToUpper (_aeeg );
}else if _fbfa ._cgagb {_aeeg =_ag .ToLower (_aeeg );}else if _fbfa ._gcbd {_aeeg =_ag .Title (_aeeg );}else if _fbfa ._gceb {_bafe :=_ec .Buffer {};for _ggeg ,_edead :=range _aeeg {if _ggeg ==0{_bafe .WriteRune (_af .ToUpper (_edead ));}else {_bafe .WriteRune (_edead );
};};_aeeg =_bafe .String ();};if _aeeg !=""&&_fbfa ._fbdf !=""{_aeeg =_fbfa ._fbdf +_aeeg ;};if _aeeg !=""&&_fbfa ._baga !=""{_aeeg =_aeeg +_fbfa ._baga ;};};if _fbfa ._dcfed {if len (_fbfa ._ebacc .PContentChoice .FldSimple )==1&&len (_fbfa ._ebacc .PContentChoice .FldSimple [0].EG_PContent )==1&&len (_fbfa ._ebacc .PContentChoice .FldSimple [0].EG_PContent [0].PContentChoice .EG_ContentRunContent )==1{_dbabf :=_aag .NewEG_ContentRunContent ();
_dbabf .ContentRunContentChoice .R =_fbfa ._ebacc .PContentChoice .FldSimple [0].EG_PContent [0].PContentChoice .EG_ContentRunContent [0].ContentRunContentChoice .R ;_fbfa ._ebacc .PContentChoice .FldSimple =nil ;_gfee :=Run {_edfeg ,_dbabf .ContentRunContentChoice .R };
_gfee .ClearContent ();_gfee .AddText (_aeeg );_fbfa ._ebacc .PContentChoice .EG_ContentRunContent =append (_fbfa ._ebacc .PContentChoice .EG_ContentRunContent ,_dbabf );};}else {_baaca :=_fbfa ._fdgea .Runs ();for _bbfegg :=_fbfa ._addg ;_bbfegg <=_fbfa ._ggfab ;
_bbfegg ++{if _bbfegg ==_fbfa ._gfcae +1{_baaca [_bbfegg ].ClearContent ();_baaca [_bbfegg ].AddText (_aeeg );}else {_dafgbc [_fbfa ._fdgea ]=append (_dafgbc [_fbfa ._fdgea ],_baaca [_bbfegg ]);};};};};for _gace ,_eeff :=range _dafgbc {for _ ,_aggfa :=range _eeff {_gace .RemoveRun (_aggfa );
};};_edfeg .Settings .RemoveMailMerge ();};

// RemoveRun removes a child run from a paragraph.
func (_fbgdf Paragraph )RemoveRun (r Run ){for _ ,_gdgg :=range _fbgdf ._dbgba .EG_PContent {for _gbfc ,_facc :=range _gdgg .PContentChoice .EG_ContentRunContent {if _facc .ContentRunContentChoice .R ==r ._dcgfd {copy (_gdgg .PContentChoice .EG_ContentRunContent [_gbfc :],_gdgg .PContentChoice .EG_ContentRunContent [_gbfc +1:]);
_gdgg .PContentChoice .EG_ContentRunContent =_gdgg .PContentChoice .EG_ContentRunContent [0:len (_gdgg .PContentChoice .EG_ContentRunContent )-1];};if _facc .ContentRunContentChoice .Sdt !=nil &&_facc .ContentRunContentChoice .Sdt .SdtContent !=nil {for _ ,_ddbd :=range _facc .ContentRunContentChoice .Sdt .SdtContent .EG_PContent {for _gdfe ,_gbad :=range _ddbd .PContentChoice .EG_ContentRunContent {if _gbad .ContentRunContentChoice .R ==r ._dcgfd {copy (_ddbd .PContentChoice .EG_ContentRunContent [_gdfe :],_ddbd .PContentChoice .EG_ContentRunContent [_gdfe +1:]);
_ddbd .PContentChoice .EG_ContentRunContent =_ddbd .PContentChoice .EG_ContentRunContent [0:len (_ddbd .PContentChoice .EG_ContentRunContent )-1];};};};};};};};

// TableLook is the conditional formatting associated with a table style that
// has been assigned to a table.
type TableLook struct{_cagee *_aag .CT_TblLook };

// SetLeftIndent controls left indent of paragraph.
func (_caaa Paragraph )SetLeftIndent (m _bf .Distance ){_caaa .ensurePPr ();_gebd :=_caaa ._dbgba .PPr ;if _gebd .Ind ==nil {_gebd .Ind =_aag .NewCT_Ind ();};if m ==_bf .Zero {_gebd .Ind .LeftAttr =nil ;}else {_gebd .Ind .LeftAttr =&_aag .ST_SignedTwipsMeasure {};
_gebd .Ind .LeftAttr .Int64 =_c .Int64 (int64 (m /_bf .Twips ));};};

// NumberingDefinition defines a numbering definition for a list of pragraphs.
type NumberingDefinition struct{_aaee *_aag .CT_AbstractNum };func _ggbe ()*_ccc .Imagedata {_ecad :=_ccc .NewImagedata ();_ffggf :="\u0072\u0049\u0064\u0031";_cfad :="\u0057A\u0054\u0045\u0052\u004d\u0041\u0052K";_ecad .IdAttr =&_ffggf ;_ecad .TitleAttr =&_cfad ;
return _ecad ;};func _ebdgf (_bggbe *_aag .CT_Border ,_gdga _aag .ST_Border ,_fdgdg _ff .Color ,_aabdf _bf .Distance ){_bggbe .ValAttr =_gdga ;_bggbe .ColorAttr =&_aag .ST_HexColor {};if _fdgdg .IsAuto (){_bggbe .ColorAttr .ST_HexColorAuto =_aag .ST_HexColorAutoAuto ;
}else {_bggbe .ColorAttr .ST_HexColorRGB =_fdgdg .AsRGBString ();};if _aabdf !=_bf .Zero {_bggbe .SzAttr =_c .Uint64 (uint64 (_aabdf /_bf .Point *8));};};func (_accg *Document )reorderFootnote (){_gddf :=int64 (1);_dgbb :=map[int64 ]int64 {};for _ ,_edfa :=range _accg ._fbgg .Footnote {switch _edfa .TypeAttr {case _aag .ST_FtnEdnSeparator :_edfa .IdAttr =-1;
break ;case _aag .ST_FtnEdnContinuationSeparator :_edfa .IdAttr =0;break ;default:_dgbb [_edfa .IdAttr ]=_gddf ;_edfa .IdAttr =_gddf ;_gddf ++;};};for _ ,_bdcb :=range _accg .Paragraphs (){for _ ,_bcab :=range _bdcb .Runs (){if _fedb ,_aacd :=_bcab .IsFootnote ();
_fedb {_bcab .X ().EG_RunInnerContent [0].RunInnerContentChoice .FootnoteReference .IdAttr =_dgbb [_aacd ];};};};};

// SetNextStyle sets the style that the next paragraph will use.
func (_cdefd Style )SetNextStyle (name string ){if name ==""{_cdefd ._bcedg .Next =nil ;}else {_cdefd ._bcedg .Next =_aag .NewCT_String ();_cdefd ._bcedg .Next .ValAttr =name ;};};

// SetTextWrapThrough sets the text wrap to through with a give wrap type.
func (_gfa AnchoredDrawing )SetTextWrapThrough (option *AnchorDrawWrapOptions ){_gfa ._ae .WrapTypeChoice =&_aag .WdEG_WrapTypeChoice {};_gfa ._ae .WrapTypeChoice .WrapThrough =_aag .NewWdCT_WrapThrough ();_gfa ._ae .WrapTypeChoice .WrapThrough .WrapTextAttr =_aag .WdST_WrapTextBothSides ;
_ad :=false ;_gfa ._ae .WrapTypeChoice .WrapThrough .WrapPolygon .EditedAttr =&_ad ;if option ==nil {option =NewAnchorDrawWrapOptions ();};_gfa ._ae .WrapTypeChoice .WrapThrough .WrapPolygon .Start =option .GetWrapPathStart ();_gfa ._ae .WrapTypeChoice .WrapThrough .WrapPolygon .LineTo =option .GetWrapPathLineTo ();
_gfa ._ae .LayoutInCellAttr =true ;_gfa ._ae .AllowOverlapAttr =true ;};

// RunProperties returns the run style properties.
func (_daggc Style )RunProperties ()RunProperties {if _daggc ._bcedg .RPr ==nil {_daggc ._bcedg .RPr =_aag .NewCT_RPr ();};return RunProperties {_daggc ._bcedg .RPr };};

// AddRun adds a run to a paragraph.
func (_fcecb Paragraph )AddRun ()Run {_bcbac :=_aag .NewEG_PContent ();_fcecb ._dbgba .EG_PContent =append (_fcecb ._dbgba .EG_PContent ,_bcbac );_dadd :=_aag .NewEG_ContentRunContent ();_bcbac .PContentChoice .EG_ContentRunContent =append (_bcbac .PContentChoice .EG_ContentRunContent ,_dadd );
_eeab :=_aag .NewCT_R ();_dadd .ContentRunContentChoice .R =_eeab ;return Run {_fcecb ._gbga ,_eeab };};

// GetImage returns the ImageRef associated with an InlineDrawing.
func (_cbaea InlineDrawing )GetImage ()(_cd .ImageRef ,bool ){_faeef :=_cbaea ._eeaa .Graphic .GraphicData .Any ;if len (_faeef )> 0{for _ ,_fbedg :=range _faeef {_eadda ,_dagg :=_fbedg .(*_ggg .Pic );if _dagg {if _eadda .BlipFill !=nil &&_eadda .BlipFill .Blip !=nil &&_eadda .BlipFill .Blip .EmbedAttr !=nil {return _cbaea ._fdae .GetImageByRelID (*_eadda .BlipFill .Blip .EmbedAttr );
};};};};return _cd .ImageRef {},false ;};

// FormFieldType is the type of the form field.
//
//go:generate stringer -type=FormFieldType
type FormFieldType byte ;

// InsertRunAfter inserts a run in the paragraph after the relative run.
func (_bgbc Paragraph )InsertRunAfter (relativeTo Run )Run {return _bgbc .insertRun (relativeTo ,false )};

// BodySection returns the default body section used for all preceding
// paragraphs until the previous Section. If there is no previous sections, the
// body section applies to the entire document.
func (_egdb *Document )BodySection ()Section {if _egdb ._ffb .Body .SectPr ==nil {_egdb ._ffb .Body .SectPr =_aag .NewCT_SectPr ();};return Section {_egdb ,_egdb ._ffb .Body .SectPr };};func (_bdcaf Paragraph )addFldChar ()*_aag .CT_FldChar {_gceab :=_bdcaf .AddRun ();
_gbaab :=_gceab .X ();_gaeff :=_aag .NewEG_RunInnerContent ();_aafb :=_aag .NewCT_FldChar ();_gaeff .RunInnerContentChoice .FldChar =_aafb ;_gbaab .EG_RunInnerContent =append (_gbaab .EG_RunInnerContent ,_gaeff );return _aafb ;};

// AddParagraph adds a paragraph to the endnote.
func (_bgaee Endnote )AddParagraph ()Paragraph {_cbbb :=_aag .NewEG_ContentBlockContent ();_dafgb :=len (_bgaee ._bfga .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent );_bgaee ._bfga .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent =append (_bgaee ._bfga .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent ,_cbbb );
_aagg :=_aag .NewCT_P ();var _gbef *_aag .CT_String ;if _dafgb !=0{_gbeed :=len (_bgaee ._bfga .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent [_dafgb -1].ContentBlockContentChoice .P );_gbef =_bgaee ._bfga .EG_BlockLevelElts [0].BlockLevelEltsChoice .EG_ContentBlockContent [_dafgb -1].ContentBlockContentChoice .P [_gbeed -1].PPr .PStyle ;
}else {_gbef =_aag .NewCT_String ();_gbef .ValAttr ="\u0045n\u0064\u006e\u006f\u0074\u0065";};_cbbb .ContentBlockContentChoice .P =append (_cbbb .ContentBlockContentChoice .P ,_aagg );_bbafb :=Paragraph {_bgaee ._gbggb ,_aagg };_bbafb ._dbgba .PPr =_aag .NewCT_PPr ();
_bbafb ._dbgba .PPr .PStyle =_gbef ;_bbafb ._dbgba .PPr .RPr =_aag .NewCT_ParaRPr ();return _bbafb ;};

// Bold returns true if paragraph font is bold.
func (_dbbbf ParagraphProperties )Bold ()bool {_ggcg :=_dbbbf ._ggac .RPr ;return _faabg (_ggcg .B )||_faabg (_ggcg .BCs );};

// SetChecked marks a FormFieldTypeCheckBox as checked or unchecked.
func (_gcda FormField )SetChecked (b bool ){if len (_gcda ._daga .FFDataChoice )==0{return ;};for _ ,_debf :=range _gcda ._daga .FFDataChoice {if _debf .CheckBox !=nil {if !b {_debf .CheckBox .Checked =nil ;}else {_debf .CheckBox .Checked =_aag .NewCT_OnOff ();
};};};};func (_cfgc Paragraph )addInstrText (_bafdag string )*_aag .CT_Text {_addce :=_cfgc .AddRun ();_fggb :=_addce .X ();_egcg :=_aag .NewEG_RunInnerContent ();_fdfcb :=_aag .NewCT_Text ();_aedg :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";_fdfcb .SpaceAttr =&_aedg ;
_fdfcb .Content ="\u0020"+_bafdag +"\u0020";_egcg .RunInnerContentChoice .InstrText =_fdfcb ;_fggb .EG_RunInnerContent =append (_fggb .EG_RunInnerContent ,_egcg );return _fdfcb ;};

// SetHeadingLevel sets a heading level and style based on the level to a
// paragraph.  The default styles for a new unioffice document support headings
// from level 1 to 8.
func (_geggac ParagraphProperties )SetHeadingLevel (idx int ){_geggac .SetStyle (_db .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",idx ));if _geggac ._ggac .NumPr ==nil {_geggac ._ggac .NumPr =_aag .NewCT_NumPr ();};_geggac ._ggac .NumPr .Ilvl =_aag .NewCT_DecimalNumber ();
_geggac ._ggac .NumPr .Ilvl .ValAttr =int64 (idx );};

// Properties returns the numbering level paragraph properties.
func (_gaeeb NumberingLevel )Properties ()ParagraphStyleProperties {if _gaeeb ._ebdf .PPr ==nil {_gaeeb ._ebdf .PPr =_aag .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_gaeeb ._ebdf .PPr };};func (_fbbab *Document )getWatermarkHeaderInnerContentPictures ()[]*_aag .CT_Picture {var _ced []*_aag .CT_Picture ;
for _ ,_cbcc :=range _fbbab .Headers (){for _ ,_gbbef :=range _cbcc .X ().EG_BlockLevelElts {for _ ,_abba :=range _gbbef .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_deec :=range _abba .ContentBlockContentChoice .P {for _ ,_effe :=range _deec .EG_PContent {for _ ,_dbbcg :=range _effe .PContentChoice .EG_ContentRunContent {if _dbbcg .ContentRunContentChoice .R ==nil {continue ;
};for _ ,_ddgf :=range _dbbcg .ContentRunContentChoice .R .EG_RunInnerContent {if _ddgf .RunInnerContentChoice .Pict ==nil {continue ;};_ggfa :=false ;for _ ,_bfcd :=range _ddgf .RunInnerContentChoice .Pict .Any {_adegg ,_edfed :=_bfcd .(*_c .XSDAny );
if _edfed &&_adegg .XMLName .Local =="\u0073\u0068\u0061p\u0065"{_ggfa =true ;};};if _ggfa {_ced =append (_ced ,_ddgf .RunInnerContentChoice .Pict );};};};};};};};};return _ced ;};

// Section is the beginning of a new section.
type Section struct{_cfbf *Document ;_fcee *_aag .CT_SectPr ;};

// AddCell adds a cell to a row and returns it
func (_bbcdc Row )AddCell ()Cell {_gdfa :=_aag .NewEG_ContentCellContent ();_bbcdc ._dbebf .EG_ContentCellContent =append (_bbcdc ._dbebf .EG_ContentCellContent ,_gdfa );_gege :=_aag .NewCT_Tc ();_gdfa .ContentCellContentChoice .Tc =append (_gdfa .ContentCellContentChoice .Tc ,_gege );
return Cell {_bbcdc ._bacgc ,_gege };};

// SetAfterLineSpacing sets spacing below paragraph in line units.
func (_acgd Paragraph )SetAfterLineSpacing (d _bf .Distance ){_acgd .ensurePPr ();if _acgd ._dbgba .PPr .Spacing ==nil {_acgd ._dbgba .PPr .Spacing =_aag .NewCT_Spacing ();};_daace :=_acgd ._dbgba .PPr .Spacing ;_daace .AfterLinesAttr =_c .Int64 (int64 (d /_bf .Twips ));
};

// SetItalic sets the run to italic.
func (_bggaf RunProperties )SetItalic (b bool ){if !b {_bggaf ._gbeff .I =nil ;_bggaf ._gbeff .ICs =nil ;}else {_bggaf ._gbeff .I =_aag .NewCT_OnOff ();_bggaf ._gbeff .ICs =_aag .NewCT_OnOff ();};};

// Append appends a document d0 to a document d1. All settings, headers and footers remain the same as in the document d0 if they exist there, otherwise they are taken from the d1.
func (_bcag *Document )Append (d1orig *Document )error {_dcbcd ,_facb :=d1orig .Copy ();if _facb !=nil {return _facb ;};_bcag .DocBase =_bcag .DocBase .Append (_dcbcd .DocBase );if _dcbcd ._ffb .ConformanceAttr !=_bac .ST_ConformanceClassStrict {_bcag ._ffb .ConformanceAttr =_dcbcd ._ffb .ConformanceAttr ;
};_bcbd :=_bcag ._eeb .X ().Relationship ;_fagd :=_dcbcd ._eeb .X ().Relationship ;_bab :=_dcbcd ._ffb .Body ;_bfgbb :=map[string ]string {};_dgcfb :=map[int64 ]int64 {};_ecbg :=map[int64 ]int64 {};for _ ,_ggdd :=range _fagd {_cbacc :=true ;_cebda :=_ggdd .IdAttr ;
_bcegd :=_ggdd .TargetAttr ;_gafc :=_ggdd .TypeAttr ;_aebee :=_gafc ==_c .ImageType ;_dcge :=_gafc ==_c .HyperLinkType ;var _ffbd string ;for _ ,_dbee :=range _bcbd {if _dbee .TypeAttr ==_gafc &&_dbee .TargetAttr ==_bcegd {_cbacc =false ;_ffbd =_dbee .IdAttr ;
break ;};};if _aebee {_ebbg :="\u0077\u006f\u0072d\u002f"+_bcegd ;for _ ,_eab :=range _dcbcd .DocBase .Images {if _eab .Target ()==_ebbg {_eecc ,_eeec :=_cd .ImageFromStorage (_eab .Path ());if _eeec !=nil {return _eeec ;};_fdaa ,_eeec :=_bcag .AddImage (_eecc );
if _eeec !=nil {return _eeec ;};_ffbd =_fdaa .RelID ();break ;};};}else if _cbacc {if _dcge {_gdgfff :=_bcag ._eeb .AddHyperlink (_bcegd );_ffbd =_cd .Relationship (_gdgfff ).ID ();}else {_gfbda :=_bcag ._eeb .AddRelationship (_bcegd ,_gafc );_ffbd =_gfbda .X ().IdAttr ;
};};if _cebda !=_ffbd {_bfgbb [_cebda ]=_ffbd ;};};if _bab .SectPr !=nil {for _ ,_cfgfb :=range _bab .SectPr .EG_HdrFtrReferences {if _cfgfb .HdrFtrReferencesChoice .HeaderReference !=nil {if _bead ,_cegb :=_bfgbb [_cfgfb .HdrFtrReferencesChoice .HeaderReference .IdAttr ];
_cegb {_cfgfb .HdrFtrReferencesChoice .HeaderReference .IdAttr =_bead ;_bcag ._eea =append (_bcag ._eea ,_cd .NewRelationships ());};}else if _cfgfb .HdrFtrReferencesChoice .FooterReference !=nil {if _cfdb ,_bbfe :=_bfgbb [_cfgfb .HdrFtrReferencesChoice .FooterReference .IdAttr ];
_bbfe {_cfgfb .HdrFtrReferencesChoice .FooterReference .IdAttr =_cfdb ;_bcag ._abg =append (_bcag ._abg ,_cd .NewRelationships ());};};};};_cdeg ,_bede :=_bcag ._edga ,_dcbcd ._edga ;if _cdeg !=nil {if _bede !=nil {if _cdeg .Endnote !=nil {if _bede .Endnote !=nil {_agggd :=int64 (len (_cdeg .Endnote )+1);
for _ ,_ddce :=range _bede .Endnote {_bgga :=_ddce .IdAttr ;if _bgga > 0{_ddce .IdAttr =_agggd ;_cdeg .Endnote =append (_cdeg .Endnote ,_ddce );_ecbg [_bgga ]=_agggd ;_agggd ++;};};};}else {_cdeg .Endnote =_bede .Endnote ;};};}else if _bede !=nil {_cdeg =_bede ;
};_bcag ._edga =_cdeg ;_agbba ,_aff :=_bcag ._fbgg ,_dcbcd ._fbgg ;if _agbba !=nil {if _aff !=nil {if _agbba .Footnote !=nil {if _aff .Footnote !=nil {_gfafb :=int64 (len (_agbba .Footnote )+1);for _ ,_cgdc :=range _aff .Footnote {_acdf :=_cgdc .IdAttr ;
if _acdf > 0{_cgdc .IdAttr =_gfafb ;_agbba .Footnote =append (_agbba .Footnote ,_cgdc );_dgcfb [_acdf ]=_gfafb ;_gfafb ++;};};};}else {_agbba .Footnote =_aff .Footnote ;};};}else if _aff !=nil {_agbba =_aff ;};_bcag ._fbgg =_agbba ;for _ ,_fedbd :=range _bab .EG_BlockLevelElts {for _ ,_cgbdc :=range _fedbd .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_ebcg :=range _cgbdc .ContentBlockContentChoice .P {_dagbf (_ebcg ,_bfgbb );
_eacad (_ebcg ,_bfgbb );_cbda (_ebcg ,_dgcfb ,_ecbg );};for _ ,_dddag :=range _cgbdc .ContentBlockContentChoice .Tbl {_bcbdf (_dddag ,_bfgbb );_efbc (_dddag ,_bfgbb );_cbfae (_dddag ,_dgcfb ,_ecbg );};};};_bcag ._ffb .Body .EG_BlockLevelElts =append (_bcag ._ffb .Body .EG_BlockLevelElts ,_dcbcd ._ffb .Body .EG_BlockLevelElts ...);
if _bcag ._ffb .Body .SectPr ==nil {_bcag ._ffb .Body .SectPr =_dcbcd ._ffb .Body .SectPr ;}else {var _fde ,_gaa bool ;for _ ,_fgaa :=range _bcag ._ffb .Body .SectPr .EG_HdrFtrReferences {if _fgaa .HdrFtrReferencesChoice .HeaderReference !=nil {_fde =true ;
}else if _fgaa .HdrFtrReferencesChoice .FooterReference !=nil {_gaa =true ;};};if !_fde {for _ ,_eaca :=range _dcbcd ._ffb .Body .SectPr .EG_HdrFtrReferences {if _eaca .HdrFtrReferencesChoice .HeaderReference !=nil {_bcag ._ffb .Body .SectPr .EG_HdrFtrReferences =append (_bcag ._ffb .Body .SectPr .EG_HdrFtrReferences ,_eaca );
break ;};};};if !_gaa {for _ ,_gfbc :=range _dcbcd ._ffb .Body .SectPr .EG_HdrFtrReferences {if _gfbc .HdrFtrReferencesChoice .FooterReference !=nil {_bcag ._ffb .Body .SectPr .EG_HdrFtrReferences =append (_bcag ._ffb .Body .SectPr .EG_HdrFtrReferences ,_gfbc );
break ;};};};if _bcag ._ffb .Body .SectPr .Cols ==nil &&_dcbcd ._ffb .Body .SectPr .Cols !=nil {_bcag ._ffb .Body .SectPr .Cols =_dcbcd ._ffb .Body .SectPr .Cols ;};};_ccbc :=_bcag .Numbering ._gbda ;_gcfbd :=_dcbcd .Numbering ._gbda ;if _ccbc ==nil &&_gcfbd !=nil {_ccbc =_gcfbd ;
};_bcag .Numbering ._gbda =_ccbc ;if _bcag .Styles ._gcdgc ==nil &&_dcbcd .Styles ._gcdgc !=nil {_bcag .Styles ._gcdgc =_dcbcd .Styles ._gcdgc ;};_bcag ._faff =append (_bcag ._faff ,_dcbcd ._faff ...);_bcag ._dcf =append (_bcag ._dcf ,_dcbcd ._dcf ...);
if len (_bcag ._acbb )==0{_bcag ._acbb =_dcbcd ._acbb ;};if len (_bcag ._cfg )==0{_bcag ._cfg =_dcbcd ._cfg ;};_beed :=_bcag ._gdec ;_fdfd :=_dcbcd ._gdec ;if _beed !=nil {if _fdfd !=nil {if _beed .Divs !=nil {if _fdfd .Divs !=nil {_beed .Divs .Div =append (_beed .Divs .Div ,_fdfd .Divs .Div ...);
};}else {_beed .Divs =_fdfd .Divs ;};};_beed .Frameset =nil ;}else if _fdfd !=nil {_beed =_fdfd ;_beed .Frameset =nil ;};_bcag ._gdec =_beed ;_fbbbd :=_bcag ._caf ;_cbad :=_dcbcd ._caf ;if _fbbbd !=nil {if _cbad !=nil {if _fbbbd .Font !=nil {if _cbad .Font !=nil {for _ ,_bcgc :=range _cbad .Font {_dcbf :=true ;
for _ ,_dfgg :=range _fbbbd .Font {if _dfgg .NameAttr ==_bcgc .NameAttr {_dcbf =false ;break ;};};if _dcbf {_fbbbd .Font =append (_fbbbd .Font ,_bcgc );};};};}else {_fbbbd .Font =_cbad .Font ;};};}else if _cbad !=nil {_fbbbd =_cbad ;};_bcag ._caf =_fbbbd ;
return nil ;};

// GetDocRelTargetByID returns TargetAttr of document relationship given its IdAttr.
func (_ecbc *Document )GetDocRelTargetByID (idAttr string )string {for _ ,_gcdgf :=range _ecbc ._eeb .X ().Relationship {if _gcdgf .IdAttr ==idAttr {return _gcdgf .TargetAttr ;};};return "";};

// Clear resets the numbering.
func (_dfed Numbering )Clear (){_dfed ._gbda .AbstractNum =nil ;_dfed ._gbda .Num =nil ;_dfed ._gbda .NumIdMacAtCleanup =nil ;_dfed ._gbda .NumPicBullet =nil ;};

// SetStyle sets style to the text in watermark.
func (_gdacb *WatermarkText )SetStyle (style _gg .TextpathStyle ){_ffca :=_gdacb .getShape ();if _gdacb ._eafacd !=nil {_fcbfa :=_gdacb ._eafacd .ShapeChoice ;for _ ,_gfbgd :=range _fcbfa {if _gfbgd .ShapeElementsChoice .Textpath !=nil {var _afff =style .String ();
_gfbgd .ShapeElementsChoice .Textpath .StyleAttr =&_afff ;};};return ;};_gcgb :=_gdacb .findNode (_ffca ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _ccaba ,_ddffd :=range _gcgb .Attrs {if _ddffd .Name .Local =="\u0073\u0074\u0079l\u0065"{_gcgb .Attrs [_ccaba ].Value =style .String ();
};};};

// SetId sets the id of the image.
func (_gcc AnchoredDrawing )SetId (id uint32 ){for _ ,_ed :=range _gcc ._ae .Graphic .GraphicData .Any {if _aee ,_caa :=_ed .(*_ggg .Pic );_caa {_aee .NvPicPr .CNvPr .IdAttr =id ;};};};func _ebdc (_caef *Document )map[int64 ]map[int64 ]int64 {_feab :=_caef .Paragraphs ();
_aafab :=make (map[int64 ]map[int64 ]int64 ,0);for _ ,_bfdg :=range _feab {_bgbd :=_ccgc (_caef ,_bfdg );if _bgbd .NumberingLevel !=nil &&_bgbd .AbstractNumId !=nil {_dagba :=*_bgbd .AbstractNumId ;if _ ,_ace :=_aafab [_dagba ];_ace {if _beebe :=_bgbd .NumberingLevel .X ();
_beebe !=nil {if _ ,_eaacf :=_aafab [_dagba ][_beebe .IlvlAttr ];_eaacf {_aafab [_dagba ][_beebe .IlvlAttr ]++;}else {_aafab [_dagba ][_beebe .IlvlAttr ]=1;};};}else {if _ecgb :=_bgbd .NumberingLevel .X ();_ecgb !=nil {_aafab [_dagba ]=map[int64 ]int64 {_ecgb .IlvlAttr :1};
};};};};return _aafab ;};func (_bfgfa *WatermarkText )getInnerElement (_agae string )*_c .XSDAny {for _ ,_afede :=range _bfgfa ._babcb .Any {_gdggb ,_ebef :=_afede .(*_c .XSDAny );if _ebef &&(_gdggb .XMLName .Local ==_agae ||_gdggb .XMLName .Local =="\u0076\u003a"+_agae ){return _gdggb ;
};};return nil ;};

// SetOutlineLvl sets outline level of paragraph.
func (_ddceb Paragraph )SetOutlineLvl (lvl int64 ){_ddceb .ensurePPr ();if _ddceb ._dbgba .PPr .OutlineLvl ==nil {_ddceb ._dbgba .PPr .OutlineLvl =_aag .NewCT_DecimalNumber ();};_agfg :=lvl -1;_ddceb ._dbgba .PPr .OutlineLvl .ValAttr =_agfg ;};func _geagb (_dcdd *_aag .CT_P ,_bgeb *_aag .CT_Hyperlink ,_gbfb *TableInfo ,_ebgf *DrawingInfo ,_acgc []*_aag .EG_ContentRunContent )[]TextItem {_agfc :=[]TextItem {};
for _ ,_abda :=range _acgc {if _efgb :=_abda .ContentRunContentChoice .Sdt ;_efgb !=nil {if _agad :=_efgb .SdtContent ;_agad !=nil {for _ ,_gcfbe :=range _agad .EG_PContent {_agfc =append (_agfc ,_geagb (_dcdd ,_bgeb ,_gbfb ,_ebgf ,_gcfbe .PContentChoice .EG_ContentRunContent )...);
};};};if _bbbe :=_abda .ContentRunContentChoice .R ;_bbbe !=nil {_dfcg :=_ec .NewBuffer ([]byte {});for _ ,_bbdd :=range _bbbe .EG_RunInnerContent {if _bbdd .RunInnerContentChoice .Br !=nil {_dfcg .WriteString ("\u000a");};if _bbdd .RunInnerContentChoice .Tab !=nil {_dfcg .WriteString ("\u0009");
};if _bbdd .RunInnerContentChoice .T !=nil {_dfcg .WriteString (_bbdd .RunInnerContentChoice .T .Content );};if _bbdd .RunInnerContentChoice .Pict !=nil &&len (_bbdd .RunInnerContentChoice .Pict .Any )> 0{for _ ,_edagd :=range _bbdd .RunInnerContentChoice .Pict .Any {if _dceb ,_dabb :=_edagd .(*_ccc .Shape );
_dabb {for _ ,_ggca :=range _dceb .ShapeChoice {if _geeb :=_ggca .ShapeElementsChoice .Textbox ;_geeb !=nil {if _geeb .TxbxContent !=nil {for _ ,_cgfe :=range _geeb .TxbxContent .EG_BlockLevelElts {_agfc =append (_agfc ,_efeb (_cgfe .BlockLevelEltsChoice .EG_ContentBlockContent ,nil )...);
};};};};};};};};_agfc =append (_agfc ,TextItem {Text :_dfcg .String (),DrawingInfo :_ebgf ,Paragraph :_dcdd ,Hyperlink :_bgeb ,Run :_bbbe ,TableInfo :_gbfb });for _ ,_cedd :=range _bbbe .Extra {if _efgda ,_ecc :=_cedd .(*_aag .AlternateContentRun );_ecc {_fcbf :=&DrawingInfo {Drawing :_efgda .Choice .Drawing };
for _ ,_dbda :=range _fcbf .Drawing .DrawingChoice {if _dbda .Anchor ==nil {continue ;};for _ ,_degf :=range _dbda .Anchor .Graphic .GraphicData .Any {if _cdcef ,_fgcb :=_degf .(*_aag .WdWsp );_fgcb {if _cdcef .WordprocessingShapeChoice1 !=nil {if _befg :=_cdcef .SpPr ;
_befg !=nil {if _gbfg :=_befg .Xfrm ;_gbfg !=nil {if _caab :=_gbfg .Ext ;_caab !=nil {_fcbf .Width =_caab .CxAttr ;_fcbf .Height =_caab .CyAttr ;};};};for _ ,_beaab :=range _cdcef .WordprocessingShapeChoice1 .Txbx .TxbxContent .EG_BlockLevelElts {for _ ,_bgbb :=range _beaab .BlockLevelEltsChoice .EG_ContentBlockContent {_agfc =append (_agfc ,_bgcg (_bgbb .ContentBlockContentChoice .P ,_gbfb ,_fcbf )...);
};};};};};};};};};};return _agfc ;};

// TableProperties returns the table style properties.
func (_dffb Style )TableProperties ()TableStyleProperties {if _dffb ._bcedg .TblPr ==nil {_dffb ._bcedg .TblPr =_aag .NewCT_TblPrBase ();};return TableStyleProperties {_dffb ._bcedg .TblPr };};func _ccgc (_afeec *Document ,_dgbc Paragraph )listItemInfo {if _afeec .Numbering .X ()==nil {return listItemInfo {};
};if len (_afeec .Numbering .Definitions ())< 1{return listItemInfo {};};_edbg :=_ecab (_dgbc );if _edbg ==nil {return listItemInfo {};};_afgaf :=_afeec .GetNumberingLevelByIds (_edbg .NumId .ValAttr ,_edbg .Ilvl .ValAttr );if _abcc :=_afgaf .X ();_abcc ==nil {return listItemInfo {};
};_gfdcb :=int64 (0);for _ ,_fbegf :=range _afeec .Numbering ._gbda .Num {if _fbegf !=nil &&_fbegf .NumIdAttr ==_edbg .NumId .ValAttr {_gfdcb =_fbegf .AbstractNumId .ValAttr ;};};return listItemInfo {FromParagraph :&_dgbc ,AbstractNumId :&_gfdcb ,NumberingLevel :&_afgaf };
};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_edbgf TableStyleProperties )SetCellSpacingAuto (){_edbgf ._bacac .TblCellSpacing =_aag .NewCT_TblWidth ();_edbgf ._bacac .TblCellSpacing .TypeAttr =_aag .ST_TblWidthAuto ;};

// SetTextWrapTight sets the text wrap to tight with a give wrap type.
func (_gda AnchoredDrawing )SetTextWrapTight (option *AnchorDrawWrapOptions ){_gda ._ae .WrapTypeChoice =&_aag .WdEG_WrapTypeChoice {};_gda ._ae .WrapTypeChoice .WrapTight =_aag .NewWdCT_WrapTight ();_gda ._ae .WrapTypeChoice .WrapTight .WrapTextAttr =_aag .WdST_WrapTextBothSides ;
_cad :=false ;_gda ._ae .WrapTypeChoice .WrapTight .WrapPolygon .EditedAttr =&_cad ;if option ==nil {option =NewAnchorDrawWrapOptions ();};_gda ._ae .WrapTypeChoice .WrapTight .WrapPolygon .LineTo =option .GetWrapPathLineTo ();_gda ._ae .WrapTypeChoice .WrapTight .WrapPolygon .Start =option .GetWrapPathStart ();
_gda ._ae .LayoutInCellAttr =true ;_gda ._ae .AllowOverlapAttr =true ;};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_acbge ParagraphProperties )Style ()string {if _acbge ._ggac .PStyle !=nil {return _acbge ._ggac .PStyle .ValAttr ;};return "";};

// SetFontSize sets font size of watermark text.
func (_ggegc *WatermarkText )SetFontSize (value int64 ){_agdd :=_ggegc .GetStyle ();_agdd .SetFontSize (value );_ggegc .SetStyle (_agdd );if _ggegc ._eafacd !=nil &&_ggegc ._eafacd .StyleAttr !=nil {_efgfc :=*_ggegc ._eafacd .StyleAttr ;_efgfc =_ag .ReplaceAll (_efgfc ,"\u0077i\u0064\u0074\u0068\u003a4\u0036\u0038\u0070\u0074\u003bh\u0065i\u0067h\u0074\u003a\u0032\u0033\u0034\u0070\u0074;",_db .Sprintf ("\u0077\u0069\u0064th\u003a\u0025\u0064\u0070\u0074\u003b\u0068\u0065\u0069\u0067\u0068\u0074\u003a\u0025\u0064\u0070\u0074\u003b",int64 (len (_ggegc .GetText ()))*value ,2*value ));
_ggegc ._eafacd .StyleAttr =&_efgfc ;};};

// Borders allows manipulation of the table borders.
func (_ddddb TableStyleProperties )Borders ()TableBorders {if _ddddb ._bacac .TblBorders ==nil {_ddddb ._bacac .TblBorders =_aag .NewCT_TblBorders ();};return TableBorders {_ddddb ._bacac .TblBorders };};func (_fece Paragraph )addEndComment (_cgfc int64 )*_aag .CT_MarkupRange {_caea :=_aag .NewEG_PContent ();
_fece ._dbgba .EG_PContent =append (_fece ._dbgba .EG_PContent ,_caea );_bffaa :=_aag .NewEG_ContentRunContent ();_abdcc :=_aag .NewEG_RunLevelElts ();_dfcge :=_aag .NewEG_RangeMarkupElements ();_deab :=_aag .NewCT_MarkupRange ();_deab .IdAttr =_cgfc ;
_dfcge .RangeMarkupElementsChoice .CommentRangeEnd =_deab ;_caea .PContentChoice .EG_ContentRunContent =append (_caea .PContentChoice .EG_ContentRunContent ,_bffaa );_bffaa .ContentRunContentChoice .EG_RunLevelElts =append (_bffaa .ContentRunContentChoice .EG_RunLevelElts ,_abdcc );
_abdcc .RunLevelEltsChoice .EG_RangeMarkupElements =append (_abdcc .RunLevelEltsChoice .EG_RangeMarkupElements ,_dfcge );return _deab ;};func (_cdgf Endnote )id ()int64 {return _cdgf ._bfga .IdAttr };

// Clear removes all the content from within a run.
func (_gfbgf Run )Clear (){_gfbgf ._dcgfd .EG_RunInnerContent =nil };

// SetSemiHidden controls if the style is hidden in the UI.
func (_eecab Style )SetSemiHidden (b bool ){if b {_eecab ._bcedg .SemiHidden =_aag .NewCT_OnOff ();}else {_eecab ._bcedg .SemiHidden =nil ;};};

// Restart restarts the numbering
func (_cdbe *Numbering )Restart (nd *NumberingDefinition ){_adcdd :=nd ._aaee .Lvl ;_edda :=_cdbe .AddDefinition ();nd ._aaee =_edda ._aaee ;nd ._aaee .Lvl =_adcdd ;};

// GetColor returns the color.Color object representing the run color.
func (_fcdbb ParagraphProperties )GetColor ()_ff .Color {if _bebfe :=_fcdbb ._ggac .RPr .Color ;_bebfe !=nil {_bgee :=_bebfe .ValAttr ;if _bgee .ST_HexColorRGB !=nil {return _ff .FromHex (*_bgee .ST_HexColorRGB );};};return _ff .Color {};};

// Read reads a document from an io.Reader.
func Read (r _e .ReaderAt ,size int64 )(*Document ,error ){return _bcef (r ,size ,"")};

// SetVerticalAlignment sets the vertical alignment of content within a table cell.
func (_fba CellProperties )SetVerticalAlignment (align _aag .ST_VerticalJc ){if align ==_aag .ST_VerticalJcUnset {_fba ._cfb .VAlign =nil ;}else {_fba ._cfb .VAlign =_aag .NewCT_VerticalJc ();_fba ._cfb .VAlign .ValAttr =align ;};};

// Caps returns true if paragraph font is capitalized.
func (_cfab ParagraphProperties )Caps ()bool {return _faabg (_cfab ._ggac .RPr .Caps )};

// SetLeft sets the left border to a specified type, color and thickness.
func (_cbdc CellBorders )SetLeft (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_cbdc ._cde .Left =_aag .NewCT_Border ();_ebdgf (_cbdc ._cde .Left ,t ,c ,thickness );};func (_decd Footnote )id ()int64 {return _decd ._deedc .IdAttr };

// SetKerning sets the run's font kerning.
func (_dabfe RunProperties )SetKerning (size _bf .Distance ){_dabfe ._gbeff .Kern =_aag .NewCT_HpsMeasure ();_dabfe ._gbeff .Kern .ValAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (size /_bf .HalfPoint ));};

// StyleID returns the style ID.
func (_adde Style )StyleID ()string {if _adde ._bcedg .StyleIdAttr ==nil {return "";};return *_adde ._bcedg .StyleIdAttr ;};

// SetStrict is a shortcut for document.SetConformance,
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_cafa Document )SetStrict (strict bool ){if strict {_cafa ._ffb .ConformanceAttr =_bac .ST_ConformanceClassStrict ;}else {_cafa ._ffb .ConformanceAttr =_bac .ST_ConformanceClassTransitional ;};};

// X return slice of node.
func (_beca *Nodes )X ()[]Node {return _beca ._aeecg };func (_dcag AnchoredDrawing )initializeEffectList (_bb *_da .CT_ShapeProperties ){if _bb .EffectPropertiesChoice ==nil {_bb .EffectPropertiesChoice =_da .NewEG_EffectPropertiesChoice ();};if _bb .EffectPropertiesChoice .EffectLst ==nil {_bb .EffectPropertiesChoice .EffectLst =_da .NewCT_EffectList ();
};};

// SetTargetBookmark sets the bookmark target of the hyperlink.
func (_ddac HyperLink )SetTargetBookmark (bm Bookmark ){_ddac ._dbdaf .AnchorAttr =_c .String (bm .Name ());_ddac ._dbdaf .IdAttr =nil ;};

// SetLastRow controls the conditional formatting for the last row in a table.
// This is called the 'Total' row within Word.
func (_bbfd TableLook )SetLastRow (on bool ){if !on {_bbfd ._cagee .LastRowAttr =&_bac .ST_OnOff {};_bbfd ._cagee .LastRowAttr .ST_OnOff1 =_bac .ST_OnOff1Off ;}else {_bbfd ._cagee .LastRowAttr =&_bac .ST_OnOff {};_bbfd ._cagee .LastRowAttr .ST_OnOff1 =_bac .ST_OnOff1On ;
};};

// SetHangingIndent controls the indentation of the non-first lines in a paragraph.
func (_bfag ParagraphProperties )SetHangingIndent (m _bf .Distance ){if _bfag ._ggac .Ind ==nil {_bfag ._ggac .Ind =_aag .NewCT_Ind ();};if m ==_bf .Zero {_bfag ._ggac .Ind .HangingAttr =nil ;}else {_bfag ._ggac .Ind .HangingAttr =&_bac .ST_TwipsMeasure {};
_bfag ._ggac .Ind .HangingAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_bf .Twips ));};};func (_gdgc *Document )addFootnoteSeparator (){_dgeg :=_aag .NewCT_FtnEdn ();_dgeg .IdAttr =-1;_dgeg .TypeAttr =_aag .ST_FtnEdnSeparator ;_eeee :=Footnote {_gdgc ,_dgeg };
_eeee .X ().EG_BlockLevelElts =[]*_aag .EG_BlockLevelElts {_aag .NewEG_BlockLevelElts ()};_edfe :=_eeee .AddParagraph ();_edfe .X ().PPr =nil ;_gbdg :=_edfe .AddRun ();_faacg :=_gbdg .newIC ();_faacg .RunInnerContentChoice .Separator =_aag .NewCT_Empty ();
_gdgc ._fbgg .CT_Footnotes .Footnote =append (_gdgc ._fbgg .CT_Footnotes .Footnote ,_dgeg );_dgeg =_aag .NewCT_FtnEdn ();_dgeg .IdAttr =0;_dgeg .TypeAttr =_aag .ST_FtnEdnContinuationSeparator ;_eeee =Footnote {_gdgc ,_dgeg };_eeee .X ().EG_BlockLevelElts =[]*_aag .EG_BlockLevelElts {_aag .NewEG_BlockLevelElts ()};
_edfe =_eeee .AddParagraph ();_edfe .X ().PPr =nil ;_gbdg =_edfe .AddRun ();_faacg =_gbdg .newIC ();_faacg .RunInnerContentChoice .ContinuationSeparator =_aag .NewCT_Empty ();_gdgc ._fbgg .CT_Footnotes .Footnote =append (_gdgc ._fbgg .CT_Footnotes .Footnote ,_dgeg );
};

// X returns the inner wrapped XML type.
func (_cfd Cell )X ()*_aag .CT_Tc {return _cfd ._cbd };

// SetRight sets the right border to a specified type, color and thickness.
func (_begfd TableBorders )SetRight (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_begfd ._eacfd .Right =_aag .NewCT_Border ();_ebdgf (_begfd ._eacfd .Right ,t ,c ,thickness );};func _acbaf ()*_ccc .Handles {_bgfba :=_ccc .NewHandles ();_gaega :=_ccc .NewCT_H ();
_egedg :="\u0023\u0030\u002c\u0062\u006f\u0074\u0074\u006f\u006dR\u0069\u0067\u0068\u0074";_gaega .PositionAttr =&_egedg ;_ffcg :="\u0036\u0036\u0032\u0039\u002c\u0031\u0034\u0039\u0037\u0031";_gaega .XrangeAttr =&_ffcg ;_bgfba .H =[]*_ccc .CT_H {_gaega };
return _bgfba ;};

// SetAllowOverlapAttr sets the allowOverlap attribute of anchor.
func (_cf AnchoredDrawing )SetAllowOverlapAttr (val bool ){_cf ._ae .AllowOverlapAttr =val };

// X returns the inner wrapped XML type.
func (_dgfb InlineDrawing )X ()*_aag .WdInline {return _dgfb ._eeaa };

// InsertRowAfter inserts a row after another row
func (_bdbf Table )InsertRowAfter (r Row )Row {for _cgcfe ,_agbfc :=range _bdbf ._bgcdd .EG_ContentRowContent {if len (_agbfc .ContentRowContentChoice .Tr )> 0&&r .X ()==_agbfc .ContentRowContentChoice .Tr [0]{_fcedc :=_aag .NewEG_ContentRowContent ();
if len (_bdbf ._bgcdd .EG_ContentRowContent )< _cgcfe +2{return _bdbf .AddRow ();};_bdbf ._bgcdd .EG_ContentRowContent =append (_bdbf ._bgcdd .EG_ContentRowContent ,nil );copy (_bdbf ._bgcdd .EG_ContentRowContent [_cgcfe +2:],_bdbf ._bgcdd .EG_ContentRowContent [_cgcfe +1:]);
_bdbf ._bgcdd .EG_ContentRowContent [_cgcfe +1]=_fcedc ;_edfdeb :=_aag .NewCT_Row ();_fcedc .ContentRowContentChoice .Tr =append (_fcedc .ContentRowContentChoice .Tr ,_edfdeb );return Row {_bdbf ._efgdcg ,_edfdeb };};};return _bdbf .AddRow ();};

// Numbering return numbering that being use by paragraph.
func (_bgaae Paragraph )Numbering ()Numbering {_bgaae .ensurePPr ();_gbbcd :=NewNumbering ();if _bgaae ._dbgba .PPr .NumPr !=nil {_dbgd :=int64 (-1);_aegbbg :=int64 (-1);if _bgaae ._dbgba .PPr .NumPr .NumId !=nil {_dbgd =_bgaae ._dbgba .PPr .NumPr .NumId .ValAttr ;
};for _ ,_fcad :=range _bgaae ._gbga .Numbering ._gbda .Num {if _dbgd < 0{break ;};if _fcad .NumIdAttr ==_dbgd {if _fcad .AbstractNumId !=nil {_aegbbg =_fcad .AbstractNumId .ValAttr ;_gbbcd ._gbda .Num =append (_gbbcd ._gbda .Num ,_fcad );break ;};};};
for _ ,_ecgca :=range _bgaae ._gbga .Numbering ._gbda .AbstractNum {if _aegbbg < 0{break ;};if _ecgca .AbstractNumIdAttr ==_aegbbg {_gbbcd ._gbda .AbstractNum =append (_gbbcd ._gbda .AbstractNum ,_ecgca );break ;};};};return _gbbcd ;};

// SetRightIndent controls right indent of paragraph.
func (_bbbc Paragraph )SetRightIndent (m _bf .Distance ){_bbbc .ensurePPr ();_eadcf :=_bbbc ._dbgba .PPr ;if _eadcf .Ind ==nil {_eadcf .Ind =_aag .NewCT_Ind ();};if m ==_bf .Zero {_eadcf .Ind .RightAttr =nil ;}else {_eadcf .Ind .RightAttr =&_aag .ST_SignedTwipsMeasure {};
_eadcf .Ind .RightAttr .Int64 =_c .Int64 (int64 (m /_bf .Twips ));};};

// Paragraphs returns the paragraphs defined in the cell.
func (_dbe Cell )Paragraphs ()[]Paragraph {_fbfb :=[]Paragraph {};for _ ,_edf :=range _dbe ._cbd .EG_BlockLevelElts {for _ ,_aefa :=range _edf .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_gded :=range _aefa .ContentBlockContentChoice .P {_fbfb =append (_fbfb ,Paragraph {_dbe ._eeca ,_gded });
};};};return _fbfb ;};

// SetTextWrapInFrontOfText sets the text wrap to in front of text.
func (_dca AnchoredDrawing )SetTextWrapInFrontOfText (){_dca ._ae .WrapTypeChoice =&_aag .WdEG_WrapTypeChoice {};_dca ._ae .WrapTypeChoice .WrapNone =_aag .NewWdCT_WrapNone ();_dca ._ae .BehindDocAttr =false ;_dca ._ae .LayoutInCellAttr =true ;_dca ._ae .AllowOverlapAttr =true ;
};

// AddDrawingAnchored adds an anchored (floating) drawing from an ImageRef.
func (_acfd Run )AddDrawingAnchored (img _cd .ImageRef )(AnchoredDrawing ,error ){_eegc :=_acfd .newIC ();_eegc .RunInnerContentChoice .Drawing =_aag .NewCT_Drawing ();_gead :=_aag .NewWdAnchor ();_befdf :=AnchoredDrawing {_acfd ._edce ,_gead };_gead .SimplePosAttr =_c .Bool (false );
_gead .AllowOverlapAttr =true ;_gead .CNvGraphicFramePr =_da .NewCT_NonVisualGraphicFrameProperties ();_eegc .RunInnerContentChoice .Drawing .DrawingChoice =append (_eegc .RunInnerContentChoice .Drawing .DrawingChoice ,&_aag .CT_DrawingChoice {Anchor :_gead });
_gead .Graphic =_da .NewGraphic ();_gead .Graphic .GraphicData =_da .NewCT_GraphicalObjectData ();_gead .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";
_gead .SimplePos .XAttr .ST_CoordinateUnqualified =_c .Int64 (0);_gead .SimplePos .YAttr .ST_CoordinateUnqualified =_c .Int64 (0);_gead .PositionH .RelativeFromAttr =_aag .WdST_RelFromHPage ;_gead .PositionH .PosHChoice =&_aag .WdCT_PosHChoice {};_gead .PositionH .PosHChoice .PosOffset =_c .Int32 (0);
_gead .PositionV .RelativeFromAttr =_aag .WdST_RelFromVPage ;_gead .PositionV .PosVChoice =&_aag .WdCT_PosVChoice {};_gead .PositionV .PosVChoice .PosOffset =_c .Int32 (0);_gead .Extent .CxAttr =int64 (float64 (img .Size ().X *_bf .Pixel72 )/_bf .EMU );
_gead .Extent .CyAttr =int64 (float64 (img .Size ().Y *_bf .Pixel72 )/_bf .EMU );_gead .WrapTypeChoice =&_aag .WdEG_WrapTypeChoice {};_gead .WrapTypeChoice .WrapSquare =_aag .NewWdCT_WrapSquare ();_gead .WrapTypeChoice .WrapSquare .WrapTextAttr =_aag .WdST_WrapTextBothSides ;
_bdae :=0x7FFFFFFF&_d .Uint32 ();_gead .DocPr .IdAttr =_bdae ;_ffec :=_ggg .NewPic ();_ffec .NvPicPr .CNvPr .IdAttr =_bdae ;_adce :=img .RelID ();if _adce ==""{return _befdf ,_cg .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");
};_gead .Graphic .GraphicData .Any =append (_gead .Graphic .GraphicData .Any ,_ffec );_ffec .BlipFill =_da .NewCT_BlipFillProperties ();_ffec .BlipFill .Blip =_da .NewCT_Blip ();_ffec .BlipFill .Blip .EmbedAttr =&_adce ;_ffec .BlipFill .FillModePropertiesChoice .Stretch =_da .NewCT_StretchInfoProperties ();
_ffec .BlipFill .FillModePropertiesChoice .Stretch .FillRect =_da .NewCT_RelativeRect ();_ffec .SpPr =_da .NewCT_ShapeProperties ();_ffec .SpPr .Xfrm =_da .NewCT_Transform2D ();_ffec .SpPr .Xfrm .Off =_da .NewCT_Point2D ();_ffec .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_c .Int64 (0);
_ffec .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_c .Int64 (0);_ffec .SpPr .Xfrm .Ext =_da .NewCT_PositiveSize2D ();_ffec .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_bf .Point );_ffec .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_bf .Point );
_ffec .SpPr .GeometryChoice .PrstGeom =_da .NewCT_PresetGeometry2D ();_ffec .SpPr .GeometryChoice .PrstGeom .PrstAttr =_da .ST_ShapeTypeRect ;return _befdf ,nil ;};

// SetTop sets the top border to a specified type, color and thickness.
func (_aaed TableBorders )SetTop (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_aaed ._eacfd .Top =_aag .NewCT_Border ();_ebdgf (_aaed ._eacfd .Top ,t ,c ,thickness );};

// Font returns the name of run font family.
func (_bdbea RunProperties )Font ()string {if _dbdc :=_bdbea ._gbeff .RFonts ;_dbdc !=nil {if _dbdc .AsciiAttr !=nil {return *_dbdc .AsciiAttr ;}else if _dbdc .HAnsiAttr !=nil {return *_dbdc .HAnsiAttr ;}else if _dbdc .CsAttr !=nil {return *_dbdc .CsAttr ;
};};return "";};

// MultiLevelType returns the multilevel type, or ST_MultiLevelTypeUnset if not set.
func (_cfca NumberingDefinition )MultiLevelType ()_aag .ST_MultiLevelType {if _cfca ._aaee .MultiLevelType !=nil {return _cfca ._aaee .MultiLevelType .ValAttr ;}else {return _aag .ST_MultiLevelTypeUnset ;};};

// Endnote is an individual endnote reference within the document.
type Endnote struct{_gbggb *Document ;_bfga *_aag .CT_FtnEdn ;};

// SizeValue returns the value of run font size in points.
func (_decb RunProperties )SizeValue ()float64 {if _aafgf :=_decb ._gbeff .Sz ;_aafgf !=nil {_gafed :=_aafgf .ValAttr ;if _gafed .ST_UnsignedDecimalNumber !=nil {return float64 (*_gafed .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetTop sets the top border to a specified type, color and thickness.
func (_dedaaa ParagraphBorders )SetTop (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_dedaaa ._gabef .Top =_aag .NewCT_Border ();_afbdc (_dedaaa ._gabef .Top ,t ,c ,thickness );};func (_cea *Document )save (_fff _e .Writer ,_cceg string )error {const _aeg ="\u0064o\u0063u\u006d\u0065\u006e\u0074\u003a\u0064\u002e\u0053\u0061\u0076\u0065";
if _bge :=_cea ._ffb .Validate ();_bge !=nil {_dg .Log .Warning ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_bge );
};_dfg :=_c .DocTypeDocument ;if !_ge .GetLicenseKey ().IsLicensed ()&&!_egg {_db .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");
_db .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");
return _cg .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_cbf :="\u0075n\u006b\u006e\u006f\u0077\u006e";if _daac ,_cgg :=_fff .(*_ab .File );
_cgg {_cbf =_daac .Name ();};if len (_cea ._fegf )==0{if len (_cceg )> 0{_cea ._fegf =_cceg ;}else {_aabd ,_deed :=_ge .GenRefId ("\u0064\u0077");if _deed !=nil {_dg .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_deed );return _deed ;};_cea ._fegf =_aabd ;
};};if _cbfc :=_ge .Track (_cea ._fegf ,_aeg ,_cbf );_cbfc !=nil {_dg .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cbfc );return _cbfc ;};_aac :=_dcd .NewWriter (_fff );defer _aac .Close ();if _aaca :=_aa .MarshalXML (_aac ,_c .BaseRelsFilename ,_cea .Rels .X ());
_aaca !=nil {return _aaca ;};if _caba :=_aa .MarshalXMLByType (_aac ,_dfg ,_c .ExtendedPropertiesType ,_cea .AppProperties .X ());_caba !=nil {return _caba ;};if _dcc :=_aa .MarshalXMLByType (_aac ,_dfg ,_c .CorePropertiesType ,_cea .CoreProperties .X ());
_dcc !=nil {return _dcc ;};if _cea .CustomProperties .X ()!=nil {if _cef :=_aa .MarshalXMLByType (_aac ,_dfg ,_c .CustomPropertiesType ,_cea .CustomProperties .X ());_cef !=nil {return _cef ;};};if _cea .Thumbnail !=nil {_agc ,_gfcg :=_aac .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");
if _gfcg !=nil {return _gfcg ;};if _eada :=_dc .Encode (_agc ,_cea .Thumbnail ,nil );_eada !=nil {return _eada ;};};if _dced :=_aa .MarshalXMLByType (_aac ,_dfg ,_c .SettingsType ,_cea .Settings .X ());_dced !=nil {return _dced ;};_agb :=_c .AbsoluteFilename (_dfg ,_c .OfficeDocumentType ,0);
if _adc :=_aa .MarshalXML (_aac ,_agb ,_cea ._ffb );_adc !=nil {return _adc ;};if _gcd :=_aa .MarshalXML (_aac ,_aa .RelationsPathFor (_agb ),_cea ._eeb .X ());_gcd !=nil {return _gcd ;};if _cea .Numbering .X ()!=nil {if _cefg :=_aa .MarshalXMLByType (_aac ,_dfg ,_c .NumberingType ,_cea .Numbering .X ());
_cefg !=nil {return _cefg ;};};if _fbe :=_aa .MarshalXMLByType (_aac ,_dfg ,_c .StylesType ,_cea .Styles .X ());_fbe !=nil {return _fbe ;};if _cea ._gdec !=nil {if _gfd :=_aa .MarshalXMLByType (_aac ,_dfg ,_c .WebSettingsType ,_cea ._gdec );_gfd !=nil {return _gfd ;
};};if _cea ._caf !=nil {if _fbba :=_aa .MarshalXMLByType (_aac ,_dfg ,_c .FontTableType ,_cea ._caf );_fbba !=nil {return _fbba ;};};if _cea ._edga !=nil {if _fege :=_aa .MarshalXMLByType (_aac ,_dfg ,_c .EndNotesType ,_cea ._edga );_fege !=nil {return _fege ;
};};if _cea ._fbgg !=nil {if _ffab :=_aa .MarshalXMLByType (_aac ,_dfg ,_c .FootNotesType ,_cea ._fbgg );_ffab !=nil {return _ffab ;};};if _cea ._abb !=nil {if _fcd :=_aa .MarshalXMLByType (_aac ,_dfg ,_c .CommentsContentType ,_cea ._abb );_fcd !=nil {return _fcd ;
};};for _bed ,_fdgd :=range _cea ._faff {if _cfdd :=_aa .MarshalXMLByTypeIndex (_aac ,_dfg ,_c .ThemeType ,_bed +1,_fdgd );_cfdd !=nil {return _cfdd ;};};for _abeg ,_bacd :=range _cea ._dcf {_dfd ,_baa :=_bacd .ExportToByteArray ();if _baa !=nil {return _baa ;
};_adcg :="\u0077\u006f\u0072d\u002f"+_bacd .TargetAttr [:len (_bacd .TargetAttr )-4]+"\u002e\u0062\u0069\u006e";if _gdede :=_aa .AddFileFromBytes (_aac ,_adcg ,_dfd );_gdede !=nil {return _gdede ;};if _gceg :=_aa .MarshalXMLByTypeIndex (_aac ,_dfg ,_c .ControlType ,_abeg +1,_bacd .Ocx );
_gceg !=nil {return _gceg ;};};for _ffff ,_fga :=range _cea ._acbb {_bff :=_c .AbsoluteFilename (_dfg ,_c .HeaderType ,_ffff +1);if _eaa :=_aa .MarshalXML (_aac ,_bff ,_fga );_eaa !=nil {return _eaa ;};if !_cea ._eea [_ffff ].IsEmpty (){_aa .MarshalXML (_aac ,_aa .RelationsPathFor (_bff ),_cea ._eea [_ffff ].X ());
};};for _bga ,_aega :=range _cea ._cfg {_acf :=_c .AbsoluteFilename (_dfg ,_c .FooterType ,_bga +1);if _agd :=_aa .MarshalXMLByTypeIndex (_aac ,_dfg ,_c .FooterType ,_bga +1,_aega );_agd !=nil {return _agd ;};if !_cea ._abg [_bga ].IsEmpty (){_aa .MarshalXML (_aac ,_aa .RelationsPathFor (_acf ),_cea ._abg [_bga ].X ());
};};for _aaf ,_fedc :=range _cea .Images {if _aagc :=_cd .AddImageToZip (_aac ,_fedc ,_aaf +1,_c .DocTypeDocument );_aagc !=nil {return _aagc ;};};for _edge ,_bfca :=range _cea ._cadge {_bfb :=_c .AbsoluteFilename (_dfg ,_c .ChartType ,_edge +1);_aa .MarshalXML (_aac ,_bfb ,_bfca ._gfb );
};if _bffd :=_aa .MarshalXML (_aac ,_c .ContentTypesFilename ,_cea .ContentTypes .X ());_bffd !=nil {return _bffd ;};if _ffae :=_cea .WriteExtraFiles (_aac );_ffae !=nil {return _ffae ;};return _aac .Close ();};

// RunProperties returns the RunProperties controlling numbering level font, etc.
func (_edaff NumberingLevel )RunProperties ()RunProperties {if _edaff ._ebdf .RPr ==nil {_edaff ._ebdf .RPr =_aag .NewCT_RPr ();};return RunProperties {_edaff ._ebdf .RPr };};

// TableStyleProperties are table properties as defined in a style.
type TableStyleProperties struct{_bacac *_aag .CT_TblPrBase };func _ebgc (_cfdba *Document ,_cebe []*_aag .EG_ContentBlockContent ,_dabea *TableInfo )[]Node {_abbg :=[]Node {};for _ ,_dbdecd :=range _cebe {if _abdfd :=_dbdecd .ContentBlockContentChoice .Sdt ;
_abdfd !=nil {if _bbdb :=_abdfd .SdtContent ;_bbdb !=nil {for _ ,_bacf :=range _bbdb .EG_ContentBlockContent {_abbg =append (_abbg ,_gbgb (_cfdba ,_bacf .ContentBlockContentChoice .P ,_dabea ,nil )...);};};};_abbg =append (_abbg ,_gbgb (_cfdba ,_dbdecd .ContentBlockContentChoice .P ,_dabea ,nil )...);
for _ ,_fefe :=range _dbdecd .ContentBlockContentChoice .Tbl {_bddd :=Table {_cfdba ,_fefe };_daee ,_ :=_cfdba .Styles .SearchStyleById (_bddd .Style ());_eaddd :=[]Node {};for _fgbbb ,_ebab :=range _fefe .EG_ContentRowContent {for _ ,_bbac :=range _ebab .ContentRowContentChoice .Tr {for _gdef ,_gbeee :=range _bbac .EG_ContentCellContent {for _ ,_cdbfbd :=range _gbeee .ContentCellContentChoice .Tc {_dbgf :=&TableInfo {Table :_fefe ,Row :_bbac ,Cell :_cdbfbd ,RowIndex :_fgbbb ,ColIndex :_gdef };
for _ ,_bfacc :=range _cdbfbd .EG_BlockLevelElts {_eaddd =append (_eaddd ,_ebgc (_cfdba ,_bfacc .BlockLevelEltsChoice .EG_ContentBlockContent ,_dbgf )...);};};};};};_abbg =append (_abbg ,Node {_fgge :_cfdba ,_geed :&_bddd ,Style :_daee ,Children :_eaddd });
};};return _abbg ;};

// Runs returns all of the runs in a paragraph.
func (_egfcf Paragraph )Runs ()[]Run {_gdecg :=[]Run {};for _ ,_dgab :=range _egfcf ._dbgba .EG_PContent {if _dgab .PContentChoice .Hyperlink !=nil &&_dgab .PContentChoice .Hyperlink .PContentChoice .EG_ContentRunContent !=nil {for _ ,_daca :=range _dgab .PContentChoice .Hyperlink .PContentChoice .EG_ContentRunContent {if _daca .ContentRunContentChoice .R !=nil {_gdecg =append (_gdecg ,Run {_egfcf ._gbga ,_daca .ContentRunContentChoice .R });
};};};for _ ,_bgfdg :=range _dgab .PContentChoice .EG_ContentRunContent {if _bgfdg .ContentRunContentChoice .R !=nil {_gdecg =append (_gdecg ,Run {_egfcf ._gbga ,_bgfdg .ContentRunContentChoice .R });};if _bgfdg .ContentRunContentChoice .Sdt !=nil &&_bgfdg .ContentRunContentChoice .Sdt .SdtContent !=nil {for _ ,_abcgb :=range _bgfdg .ContentRunContentChoice .Sdt .SdtContent .EG_PContent {for _ ,_gcddd :=range _abcgb .PContentChoice .EG_ContentRunContent {if _gcddd .ContentRunContentChoice .R !=nil {_gdecg =append (_gdecg ,Run {_egfcf ._gbga ,_gcddd .ContentRunContentChoice .R });
};};};};};};return _gdecg ;};

// NewWatermarkText generates a new WatermarkText.
func NewWatermarkText ()WatermarkText {_gacca :=_ccc .NewShapetype ();_gfecb :=_cafea ();_bddcc :=_fedbb ();_cfaf :=_baba ();_fbgcb :=_acbaf ();_beea :=_dbag ();_gacca .EG_ShapeElements =[]*_ccc .EG_ShapeElements {{ShapeElementsChoice :&_ccc .EG_ShapeElementsChoice {Formulas :_gfecb }},{ShapeElementsChoice :&_ccc .EG_ShapeElementsChoice {Path :_bddcc }},{ShapeElementsChoice :&_ccc .EG_ShapeElementsChoice {Textpath :_cfaf }},{ShapeElementsChoice :&_ccc .EG_ShapeElementsChoice {Handles :_fbgcb }},{ShapeElementsChoice :&_ccc .EG_ShapeElementsChoice {Lock :_beea }}};
var (_dagaa ="_\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0031\u0033\u0036";_adge ="2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030";_cbab =float32 (136.0);_gddg ="\u0031\u0030\u00380\u0030";_ddgg ="m\u0040\u0037\u002c\u006c\u0040\u0038,\u006d\u0040\u0035\u002c\u0032\u0031\u0036\u0030\u0030l\u0040\u0036\u002c2\u00316\u0030\u0030\u0065";
);_gacca .IdAttr =&_dagaa ;_gacca .CoordsizeAttr =&_adge ;_gacca .SptAttr =&_cbab ;_gacca .AdjAttr =&_gddg ;_gacca .PathAttr =&_ddgg ;_cccg :=_ccc .NewShape ();_cccg .ShapeChoice =append (_cccg .ShapeChoice ,&_ccc .CT_ShapeChoice {ShapeElementsChoice :&_ccc .EG_ShapeElementsChoice {Fill :_cbfd ()}});
_cccg .ShapeChoice =append (_cccg .ShapeChoice ,&_ccc .CT_ShapeChoice {ShapeElementsChoice :&_ccc .EG_ShapeElementsChoice {Textpath :_aefecf ()}});var (_febea ="\u0050\u006f\u0077\u0065\u0072\u0050l\u0075\u0073\u0057\u0061\u0074\u0065\u0072\u004d\u0061\u0072\u006b\u004f\u0062j\u0065\u0063\u0074\u0031\u0033\u0036\u00380\u0030\u0038\u0038\u0036";
_bcbcd ="\u005f\u0078\u00300\u0030\u0030\u005f\u0073\u0032\u0030\u0035\u0031";_ccbg ="\u0023\u005f\u00780\u0030\u0030\u0030\u005f\u0074\u0031\u0033\u0036";_fbbe ="";_cgbeb ="\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u003a\u0061bs\u006f\u006c\u0075\u0074\u0065;\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065f\u0074\u003a\u0030\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070\u003a\u0030\u003b\u0077\u0069\u0064\u0074h\u003a\u0034\u0036\u0038\u0070\u0074\u003bh\u0065ig\u0068\u0074\u003a\u0032\u0033\u0034p\u0074\u003b\u007a\u002d\u0069\u006e\u0064\u0065x\u003a\u002d\u0032\u00351\u0036\u0035\u0031\u0030\u0037\u0032\u003b\u006d\u0073o\u002d\u0077r\u0061\u0070\u002d\u0065\u0064\u0069\u0074\u0065\u0064\u003a\u0066\u003b\u006d\u0073\u006f\u002d\u0077\u0069\u0064\u0074\u0068\u002d\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0030\u003b\u006d\u0073\u006f\u002dh\u0065\u0069\u0067\u0068\u0074\u002dp\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0030\u003b\u006d\u0073\u006f\u002dp\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u003a\u0063\u0065\u006e\u0074\u0065r\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006fn\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u002d\u0072\u0065\u006ca\u0074\u0069\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076e\u0072\u0074\u0069\u0063\u0061\u006c\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069o\u006e\u002d\u0076e\u0072\u0074\u0069\u0063\u0061\u006c-\u0072\u0065\u006c\u0061\u0074\u0069v\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e;\u006d\u0073\u006f\u002d\u0077\u0069\u0064\u0074\u0068-p\u0065\u0072\u0063\u0065\u006e\u0074:\u0030\u003b\u006d\u0073\u006f-\u0068\u0065\u0069\u0067\u0068\u0074\u002d\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0030\u003b";
_eedae ="\u0073\u0069\u006c\u0076\u0065\u0072";);_cccg .IdAttr =&_febea ;_cccg .SpidAttr =&_bcbcd ;_cccg .TypeAttr =&_ccbg ;_cccg .AltAttr =&_fbbe ;_cccg .StyleAttr =&_cgbeb ;_cccg .AllowincellAttr =_bac .ST_TrueFalseFalse ;_cccg .FillcolorAttr =&_eedae ;
_cccg .StrokedAttr =_bac .ST_TrueFalseF ;_gdafe :=_aag .NewCT_Picture ();_gdafe .Any =[]_c .Any {_gacca ,_cccg };return WatermarkText {_babcb :_gdafe ,_eafacd :_cccg ,_daffb :_gacca };};

// TOCOptions specify options for table of contents customization.
type TOCOptions struct{

// UseHyperlinks makes the table of contents entries hyperlinks.
UseHyperlinks bool ;

// OmitPageNumbers allows omitting page numbers from the table of contents.
OmitPageNumbers bool ;

// HeadingLevel uses paragraphs formatted with all of the specified range of built-in heading styles.
// "3-3" is to show only third heading level, for instance.
HeadingLevel string ;};

// SizeValue returns the value of paragraph font size in points.
func (_acdb ParagraphProperties )SizeValue ()float64 {if _eefe :=_acdb ._ggac .RPr .Sz ;_eefe !=nil {_cagfg :=_eefe .ValAttr ;if _cagfg .ST_UnsignedDecimalNumber !=nil {return float64 (*_cagfg .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// Cells returns the cells defined in the table.
func (_aaeee Row )Cells ()[]Cell {_ggcfb :=[]Cell {};for _ ,_bacc :=range _aaeee ._dbebf .EG_ContentCellContent {for _ ,_afdac :=range _bacc .ContentCellContentChoice .Tc {_ggcfb =append (_ggcfb ,Cell {_aaeee ._bacgc ,_afdac });};if _bacc .ContentCellContentChoice .Sdt !=nil &&_bacc .ContentCellContentChoice .Sdt .SdtContent !=nil {for _ ,_cafg :=range _bacc .ContentCellContentChoice .Sdt .SdtContent .EG_ContentCellContent {for _ ,_abca :=range _cafg .ContentCellContentChoice .Tc {_ggcfb =append (_ggcfb ,Cell {_aaeee ._bacgc ,_abca });
};};};};return _ggcfb ;};

// AnchoredDrawing is an absolutely positioned image within a document page.
type AnchoredDrawing struct{_cab *Document ;_ae *_aag .WdAnchor ;};

// SetLineSpacing controls the line spacing of the paragraph.
func (_dcabab ParagraphStyleProperties )SetLineSpacing (m _bf .Distance ,rule _aag .ST_LineSpacingRule ){if _dcabab ._aefec .Spacing ==nil {_dcabab ._aefec .Spacing =_aag .NewCT_Spacing ();};if rule ==_aag .ST_LineSpacingRuleUnset {_dcabab ._aefec .Spacing .LineRuleAttr =_aag .ST_LineSpacingRuleUnset ;
_dcabab ._aefec .Spacing .LineAttr =nil ;}else {_dcabab ._aefec .Spacing .LineRuleAttr =rule ;_dcabab ._aefec .Spacing .LineAttr =&_aag .ST_SignedTwipsMeasure {};_dcabab ._aefec .Spacing .LineAttr .Int64 =_c .Int64 (int64 (m /_bf .Twips ));};};func (_cbfg *Document )insertImageFromNode (_ecgcc Node ){for _ ,_ebf :=range _ecgcc .AnchoredDrawings {if _gacdd ,_aade :=_ebf .GetImage ();
_aade {_aba ,_baggf :=_cd .ImageFromFile (_gacdd .Path ());if _baggf !=nil {_dg .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_baggf );};
_bddea ,_baggf :=_cbfg .AddImage (_aba );if _baggf !=nil {_dg .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_baggf );
};_aadc :=_cbfg ._eeb .GetByRelId (_bddea .RelID ());_aadc .SetID (_gacdd .RelID ());};};for _ ,_aacdf :=range _ecgcc .InlineDrawings {if _bggag ,_dfda :=_aacdf .GetImage ();_dfda {_edab ,_bdgf :=_cd .ImageFromFile (_bggag .Path ());if _bdgf !=nil {_dg .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_bdgf );
};_egfe ,_bdgf :=_cbfg .AddImage (_edab );if _bdgf !=nil {_dg .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_bdgf );
};_dgfe :=_cbfg ._eeb .GetByRelId (_egfe .RelID ());_dgfe .SetID (_bggag .RelID ());};};};

// PossibleValues returns the possible values for a FormFieldTypeDropDown.
func (_gacf FormField )PossibleValues ()[]string {if len (_gacf ._daga .FFDataChoice )==0{return nil ;};_fcbe :=[]string {};for _ ,_eddg :=range _gacf ._daga .FFDataChoice {if _eddg .DdList !=nil {for _ ,_caagg :=range _eddg .DdList .ListEntry {if _caagg ==nil {continue ;
};_fcbe =append (_fcbe ,_caagg .ValAttr );};};};return _fcbe ;};func (_cbga *Document )InsertTableBefore (relativeTo Paragraph )Table {return _cbga .insertTable (relativeTo ,true );};

// ParagraphBorders allows manipulation of borders on a paragraph.
type ParagraphBorders struct{_agef *Document ;_gabef *_aag .CT_PBdr ;};func _gbgb (_gbbc *Document ,_daae []*_aag .CT_P ,_cgbf *TableInfo ,_fbaa *DrawingInfo )[]Node {_efeba :=[]Node {};for _ ,_dbce :=range _daae {_egfec :=Paragraph {_gbbc ,_dbce };_bbge :=Node {_fgge :_gbbc ,_geed :&_egfec };
if _ffbfc ,_ebcaf :=_gbbc .Styles .SearchStyleById (_egfec .Style ());_ebcaf {_bbge .Style =_ffbfc ;};for _ ,_ggfabb :=range _egfec .Runs (){_bbge .Children =append (_bbge .Children ,Node {_fgge :_gbbc ,_geed :_ggfabb ,AnchoredDrawings :_ggfabb .DrawingAnchored (),InlineDrawings :_ggfabb .DrawingInline ()});
};_efeba =append (_efeba ,_bbge );};return _efeba ;};

// X returns the inner wrapped XML type.
func (_cdde Comment )X ()*_aag .CT_Comment {return _cdde ._edac };

// SetStartIndent controls the start indent of the paragraph.
func (_aeaba ParagraphStyleProperties )SetStartIndent (m _bf .Distance ){if _aeaba ._aefec .Ind ==nil {_aeaba ._aefec .Ind =_aag .NewCT_Ind ();};if m ==_bf .Zero {_aeaba ._aefec .Ind .StartAttr =nil ;}else {_aeaba ._aefec .Ind .StartAttr =&_aag .ST_SignedTwipsMeasure {};
_aeaba ._aefec .Ind .StartAttr .Int64 =_c .Int64 (int64 (m /_bf .Twips ));};};

// SetBefore sets the spacing that comes before the paragraph.
func (_abbc ParagraphSpacing )SetBefore (before _bf .Distance ){_abbc ._cdced .BeforeAttr =&_bac .ST_TwipsMeasure {};_abbc ._cdced .BeforeAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (before /_bf .Twips ));};

// SetBehindDoc sets the behindDoc attribute of anchor.
func (_gbb AnchoredDrawing )SetBehindDoc (val bool ){_gbb ._ae .BehindDocAttr =val };

// X returns the inner wrapped XML type.
func (_fbbbg Style )X ()*_aag .CT_Style {return _fbbbg ._bcedg };

// InitializeDefault constructs the default styles.
func (_bdgg Styles )InitializeDefault (){_bdgg .initializeDocDefaults ();_bdgg .initializeStyleDefaults ();};

// AddTable adds a table to the footer.
func (_cdef Footer )AddTable ()Table {_ceaa :=_aag .NewEG_ContentBlockContent ();_cdef ._degea .EG_BlockLevelElts =append (_cdef ._degea .EG_BlockLevelElts ,&_aag .EG_BlockLevelElts {BlockLevelEltsChoice :&_aag .EG_BlockLevelEltsChoice {EG_ContentBlockContent :[]*_aag .EG_ContentBlockContent {_ceaa }}});
_dbbe :=_aag .NewCT_Tbl ();_ceaa .ContentBlockContentChoice .Tbl =append (_ceaa .ContentBlockContentChoice .Tbl ,_dbbe );return Table {_cdef ._gegg ,_dbbe };};

// SetStyle sets the font size.
func (_agfe RunProperties )SetStyle (style string ){if style ==""{_agfe ._gbeff .RStyle =nil ;}else {_agfe ._gbeff .RStyle =_aag .NewCT_String ();_agfe ._gbeff .RStyle .ValAttr =style ;};};

// Paragraphs returns all the paragraphs in the document body including tables.
func (_dbcf *Document )Paragraphs ()[]Paragraph {_edaf :=[]Paragraph {};if _dbcf ._ffb .Body ==nil {return nil ;};for _ ,_bcf :=range _dbcf ._ffb .Body .EG_BlockLevelElts {for _ ,_edbd :=range _bcf .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_ceac :=range _edbd .ContentBlockContentChoice .P {_edaf =append (_edaf ,Paragraph {_dbcf ,_ceac });
};};};for _ ,_fab :=range _dbcf .Tables (){for _ ,_beg :=range _fab .Rows (){for _ ,_bggf :=range _beg .Cells (){_edaf =append (_edaf ,_bggf .Paragraphs ()...);};};};return _edaf ;};

// Footnote is an individual footnote reference within the document.
type Footnote struct{_adae *Document ;_deedc *_aag .CT_FtnEdn ;};

// ExtractTextOptions extraction text options.
type ExtractTextOptions struct{

// WithNumbering extract numbering elements if set to `true`.
WithNumbering bool ;

// NumberingIndent default value of numbering indent.
NumberingIndent string ;

// RunsOnNewLine write each of runs text on new line if set to `true`.
RunsOnNewLine bool ;};

// IgnoreSpaceBetweenParagraphOfSameStyle sets contextual spacing.
func (_aagcc Paragraph )IgnoreSpaceBetweenParagraphOfSameStyle (){_aagcc .ensurePPr ();if _aagcc ._dbgba .PPr .ContextualSpacing ==nil {_aagcc ._dbgba .PPr .ContextualSpacing =_aag .NewCT_OnOff ();};_aagcc ._dbgba .PPr .ContextualSpacing .ValAttr =&_bac .ST_OnOff {ST_OnOff1 :_bac .ST_OnOff1On };
};

// Spacing returns the paragraph spacing settings.
func (_gdfda ParagraphProperties )Spacing ()ParagraphSpacing {if _gdfda ._ggac .Spacing ==nil {_gdfda ._ggac .Spacing =_aag .NewCT_Spacing ();};return ParagraphSpacing {_gdfda ._ggac .Spacing };};

// X returns the inner wrapped XML type.
func (_ce Bookmark )X ()*_aag .CT_Bookmark {return _ce ._ccg };

// New constructs an empty document that content can be added to.
func New ()*Document {_dce :=&Document {_ffb :_aag .NewDocument ()};_dce .ContentTypes =_cd .NewContentTypes ();_dce ._ffb .Body =_aag .NewCT_Body ();_dce ._ffb .ConformanceAttr =_bac .ST_ConformanceClassTransitional ;_dce ._eeb =_cd .NewRelationships ();
_dce ._bcaf =_cd .NewRelationships ();_dce .AppProperties =_cd .NewAppProperties ();_dce .CoreProperties =_cd .NewCoreProperties ();_dce .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0064\u006f\u0063u\u006d\u0065n\u0074\u002e\u0078\u006d\u006c","\u0061p\u0070\u006c\u0069c\u0061\u0074\u0069o\u006e/v\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072dp\u0072o\u0063\u0065\u0073\u0073\u0069\u006eg\u006d\u006c\u002e\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u002e\u006d\u0061\u0069\u006e\u002bx\u006d\u006c");
_dce .Settings =NewSettings ();_dce ._eeb .AddRelationship ("\u0073\u0065\u0074t\u0069\u006e\u0067\u0073\u002e\u0078\u006d\u006c",_c .SettingsType );_dce .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0073\u0065\u0074t\u0069\u006eg\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002b\u0078\u006d\u006c");
_dce .Rels =_cd .NewRelationships ();_dce .Rels .AddRelationship (_c .RelativeFilename (_c .DocTypeDocument ,"",_c .CorePropertiesType ,0),_c .CorePropertiesType );_dce .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c",_c .ExtendedPropertiesType );
_dce .Rels .AddRelationship ("\u0077\u006f\u0072\u0064\u002f\u0064\u006f\u0063\u0075\u006d\u0065\u006et\u002e\u0078\u006d\u006c",_c .OfficeDocumentType );_dce .Numbering =NewNumbering ();_dce .Numbering .InitializeDefault ();_dce .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u006e\u0075\u006d\u0062e\u0072\u0069\u006e\u0067\u002b\u0078m\u006c");
_dce ._eeb .AddRelationship ("\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c",_c .NumberingType );_dce .Styles =NewStyles ();_dce .Styles .InitializeDefault ();_dce .ContentTypes .AddOverride ("\u002f\u0077o\u0072\u0064\u002fs\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0073\u0074\u0079\u006ce\u0073\u002b\u0078\u006d\u006c");
_dce ._eeb .AddRelationship ("\u0073\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c",_c .StylesType );_dce ._ffb .Body =_aag .NewCT_Body ();return _dce ;};

// SetStrikeThrough sets the run to strike-through.
func (_ebaed RunProperties )SetStrikeThrough (b bool ){if !b {_ebaed ._gbeff .Strike =nil ;}else {_ebaed ._gbeff .Strike =_aag .NewCT_OnOff ();};};

// SetSpacing sets the spacing that comes before and after the paragraph.
func (_fgfe ParagraphStyleProperties )SetSpacing (before ,after _bf .Distance ){if _fgfe ._aefec .Spacing ==nil {_fgfe ._aefec .Spacing =_aag .NewCT_Spacing ();};if before ==_bf .Zero {_fgfe ._aefec .Spacing .BeforeAttr =nil ;}else {_fgfe ._aefec .Spacing .BeforeAttr =&_bac .ST_TwipsMeasure {};
_fgfe ._aefec .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (before /_bf .Twips ));};if after ==_bf .Zero {_fgfe ._aefec .Spacing .AfterAttr =nil ;}else {_fgfe ._aefec .Spacing .AfterAttr =&_bac .ST_TwipsMeasure {};_fgfe ._aefec .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (after /_bf .Twips ));
};};func (_gagdf Endnote )content ()[]*_aag .EG_ContentBlockContent {var _edfdec []*_aag .EG_ContentBlockContent ;for _ ,_ecfb :=range _gagdf ._bfga .EG_BlockLevelElts {_edfdec =append (_edfdec ,_ecfb .BlockLevelEltsChoice .EG_ContentBlockContent ...);
};return _edfdec ;};

// SetSpacing sets the spacing that comes before and after the paragraph.
// Deprecated: See Spacing() instead which allows finer control.
func (_affe ParagraphProperties )SetSpacing (before ,after _bf .Distance ){if _affe ._ggac .Spacing ==nil {_affe ._ggac .Spacing =_aag .NewCT_Spacing ();};_affe ._ggac .Spacing .BeforeAttr =&_bac .ST_TwipsMeasure {};_affe ._ggac .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (before /_bf .Twips ));
_affe ._ggac .Spacing .AfterAttr =&_bac .ST_TwipsMeasure {};_affe ._ggac .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (after /_bf .Twips ));};type htmlNode struct{_fgfc _f .StartElement ;_cebca *htmlNode ;};

// DrawingAnchored returns a slice of AnchoredDrawings.
func (_fbfad Run )DrawingAnchored ()[]AnchoredDrawing {_cdefb :=[]AnchoredDrawing {};for _ ,_beadf :=range _fbfad ._dcgfd .EG_RunInnerContent {if _beadf .RunInnerContentChoice .Drawing ==nil {continue ;};for _ ,_afcgg :=range _beadf .RunInnerContentChoice .Drawing .DrawingChoice {if _afcgg .Anchor ==nil {continue ;
};_cdefb =append (_cdefb ,AnchoredDrawing {_fbfad ._edce ,_afcgg .Anchor });};};return _cdefb ;};

// ParagraphStyleProperties is the styling information for a paragraph.
type ParagraphStyleProperties struct{_aefec *_aag .CT_PPrGeneral };

// SetAllCaps sets the run to all caps.
func (_dade RunProperties )SetAllCaps (b bool ){if !b {_dade ._gbeff .Caps =nil ;}else {_dade ._gbeff .Caps =_aag .NewCT_OnOff ();};};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_baecg TableProperties )SetCellSpacingAuto (){_baecg ._abgbf .TblCellSpacing =_aag .NewCT_TblWidth ();_baecg ._abgbf .TblCellSpacing .TypeAttr =_aag .ST_TblWidthAuto ;};func _cafea ()*_ccc .Formulas {_aefbd :=_ccc .NewFormulas ();_aefbd .F =[]*_ccc .CT_F {_gg .CreateFormula ("\u0073\u0075\u006d\u0020\u0023\u0030\u0020\u0030\u00201\u0030\u0038\u0030\u0030"),_gg .CreateFormula ("p\u0072\u006f\u0064\u0020\u0023\u0030\u0020\u0032\u0020\u0031"),_gg .CreateFormula ("\u0073\u0075\u006d\u0020\u0032\u0031\u0036\u0030\u0030 \u0030\u0020\u0040\u0031"),_gg .CreateFormula ("\u0073\u0075\u006d\u0020\u0030\u0020\u0030\u0020\u0040\u0032"),_gg .CreateFormula ("\u0073\u0075\u006d\u0020\u0032\u0031\u0036\u0030\u0030 \u0030\u0020\u0040\u0033"),_gg .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0040\u0033\u0020\u0030"),_gg .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0032\u0031\u00360\u0030\u0020\u0040\u0031"),_gg .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0030\u0020\u0040\u0032"),_gg .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0040\u0034\u00202\u0031\u0036\u0030\u0030"),_gg .CreateFormula ("\u006di\u0064\u0020\u0040\u0035\u0020\u00406"),_gg .CreateFormula ("\u006di\u0064\u0020\u0040\u0038\u0020\u00405"),_gg .CreateFormula ("\u006di\u0064\u0020\u0040\u0037\u0020\u00408"),_gg .CreateFormula ("\u006di\u0064\u0020\u0040\u0036\u0020\u00407"),_gg .CreateFormula ("s\u0075\u006d\u0020\u0040\u0036\u0020\u0030\u0020\u0040\u0035")};
return _aefbd ;};

// DoubleStrike returns true if run is double striked.
func (_addf RunProperties )DoubleStrike ()bool {return _faabg (_addf ._gbeff .Dstrike )};

// X returns the inner wrapped XML type.
func (_ggce Table )X ()*_aag .CT_Tbl {return _ggce ._bgcdd };type listItemInfo struct{FromStyle *Style ;FromParagraph *Paragraph ;AbstractNumId *int64 ;NumberingLevel *NumberingLevel ;};var _ffgg =[...]uint8 {0,20,37,58,79};

// SetOuterShadowImageEffect sets the outer shadow image effect.
func (_ega AnchoredDrawing )SetOuterShadowImageEffect (radius ,offset _bf .Distance ,c _ff .Color ,degrees float64 ){_baf :=_bf .ToEMU (float64 (radius ));_bafg :=_bf .ToEMU (float64 (offset ));_dd :=int32 (degrees *60000);for _ ,_gef :=range _ega ._ae .Graphic .GraphicData .Any {if _fge ,_agf :=_gef .(*_ggg .Pic );
_agf {_ega .initializeEffectList (_fge .SpPr );_fge .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw =_da .NewCT_OuterShadowEffect ();_fge .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw .BlurRadAttr =&_baf ;_fge .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw .DistAttr =&_bafg ;
_fge .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw .DirAttr =&_dd ;_fge .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw .SrgbClr =_da .NewCT_SRgbColor ();_fge .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw .SrgbClr .ValAttr =*c .AsRGBString ();
_fge .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw .AlgnAttr =_da .ST_RectAlignmentBl ;_gcca :=false ;_fge .SpPr .EffectPropertiesChoice .EffectLst .OuterShdw .RotWithShapeAttr =&_gcca ;};};_ega .setEffectExtent (_baf ,_baf ,_baf ,_baf );};

// X returns the inner wrapped XML type.
func (_gffeg Footnote )X ()*_aag .CT_FtnEdn {return _gffeg ._deedc };

// SetHangingIndent controls the hanging indent of the paragraph.
func (_cbdcc ParagraphStyleProperties )SetHangingIndent (m _bf .Distance ){if _cbdcc ._aefec .Ind ==nil {_cbdcc ._aefec .Ind =_aag .NewCT_Ind ();};if m ==_bf .Zero {_cbdcc ._aefec .Ind .HangingAttr =nil ;}else {_cbdcc ._aefec .Ind .HangingAttr =&_bac .ST_TwipsMeasure {};
_cbdcc ._aefec .Ind .HangingAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_bf .Twips ));};};func (_fcbc *Document )reorderEndnote (){_gegf :=int64 (1);_gdab :=map[int64 ]int64 {};for _ ,_gfg :=range _fcbc ._edga .Endnote {switch _gfg .TypeAttr {case _aag .ST_FtnEdnSeparator :_gfg .IdAttr =-1;
break ;case _aag .ST_FtnEdnContinuationSeparator :_gfg .IdAttr =0;break ;default:_gdab [_gfg .IdAttr ]=_gegf ;_gfg .IdAttr =_gegf ;_gegf ++;};};for _ ,_dagb :=range _fcbc .Paragraphs (){for _ ,_dgcf :=range _dagb .Runs (){if _aefe ,_edd :=_dgcf .IsEndnote ();
_aefe {_dgcf .X ().EG_RunInnerContent [0].RunInnerContentChoice .EndnoteReference .IdAttr =_gdab [_edd ];};};};};

// X returns the inner wrapped XML type.
func (_aagf Numbering )X ()*_aag .Numbering {return _aagf ._gbda };

// AddTable adds a table to the table cell.
func (_cge Cell )AddTable ()Table {_cbe :=_aag .NewEG_BlockLevelElts ();_cge ._cbd .EG_BlockLevelElts =append (_cge ._cbd .EG_BlockLevelElts ,_cbe );_egfaf :=_aag .NewEG_ContentBlockContent ();_cbe .BlockLevelEltsChoice .EG_ContentBlockContent =append (_cbe .BlockLevelEltsChoice .EG_ContentBlockContent ,_egfaf );
_ade :=_aag .NewCT_Tbl ();_egfaf .ContentBlockContentChoice .Tbl =append (_egfaf .ContentBlockContentChoice .Tbl ,_ade );return Table {_cge ._eeca ,_ade };};

// SetAfterSpacing sets spacing below paragraph.
func (_ceab Paragraph )SetAfterSpacing (d _bf .Distance ){_ceab .ensurePPr ();if _ceab ._dbgba .PPr .Spacing ==nil {_ceab ._dbgba .PPr .Spacing =_aag .NewCT_Spacing ();};_acga :=_ceab ._dbgba .PPr .Spacing ;_acga .AfterAttr =&_bac .ST_TwipsMeasure {};_acga .AfterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (d /_bf .Twips ));
};func _bacgg ()*_ccc .Formulas {_abeae :=_ccc .NewFormulas ();_abeae .F =[]*_ccc .CT_F {_gg .CreateFormula ("\u0069\u0066 \u006c\u0069\u006e\u0065\u0044\u0072\u0061\u0077\u006e\u0020\u0070\u0069\u0078\u0065\u006c\u004c\u0069\u006e\u0065\u0057\u0069\u0064th\u0020\u0030"),_gg .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0030\u0020\u0031\u0020\u0030"),_gg .CreateFormula ("\u0073\u0075\u006d\u0020\u0030\u0020\u0030\u0020\u0040\u0031"),_gg .CreateFormula ("p\u0072\u006f\u0064\u0020\u0040\u0032\u0020\u0031\u0020\u0032"),_gg .CreateFormula ("\u0070r\u006f\u0064\u0020\u0040\u0033\u0020\u0032\u0031\u0036\u0030\u0030 \u0070\u0069\u0078\u0065\u006c\u0057\u0069\u0064\u0074\u0068"),_gg .CreateFormula ("\u0070r\u006f\u0064\u0020\u00403\u0020\u0032\u0031\u0036\u00300\u0020p\u0069x\u0065\u006c\u0048\u0065\u0069\u0067\u0068t"),_gg .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0030\u0020\u0030\u0020\u0031"),_gg .CreateFormula ("p\u0072\u006f\u0064\u0020\u0040\u0036\u0020\u0031\u0020\u0032"),_gg .CreateFormula ("\u0070r\u006f\u0064\u0020\u0040\u0037\u0020\u0032\u0031\u0036\u0030\u0030 \u0070\u0069\u0078\u0065\u006c\u0057\u0069\u0064\u0074\u0068"),_gg .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0038\u0020\u0032\u00316\u0030\u0030\u0020\u0030"),_gg .CreateFormula ("\u0070r\u006f\u0064\u0020\u00407\u0020\u0032\u0031\u0036\u00300\u0020p\u0069x\u0065\u006c\u0048\u0065\u0069\u0067\u0068t"),_gg .CreateFormula ("\u0073u\u006d \u0040\u0031\u0030\u0020\u0032\u0031\u0036\u0030\u0030\u0020\u0030")};
return _abeae ;};

// Definitions returns the defined numbering definitions.
func (_cefb Numbering )Definitions ()[]NumberingDefinition {_aefea :=[]NumberingDefinition {};if _cefb ._gbda !=nil {for _ ,_egec :=range _cefb ._gbda .AbstractNum {_aefea =append (_aefea ,NumberingDefinition {_egec });};};return _aefea ;};

// TableConditionalFormatting returns a conditional formatting object of a given
// type.  Calling this method repeatedly will return the same object.
func (_deedgb Style )TableConditionalFormatting (typ _aag .ST_TblStyleOverrideType )TableConditionalFormatting {for _ ,_cfff :=range _deedgb ._bcedg .TblStylePr {if _cfff .TypeAttr ==typ {return TableConditionalFormatting {_cfff };};};_dafb :=_aag .NewCT_TblStylePr ();
_dafb .TypeAttr =typ ;_deedgb ._bcedg .TblStylePr =append (_deedgb ._bcedg .TblStylePr ,_dafb );return TableConditionalFormatting {_dafb };};

// SetHANSITheme sets the font H ANSI Theme.
func (_ebeab Fonts )SetHANSITheme (t _aag .ST_Theme ){_ebeab ._ecdeb .HAnsiThemeAttr =t };

// SetASCIITheme sets the font ASCII Theme.
func (_afaa Fonts )SetASCIITheme (t _aag .ST_Theme ){_afaa ._ecdeb .AsciiThemeAttr =t };

// Borders returns the ParagraphBorders for setting-up border on paragraph.
func (_cefgc Paragraph )Borders ()ParagraphBorders {_cefgc .ensurePPr ();if _cefgc ._dbgba .PPr .PBdr ==nil {_cefgc ._dbgba .PPr .PBdr =_aag .NewCT_PBdr ();};return ParagraphBorders {_cefgc ._gbga ,_cefgc ._dbgba .PPr .PBdr };};

// Section return paragraph properties section value.
func (_ccagc ParagraphProperties )Section ()(Section ,bool ){if _ccagc ._ggac .SectPr !=nil {return Section {_ccagc ._ffaef ,_ccagc ._ggac .SectPr },true ;};return Section {},false ;};

// GetColor returns the color.Color object representing the run color.
func (_ddeec RunProperties )GetColor ()_ff .Color {if _bffaef :=_ddeec ._gbeff .Color ;_bffaef !=nil {_dcebg :=_bffaef .ValAttr ;if _dcebg .ST_HexColorRGB !=nil {return _ff .FromHex (*_dcebg .ST_HexColorRGB );};};return _ff .Color {};};

// X returns the inner wrapped XML type.
func (_fdec ParagraphStyleProperties )X ()*_aag .CT_PPrGeneral {return _fdec ._aefec };

// SetWidth sets the cell width to a specified width.
func (_cfcb CellProperties )SetWidth (d _bf .Distance ){_cfcb ._cfb .TcW =_aag .NewCT_TblWidth ();_cfcb ._cfb .TcW .TypeAttr =_aag .ST_TblWidthDxa ;_cfcb ._cfb .TcW .WAttr =&_aag .ST_MeasurementOrPercent {};_cfcb ._cfb .TcW .WAttr .ST_DecimalNumberOrPercent =&_aag .ST_DecimalNumberOrPercent {};
_cfcb ._cfb .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (d /_bf .Twips ));};

// Properties returns the run properties.
func (_bdegd Run )Properties ()RunProperties {if _bdegd ._dcgfd .RPr ==nil {_bdegd ._dcgfd .RPr =_aag .NewCT_RPr ();};return RunProperties {_bdegd ._dcgfd .RPr };};func _bcc (_fbde *_aag .CT_Tbl ,_bebb *_aag .CT_P ,_cdba bool )*_aag .CT_Tbl {for _ ,_daba :=range _fbde .EG_ContentRowContent {for _ ,_cga :=range _daba .ContentRowContentChoice .Tr {for _ ,_fdb :=range _cga .EG_ContentCellContent {for _ ,_bbea :=range _fdb .ContentCellContentChoice .Tc {for _bbg ,_faac :=range _bbea .EG_BlockLevelElts {for _ ,_feb :=range _faac .BlockLevelEltsChoice .EG_ContentBlockContent {for _caac ,_dbg :=range _feb .ContentBlockContentChoice .P {if _dbg ==_bebb {_efce :=_aag .NewEG_BlockLevelElts ();
_bbeg :=_aag .NewEG_ContentBlockContent ();_efce .BlockLevelEltsChoice .EG_ContentBlockContent =append (_efce .BlockLevelEltsChoice .EG_ContentBlockContent ,_bbeg );_eac :=_aag .NewCT_Tbl ();_bbeg .ContentBlockContentChoice .Tbl =append (_bbeg .ContentBlockContentChoice .Tbl ,_eac );
_bbea .EG_BlockLevelElts =append (_bbea .EG_BlockLevelElts ,nil );if _cdba {copy (_bbea .EG_BlockLevelElts [_bbg +1:],_bbea .EG_BlockLevelElts [_bbg :]);_bbea .EG_BlockLevelElts [_bbg ]=_efce ;if _caac !=0{_afe :=_aag .NewEG_BlockLevelElts ();_bcg :=_aag .NewEG_ContentBlockContent ();
_afe .BlockLevelEltsChoice .EG_ContentBlockContent =append (_afe .BlockLevelEltsChoice .EG_ContentBlockContent ,_bcg );_bcg .ContentBlockContentChoice .P =_feb .ContentBlockContentChoice .P [:_caac ];_bbea .EG_BlockLevelElts =append (_bbea .EG_BlockLevelElts ,nil );
copy (_bbea .EG_BlockLevelElts [_bbg +1:],_bbea .EG_BlockLevelElts [_bbg :]);_bbea .EG_BlockLevelElts [_bbg ]=_afe ;};_feb .ContentBlockContentChoice .P =_feb .ContentBlockContentChoice .P [_caac :];}else {copy (_bbea .EG_BlockLevelElts [_bbg +2:],_bbea .EG_BlockLevelElts [_bbg +1:]);
_bbea .EG_BlockLevelElts [_bbg +1]=_efce ;if _caac !=len (_feb .ContentBlockContentChoice .P )-1{_cda :=_aag .NewEG_BlockLevelElts ();_eedg :=_aag .NewEG_ContentBlockContent ();_cda .BlockLevelEltsChoice .EG_ContentBlockContent =append (_cda .BlockLevelEltsChoice .EG_ContentBlockContent ,_eedg );
_eedg .ContentBlockContentChoice .P =_feb .ContentBlockContentChoice .P [_caac +1:];_bbea .EG_BlockLevelElts =append (_bbea .EG_BlockLevelElts ,nil );copy (_bbea .EG_BlockLevelElts [_bbg +3:],_bbea .EG_BlockLevelElts [_bbg +2:]);_bbea .EG_BlockLevelElts [_bbg +2]=_cda ;
}else {_adeg :=_aag .NewEG_BlockLevelElts ();_dbc :=_aag .NewEG_ContentBlockContent ();_adeg .BlockLevelEltsChoice .EG_ContentBlockContent =append (_adeg .BlockLevelEltsChoice .EG_ContentBlockContent ,_dbc );_dbc .ContentBlockContentChoice .P =[]*_aag .CT_P {_aag .NewCT_P ()};
_bbea .EG_BlockLevelElts =append (_bbea .EG_BlockLevelElts ,nil );copy (_bbea .EG_BlockLevelElts [_bbg +3:],_bbea .EG_BlockLevelElts [_bbg +2:]);_bbea .EG_BlockLevelElts [_bbg +2]=_adeg ;};_feb .ContentBlockContentChoice .P =_feb .ContentBlockContentChoice .P [:_caac +1];
};return _eac ;};};for _ ,_gag :=range _feb .ContentBlockContentChoice .Tbl {_ebe :=_bcc (_gag ,_bebb ,_cdba );if _ebe !=nil {return _ebe ;};};};};};};};};return nil ;};func (_ffdd *Document )validateBookmarks ()error {_aebf :=make (map[string ]struct{});
for _ ,_gfga :=range _ffdd .Bookmarks (){if _ ,_fbbb :=_aebf [_gfga .Name ()];_fbbb {return _db .Errorf ("d\u0075\u0070\u006c\u0069\u0063\u0061t\u0065\u0020\u0062\u006f\u006f\u006b\u006d\u0061\u0072k\u0020\u0025\u0073 \u0066o\u0075\u006e\u0064",_gfga .Name ());
};_aebf [_gfga .Name ()]=struct{}{};};return nil ;};

// CharacterSpacingValue returns the value of characters spacing in twips (1/20 of point).
func (_aggb ParagraphProperties )CharacterSpacingValue ()int64 {if _cddfd :=_aggb ._ggac .RPr .Spacing ;_cddfd !=nil {_adbce :=_cddfd .ValAttr ;if _adbce .Int64 !=nil {return *_adbce .Int64 ;};};return int64 (0);};

// X returns the inner wrapped XML type.
func (_cgadf Run )X ()*_aag .CT_R {return _cgadf ._dcgfd };

// AddTable adds a new table to the document body.
func (_gefc *Document )AddTable ()Table {_ebd :=_aag .NewEG_BlockLevelElts ();_gefc ._ffb .Body .EG_BlockLevelElts =append (_gefc ._ffb .Body .EG_BlockLevelElts ,_ebd );_fec :=_aag .NewEG_ContentBlockContent ();_ebd .BlockLevelEltsChoice .EG_ContentBlockContent =append (_ebd .BlockLevelEltsChoice .EG_ContentBlockContent ,_fec );
_bef :=_aag .NewCT_Tbl ();_fec .ContentBlockContentChoice .Tbl =append (_fec .ContentBlockContentChoice .Tbl ,_bef );return Table {_gefc ,_bef };};

// Tables returns the tables defined in the footer.
func (_gadea Footer )Tables ()[]Table {_cabfd :=[]Table {};if _gadea ._degea ==nil {return nil ;};for _ ,_feeae :=range _gadea ._degea .EG_BlockLevelElts {for _ ,_afdgb :=range _feeae .BlockLevelEltsChoice .EG_ContentBlockContent {_cabfd =append (_cabfd ,_gadea ._gegg .tables (_afdgb )...);
};};return _cabfd ;};

// SetEastAsiaTheme sets the font East Asia Theme.
func (_ebgd Fonts )SetEastAsiaTheme (t _aag .ST_Theme ){_ebgd ._ecdeb .EastAsiaThemeAttr =t };

// SetCSTheme sets the font complex script theme.
func (_gbgd Fonts )SetCSTheme (t _aag .ST_Theme ){_gbgd ._ecdeb .CsthemeAttr =t };

// RightToLeft returns true if paragraph text goes from right to left.
func (_abaa ParagraphProperties )RightToLeft ()bool {return _faabg (_abaa ._ggac .RPr .Rtl )};

// SetPrimaryStyle marks the style as a primary style.
func (_fbfc Style )SetPrimaryStyle (b bool ){if b {_fbfc ._bcedg .QFormat =_aag .NewCT_OnOff ();}else {_fbfc ._bcedg .QFormat =nil ;};};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_aag .CT_Tbl ;Row *_aag .CT_Row ;Cell *_aag .CT_Tc ;RowIndex int ;ColIndex int ;};

// DocText is an array of extracted text items which has some methods for representing extracted text.
type DocText struct{Items []TextItem ;_dfddf []listItemInfo ;_agaf map[int64 ]map[int64 ]int64 ;};

// TableLook returns the table look, or conditional formatting applied to a table style.
func (_bcafb TableProperties )TableLook ()TableLook {if _bcafb ._abgbf .TblLook ==nil {_bcafb ._abgbf .TblLook =_aag .NewCT_TblLook ();};return TableLook {_bcafb ._abgbf .TblLook };};

// SetTextWrapTopAndBottom sets the text wrap to top and bottom.
func (_gdg AnchoredDrawing )SetTextWrapTopAndBottom (){_gdg ._ae .WrapTypeChoice =&_aag .WdEG_WrapTypeChoice {};_gdg ._ae .WrapTypeChoice .WrapTopAndBottom =_aag .NewWdCT_WrapTopBottom ();_gdg ._ae .LayoutInCellAttr =true ;_gdg ._ae .AllowOverlapAttr =true ;
};func _gdfge (_begc *_aag .CT_OnOff )OnOffValue {if _begc ==nil {return OnOffValueUnset ;};if _begc .ValAttr !=nil &&_begc .ValAttr .Bool !=nil &&*_begc .ValAttr .Bool ==false {return OnOffValueOff ;};return OnOffValueOn ;};

// SetName sets the name of the style.
func (_cgbe Style )SetName (name string ){_cgbe ._bcedg .Name =_aag .NewCT_String ();_cgbe ._bcedg .Name .ValAttr =name ;};

// X returns the inner wrapped XML type.
func (_gbe *Document )X ()*_aag .Document {return _gbe ._ffb };

// SetVerticalMerge controls the vertical merging of cells.
func (_acd CellProperties )SetVerticalMerge (mergeVal _aag .ST_Merge ){if mergeVal ==_aag .ST_MergeUnset {_acd ._cfb .VMerge =nil ;}else {_acd ._cfb .VMerge =_aag .NewCT_VMerge ();_acd ._cfb .VMerge .ValAttr =mergeVal ;};};

// SetCalcOnExit marks if a FormField should be CalcOnExit or not.
func (_afgcf FormField )SetCalcOnExit (calcOnExit bool ){_eadd :=_aag .NewCT_OnOff ();_eadd .ValAttr =&_bac .ST_OnOff {Bool :&calcOnExit };_afgcf ._daga .FFDataChoice =[]*_aag .CT_FFDataChoice {{CalcOnExit :_eadd }};};

// TableProperties are the properties for a table within a document
type TableProperties struct{_abgbf *_aag .CT_TblPr };

// Node is document element node,
// contains Paragraph or Table element.
type Node struct{_fgge *Document ;_geed interface{};Style Style ;AnchoredDrawings []AnchoredDrawing ;InlineDrawings []InlineDrawing ;Children []Node ;};

// X returns the inner wrapped XML type.
func (_beb CellProperties )X ()*_aag .CT_TcPr {return _beb ._cfb };

// Underline returns the type of paragraph underline.
func (_bcad ParagraphProperties )Underline ()_aag .ST_Underline {if _gbfcc :=_bcad ._ggac .RPr .U ;_gbfcc !=nil {return _gbfcc .ValAttr ;};return 0;};

// Caps returns true if run font is capitalized.
func (_fbege RunProperties )Caps ()bool {return _faabg (_fbege ._gbeff .Caps )};

// AddTab adds tab to a run and can be used with the the Paragraph's tab stops.
func (_daacb Run )AddTab (){_bdfef :=_daacb .newIC ();_bdfef .RunInnerContentChoice .Tab =_aag .NewCT_Empty ();};

// SetBeforeAuto controls if spacing before a paragraph is automatically determined.
func (_gdac ParagraphSpacing )SetBeforeAuto (b bool ){if b {_gdac ._cdced .BeforeAutospacingAttr =&_bac .ST_OnOff {};_gdac ._cdced .BeforeAutospacingAttr .Bool =_c .Bool (true );}else {_gdac ._cdced .BeforeAutospacingAttr =nil ;};};

// SetDiagonalLayout enables or disables diagonal layout.
// By default, diagonal layout is disabled and we have horizontal layout.
func (_cacbg *WatermarkText )EnableDiagonalLayout (value bool ){if _cacbg ._eafacd !=nil &&_cacbg ._eafacd .StyleAttr !=nil {_geee :=*_cacbg ._eafacd .StyleAttr ;if value {_geee +="\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u003a\u0033\u0031\u0035\u003b";
}else {_geee =_ag .ReplaceAll (_geee ,"\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u003a\u0033\u0031\u0035\u003b","");};_cacbg ._eafacd .StyleAttr =&_geee ;};};

// Borders allows controlling individual cell borders.
func (_fgg CellProperties )Borders ()CellBorders {if _fgg ._cfb .TcBorders ==nil {_fgg ._cfb .TcBorders =_aag .NewCT_TcBorders ();};return CellBorders {_fgg ._cfb .TcBorders };};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_dfgec RunProperties )RStyle ()string {if _dfgec ._gbeff .RStyle !=nil {return _dfgec ._gbeff .RStyle .ValAttr ;};return "";};func _baba ()*_ccc .Textpath {_acag :=_ccc .NewTextpath ();_acag .OnAttr =_bac .ST_TrueFalseTrue ;_acag .FitshapeAttr =_bac .ST_TrueFalseTrue ;
return _acag ;};

// SetLinkedStyle sets the style that this style is linked to.
func (_dagbg Style )SetLinkedStyle (name string ){if name ==""{_dagbg ._bcedg .Link =nil ;}else {_dagbg ._bcedg .Link =_aag .NewCT_String ();_dagbg ._bcedg .Link .ValAttr =name ;};};

// InsertRunBefore inserts a run in the paragraph before the relative run.
func (_bdefef Paragraph )InsertRunBefore (relativeTo Run )Run {return _bdefef .insertRun (relativeTo ,true );};

// AddWatermarkPicture adds new watermark picture to document.
func (_ebaf *Document )AddWatermarkPicture (imageRef _cd .ImageRef )WatermarkPicture {var _eaf []Header ;if _ebbe ,_dafg :=_ebaf .BodySection ().GetHeader (_aag .ST_HdrFtrDefault );_dafg {_eaf =append (_eaf ,_ebbe );};if _gccd ,_bbfg :=_ebaf .BodySection ().GetHeader (_aag .ST_HdrFtrEven );
_bbfg {_eaf =append (_eaf ,_gccd );};if _bagg ,_gabe :=_ebaf .BodySection ().GetHeader (_aag .ST_HdrFtrFirst );_gabe {_eaf =append (_eaf ,_bagg );};if len (_eaf )< 1{_fbcf :=_ebaf .AddHeader ();_ebaf .BodySection ().SetHeader (_fbcf ,_aag .ST_HdrFtrDefault );
_eaf =append (_eaf ,_fbcf );};var _aebe error ;_aebfd :=NewWatermarkPicture ();for _ ,_bcegf :=range _eaf {imageRef ,_aebe =_bcegf .AddImageRef (imageRef );if _aebe !=nil {return WatermarkPicture {};};_bccg :=_bcegf .Paragraphs ();if len (_bccg )< 1{_fefg :=_bcegf .AddParagraph ();
_fefg .AddRun ().AddText ("");};for _ ,_faab :=range _bcegf .X ().EG_BlockLevelElts {for _ ,_bad :=range _faab .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_ffbb :=range _bad .ContentBlockContentChoice .P {for _ ,_cbcb :=range _ffbb .EG_PContent {for _ ,_cac :=range _cbcb .PContentChoice .EG_ContentRunContent {if _cac .ContentRunContentChoice .R ==nil {continue ;
};_cac .ContentRunContentChoice .R .EG_RunInnerContent =append (_cac .ContentRunContentChoice .R .EG_RunInnerContent ,&_aag .EG_RunInnerContent {RunInnerContentChoice :&_aag .EG_RunInnerContentChoice {Pict :_aebfd ._cgfedg }});};};};};};};_aebfd .SetPicture (imageRef );
return _aebfd ;};

// AddWatermarkText adds new watermark text to the document.
func (_fbgb *Document )AddWatermarkText (text string )WatermarkText {var _fgb []Header ;if _aabe ,_bbaeb :=_fbgb .BodySection ().GetHeader (_aag .ST_HdrFtrDefault );_bbaeb {_fgb =append (_fgb ,_aabe );};if _gdeg ,_eegb :=_fbgb .BodySection ().GetHeader (_aag .ST_HdrFtrEven );
_eegb {_fgb =append (_fgb ,_gdeg );};if _dcab ,_ffba :=_fbgb .BodySection ().GetHeader (_aag .ST_HdrFtrFirst );_ffba {_fgb =append (_fgb ,_dcab );};if len (_fgb )< 1{_baadc :=_fbgb .AddHeader ();_fbgb .BodySection ().SetHeader (_baadc ,_aag .ST_HdrFtrDefault );
_fgb =append (_fgb ,_baadc );};_ddga :=NewWatermarkText ();for _ ,_bfbf :=range _fgb {_efgf :=_bfbf .Paragraphs ();if len (_efgf )< 1{_gbaa :=_bfbf .AddParagraph ();_gbaa .AddRun ().AddText ("");};for _ ,_gcaef :=range _bfbf .X ().EG_BlockLevelElts {for _ ,_fdd :=range _gcaef .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_cfbc :=range _fdd .ContentBlockContentChoice .P {for _ ,_aafa :=range _cfbc .EG_PContent {for _ ,_cgab :=range _aafa .PContentChoice .EG_ContentRunContent {if _cgab .ContentRunContentChoice .R ==nil {continue ;
};_cgab .ContentRunContentChoice .R .EG_RunInnerContent =append (_cgab .ContentRunContentChoice .R .EG_RunInnerContent ,&_aag .EG_RunInnerContent {RunInnerContentChoice :&_aag .EG_RunInnerContentChoice {Pict :_ddga ._babcb }});};};};};};};_ddga .SetText (text );
return _ddga ;};

// Control returns an *axcontrol.Control object contained in the run or the nil value in case of no controls.
func (_adbfd Run )Control ()*_ac .Control {if _bfgfc :=_adbfd ._dcgfd .EG_RunInnerContent ;_bfgfc !=nil {if _cegca :=_bfgfc [0].RunInnerContentChoice .Object ;_cegca !=nil {if _fccef :=_cegca .ObjectChoice ;_fccef !=nil {if _dfbe :=_fccef .Control ;_dfbe !=nil {if _dfbe .IdAttr !=nil {_baedb :=_adbfd ._edce .GetDocRelTargetByID (*_dfbe .IdAttr );
for _ ,_agbga :=range _adbfd ._edce ._dcf {if _baedb ==_agbga .TargetAttr {return _agbga ;};};};};};};};return nil ;};

// SetNumberingLevel sets the numbering level of a paragraph.  If used, then the
// NumberingDefinition must also be set via SetNumberingDefinition or
// SetNumberingDefinitionByID.
func (_gaeefe Paragraph )SetNumberingLevel (listLevel int ){_gaeefe .ensurePPr ();if _gaeefe ._dbgba .PPr .NumPr ==nil {_gaeefe ._dbgba .PPr .NumPr =_aag .NewCT_NumPr ();};_ccdg :=_aag .NewCT_DecimalNumber ();_ccdg .ValAttr =int64 (listLevel );_gaeefe ._dbgba .PPr .NumPr .Ilvl =_ccdg ;
};

// SetSize sets the size of the displayed image on the page.
func (_ddbaa InlineDrawing )SetSize (w ,h _bf .Distance ){_ddbaa ._eeaa .Extent .CxAttr =int64 (float64 (w *_bf .Pixel72 )/_bf .EMU );_ddbaa ._eeaa .Extent .CyAttr =int64 (float64 (h *_bf .Pixel72 )/_bf .EMU );};

// Strike returns true if run is striked.
func (_cgee RunProperties )Strike ()bool {return _faabg (_cgee ._gbeff .Strike )};func (_cddf Paragraph )addStartBookmark (_eeda int64 ,_aafed string )*_aag .CT_Bookmark {_fedbe :=_aag .NewEG_PContent ();_cddf ._dbgba .EG_PContent =append (_cddf ._dbgba .EG_PContent ,_fedbe );
_ebegcb :=_aag .NewEG_ContentRunContent ();_bgefa :=_aag .NewEG_RunLevelElts ();_efaf :=_aag .NewEG_RangeMarkupElements ();_faba :=_aag .NewCT_Bookmark ();_faba .NameAttr =_aafed ;_faba .IdAttr =_eeda ;_efaf .RangeMarkupElementsChoice .BookmarkStart =_faba ;
_fedbe .PContentChoice .EG_ContentRunContent =append (_fedbe .PContentChoice .EG_ContentRunContent ,_ebegcb );_ebegcb .ContentRunContentChoice .EG_RunLevelElts =append (_ebegcb .ContentRunContentChoice .EG_RunLevelElts ,_bgefa );_bgefa .RunLevelEltsChoice .EG_RangeMarkupElements =append (_bgefa .RunLevelEltsChoice .EG_RangeMarkupElements ,_efaf );
return _faba ;};

// SetShadow sets the run to shadowed text.
func (_eeaac RunProperties )SetShadow (b bool ){if !b {_eeaac ._gbeff .Shadow =nil ;}else {_eeaac ._gbeff .Shadow =_aag .NewCT_OnOff ();};};func _fag (_aeb *_aag .CT_TblWidth ,_bafd _bf .Distance ){_aeb .TypeAttr =_aag .ST_TblWidthDxa ;_aeb .WAttr =&_aag .ST_MeasurementOrPercent {};
_aeb .WAttr .ST_DecimalNumberOrPercent =&_aag .ST_DecimalNumberOrPercent {};_aeb .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (_bafd /_bf .Dxa ));};

// SetFontFamily sets the Ascii & HAnsi fonly family for a run.
func (_gadc RunProperties )SetFontFamily (family string ){if _gadc ._gbeff .RFonts ==nil {_gadc ._gbeff .RFonts =_aag .NewCT_Fonts ();};_gadc ._gbeff .RFonts .AsciiAttr =_c .String (family );_gadc ._gbeff .RFonts .HAnsiAttr =_c .String (family );_gadc ._gbeff .RFonts .EastAsiaAttr =_c .String (family );
};func (_gfdc *Document )insertStyleFromNode (_fedd Node ){if _fedd .Style .X ()!=nil {if _ ,_cbfge :=_gfdc .Styles .SearchStyleById (_fedd .Style .StyleID ());!_cbfge {_gfdc .Styles .InsertStyle (_fedd .Style );_eedgb :=_fedd .Style .ParagraphProperties ();
_gfdc .insertNumberingFromStyleProperties (_fedd ._fgge .Numbering ,_eedgb );};};};

// X returns the inner wrapped XML type.
func (_bggg Styles )X ()*_aag .Styles {return _bggg ._gcdgc };

// Nodes contains slice of Node element.
type Nodes struct{_aeecg []Node };

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_geae TableProperties )SetCellSpacingPercent (pct float64 ){_geae ._abgbf .TblCellSpacing =_aag .NewCT_TblWidth ();_geae ._abgbf .TblCellSpacing .TypeAttr =_aag .ST_TblWidthPct ;_geae ._abgbf .TblCellSpacing .WAttr =&_aag .ST_MeasurementOrPercent {};
_geae ._abgbf .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_aag .ST_DecimalNumberOrPercent {};_geae ._abgbf .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (pct *50));};func _ebda ()*_ccc .OfcLock {_cabd :=_ccc .NewOfcLock ();
_cabd .ExtAttr =_ccc .ST_ExtEdit ;_cabd .AspectratioAttr =_bac .ST_TrueFalseTrue ;return _cabd ;};

// Name returns the name of the bookmark whcih is the document unique ID that
// identifies the bookmark.
func (_fbf Bookmark )Name ()string {return _fbf ._ccg .NameAttr };

// AddHeader creates a header associated with the document, but doesn't add it
// to the document for display.
func (_ddb *Document )AddHeader ()Header {_edae :=_aag .NewHdr ();_ddb ._acbb =append (_ddb ._acbb ,_edae );_dde :=_db .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_ddb ._acbb ));_ddb ._eeb .AddRelationship (_dde ,_c .HeaderType );
_ddb .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_dde ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");
_ddb ._eea =append (_ddb ._eea ,_cd .NewRelationships ());return Header {_ddb ,_edae };};

// SetStyle sets the style of a paragraph.
func (_cfebf ParagraphProperties )SetStyle (s string ){if s ==""{_cfebf ._ggac .PStyle =nil ;}else {_cfebf ._ggac .PStyle =_aag .NewCT_String ();_cfebf ._ggac .PStyle .ValAttr =s ;};};func (_agcb Paragraph )removeCommentRef (_gbeb int64 )bool {for _ ,_gdbc :=range _agcb .X ().EG_PContent {for _ ,_egca :=range _gdbc .PContentChoice .EG_ContentRunContent {if _egca .ContentRunContentChoice .R !=nil {for _ ,_dafaa :=range _egca .ContentRunContentChoice .R .EG_RunInnerContent {if _dafaa .RunInnerContentChoice .CommentReference !=nil &&_dafaa .RunInnerContentChoice .CommentReference .IdAttr ==_gbeb {_egca .ContentRunContentChoice .R =nil ;
return true ;};};};};};return false ;};

// FindNodeByText return node based on matched text and return a slice of node.
func (_bgdf *Nodes )FindNodeByText (text string )[]Node {_accd :=[]Node {};for _ ,_fffga :=range _bgdf ._aeecg {if _ag .TrimSpace (_fffga .Text ())==text {_accd =append (_accd ,_fffga );};_dabgg :=Nodes {_aeecg :_fffga .Children };_accd =append (_accd ,_dabgg .FindNodeByText (text )...);
};return _accd ;};

// SetOutlineLevel sets the outline level of this style.
func (_cgcf ParagraphStyleProperties )SetOutlineLevel (lvl int ){_cgcf ._aefec .OutlineLvl =_aag .NewCT_DecimalNumber ();_cgcf ._aefec .OutlineLvl .ValAttr =int64 (lvl );};

// AddHTML adds a text that contains HTML tags to a paragraph.
//
// The following tags are supported:
//   - <b> or <strong> for bold text
//   - <i> or <em> for italic text
//   - <u> for underlined text
//   - <strike> for strikethrough text
//   - <mark> for highlighted text
//   - <sub> for subscript text
//   - <sup> for superscript text
func (_aabf Paragraph )AddHTML (s string ){var (_cfcbd *htmlNode ;_bggcbd *Run ;);_fdee :=_f .NewDecoder (_ec .NewReader ([]byte (s )));for {_adddd ,_fcfg :=_fdee .Token ();if _fcfg !=nil {break ;};switch _fdgg :=_adddd .(type ){case _f .StartElement :if _bggcbd !=nil &&_bggcbd .Text ()!=""{if _cfcbd !=nil {_bgbaf :=_cfcbd ;
for {if _bgbaf ==nil {break ;};_cfcff (_bggcbd ,_bgbaf ._fgfc .Name .Local ,_bgbaf );_bgbaf =_bgbaf ._cebca ;};_dggge :=_bggcbd .Copy ();_bggcbd =&_dggge ;}else {_bggcbd =nil ;};};_cfcbd =&htmlNode {_fgfc :_fdgg ,_cebca :_cfcbd };case _f .EndElement :if _cfcbd !=nil {_cfcff (_bggcbd ,_fdgg .Name .Local ,_cfcbd );
_cfcbd =_cfcbd ._cebca ;if _cfcbd ==nil {_bggcbd =nil ;};};case _f .CharData :if _bggcbd ==nil {_efecb :=_aabf .AddRun ();_bggcbd =&_efecb ;}else if _cfcbd !=nil {_bfbdf :=_cfcbd ;for {if _bfbdf ==nil {break ;};_cfcff (_bggcbd ,_bfbdf ._fgfc .Name .Local ,_bfbdf );
_bfbdf =_bfbdf ._cebca ;};_begce :=_aabf .AddRun ();_bggcbd =&_begce ;};_bggcbd .AddText (string (_fdgg ));};};};

// SetColor sets a specific color or auto.
func (_fae Color )SetColor (v _ff .Color ){if v .IsAuto (){_fae ._gec .ValAttr .ST_HexColorAuto =_aag .ST_HexColorAutoAuto ;_fae ._gec .ValAttr .ST_HexColorRGB =nil ;}else {_fae ._gec .ValAttr .ST_HexColorAuto =_aag .ST_HexColorAutoUnset ;_fae ._gec .ValAttr .ST_HexColorRGB =v .AsRGBString ();
};};

// Outline returns true if run outline is on.
func (_befgf RunProperties )Outline ()bool {return _faabg (_befgf ._gbeff .Outline )};func _faa (_cgd *_aag .CT_TblWidth ,_bbb float64 ){_cgd .TypeAttr =_aag .ST_TblWidthPct ;_cgd .WAttr =&_aag .ST_MeasurementOrPercent {};_cgd .WAttr .ST_DecimalNumberOrPercent =&_aag .ST_DecimalNumberOrPercent {};
_cgd .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (_bbb *50));};

// TableBorders allows manipulation of borders on a table.
type TableBorders struct{_eacfd *_aag .CT_TblBorders };func _efbc (_abgg *_aag .CT_Tbl ,_dbfc map[string ]string ){for _ ,_degb :=range _abgg .EG_ContentRowContent {for _ ,_dbef :=range _degb .ContentRowContentChoice .Tr {for _ ,_cbgg :=range _dbef .EG_ContentCellContent {for _ ,_cdge :=range _cbgg .ContentCellContentChoice .Tc {for _ ,_adeb :=range _cdge .EG_BlockLevelElts {for _ ,_adfe :=range _adeb .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_gebc :=range _adfe .ContentBlockContentChoice .P {_eacad (_gebc ,_dbfc );
};for _ ,_afed :=range _adfe .ContentBlockContentChoice .Tbl {_efbc (_afed ,_dbfc );};};};};};};};};

// InsertRowBefore inserts a row before another row
func (_caggc Table )InsertRowBefore (r Row )Row {for _bfacd ,_dfdaa :=range _caggc ._bgcdd .EG_ContentRowContent {if len (_dfdaa .ContentRowContentChoice .Tr )> 0&&r .X ()==_dfdaa .ContentRowContentChoice .Tr [0]{_edec :=_aag .NewEG_ContentRowContent ();
_caggc ._bgcdd .EG_ContentRowContent =append (_caggc ._bgcdd .EG_ContentRowContent ,nil );copy (_caggc ._bgcdd .EG_ContentRowContent [_bfacd +1:],_caggc ._bgcdd .EG_ContentRowContent [_bfacd :]);_caggc ._bgcdd .EG_ContentRowContent [_bfacd ]=_edec ;_bgac :=_aag .NewCT_Row ();
_edec .ContentRowContentChoice .Tr =append (_edec .ContentRowContentChoice .Tr ,_bgac );return Row {_caggc ._efgdcg ,_bgac };};};return _caggc .AddRow ();};

// Strike returns true if paragraph is striked.
func (_cgfed ParagraphProperties )Strike ()bool {return _faabg (_cgfed ._ggac .RPr .Strike )};

// AddParagraph adds a new paragraph to the document body.
func (_dcfb *Document )AddParagraph ()Paragraph {_ddbfd :=_aag .NewEG_BlockLevelElts ();_dcfb ._ffb .Body .EG_BlockLevelElts =append (_dcfb ._ffb .Body .EG_BlockLevelElts ,_ddbfd );_ffaf :=_aag .NewEG_ContentBlockContent ();_ddbfd .BlockLevelEltsChoice .EG_ContentBlockContent =append (_ddbfd .BlockLevelEltsChoice .EG_ContentBlockContent ,_ffaf );
_gbbe :=_aag .NewCT_P ();_ffaf .ContentBlockContentChoice .P =append (_ffaf .ContentBlockContentChoice .P ,_gbbe );return Paragraph {_dcfb ,_gbbe };};

// X returns the inner wml.CT_PBdr
func (_fefa ParagraphBorders )X ()*_aag .CT_PBdr {return _fefa ._gabef };

// Clear clears all content within a header
func (_fgccg Header )Clear (){_fgccg ._dcaf .EG_BlockLevelElts =[]*_aag .EG_BlockLevelElts {}};

// RunProperties controls run styling properties.
type RunProperties struct{_gbeff *_aag .CT_RPr };

// EastAsiaFont returns the name of paragraph font family for East Asia.
func (_degfa ParagraphProperties )EastAsiaFont ()string {if _fbegd :=_degfa ._ggac .RPr .RFonts ;_fbegd !=nil {if _fbegd .EastAsiaAttr !=nil {return *_fbegd .EastAsiaAttr ;};};return "";};

// Properties returns the table properties.
func (_bbaebe Table )Properties ()TableProperties {if _bbaebe ._bgcdd .TblPr ==nil {_bbaebe ._bgcdd .TblPr =_aag .NewCT_TblPr ();};return TableProperties {_bbaebe ._bgcdd .TblPr };};func (_bbcc Run )newIC ()*_aag .EG_RunInnerContent {_deedg :=_aag .NewEG_RunInnerContent ();
_bbcc ._dcgfd .EG_RunInnerContent =append (_bbcc ._dcgfd .EG_RunInnerContent ,_deedg );return _deedg ;};

// SetText sets the text to be used in bullet mode.
func (_cgcd NumberingLevel )SetText (t string ){if t ==""{_cgcd ._ebdf .LvlText =nil ;}else {_cgcd ._ebdf .LvlText =_aag .NewCT_LevelText ();_cgcd ._ebdf .LvlText .ValAttr =_c .String (t );};};func _cbfd ()*_ccc .Fill {_aecc :=_ccc .NewFill ();_aecc .AngleAttr =_c .Float64 (0);
return _aecc };func (_abfec *WatermarkText )findNode (_efad *_c .XSDAny ,_gfffb string )*_c .XSDAny {for _ ,_bcae :=range _efad .Nodes {if _bcae .XMLName .Local ==_gfffb {return _bcae ;};};return nil ;};

// Color returns the style's Color.
func (_facg RunProperties )Color ()Color {if _facg ._gbeff .Color ==nil {_facg ._gbeff .Color =_aag .NewCT_Color ();};return Color {_facg ._gbeff .Color };};

// SetYOffset sets the Y offset for an image relative to the origin.
func (_edg AnchoredDrawing )SetYOffset (y _bf .Distance ){_edg ._ae .PositionV .PosVChoice =&_aag .WdCT_PosVChoice {};_edg ._ae .PositionV .PosVChoice .PosOffset =_c .Int32 (int32 (y /_bf .EMU ));};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_dcaed TableBorders )SetBottom (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_dcaed ._eacfd .Bottom =_aag .NewCT_Border ();_ebdgf (_dcaed ._eacfd .Bottom ,t ,c ,thickness );};

// SetBevelImageEffect sets the glow image effect.
func (_cadg AnchoredDrawing )SetBevelImageEffect (){for _ ,_ef :=range _cadg ._ae .Graphic .GraphicData .Any {if _add ,_bde :=_ef .(*_ggg .Pic );_bde {_add .SpPr .Sp3d =_da .NewCT_Shape3D ();_add .SpPr .Sp3d .BevelT =_da .NewCT_Bevel ();_add .SpPr .Sp3d .BevelT .PrstAttr =_da .ST_BevelPresetTypeConvex ;
_add .SpPr .Scene3d =_da .NewCT_Scene3D ();_add .SpPr .Scene3d .Camera =_da .NewCT_Camera ();_add .SpPr .Scene3d .Camera .PrstAttr =_da .ST_PresetCameraTypeOrthographicFront ;_add .SpPr .Scene3d .LightRig =_da .NewCT_LightRig ();_add .SpPr .Scene3d .LightRig .RigAttr =_da .ST_LightRigTypeThreePt ;
_add .SpPr .Scene3d .LightRig .DirAttr =_da .ST_LightRigDirectionT ;};};};

// SetFirstLineIndent controls the first line indent of the paragraph.
func (_acbgec ParagraphStyleProperties )SetFirstLineIndent (m _bf .Distance ){if _acbgec ._aefec .Ind ==nil {_acbgec ._aefec .Ind =_aag .NewCT_Ind ();};if m ==_bf .Zero {_acbgec ._aefec .Ind .FirstLineAttr =nil ;}else {_acbgec ._aefec .Ind .FirstLineAttr =&_bac .ST_TwipsMeasure {};
_acbgec ._aefec .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_bf .Twips ));};};

// RemoveParagraph removes a paragraph from a document.
func (_efb *Document )RemoveParagraph (p Paragraph ){if _efb ._ffb .Body ==nil {return ;};for _ ,_cbc :=range _efb ._ffb .Body .EG_BlockLevelElts {for _ ,_fcag :=range _cbc .BlockLevelEltsChoice .EG_ContentBlockContent {for _cfdf ,_dgc :=range _fcag .ContentBlockContentChoice .P {if _dgc ==p ._dbgba {copy (_fcag .ContentBlockContentChoice .P [_cfdf :],_fcag .ContentBlockContentChoice .P [_cfdf +1:]);
_fcag .ContentBlockContentChoice .P =_fcag .ContentBlockContentChoice .P [0:len (_fcag .ContentBlockContentChoice .P )-1];return ;};};if _fcag .ContentBlockContentChoice .Sdt !=nil &&_fcag .ContentBlockContentChoice .Sdt .SdtContent !=nil {for _ ,_cafb :=range _fcag .ContentBlockContentChoice .Sdt .SdtContent .EG_ContentBlockContent {for _cdf ,_ebdeg :=range _cafb .ContentBlockContentChoice .P {if _ebdeg ==p ._dbgba {copy (_fcag .ContentBlockContentChoice .P [_cdf :],_fcag .ContentBlockContentChoice .P [_cdf +1:]);
_fcag .ContentBlockContentChoice .P =_fcag .ContentBlockContentChoice .P [0:len (_fcag .ContentBlockContentChoice .P )-1];return ;};};};};};};for _ ,_ggbc :=range _efb .Tables (){for _ ,_bec :=range _ggbc .Rows (){for _ ,_agfb :=range _bec .Cells (){for _ ,_ggd :=range _agfb ._cbd .EG_BlockLevelElts {for _ ,_ebbf :=range _ggd .BlockLevelEltsChoice .EG_ContentBlockContent {for _ebdg ,_fdc :=range _ebbf .ContentBlockContentChoice .P {if _fdc ==p ._dbgba {copy (_ebbf .ContentBlockContentChoice .P [_ebdg :],_ebbf .ContentBlockContentChoice .P [_ebdg +1:]);
_ebbf .ContentBlockContentChoice .P =_ebbf .ContentBlockContentChoice .P [0:len (_ebbf .ContentBlockContentChoice .P )-1];return ;};};};};};};};for _ ,_ffc :=range _efb .Headers (){_ffc .RemoveParagraph (p );};for _ ,_baff :=range _efb .Footers (){_baff .RemoveParagraph (p );
};};

// AddHTML adds HTML text to a run.
func (_fbbdg Run )AddHTML (s string ){_bggde :=_aag .NewEG_RunInnerContent ();_fbbdg ._dcgfd .EG_RunInnerContent =append (_fbbdg ._dcgfd .EG_RunInnerContent ,_bggde );_bggde .RunInnerContentChoice .T =_aag .NewCT_Text ();if _c .NeedsSpacePreserve (s ){_bafcd :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";
_bggde .RunInnerContentChoice .T .SpaceAttr =&_bafcd ;};_cacb :=_fbbdg .parseHTMLTag (s );_bggde .RunInnerContentChoice .T .Content =_cacb ;};

// SetTextWrapSquare sets the text wrap to square with a given wrap type.
func (_aed AnchoredDrawing )SetTextWrapSquare (t _aag .WdST_WrapText ){_aed ._ae .WrapTypeChoice =&_aag .WdEG_WrapTypeChoice {};_aed ._ae .WrapTypeChoice .WrapSquare =_aag .NewWdCT_WrapSquare ();_aed ._ae .WrapTypeChoice .WrapSquare .WrapTextAttr =t ;};


// SetFormat sets the numbering format.
func (_ceddg NumberingLevel )SetFormat (f _aag .ST_NumberFormat ){if _ceddg ._ebdf .NumFmt ==nil {_ceddg ._ebdf .NumFmt =_aag .NewCT_NumFmt ();};_ceddg ._ebdf .NumFmt .ValAttr =f ;};

// Emboss returns true if run emboss is on.
func (_egbcf RunProperties )Emboss ()bool {return _faabg (_egbcf ._gbeff .Emboss )};

// Themes returns document's themes.
func (_dfcb *Document )Themes ()[]*_da .Theme {return _dfcb ._faff };

// SetLayoutInCell sets the layoutInCell attribute of anchor.
func (_geag AnchoredDrawing )SetLayoutInCell (val bool ){_geag ._ae .LayoutInCellAttr =val };

// TableWidth controls width values in table settings.
type TableWidth struct{_dbbf *_aag .CT_TblWidth };

// SetLeft sets the left border to a specified type, color and thickness.
func (_geac TableBorders )SetLeft (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_geac ._eacfd .Left =_aag .NewCT_Border ();_ebdgf (_geac ._eacfd .Left ,t ,c ,thickness );};

// Fonts returns the style's Fonts.
func (_cefff RunProperties )Fonts ()Fonts {if _cefff ._gbeff .RFonts ==nil {_cefff ._gbeff .RFonts =_aag .NewCT_Fonts ();};return Fonts {_cefff ._gbeff .RFonts };};func (_afa *Document )insertNumberingFromStyleProperties (_dcbgc Numbering ,_bbee ParagraphStyleProperties ){_dadb :=_bbee .NumId ();
_gage :=int64 (-1);if _dadb > -1{for _ ,_eadc :=range _dcbgc ._gbda .Num {if _eadc .NumIdAttr ==_dadb {if _eadc .AbstractNumId !=nil {_gage =_eadc .AbstractNumId .ValAttr ;_fcf :=false ;for _ ,_bafda :=range _afa .Numbering ._gbda .Num {if _bafda .NumIdAttr ==_dadb {_fcf =true ;
break ;};};if !_fcf {_afa .Numbering ._gbda .Num =append (_afa .Numbering ._gbda .Num ,_eadc );};break ;};};};for _ ,_cfdde :=range _dcbgc ._gbda .AbstractNum {if _cfdde .AbstractNumIdAttr ==_gage {_gfdcf :=false ;for _ ,_dedf :=range _afa .Numbering ._gbda .AbstractNum {if _dedf .AbstractNumIdAttr ==_gage {_gfdcf =true ;
break ;};};if !_gfdcf {_afa .Numbering ._gbda .AbstractNum =append (_afa .Numbering ._gbda .AbstractNum ,_cfdde );};break ;};};};};func (_fbffc Paragraph )removeCommentRange (_debb int64 )bool {_fdeee :=false ;for _ ,_adbg :=range _fbffc .X ().EG_PContent {for _ ,_febd :=range _adbg .PContentChoice .EG_ContentRunContent {for _ ,_bbbed :=range _febd .ContentRunContentChoice .EG_RunLevelElts {for _acbd ,_eaaed :=range _bbbed .RunLevelEltsChoice .EG_RangeMarkupElements {if !_fdeee &&_eaaed .RangeMarkupElementsChoice .CommentRangeStart !=nil &&_eaaed .RangeMarkupElementsChoice .CommentRangeStart .IdAttr ==_debb {_bcfe :=_bbbed .RunLevelEltsChoice .EG_RangeMarkupElements [:_acbd ];
_bcfe =append (_bcfe ,_bbbed .RunLevelEltsChoice .EG_RangeMarkupElements [_acbd +1:len (_bbbed .RunLevelEltsChoice .EG_RangeMarkupElements )]...);_bbbed .RunLevelEltsChoice .EG_RangeMarkupElements =_bcfe ;_fdeee =true ;};if _fdeee &&_eaaed .RangeMarkupElementsChoice .CommentRangeEnd !=nil &&_eaaed .RangeMarkupElementsChoice .CommentRangeEnd .IdAttr ==_debb {_cace :=_bbbed .RunLevelEltsChoice .EG_RangeMarkupElements [:_acbd ];
_cace =append (_cace ,_bbbed .RunLevelEltsChoice .EG_RangeMarkupElements [_acbd +1:len (_bbbed .RunLevelEltsChoice .EG_RangeMarkupElements )]...);_bbbed .RunLevelEltsChoice .EG_RangeMarkupElements =_cace ;return true ;};};};};};return false ;};

// X returns the inner wrapped XML type.
func (_fdgdf Row )X ()*_aag .CT_Row {return _fdgdf ._dbebf };

// X returns the inner wrapped XML type.
func (_cce Color )X ()*_aag .CT_Color {return _cce ._gec };func _eag ()(*_da .CT_Point2D ,[]*_da .CT_Point2D ){var (_bdca int64 =0;_fbb int64 =21600;);_gff :=_da .ST_Coordinate {ST_CoordinateUnqualified :&_bdca ,ST_UniversalMeasure :nil };_efc :=_da .ST_Coordinate {ST_CoordinateUnqualified :&_fbb ,ST_UniversalMeasure :nil };
_dgfc :=_da .NewCT_Point2D ();_dgfc .XAttr =_gff ;_dgfc .YAttr =_gff ;_bbc :=[]*_da .CT_Point2D {&_da .CT_Point2D {XAttr :_gff ,YAttr :_efc },&_da .CT_Point2D {XAttr :_efc ,YAttr :_efc },&_da .CT_Point2D {XAttr :_efc ,YAttr :_gff },_dgfc };return _dgfc ,_bbc ;
};

// SetRight sets the right border to a specified type, color and thickness.
func (_fcded ParagraphBorders )SetRight (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_fcded ._gabef .Right =_aag .NewCT_Border ();_afbdc (_fcded ._gabef .Right ,t ,c ,thickness );};

// IsFootnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_bbeb Run )IsFootnote ()(bool ,int64 ){if _bbeb ._dcgfd .EG_RunInnerContent !=nil {if _bbeb ._dcgfd .EG_RunInnerContent [0].RunInnerContentChoice .FootnoteReference !=nil {return true ,_bbeb ._dcgfd .EG_RunInnerContent [0].RunInnerContentChoice .FootnoteReference .IdAttr ;
};};return false ,0;};

// FindNodeByRegexp return node based on matched text and return a slice of node.
func (_ddff *Nodes )FindNodeByRegexp (r *_cc .Regexp )[]Node {_dbbeg :=[]Node {};for _ ,_becf :=range _ddff ._aeecg {if r .MatchString (_becf .Text ()){_dbbeg =append (_dbbeg ,_becf );};_bfbcd :=Nodes {_aeecg :_becf .Children };_dbbeg =append (_dbbeg ,_bfbcd .FindNodeByRegexp (r )...);
};return _dbbeg ;};

// AddTOC adds a table of contents to the document and customize it according to TOCOptions if necessary.
func (_bcedd Run )AddTOC (options *TOCOptions ){_abbda :="";if options !=nil {if options .UseHyperlinks {_abbda +="\u0020\u005c\u0068\u0020";};if options .OmitPageNumbers {_abbda +="\u0020\u005c\u006e\u0020";};if options .HeadingLevel !=""{_abbda +="\u0020\u005c\u006f \u0027"+options .HeadingLevel +"\u0027";
};};_bcedd .AddFieldWithFormatting (FieldTOC ,_abbda ,true );};

// Comment is run's comment component.
type Comment struct{_gbbg *Document ;_edac *_aag .CT_Comment ;};

// AppendNode append node to document element.
func (_bdga *Document )AppendNode (node Node ){_bdga .insertImageFromNode (node );_bdga .insertStyleFromNode (node );for _ ,_eefc :=range node .Children {_bdga .insertImageFromNode (_eefc );_bdga .insertStyleFromNode (_eefc );};switch _aaccb :=node .X ().(type ){case *Paragraph :_bdga .appendParagraph (nil ,*_aaccb ,false );
case *Table :_bdga .appendTable (nil ,*_aaccb ,false );};if node ._fgge !=nil {if node ._fgge ._faff !=nil {if _eafb :=_bdga ._eeb .FindRIDForN (0,_c .ThemeType );_eafb ==""{if _gacdf :=node ._fgge ._eeb .FindRIDForN (0,_c .ThemeType );_gacdf !=""{_bdga ._faff =append (_bdga ._faff ,node ._fgge ._faff ...);
_bedeg :=node ._fgge ._eeb .GetTargetByRelId (_gacdf );_bdga .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_bedeg ,"\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e/\u0076\u006e\u0064.\u006f\u0070e\u006e\u0078\u006d\u006c\u0066\u006fr\u006dat\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0074\u0068\u0065\u006d\u0065\u002b\u0078\u006d\u006c");
_bdga ._eeb .AddRelationship (_bedeg ,_c .ThemeType );};};};_cdcb :=_bdga ._caf ;_cgbb :=node ._fgge ._caf ;if _cdcb !=nil {if _cgbb !=nil {if _cdcb .Font !=nil {if _cgbb .Font !=nil {for _ ,_ffeb :=range _cgbb .Font {_bedbb :=true ;for _ ,_acad :=range _cdcb .Font {if _acad .NameAttr ==_ffeb .NameAttr {_bedbb =false ;
break ;};};if _bedbb {_cdcb .Font =append (_cdcb .Font ,_ffeb );};};};}else {_cdcb .Font =_cgbb .Font ;};};}else if _cgbb !=nil {_cdcb =_cgbb ;};_bdga ._caf =_cdcb ;if _abgdf :=_bdga ._eeb .FindRIDForN (0,_c .FontTableType );_abgdf ==""{_bdga .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006e\u0074\u0054\u0061\u0062\u006c\u0065\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u0066\u006f\u006e\u0074T\u0061\u0062\u006c\u0065\u002b\u0078m\u006c");
_bdga ._eeb .AddRelationship ("\u0066\u006f\u006e\u0074\u0054\u0061\u0062\u006c\u0065\u002e\u0078\u006d\u006c",_c .FontTableType );};};};

// SetWidthPercent sets the cell to a width percentage.
func (_gae CellProperties )SetWidthPercent (pct float64 ){_gae ._cfb .TcW =_aag .NewCT_TblWidth ();_gae ._cfb .TcW .TypeAttr =_aag .ST_TblWidthPct ;_gae ._cfb .TcW .WAttr =&_aag .ST_MeasurementOrPercent {};_gae ._cfb .TcW .WAttr .ST_DecimalNumberOrPercent =&_aag .ST_DecimalNumberOrPercent {};
_gae ._cfb .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (pct *50));};

// Italic returns true if paragraph font is italic.
func (_gedgb ParagraphProperties )Italic ()bool {_fgcbe :=_gedgb ._ggac .RPr ;return _faabg (_fgcbe .I )||_faabg (_fgcbe .ICs );};

// X returns the inner wrapped XML type.
func (_debac ParagraphProperties )X ()*_aag .CT_PPr {return _debac ._ggac };

// NumberingLevel is the definition for numbering for a particular level within
// a NumberingDefinition.
type NumberingLevel struct{_ebdf *_aag .CT_Lvl };func _afbdc (_gcag *_aag .CT_Border ,_befc _aag .ST_Border ,_cbcdb _ff .Color ,_aafga _bf .Distance ){_gcag .ValAttr =_befc ;_gcag .ColorAttr =&_aag .ST_HexColor {};if _cbcdb .IsAuto (){_gcag .ColorAttr .ST_HexColorAuto =_aag .ST_HexColorAutoAuto ;
}else {_gcag .ColorAttr .ST_HexColorRGB =_cbcdb .AsRGBString ();};if _aafga !=_bf .Zero {_gcag .SzAttr =_c .Uint64 (uint64 (_aafga /_bf .Point *8));};};

// AddComment add comment to the paragraph.
func (_fecf Paragraph )AddComment (author ,commentText string )int64 {var _dccg int64 ;if _fecf ._gbga .HasComments (){for _ ,_daddd :=range _fecf ._gbga .Comments (){if _daddd .id ()> _dccg {_dccg =_daddd .id ();};};_dccg ++;}else {_fecf ._gbga .addComments ();
_dccg =1;};_ddcc :=_aag .NewCT_Comment ();_ffdf :=_aag .NewCT_Markup ();_ecda :=_gb .Initials (author );_dggffd :=_b .Now ();_ddcc .IdAttr =_dccg ;_ddcc .AuthorAttr =author ;_ddcc .InitialsAttr =&_ecda ;_ddcc .DateAttr =&_dggffd ;_ffdf .IdAttr =_dccg ;
_ddcc .EG_BlockLevelElts =append (_ddcc .EG_BlockLevelElts ,_aag .NewEG_BlockLevelElts ());_ffbef :=Comment {_fecf ._gbga ,_ddcc };_agbg :=_ffbef .AddParagraph ();_agbg .SetStyle (_ebg );_dbbg :=_agbg .AddRun ();_dbbg .AddAnnotationReference ();_ecdg :=_dbbg .Properties ();
_ecdg .SetStyle (_gffg );_ecge :=_agbg .AddRun ();_ecge .AddText (commentText );_ddbad :=_ecge .Properties ();_ddbad .SetSize (_bf .Distance (_fca ));_fecf ._gbga ._abb .CT_Comments .Comment =append (_fecf ._gbga ._abb .CT_Comments .Comment ,_ddcc );_fecf .addStartComment (_dccg );
return _dccg ;};

// SetUISortOrder controls the order the style is displayed in the UI.
func (_abce Style )SetUISortOrder (order int ){_abce ._bcedg .UiPriority =_aag .NewCT_DecimalNumber ();_abce ._bcedg .UiPriority .ValAttr =int64 (order );};

// PutNodeAfter put node to position after relativeTo.
func (_badf *Document )PutNodeAfter (relativeTo ,node Node ){_badf .putNode (relativeTo ,node ,false )};

// Type returns the type of the field.
func (_dedaa FormField )Type ()FormFieldType {if len (_dedaa ._daga .FFDataChoice )==0{return FormFieldTypeUnknown ;};for _ ,_daff :=range _dedaa ._daga .FFDataChoice {switch {case _daff .TextInput !=nil :return FormFieldTypeText ;case _daff .CheckBox !=nil :return FormFieldTypeCheckBox ;
case _daff .DdList !=nil :return FormFieldTypeDropDown ;};};return FormFieldTypeUnknown ;};func _bcbdf (_efece *_aag .CT_Tbl ,_dcbg map[string ]string ){for _ ,_ebbdb :=range _efece .EG_ContentRowContent {for _ ,_aegbb :=range _ebbdb .ContentRowContentChoice .Tr {for _ ,_cfcfb :=range _aegbb .EG_ContentCellContent {for _ ,_fefgg :=range _cfcfb .ContentCellContentChoice .Tc {for _ ,_accbb :=range _fefgg .EG_BlockLevelElts {for _ ,_bcbb :=range _accbb .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_gdaf :=range _bcbb .ContentBlockContentChoice .P {_dagbf (_gdaf ,_dcbg );
};for _ ,_gfbee :=range _bcbb .ContentBlockContentChoice .Tbl {_bcbdf (_gfbee ,_dcbg );};};};};};};};};type mergeFieldInfo struct{_bggcd string ;_baga string ;_fbdf string ;_bcdf bool ;_cgagb bool ;_gceb bool ;_gcbd bool ;_fdgea Paragraph ;_addg ,_gfcae ,_ggfab int ;
_ebacc *_aag .EG_PContent ;_dcfed bool ;};

// SetName sets the name of the image, visible in the properties of the image
// within Word.
func (_gga AnchoredDrawing )SetName (name string ){_gga ._ae .DocPr .NameAttr =name ;for _ ,_dee :=range _gga ._ae .Graphic .GraphicData .Any {if _daa ,_dgb :=_dee .(*_ggg .Pic );_dgb {_daa .NvPicPr .CNvPr .DescrAttr =_c .String (name );};};};

// SetBasedOn sets the style that this style is based on.
func (_dffa Style )SetBasedOn (name string ){if name ==""{_dffa ._bcedg .BasedOn =nil ;}else {_dffa ._bcedg .BasedOn =_aag .NewCT_String ();_dffa ._bcedg .BasedOn .ValAttr =name ;};};

// SetWidthAuto sets the the cell width to automatic.
func (_aebb CellProperties )SetWidthAuto (){_aebb ._cfb .TcW =_aag .NewCT_TblWidth ();_aebb ._cfb .TcW .TypeAttr =_aag .ST_TblWidthAuto ;};

// SetInnerShadowImageEffect sets the inner shadow image effect.
func (_gccc AnchoredDrawing )SetInnerShadowImageEffect (radius ,offset _bf .Distance ,c _ff .Color ,degrees float64 ){_dab :=_bf .ToEMU (float64 (radius ));_eee :=_bf .ToEMU (float64 (offset ));_bfc :=int32 (degrees *60000);for _ ,_ded :=range _gccc ._ae .Graphic .GraphicData .Any {if _egf ,_eda :=_ded .(*_ggg .Pic );
_eda {_gccc .initializeEffectList (_egf .SpPr );_egf .SpPr .EffectPropertiesChoice .EffectLst .InnerShdw =_da .NewCT_InnerShadowEffect ();_egf .SpPr .EffectPropertiesChoice .EffectLst .InnerShdw .BlurRadAttr =&_dab ;_egf .SpPr .EffectPropertiesChoice .EffectLst .InnerShdw .DistAttr =&_eee ;
_egf .SpPr .EffectPropertiesChoice .EffectLst .InnerShdw .DirAttr =&_bfc ;_egf .SpPr .EffectPropertiesChoice .EffectLst .InnerShdw .SrgbClr =_da .NewCT_SRgbColor ();_egf .SpPr .EffectPropertiesChoice .EffectLst .InnerShdw .SrgbClr .ValAttr =*c .AsRGBString ();
};};};

// X returns the inner wrapped XML type.
func (_dae AnchoredDrawing )X ()*_aag .WdAnchor {return _dae ._ae };

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_gcea Footer )AddImage (i _cd .Image )(_cd .ImageRef ,error ){var _bceb _cd .Relationships ;for _deead ,_feff :=range _gcea ._gegg ._cfg {if _feff ==_gcea ._degea {_bceb =_gcea ._gegg ._abg [_deead ];};};_begf :=_cd .MakeImageRef (i ,&_gcea ._gegg .DocBase ,_bceb );
if i .Data ==nil &&i .Path ==""{return _begf ,_cg .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _begf ,_cg .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};if i .Size .X ==0||i .Size .Y ==0{return _begf ,_cg .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_gcea ._gegg .Images =append (_gcea ._gegg .Images ,_begf );
_dgade :=_db .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_gcea ._gegg .Images ),i .Format );_cdgga :=_bceb .AddRelationship (_dgade ,_c .ImageType );_begf .SetRelID (_cdgga .X ().IdAttr );return _begf ,nil ;
};

// SetCellSpacing sets the cell spacing within a table.
func (_gacbg TableProperties )SetCellSpacing (m _bf .Distance ){_gacbg ._abgbf .TblCellSpacing =_aag .NewCT_TblWidth ();_gacbg ._abgbf .TblCellSpacing .TypeAttr =_aag .ST_TblWidthDxa ;_gacbg ._abgbf .TblCellSpacing .WAttr =&_aag .ST_MeasurementOrPercent {};
_gacbg ._abgbf .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_aag .ST_DecimalNumberOrPercent {};_gacbg ._abgbf .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (m /_bf .Dxa ));};

// RemoveParagraph removes a paragraph from a footer.
func (_dfde Footer )RemoveParagraph (p Paragraph ){for _ ,_cfbd :=range _dfde ._degea .EG_BlockLevelElts {for _ ,_fbad :=range _cfbd .BlockLevelEltsChoice .EG_ContentBlockContent {for _cfcc ,_egea :=range _fbad .ContentBlockContentChoice .P {if _egea ==p ._dbgba {copy (_fbad .ContentBlockContentChoice .P [_cfcc :],_fbad .ContentBlockContentChoice .P [_cfcc +1:]);
_fbad .ContentBlockContentChoice .P =_fbad .ContentBlockContentChoice .P [0:len (_fbad .ContentBlockContentChoice .P )-1];return ;};};};};};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_abgad ParagraphProperties )SetKeepOnOnePage (b bool ){if !b {_abgad ._ggac .KeepLines =nil ;}else {_abgad ._ggac .KeepLines =_aag .NewCT_OnOff ();};};

// AddDefinition adds a new numbering definition.
func (_ceag Numbering )AddDefinition ()NumberingDefinition {_eadgb :=_aag .NewCT_Num ();_gbag :=int64 (1);for _ ,_bgef :=range _ceag .Definitions (){if _bgef .AbstractNumberID ()>=_gbag {_gbag =_bgef .AbstractNumberID ()+1;};};_fcge :=int64 (1);for _ ,_fdebc :=range _ceag .X ().Num {if _fdebc .NumIdAttr >=_fcge {_fcge =_fdebc .NumIdAttr +1;
};};_eadgb .NumIdAttr =_fcge ;_eadgb .AbstractNumId =_aag .NewCT_DecimalNumber ();_eadgb .AbstractNumId .ValAttr =_gbag ;_fegfc :=_aag .NewCT_AbstractNum ();_fegfc .AbstractNumIdAttr =_gbag ;_ceag ._gbda .AbstractNum =append (_ceag ._gbda .AbstractNum ,_fegfc );
_ceag ._gbda .Num =append (_ceag ._gbda .Num ,_eadgb );return NumberingDefinition {_fegfc };};

// Color controls the run or styles color.
type Color struct{_gec *_aag .CT_Color };

// SetTextStyleItalic sets text style of watermark to italic.
func (_gaba *WatermarkText )SetTextStyleItalic (value bool ){_dacdc :=_gaba .GetStyle ();_dacdc .SetItalic (value );_gaba .SetStyle (_dacdc );};const _ebcc ="\u0046\u006f\u0072\u006d\u0046\u0069\u0065l\u0064\u0054\u0079\u0070\u0065\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0046\u006fr\u006dF\u0069\u0065\u006c\u0064\u0054\u0079p\u0065\u0054\u0065\u0078\u0074\u0046\u006fr\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0043\u0068\u0065\u0063\u006b\u0042\u006f\u0078\u0046\u006f\u0072\u006d\u0046i\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0044\u0072\u006f\u0070\u0044\u006fw\u006e";


// ParagraphProperties returns the paragraph style properties.
func (_fabac Style )ParagraphProperties ()ParagraphStyleProperties {if _fabac ._bcedg .PPr ==nil {_fabac ._bcedg .PPr =_aag .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_fabac ._bcedg .PPr };};

// GetNumberingLevelByIds returns a NumberingLevel by its NumId and LevelId attributes
// or an empty one if not found.
func (_cbge *Document )GetNumberingLevelByIds (numId ,levelId int64 )NumberingLevel {if _cbge .Numbering ._gbda ==nil {return NumberingLevel {};};for _ ,_cfgd :=range _cbge .Numbering ._gbda .Num {if _cfgd !=nil &&_cfgd .NumIdAttr ==numId {_faaf :=_cfgd .AbstractNumId .ValAttr ;
for _ ,_gcac :=range _cbge .Numbering ._gbda .AbstractNum {if _gcac .AbstractNumIdAttr ==_faaf {if _gcac .NumStyleLink !=nil &&len (_gcac .Lvl )==0{if _eagc ,_bbce :=_cbge .Styles .SearchStyleById (_gcac .NumStyleLink .ValAttr );_bbce {if _eagc .ParagraphProperties ().NumId ()> -1{return _cbge .GetNumberingLevelByIds (_eagc .ParagraphProperties ().NumId (),levelId );
};};};for _ ,_ecde :=range _gcac .Lvl {if _ecde .IlvlAttr ==levelId {return NumberingLevel {_ecde };};};};};};};return NumberingLevel {};};

// DrawingInline return a slice of InlineDrawings.
func (_bffae Run )DrawingInline ()[]InlineDrawing {_eaeb :=[]InlineDrawing {};for _ ,_ecgbd :=range _bffae ._dcgfd .EG_RunInnerContent {if _ecgbd .RunInnerContentChoice .Drawing ==nil {continue ;};for _ ,_egad :=range _ecgbd .RunInnerContentChoice .Drawing .DrawingChoice {if _egad .Inline ==nil {continue ;
};_eaeb =append (_eaeb ,InlineDrawing {_bffae ._edce ,_egad .Inline });};};return _eaeb ;};

// SetRight sets the cell right margin
func (_fcgde CellMargins )SetRight (d _bf .Distance ){_fcgde ._fgef .Right =_aag .NewCT_TblWidth ();_fag (_fcgde ._fgef .Right ,d );};

// Set3DRotationImageEffect sets the 3D rotation image effect.
func (_agg AnchoredDrawing )Set3DRotationImageEffect (){for _ ,_bgg :=range _agg ._ae .Graphic .GraphicData .Any {if _fdg ,_fee :=_bgg .(*_ggg .Pic );_fee {_fdg .SpPr .Scene3d =_da .NewCT_Scene3D ();_fdg .SpPr .Scene3d .Camera =_da .NewCT_Camera ();_fdg .SpPr .Scene3d .Camera .PrstAttr =_da .ST_PresetCameraTypeIsometricRightUp ;
_fdg .SpPr .Scene3d .LightRig =_da .NewCT_LightRig ();_fdg .SpPr .Scene3d .LightRig .RigAttr =_da .ST_LightRigTypeThreePt ;_fdg .SpPr .Scene3d .LightRig .DirAttr =_da .ST_LightRigDirectionT ;};};};

// Endnotes returns the endnotes defined in the document.
func (_cbb *Document )Endnotes ()[]Endnote {_ebeg :=[]Endnote {};for _ ,_fdcea :=range _cbb ._edga .CT_Endnotes .Endnote {_ebeg =append (_ebeg ,Endnote {_cbb ,_fdcea });};return _ebeg ;};

// SetBottomPct sets the cell bottom margin
func (_cbg CellMargins )SetBottomPct (pct float64 ){_cbg ._fgef .Bottom =_aag .NewCT_TblWidth ();_faa (_cbg ._fgef .Bottom ,pct );};

// Clear content of node element.
func (_ceca *Node )Clear (){_ceca ._geed =nil };

// SetWrapPathStart sets wrapPath start value.
func (_fa AnchorDrawWrapOptions )SetWrapPathStart (coordinate *_da .CT_Point2D ){_fa ._aab =coordinate };

// SetHangingIndent controls special indent of paragraph.
func (_dafgf Paragraph )SetHangingIndent (m _bf .Distance ){_dafgf .ensurePPr ();_efdca :=_dafgf ._dbgba .PPr ;if _efdca .Ind ==nil {_efdca .Ind =_aag .NewCT_Ind ();};if m ==_bf .Zero {_efdca .Ind .HangingAttr =nil ;}else {_efdca .Ind .HangingAttr =&_bac .ST_TwipsMeasure {};
_efdca .Ind .HangingAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_bf .Twips ));};};

// Row is a row within a table within a document.
type Row struct{_bacgc *Document ;_dbebf *_aag .CT_Row ;};

// Value returns the string value of a FormFieldTypeText or FormFieldTypeDropDown.
func (_cfgdd FormField )Value ()string {if len (_cfgdd ._daga .FFDataChoice )> 0{for _ ,_eaeg :=range _cfgdd ._daga .FFDataChoice {if _eaeg .TextInput !=nil &&_cfgdd ._fcece .RunInnerContentChoice .T !=nil {return _cfgdd ._fcece .RunInnerContentChoice .T .Content ;
}else if _eaeg .DdList !=nil &&_eaeg .DdList .Result !=nil {_dadc :=_cfgdd .PossibleValues ();_faeac :=int (_eaeg .DdList .Result .ValAttr );if _faeac < len (_dadc ){return _dadc [_faeac ];};}else if _eaeg .CheckBox !=nil {if _cfgdd .IsChecked (){return "\u0074\u0072\u0075\u0065";
};return "\u0066\u0061\u006cs\u0065";};};};return "";};

// SetText sets the watermark text.
func (_bgggd *WatermarkText )SetText (text string ){_edcee :=_bgggd .getShape ();if _bgggd ._eafacd !=nil {_gggcd :=_bgggd ._eafacd .ShapeChoice ;for _ ,_gdfee :=range _gggcd {if _gdfee .ShapeElementsChoice .Textpath !=nil {_gdfee .ShapeElementsChoice .Textpath .StringAttr =&text ;
};};}else {_affa :=_bgggd .findNode (_edcee ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _addgd ,_bagab :=range _affa .Attrs {if _bagab .Name .Local =="\u0073\u0074\u0072\u0069\u006e\u0067"{_affa .Attrs [_addgd ].Value =text ;};};};};func (_gcfb *Document )reorderComments (){_cbdd :=int64 (1);
_cfgf :=map[int64 ]int64 {};_bbae :=_gcfb ._abb ;for _ ,_caec :=range _bbae .CT_Comments .Comment {_cfgf [_caec .IdAttr ]=_cbdd ;_caec .IdAttr =_cbdd ;_cbdd ++;};for _ ,_cdbf :=range _gcfb .Paragraphs (){for _ ,_fbeaf :=range _cdbf .X ().EG_PContent {for _ ,_eded :=range _fbeaf .PContentChoice .EG_ContentRunContent {for _ ,_aaec :=range _eded .ContentRunContentChoice .EG_RunLevelElts {for _ ,_aacb :=range _aaec .RunLevelEltsChoice .EG_RangeMarkupElements {if _aacb .RangeMarkupElementsChoice .CommentRangeStart !=nil {_aacb .RangeMarkupElementsChoice .CommentRangeStart .IdAttr =_cfgf [_aacb .RangeMarkupElementsChoice .CommentRangeStart .IdAttr ];
}else if _aacb .RangeMarkupElementsChoice .CommentRangeEnd !=nil {_aacb .RangeMarkupElementsChoice .CommentRangeEnd .IdAttr =_cfgf [_aacb .RangeMarkupElementsChoice .CommentRangeEnd .IdAttr ];};};};if _eded .ContentRunContentChoice .R !=nil {for _ ,_bfgb :=range _eded .ContentRunContentChoice .R .EG_RunInnerContent {if _bfgb .RunInnerContentChoice .CommentReference !=nil {_bfgb .RunInnerContentChoice .CommentReference .IdAttr =_cfgf [_bfgb .RunInnerContentChoice .CommentReference .IdAttr ];
};};};};};};};

// AddFieldWithFormatting adds a field (automatically computed text) to the
// document with field specifc formatting.
func (_fddd Run )AddFieldWithFormatting (code string ,fmt string ,isDirty bool ){_badfa :=_fddd .newIC ();_badfa .RunInnerContentChoice .FldChar =_aag .NewCT_FldChar ();_badfa .RunInnerContentChoice .FldChar .FldCharTypeAttr =_aag .ST_FldCharTypeBegin ;
if isDirty {_badfa .RunInnerContentChoice .FldChar .DirtyAttr =&_bac .ST_OnOff {};_badfa .RunInnerContentChoice .FldChar .DirtyAttr .Bool =_c .Bool (true );};_badfa =_fddd .newIC ();_badfa .RunInnerContentChoice .InstrText =_aag .NewCT_Text ();if fmt !=""{_badfa .RunInnerContentChoice .InstrText .Content =code +"\u0020"+fmt ;
}else {_badfa .RunInnerContentChoice .InstrText .Content =code ;};_badfa =_fddd .newIC ();_badfa .RunInnerContentChoice .FldChar =_aag .NewCT_FldChar ();_badfa .RunInnerContentChoice .FldChar .FldCharTypeAttr =_aag .ST_FldCharTypeEnd ;};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_adag TableBorders )SetInsideHorizontal (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_adag ._eacfd .InsideH =_aag .NewCT_Border ();_ebdgf (_adag ._eacfd .InsideH ,t ,c ,thickness );};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_fgbbcd Paragraph )Style ()string {if _fgbbcd ._dbgba .PPr !=nil &&_fgbbcd ._dbgba .PPr .PStyle !=nil {return _fgbbcd ._dbgba .PPr .PStyle .ValAttr ;};return "";};

// SetReflectionImageEffect sets the reflection image effect.
func (_dfa AnchoredDrawing )SetReflectionImageEffect (radius _bf .Distance ,opacity ,size float64 ){_fcg :=_bf .ToEMU (float64 (radius ));_gdd :="\u002d1\u0030\u0030\u0030\u0030\u0030";for _ ,_fe :=range _dfa ._ae .Graphic .GraphicData .Any {if _fb ,_eed :=_fe .(*_ggg .Pic );
_eed {_dfa .initializeEffectList (_fb .SpPr );_fb .SpPr .EffectPropertiesChoice .EffectLst .Reflection =_da .NewCT_ReflectionEffect ();_fb .SpPr .EffectPropertiesChoice .EffectLst .Reflection .BlurRadAttr =&_fcg ;_fb .SpPr .EffectPropertiesChoice .EffectLst .Reflection .AlgnAttr =_da .ST_RectAlignmentBl ;
_fcb :=false ;_fb .SpPr .EffectPropertiesChoice .EffectLst .Reflection .RotWithShapeAttr =&_fcb ;_fb .SpPr .EffectPropertiesChoice .EffectLst .Reflection .StAAttr =&_da .ST_PositiveFixedPercentage {};_fb .SpPr .EffectPropertiesChoice .EffectLst .Reflection .StAAttr .ST_PositiveFixedPercentageDecimal =_c .Int32 (int32 (opacity *1000));
_fb .SpPr .EffectPropertiesChoice .EffectLst .Reflection .EndPosAttr =&_da .ST_PositiveFixedPercentage {};_fb .SpPr .EffectPropertiesChoice .EffectLst .Reflection .EndPosAttr .ST_PositiveFixedPercentageDecimal =_c .Int32 (int32 (size *1000));_fb .SpPr .EffectPropertiesChoice .EffectLst .Reflection .SyAttr =&_da .ST_Percentage {};
_fb .SpPr .EffectPropertiesChoice .EffectLst .Reflection .SyAttr .ST_Percentage =&_gdd ;};};_ ,_fcbg :=_dfa .GetSize ();_fcbg =_fcbg *int64 (size )/100;_dfa .setEffectExtent (_fcbg ,_fcg ,_fcg ,_fcg );};

// OpenTemplate opens a document, removing all content so it can be used as a
// template.  Since Word removes unused styles from a document upon save, to
// create a template in Word add a paragraph with every style of interest.  When
// opened with OpenTemplate the document's styles will be available but the
// content will be gone.
func OpenTemplate (filename string )(*Document ,error ){_bedfc ,_bggcb :=Open (filename );if _bggcb !=nil {return nil ,_bggcb ;};_bedfc ._ffb .Body =_aag .NewCT_Body ();return _bedfc ,nil ;};

// SetSmallCaps sets the run to small caps.
func (_cgdcc RunProperties )SetSmallCaps (b bool ){if !b {_cgdcc ._gbeff .SmallCaps =nil ;}else {_cgdcc ._gbeff .SmallCaps =_aag .NewCT_OnOff ();};};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_fbdee ParagraphProperties )CharacterSpacingMeasure ()string {if _afcgc :=_fbdee ._ggac .RPr .Spacing ;_afcgc !=nil {_ffeec :=_afcgc .ValAttr ;if _ffeec .ST_UniversalMeasure !=nil {return *_ffeec .ST_UniversalMeasure ;};};return "";};

// SetLeft sets the cell left margin
func (_egbg CellMargins )SetLeft (d _bf .Distance ){_egbg ._fgef .Left =_aag .NewCT_TblWidth ();_fag (_egbg ._fgef .Left ,d );};func (_fced *Document )addComments (){_fced ._abb =_aag .NewComments ();_fced ._abb .CT_Comments =*_aag .NewCT_Comments ();_fced ._abb .Comment =make ([]*_aag .CT_Comment ,0);
_fced .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0063\u006f\u006dm\u0065\u006et\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0063\u006f\u006d\u006d\u0065\u006e\u0074\u0073\u002b\u0078\u006d\u006c");
_fced ._eeb .AddRelationship ("\u0063\u006f\u006dm\u0065\u006e\u0074\u0073\u002e\u0078\u006d\u006c",_c .CommentsType );_geea :=_fced .Styles .AddStyle (_gffg ,_aag .ST_StyleTypeParagraph ,false );_geea .SetName ("\u0043\u006f\u006d\u006d\u0065\u006e\u0074\u0020\u0052\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");
_geea .SetBasedOn ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074");_cabe :=_geea .RunProperties ();_cabe .X ().Sz =&_aag .CT_HpsMeasure {ValAttr :_aag .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_fca }};
_cabe .X ().SzCs =&_aag .CT_HpsMeasure {ValAttr :_aag .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_fca }};_gaeed :=_fced .Styles .AddStyle (_ebg ,_aag .ST_StyleTypeParagraph ,false );_gaeed .SetName ("\u0043\u006f\u006dm\u0065\u006e\u0074\u0020\u0054\u0065\u0078\u0074");
_gaeed .SetBasedOn ("\u004e\u006f\u0072\u006d\u0061\u006c");_gaeed .SetLinkedStyle (_fgd );_cddgg :=_gaeed .RunProperties ();_cddgg .X ().Sz =&_aag .CT_HpsMeasure {ValAttr :_aag .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_egd }};_cddgg .X ().SzCs =&_aag .CT_HpsMeasure {ValAttr :_aag .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_egd }};
_ccgf :=_fced .Styles .AddStyle (_ebg ,_aag .ST_StyleTypeParagraph ,false );_ccgf .SetName ("\u0043\u006f\u006d\u006d\u0065\u006e\u0074\u0020\u0054\u0065\u0078\u0074 \u0043\u0068\u0061\u0072");_ccgf .SetBasedOn ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074");
_ccgf .SetLinkedStyle (_ebg );_fgcc :=_ccgf .RunProperties ();_fgcc .X ().Sz =&_aag .CT_HpsMeasure {ValAttr :_aag .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_egd }};_fgcc .X ().SzCs =&_aag .CT_HpsMeasure {ValAttr :_aag .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_egd }};
_gdb :=_fced .Styles .AddStyle (_ebg ,_aag .ST_StyleTypeParagraph ,false );_gdb .SetName ("\u0043o\u006dm\u0065\u006e\u0074\u0020\u0053\u0075\u0062\u006a\u0065\u0063\u0074");_gdb .SetBasedOn (_ebg );_gdb .SetLinkedStyle (_bggc );_gdb .SetNextStyle (_ebg );
_bbgc :=_gdb .RunProperties ();_bbgc .SetBold (true );};

// AddDrawingInline adds an inline drawing from an ImageRef.
func (_bfcc Run )AddDrawingInline (img _cd .ImageRef )(InlineDrawing ,error ){_fbbdd :=_bfcc .newIC ();_fbbdd .RunInnerContentChoice .Drawing =_aag .NewCT_Drawing ();_aadg :=_aag .NewWdInline ();_cfde :=InlineDrawing {_bfcc ._edce ,_aadg };_aadg .CNvGraphicFramePr =_da .NewCT_NonVisualGraphicFrameProperties ();
_fbbdd .RunInnerContentChoice .Drawing .DrawingChoice =append (_fbbdd .RunInnerContentChoice .Drawing .DrawingChoice ,&_aag .CT_DrawingChoice {Inline :_aadg });_aadg .Graphic =_da .NewGraphic ();_aadg .Graphic .GraphicData =_da .NewCT_GraphicalObjectData ();
_aadg .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";
_aadg .DistTAttr =_c .Uint32 (0);_aadg .DistLAttr =_c .Uint32 (0);_aadg .DistBAttr =_c .Uint32 (0);_aadg .DistRAttr =_c .Uint32 (0);_aadg .Extent .CxAttr =int64 (float64 (img .Size ().X *_bf .Pixel72 )/_bf .EMU );_aadg .Extent .CyAttr =int64 (float64 (img .Size ().Y *_bf .Pixel72 )/_bf .EMU );
_dggad :=0x7FFFFFFF&_d .Uint32 ();_aadg .DocPr .IdAttr =_dggad ;_dabff :=_ggg .NewPic ();_dabff .NvPicPr .CNvPr .IdAttr =_dggad ;_dbaeg :=img .RelID ();if _dbaeg ==""{return _cfde ,_cg .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");
};_aadg .Graphic .GraphicData .Any =append (_aadg .Graphic .GraphicData .Any ,_dabff );_dabff .BlipFill =_da .NewCT_BlipFillProperties ();_dabff .BlipFill .Blip =_da .NewCT_Blip ();_dabff .BlipFill .Blip .EmbedAttr =&_dbaeg ;_dabff .BlipFill .FillModePropertiesChoice .Stretch =_da .NewCT_StretchInfoProperties ();
_dabff .BlipFill .FillModePropertiesChoice .Stretch .FillRect =_da .NewCT_RelativeRect ();_dabff .SpPr =_da .NewCT_ShapeProperties ();_dabff .SpPr .Xfrm =_da .NewCT_Transform2D ();_dabff .SpPr .Xfrm .Off =_da .NewCT_Point2D ();_dabff .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_c .Int64 (0);
_dabff .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_c .Int64 (0);_dabff .SpPr .Xfrm .Ext =_da .NewCT_PositiveSize2D ();_dabff .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_bf .Point );_dabff .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_bf .Point );
_dabff .SpPr .GeometryChoice .PrstGeom =_da .NewCT_PresetGeometry2D ();_dabff .SpPr .GeometryChoice .PrstGeom .PrstAttr =_da .ST_ShapeTypeRect ;return _cfde ,nil ;};

// SetWidthAuto sets the the table width to automatic.
func (_eadge TableProperties )SetWidthAuto (){_eadge ._abgbf .TblW =_aag .NewCT_TblWidth ();_eadge ._abgbf .TblW .TypeAttr =_aag .ST_TblWidthAuto ;};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_gfff CellBorders )SetBottom (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_gfff ._cde .Bottom =_aag .NewCT_Border ();_ebdgf (_gfff ._cde .Bottom ,t ,c ,thickness );};

// Headers returns the headers defined in the document.
func (_cff *Document )Headers ()[]Header {_efa :=[]Header {};for _ ,_cag :=range _cff ._acbb {_efa =append (_efa ,Header {_cff ,_cag });};return _efa ;};

// SetTop sets the cell top margin
func (_dabg CellMargins )SetTop (d _bf .Distance ){_dabg ._fgef .Top =_aag .NewCT_TblWidth ();_fag (_dabg ._fgef .Top ,d );};

// Paragraph is a paragraph within a document.
type Paragraph struct{_gbga *Document ;_dbgba *_aag .CT_P ;};

// Clear clears all content within a footer
func (_gedg Footer )Clear (){_gedg ._degea .EG_BlockLevelElts =[]*_aag .EG_BlockLevelElts {}};

// SetRightPct sets the cell right margin
func (_aggd CellMargins )SetRightPct (pct float64 ){_aggd ._fgef .Right =_aag .NewCT_TblWidth ();_faa (_aggd ._fgef .Right ,pct );};

// Table is a table within a document.
type Table struct{_efgdcg *Document ;_bgcdd *_aag .CT_Tbl ;};func _cbda (_fafb *_aag .CT_P ,_feda ,_bgcb map[int64 ]int64 ){for _ ,_bgca :=range _fafb .EG_PContent {for _ ,_bgffa :=range _bgca .PContentChoice .EG_ContentRunContent {if _bgffa .ContentRunContentChoice .R !=nil {for _ ,_gbca :=range _bgffa .ContentRunContentChoice .R .EG_RunInnerContent {_egda :=_gbca .RunInnerContentChoice .EndnoteReference ;
if _egda !=nil &&_egda .IdAttr > 0{if _gbbab ,_cbcg :=_bgcb [_egda .IdAttr ];_cbcg {_egda .IdAttr =_gbbab ;};};_babc :=_gbca .RunInnerContentChoice .FootnoteReference ;if _babc !=nil &&_babc .IdAttr > 0{if _abgb ,_afec :=_feda [_babc .IdAttr ];_afec {_babc .IdAttr =_abgb ;
};};};};};};};

// ReplaceText replace the text inside node.
func (_dccf *Node )ReplaceText (oldText ,newText string ){switch _bdgfg :=_dccf .X ().(type ){case *Paragraph :for _ ,_agbcad :=range _bdgfg .Runs (){for _ ,_fbdfa :=range _agbcad ._dcgfd .EG_RunInnerContent {if _fbdfa .RunInnerContentChoice .T !=nil {_ccff :=_fbdfa .RunInnerContentChoice .T .Content ;
_ccff =_ag .ReplaceAll (_ccff ,oldText ,newText );_fbdfa .RunInnerContentChoice .T .Content =_ccff ;};};};};for _ ,_gdfcb :=range _dccf .Children {_gdfcb .ReplaceText (oldText ,newText );};};

// CellProperties are a table cells properties within a document.
type CellProperties struct{_cfb *_aag .CT_TcPr };

// AddCheckBox adds checkbox form field to the paragraph and returns it.
func (_bacdc Paragraph )AddCheckBox (name string )FormField {_faaee :=_bacdc .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0043\u0048\u0045\u0043\u004b\u0042\u004f\u0058");_faaee ._daga .FFDataChoice [0].CheckBox =_aag .NewCT_FFCheckBox ();return _faaee ;
};

// Shadow returns true if paragraph shadow is on.
func (_cbbef ParagraphProperties )Shadow ()bool {return _faabg (_cbbef ._ggac .RPr .Shadow )};

// GetWrapPathStart return wrapPath start value.
func (_gce AnchorDrawWrapOptions )GetWrapPathStart ()*_da .CT_Point2D {return _gce ._aab };

// GetShapeStyle returns string style of the shape in watermark and format it to ShapeStyle.
func (_fefed *WatermarkPicture )GetShapeStyle ()_gg .ShapeStyle {if _fefed ._ffefa !=nil &&_fefed ._ffefa .StyleAttr !=nil {return _gg .NewShapeStyle (*_fefed ._ffefa .StyleAttr );};return _gg .NewShapeStyle ("");};

// RemoveParagraph removes a paragraph from a footer.
func (_agac Header )RemoveParagraph (p Paragraph ){for _ ,_afcf :=range _agac ._dcaf .EG_BlockLevelElts {for _ ,_ccded :=range _afcf .BlockLevelEltsChoice .EG_ContentBlockContent {for _bfafd ,_aeca :=range _ccded .ContentBlockContentChoice .P {if _aeca ==p ._dbgba {copy (_ccded .ContentBlockContentChoice .P [_bfafd :],_ccded .ContentBlockContentChoice .P [_bfafd +1:]);
_ccded .ContentBlockContentChoice .P =_ccded .ContentBlockContentChoice .P [0:len (_ccded .ContentBlockContentChoice .P )-1];return ;};};};};};func _gdcd (_fbed *_aag .CT_P ,_acg *_aag .CT_Hyperlink ,_fgdf *TableInfo ,_bdce *DrawingInfo ,_aece []*_aag .EG_PContent )[]TextItem {if len (_aece )==0{return []TextItem {TextItem {Text :"",DrawingInfo :_bdce ,Paragraph :_fbed ,Hyperlink :_acg ,Run :nil ,TableInfo :_fgdf }};
};_gadec :=[]TextItem {};for _ ,_fdcb :=range _aece {for _ ,_dbcc :=range _fdcb .PContentChoice .FldSimple {if _dbcc !=nil {_gadec =append (_gadec ,_gdcd (_fbed ,_acg ,_fgdf ,_bdce ,_dbcc .EG_PContent )...);};};if _fbfg :=_fdcb .PContentChoice .Hyperlink ;
_fbfg !=nil {_gadec =append (_gadec ,_geagb (_fbed ,_fbfg ,_fgdf ,_bdce ,_fbfg .PContentChoice .EG_ContentRunContent )...);};_gadec =append (_gadec ,_geagb (_fbed ,nil ,_fgdf ,_bdce ,_fdcb .PContentChoice .EG_ContentRunContent )...);};return _gadec ;};


// Italic returns true if run font is italic.
func (_abccf RunProperties )Italic ()bool {_afebff :=_abccf ._gbeff ;return _faabg (_afebff .I )||_faabg (_afebff .ICs );};

// SetDoubleStrikeThrough sets the run to double strike-through.
func (_caabg RunProperties )SetDoubleStrikeThrough (b bool ){if !b {_caabg ._gbeff .Dstrike =nil ;}else {_caabg ._gbeff .Dstrike =_aag .NewCT_OnOff ();};};

// RemoveParagraph removes a paragraph from the footnote.
func (_fdgcd Footnote )RemoveParagraph (p Paragraph ){for _ ,_beeba :=range _fdgcd .content (){for _defgc ,_dgec :=range _beeba .ContentBlockContentChoice .P {if _dgec ==p ._dbgba {copy (_beeba .ContentBlockContentChoice .P [_defgc :],_beeba .ContentBlockContentChoice .P [_defgc +1:]);
_beeba .ContentBlockContentChoice .P =_beeba .ContentBlockContentChoice .P [0:len (_beeba .ContentBlockContentChoice .P )-1];return ;};};};};

// SetOrigin sets the origin of the image.  It defaults to ST_RelFromHPage and
// ST_RelFromVPage
func (_df AnchoredDrawing )SetOrigin (h _aag .WdST_RelFromH ,v _aag .WdST_RelFromV ){_df ._ae .PositionH .RelativeFromAttr =h ;_df ._ae .PositionV .RelativeFromAttr =v ;};func _dagbf (_eafa *_aag .CT_P ,_gfcdg map[string ]string ){for _ ,_ffgb :=range _eafa .EG_PContent {for _ ,_cbfb :=range _ffgb .PContentChoice .EG_ContentRunContent {if _cbfb .ContentRunContentChoice .R !=nil {for _ ,_cgec :=range _cbfb .ContentRunContentChoice .R .EG_RunInnerContent {_cadae :=_cgec .RunInnerContentChoice .Drawing ;
if _cadae !=nil {for _ ,_bbfeg :=range _cadae .DrawingChoice {if _bbfeg .Anchor !=nil {_ccbcg :=_bbfeg .Anchor ;for _ ,_gfea :=range _ccbcg .Graphic .GraphicData .Any {switch _ddbbg :=_gfea .(type ){case *_ggg .Pic :if _ddbbg .BlipFill !=nil &&_ddbbg .BlipFill .Blip !=nil {_cagg (_ddbbg .BlipFill .Blip ,_gfcdg );
};default:};};};if _bbfeg .Inline !=nil {_dddab :=_bbfeg .Inline ;for _ ,_bdff :=range _dddab .Graphic .GraphicData .Any {switch _edeb :=_bdff .(type ){case *_ggg .Pic :if _edeb .BlipFill !=nil &&_edeb .BlipFill .Blip !=nil {_cagg (_edeb .BlipFill .Blip ,_gfcdg );
};default:};};};};};};};};};};func (_faecc Paragraph )addFldCharsForField (_ecfa ,_eefg string )FormField {_dfgfd :=_faecc .addBeginFldChar (_ecfa );_aagdf :=FormField {_daga :_dfgfd };_eefbf :=_faecc ._gbga .Bookmarks ();_gcgcf :=int64 (len (_eefbf ));
if _ecfa !=""{_faecc .addStartBookmark (_gcgcf ,_ecfa );};_faecc .addInstrText (_eefg );_faecc .addSeparateFldChar ();if _eefg =="\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054"{_abag :=_faecc .AddRun ();_gfafg :=_aag .NewEG_RunInnerContent ();_abag ._dcgfd .EG_RunInnerContent =[]*_aag .EG_RunInnerContent {_gfafg };
_aagdf ._fcece =_gfafg ;};_faecc .addEndFldChar ();if _ecfa !=""{_faecc .addEndBookmark (_gcgcf );};return _aagdf ;};

// Fonts allows manipulating a style or run's fonts.
type Fonts struct{_ecdeb *_aag .CT_Fonts };

// SetStartPct sets the cell start margin
func (_feg CellMargins )SetStartPct (pct float64 ){_feg ._fgef .Start =_aag .NewCT_TblWidth ();_faa (_feg ._fgef .Start ,pct );};

// SetVerticalAlignment controls the vertical alignment of the run, this is used
// to control if text is superscript/subscript.
func (_dbgcf RunProperties )SetVerticalAlignment (v _bac .ST_VerticalAlignRun ){if v ==_bac .ST_VerticalAlignRunUnset {_dbgcf ._gbeff .VertAlign =nil ;}else {_dbgcf ._gbeff .VertAlign =_aag .NewCT_VerticalAlignRun ();_dbgcf ._gbeff .VertAlign .ValAttr =v ;
};};

// AddCommentReference adds comment reference to a run.
func (_aggbe Run )AddCommentReference (id int64 ){_fbeb :=_aggbe .newIC ();_fbeb .RunInnerContentChoice .CommentReference =_aag .NewCT_Markup ();_fbeb .RunInnerContentChoice .CommentReference .IdAttr =id ;};

// AddPageBreak adds a page break to a run.
func (_daacd Run )AddPageBreak (){_ggaac :=_daacd .newIC ();_ggaac .RunInnerContentChoice .Br =_aag .NewCT_Br ();_ggaac .RunInnerContentChoice .Br .TypeAttr =_aag .ST_BrTypePage ;};

// Text returns text from the document as one string separated with line breaks.
func (_cdbff *DocText )Text ()string {_dfce :=_ec .NewBuffer ([]byte {});for _ ,_eacf :=range _cdbff .Items {if _eacf .Text !=""{_dfce .WriteString (_eacf .Text );_dfce .WriteString ("\u000a");};};return _dfce .String ();};

// Properties returns the row properties.
func (_badc Row )Properties ()RowProperties {if _badc ._dbebf .TrPr ==nil {_badc ._dbebf .TrPr =_aag .NewCT_TrPr ();};return RowProperties {_badc ._dbebf .TrPr };};

// GetHeader gets a section Header for given type t [ST_HdrFtrDefault, ST_HdrFtrEven, ST_HdrFtrFirst]
func (_agdae Section )GetHeader (t _aag .ST_HdrFtr )(Header ,bool ){for _ ,_affb :=range _agdae ._fcee .EG_HdrFtrReferences {if _affb .HdrFtrReferencesChoice .HeaderReference ==nil {continue ;};if _affb .HdrFtrReferencesChoice .HeaderReference .TypeAttr ==t {for _ ,_bbdfa :=range _agdae ._cfbf .Headers (){_daebf :=_agdae ._cfbf ._eeb .FindRIDForN (_bbdfa .Index (),_c .HeaderType );
if _daebf ==_affb .HdrFtrReferencesChoice .HeaderReference .IdAttr {return _bbdfa ,true ;};};};};return Header {},false ;};

// SetHorizontalBanding controls the conditional formatting for horizontal banding.
func (_gffee TableLook )SetHorizontalBanding (on bool ){if !on {_gffee ._cagee .NoHBandAttr =&_bac .ST_OnOff {};_gffee ._cagee .NoHBandAttr .ST_OnOff1 =_bac .ST_OnOff1On ;}else {_gffee ._cagee .NoHBandAttr =&_bac .ST_OnOff {};_gffee ._cagee .NoHBandAttr .ST_OnOff1 =_bac .ST_OnOff1Off ;
};};

// AddParagraph adds a paragraph to the footer.
func (_egaa Footer )AddParagraph ()Paragraph {_bfec :=_aag .NewEG_ContentBlockContent ();_egaa ._degea .EG_BlockLevelElts =append (_egaa ._degea .EG_BlockLevelElts ,&_aag .EG_BlockLevelElts {BlockLevelEltsChoice :&_aag .EG_BlockLevelEltsChoice {EG_ContentBlockContent :[]*_aag .EG_ContentBlockContent {_bfec }}});
_deae :=_aag .NewCT_P ();_bfec .ContentBlockContentChoice .P =append (_bfec .ContentBlockContentChoice .P ,_deae );return Paragraph {_egaa ._gegg ,_deae };};

// SetThemeColor sets the color from the theme.
func (_cgb Color )SetThemeColor (t _aag .ST_ThemeColor ){_cgb ._gec .ThemeColorAttr =t };

// X returns the inner wrapped XML type.
func (_bfbcdf NumberingLevel )X ()*_aag .CT_Lvl {return _bfbcdf ._ebdf };

// SetLayout controls the table layout. wml.ST_TblLayoutTypeAutofit corresponds
// to "Automatically resize to fit contents" being checked, while
// wml.ST_TblLayoutTypeFixed corresponds to it being unchecked.
func (_adfdb TableProperties )SetLayout (l _aag .ST_TblLayoutType ){if l ==_aag .ST_TblLayoutTypeUnset ||l ==_aag .ST_TblLayoutTypeAutofit {_adfdb ._abgbf .TblLayout =nil ;}else {_adfdb ._abgbf .TblLayout =_aag .NewCT_TblLayoutType ();_adfdb ._abgbf .TblLayout .TypeAttr =l ;
};};

// TextWithOptions extract text with options.
func (_aabaa *DocText )TextWithOptions (options ExtractTextOptions )string {_efcab :=make (map[int64 ]map[int64 ]int64 ,0);_cbef :=_ec .NewBuffer ([]byte {});_baac :=int64 (0);_bgcc :=int64 (0);_dfec :=int64 (0);for _badb ,_bfdfg :=range _aabaa .Items {_degc :=false ;
if _bfdfg .Text !=""{if _badb > 0{if _bfdfg .Paragraph !=_aabaa .Items [_badb -1].Paragraph {_degc =true ;};if !options .RunsOnNewLine &&_degc {_cbef .WriteString ("\u000a");}else if options .RunsOnNewLine {_cbef .WriteString ("\u000a");};}else {_degc =true ;
};if options .WithNumbering {if _degc {for _ ,_abad :=range _aabaa ._dfddf {if _abad .FromParagraph ==nil {continue ;};if _abad .FromParagraph .X ()==_bfdfg .Paragraph {if _dbgb :=_abad .NumberingLevel .X ();_dbgb !=nil {if _abad .AbstractNumId !=nil &&_aabaa ._agaf [*_abad .AbstractNumId ][_dbgb .IlvlAttr ]> 0{if _ ,_cdafb :=_efcab [*_abad .AbstractNumId ];
_cdafb {if _ ,_caee :=_efcab [*_abad .AbstractNumId ][_dbgb .IlvlAttr ];_caee {_efcab [*_abad .AbstractNumId ][_dbgb .IlvlAttr ]++;}else {_efcab [*_abad .AbstractNumId ][_dbgb .IlvlAttr ]=1;};}else {_efcab [*_abad .AbstractNumId ]=map[int64 ]int64 {_dbgb .IlvlAttr :1};
};if _baac ==_abad .NumberingLevel .X ().IlvlAttr &&_dbgb .IlvlAttr > 0{_bgcc ++;}else {_bgcc =_efcab [*_abad .AbstractNumId ][_dbgb .IlvlAttr ];if _dbgb .IlvlAttr > _baac &&_dfec ==*_abad .AbstractNumId {_bgcc =1;};};_gffdb :="";if _dbgb .LvlText .ValAttr !=nil {_gffdb =*_dbgb .LvlText .ValAttr ;
};_fcegf :=_gb .FormatNumberingText (_bgcc ,_dbgb .IlvlAttr ,_gffdb ,_dbgb .NumFmt ,_efcab [*_abad .AbstractNumId ]);_cbef .WriteString (_fcegf );_aabaa ._agaf [*_abad .AbstractNumId ][_dbgb .IlvlAttr ]--;_baac =_dbgb .IlvlAttr ;_dfec =*_abad .AbstractNumId ;
if options .NumberingIndent !=""{_cbef .WriteString (options .NumberingIndent );};};};break ;};};};};_cbef .WriteString (_bfdfg .Text );};};return _cbef .String ();};

// SetLeft sets the left border to a specified type, color and thickness.
func (_gcaa ParagraphBorders )SetLeft (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_gcaa ._gabef .Left =_aag .NewCT_Border ();_afbdc (_gcaa ._gabef .Left ,t ,c ,thickness );};func (_bdbg *Document )InsertTableAfter (relativeTo Paragraph )Table {return _bdbg .insertTable (relativeTo ,false );
};

// SetWrapPathLineTo sets wrapPath lineTo value.
func (_eec AnchorDrawWrapOptions )SetWrapPathLineTo (coordinates []*_da .CT_Point2D ){_eec ._gde =coordinates ;};

// Numbering is the document wide numbering styles contained in numbering.xml.
type Numbering struct{_gbda *_aag .Numbering };

// RemoveEndnote removes a endnote from both the paragraph and the document
// the requested endnote must be anchored on the paragraph being referenced.
//
// After each removal, the rest of the endnote ids would be reordered.
func (_dfeaf Paragraph )RemoveEndnote (id int64 ){for _ ,_gaeg :=range _dfeaf .Runs (){if _eead ,_fafdf :=_gaeg .IsEndnote ();_eead {if _fafdf ==id {_dfeaf .RemoveRun (_gaeg );break ;};};};_dfeaf ._gbga .removeEndnote (id );};

// SetAll sets all of the borders to a given value.
func (_bgb CellBorders )SetAll (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_bgb .SetBottom (t ,c ,thickness );_bgb .SetLeft (t ,c ,thickness );_bgb .SetRight (t ,c ,thickness );_bgb .SetTop (t ,c ,thickness );_bgb .SetInsideHorizontal (t ,c ,thickness );
_bgb .SetInsideVertical (t ,c ,thickness );};

// TableConditionalFormatting controls the conditional formatting within a table
// style.
type TableConditionalFormatting struct{_gbgag *_aag .CT_TblStylePr };const (FieldCurrentPage ="\u0050\u0041\u0047\u0045";FieldNumberOfPages ="\u004e\u0055\u004d\u0050\u0041\u0047\u0045\u0053";FieldDate ="\u0044\u0041\u0054\u0045";FieldCreateDate ="\u0043\u0052\u0045\u0041\u0054\u0045\u0044\u0041\u0054\u0045";
FieldEditTime ="\u0045\u0044\u0049\u0054\u0054\u0049\u004d\u0045";FieldPrintDate ="\u0050R\u0049\u004e\u0054\u0044\u0041\u0054E";FieldSaveDate ="\u0053\u0041\u0056\u0045\u0044\u0041\u0054\u0045";FieldTIme ="\u0054\u0049\u004d\u0045";FieldTOC ="\u0054\u004f\u0043";
);

// SetCantSplit set row properties for Can't Split value.
func (_cebge RowProperties )SetCantSplit (val bool ){if !val {_cebge ._bbab .TrPrBaseChoice =nil ;}else {_cebge ._bbab .TrPrBaseChoice =[]*_aag .CT_TrPrBaseChoice {&_aag .CT_TrPrBaseChoice {CantSplit :_aag .NewCT_OnOff ()}};};};

// NewWatermarkPicture generates new WatermarkPicture.
func NewWatermarkPicture ()WatermarkPicture {_fcdc :=_ccc .NewShapetype ();_bbaae :=_bacgg ();_febff :=_edbda ();_ccfg :=_ebda ();_fcdc .EG_ShapeElements =[]*_ccc .EG_ShapeElements {{ShapeElementsChoice :&_ccc .EG_ShapeElementsChoice {Formulas :_bbaae }},{ShapeElementsChoice :&_ccc .EG_ShapeElementsChoice {Path :_febff }},{ShapeElementsChoice :&_ccc .EG_ShapeElementsChoice {Lock :_ccfg }}};
var (_edbea ="\u005f\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0037\u0035";_eagd ="2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030";_agff =float32 (75.0);_edfae ="\u006d\u0040\u0034\u00405l\u0040\u0034\u0040\u0031\u0031\u0040\u0039\u0040\u0031\u0031\u0040\u0039\u0040\u0035x\u0065";
);_fcdc .IdAttr =&_edbea ;_fcdc .CoordsizeAttr =&_eagd ;_fcdc .SptAttr =&_agff ;_fcdc .PreferrelativeAttr =_bac .ST_TrueFalseTrue ;_fcdc .PathAttr =&_edfae ;_fcdc .FilledAttr =_bac .ST_TrueFalseFalse ;_fcdc .StrokedAttr =_bac .ST_TrueFalseFalse ;_ebddb :=_ccc .NewShape ();
_ebddb .ShapeChoice =[]*_ccc .CT_ShapeChoice {{ShapeElementsChoice :&_ccc .EG_ShapeElementsChoice {Imagedata :_ggbe ()}}};var (_begbc ="\u0057\u006f\u0072\u0064\u0050\u0069\u0063\u0074\u0075\u0072e\u0057\u0061\u0074\u0065\u0072\u006d\u0061r\u006b\u0031\u0036\u0033\u0032\u0033\u0031\u0036\u0035\u0039\u0035";
_begde ="\u005f\u0078\u00300\u0030\u0030\u005f\u0073\u0032\u0030\u0035\u0031";_dbff ="#\u005f\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0037\u0035";_acdfe ="";_eefag ="\u0070os\u0069t\u0069o\u006e\u003a\u0061\u0062\u0073\u006fl\u0075\u0074\u0065\u003bm\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074\u003a\u0030\u003bma\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070\u003a\u0030\u003b\u0077\u0069\u0064\u0074\u0068\u003a\u0030\u0070\u0074;\u0068e\u0069\u0067\u0068\u0074\u003a\u0030\u0070\u0074\u003b\u007a\u002d\u0069\u006ed\u0065\u0078:\u002d\u0032\u00351\u0036\u0035\u0038\u0032\u0034\u0030\u003b\u006d\u0073o-\u0070\u006f\u0073i\u0074\u0069\u006f\u006e-\u0068\u006f\u0072\u0069\u007a\u006fn\u0074\u0061l\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003bm\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u002drela\u0074\u0069\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076\u0065\u0072t\u0069c\u0061l\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e-\u0076\u0065r\u0074\u0069c\u0061l\u002d\u0072\u0065\u006c\u0061\u0074i\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e";
);_ebddb .IdAttr =&_begbc ;_ebddb .SpidAttr =&_begde ;_ebddb .TypeAttr =&_dbff ;_ebddb .AltAttr =&_acdfe ;_ebddb .StyleAttr =&_eefag ;_ebddb .AllowincellAttr =_bac .ST_TrueFalseFalse ;_gaada :=_aag .NewCT_Picture ();_gaada .Any =[]_c .Any {_fcdc ,_ebddb };
return WatermarkPicture {_cgfedg :_gaada ,_ffefa :_ebddb ,_cdgfa :_fcdc };};

// SetAfterAuto controls if spacing after a paragraph is automatically determined.
func (_dacf ParagraphSpacing )SetAfterAuto (b bool ){if b {_dacf ._cdced .AfterAutospacingAttr =&_bac .ST_OnOff {};_dacf ._cdced .AfterAutospacingAttr .Bool =_c .Bool (true );}else {_dacf ._cdced .AfterAutospacingAttr =nil ;};};

// SaveToFile writes the document out to a file.
func (_ccbd *Document )SaveToFile (path string )error {_fbc ,_gbdgd :=_ab .Create (path );if _gbdgd !=nil {return _gbdgd ;};defer _fbc .Close ();return _ccbd .Save (_fbc );};

// AddDropdownList adds dropdown list form field to the paragraph and returns it.
func (_efcbb Paragraph )AddDropdownList (name string )FormField {_cfag :=_efcbb .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0044\u0052\u004f\u0050\u0044\u004f\u0057\u004e");_cfag ._daga .FFDataChoice [0].DdList =_aag .NewCT_FFDDList ();return _cfag ;
};func _ddda (_ggff *_aag .EG_ContentBlockContent )[]Bookmark {_feca :=[]Bookmark {};for _ ,_ceba :=range _ggff .ContentBlockContentChoice .P {for _ ,_adfd :=range _ceba .EG_PContent {for _ ,_ebbfd :=range _adfd .PContentChoice .EG_ContentRunContent {for _ ,_ggaa :=range _ebbfd .ContentRunContentChoice .EG_RunLevelElts {for _ ,_ebcb :=range _ggaa .RunLevelEltsChoice .EG_RangeMarkupElements {if _ebcb .RangeMarkupElementsChoice .BookmarkStart !=nil {_feca =append (_feca ,Bookmark {_ebcb .RangeMarkupElementsChoice .BookmarkStart });
};};};};};};for _ ,_bcfd :=range _ggff .ContentBlockContentChoice .EG_RunLevelElts {for _ ,_ccac :=range _bcfd .RunLevelEltsChoice .EG_RangeMarkupElements {if _ccac .RangeMarkupElementsChoice .BookmarkStart !=nil {_feca =append (_feca ,Bookmark {_ccac .RangeMarkupElementsChoice .BookmarkStart });
};};};for _ ,_fdba :=range _ggff .ContentBlockContentChoice .Tbl {for _ ,_ebdbe :=range _fdba .EG_ContentRowContent {for _ ,_ebba :=range _ebdbe .ContentRowContentChoice .Tr {for _ ,_aegeg :=range _ebba .EG_ContentCellContent {for _ ,_dcef :=range _aegeg .ContentCellContentChoice .Tc {for _ ,_ddgd :=range _dcef .EG_BlockLevelElts {for _ ,_ecd :=range _ddgd .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_cdce :=range _ddda (_ecd ){_feca =append (_feca ,_cdce );
};};};};};};};};return _feca ;};

// SetWidth sets the table with to a specified width.
func (_gbadb TableProperties )SetWidth (d _bf .Distance ){_gbadb ._abgbf .TblW =_aag .NewCT_TblWidth ();_gbadb ._abgbf .TblW .TypeAttr =_aag .ST_TblWidthDxa ;_gbadb ._abgbf .TblW .WAttr =&_aag .ST_MeasurementOrPercent {};_gbadb ._abgbf .TblW .WAttr .ST_DecimalNumberOrPercent =&_aag .ST_DecimalNumberOrPercent {};
_gbadb ._abgbf .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (d /_bf .Twips ));};

// Name returns the name of the style if set.
func (_deag Style )Name ()string {if _deag ._bcedg .Name ==nil {return "";};return _deag ._bcedg .Name .ValAttr ;};func (_decf *Document )GetFontBytesByRelId (relID string )([]byte ,error ){if relID ==""{return nil ,nil ;};_cbcbe :=_decf ._bcaf .GetTargetByRelId (relID );
_cbcbe ="\u0077\u006f\u0072d\u002f"+_cbcbe ;for _ ,_aggc :=range _decf .ExtraFiles {if _aggc .ZipPath ==_cbcbe {_faec ,_fbbac :=_ab .ReadFile (_aggc .StoragePath );if _fbbac !=nil {return nil ,_db .Errorf ("e\u0072r\u006f\u0072\u0020\u0072\u0065\u0061\u0064\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",_aggc .StoragePath ,_fbbac );
};return _faec ,nil ;};};return nil ,_db .Errorf ("\u0066\u006fn\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u0074\u006f\u0072\u0061\u0067\u0065: \u0025\u0073",_cbcbe );};

// HasEndnotes returns a bool based on the presence or abscence of endnotes within
// the document.
func (_cgef *Document )HasEndnotes ()bool {return _cgef ._edga !=nil };

// ClearColor clears the text color.
func (_eeedb RunProperties )ClearColor (){_eeedb ._gbeff .Color =nil };

// SetTblHeader set row properties for repeat table row on every new page value.
func (_ggefd RowProperties )SetTblHeader (val bool ){if !val {_ggefd ._bbab .TrPrBaseChoice =nil ;}else {_ggefd ._bbab .TrPrBaseChoice =[]*_aag .CT_TrPrBaseChoice {&_aag .CT_TrPrBaseChoice {TblHeader :_aag .NewCT_OnOff ()}};};};func _edbda ()*_ccc .Path {_fbagg :=_ccc .NewPath ();
_fbagg .ExtrusionokAttr =_bac .ST_TrueFalseTrue ;_fbagg .GradientshapeokAttr =_bac .ST_TrueFalseTrue ;_fbagg .ConnecttypeAttr =_ccc .OfcST_ConnectTypeRect ;return _fbagg ;};

// GetStyle returns string style of the text in watermark and format it to TextpathStyle.
func (_gbdca *WatermarkText )GetStyle ()_gg .TextpathStyle {_afge :=_gbdca .getShape ();if _gbdca ._eafacd !=nil {_egebc :=_gbdca ._eafacd .ShapeChoice ;for _ ,_ggegf :=range _egebc {if _ggegf .ShapeElementsChoice .Textpath !=nil {return _gg .NewTextpathStyle (*_ggegf .ShapeElementsChoice .Textpath .StyleAttr );
};};}else {_dcaad :=_gbdca .findNode (_afge ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _ ,_abdad :=range _dcaad .Attrs {if _abdad .Name .Local =="\u0073\u0074\u0079l\u0065"{return _gg .NewTextpathStyle (_abdad .Value );};};};return _gg .NewTextpathStyle ("");
};

// X returns the inner wrapped XML type.
func (_cgce Endnote )X ()*_aag .CT_FtnEdn {return _cgce ._bfga };

// SetRight sets the right border to a specified type, color and thickness.
func (_gffe CellBorders )SetRight (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_gffe ._cde .Right =_aag .NewCT_Border ();_ebdgf (_gffe ._cde .Right ,t ,c ,thickness );};func (_dedfa *WatermarkPicture )getShape ()*_c .XSDAny {return _dedfa .getInnerElement ("\u0073\u0068\u0061p\u0065");
};

// Bookmark is a bookmarked location within a document that can be referenced
// with a hyperlink.
type Bookmark struct{_ccg *_aag .CT_Bookmark };

// NewSettings constructs a new empty Settings
func NewSettings ()Settings {_cfee :=_aag .NewSettings ();_cfee .Compat =_aag .NewCT_Compat ();_bdbag :=_aag .NewCT_CompatSetting ();_bdbag .NameAttr =_c .String ("\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074y\u004d\u006f\u0064\u0065");
_bdbag .UriAttr =_c .String ("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006fff\u0069\u0063\u0065/\u0077o\u0072\u0064");_bdbag .ValAttr =_c .String ("\u0031\u0035");
_cfee .Compat .CompatSetting =append (_cfee .Compat .CompatSetting ,_bdbag );return Settings {_cfee };};

// AddTextInput adds text input form field to the paragraph and returns it.
func (_cfaee Paragraph )AddTextInput (name string )FormField {_gbcgg :=_cfaee .addFldCharsForField (name ,"\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054");_gbcgg ._daga .FFDataChoice [0].TextInput =_aag .NewCT_FFTextInput ();return _gbcgg ;};

// Footnote returns the footnote based on the ID; this can be used nicely with
// the run.IsFootnote() functionality.
func (_dafed *Document )Footnote (id int64 )Footnote {for _ ,_abc :=range _dafed .Footnotes (){if _abc .id ()==id {return _abc ;};};return Footnote {};};

// AddEndnote will create a new endnote and attach it to the Paragraph in the
// location at the end of the previous run (endnotes create their own run within
// the paragraph. The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the endnote later.
func (_faafc Paragraph )AddEndnote (text string )Endnote {var _bbeec int64 ;if _faafc ._gbga .HasEndnotes (){for _ ,_gdde :=range _faafc ._gbga .Endnotes (){if _gdde .id ()> _bbeec {_bbeec =_gdde .id ();};};_bbeec ++;}else {_faafc ._gbga .addEndnotes ();
_bbeec =1;};_cfcg :=_aag .NewCT_FtnEdn ();_dggb :=_aag .NewCT_FtnEdnRef ();_dggb .IdAttr =_bbeec ;_faafc ._gbga ._edga .CT_Endnotes .Endnote =append (_faafc ._gbga ._edga .CT_Endnotes .Endnote ,_cfcg );_efcg :=_faafc .AddRun ();_gbfgg :=_efcg .Properties ();
_gbfgg .SetStyle (_gaf );_efcg ._dcgfd .EG_RunInnerContent =[]*_aag .EG_RunInnerContent {_aag .NewEG_RunInnerContent ()};_efcg ._dcgfd .EG_RunInnerContent [0].RunInnerContentChoice .EndnoteReference =_dggb ;_bccgb :=Endnote {_faafc ._gbga ,_cfcg };_bccgb ._bfga .IdAttr =_bbeec ;
_bccgb ._bfga .EG_BlockLevelElts =[]*_aag .EG_BlockLevelElts {_aag .NewEG_BlockLevelElts ()};_fdcfe :=_bccgb .AddParagraph ();_fdcfe .Properties ().SetStyle (EndnoteTextStyleId );_fdcfe ._dbgba .PPr .RPr =_aag .NewCT_ParaRPr ();_cfefb :=_fdcfe .AddRun ();
_afeg :=_cfefb .Properties ();_afeg .SetStyle (_gaf );_cfefb .AddEndnoteReference ();_adff :=_fdcfe .AddRun ();_adff .AddText ("\u0020");_adff =_fdcfe .AddRun ();_adff .AddText (text );return _bccgb ;};

// AddFootnoteReference adds a footnote reference to a run.
func (_gfba Run )AddFootnoteReference (){_bcce :=_gfba .newIC ();_bcce .RunInnerContentChoice .FootnoteRef =&_aag .CT_Empty {};};

// DoubleStrike returns true if paragraph is double striked.
func (_fgab ParagraphProperties )DoubleStrike ()bool {return _faabg (_fgab ._ggac .RPr .Dstrike )};

// CloseComment will close the comment.
func (_cfbb Paragraph )CloseComment (commentId int64 ){_cfbb .addEndComment (commentId );_eedd :=_cfbb .AddRun ();_eedd .AddCommentReference (commentId );_afda :=_eedd .Properties ();_afda .SetStyle (_gffg );};

// Paragraphs returns the paragraphs within a structured document tag.
func (_bgcdc StructuredDocumentTag )Paragraphs ()[]Paragraph {if _bgcdc ._agacg .SdtContent ==nil {return nil ;};_cbade :=[]Paragraph {};for _ ,_gdgfg :=range _bgcdc ._agacg .SdtContent .EG_ContentBlockContent {for _ ,_cfbef :=range _gdgfg .ContentBlockContentChoice .P {_cbade =append (_cbade ,Paragraph {_bgcdc ._fcbce ,_cfbef });
};};return _cbade ;};

// SetAfter sets the spacing that comes after the paragraph.
func (_gbacd ParagraphSpacing )SetAfter (after _bf .Distance ){_gbacd ._cdced .AfterAttr =&_bac .ST_TwipsMeasure {};_gbacd ._cdced .AfterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (after /_bf .Twips ));};func (_efbgb Styles )initializeStyleDefaults (){_baacg :=_efbgb .AddStyle ("\u004e\u006f\u0072\u006d\u0061\u006c",_aag .ST_StyleTypeParagraph ,true );
_baacg .SetName ("\u004e\u006f\u0072\u006d\u0061\u006c");_baacg .SetPrimaryStyle (true );_fdgad :=_efbgb .AddStyle ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074",_aag .ST_StyleTypeCharacter ,true );_fdgad .SetName ("\u0044\u0065\u0066\u0061ul\u0074\u0020\u0050\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0020\u0046\u006fn\u0074");
_fdgad .SetUISortOrder (1);_fdgad .SetSemiHidden (true );_fdgad .SetUnhideWhenUsed (true );_gaeeg :=_efbgb .AddStyle ("\u0054i\u0074\u006c\u0065\u0043\u0068\u0061r",_aag .ST_StyleTypeCharacter ,false );_gaeeg .SetName ("\u0054\u0069\u0074\u006c\u0065\u0020\u0043\u0068\u0061\u0072");
_gaeeg .SetBasedOn (_fdgad .StyleID ());_gaeeg .SetLinkedStyle ("\u0054\u0069\u0074l\u0065");_gaeeg .SetUISortOrder (10);_gaeeg .RunProperties ().Fonts ().SetASCIITheme (_aag .ST_ThemeMajorAscii );_gaeeg .RunProperties ().Fonts ().SetEastAsiaTheme (_aag .ST_ThemeMajorEastAsia );
_gaeeg .RunProperties ().Fonts ().SetHANSITheme (_aag .ST_ThemeMajorHAnsi );_gaeeg .RunProperties ().Fonts ().SetCSTheme (_aag .ST_ThemeMajorBidi );_gaeeg .RunProperties ().SetSize (28*_bf .Point );_gaeeg .RunProperties ().SetKerning (14*_bf .Point );_gaeeg .RunProperties ().SetCharacterSpacing (-10*_bf .Twips );
_ggfc :=_efbgb .AddStyle ("\u0054\u0069\u0074l\u0065",_aag .ST_StyleTypeParagraph ,false );_ggfc .SetName ("\u0054\u0069\u0074l\u0065");_ggfc .SetBasedOn (_baacg .StyleID ());_ggfc .SetNextStyle (_baacg .StyleID ());_ggfc .SetLinkedStyle (_gaeeg .StyleID ());
_ggfc .SetUISortOrder (10);_ggfc .SetPrimaryStyle (true );_ggfc .ParagraphProperties ().SetContextualSpacing (true );_ggfc .RunProperties ().Fonts ().SetASCIITheme (_aag .ST_ThemeMajorAscii );_ggfc .RunProperties ().Fonts ().SetEastAsiaTheme (_aag .ST_ThemeMajorEastAsia );
_ggfc .RunProperties ().Fonts ().SetHANSITheme (_aag .ST_ThemeMajorHAnsi );_ggfc .RunProperties ().Fonts ().SetCSTheme (_aag .ST_ThemeMajorBidi );_ggfc .RunProperties ().SetSize (28*_bf .Point );_ggfc .RunProperties ().SetKerning (14*_bf .Point );_ggfc .RunProperties ().SetCharacterSpacing (-10*_bf .Twips );
_ddcee :=_efbgb .AddStyle ("T\u0061\u0062\u006c\u0065\u004e\u006f\u0072\u006d\u0061\u006c",_aag .ST_StyleTypeTable ,false );_ddcee .SetName ("\u004e\u006f\u0072m\u0061\u006c\u0020\u0054\u0061\u0062\u006c\u0065");_ddcee .SetUISortOrder (99);_ddcee .SetSemiHidden (true );
_ddcee .SetUnhideWhenUsed (true );_ddcee .X ().TblPr =_aag .NewCT_TblPrBase ();_bcabb :=NewTableWidth ();_ddcee .X ().TblPr .TblInd =_bcabb .X ();_bcabb .SetValue (0*_bf .Dxa );_ddcee .X ().TblPr .TblCellMar =_aag .NewCT_TblCellMar ();_bcabb =NewTableWidth ();
_ddcee .X ().TblPr .TblCellMar .Top =_bcabb .X ();_bcabb .SetValue (0*_bf .Dxa );_bcabb =NewTableWidth ();_ddcee .X ().TblPr .TblCellMar .Bottom =_bcabb .X ();_bcabb .SetValue (0*_bf .Dxa );_bcabb =NewTableWidth ();_ddcee .X ().TblPr .TblCellMar .Left =_bcabb .X ();
_bcabb .SetValue (108*_bf .Dxa );_bcabb =NewTableWidth ();_ddcee .X ().TblPr .TblCellMar .Right =_bcabb .X ();_bcabb .SetValue (108*_bf .Dxa );_eaead :=_efbgb .AddStyle ("\u004e\u006f\u004c\u0069\u0073\u0074",_aag .ST_StyleTypeNumbering ,false );_eaead .SetName ("\u004eo\u0020\u004c\u0069\u0073\u0074");
_eaead .SetUISortOrder (1);_eaead .SetSemiHidden (true );_eaead .SetUnhideWhenUsed (true );_ddgda :=[]_bf .Distance {16,13,12,11,11,11,11,11,11};_aaeg :=[]_bf .Distance {240,40,40,40,40,40,40,40,40};for _ebga :=0;_ebga < 9;_ebga ++{_bgeg :=_db .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",_ebga +1);
_acdg :=_efbgb .AddStyle (_bgeg +"\u0043\u0068\u0061\u0072",_aag .ST_StyleTypeCharacter ,false );_acdg .SetName (_db .Sprintf ("\u0048e\u0061d\u0069\u006e\u0067\u0020\u0025\u0064\u0020\u0043\u0068\u0061\u0072",_ebga +1));_acdg .SetBasedOn (_fdgad .StyleID ());
_acdg .SetLinkedStyle (_bgeg );_acdg .SetUISortOrder (9+_ebga );_acdg .RunProperties ().SetSize (_ddgda [_ebga ]*_bf .Point );_eddef :=_efbgb .AddStyle (_bgeg ,_aag .ST_StyleTypeParagraph ,false );_eddef .SetName (_db .Sprintf ("\u0068\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0025\u0064",_ebga +1));
_eddef .SetNextStyle (_baacg .StyleID ());_eddef .SetLinkedStyle (_eddef .StyleID ());_eddef .SetUISortOrder (9+_ebga );_eddef .SetPrimaryStyle (true );_eddef .ParagraphProperties ().SetKeepNext (true );_eddef .ParagraphProperties ().SetSpacing (_aaeg [_ebga ]*_bf .Twips ,0);
_eddef .ParagraphProperties ().SetOutlineLevel (_ebga );_eddef .RunProperties ().SetSize (_ddgda [_ebga ]*_bf .Point );};};

// X returns the inner wrapped XML type.
func (_aagb Header )X ()*_aag .Hdr {return _aagb ._dcaf };

// SetName marks sets a name attribute for a FormField.
func (_bdfce FormField )SetName (name string ){_ecga :=_aag .NewCT_FFName ();_ecga .ValAttr =&name ;_bdfce ._daga .FFDataChoice =[]*_aag .CT_FFDataChoice {{Name :_ecga }};};

// SetUpdateFieldsOnOpen controls if fields are recalculated upon opening the
// document. This is useful for things like a table of contents as the library
// only adds the field code and relies on Word/LibreOffice to actually compute
// the content.
func (_ccad Settings )SetUpdateFieldsOnOpen (b bool ){if !b {_ccad ._cecfe .UpdateFields =nil ;}else {_ccad ._cecfe .UpdateFields =_aag .NewCT_OnOff ();};};

// IsEndnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_gdbd Run )IsEndnote ()(bool ,int64 ){if _gdbd ._dcgfd .EG_RunInnerContent !=nil {if _gdbd ._dcgfd .EG_RunInnerContent [0].RunInnerContentChoice .EndnoteReference !=nil {return true ,_gdbd ._dcgfd .EG_RunInnerContent [0].RunInnerContentChoice .EndnoteReference .IdAttr ;
};};return false ,0;};

// SetUnderline controls underline for a run style.
func (_bcdcg RunProperties )SetUnderline (style _aag .ST_Underline ,c _ff .Color ){if style ==_aag .ST_UnderlineUnset {_bcdcg ._gbeff .U =nil ;}else {_bcdcg ._gbeff .U =_aag .NewCT_Underline ();_bcdcg ._gbeff .U .ColorAttr =&_aag .ST_HexColor {};_bcdcg ._gbeff .U .ColorAttr .ST_HexColorRGB =c .AsRGBString ();
_bcdcg ._gbeff .U .ValAttr =style ;};};

// SetEmboss sets the run to embossed text.
func (_agadd RunProperties )SetEmboss (b bool ){if !b {_agadd ._gbeff .Emboss =nil ;}else {_agadd ._gbeff .Emboss =_aag .NewCT_OnOff ();};};func (_ffa *chart )Target ()string {return _ffa ._ddc };

// Comments get list of comments in the document.
func (_gegb *Document )Comments ()[]Comment {_dbegc :=[]Comment {};for _ ,_afgc :=range _gegb ._abb .Comment {_dbegc =append (_dbegc ,Comment {_gegb ,_afgc });};return _dbegc ;};

// GetTargetByRelId returns a target path with the associated relation ID in the
// document.
func (_ggef *Document )GetTargetByRelId (idAttr string )string {return _ggef ._eeb .GetTargetByRelId (idAttr );};

// ParagraphStyles returns only the paragraph styles.
func (_bbdfd Styles )ParagraphStyles ()[]Style {_cgbed :=[]Style {};for _ ,_gdda :=range _bbdfd ._gcdgc .Style {if _gdda .TypeAttr !=_aag .ST_StyleTypeParagraph {continue ;};_cgbed =append (_cgbed ,Style {_gdda });};return _cgbed ;};

// SetName sets the name of the bookmark. This is the name that is used to
// reference the bookmark from hyperlinks.
func (_gbg Bookmark )SetName (name string ){_gbg ._ccg .NameAttr =name };

// Endnote returns the endnote based on the ID; this can be used nicely with
// the run.IsEndnote() functionality.
func (_cggf *Document )Endnote (id int64 )Endnote {for _ ,_gfbd :=range _cggf .Endnotes (){if _gfbd .id ()==id {return _gfbd ;};};return Endnote {};};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_faf CellBorders )SetInsideVertical (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_faf ._cde .InsideV =_aag .NewCT_Border ();_ebdgf (_faf ._cde .InsideV ,t ,c ,thickness );};

// SetTableIndent sets the Table Indent from the Leading Margin
func (_ecffg TableStyleProperties )SetTableIndent (ind _bf .Distance ){_ecffg ._bacac .TblInd =_aag .NewCT_TblWidth ();_ecffg ._bacac .TblInd .TypeAttr =_aag .ST_TblWidthDxa ;_ecffg ._bacac .TblInd .WAttr =&_aag .ST_MeasurementOrPercent {};_ecffg ._bacac .TblInd .WAttr .ST_DecimalNumberOrPercent =&_aag .ST_DecimalNumberOrPercent {};
_ecffg ._bacac .TblInd .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (ind /_bf .Dxa ));};

// GetChartSpaceByRelId returns a *crt.ChartSpace with the associated relation ID in the
// document.
func (_aabg *Document )GetChartSpaceByRelId (relId string )*_gea .ChartSpace {_cbbc :=_aabg ._eeb .GetTargetByRelId (relId );for _ ,_faag :=range _aabg ._cadge {if _cbbc ==_faag .Target (){return _faag ._gfb ;};};return nil ;};

// AddText adds text to a run.
func (_aaeff Run )AddText (s string ){_ecbca :=_aag .NewEG_RunInnerContent ();_aaeff ._dcgfd .EG_RunInnerContent =append (_aaeff ._dcgfd .EG_RunInnerContent ,_ecbca );_ecbca .RunInnerContentChoice .T =_aag .NewCT_Text ();if _c .NeedsSpacePreserve (s ){_dggc :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";
_ecbca .RunInnerContentChoice .T .SpaceAttr =&_dggc ;};_ecbca .RunInnerContentChoice .T .Content =s ;};

// IsChecked returns true if a FormFieldTypeCheckBox is checked.
func (_cccb FormField )IsChecked ()bool {if len (_cccb ._daga .FFDataChoice )==0{return false ;};for _ ,_dgbf :=range _cccb ._daga .FFDataChoice {if _dgbf .CheckBox !=nil {if _dgbf .CheckBox .Checked !=nil {return true ;};};};return false ;};func (_bdcbd *Document )validateTableCells ()error {for _ ,_eaga :=range _bdcbd ._ffb .Body .EG_BlockLevelElts {for _ ,_gfbb :=range _eaga .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_deeb :=range _gfbb .ContentBlockContentChoice .Tbl {for _ ,_abfc :=range _deeb .EG_ContentRowContent {for _ ,_daad :=range _abfc .ContentRowContentChoice .Tr {_ggda :=false ;
for _ ,_fceg :=range _daad .EG_ContentCellContent {_fgee :=false ;for _ ,_fgeg :=range _fceg .ContentCellContentChoice .Tc {_ggda =true ;for _ ,_faea :=range _fgeg .EG_BlockLevelElts {for _ ,_gegfc :=range _faea .BlockLevelEltsChoice .EG_ContentBlockContent {if len (_gegfc .ContentBlockContentChoice .P )> 0{_fgee =true ;
break ;};};};};if !_fgee {return _cg .New ("t\u0061\u0062\u006c\u0065\u0020\u0063e\u006c\u006c\u0020\u006d\u0075\u0073t\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0061\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061p\u0068");};};if !_ggda {return _cg .New ("\u0074\u0061b\u006c\u0065\u0020\u0072\u006f\u0077\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020ce\u006c\u006c");
};};};};};};return nil ;};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_bfab TableStyleProperties )SetCellSpacingPercent (pct float64 ){_bfab ._bacac .TblCellSpacing =_aag .NewCT_TblWidth ();_bfab ._bacac .TblCellSpacing .TypeAttr =_aag .ST_TblWidthPct ;_bfab ._bacac .TblCellSpacing .WAttr =&_aag .ST_MeasurementOrPercent {};
_bfab ._bacac .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_aag .ST_DecimalNumberOrPercent {};_bfab ._bacac .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (pct *50));};func (_afgd *WatermarkText )getShapeType ()*_c .XSDAny {return _afgd .getInnerElement ("\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e");
};

// SetFirstColumn controls the conditional formatting for the first column in a table.
func (_gdadc TableLook )SetFirstColumn (on bool ){if !on {_gdadc ._cagee .FirstColumnAttr =&_bac .ST_OnOff {};_gdadc ._cagee .FirstColumnAttr .ST_OnOff1 =_bac .ST_OnOff1Off ;}else {_gdadc ._cagee .FirstColumnAttr =&_bac .ST_OnOff {};_gdadc ._cagee .FirstColumnAttr .ST_OnOff1 =_bac .ST_OnOff1On ;
};};

// Copy returns a copy of the run.
func (_dgdcg Run )Copy ()Run {_bdfe :=_aag .NewCT_R ();_dacag :=*_dgdcg ._dcgfd .RPr ;_bdfe .RPr =&_dacag ;for _ ,_bfagc :=range _dgdcg ._dcgfd .EG_RunInnerContent {_aadf :=_aag .NewEG_RunInnerContent ();if _bfagc .RunInnerContentChoice .T !=nil {_aadf .RunInnerContentChoice .T =&_aag .CT_Text {Content :_bfagc .RunInnerContentChoice .T .Content ,SpaceAttr :_bfagc .RunInnerContentChoice .T .SpaceAttr };
};_bdfe .EG_RunInnerContent =append (_bdfe .EG_RunInnerContent ,_aadf );};return Run {_edce :_dgdcg ._edce ,_dcgfd :_bdfe };};func (_ccd *Document )removeEndnote (_ggde int64 ){_bebf :=_ccd ._edga ;var _cgda int ;for _ddaf ,_cafbg :=range _bebf .CT_Endnotes .Endnote {if _cafbg .IdAttr ==_ggde {_cgda =_ddaf ;
break ;};};_bebf .CT_Endnotes .Endnote [_cgda ]=nil ;_bebf .CT_Endnotes .Endnote [_cgda ]=_bebf .CT_Endnotes .Endnote [len (_bebf .CT_Endnotes .Endnote )-1];_bebf .CT_Endnotes .Endnote =_bebf .CT_Endnotes .Endnote [:len (_bebf .CT_Endnotes .Endnote )-1];
_ccd .reorderEndnote ();_ccd .syncEndnoteSettings ();};func (_cgaa *Document )syncFootnoteSettings (){_cgf :=[]int64 {};_aacc :=_cgaa .Footnotes ();for _ ,_cefc :=range _aacc {if _cefc .X ().TypeAttr !=_aag .ST_FtnEdnUnset &&_cefc .X ().TypeAttr !=_aag .ST_FtnEdnNormal {_cgf =append (_cgf ,_cefc .X ().IdAttr );
};};_gcae :=_cgaa .Settings .X ().CT_Settings .FootnotePr ;if _gcae ==nil {_gcae =_aag .NewCT_FtnDocProps ();};if len (_cgf )==0{_gcae .Footnote =nil ;return ;};_gcae .Footnote =[]*_aag .CT_FtnEdnSepRef {};for _ ,_afdg :=range _cgf {_ebdb :=_aag .NewCT_FtnEdnSepRef ();
_ebdb .IdAttr =_afdg ;_gcae .Footnote =append (_gcae .Footnote ,_ebdb );};};func (_adeae Paragraph )insertRun (_aegd Run ,_ageab bool )Run {for _ ,_bdgea :=range _adeae ._dbgba .EG_PContent {for _bcabc ,_dfafa :=range _bdgea .PContentChoice .EG_ContentRunContent {if _dfafa .ContentRunContentChoice .R ==_aegd .X (){_gegga :=_aag .NewCT_R ();
_bdgea .PContentChoice .EG_ContentRunContent =append (_bdgea .PContentChoice .EG_ContentRunContent ,nil );if _ageab {copy (_bdgea .PContentChoice .EG_ContentRunContent [_bcabc +1:],_bdgea .PContentChoice .EG_ContentRunContent [_bcabc :]);_bdgea .PContentChoice .EG_ContentRunContent [_bcabc ]=_aag .NewEG_ContentRunContent ();
_bdgea .PContentChoice .EG_ContentRunContent [_bcabc ].ContentRunContentChoice .R =_gegga ;}else {copy (_bdgea .PContentChoice .EG_ContentRunContent [_bcabc +2:],_bdgea .PContentChoice .EG_ContentRunContent [_bcabc +1:]);_bdgea .PContentChoice .EG_ContentRunContent [_bcabc +1]=_aag .NewEG_ContentRunContent ();
_bdgea .PContentChoice .EG_ContentRunContent [_bcabc +1].ContentRunContentChoice .R =_gegga ;};return Run {_adeae ._gbga ,_gegga };};if _dfafa .ContentRunContentChoice .Sdt !=nil &&_dfafa .ContentRunContentChoice .Sdt .SdtContent !=nil {for _ ,_dfff :=range _dfafa .ContentRunContentChoice .Sdt .SdtContent .EG_PContent {for _ ,_eeafc :=range _dfff .PContentChoice .EG_ContentRunContent {if _eeafc .ContentRunContentChoice .R ==_aegd .X (){_dedc :=_aag .NewCT_R ();
_dfff .PContentChoice .EG_ContentRunContent =append (_dfff .PContentChoice .EG_ContentRunContent ,nil );if _ageab {copy (_dfff .PContentChoice .EG_ContentRunContent [_bcabc +1:],_dfff .PContentChoice .EG_ContentRunContent [_bcabc :]);_dfff .PContentChoice .EG_ContentRunContent [_bcabc ]=_aag .NewEG_ContentRunContent ();
_dfff .PContentChoice .EG_ContentRunContent [_bcabc ].ContentRunContentChoice .R =_dedc ;}else {copy (_dfff .PContentChoice .EG_ContentRunContent [_bcabc +2:],_dfff .PContentChoice .EG_ContentRunContent [_bcabc +1:]);_dfff .PContentChoice .EG_ContentRunContent [_bcabc +1]=_aag .NewEG_ContentRunContent ();
_dfff .PContentChoice .EG_ContentRunContent [_bcabc +1].ContentRunContentChoice .R =_dedc ;};return Run {_adeae ._gbga ,_dedc };};};};};};};return _adeae .AddRun ();};

// AddParagraph adds a paragraph to the table cell.
func (_ged Cell )AddParagraph ()Paragraph {_feef :=_aag .NewEG_BlockLevelElts ();_ged ._cbd .EG_BlockLevelElts =append (_ged ._cbd .EG_BlockLevelElts ,_feef );_dgg :=_aag .NewEG_ContentBlockContent ();_feef .BlockLevelEltsChoice .EG_ContentBlockContent =append (_feef .BlockLevelEltsChoice .EG_ContentBlockContent ,_dgg );
_gcf :=_aag .NewCT_P ();_dgg .ContentBlockContentChoice .P =append (_dgg .ContentBlockContentChoice .P ,_gcf );return Paragraph {_ged ._eeca ,_gcf };};

// SetKeepNext controls if the paragraph is kept with the next paragraph.
func (_gggc ParagraphStyleProperties )SetKeepNext (b bool ){if !b {_gggc ._aefec .KeepNext =nil ;}else {_gggc ._aefec .KeepNext =_aag .NewCT_OnOff ();};};

// Pict returns the pict object.
func (_afba *WatermarkPicture )Pict ()*_aag .CT_Picture {return _afba ._cgfedg };

// Styles returns all styles.
func (_ddacb Styles )Styles ()[]Style {_ggcfbe :=[]Style {};for _ ,_acccf :=range _ddacb ._gcdgc .Style {_ggcfbe =append (_ggcfbe ,Style {_acccf });};return _ggcfbe ;};

// Close closes the document, removing any temporary files that might have been
// created when opening a document.
func (_gecg *Document )Close ()error {if _gecg .TmpPath !=""{return _bg .RemoveAll (_gecg .TmpPath );};return nil ;};

// InsertParagraphAfter adds a new empty paragraph after the relativeTo
// paragraph.
func (_cebdf *Document )InsertParagraphAfter (relativeTo Paragraph )Paragraph {return _cebdf .insertParagraph (relativeTo ,false );};func (_acaab Paragraph )addEndFldChar ()*_aag .CT_FldChar {_cbgad :=_acaab .addFldChar ();_cbgad .FldCharTypeAttr =_aag .ST_FldCharTypeEnd ;
return _cbgad ;};

// UnderlineColor returns the hex color value of paragraph underline.
func (_edca ParagraphProperties )UnderlineColor ()string {if _cbcbef :=_edca ._ggac .RPr .U ;_cbcbef !=nil {_ddfbe :=_cbcbef .ColorAttr ;if _ddfbe !=nil &&_ddfbe .ST_HexColorRGB !=nil {return *_ddfbe .ST_HexColorRGB ;};};return "";};

// Copy makes a deep copy of the document by saving and reading it back.
// It can be useful to avoid sharing common data between two documents.
func (_dbcd *Document )Copy ()(*Document ,error ){_aedf :=_ec .NewBuffer ([]byte {});_gabg :=_dbcd .save (_aedf ,_dbcd ._fegf );if _gabg !=nil {return nil ,_gabg ;};_fbce :=_aedf .Bytes ();_bgfff :=_ec .NewReader (_fbce );return _bcef (_bgfff ,int64 (_bgfff .Len ()),_dbcd ._fegf );
};

// RunProperties returns the run properties controlling text formatting within the table.
func (_dedg TableConditionalFormatting )RunProperties ()RunProperties {if _dedg ._gbgag .RPr ==nil {_dedg ._gbgag .RPr =_aag .NewCT_RPr ();};return RunProperties {_dedg ._gbgag .RPr };};

// SetTextWrapBehindText sets the text wrap to behind text.
func (_deg AnchoredDrawing )SetTextWrapBehindText (){_deg ._ae .WrapTypeChoice =&_aag .WdEG_WrapTypeChoice {};_deg ._ae .WrapTypeChoice .WrapNone =_aag .NewWdCT_WrapNone ();_deg ._ae .BehindDocAttr =true ;_deg ._ae .LayoutInCellAttr =true ;_deg ._ae .AllowOverlapAttr =true ;
};func (_cgdbcf Styles )initializeDocDefaults (){_cgdbcf ._gcdgc .DocDefaults =_aag .NewCT_DocDefaults ();_cgdbcf ._gcdgc .DocDefaults .RPrDefault =_aag .NewCT_RPrDefault ();_cgdbcf ._gcdgc .DocDefaults .RPrDefault .RPr =_aag .NewCT_RPr ();_ddea :=RunProperties {_cgdbcf ._gcdgc .DocDefaults .RPrDefault .RPr };
_ddea .SetSize (12*_bf .Point );_ddea .Fonts ().SetASCIITheme (_aag .ST_ThemeMajorAscii );_ddea .Fonts ().SetEastAsiaTheme (_aag .ST_ThemeMajorEastAsia );_ddea .Fonts ().SetHANSITheme (_aag .ST_ThemeMajorHAnsi );_ddea .Fonts ().SetCSTheme (_aag .ST_ThemeMajorBidi );
_ddea .X ().Lang =_aag .NewCT_Language ();_ddea .X ().Lang .ValAttr =_c .String ("\u0065\u006e\u002dU\u0053");_ddea .X ().Lang .EastAsiaAttr =_c .String ("\u0065\u006e\u002dU\u0053");_ddea .X ().Lang .BidiAttr =_c .String ("\u0061\u0072\u002dS\u0041");
_cgdbcf ._gcdgc .DocDefaults .PPrDefault =_aag .NewCT_PPrDefault ();};func _efeb (_ddad []*_aag .EG_ContentBlockContent ,_cdegg *TableInfo )[]TextItem {_fdfc :=[]TextItem {};for _ ,_dcfeg :=range _ddad {if _gfec :=_dcfeg .ContentBlockContentChoice .Sdt ;
_gfec !=nil {if _acdfa :=_gfec .SdtContent ;_acdfa !=nil {for _ ,_fdbaf :=range _acdfa .EG_ContentBlockContent {_fdfc =append (_fdfc ,_bgcg (_fdbaf .ContentBlockContentChoice .P ,_cdegg ,nil )...);};};};_fdfc =append (_fdfc ,_bgcg (_dcfeg .ContentBlockContentChoice .P ,_cdegg ,nil )...);
for _ ,_cbgb :=range _dcfeg .ContentBlockContentChoice .Tbl {for _gbdga ,_cdegb :=range _cbgb .EG_ContentRowContent {for _ ,_gbgf :=range _cdegb .ContentRowContentChoice .Tr {for _egfc ,_gfcb :=range _gbgf .EG_ContentCellContent {for _ ,_bdcg :=range _gfcb .ContentCellContentChoice .Tc {_fded :=&TableInfo {Table :_cbgb ,Row :_gbgf ,Cell :_bdcg ,RowIndex :_gbdga ,ColIndex :_egfc };
for _ ,_fdeb :=range _bdcg .EG_BlockLevelElts {_fdfc =append (_fdfc ,_efeb (_fdeb .BlockLevelEltsChoice .EG_ContentBlockContent ,_fded )...);};};};};};};};return _fdfc ;};

// X returns the inner wrapped XML type.
func (_edfef TableConditionalFormatting )X ()*_aag .CT_TblStylePr {return _edfef ._gbgag };

// X returns the inner wrapped XML type.
func (_ddgb Fonts )X ()*_aag .CT_Fonts {return _ddgb ._ecdeb };

// GetImageObjByRelId returns a common.Image with the associated relation ID in the
// document.
func (_gcfa *Document )GetImageObjByRelId (relId string )(_cd .Image ,error ){_bcfb :=_gcfa ._eeb .GetTargetByRelIdAndType (relId ,_c .ImageType );if _bcfb ==""{for _ ,_bgbe :=range _gcfa ._eea {if _bcfb !=""{break ;};_bcfb =_bgbe .GetTargetByRelIdAndType (relId ,_c .ImageType );
};};if _bcfb ==""{for _ ,_fedaf :=range _gcfa ._abg {if _bcfb !=""{break ;};_bcfb =_fedaf .GetTargetByRelIdAndType (relId ,_c .ImageType );};};return _gcfa .DocBase .GetImageBytesByTarget (_bcfb );};

// Tables returns the tables defined in the document.
func (_gffb *Document )Tables ()[]Table {_agee :=[]Table {};if _gffb ._ffb .Body ==nil {return nil ;};for _ ,_egef :=range _gffb ._ffb .Body .EG_BlockLevelElts {for _ ,_cebf :=range _egef .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_befe :=range _gffb .tables (_cebf ){_agee =append (_agee ,_befe );
};};};return _agee ;};

// SetFooter sets a section footer.
func (_cagfeg Section )SetFooter (f Footer ,t _aag .ST_HdrFtr ){_gdfaf :=_aag .NewEG_HdrFtrReferences ();_cagfeg ._fcee .EG_HdrFtrReferences =append (_cagfeg ._fcee .EG_HdrFtrReferences ,_gdfaf );_gdfaf .HdrFtrReferencesChoice .FooterReference =_aag .NewCT_HdrFtrRef ();
_gdfaf .HdrFtrReferencesChoice .FooterReference .TypeAttr =t ;_gfceb :=_cagfeg ._cfbf ._eeb .FindRIDForN (f .Index (),_c .FooterType );if _gfceb ==""{_dg .Log .Debug ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0066\u006f\u006f\u0074\u0065r \u0049\u0044");
};_gdfaf .HdrFtrReferencesChoice .FooterReference .IdAttr =_gfceb ;};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_bgaac TableBorders )SetInsideVertical (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_bgaac ._eacfd .InsideV =_aag .NewCT_Border ();_ebdgf (_bgaac ._eacfd .InsideV ,t ,c ,thickness );};

// NumId return numbering numId that being use by style properties.
func (_efgdd ParagraphStyleProperties )NumId ()int64 {if _efgdd ._aefec .NumPr !=nil {if _efgdd ._aefec .NumPr .NumId !=nil {return _efgdd ._aefec .NumPr .NumId .ValAttr ;};};return -1;};

// Emboss returns true if paragraph emboss is on.
func (_dbga ParagraphProperties )Emboss ()bool {return _faabg (_dbga ._ggac .RPr .Emboss )};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_fcca ParagraphBorders )SetBottom (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_fcca ._gabef .Bottom =_aag .NewCT_Border ();_afbdc (_fcca ._gabef .Bottom ,t ,c ,thickness );};

// SetMultiLevelType sets the multilevel type.
func (_agda NumberingDefinition )SetMultiLevelType (t _aag .ST_MultiLevelType ){if t ==_aag .ST_MultiLevelTypeUnset {_agda ._aaee .MultiLevelType =nil ;}else {_agda ._aaee .MultiLevelType =_aag .NewCT_MultiLevelType ();_agda ._aaee .MultiLevelType .ValAttr =t ;
};};

// SetValue sets the width value.
func (_faeec TableWidth )SetValue (m _bf .Distance ){_faeec ._dbbf .WAttr =&_aag .ST_MeasurementOrPercent {};_faeec ._dbbf .WAttr .ST_DecimalNumberOrPercent =&_aag .ST_DecimalNumberOrPercent {};_faeec ._dbbf .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (m /_bf .Twips ));
_faeec ._dbbf .TypeAttr =_aag .ST_TblWidthDxa ;};

// SetTarget sets the URL target of the hyperlink.
func (_fgdb HyperLink )SetTarget (url string ){_afcb :=_fgdb ._caaf .AddHyperlink (url );_fgdb ._dbdaf .IdAttr =_c .String (_cd .Relationship (_afcb ).ID ());_fgdb ._dbdaf .AnchorAttr =nil ;};

// GetRightToLeft returns true if the run text is displayed from right to left.
func (_eaacad RunProperties )GetRightToLeft ()bool {return _faabg (_eaacad ._gbeff .Rtl )};

// SetPicture sets the watermark picture.
func (_ggcab *WatermarkPicture )SetPicture (imageRef _cd .ImageRef ){_edfec :=imageRef .RelID ();_dcbff :=_ggcab .getShape ();if _ggcab ._ffefa !=nil {_ggge :=_ggcab ._ffefa .ShapeChoice ;if len (_ggge )> 0&&_ggge [0].ShapeElementsChoice .Imagedata !=nil {_ggge [0].ShapeElementsChoice .Imagedata .IdAttr =&_edfec ;
};}else {_ecee :=_ggcab .findNode (_dcbff ,"\u0069m\u0061\u0067\u0065\u0064\u0061\u0074a");for _gfcc ,_eaba :=range _ecee .Attrs {if _eaba .Name .Local =="\u0069\u0064"{_ecee .Attrs [_gfcc ].Value =_edfec ;};};};};func (_eagf *WatermarkPicture )getShapeImagedata ()*_c .XSDAny {return _eagf .getInnerElement ("\u0069m\u0061\u0067\u0065\u0064\u0061\u0074a");
};

// SetSize sets the size of the displayed image on the page.
func (_caad AnchoredDrawing )SetSize (w ,h _bf .Distance ){_caad ._ae .Extent .CxAttr =int64 (float64 (w *_bf .Pixel72 )/_bf .EMU );_caad ._ae .Extent .CyAttr =int64 (float64 (h *_bf .Pixel72 )/_bf .EMU );};

// X returns the internally wrapped *wml.CT_SectPr.
func (_ceafd Section )X ()*_aag .CT_SectPr {return _ceafd ._fcee };

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_gbfd RunProperties )CharacterSpacingMeasure ()string {if _ffgbbc :=_gbfd ._gbeff .Spacing ;_ffgbbc !=nil {_cfbdg :=_ffgbbc .ValAttr ;if _cfbdg .ST_UniversalMeasure !=nil {return *_cfbdg .ST_UniversalMeasure ;};};return "";};func _aefecf ()*_ccc .Textpath {_bgeea :=_ccc .NewTextpath ();
_gggeb :="\u0066\u006f\u006e\u0074\u002d\u0066\u0061\u006d\u0069l\u0079\u003a\u0022\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0022\u003b\u0066\u006f\u006e\u0074\u002d\u0073\u0069\u007a\u0065\u003a\u00366\u0070\u0074;\u0066\u006fn\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074\u003a\u0062\u006f\u006c\u0064;f\u006f\u006e\u0074\u002d\u0073\u0074\u0079\u006c\u0065:\u0069\u0074\u0061\u006c\u0069\u0063";
_bgeea .StyleAttr =&_gggeb ;_cfedc :="\u0041\u0053\u0041\u0050";_bgeea .StringAttr =&_cfedc ;_bgeea .FitshapeAttr =_bac .ST_TrueFalseT ;return _bgeea ;};

// AddAnnotationReference adds annotation reference to a run.
func (_fadac Run )AddAnnotationReference (){_gfbdf :=_fadac .newIC ();_gfbdf .RunInnerContentChoice .AnnotationRef =_aag .NewCT_Empty ();};

// RowProperties are the properties for a row within a table
type RowProperties struct{_bbab *_aag .CT_TrPr };

// Paragraphs returns the paragraphs defined in an endnote.
func (_efgc Endnote )Paragraphs ()[]Paragraph {_beada :=[]Paragraph {};for _ ,_aeaa :=range _efgc .content (){for _ ,_gfef :=range _aeaa .ContentBlockContentChoice .P {_beada =append (_beada ,Paragraph {_efgc ._gbggb ,_gfef });};};return _beada ;};

// SetOffset sets the offset of the image relative to the origin, which by
// default this is the top-left corner of the page. Offset is incompatible with
// SetAlignment, whichever is called last is applied.
func (_aef AnchoredDrawing )SetOffset (x ,y _bf .Distance ){_aef .SetXOffset (x );_aef .SetYOffset (y )};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_dcgfb ParagraphProperties )SetFirstLineIndent (m _bf .Distance ){if _dcgfb ._ggac .Ind ==nil {_dcgfb ._ggac .Ind =_aag .NewCT_Ind ();};if m ==_bf .Zero {_dcgfb ._ggac .Ind .FirstLineAttr =nil ;}else {_dcgfb ._ggac .Ind .FirstLineAttr =&_bac .ST_TwipsMeasure {};
_dcgfb ._ggac .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_bf .Twips ));};};

// SetFollowImageShape sets wrapPath to follow image shape,
// if nil return wrapPath that follow image size.
func (_fea AnchorDrawWrapOptions )SetFollowImageShape (val bool ){_fea ._egfa =val ;if !val {_cfc ,_ccf :=_eag ();_fea ._aab =_cfc ;_fea ._gde =_ccf ;};};

// Bookmarks returns all the bookmarks defined in the document.
func (_bdde Document )Bookmarks ()[]Bookmark {if _bdde ._ffb .Body ==nil {return nil ;};_cgdb :=[]Bookmark {};for _ ,_bacdd :=range _bdde ._ffb .Body .EG_BlockLevelElts {for _ ,_eadaa :=range _bacdd .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_fbgd :=range _ddda (_eadaa ){_cgdb =append (_cgdb ,_fbgd );
};};};return _cgdb ;};

// Tables returns the tables defined in the header.
func (_gabb Header )Tables ()[]Table {_fdgdd :=[]Table {};if _gabb ._dcaf ==nil {return nil ;};for _ ,_fagf :=range _gabb ._dcaf .EG_BlockLevelElts {for _ ,_accc :=range _fagf .BlockLevelEltsChoice .EG_ContentBlockContent {_fdgdd =append (_fdgdd ,_gabb ._dcae .tables (_accc )...);
};};return _fdgdd ;};

// AnchorDrawWrapOptions is options to set
// wrapPolygon for wrap text through and tight.
type AnchorDrawWrapOptions struct{_egfa bool ;_aab *_da .CT_Point2D ;_gde []*_da .CT_Point2D ;};

// SetSize sets size attribute for a FormFieldTypeCheckBox in pt.
func (_babb FormField )SetSize (size uint64 ){if len (_babb ._daga .FFDataChoice )==0{return ;};size *=2;for _ ,_gfab :=range _babb ._daga .FFDataChoice {if _gfab .CheckBox !=nil {_gfab .CheckBox .FFCheckBoxChoice =_aag .NewCT_FFCheckBoxChoice ();_gfab .CheckBox .FFCheckBoxChoice .Size =_aag .NewCT_HpsMeasure ();
_gfab .CheckBox .FFCheckBoxChoice .Size .ValAttr =_aag .ST_HpsMeasure {ST_UnsignedDecimalNumber :&size };};};};

// SetEnabled marks a FormField as enabled or disabled.
func (_fgbbcb FormField )SetEnabled (enabled bool ){_gada :=_aag .NewCT_OnOff ();_gada .ValAttr =&_bac .ST_OnOff {Bool :&enabled };_fgbbcb ._daga .FFDataChoice =[]*_aag .CT_FFDataChoice {{Enabled :_gada }};};

// ClearContent clears any content in the run (text, tabs, breaks, etc.)
func (_ecfg Run )ClearContent (){_ecfg ._dcgfd .EG_RunInnerContent =nil };

// PutNodeBefore put node to position before relativeTo.
func (_cacg *Document )PutNodeBefore (relativeTo ,node Node ){_cacg .putNode (relativeTo ,node ,true )};

// SetLastColumn controls the conditional formatting for the last column in a table.
func (_fade TableLook )SetLastColumn (on bool ){if !on {_fade ._cagee .LastColumnAttr =&_bac .ST_OnOff {};_fade ._cagee .LastColumnAttr .ST_OnOff1 =_bac .ST_OnOff1Off ;}else {_fade ._cagee .LastColumnAttr =&_bac .ST_OnOff {};_fade ._cagee .LastColumnAttr .ST_OnOff1 =_bac .ST_OnOff1On ;
};};

// GetText returns text in the watermark.
func (_fbee *WatermarkText )GetText ()string {_gebda :=_fbee .getShape ();if _fbee ._eafacd !=nil {_gfdca :=_fbee ._eafacd .ShapeChoice ;for _ ,_cagef :=range _gfdca {if _cagef .ShapeElementsChoice .Textpath !=nil {return *_cagef .ShapeElementsChoice .Textpath .StringAttr ;
};};}else {_deagd :=_fbee .findNode (_gebda ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _ ,_gfgg :=range _deagd .Attrs {if _gfgg .Name .Local =="\u0073\u0074\u0072\u0069\u006e\u0067"{return _gfgg .Value ;};};};return "";};

// SetTextWrapNone unsets text wrapping so the image can float on top of the
// text. When used in conjunction with X/Y Offset relative to the page it can be
// used to place a logo at the top of a page at an absolute position that
// doesn't interfere with text.
func (_afg AnchoredDrawing )SetTextWrapNone (){_afg ._ae .WrapTypeChoice =&_aag .WdEG_WrapTypeChoice {};_afg ._ae .WrapTypeChoice .WrapNone =_aag .NewWdCT_WrapNone ();};

// Index returns the index of the header within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_fbbf Header )Index ()int {for _dfddfa ,_geefa :=range _fbbf ._dcae ._acbb {if _geefa ==_fbbf ._dcaf {return _dfddfa ;};};return -1;};

// SetHighlight highlights text in a specified color.
func (_efeaa RunProperties )SetHighlight (c _aag .ST_HighlightColor ){_efeaa ._gbeff .Highlight =_aag .NewCT_Highlight ();_efeaa ._gbeff .Highlight .ValAttr =c ;};

// SetAll sets all of the borders to a given value.
func (_fegbg TableBorders )SetAll (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_fegbg .SetBottom (t ,c ,thickness );_fegbg .SetLeft (t ,c ,thickness );_fegbg .SetRight (t ,c ,thickness );_fegbg .SetTop (t ,c ,thickness );_fegbg .SetInsideHorizontal (t ,c ,thickness );
_fegbg .SetInsideVertical (t ,c ,thickness );};func (_fbd AnchoredDrawing )setEffectExtent (_dbf ,_cdb ,_egb ,_gbd int64 ){if _fbd ._ae .EffectExtent ==nil {_fbd ._ae .EffectExtent =_aag .NewWdCT_EffectExtent ();}else {_dbf +=*_fbd ._ae .EffectExtent .BAttr .ST_CoordinateUnqualified ;
_cdb +=*_fbd ._ae .EffectExtent .TAttr .ST_CoordinateUnqualified ;_egb +=*_fbd ._ae .EffectExtent .LAttr .ST_CoordinateUnqualified ;_gbd +=*_fbd ._ae .EffectExtent .RAttr .ST_CoordinateUnqualified ;};_fbd ._ae .EffectExtent .BAttr =_da .ST_Coordinate {ST_CoordinateUnqualified :&_dbf };
_fbd ._ae .EffectExtent .TAttr =_da .ST_Coordinate {ST_CoordinateUnqualified :&_cdb };_fbd ._ae .EffectExtent .LAttr =_da .ST_Coordinate {ST_CoordinateUnqualified :&_egb };_fbd ._ae .EffectExtent .RAttr =_da .ST_Coordinate {ST_CoordinateUnqualified :&_gbd };
};

// ReplaceText replace text inside node.
func (_cddgf *Nodes )ReplaceText (oldText ,newText string ){for _ ,_bbecc :=range _cddgf ._aeecg {_bbecc .ReplaceText (oldText ,newText );};};

// InsertParagraphBefore adds a new empty paragraph before the relativeTo
// paragraph.
func (_cgff *Document )InsertParagraphBefore (relativeTo Paragraph )Paragraph {return _cgff .insertParagraph (relativeTo ,true );};

// SetBottom sets the cell bottom margin
func (_aad CellMargins )SetBottom (d _bf .Distance ){_aad ._fgef .Bottom =_aag .NewCT_TblWidth ();_fag (_aad ._fgef .Bottom ,d );};

// WatermarkPicture is watermark picture within document.
type WatermarkPicture struct{_cgfedg *_aag .CT_Picture ;_gdccf *_gg .ShapeStyle ;_ffefa *_ccc .Shape ;_cdgfa *_ccc .Shapetype ;};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_aabb Paragraph )SetFirstLineIndent (m _bf .Distance ){_aabb .ensurePPr ();_gdecf :=_aabb ._dbgba .PPr ;if _gdecf .Ind ==nil {_gdecf .Ind =_aag .NewCT_Ind ();};if m ==_bf .Zero {_gdecf .Ind .FirstLineAttr =nil ;}else {_gdecf .Ind .FirstLineAttr =&_bac .ST_TwipsMeasure {};
_gdecf .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_bf .Twips ));};};func (_cfcf *Document )onNewRelationship (_gebf *_aa .DecodeMap ,_aege ,_face string ,_dfdd []*_dcd .File ,_debg *_fc .Relationship ,_cafda _aa .Target )error {_bgfc :=_c .DocTypeDocument ;
switch _face {case _c .OfficeDocumentType ,_c .OfficeDocumentTypeStrict :_cfcf ._ffb =_aag .NewDocument ();_gebf .AddTarget (_aege ,_cfcf ._ffb ,_face ,0);_gebf .AddTarget (_aa .RelationsPathFor (_aege ),_cfcf ._eeb .X (),_face ,0);_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,0);
case _c .CorePropertiesType :_gebf .AddTarget (_aege ,_cfcf .CoreProperties .X (),_face ,0);_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,0);case _c .CorePropertiesAltType :_gebf .AddTarget (_aege ,_cfcf .CoreProperties .X (),_c .CorePropertiesType ,0);
_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_c .CorePropertiesType ,0);case _c .CustomPropertiesType :_gebf .AddTarget (_aege ,_cfcf .CustomProperties .X (),_face ,0);_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,0);
case _c .ExtendedPropertiesType ,_c .ExtendedPropertiesTypeStrict :_gebf .AddTarget (_aege ,_cfcf .AppProperties .X (),_face ,0);_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,0);case _c .ThumbnailType ,_c .ThumbnailTypeStrict :for _fagc ,_cfba :=range _dfdd {if _cfba ==nil {continue ;
};if _cfba .Name ==_aege {_agcg ,_cbac :=_cfba .Open ();if _cbac !=nil {return _db .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_cbac );};_cfcf .Thumbnail ,_ ,_cbac =_ba .Decode (_agcg );
_agcg .Close ();if _cbac !=nil {return _db .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_cbac );};_dfdd [_fagc ]=nil ;};};case _c .SettingsType ,_c .SettingsTypeStrict :_gebf .AddTarget (_aege ,_cfcf .Settings .X (),_face ,0);
_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,0);case _c .NumberingType ,_c .NumberingTypeStrict :_cfcf .Numbering =NewNumbering ();_gebf .AddTarget (_aege ,_cfcf .Numbering .X (),_face ,0);_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,0);
case _c .StylesType ,_c .StylesTypeStrict :_cfcf .Styles .Clear ();_gebf .AddTarget (_aege ,_cfcf .Styles .X (),_face ,0);_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,0);case _c .HeaderType ,_c .HeaderTypeStrict :_egde :=_aag .NewHdr ();
_gebf .AddTarget (_aege ,_egde ,_face ,uint32 (len (_cfcf ._acbb )));_cfcf ._acbb =append (_cfcf ._acbb ,_egde );_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,len (_cfcf ._acbb ));_faeae :=_cd .NewRelationships ();_gebf .AddTarget (_aa .RelationsPathFor (_aege ),_faeae .X (),_face ,0);
_cfcf ._eea =append (_cfcf ._eea ,_faeae );case _c .FooterType ,_c .FooterTypeStrict :_fgfg :=_aag .NewFtr ();_gebf .AddTarget (_aege ,_fgfg ,_face ,uint32 (len (_cfcf ._cfg )));_cfcf ._cfg =append (_cfcf ._cfg ,_fgfg );_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,len (_cfcf ._cfg ));
_gfce :=_cd .NewRelationships ();_gebf .AddTarget (_aa .RelationsPathFor (_aege ),_gfce .X (),_face ,0);_cfcf ._abg =append (_cfcf ._abg ,_gfce );case _c .ThemeType ,_c .ThemeTypeStrict :_bfd :=_da .NewTheme ();_gebf .AddTarget (_aege ,_bfd ,_face ,uint32 (len (_cfcf ._faff )));
_cfcf ._faff =append (_cfcf ._faff ,_bfd );_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,len (_cfcf ._faff ));case _c .WebSettingsType ,_c .WebSettingsTypeStrict :_cfcf ._gdec =_aag .NewWebSettings ();_gebf .AddTarget (_aege ,_cfcf ._gdec ,_face ,0);
_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,0);case _c .FontTableType ,_c .FontTableTypeStrict :_cfcf ._caf =_aag .NewFonts ();_gebf .AddTarget (_aege ,_cfcf ._caf ,_face ,0);_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,0);
case _c .FontEmbeddingType :_cddd :=_cd .NewRelationships ();_gebf .AddTarget (_aa .RelationsPathFor (_aege ),_cddd .X (),_face ,0);_cfcf ._bcaf =_cddd ;case _c .EndNotesType ,_c .EndNotesTypeStrict :_cfcf ._edga =_aag .NewEndnotes ();_gebf .AddTarget (_aege ,_cfcf ._edga ,_face ,0);
_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,0);case _c .FootNotesType ,_c .FootNotesTypeStrict :_cfcf ._fbgg =_aag .NewFootnotes ();_gebf .AddTarget (_aege ,_cfcf ._fbgg ,_face ,0);_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,0);
case _c .CommentsType :_cfcf ._abb =_aag .NewComments ();_gebf .AddTarget (_aege ,_cfcf ._abb ,_face ,0);_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,0);case _c .ImageType ,_c .ImageTypeStrict :var _fgcfg _cd .ImageRef ;for _gdge ,_adea :=range _dfdd {if _adea ==nil {continue ;
};_baef :=_ag .TrimPrefix (_adea .Name ,"\u0077\u006f\u0072d\u002f");if _efgg :=_ag .TrimPrefix (_aege ,"\u0077\u006f\u0072d\u002f");_baef ==_efgg {_aca ,_afc :=_aa .ExtractToDiskTmp (_adea ,_cfcf .TmpPath );if _afc !=nil {return _afc ;};_gefcf :=_ca .Ext (_adea .Name );
_dcbc :=_cd .Image {};if _gefcf [1:]!="\u0065\u006d\u0066"{_gfbg ,_eefa :=_cd .ImageFromStorage (_aca );if _eefa !=nil {return _eefa ;};_dcbc =_gfbg ;}else {_dcbc .Path =_aca ;};_dcbc .Format =_gefcf [1:];_fgcfg =_cd .MakeImageRef (_dcbc ,&_cfcf .DocBase ,_cfcf ._eeb );
_dfdd [_gdge ]=nil ;};};if _fgcfg .Format ()!=""{_cddgc :="\u002e"+_ag .ToLower (_fgcfg .Format ());_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,len (_cfcf .Images )+1);if _fcec :=_ca .Ext (_debg .TargetAttr );_fcec !=_cddgc {_debg .TargetAttr =_debg .TargetAttr [0:len (_debg .TargetAttr )-len (_fcec )]+_cddgc ;
};_fgcfg .SetTarget ("\u0077\u006f\u0072d\u002f"+_debg .TargetAttr );_cfcf .Images =append (_cfcf .Images ,_fgcfg );};case _c .ControlType ,_c .ControlTypeStrict :_fged :=_ea .NewOcx ();_fgag :=_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,len (_cfcf ._dcf )+1);
_ffeg :="\u0077\u006f\u0072d\u002f"+_fgag [:len (_fgag )-4]+"\u002e\u0062\u0069\u006e";for _eege ,_bggb :=range _dfdd {if _bggb ==nil {continue ;};if _bggb .Name ==_ffeg {_gdgff ,_gcccb :=_aa .ExtractToDiskTmp (_bggb ,_cfcf .TmpPath );if _gcccb !=nil {return _gcccb ;
};_agcfg ,_gcccb :=_ac .ImportFromFile (_gdgff );if _gcccb ==nil {_agcfg .TargetAttr =_fgag ;_agcfg .Ocx =_fged ;_cfcf ._dcf =append (_cfcf ._dcf ,_agcfg );_gebf .AddTarget (_aege ,_fged ,_face ,uint32 (len (_cfcf ._dcf )));_debg .TargetAttr =_fgag ;_dfdd [_eege ]=nil ;
}else {_dg .Log .Debug ("c\u0061\u006e\u006e\u006f\u0074\u0020r\u0065\u0061\u0064\u0020\u0062\u0069\u006e\u0020\u0066i\u006c\u0065\u003a \u0025s\u0020\u0025\u0073",_ffeg ,_gcccb .Error ());};break ;};};case _c .ChartType :_cffa :=chart {_gfb :_gea .NewChartSpace ()};
_cggd :=uint32 (len (_cfcf ._cadge ));_gebf .AddTarget (_aege ,_cffa ._gfb ,_face ,_cggd );_cfcf ._cadge =append (_cfcf ._cadge ,&_cffa );_debg .TargetAttr =_c .RelativeFilename (_bgfc ,_cafda .Typ ,_face ,len (_cfcf ._cadge ));_cffa ._ddc =_debg .TargetAttr ;
default:_dg .Log .Debug ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_face ,_aege );
};return nil ;};

// GetFooter gets a section Footer for given type
func (_egadg Section )GetFooter (t _aag .ST_HdrFtr )(Footer ,bool ){for _ ,_dbefc :=range _egadg ._fcee .EG_HdrFtrReferences {if _dbefc .HdrFtrReferencesChoice .FooterReference ==nil {continue ;};if _dbefc .HdrFtrReferencesChoice .FooterReference .TypeAttr ==t {for _ ,_gbggc :=range _egadg ._cfbf .Footers (){_fdcbc :=_egadg ._cfbf ._eeb .FindRIDForN (_gbggc .Index (),_c .FooterType );
if _fdcbc ==_dbefc .HdrFtrReferencesChoice .FooterReference .IdAttr {return _gbggc ,true ;};};};};return Footer {},false ;};

// GetHeaderFooterImageObjByRelId returns a common.Image with the associated relation ID in the
// document, its header or footer.
func (_affd *Document )GetHeaderFooterImageObjByRelId (relId string ,isHeader ,isFooter bool )(_cd .Image ,error ){_cffb :="";if isHeader {for _ ,_fafg :=range _affd ._eea {if _cffb !=""{break ;};_cffb =_fafg .GetTargetByRelIdAndType (relId ,_c .ImageType );
};};if isFooter &&_cffb ==""{for _ ,_egfg :=range _affd ._abg {if _cffb !=""{break ;};_cffb =_egfg .GetTargetByRelIdAndType (relId ,_c .ImageType );};};if _cffb ==""{_cffb =_affd ._eeb .GetTargetByRelIdAndType (relId ,_c .ImageType );};return _affd .DocBase .GetImageBytesByTarget (_cffb );
};

// SetAlignment controls the paragraph alignment
func (_bdbcf ParagraphProperties )SetAlignment (align _aag .ST_Jc ){if align ==_aag .ST_JcUnset {_bdbcf ._ggac .Jc =nil ;}else {_bdbcf ._ggac .Jc =_aag .NewCT_Jc ();_bdbcf ._ggac .Jc .ValAttr =align ;};};func _cfcff (_eabb *Run ,_aaef string ,_fbgc *htmlNode ){switch _aaef {case "\u0062","\u0073\u0074\u0072\u006f\u006e\u0067":_eabb .Properties ().SetBold (true );
case "\u0069","\u0065\u006d":_eabb .Properties ().SetItalic (true );case "\u0075":_abgaa :=_ff .Black ;for _ ,_gcfgf :=range _fbgc ._fgfc .Attr {if _gcfgf .Name .Local =="\u0063\u006f\u006co\u0072"{if _gbgbg ,_ebfa :=_ff .ColorMap [_gcfgf .Value ];_ebfa {_abgaa =_gbgbg ;
};};};_eabb .Properties ().SetUnderline (_aag .ST_UnderlineSingle ,_abgaa );case "\u0073\u0074\u0072\u0069\u006b\u0065":_eabb .Properties ().SetStrikeThrough (true );case "\u006d\u0061\u0072\u006b":_ebbeg :=_aag .ST_HighlightColorYellow ;for _ ,_dagc :=range _fbgc ._fgfc .Attr {if _dagc .Name .Local =="\u0063\u006f\u006co\u0072"{if _edgbd ,_cdcdf :=_ff .HighlightColorMap [_dagc .Value ];
_cdcdf {_ebbeg =_edgbd ;};};};_eabb .Properties ().SetHighlight (_ebbeg );case "\u0073\u0075\u0062":_eabb .Properties ().SetVerticalAlignment (_bac .ST_VerticalAlignRunSubscript );case "\u0073\u0075\u0070":_eabb .Properties ().SetVerticalAlignment (_bac .ST_VerticalAlignRunSuperscript );
};};

// SetSize sets the font size for a run.
func (_bcbe RunProperties )SetSize (size _bf .Distance ){_bcbe ._gbeff .Sz =_aag .NewCT_HpsMeasure ();_bcbe ._gbeff .Sz .ValAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (size /_bf .HalfPoint ));_bcbe ._gbeff .SzCs =_aag .NewCT_HpsMeasure ();_bcbe ._gbeff .SzCs .ValAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (size /_bf .HalfPoint ));
};

// X returns the inner wml.CT_TblBorders
func (_adege TableBorders )X ()*_aag .CT_TblBorders {return _adege ._eacfd };

// SetSoftEdgeImageEffect sets the soft edge image effect.
func (_cba AnchoredDrawing )SetSoftEdgeImageEffect (radius _bf .Distance ){_abd :=_bf .ToEMU (float64 (radius ));for _ ,_age :=range _cba ._ae .Graphic .GraphicData .Any {if _dbb ,_gcg :=_age .(*_ggg .Pic );_gcg {_cba .initializeEffectList (_dbb .SpPr );
_dbb .SpPr .EffectPropertiesChoice .EffectLst .SoftEdge =_da .NewCT_SoftEdgesEffect ();_dbb .SpPr .EffectPropertiesChoice .EffectLst .SoftEdge .RadAttr =_abd ;};};};

// Paragraphs returns the paragraphs defined in a footer.
func (_cfge Footer )Paragraphs ()[]Paragraph {_aabge :=[]Paragraph {};for _ ,_bbaa :=range _cfge ._degea .EG_BlockLevelElts {for _ ,_cagc :=range _bbaa .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_afgf :=range _cagc .ContentBlockContentChoice .P {_aabge =append (_aabge ,Paragraph {_cfge ._gegg ,_afgf });
};};};for _ ,_abfd :=range _cfge .Tables (){for _ ,_agfa :=range _abfd .Rows (){for _ ,_gcgg :=range _agfa .Cells (){_aabge =append (_aabge ,_gcgg .Paragraphs ()...);};};};return _aabge ;};

// Document is a text document that can be written out in the OOXML .docx
// format. It can be opened from a file on disk and modified, or created from
// scratch.
type Document struct{_cd .DocBase ;_ffb *_aag .Document ;Settings Settings ;Numbering Numbering ;Styles Styles ;_acbb []*_aag .Hdr ;_eea []_cd .Relationships ;_cfg []*_aag .Ftr ;_abg []_cd .Relationships ;_eeb _cd .Relationships ;_faff []*_da .Theme ;_gdec *_aag .WebSettings ;
_caf *_aag .Fonts ;_bcaf _cd .Relationships ;_edga *_aag .Endnotes ;_fbgg *_aag .Footnotes ;_dcf []*_ac .Control ;_cadge []*chart ;_abb *_aag .Comments ;_fegf string ;};

// SetProperties sets the `RunProperties` to the `Run` element
func (_gdgca Run )SetProperties (rp RunProperties ){if rp ._gbeff ==nil {_gdgca ._dcgfd .RPr =_aag .NewCT_RPr ();}else {_fdgbb :=_aag .NewCT_RPr ();if rp ._gbeff .RStyle !=nil {_fdgbb .RStyle =&_aag .CT_String {ValAttr :rp ._gbeff .RStyle .ValAttr };};
if rp ._gbeff .RFonts !=nil {_fdgbb .RFonts =&_aag .CT_Fonts {HintAttr :rp ._gbeff .RFonts .HintAttr ,AsciiAttr :rp ._gbeff .RFonts .AsciiAttr ,HAnsiAttr :rp ._gbeff .RFonts .HAnsiAttr ,EastAsiaAttr :rp ._gbeff .RFonts .EastAsiaAttr ,CsAttr :rp ._gbeff .RFonts .CsAttr ,AsciiThemeAttr :rp ._gbeff .RFonts .AsciiThemeAttr ,HAnsiThemeAttr :rp ._gbeff .RFonts .HAnsiThemeAttr ,EastAsiaThemeAttr :rp ._gbeff .RFonts .EastAsiaThemeAttr ,CsthemeAttr :rp ._gbeff .RFonts .CsthemeAttr };
};if rp ._gbeff .B !=nil {_fdgbb .B =&_aag .CT_OnOff {};if rp ._gbeff .B .ValAttr !=nil {_adfec :=*rp ._gbeff .B .ValAttr ;_fdgbb .B .ValAttr =&_adfec ;};};if rp ._gbeff .BCs !=nil {_fdgbb .BCs =&_aag .CT_OnOff {};if rp ._gbeff .BCs .ValAttr !=nil {_ebcafc :=*rp ._gbeff .BCs .ValAttr ;
_fdgbb .BCs .ValAttr =&_ebcafc ;};};if rp ._gbeff .I !=nil {_fdgbb .I =&_aag .CT_OnOff {};if rp ._gbeff .I .ValAttr !=nil {_ddbcc :=*rp ._gbeff .I .ValAttr ;_fdgbb .I .ValAttr =&_ddbcc ;};};if rp ._gbeff .ICs !=nil {_fdgbb .ICs =&_aag .CT_OnOff {};if rp ._gbeff .ICs .ValAttr !=nil {_cegac :=*rp ._gbeff .ICs .ValAttr ;
_fdgbb .ICs .ValAttr =&_cegac ;};};if rp ._gbeff .Caps !=nil {_fdgbb .Caps =&_aag .CT_OnOff {};if rp ._gbeff .Caps .ValAttr !=nil {_efed :=*rp ._gbeff .Caps .ValAttr ;_fdgbb .Caps .ValAttr =&_efed ;};};if rp ._gbeff .SmallCaps !=nil {_fdgbb .SmallCaps =&_aag .CT_OnOff {};
if rp ._gbeff .SmallCaps .ValAttr !=nil {_agbcg :=*rp ._gbeff .SmallCaps .ValAttr ;_fdgbb .SmallCaps .ValAttr =&_agbcg ;};};if rp ._gbeff .Strike !=nil {_fdgbb .Strike =&_aag .CT_OnOff {};if rp ._gbeff .Strike .ValAttr !=nil {_aeed :=*rp ._gbeff .Strike .ValAttr ;
_fdgbb .Strike .ValAttr =&_aeed ;};};if rp ._gbeff .Dstrike !=nil {_fdgbb .Dstrike =&_aag .CT_OnOff {};if rp ._gbeff .Dstrike .ValAttr !=nil {_ffcf :=*rp ._gbeff .Dstrike .ValAttr ;_fdgbb .Dstrike .ValAttr =&_ffcf ;};};if rp ._gbeff .Outline !=nil {_fdgbb .Outline =&_aag .CT_OnOff {};
if rp ._gbeff .Outline .ValAttr !=nil {_adbf :=*rp ._gbeff .Outline .ValAttr ;_fdgbb .Outline .ValAttr =&_adbf ;};};if rp ._gbeff .Shadow !=nil {_fdgbb .Shadow =&_aag .CT_OnOff {};if rp ._gbeff .Shadow .ValAttr !=nil {_gfffe :=*rp ._gbeff .Shadow .ValAttr ;
_fdgbb .Shadow .ValAttr =&_gfffe ;};};if rp ._gbeff .Emboss !=nil {_fdgbb .Emboss =&_aag .CT_OnOff {};if rp ._gbeff .Emboss .ValAttr !=nil {_eefce :=*rp ._gbeff .Emboss .ValAttr ;_fdgbb .Emboss .ValAttr =&_eefce ;};};if rp ._gbeff .Imprint !=nil {_fdgbb .Imprint =&_aag .CT_OnOff {};
if rp ._gbeff .Imprint .ValAttr !=nil {_afbef :=*rp ._gbeff .Imprint .ValAttr ;_fdgbb .Imprint .ValAttr =&_afbef ;};};if rp ._gbeff .NoProof !=nil {_fdgbb .NoProof =&_aag .CT_OnOff {};if rp ._gbeff .NoProof .ValAttr !=nil {_daaa :=*rp ._gbeff .NoProof .ValAttr ;
_fdgbb .NoProof .ValAttr =&_daaa ;};};if rp ._gbeff .SnapToGrid !=nil {_fdgbb .SnapToGrid =&_aag .CT_OnOff {};if rp ._gbeff .SnapToGrid .ValAttr !=nil {_gccf :=*rp ._gbeff .SnapToGrid .ValAttr ;_fdgbb .SnapToGrid .ValAttr =&_gccf ;};};if rp ._gbeff .Vanish !=nil {_fdgbb .Vanish =&_aag .CT_OnOff {};
if rp ._gbeff .Vanish .ValAttr !=nil {_fgdcb :=*rp ._gbeff .Vanish .ValAttr ;_fdgbb .Vanish .ValAttr =&_fgdcb ;};};if rp ._gbeff .WebHidden !=nil {_fdgbb .WebHidden =&_aag .CT_OnOff {};if rp ._gbeff .WebHidden .ValAttr !=nil {_daeb :=*rp ._gbeff .WebHidden .ValAttr ;
_fdgbb .WebHidden .ValAttr =&_daeb ;};};if rp ._gbeff .Color !=nil {_fdgbb .Color =&_aag .CT_Color {ValAttr :rp ._gbeff .Color .ValAttr ,ThemeColorAttr :rp ._gbeff .Color .ThemeColorAttr ,ThemeTintAttr :rp ._gbeff .Color .ThemeTintAttr ,ThemeShadeAttr :rp ._gbeff .Color .ThemeShadeAttr };
};if rp ._gbeff .Spacing !=nil {_fdgbb .Spacing =&_aag .CT_SignedTwipsMeasure {ValAttr :rp ._gbeff .Spacing .ValAttr };};if rp ._gbeff .W !=nil {_fdgbb .W =&_aag .CT_TextScale {ValAttr :rp ._gbeff .W .ValAttr };};if rp ._gbeff .Kern !=nil {_fdgbb .Kern =&_aag .CT_HpsMeasure {ValAttr :rp ._gbeff .Kern .ValAttr };
};if rp ._gbeff .Position !=nil {_fdgbb .Position =&_aag .CT_SignedHpsMeasure {ValAttr :rp ._gbeff .Position .ValAttr };};if rp ._gbeff .Sz !=nil {_fdgbb .Sz =&_aag .CT_HpsMeasure {ValAttr :rp ._gbeff .Sz .ValAttr };};if rp ._gbeff .SzCs !=nil {_fdgbb .SzCs =&_aag .CT_HpsMeasure {ValAttr :rp ._gbeff .SzCs .ValAttr };
};if rp ._gbeff .Highlight !=nil {_fdgbb .Highlight =&_aag .CT_Highlight {ValAttr :rp ._gbeff .Highlight .ValAttr };};if rp ._gbeff .U !=nil {_fdgbb .U =&_aag .CT_Underline {ValAttr :rp ._gbeff .U .ValAttr ,ColorAttr :rp ._gbeff .U .ColorAttr ,ThemeColorAttr :rp ._gbeff .U .ThemeColorAttr ,ThemeTintAttr :rp ._gbeff .U .ThemeTintAttr ,ThemeShadeAttr :rp ._gbeff .U .ThemeShadeAttr };
};if rp ._gbeff .Effect !=nil {_fdgbb .Effect =&_aag .CT_TextEffect {ValAttr :rp ._gbeff .Effect .ValAttr };};if rp ._gbeff .Bdr !=nil {_fdgbb .Bdr =&_aag .CT_Border {ValAttr :rp ._gbeff .Bdr .ValAttr ,ColorAttr :rp ._gbeff .Bdr .ColorAttr ,ThemeColorAttr :rp ._gbeff .Bdr .ThemeColorAttr ,ThemeTintAttr :rp ._gbeff .Bdr .ThemeTintAttr ,ThemeShadeAttr :rp ._gbeff .Bdr .ThemeShadeAttr ,SzAttr :rp ._gbeff .Bdr .SzAttr ,SpaceAttr :rp ._gbeff .Bdr .SpaceAttr ,ShadowAttr :rp ._gbeff .Bdr .ShadowAttr ,FrameAttr :rp ._gbeff .Bdr .FrameAttr };
};if rp ._gbeff .Shd !=nil {_fdgbb .Shd =&_aag .CT_Shd {ValAttr :rp ._gbeff .Shd .ValAttr ,ColorAttr :rp ._gbeff .Shd .ColorAttr ,ThemeColorAttr :rp ._gbeff .Shd .ThemeColorAttr ,ThemeTintAttr :rp ._gbeff .Shd .ThemeTintAttr ,ThemeShadeAttr :rp ._gbeff .Shd .ThemeShadeAttr ,FillAttr :rp ._gbeff .Shd .FillAttr ,ThemeFillAttr :rp ._gbeff .Shd .ThemeFillAttr ,ThemeFillTintAttr :rp ._gbeff .Shd .ThemeFillTintAttr ,ThemeFillShadeAttr :rp ._gbeff .Shd .ThemeFillShadeAttr };
};if rp ._gbeff .FitText !=nil {_fdgbb .FitText =&_aag .CT_FitText {ValAttr :rp ._gbeff .FitText .ValAttr ,IdAttr :rp ._gbeff .FitText .IdAttr };};if rp ._gbeff .VertAlign !=nil {_fdgbb .VertAlign =&_aag .CT_VerticalAlignRun {ValAttr :rp ._gbeff .VertAlign .ValAttr };
};if rp ._gbeff .Rtl !=nil {_fdgbb .Rtl =&_aag .CT_OnOff {ValAttr :rp ._gbeff .Rtl .ValAttr };};if rp ._gbeff .Cs !=nil {_fdgbb .Cs =&_aag .CT_OnOff {ValAttr :rp ._gbeff .Cs .ValAttr };};if rp ._gbeff .Em !=nil {_fdgbb .Em =&_aag .CT_Em {ValAttr :rp ._gbeff .Em .ValAttr };
};if rp ._gbeff .Lang !=nil {_fdgbb .Lang =&_aag .CT_Language {ValAttr :rp ._gbeff .Lang .ValAttr ,EastAsiaAttr :rp ._gbeff .Lang .EastAsiaAttr ,BidiAttr :rp ._gbeff .Lang .BidiAttr };};if rp ._gbeff .EastAsianLayout !=nil {_fdgbb .EastAsianLayout =&_aag .CT_EastAsianLayout {IdAttr :rp ._gbeff .EastAsianLayout .IdAttr ,CombineAttr :rp ._gbeff .EastAsianLayout .CombineAttr ,CombineBracketsAttr :rp ._gbeff .EastAsianLayout .CombineBracketsAttr ,VertAttr :rp ._gbeff .EastAsianLayout .VertAttr ,VertCompressAttr :rp ._gbeff .EastAsianLayout .VertCompressAttr };
};if rp ._gbeff .SpecVanish !=nil {_fdgbb .SpecVanish =&_aag .CT_OnOff {ValAttr :rp ._gbeff .SpecVanish .ValAttr };};if rp ._gbeff .OMath !=nil {_fdgbb .OMath =&_aag .CT_OnOff {ValAttr :rp ._gbeff .OMath .ValAttr };};_gdgca ._dcgfd .RPr =_fdgbb ;};};

// SetStyle sets the style of a paragraph and is identical to setting it on the
// paragraph's Properties()
func (_baecd Paragraph )SetStyle (s string ){_baecd .ensurePPr ();if s ==""{_baecd ._dbgba .PPr .PStyle =nil ;}else {_baecd ._dbgba .PPr .PStyle =_aag .NewCT_String ();_baecd ._dbgba .PPr .PStyle .ValAttr =s ;};};

// Style return the table style.
func (_beaba Table )Style ()string {if _beaba ._bgcdd .TblPr !=nil &&_beaba ._bgcdd .TblPr .TblStyle !=nil {return _beaba ._bgcdd .TblPr .TblStyle .ValAttr ;};return "";};

// SetBeforeSpacing sets spacing above paragraph.
func (_fgagg Paragraph )SetBeforeSpacing (d _bf .Distance ){_fgagg .ensurePPr ();if _fgagg ._dbgba .PPr .Spacing ==nil {_fgagg ._dbgba .PPr .Spacing =_aag .NewCT_Spacing ();};_edee :=_fgagg ._dbgba .PPr .Spacing ;_edee .BeforeAttr =&_bac .ST_TwipsMeasure {};
_edee .BeforeAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (d /_bf .Twips ));};

// SetColor sets color of watermark text.
func (_gefcg *WatermarkText )SetColor (value string ){if _gefcg ._eafacd !=nil {_gefcg ._eafacd .FillcolorAttr =&value ;};};

// SetCharacterSpacing sets the run's Character Spacing Adjustment.
func (_aefee RunProperties )SetCharacterSpacing (size _bf .Distance ){_aefee ._gbeff .Spacing =_aag .NewCT_SignedTwipsMeasure ();_aefee ._gbeff .Spacing .ValAttr .Int64 =_c .Int64 (int64 (size /_bf .Twips ));};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_abbgd RunProperties )ComplexSizeMeasure ()string {if _ecffb :=_abbgd ._gbeff .SzCs ;_ecffb !=nil {_bgdfg :=_ecffb .ValAttr ;if _bgdfg .ST_PositiveUniversalMeasure !=nil {return *_bgdfg .ST_PositiveUniversalMeasure ;};};return "";};func (_geagf *Document )tables (_ddcb *_aag .EG_ContentBlockContent )[]Table {_bded :=[]Table {};
for _ ,_ggf :=range _ddcb .ContentBlockContentChoice .Tbl {_bded =append (_bded ,Table {_geagf ,_ggf });for _ ,_ebc :=range _ggf .EG_ContentRowContent {for _ ,_gfe :=range _ebc .ContentRowContentChoice .Tr {for _ ,_gdf :=range _gfe .EG_ContentCellContent {for _ ,_edag :=range _gdf .ContentCellContentChoice .Tc {for _ ,_fbae :=range _edag .EG_BlockLevelElts {for _ ,_bcb :=range _fbae .BlockLevelEltsChoice .EG_ContentBlockContent {_bded =append (_bded ,_geagf .tables (_bcb )...);
};};};};};};};return _bded ;};func _ecab (_bbecf Paragraph )*_aag .CT_NumPr {_bbecf .ensurePPr ();if _bbecf ._dbgba .PPr .NumPr ==nil {return nil ;};return _bbecf ._dbgba .PPr .NumPr ;};

// SetOutline sets the run to outlined text.
func (_bfdb RunProperties )SetOutline (b bool ){if !b {_bfdb ._gbeff .Outline =nil ;}else {_bfdb ._gbeff .Outline =_aag .NewCT_OnOff ();};};

// SetColumnBandSize sets the number of Columns in the column band
func (_abdg TableStyleProperties )SetColumnBandSize (cols int64 ){_abdg ._bacac .TblStyleColBandSize =_aag .NewCT_DecimalNumber ();_abdg ._bacac .TblStyleColBandSize .ValAttr =cols ;};

// ParagraphProperties are the properties for a paragraph.
type ParagraphProperties struct{_ffaef *Document ;_ggac *_aag .CT_PPr ;};

// X returns the inner wrapped XML type.
func (_defg Footer )X ()*_aag .Ftr {return _defg ._degea };

// Name returns the name of the field.
func (_fadf FormField )Name ()string {if len (_fadf ._daga .FFDataChoice )==0{return "";};return *_fadf ._daga .FFDataChoice [0].Name .ValAttr ;};

// ParagraphSpacing controls the spacing for a paragraph and its lines.
type ParagraphSpacing struct{_cdced *_aag .CT_Spacing };

// SetColor sets the text color.
func (_ccea RunProperties )SetColor (c _ff .Color ){_ccea ._gbeff .Color =_aag .NewCT_Color ();_ccea ._gbeff .Color .ValAttr .ST_HexColorRGB =c .AsRGBString ();};

// AddTabStop adds a tab stop to the paragraph.  It controls the position of text when using Run.AddTab()
func (_ccag ParagraphProperties )AddTabStop (position _bf .Distance ,justificaton _aag .ST_TabJc ,leader _aag .ST_TabTlc ){if _ccag ._ggac .Tabs ==nil {_ccag ._ggac .Tabs =_aag .NewCT_Tabs ();};_abefe :=_aag .NewCT_TabStop ();_abefe .LeaderAttr =leader ;
_abefe .ValAttr =justificaton ;_abefe .PosAttr .Int64 =_c .Int64 (int64 (position /_bf .Twips ));_ccag ._ggac .Tabs .Tab =append (_ccag ._ggac .Tabs .Tab ,_abefe );};

// SetHeight allows controlling the height of a row within a table.
func (_bafga RowProperties )SetHeight (ht _bf .Distance ,rule _aag .ST_HeightRule ){if rule ==_aag .ST_HeightRuleUnset {_bafga ._bbab .TrPrBaseChoice =nil ;}else {_bfbg :=_aag .NewCT_Height ();_bfbg .HRuleAttr =rule ;_bfbg .ValAttr =&_bac .ST_TwipsMeasure {};
_bfbg .ValAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (ht /_bf .Twips ));_bafga ._bbab .TrPrBaseChoice =[]*_aag .CT_TrPrBaseChoice {&_aag .CT_TrPrBaseChoice {TrHeight :_bfbg }};};};

// AddEndnoteReference adds a footnote reference to a run.
func (_agdga Run )AddEndnoteReference (){_bedec :=_agdga .newIC ();_bedec .RunInnerContentChoice .EndnoteRef =&_aag .CT_Empty {};};func _eacad (_gcb *_aag .CT_P ,_acaa map[string ]string ){for _ ,_agba :=range _gcb .EG_PContent {if _agba .PContentChoice .Hyperlink !=nil &&_agba .PContentChoice .Hyperlink .IdAttr !=nil {if _begd ,_ccfc :=_acaa [*_agba .PContentChoice .Hyperlink .IdAttr ];
_ccfc {*_agba .PContentChoice .Hyperlink .IdAttr =_begd ;};};};};

// X returns the inner wrapped XML type.
func (_cbbad Paragraph )X ()*_aag .CT_P {return _cbbad ._dbgba };

// DrawingInfo is used for keep information about a drawing wrapping a textbox where the text is located.
type DrawingInfo struct{Drawing *_aag .CT_Drawing ;Width int64 ;Height int64 ;};

// SetEndIndent controls the end indentation.
func (_agag ParagraphProperties )SetEndIndent (m _bf .Distance ){if _agag ._ggac .Ind ==nil {_agag ._ggac .Ind =_aag .NewCT_Ind ();};if m ==_bf .Zero {_agag ._ggac .Ind .EndAttr =nil ;}else {_agag ._ggac .Ind .EndAttr =&_aag .ST_SignedTwipsMeasure {};_agag ._ggac .Ind .EndAttr .Int64 =_c .Int64 (int64 (m /_bf .Twips ));
};};

// InitializeDefault constructs a default numbering.
func (_ggba Numbering )InitializeDefault (){_fbade :=_aag .NewCT_AbstractNum ();_fbade .MultiLevelType =_aag .NewCT_MultiLevelType ();_fbade .MultiLevelType .ValAttr =_aag .ST_MultiLevelTypeHybridMultilevel ;_ggba ._gbda .AbstractNum =append (_ggba ._gbda .AbstractNum ,_fbade );
_fbade .AbstractNumIdAttr =1;const _fgfab =720;const _egaf =720;const _dagf =360;for _acdde :=0;_acdde < 9;_acdde ++{_gbac :=_aag .NewCT_Lvl ();_gbac .IlvlAttr =int64 (_acdde );_gbac .Start =_aag .NewCT_DecimalNumber ();_gbac .Start .ValAttr =1;_gbac .NumFmt =_aag .NewCT_NumFmt ();
_gbac .NumFmt .ValAttr =_aag .ST_NumberFormatBullet ;_gbac .Suff =_aag .NewCT_LevelSuffix ();_gbac .Suff .ValAttr =_aag .ST_LevelSuffixNothing ;_gbac .LvlText =_aag .NewCT_LevelText ();_gbac .LvlText .ValAttr =_c .String ("\uf0b7");_gbac .LvlJc =_aag .NewCT_Jc ();
_gbac .LvlJc .ValAttr =_aag .ST_JcLeft ;_gbac .RPr =_aag .NewCT_RPr ();_gbac .RPr .RFonts =_aag .NewCT_Fonts ();_gbac .RPr .RFonts .AsciiAttr =_c .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_gbac .RPr .RFonts .HAnsiAttr =_c .String ("\u0053\u0079\u006d\u0062\u006f\u006c");
_gbac .RPr .RFonts .HintAttr =_aag .ST_HintDefault ;_gbac .PPr =_aag .NewCT_PPrGeneral ();_cbgc :=int64 (_acdde *_egaf +_fgfab );_gbac .PPr .Ind =_aag .NewCT_Ind ();_gbac .PPr .Ind .LeftAttr =&_aag .ST_SignedTwipsMeasure {};_gbac .PPr .Ind .LeftAttr .Int64 =_c .Int64 (_cbgc );
_gbac .PPr .Ind .HangingAttr =&_bac .ST_TwipsMeasure {};_gbac .PPr .Ind .HangingAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (_dagf ));_fbade .Lvl =append (_fbade .Lvl ,_gbac );};_cbec :=_aag .NewCT_Num ();_cbec .NumIdAttr =1;_cbec .AbstractNumId =_aag .NewCT_DecimalNumber ();
_cbec .AbstractNumId .ValAttr =1;_ggba ._gbda .Num =append (_ggba ._gbda .Num ,_cbec );};

// X returns the inner wrapped XML type.
func (_gbbgc Settings )X ()*_aag .Settings {return _gbbgc ._cecfe };

// Cell is a table cell within a document (not a spreadsheet)
type Cell struct{_eeca *Document ;_cbd *_aag .CT_Tc ;};

// WatermarkText is watermark text within the document.
type WatermarkText struct{_babcb *_aag .CT_Picture ;_gbaabc *_gg .TextpathStyle ;_eafacd *_ccc .Shape ;_daffb *_ccc .Shapetype ;};

// InlineDrawing is an inlined image within a run.
type InlineDrawing struct{_fdae *Document ;_eeaa *_aag .WdInline ;};

// SetGlowImageEffect sets the glow image effect.
func (_dgf AnchoredDrawing )SetGlowImageEffect (radius _bf .Distance ,c _ff .Color ){_gfc :=_bf .ToEMU (float64 (radius ));for _ ,_ga :=range _dgf ._ae .Graphic .GraphicData .Any {if _abe ,_fgc :=_ga .(*_ggg .Pic );_fgc {_dgf .initializeEffectList (_abe .SpPr );
_abe .SpPr .EffectPropertiesChoice .EffectLst .Glow =_da .NewCT_GlowEffect ();_abe .SpPr .EffectPropertiesChoice .EffectLst .Glow .RadAttr =&_gfc ;_abe .SpPr .EffectPropertiesChoice .EffectLst .Glow .SrgbClr =_da .NewCT_SRgbColor ();_abe .SpPr .EffectPropertiesChoice .EffectLst .Glow .SrgbClr .ValAttr =*c .AsRGBString ();
};};_dgf .setEffectExtent (_gfc ,_gfc ,_gfc ,_gfc );};

// Imprint returns true if run imprint is on.
func (_gbbd RunProperties )Imprint ()bool {return _faabg (_gbbd ._gbeff .Imprint )};

// Save writes the document to an io.Writer in the Zip package format.
func (_gbf *Document )Save (w _e .Writer )error {return _gbf .save (w ,_gbf ._fegf )};

// Underline returns the type of run underline.
func (_abaf RunProperties )Underline ()_aag .ST_Underline {if _bgedb :=_abaf ._gbeff .U ;_bgedb !=nil {return _bgedb .ValAttr ;};return 0;};

// RightToLeft returns true if run text goes from right to left.
func (_cacbe RunProperties )RightToLeft ()bool {return _faabg (_cacbe ._gbeff .Rtl )};

// TextItem is used for keeping text with references to a paragraph and run or a table, a row and a cell where it is located.
type TextItem struct{Text string ;DrawingInfo *DrawingInfo ;Paragraph *_aag .CT_P ;Hyperlink *_aag .CT_Hyperlink ;Run *_aag .CT_R ;TableInfo *TableInfo ;};func _faabg (_gece *_aag .CT_OnOff )bool {return _gece !=nil };func _dabfd (_geba string )mergeFieldInfo {_gcgcc :=[]string {};
_gaef :=_ec .Buffer {};_eacd :=-1;for _dfecf ,_dcaba :=range _geba {switch _dcaba {case ' ':if _gaef .Len ()!=0{_gcgcc =append (_gcgcc ,_gaef .String ());};_gaef .Reset ();case '"':if _eacd !=-1{_gcgcc =append (_gcgcc ,_geba [_eacd +1:_dfecf ]);_eacd =-1;
}else {_eacd =_dfecf ;};default:_gaef .WriteRune (_dcaba );};};if _gaef .Len ()!=0{_gcgcc =append (_gcgcc ,_gaef .String ());};_dfaba :=mergeFieldInfo {};for _babcd :=0;_babcd < len (_gcgcc )-1;_babcd ++{_dgfbd :=_gcgcc [_babcd ];switch _dgfbd {case "\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044":_dfaba ._bggcd =_gcgcc [_babcd +1];
_babcd ++;case "\u005c\u0066":_dfaba ._baga =_gcgcc [_babcd +1];_babcd ++;case "\u005c\u0062":_dfaba ._fbdf =_gcgcc [_babcd +1];_babcd ++;case "\u005c\u002a":switch _gcgcc [_babcd +1]{case "\u0055\u0070\u0070e\u0072":_dfaba ._bcdf =true ;case "\u004c\u006f\u0077e\u0072":_dfaba ._cgagb =true ;
case "\u0043\u0061\u0070\u0073":_dfaba ._gcbd =true ;case "\u0046\u0069\u0072\u0073\u0074\u0043\u0061\u0070":_dfaba ._gceb =true ;};_babcd ++;};};return _dfaba ;};

// X returns the inner wrapped type
func (_gfcd CellBorders )X ()*_aag .CT_TcBorders {return _gfcd ._cde };func (_aaaa Run )parseHTMLTag (_dbgcg string )string {_gagb :=_f .NewDecoder (_ec .NewReader ([]byte (_dbgcg )));_feaa :="";_cbgee :=[]_f .StartElement {};for {_gagbc ,_afebdd :=_gagb .Token ();
if _afebdd !=nil {break ;};switch _efaaa :=_gagbc .(type ){case _f .StartElement :_cbgee =append (_cbgee ,_efaaa );case _f .EndElement :if _cbgee [len (_cbgee )-1].Name .Local ==_efaaa .Name .Local {_ageaf :=_cbgee [len (_cbgee )-1];_cbgee =_cbgee [:len (_cbgee )-1];
switch _efaaa .Name .Local {case "\u0062","\u0073\u0074\u0072\u006f\u006e\u0067":_aaaa .Properties ().SetBold (true );case "\u0069","\u0065\u006d":_aaaa .Properties ().SetItalic (true );case "\u0075":_deedca :=_ff .Black ;for _ ,_bbfge :=range _ageaf .Attr {if _bbfge .Name .Local =="\u0063\u006f\u006co\u0072"{if _faaca ,_aefb :=_ff .ColorMap [_bbfge .Value ];
_aefb {_deedca =_faaca ;};};};_aaaa .Properties ().SetUnderline (_aag .ST_UnderlineSingle ,_deedca );case "\u0073\u0074\u0072\u0069\u006b\u0065":_aaaa .Properties ().SetStrikeThrough (true );case "\u006d\u0061\u0072\u006b":_bgaaa :=_aag .ST_HighlightColorYellow ;
for _ ,_dadde :=range _ageaf .Attr {if _dadde .Name .Local =="\u0063\u006f\u006co\u0072"{if _gacfd ,_fada :=_ff .HighlightColorMap [_dadde .Value ];_fada {_bgaaa =_gacfd ;};};};_aaaa .Properties ().SetHighlight (_bgaaa );case "\u0073\u0075\u0062":_aaaa .Properties ().SetVerticalAlignment (_bac .ST_VerticalAlignRunSubscript );
case "\u0073\u0075\u0070":_aaaa .Properties ().SetVerticalAlignment (_bac .ST_VerticalAlignRunSuperscript );};};case _f .CharData :_feaa +=string (_efaaa );};};return _feaa ;};

// SetXOffset sets the X offset for an image relative to the origin.
func (_eg AnchoredDrawing )SetXOffset (x _bf .Distance ){_eg ._ae .PositionH .PosHChoice =&_aag .WdCT_PosHChoice {};_eg ._ae .PositionH .PosHChoice .PosOffset =_c .Int32 (int32 (x /_bf .EMU ));};

// Footers returns the footers defined in the document.
func (_fed *Document )Footers ()[]Footer {_gffd :=[]Footer {};for _ ,_cca :=range _fed ._cfg {_gffd =append (_gffd ,Footer {_fed ,_cca });};return _gffd ;};

// SetStartIndent controls the start indentation.
func (_gfda ParagraphProperties )SetStartIndent (m _bf .Distance ){if _gfda ._ggac .Ind ==nil {_gfda ._ggac .Ind =_aag .NewCT_Ind ();};if m ==_bf .Zero {_gfda ._ggac .Ind .StartAttr =nil ;}else {_gfda ._ggac .Ind .StartAttr =&_aag .ST_SignedTwipsMeasure {};
_gfda ._ggac .Ind .StartAttr .Int64 =_c .Int64 (int64 (m /_bf .Twips ));};};

// SetThemeShade sets the shade based off the theme color.
func (_ead Color )SetThemeShade (s uint8 ){_addc :=_db .Sprintf ("\u0025\u0030\u0032\u0078",s );_ead ._gec .ThemeShadeAttr =&_addc ;};

// SetAlignment set alignment of paragraph.
func (_faafa Paragraph )SetAlignment (alignment _aag .ST_Jc ){_faafa .ensurePPr ();if _faafa ._dbgba .PPr .Jc ==nil {_faafa ._dbgba .PPr .Jc =_aag .NewCT_Jc ();};_faafa ._dbgba .PPr .Jc .ValAttr =alignment ;};func (_ddba *Document )appendParagraph (_gedac *Paragraph ,_edgb Paragraph ,_dcb bool )Paragraph {_bae :=_aag .NewEG_BlockLevelElts ();
_ddba ._ffb .Body .EG_BlockLevelElts =append (_ddba ._ffb .Body .EG_BlockLevelElts ,_bae );_aebg :=_aag .NewEG_ContentBlockContent ();_bae .BlockLevelEltsChoice .EG_ContentBlockContent =append (_bae .BlockLevelEltsChoice .EG_ContentBlockContent ,_aebg );
if _gedac !=nil {_eae :=_gedac .X ();for _ ,_fgcf :=range _ddba ._ffb .Body .EG_BlockLevelElts {for _ ,_cbdca :=range _fgcf .BlockLevelEltsChoice .EG_ContentBlockContent {for _cbfa ,_bdec :=range _cbdca .ContentBlockContentChoice .P {if _bdec ==_eae {_bee :=_edgb .X ();
_cbdca .ContentBlockContentChoice .P =append (_cbdca .ContentBlockContentChoice .P ,nil );if _dcb {copy (_cbdca .ContentBlockContentChoice .P [_cbfa +1:],_cbdca .ContentBlockContentChoice .P [_cbfa :]);_cbdca .ContentBlockContentChoice .P [_cbfa ]=_bee ;
}else {copy (_cbdca .ContentBlockContentChoice .P [_cbfa +2:],_cbdca .ContentBlockContentChoice .P [_cbfa +1:]);_cbdca .ContentBlockContentChoice .P [_cbfa +1]=_bee ;};break ;};};for _ ,_fggg :=range _cbdca .ContentBlockContentChoice .Tbl {for _ ,_gee :=range _fggg .EG_ContentRowContent {for _ ,_ebea :=range _gee .ContentRowContentChoice .Tr {for _ ,_cfbe :=range _ebea .EG_ContentCellContent {for _ ,_afee :=range _cfbe .ContentCellContentChoice .Tc {for _ ,_egbc :=range _afee .EG_BlockLevelElts {for _ ,_dcfe :=range _egbc .BlockLevelEltsChoice .EG_ContentBlockContent {for _faee ,_agbb :=range _dcfe .ContentBlockContentChoice .P {if _agbb ==_eae {_egbd :=_edgb .X ();
_dcfe .ContentBlockContentChoice .P =append (_dcfe .ContentBlockContentChoice .P ,nil );if _dcb {copy (_dcfe .ContentBlockContentChoice .P [_faee +1:],_dcfe .ContentBlockContentChoice .P [_faee :]);_dcfe .ContentBlockContentChoice .P [_faee ]=_egbd ;}else {copy (_dcfe .ContentBlockContentChoice .P [_faee +2:],_dcfe .ContentBlockContentChoice .P [_faee +1:]);
_dcfe .ContentBlockContentChoice .P [_faee +1]=_egbd ;};break ;};};};};};};};};};if _cbdca .ContentBlockContentChoice .Sdt !=nil &&_cbdca .ContentBlockContentChoice .Sdt .SdtContent !=nil {for _ ,_dbbc :=range _cbdca .ContentBlockContentChoice .Sdt .SdtContent .EG_ContentBlockContent {for _cee ,_cbae :=range _dbbc .ContentBlockContentChoice .P {if _cbae ==_eae {_ggga :=_edgb .X ();
_dbbc .ContentBlockContentChoice .P =append (_dbbc .ContentBlockContentChoice .P ,nil );if _dcb {copy (_dbbc .ContentBlockContentChoice .P [_cee +1:],_dbbc .ContentBlockContentChoice .P [_cee :]);_dbbc .ContentBlockContentChoice .P [_cee ]=_ggga ;}else {copy (_dbbc .ContentBlockContentChoice .P [_cee +2:],_dbbc .ContentBlockContentChoice .P [_cee +1:]);
_dbbc .ContentBlockContentChoice .P [_cee +1]=_ggga ;};break ;};};};};};};}else {_aebg .ContentBlockContentChoice .P =append (_aebg .ContentBlockContentChoice .P ,_edgb .X ());};_bag :=_edgb .Properties ();if _cgbc ,_ggbcf :=_bag .Section ();_ggbcf {var (_aeea map[string ]string ;
_fdcg map[string ]string ;);_agcd :=_cgbc .X ().EG_HdrFtrReferences ;for _ ,_ecb :=range _agcd {if _ecb .HdrFtrReferencesChoice .HeaderReference !=nil {_aeea =map[string ]string {_ecb .HdrFtrReferencesChoice .HeaderReference .IdAttr :_cgbc ._cfbf ._eeb .GetTargetByRelId (_ecb .HdrFtrReferencesChoice .HeaderReference .IdAttr )};
};if _ecb .HdrFtrReferencesChoice .FooterReference !=nil {_fdcg =map[string ]string {_ecb .HdrFtrReferencesChoice .FooterReference .IdAttr :_cgbc ._cfbf ._eeb .GetTargetByRelId (_ecb .HdrFtrReferencesChoice .FooterReference .IdAttr )};};};var _ecf map[int ]_cd .ImageRef ;
for _ ,_bcdc :=range _cgbc ._cfbf .Headers (){for _cgge ,_cdaf :=range _aeea {_bfad :=_db .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",(_bcdc .Index ()+1));if _bfad ==_cdaf {_dega :=_db .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",_bcdc .Index ());
_ddba ._acbb =append (_ddba ._acbb ,_bcdc .X ());_ceed :=_ddba ._eeb .AddRelationship (_dega ,_c .HeaderType );_ceed .SetID (_cgge );_ddba .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_dega ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");
_ddba ._eea =append (_ddba ._eea ,_cd .NewRelationships ());_acdd :=_bcdc .Paragraphs ();for _ ,_gbc :=range _acdd {for _ ,_bebg :=range _gbc .Runs (){_dbab :=_bebg .DrawingAnchored ();for _ ,_ceedb :=range _dbab {if _gdee ,_dgag :=_ceedb .GetImage ();
_dgag {_ecf =map[int ]_cd .ImageRef {_bcdc .Index ():_gdee };};};_fffa :=_bebg .DrawingInline ();for _ ,_dcee :=range _fffa {if _edagb ,_beba :=_dcee .GetImage ();_beba {_ecf =map[int ]_cd .ImageRef {_bcdc .Index ():_edagb };};};};};};};};for _bebgd ,_dcad :=range _ecf {for _ ,_baffg :=range _ddba .Headers (){if (_baffg .Index ()+1)==_bebgd {_afeb ,_geg :=_cd .ImageFromFile (_dcad .Path ());
if _geg !=nil {_dg .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_geg );};if _ ,_geg =_baffg .AddImage (_afeb );_geg !=nil {_dg .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_geg );
};};for _ ,_dge :=range _baffg .Paragraphs (){if _gfaa ,_dbcg :=_cgbc ._cfbf .Styles .SearchStyleById (_dge .Style ());_dbcg {if _ ,_dbeg :=_ddba .Styles .SearchStyleById (_dge .Style ());!_dbeg {_ddba .Styles .InsertStyle (_gfaa );};};};};};var _gabd map[int ]_cd .ImageRef ;
for _ ,_efg :=range _cgbc ._cfbf .Footers (){for _gbcc ,_ageb :=range _fdcg {_bfcb :=_db .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",(_efg .Index ()+1));if _bfcb ==_ageb {_fdcd :=_db .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",_efg .Index ());
_ddba ._cfg =append (_ddba ._cfg ,_efg .X ());_cebd :=_ddba ._eeb .AddRelationship (_fdcd ,_c .FooterType );_cebd .SetID (_gbcc );_ddba .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_fdcd ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");
_ddba ._abg =append (_ddba ._abg ,_cd .NewRelationships ());_bdaf :=_efg .Paragraphs ();for _ ,_afd :=range _bdaf {for _ ,_gced :=range _afd .Runs (){_aecb :=_gced .DrawingAnchored ();for _ ,_caag :=range _aecb {if _abef ,_bdge :=_caag .GetImage ();_bdge {_gabd =map[int ]_cd .ImageRef {_efg .Index ():_abef };
};};_ageba :=_gced .DrawingInline ();for _ ,_edfc :=range _ageba {if _acde ,_gca :=_edfc .GetImage ();_gca {_gabd =map[int ]_cd .ImageRef {_efg .Index ():_acde };};};};};};};};for _ggfb ,_abbf :=range _gabd {for _ ,_fafa :=range _ddba .Footers (){if (_fafa .Index ()+1)==_ggfb {_aafe ,_fdcef :=_cd .ImageFromFile (_abbf .Path ());
if _fdcef !=nil {_dg .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_fdcef );};if _ ,_fdcef =_fafa .AddImage (_aafe );_fdcef !=nil {_dg .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_fdcef );
};};for _ ,_bggd :=range _fafa .Paragraphs (){if _bbca ,_ffcb :=_cgbc ._cfbf .Styles .SearchStyleById (_bggd .Style ());_ffcb {if _ ,_gcee :=_ddba .Styles .SearchStyleById (_bggd .Style ());!_gcee {_ddba .Styles .InsertStyle (_bbca );};};};};};};_baad :=_edgb .Numbering ();
_ddba .Numbering ._gbda .AbstractNum =append (_ddba .Numbering ._gbda .AbstractNum ,_baad ._gbda .AbstractNum ...);_ddba .Numbering ._gbda .Num =append (_ddba .Numbering ._gbda .Num ,_baad ._gbda .Num ...);return Paragraph {_ddba ,_edgb .X ()};};

// SetTop sets the top border to a specified type, color and thickness.
func (_bea CellBorders )SetTop (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_bea ._cde .Top =_aag .NewCT_Border ();_ebdgf (_bea ._cde .Top ,t ,c ,thickness );};

// Settings controls the document settings.
type Settings struct{_cecfe *_aag .Settings };

// ComplexSizeValue returns the value of run font size for complex fonts in points.
func (_fccf RunProperties )ComplexSizeValue ()float64 {if _ffffb :=_fccf ._gbeff .SzCs ;_ffffb !=nil {_dbdd :=_ffffb .ValAttr ;if _dbdd .ST_UnsignedDecimalNumber !=nil {return float64 (*_dbdd .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// AddHyperLink adds a new hyperlink to a parapgraph.
func (_cffe Paragraph )AddHyperLink ()HyperLink {_ecbaa :=_aag .NewEG_PContent ();_cffe ._dbgba .EG_PContent =append (_cffe ._dbgba .EG_PContent ,_ecbaa );_ecbaa .PContentChoice .Hyperlink =_aag .NewCT_Hyperlink ();return HyperLink {_cffe ._gbga ,_ecbaa .PContentChoice .Hyperlink };
};

// Bold returns true if run font is bold.
func (_defe RunProperties )Bold ()bool {_ccfa :=_defe ._gbeff ;return _faabg (_ccfa .B )||_faabg (_ccfa .BCs );};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_gegfe RunProperties )SizeMeasure ()string {if _abfb :=_gegfe ._gbeff .Sz ;_abfb !=nil {_edeg :=_abfb .ValAttr ;if _edeg .ST_PositiveUniversalMeasure !=nil {return *_edeg .ST_PositiveUniversalMeasure ;};};return "";};

// AddStyle adds a new empty style, if styleID is already exists, it will return the style.
func (_cfdbd Styles )AddStyle (styleID string ,t _aag .ST_StyleType ,isDefault bool )Style {if _gabgb ,_dccc :=_cfdbd .SearchStyleById (styleID );_dccc {return _gabgb ;};_ceffc :=_aag .NewCT_Style ();_ceffc .TypeAttr =t ;if isDefault {_ceffc .DefaultAttr =&_bac .ST_OnOff {};
_ceffc .DefaultAttr .Bool =_c .Bool (isDefault );};_ceffc .StyleIdAttr =_c .String (styleID );_cfdbd ._gcdgc .Style =append (_cfdbd ._gcdgc .Style ,_ceffc );return Style {_ceffc };};

// Properties returns the cell properties.
func (_gddc Cell )Properties ()CellProperties {if _gddc ._cbd .TcPr ==nil {_gddc ._cbd .TcPr =_aag .NewCT_TcPr ();};return CellProperties {_gddc ._cbd .TcPr };};

// Index returns the index of the footer within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_eaef Footer )Index ()int {for _effbd ,_dgdce :=range _eaef ._gegg ._cfg {if _dgdce ==_eaef ._degea {return _effbd ;};};return -1;};

// ComplexSizeValue returns the value of paragraph font size for complex fonts in points.
func (_ccdc ParagraphProperties )ComplexSizeValue ()float64 {if _befa :=_ccdc ._ggac .RPr .SzCs ;_befa !=nil {_fbegb :=_befa .ValAttr ;if _fbegb .ST_UnsignedDecimalNumber !=nil {return float64 (*_fbegb .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetContextualSpacing controls whether to Ignore Spacing Above and Below When
// Using Identical Styles
func (_fbfae ParagraphStyleProperties )SetContextualSpacing (b bool ){if !b {_fbfae ._aefec .ContextualSpacing =nil ;}else {_fbfae ._aefec .ContextualSpacing =_aag .NewCT_OnOff ();};};

// AddFootnote will create a new footnote and attach it to the Paragraph in the
// location at the end of the previous run (footnotes create their own run within
// the paragraph). The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the footnote later.
func (_dgfd Paragraph )AddFootnote (text string )Footnote {var _bcda int64 ;if _dgfd ._gbga .HasFootnotes (){for _ ,_deff :=range _dgfd ._gbga .Footnotes (){if _deff .id ()> _bcda {_bcda =_deff .id ();};};_bcda ++;}else {_dgfd ._gbga .addFootnotes ();_bcda =1;
};_dcgc :=_aag .NewCT_FtnEdn ();_cdbfe :=_aag .NewCT_FtnEdnRef ();_cdbfe .IdAttr =_bcda ;_dgfd ._gbga ._fbgg .CT_Footnotes .Footnote =append (_dgfd ._gbga ._fbgg .CT_Footnotes .Footnote ,_dcgc );_efbgg :=_dgfd .AddRun ();_bega :=_efbgg .Properties ();_bega .SetStyle (_ccge );
_efbgg ._dcgfd .EG_RunInnerContent =[]*_aag .EG_RunInnerContent {_aag .NewEG_RunInnerContent ()};_efbgg ._dcgfd .EG_RunInnerContent [0].RunInnerContentChoice .FootnoteReference =_cdbfe ;_bfacca :=Footnote {_dgfd ._gbga ,_dcgc };_bfacca ._deedc .IdAttr =_bcda ;
_bfacca ._deedc .EG_BlockLevelElts =[]*_aag .EG_BlockLevelElts {_aag .NewEG_BlockLevelElts ()};_dgdd :=_bfacca .AddParagraph ();_dgdd .Properties ().SetStyle (FootnoteTextStyleId );_dgdd ._dbgba .PPr .RPr =_aag .NewCT_ParaRPr ();_bbbg :=_dgdd .AddRun ();
_dcba :=_bbbg .Properties ();_dcba .SetStyle (_ccge );_bbbg .AddFootnoteReference ();_gebcg :=_dgdd .AddRun ();_gebcg .AddText ("\u0020");_gebcg =_dgdd .AddRun ();_gebcg .AddText (text );return _bfacca ;};

// Clear clears the styes.
func (_gbfef Styles )Clear (){_gbfef ._gcdgc .DocDefaults =nil ;_gbfef ._gcdgc .LatentStyles =nil ;_gbfef ._gcdgc .Style =nil ;};

// CellMargins are the margins for an individual cell.
type CellMargins struct{_fgef *_aag .CT_TcMar };

// VerticalAlign returns the value of paragraph vertical align.
func (_aabdg ParagraphProperties )VerticalAlignment ()_bac .ST_VerticalAlignRun {if _dbabfe :=_aabdg ._ggac .RPr .VertAlign ;_dbabfe !=nil {return _dbabfe .ValAttr ;};return 0;};func _cagg (_baeg *_da .CT_Blip ,_fffg map[string ]string ){if _baeg .EmbedAttr !=nil {if _cdaa ,_gefa :=_fffg [*_baeg .EmbedAttr ];
_gefa {*_baeg .EmbedAttr =_cdaa ;};};};

// StructuredDocumentTags returns the structured document tags in the document
// which are commonly used in document templates.
func (_bgab *Document )StructuredDocumentTags ()[]StructuredDocumentTag {_cdgg :=[]StructuredDocumentTag {};for _ ,_aagd :=range _bgab ._ffb .Body .EG_BlockLevelElts {for _ ,_bdbe :=range _aagd .BlockLevelEltsChoice .EG_ContentBlockContent {if _bdbe .ContentBlockContentChoice .Sdt !=nil {_cdgg =append (_cdgg ,StructuredDocumentTag {_bgab ,_bdbe .ContentBlockContentChoice .Sdt });
};};};return _cdgg ;};

// GetImage returns the ImageRef associated with an AnchoredDrawing.
func (_bc AnchoredDrawing )GetImage ()(_cd .ImageRef ,bool ){_gc :=_bc ._ae .Graphic .GraphicData .Any ;if len (_gc )> 0{_bd ,_cb :=_gc [0].(*_ggg .Pic );if _cb {if _bd .BlipFill !=nil &&_bd .BlipFill .Blip !=nil &&_bd .BlipFill .Blip .EmbedAttr !=nil {return _bc ._cab .GetImageByRelID (*_bd .BlipFill .Blip .EmbedAttr );
};};};return _cd .ImageRef {},false ;};func _bgcg (_ceec []*_aag .CT_P ,_ebbfa *TableInfo ,_fegfe *DrawingInfo )[]TextItem {_gdca :=[]TextItem {};for _ ,_bced :=range _ceec {_gdca =append (_gdca ,_gdcd (_bced ,nil ,_ebbfa ,_fegfe ,_bced .EG_PContent )...);
};return _gdca ;};

// AddSection adds a new document section with an optional section break.  If t
// is ST_SectionMarkUnset, then no break will be inserted.
func (_ffgbb ParagraphProperties )AddSection (t _aag .ST_SectionMark )Section {_ffgbb ._ggac .SectPr =_aag .NewCT_SectPr ();if t !=_aag .ST_SectionMarkUnset {_ffgbb ._ggac .SectPr .Type =_aag .NewCT_SectType ();_ffgbb ._ggac .SectPr .Type .ValAttr =t ;
};return Section {_ffgbb ._ffaef ,_ffgbb ._ggac .SectPr };};

// Text return node and its child text,
func (_gaad *Node )Text ()string {_dbbd :=_ec .NewBuffer ([]byte {});switch _fcdd :=_gaad .X ().(type ){case *Paragraph :for _ ,_cfeg :=range _fcdd .Runs (){if _cfeg .Text ()!=""{_dbbd .WriteString (_cfeg .Text ());_dbbd .WriteString ("\u000a");};};};for _ ,_ceddb :=range _gaad .Children {_dbbd .WriteString (_ceddb .Text ());
};return _dbbd .String ();};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_cggc *Document )AddImage (i _cd .Image )(_cd .ImageRef ,error ){_egeb :=_cd .MakeImageRef (i ,&_cggc .DocBase ,_cggc ._eeb );if i .Data ==nil &&i .Path ==""{return _egeb ,_cg .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");
};if i .Format ==""{return _egeb ,_cg .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _egeb ,_cg .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");
};if i .Path !=""{_abcd :=_bg .Add (i .Path );if _abcd !=nil {return _egeb ,_abcd ;};};_cggc .Images =append (_cggc .Images ,_egeb );_cfae :=_db .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_cggc .Images ),i .Format );
_fgggc :=_cggc ._eeb .AddRelationship (_cfae ,_c .ImageType );_cggc .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_cggc .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");
_cggc .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_cggc .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_cggc .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );
_egeb .SetRelID (_fgggc .X ().IdAttr );_egeb .SetTarget (_cfae );return _egeb ,nil ;};func (_ede *Document )appendTable (_geb *Paragraph ,_dbgc Table ,_bdbc bool )Table {_dgff :=_ede ._ffb .Body ;_cbdf :=_aag .NewEG_BlockLevelElts ();_ede ._ffb .Body .EG_BlockLevelElts =append (_ede ._ffb .Body .EG_BlockLevelElts ,_cbdf );
_def :=_aag .NewEG_ContentBlockContent ();_cbdf .BlockLevelEltsChoice .EG_ContentBlockContent =append (_cbdf .BlockLevelEltsChoice .EG_ContentBlockContent ,_def );if _geb !=nil {_acbg :=_geb .X ();for _aebbg ,_cefe :=range _dgff .EG_BlockLevelElts {for _ ,_dddd :=range _cefe .BlockLevelEltsChoice .EG_ContentBlockContent {for _dcac ,_gcge :=range _def .ContentBlockContentChoice .P {if _gcge ==_acbg {_geda :=_dbgc .X ();
_dfag :=_aag .NewEG_BlockLevelElts ();_fgeb :=_aag .NewEG_ContentBlockContent ();_dfag .BlockLevelEltsChoice .EG_ContentBlockContent =append (_dfag .BlockLevelEltsChoice .EG_ContentBlockContent ,_fgeb );_fgeb .ContentBlockContentChoice .Tbl =append (_fgeb .ContentBlockContentChoice .Tbl ,_geda );
_dgff .EG_BlockLevelElts =append (_dgff .EG_BlockLevelElts ,nil );if _bdbc {copy (_dgff .EG_BlockLevelElts [_aebbg +1:],_dgff .EG_BlockLevelElts [_aebbg :]);_dgff .EG_BlockLevelElts [_aebbg ]=_dfag ;if _dcac !=0{_bace :=_aag .NewEG_BlockLevelElts ();_feaf :=_aag .NewEG_ContentBlockContent ();
_bace .BlockLevelEltsChoice .EG_ContentBlockContent =append (_bace .BlockLevelEltsChoice .EG_ContentBlockContent ,_feaf );_feaf .ContentBlockContentChoice .P =_dddd .ContentBlockContentChoice .P [:_dcac ];_dgff .EG_BlockLevelElts =append (_dgff .EG_BlockLevelElts ,nil );
copy (_dgff .EG_BlockLevelElts [_aebbg +1:],_dgff .EG_BlockLevelElts [_aebbg :]);_dgff .EG_BlockLevelElts [_aebbg ]=_bace ;};_dddd .ContentBlockContentChoice .P =_dddd .ContentBlockContentChoice .P [_dcac :];}else {copy (_dgff .EG_BlockLevelElts [_aebbg +2:],_dgff .EG_BlockLevelElts [_aebbg +1:]);
_dgff .EG_BlockLevelElts [_aebbg +1]=_dfag ;if _dcac !=len (_dddd .ContentBlockContentChoice .P )-1{_cdc :=_aag .NewEG_BlockLevelElts ();_dcfa :=_aag .NewEG_ContentBlockContent ();_cdc .BlockLevelEltsChoice .EG_ContentBlockContent =append (_cdc .BlockLevelEltsChoice .EG_ContentBlockContent ,_dcfa );
_dcfa .ContentBlockContentChoice .P =_dddd .ContentBlockContentChoice .P [_dcac +1:];_dgff .EG_BlockLevelElts =append (_dgff .EG_BlockLevelElts ,nil );copy (_dgff .EG_BlockLevelElts [_aebbg +3:],_dgff .EG_BlockLevelElts [_aebbg +2:]);_dgff .EG_BlockLevelElts [_aebbg +2]=_cdc ;
};_dddd .ContentBlockContentChoice .P =_dddd .ContentBlockContentChoice .P [:_dcac +1];};break ;};};for _ ,_edb :=range _dddd .ContentBlockContentChoice .Tbl {_efaa :=_bcc (_edb ,_acbg ,_bdbc );if _efaa !=nil {break ;};};};};}else {_def .ContentBlockContentChoice .Tbl =append (_def .ContentBlockContentChoice .Tbl ,_dbgc .X ());
};return Table {_ede ,_dbgc .X ()};};

// FormFields extracts all the fields from a document.  They can then be
// manipulated via the methods on the field and the document saved.
func (_egac *Document )FormFields ()[]FormField {_bgdb :=[]FormField {};for _ ,_edde :=range _egac .Paragraphs (){_fgdg :=_edde .Runs ();for _cbcd ,_ececg :=range _fgdg {for _ ,_efec :=range _ececg ._dcgfd .EG_RunInnerContent {if _efec .RunInnerContentChoice .FldChar ==nil ||_efec .RunInnerContentChoice .FldChar .FldCharChoice .FfData ==nil {continue ;
};if _efec .RunInnerContentChoice .FldChar .FldCharTypeAttr ==_aag .ST_FldCharTypeBegin {_gfdf :=false ;for _ ,_acba :=range _efec .RunInnerContentChoice .FldChar .FldCharChoice .FfData .FFDataChoice {if _acba .Name ==nil ||_acba .Name .ValAttr ==nil {continue ;
};_gfdf =true ;break ;};if !_gfdf {continue ;};_deba :=FormField {_daga :_efec .RunInnerContentChoice .FldChar .FldCharChoice .FfData };for _ ,_cead :=range _efec .RunInnerContentChoice .FldChar .FldCharChoice .FfData .FFDataChoice {if _cead .TextInput ==nil {continue ;
};for _afbe :=_cbcd +1;_afbe < len (_fgdg )-1;_afbe ++{if len (_fgdg [_afbe ]._dcgfd .EG_RunInnerContent )==0{continue ;};_dafedb :=_fgdg [_afbe ]._dcgfd .EG_RunInnerContent [0];if _dafedb .RunInnerContentChoice .FldChar !=nil &&_dafedb .RunInnerContentChoice .FldChar .FldCharTypeAttr ==_aag .ST_FldCharTypeSeparate {if len (_fgdg [_afbe +1]._dcgfd .EG_RunInnerContent )==0{continue ;
};if _fgdg [_afbe +1]._dcgfd .EG_RunInnerContent [0].RunInnerContentChoice .FldChar ==nil {_deba ._fcece =_fgdg [_afbe +1]._dcgfd .EG_RunInnerContent [0];break ;};};};};_bgdb =append (_bgdb ,_deba );};};};};for _ ,_dfgf :=range _egac .Headers (){for _ ,_beeb :=range _dfgf .Paragraphs (){_ffcd :=_beeb .Runs ();
for _efcd ,_cafdf :=range _ffcd {for _ ,_bcba :=range _cafdf ._dcgfd .EG_RunInnerContent {if _bcba .RunInnerContentChoice .FldChar ==nil ||_bcba .RunInnerContentChoice .FldChar .FldCharChoice .FfData ==nil {continue ;};if _bcba .RunInnerContentChoice .FldChar .FldCharTypeAttr ==_aag .ST_FldCharTypeBegin {_abbd :=false ;
for _ ,_adf :=range _bcba .RunInnerContentChoice .FldChar .FldCharChoice .FfData .FFDataChoice {if _adf .Name ==nil ||_adf .Name .ValAttr ==nil {continue ;};_abbd =true ;break ;};if !_abbd {continue ;};_baag :=FormField {_daga :_bcba .RunInnerContentChoice .FldChar .FldCharChoice .FfData };
for _ ,_bffdc :=range _bcba .RunInnerContentChoice .FldChar .FldCharChoice .FfData .FFDataChoice {if _bffdc .TextInput ==nil {continue ;};for _bgcf :=_efcd +1;_bgcf < len (_ffcd )-1;_bgcf ++{if len (_ffcd [_bgcf ]._dcgfd .EG_RunInnerContent )==0{continue ;
};_dgda :=_ffcd [_bgcf ]._dcgfd .EG_RunInnerContent [0];if _dgda .RunInnerContentChoice .FldChar !=nil &&_dgda .RunInnerContentChoice .FldChar .FldCharTypeAttr ==_aag .ST_FldCharTypeSeparate {if len (_ffcd [_bgcf +1]._dcgfd .EG_RunInnerContent )==0{continue ;
};if _ffcd [_bgcf +1]._dcgfd .EG_RunInnerContent [0].RunInnerContentChoice .FldChar ==nil {_baag ._fcece =_ffcd [_bgcf +1]._dcgfd .EG_RunInnerContent [0];break ;};};};};_bgdb =append (_bgdb ,_baag );};};};};};for _ ,_aafc :=range _egac .Footers (){for _ ,_gefcb :=range _aafc .Paragraphs (){_beaa :=_gefcb .Runs ();
for _bfe ,_bcabd :=range _beaa {for _ ,_dgdf :=range _bcabd ._dcgfd .EG_RunInnerContent {if _dgdf .RunInnerContentChoice .FldChar ==nil ||_dgdf .RunInnerContentChoice .FldChar .FldCharChoice .FfData ==nil {continue ;};if _dgdf .RunInnerContentChoice .FldChar .FldCharTypeAttr ==_aag .ST_FldCharTypeBegin {_cbdcg :=false ;
for _ ,_bfcbe :=range _dgdf .RunInnerContentChoice .FldChar .FldCharChoice .FfData .FFDataChoice {if _bfcbe .Name ==nil ||_bfcbe .Name .ValAttr ==nil {continue ;};_cbdcg =true ;break ;};if !_cbdcg {continue ;};_gdaa :=FormField {_daga :_dgdf .RunInnerContentChoice .FldChar .FldCharChoice .FfData };
for _ ,_cdbfd :=range _dgdf .RunInnerContentChoice .FldChar .FldCharChoice .FfData .FFDataChoice {if _cdbfd .TextInput ==nil {continue ;};for _acbf :=_bfe +1;_acbf < len (_beaa )-1;_acbf ++{if len (_beaa [_acbf ]._dcgfd .EG_RunInnerContent )==0{continue ;
};_aacg :=_beaa [_acbf ]._dcgfd .EG_RunInnerContent [0];if _aacg .RunInnerContentChoice .FldChar !=nil &&_aacg .RunInnerContentChoice .FldChar .FldCharTypeAttr ==_aag .ST_FldCharTypeSeparate {if len (_beaa [_acbf +1]._dcgfd .EG_RunInnerContent )==0{continue ;
};if _beaa [_acbf +1]._dcgfd .EG_RunInnerContent [0].RunInnerContentChoice .FldChar ==nil {_gdaa ._fcece =_beaa [_acbf +1]._dcgfd .EG_RunInnerContent [0];break ;};};};};_bgdb =append (_bgdb ,_gdaa );};};};};};return _bgdb ;};

// CellBorders are the borders for an individual
type CellBorders struct{_cde *_aag .CT_TcBorders };

// Header is a header for a document section.
type Header struct{_dcae *Document ;_dcaf *_aag .Hdr ;};func (_ecgc *Document )putNode (_ggcf ,_eafad Node ,_edfd bool )bool {_ecgc .insertImageFromNode (_eafad );_ecgc .insertStyleFromNode (_eafad );switch _befd :=_eafad ._geed .(type ){case *Paragraph :if _abdd ,_gcaf :=_ggcf .X ().(*Paragraph );
_gcaf {_ecgc .appendParagraph (_abdd ,*_befd ,_edfd );return true ;}else {for _ ,_bfac :=range _ggcf .Children {if _ddf :=_ecgc .putNode (_bfac ,_eafad ,_edfd );_ddf {break ;};};};case *Table :if _aagdb ,_ccbf :=_ggcf .X ().(*Paragraph );_ccbf {_cfeb :=_ecgc .appendTable (_aagdb ,*_befd ,_edfd );
_cfeb ._bgcdd =_befd ._bgcdd ;return true ;}else {for _ ,_afbd :=range _ggcf .Children {if _befda :=_ecgc .putNode (_afbd ,_eafad ,_edfd );_befda {break ;};};};};return false ;};

// EastAsiaFont returns the name of run font family for East Asia.
func (_fcgc RunProperties )EastAsiaFont ()string {if _agcdg :=_fcgc ._gbeff .RFonts ;_agcdg !=nil {if _agcdg .EastAsiaAttr !=nil {return *_agcdg .EastAsiaAttr ;};};return "";};func (_gcdac *WatermarkPicture )getInnerElement (_bafa string )*_c .XSDAny {for _ ,_bgfdd :=range _gcdac ._cgfedg .Any {_gaag ,_dcedc :=_bgfdd .(*_c .XSDAny );
if _dcedc &&(_gaag .XMLName .Local ==_bafa ||_gaag .XMLName .Local =="\u0076\u003a"+_bafa ){return _gaag ;};};return nil ;};func (_afb *chart )X ()*_gea .ChartSpace {return _afb ._gfb };

// SetFirstRow controls the conditional formatting for the first row in a table.
func (_ebdea TableLook )SetFirstRow (on bool ){if !on {_ebdea ._cagee .FirstRowAttr =&_bac .ST_OnOff {};_ebdea ._cagee .FirstRowAttr .ST_OnOff1 =_bac .ST_OnOff1Off ;}else {_ebdea ._cagee .FirstRowAttr =&_bac .ST_OnOff {};_ebdea ._cagee .FirstRowAttr .ST_OnOff1 =_bac .ST_OnOff1On ;
};};

// Rows returns the rows defined in the table.
func (_eebg Table )Rows ()[]Row {_dfeb :=[]Row {};for _ ,_fdbbb :=range _eebg ._bgcdd .EG_ContentRowContent {for _ ,_befge :=range _fdbbb .ContentRowContentChoice .Tr {_dfeb =append (_dfeb ,Row {_eebg ._efgdcg ,_befge });};if _fdbbb .ContentRowContentChoice .Sdt !=nil &&_fdbbb .ContentRowContentChoice .Sdt .SdtContent !=nil {for _ ,_aefg :=range _fdbbb .ContentRowContentChoice .Sdt .SdtContent .EG_ContentRowContent {for _ ,_bfea :=range _aefg .ContentRowContentChoice .Tr {_dfeb =append (_dfeb ,Row {_eebg ._efgdcg ,_bfea });
};};};};return _dfeb ;};

// SetDefaultValue sets the default value of a FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_geef FormField )SetDefaultValue (v string ){if len (_geef ._daga .FFDataChoice )> 0{for _ ,_ebgda :=range _geef ._daga .FFDataChoice {if _ebgda .DdList !=nil {for _cgbg ,_fedg :=range _geef .PossibleValues (){if _fedg ==v {_ebgda .DdList .Default =_aag .NewCT_DecimalNumber ();
_ebgda .DdList .Default .ValAttr =int64 (_cgbg );break ;};};};};};};

// GetStyleByID returns Style by it is IdAttr.
func (_gdce *Document )GetStyleByID (id string )Style {for _ ,_feea :=range _gdce .Styles ._gcdgc .Style {if _feea .StyleIdAttr !=nil &&*_feea .StyleIdAttr ==id {return Style {_feea };};};return Style {};};

// SetTextStyleBold sets text style of watermark to bold.
func (_dcbffb *WatermarkText )SetTextStyleBold (value bool ){_aaea :=_dcbffb .GetStyle ();_aaea .SetBold (value );_dcbffb .SetStyle (_aaea );};

// AddRun adds a run of text to a hyperlink. This is the text that will be linked.
func (_fcbef HyperLink )AddRun ()Run {_fcde :=_aag .NewEG_ContentRunContent ();_fcbef ._dbdaf .PContentChoice .EG_ContentRunContent =append (_fcbef ._dbdaf .PContentChoice .EG_ContentRunContent ,_fcde );_dged :=_aag .NewCT_R ();_fcde .ContentRunContentChoice .R =_dged ;
return Run {_fcbef ._caaf ,_dged };};

// AddBreak adds a line break to a run.
func (_fbgcd Run )AddBreak (){_dcea :=_fbgcd .newIC ();_dcea .RunInnerContentChoice .Br =_aag .NewCT_Br ();};func _bcef (_efcae _e .ReaderAt ,_ceg int64 ,_cgaag string )(*Document ,error ){const _bacdb ="\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0052\u0065\u0061\u0064";
if !_ge .GetLicenseKey ().IsLicensed ()&&!_egg {_db .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_db .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");
return nil ,_cg .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_fda :="\u0075n\u006b\u006e\u006f\u0077\u006e";if _dbeb ,_cfa :=_efcae .(*_ab .File );
_cfa {_fda =_dbeb .Name ();};_addd :=New ();_addd .Numbering ._gbda =nil ;if len (_cgaag )> 0{_addd ._fegf =_cgaag ;}else {_febcf ,_gagg :=_ge .GenRefId ("\u0064\u0072");if _gagg !=nil {_dg .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_gagg );
return nil ,_gagg ;};_addd ._fegf =_febcf ;};if _fecd :=_ge .Track (_addd ._fegf ,_bacdb ,_fda );_fecd !=nil {_dg .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fecd );return nil ,_fecd ;};_dafec ,_gacd :=_bg .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0064\u006f\u0063\u0078");
if _gacd !=nil {return nil ,_gacd ;};_addd .TmpPath =_dafec ;_ccgfd ,_gacd :=_dcd .NewReader (_efcae ,_ceg );if _gacd !=nil {return nil ,_db .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_gacd );};_abf :=[]*_dcd .File {};
_abf =append (_abf ,_ccgfd .File ...);_ffda :=false ;for _ ,_eeed :=range _abf {if _eeed .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_ffda =true ;break ;};};if _ffda {_addd .CreateCustomProperties ();
};_bafc :=_addd ._ffb .ConformanceAttr ;_cdca :=_aa .DecodeMap {};_cdca .SetOnNewRelationshipFunc (_addd .onNewRelationship );_cdca .AddTarget (_c .ContentTypesFilename ,_addd .ContentTypes .X (),"",0);_cdca .AddTarget (_c .BaseRelsFilename ,_addd .Rels .X (),"",0);
if _cfdff :=_cdca .Decode (_abf );_cfdff !=nil {return nil ,_cfdff ;};_addd ._ffb .ConformanceAttr =_bafc ;for _ ,_aead :=range _abf {if _aead ==nil {continue ;};if _agdg :=_addd .AddExtraFileFromZip (_aead );_agdg !=nil {return nil ,_agdg ;};};if _ffda {_gede :=false ;
for _ ,_bacb :=range _addd .Rels .X ().Relationship {if _bacb .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_gede =true ;break ;};};if !_gede {_addd .AddCustomRelationships ();};
};return _addd ,nil ;};

// NewAnchorDrawWrapOptions return anchor drawing options property.
func NewAnchorDrawWrapOptions ()*AnchorDrawWrapOptions {_acb :=&AnchorDrawWrapOptions {};if !_acb ._egfa {_bbe ,_bdc :=_eag ();_acb ._aab =_bbe ;_acb ._gde =_bdc ;};return _acb ;};

// SetConformance sets conformance attribute of the document
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_gbba Document )SetConformance (conformanceAttr _bac .ST_ConformanceClass ){_gbba ._ffb .ConformanceAttr =conformanceAttr ;};

// VerticalAlign returns the value of run vertical align.
func (_fabfc RunProperties )VerticalAlignment ()_bac .ST_VerticalAlignRun {if _ddacc :=_fabfc ._gbeff .VertAlign ;_ddacc !=nil {return _ddacc .ValAttr ;};return 0;};

// Pict returns the pict object.
func (_fefea *WatermarkText )Pict ()*_aag .CT_Picture {return _fefea ._babcb };

// SearchStyleByName return style by its name.
func (_acddf Styles )SearchStyleByName (name string )(Style ,bool ){for _ ,_eefaf :=range _acddf ._gcdgc .Style {if _eefaf .Name !=nil {if _eefaf .Name .ValAttr ==name {return Style {_eefaf },true ;};};};return Style {},false ;};

// SetAlignment controls the paragraph alignment
func (_bcecg ParagraphStyleProperties )SetAlignment (align _aag .ST_Jc ){if align ==_aag .ST_JcUnset {_bcecg ._aefec .Jc =nil ;}else {_bcecg ._aefec .Jc =_aag .NewCT_Jc ();_bcecg ._aefec .Jc .ValAttr =align ;};};

// NewTableWidth returns a newly intialized TableWidth
func NewTableWidth ()TableWidth {return TableWidth {_aag .NewCT_TblWidth ()}};

// AddTable adds a table to the header.
func (_dff Header )AddTable ()Table {_cecb :=_aag .NewEG_ContentBlockContent ();_dff ._dcaf .EG_BlockLevelElts =append (_dff ._dcaf .EG_BlockLevelElts ,&_aag .EG_BlockLevelElts {BlockLevelEltsChoice :&_aag .EG_BlockLevelEltsChoice {EG_ContentBlockContent :[]*_aag .EG_ContentBlockContent {_cecb }}});
_gcgc :=_aag .NewCT_Tbl ();_cecb .ContentBlockContentChoice .Tbl =append (_cecb .ContentBlockContentChoice .Tbl ,_gcgc );return Table {_dff ._dcae ,_gcgc };};

// AddRow adds a row to a table.
func (_cdded Table )AddRow ()Row {_cacf :=_aag .NewEG_ContentRowContent ();_cdded ._bgcdd .EG_ContentRowContent =append (_cdded ._bgcdd .EG_ContentRowContent ,_cacf );_ddcf :=_aag .NewCT_Row ();_cacf .ContentRowContentChoice .Tr =append (_cacf .ContentRowContentChoice .Tr ,_ddcf );
return Row {_cdded ._efgdcg ,_ddcf };};const (OnOffValueUnset OnOffValue =iota ;OnOffValueOff ;OnOffValueOn ;);

// GetKerning returns the kerning (character spacing) of a run
func (_defga RunProperties )GetKerning ()_bf .Distance {if _defga ._gbeff .Kern !=nil {return _bf .Distance (float64 (*_defga ._gbeff .Kern .ValAttr .ST_UnsignedDecimalNumber )*_bf .HalfPoint );};return 0;};

// SetBold sets the run to bold.
func (_aabbf RunProperties )SetBold (b bool ){if !b {_aabbf ._gbeff .B =nil ;_aabbf ._gbeff .BCs =nil ;}else {_aabbf ._gbeff .B =_aag .NewCT_OnOff ();_aabbf ._gbeff .BCs =_aag .NewCT_OnOff ();};};

// AddFooter creates a Footer associated with the document, but doesn't add it
// to the document for display.
func (_fgdd *Document )AddFooter ()Footer {_fac :=_aag .NewFtr ();_fgdd ._cfg =append (_fgdd ._cfg ,_fac );_cafd :=_db .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_fgdd ._cfg ));_fgdd ._eeb .AddRelationship (_cafd ,_c .FooterType );
_fgdd .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_cafd ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");
_fgdd ._abg =append (_fgdd ._abg ,_cd .NewRelationships ());return Footer {_fgdd ,_fac };};

// AddBookmark adds a bookmark to a document that can then be used from a hyperlink. Name is a document
// unique name that identifies the bookmark so it can be referenced from hyperlinks.
func (_cfdbg Paragraph )AddBookmark (name string )Bookmark {_febf :=_aag .NewEG_PContent ();_cced :=_aag .NewEG_ContentRunContent ();_febf .PContentChoice .EG_ContentRunContent =append (_febf .PContentChoice .EG_ContentRunContent ,_cced );_cdaaf :=_aag .NewEG_RunLevelElts ();
_cced .ContentRunContentChoice .EG_RunLevelElts =append (_cced .ContentRunContentChoice .EG_RunLevelElts ,_cdaaf );_cdea :=_aag .NewEG_RangeMarkupElements ();_cefeb :=_aag .NewCT_Bookmark ();_cdea .RangeMarkupElementsChoice .BookmarkStart =_cefeb ;_cdaaf .RunLevelEltsChoice .EG_RangeMarkupElements =append (_cdaaf .RunLevelEltsChoice .EG_RangeMarkupElements ,_cdea );
_cdea =_aag .NewEG_RangeMarkupElements ();_cdea .RangeMarkupElementsChoice .BookmarkEnd =_aag .NewCT_MarkupRange ();_cdaaf .RunLevelEltsChoice .EG_RangeMarkupElements =append (_cdaaf .RunLevelEltsChoice .EG_RangeMarkupElements ,_cdea );_cfdbg ._dbgba .EG_PContent =append (_cfdbg ._dbgba .EG_PContent ,_febf );
_fbcc :=Bookmark {_cefeb };_fbcc .SetName (name );return _fbcc ;};

// Margins allows controlling individual cell margins.
func (_cbaf CellProperties )Margins ()CellMargins {if _cbaf ._cfb .TcMar ==nil {_cbaf ._cfb .TcMar =_aag .NewCT_TcMar ();};return CellMargins {_cbaf ._cfb .TcMar };};

// SetValue sets the value of a FormFieldTypeText or FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_ccgb FormField )SetValue (v string ){if len (_ccgb ._daga .FFDataChoice )> 0{for _ ,_edea :=range _ccgb ._daga .FFDataChoice {if _edea .DdList !=nil {for _aggae ,_fgcg :=range _ccgb .PossibleValues (){if _fgcg ==v {_edea .DdList .Result =_aag .NewCT_DecimalNumber ();
_edea .DdList .Result .ValAttr =int64 (_aggae );break ;};};}else if _edea .TextInput !=nil {_ccgb ._fcece .RunInnerContentChoice .T =_aag .NewCT_Text ();_ccgb ._fcece .RunInnerContentChoice .T .Content =v ;};};};};

// Footer is a footer for a document section.
type Footer struct{_gegg *Document ;_degea *_aag .Ftr ;};

// AbstractNumberID returns the ID that is unique within all numbering
// definitions that is used to assign the definition to a paragraph.
func (_gafea NumberingDefinition )AbstractNumberID ()int64 {return _gafea ._aaee .AbstractNumIdAttr };

// IsItalic returns true if the run has been set to italics.
func (_gdgce RunProperties )IsItalic ()bool {return _gdgce .ItalicValue ()==OnOffValueOn };

// ItalicValue returns the precise nature of the italic setting (unset, off or on).
func (_eeac RunProperties )ItalicValue ()OnOffValue {return _gdfge (_eeac ._gbeff .I )};

// ParagraphProperties returns the paragraph properties controlling text formatting within the table.
func (_fcdga TableConditionalFormatting )ParagraphProperties ()ParagraphStyleProperties {if _fcdga ._gbgag .PPr ==nil {_fcdga ._gbgag .PPr =_aag .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_fcdga ._gbgag .PPr };};

// Borders allows manipulation of the table borders.
func (_beaf TableProperties )Borders ()TableBorders {if _beaf ._abgbf .TblBorders ==nil {_beaf ._abgbf .TblBorders =_aag .NewCT_TblBorders ();};return TableBorders {_beaf ._abgbf .TblBorders };};

// SetVAlignment sets the vertical alignment for an anchored image.
func (_fg AnchoredDrawing )SetVAlignment (v _aag .WdST_AlignV ){_fg ._ae .PositionV .PosVChoice =&_aag .WdCT_PosVChoice {};_fg ._ae .PositionV .PosVChoice .Align =v ;};

// // SetBeforeLineSpacing sets spacing above paragraph in line units.
func (_cagcb Paragraph )SetBeforeLineSpacing (d _bf .Distance ){_cagcb .ensurePPr ();if _cagcb ._dbgba .PPr .Spacing ==nil {_cagcb ._dbgba .PPr .Spacing =_aag .NewCT_Spacing ();};_afgcd :=_cagcb ._dbgba .PPr .Spacing ;_afgcd .BeforeLinesAttr =_c .Int64 (int64 (d /_bf .Twips ));
};

// GetHighlight returns the HighlightColor.
func (_bcfda RunProperties )GetHighlight ()_aag .ST_HighlightColor {if _bcfda ._gbeff .Highlight !=nil {return _bcfda ._gbeff .Highlight .ValAttr ;};return _aag .ST_HighlightColorNone ;};

// AddField adds a field (automatically computed text) to the document.
func (_ffdfb Run )AddField (code string ){_ffdfb .AddFieldWithFormatting (code ,"",true )};

// SetBetween sets the between border to a specified type, color and thickness between paragraph.
func (_cbfbe ParagraphBorders )SetBetween (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_cbfbe ._gabef .Between =_aag .NewCT_Border ();_afbdc (_cbfbe ._gabef .Between ,t ,c ,thickness );};

// X returns the inner wrapped XML type.
func (_cbfgf TableProperties )X ()*_aag .CT_TblPr {return _cbfgf ._abgbf };

// StructuredDocumentTag are a tagged bit of content in a document.
type StructuredDocumentTag struct{_fcbce *Document ;_agacg *_aag .CT_SdtBlock ;};

// SetRightToLeft sets the run text goes from right to left.
func (_dgcb RunProperties )SetRightToLeft (b bool ){if !b {_dgcb ._gbeff .Rtl =nil ;}else {_dgcb ._gbeff .Rtl =_aag .NewCT_OnOff ();};};func (_fbfec *WatermarkText )getShape ()*_c .XSDAny {return _fbfec .getInnerElement ("\u0073\u0068\u0061p\u0065");};


// SetAlignment sets the alignment of a table within the page.
func (_fedbg TableProperties )SetAlignment (align _aag .ST_JcTable ){if align ==_aag .ST_JcTableUnset {_fedbg ._abgbf .Jc =nil ;}else {_fedbg ._abgbf .Jc =_aag .NewCT_JcTable ();_fedbg ._abgbf .Jc .ValAttr =align ;};};

// Paragraphs returns the paragraphs defined in a footnote.
func (_cdac Footnote )Paragraphs ()[]Paragraph {_efcec :=[]Paragraph {};for _ ,_gdfc :=range _cdac .content (){for _ ,_eaccc :=range _gdfc .ContentBlockContentChoice .P {_efcec =append (_efcec ,Paragraph {_cdac ._adae ,_eaccc });};};return _efcec ;};func (_cadec *WatermarkPicture )getShapeType ()*_c .XSDAny {return _cadec .getInnerElement ("\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e");
};

// AddTabStop adds a tab stop to the paragraph.
func (_ffggd ParagraphStyleProperties )AddTabStop (position _bf .Distance ,justificaton _aag .ST_TabJc ,leader _aag .ST_TabTlc ){if _ffggd ._aefec .Tabs ==nil {_ffggd ._aefec .Tabs =_aag .NewCT_Tabs ();};_dcacc :=_aag .NewCT_TabStop ();_dcacc .LeaderAttr =leader ;
_dcacc .ValAttr =justificaton ;_dcacc .PosAttr .Int64 =_c .Int64 (int64 (position /_bf .Twips ));_ffggd ._aefec .Tabs .Tab =append (_ffggd ._aefec .Tabs .Tab ,_dcacc );};

// SetPageMargins sets the page margins for a section
func (_dbcgf Section )SetPageMargins (top ,right ,bottom ,left ,header ,footer ,gutter _bf .Distance ){_bcedf :=_aag .NewCT_PageMar ();_bcedf .TopAttr .Int64 =_c .Int64 (int64 (top /_bf .Twips ));_bcedf .BottomAttr .Int64 =_c .Int64 (int64 (bottom /_bf .Twips ));
_bcedf .RightAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (right /_bf .Twips ));_bcedf .LeftAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (left /_bf .Twips ));_bcedf .HeaderAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (header /_bf .Twips ));
_bcedf .FooterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (footer /_bf .Twips ));_bcedf .GutterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (gutter /_bf .Twips ));_dbcgf ._fcee .PgMar =_bcedf ;};func (_fafd *Document )syncEndnoteSettings (){_dacgg :=[]int64 {};
_febc :=_fafd .Endnotes ();for _ ,_bfaf :=range _febc {if _bfaf .X ().TypeAttr !=_aag .ST_FtnEdnUnset &&_bfaf .X ().TypeAttr !=_aag .ST_FtnEdnNormal {_dacgg =append (_dacgg ,_bfaf .X ().IdAttr );};};_becg :=_fafd .Settings .X ().CT_Settings .EndnotePr ;
if _becg ==nil {_becg =_aag .NewCT_EdnDocProps ();};if len (_dacgg )==0{_becg .Endnote =nil ;return ;};_becg .Endnote =[]*_aag .CT_FtnEdnSepRef {};for _ ,_gcgf :=range _dacgg {_beee :=_aag .NewCT_FtnEdnSepRef ();_beee .IdAttr =_gcgf ;_becg .Endnote =append (_becg .Endnote ,_beee );
};};

// SetShading controls the cell shading.
func (_bbec CellProperties )SetShading (shd _aag .ST_Shd ,foreground ,fill _ff .Color ){if shd ==_aag .ST_ShdUnset {_bbec ._cfb .Shd =nil ;}else {_bbec ._cfb .Shd =_aag .NewCT_Shd ();_bbec ._cfb .Shd .ValAttr =shd ;_bbec ._cfb .Shd .ColorAttr =&_aag .ST_HexColor {};
if foreground .IsAuto (){_bbec ._cfb .Shd .ColorAttr .ST_HexColorAuto =_aag .ST_HexColorAutoAuto ;}else {_bbec ._cfb .Shd .ColorAttr .ST_HexColorRGB =foreground .AsRGBString ();};_bbec ._cfb .Shd .FillAttr =&_aag .ST_HexColor {};if fill .IsAuto (){_bbec ._cfb .Shd .FillAttr .ST_HexColorAuto =_aag .ST_HexColorAutoAuto ;
}else {_bbec ._cfb .Shd .FillAttr .ST_HexColorRGB =fill .AsRGBString ();};};};func _dbag ()*_ccc .OfcLock {_acfg :=_ccc .NewOfcLock ();_acfg .ExtAttr =_ccc .ST_ExtEdit ;_acfg .TextAttr =_bac .ST_TrueFalseTrue ;_acfg .ShapetypeAttr =_bac .ST_TrueFalseTrue ;
return _acfg ;};

// SetRowBandSize sets the number of Rows in the row band
func (_edgae TableStyleProperties )SetRowBandSize (rows int64 ){_edgae ._bacac .TblStyleRowBandSize =_aag .NewCT_DecimalNumber ();_edgae ._bacac .TblStyleRowBandSize .ValAttr =rows ;};

// SetAlignment positions an anchored image via alignment.  Offset is
// incompatible with SetOffset, whichever is called last is applied.
func (_gd AnchoredDrawing )SetAlignment (h _aag .WdST_AlignH ,v _aag .WdST_AlignV ){_gd .SetHAlignment (h );_gd .SetVAlignment (v );};

// Levels returns all of the numbering levels defined in the definition.
func (_gfded NumberingDefinition )Levels ()[]NumberingLevel {_fdcf :=[]NumberingLevel {};for _ ,_aeeb :=range _gfded ._aaee .Lvl {_fdcf =append (_fdcf ,NumberingLevel {_aeeb });};return _fdcf ;};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_gdba ParagraphProperties )RStyle ()string {if _gdba ._ggac .RPr .RStyle !=nil {return _gdba ._ggac .RPr .RStyle .ValAttr ;};return "";};

// X returns the inner wrapped XML type.
func (_eccc HyperLink )X ()*_aag .CT_Hyperlink {return _eccc ._dbdaf };

// SetImprint sets the run to imprinted text.
func (_fega RunProperties )SetImprint (b bool ){if !b {_fega ._gbeff .Imprint =nil ;}else {_fega ._gbeff .Imprint =_aag .NewCT_OnOff ();};};

// AddImageRef add ImageRef to header as relationship, returning ImageRef
// that can be used to be placed as header content.
func (_cfed Header )AddImageRef (r _cd .ImageRef )(_cd .ImageRef ,error ){var _bagde _cd .Relationships ;for _gffef ,_edebg :=range _cfed ._dcae ._acbb {if _edebg ==_cfed ._dcaf {_bagde =_cfed ._dcae ._eea [_gffef ];};};_aggaa :=_bagde .AddRelationship (r .Target (),_c .ImageType );
r .SetRelID (_aggaa .X ().IdAttr );return r ,nil ;};

// X returns the inner wrapped XML type.
func (_afdbg NumberingDefinition )X ()*_aag .CT_AbstractNum {return _afdbg ._aaee };

// SetUnhideWhenUsed controls if a semi hidden style becomes visible when used.
func (_fbfe Style )SetUnhideWhenUsed (b bool ){if b {_fbfe ._bcedg .UnhideWhenUsed =_aag .NewCT_OnOff ();}else {_fbfe ._bcedg .UnhideWhenUsed =nil ;};};

// SetToolTip sets the tooltip text for a hyperlink.
func (_ffcee HyperLink )SetToolTip (text string ){if text ==""{_ffcee ._dbdaf .TooltipAttr =nil ;}else {_ffcee ._dbdaf .TooltipAttr =_c .String (text );};};

// ExtractText returns text from the document as a DocText object.
func (_ggae *Document )ExtractText ()*DocText {_gdff :=[]TextItem {};for _ ,_dgcg :=range _ggae ._ffb .Body .EG_BlockLevelElts {_gdff =append (_gdff ,_efeb (_dgcg .BlockLevelEltsChoice .EG_ContentBlockContent ,nil )...);};var _fgbbc []listItemInfo ;_gegff :=_ggae .Paragraphs ();
for _ ,_fdcec :=range _gegff {_bacg :=_ccgc (_ggae ,_fdcec );_fgbbc =append (_fgbbc ,_bacg );};_ebca :=_ebdc (_ggae );return &DocText {Items :_gdff ,_dfddf :_fgbbc ,_agaf :_ebca };};

// HasFootnotes returns a bool based on the presence or abscence of footnotes within
// the document.
func (_gbae *Document )HasFootnotes ()bool {return _gbae ._fbgg !=nil };

// GetEffect returns the effect of the run.
func (_cgcee RunProperties )GetEffect ()_aag .ST_TextEffect {if _cgcee ._gbeff .Effect ==nil {return _aag .ST_TextEffectUnset ;};return _cgcee ._gbeff .Effect .ValAttr ;};

// SetShapeStyle sets style to the element v:shape in watermark.
func (_bfdbd *WatermarkPicture )SetShapeStyle (shapeStyle _gg .ShapeStyle ){if _bfdbd ._ffefa !=nil {_afbaf :=shapeStyle .String ();_bfdbd ._ffefa .StyleAttr =&_afbaf ;};};func (_aggg *Document )addEndnotes (){_aggg ._edga =_aag .NewEndnotes ();_aggg .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0065\u006e\u0064n\u006f\u0074e\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0065\u006e\u0064\u006e\u006f\u0074\u0065\u0073\u002b\u0078\u006d\u006c");
_aggg ._eeb .AddRelationship ("\u002fw\u006fr\u0064\u002f\u0065\u006e\u0064n\u006f\u0074e\u0073\u002e\u0078\u006d\u006c",_c .EndNotesType );_gdfd :=_aggg .Styles .AddStyle (EndnoteTextStyleId ,_aag .ST_StyleTypeParagraph ,false );_gdfd .SetName ("\u0045\u006e\u0064n\u006f\u0074\u0065\u0020\u0054\u0065\u0078\u0074");
_gdfd .SetBasedOn ("\u004e\u006f\u0072\u006d\u0061\u006c");_ggag :=_gdfd .ParagraphProperties ();_ggag .X ().SuppressLineNumbers =&_aag .CT_OnOff {};_ffdg :=_gdfd .RunProperties ();_ffdg .X ().Sz =&_aag .CT_HpsMeasure {ValAttr :_aag .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_bbf }};
_ffdg .X ().SzCs =&_aag .CT_HpsMeasure {ValAttr :_aag .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_bbf }};_bdfb :=_aggg .Styles .AddStyle (_gaf ,_aag .ST_StyleTypeCharacter ,false );_bdfb .SetName ("\u0045\u006e\u0064\u006e\u006f\u0074\u0065\u0020\u0052\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");
_ggbg :=_bdfb .RunProperties ();_ggbg .X ().VertAlign =&_aag .CT_VerticalAlignRun {ValAttr :_bac .ST_VerticalAlignRunSuperscript };_aggg .addEndnoteSeparator ();};func (_feac Paragraph )addStartComment (_cggb int64 )*_aag .CT_MarkupRange {_beaag :=_aag .NewEG_PContent ();
_feac ._dbgba .EG_PContent =append (_feac ._dbgba .EG_PContent ,_beaag );_cgaae :=_aag .NewEG_ContentRunContent ();_cbgd :=_aag .NewEG_RunLevelElts ();_eafab :=_aag .NewEG_RangeMarkupElements ();_aaeb :=_aag .NewCT_MarkupRange ();_aaeb .IdAttr =_cggb ;
_eafab .RangeMarkupElementsChoice .CommentRangeStart =_aaeb ;_beaag .PContentChoice .EG_ContentRunContent =append (_beaag .PContentChoice .EG_ContentRunContent ,_cgaae );_cgaae .ContentRunContentChoice .EG_RunLevelElts =append (_cgaae .ContentRunContentChoice .EG_RunLevelElts ,_cbgd );
_cbgd .RunLevelEltsChoice .EG_RangeMarkupElements =append (_cbgd .RunLevelEltsChoice .EG_RangeMarkupElements ,_eafab );return _aaeb ;};

// SetBorder sets the border of anchor.
func (_dag AnchoredDrawing )SetBorder (borderType _da .ST_PresetLineDashVal ,c _ff .Color ,thickness _bf .Distance ){_dga :=_bf .ToEMU (float64 (thickness ));for _ ,_bfa :=range _dag ._ae .Graphic .GraphicData .Any {if _dfb ,_fgec :=_bfa .(*_ggg .Pic );
_fgec {_dfb .SpPr .Ln =_da .NewCT_LineProperties ();_dfb .SpPr .Ln .WAttr =_c .Int32 (int32 (_dga ));_dfb .SpPr .Ln .LineDashPropertiesChoice =_da .NewEG_LineDashPropertiesChoice ();_dfb .SpPr .Ln .LineDashPropertiesChoice .PrstDash =_da .NewCT_PresetLineDashProperties ();
_dfb .SpPr .Ln .LineDashPropertiesChoice .PrstDash .ValAttr =borderType ;_dfb .SpPr .Ln .LineFillPropertiesChoice =_da .NewEG_LineFillPropertiesChoice ();_dfb .SpPr .Ln .LineFillPropertiesChoice .SolidFill =_da .NewCT_SolidColorFillProperties ();_dfb .SpPr .Ln .LineFillPropertiesChoice .SolidFill .SrgbClr =_da .NewCT_SRgbColor ();
_dfb .SpPr .Ln .LineFillPropertiesChoice .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};};_dag .setEffectExtent (_dga ,_dga ,_dga ,_dga );};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_cbag ParagraphSpacing )SetLineSpacing (d _bf .Distance ,rule _aag .ST_LineSpacingRule ){if rule ==_aag .ST_LineSpacingRuleUnset {_cbag ._cdced .LineRuleAttr =_aag .ST_LineSpacingRuleUnset ;_cbag ._cdced .LineAttr =nil ;}else {_cbag ._cdced .LineRuleAttr =rule ;
_cbag ._cdced .LineAttr =&_aag .ST_SignedTwipsMeasure {};_cbag ._cdced .LineAttr .Int64 =_c .Int64 (int64 (d /_bf .Twips ));};};var _egg =false ;

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_aabbg ParagraphProperties )ComplexSizeMeasure ()string {if _bgcga :=_aabbg ._ggac .RPr .SzCs ;_bgcga !=nil {_gecfa :=_bgcga .ValAttr ;if _gecfa .ST_PositiveUniversalMeasure !=nil {return *_gecfa .ST_PositiveUniversalMeasure ;};};return "";};

// X returns the inner wrapped XML type.
func (_acge TableWidth )X ()*_aag .CT_TblWidth {return _acge ._dbbf };

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_bfbd *Document )GetImageByRelID (relID string )(_cd .ImageRef ,bool ){_aged :=_bfbd ._eeb .GetTargetByRelId (relID );_adgf :="";for _ ,_baca :=range _bfbd ._eea {if _adgf !=""{break ;};_adgf =_baca .GetTargetByRelId (relID );};_fgf :="";for _ ,_abdc :=range _bfbd ._abg {if _fgf !=""{break ;
};_fgf =_abdc .GetTargetByRelId (relID );};for _ ,_gcab :=range _bfbd .Images {if _gcab .RelID ()==relID {return _gcab ,true ;};if _aged !=""{_gbgg :=_ag .Replace (_gcab .Target (),"\u0077\u006f\u0072d\u002f","",1);if _gbgg ==_aged {if _gcab .RelID ()==""{_gcab .SetRelID (relID );
};return _gcab ,true ;};};if _adgf !=""{_eged :=_ag .Replace (_gcab .Target (),"\u0077\u006f\u0072d\u002f","",1);if _eged ==_adgf {if _gcab .RelID ()==""{_gcab .SetRelID (relID );};return _gcab ,true ;};};if _fgf !=""{_gafe :=_ag .Replace (_gcab .Target (),"\u0077\u006f\u0072d\u002f","",1);
if _gafe ==_fgf {if _gcab .RelID ()==""{_gcab .SetRelID (relID );};return _gcab ,true ;};};};return _cd .ImageRef {},false ;};func (_cgea *Node )Remove (){switch _gefdf :=_cgea .X ().(type ){case *Paragraph :_cgea ._fgge .RemoveParagraph (*_gefdf );case *Table :_cgea ._fgge .RemoveTable (*_gefdf );
default:_dg .Log .Debug ("\u004e\u006f\u0064e \u0074\u0079\u0070\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064");};for _ ,_aaac :=range _cgea .Children {_aaac .Remove ();};};

// CharacterSpacingValue returns the value of run's characters spacing in twips (1/20 of point).
func (_aegf RunProperties )CharacterSpacingValue ()int64 {if _edcac :=_aegf ._gbeff .Spacing ;_edcac !=nil {_aecd :=_edcac .ValAttr ;if _aecd .Int64 !=nil {return *_aecd .Int64 ;};};return int64 (0);};func (_adg *Document )addEndnoteSeparator (){_effc :=_aag .NewCT_FtnEdn ();
_effc .IdAttr =-1;_effc .TypeAttr =_aag .ST_FtnEdnSeparator ;_eca :=Footnote {_adg ,_effc };_eca .X ().EG_BlockLevelElts =[]*_aag .EG_BlockLevelElts {_aag .NewEG_BlockLevelElts ()};_cgag :=_eca .AddParagraph ();_cgag .X ().PPr =nil ;_gbee :=_cgag .AddRun ();
_ffg :=_gbee .newIC ();_ffg .RunInnerContentChoice .Separator =_aag .NewCT_Empty ();_adg ._edga .CT_Endnotes .Endnote =append (_adg ._edga .CT_Endnotes .Endnote ,_effc );_effc =_aag .NewCT_FtnEdn ();_effc .IdAttr =0;_effc .TypeAttr =_aag .ST_FtnEdnContinuationSeparator ;
_eca =Footnote {_adg ,_effc };_eca .X ().EG_BlockLevelElts =[]*_aag .EG_BlockLevelElts {_aag .NewEG_BlockLevelElts ()};_cgag =_eca .AddParagraph ();_cgag .X ().PPr =nil ;_gbee =_cgag .AddRun ();_ffg =_gbee .newIC ();_ffg .RunInnerContentChoice .ContinuationSeparator =_aag .NewCT_Empty ();
_adg ._edga .CT_Endnotes .Endnote =append (_adg ._edga .CT_Endnotes .Endnote ,_effc );};

// SetPageSizeAndOrientation sets the page size and orientation for a section.
func (_bcac Section )SetPageSizeAndOrientation (w ,h _bf .Distance ,orientation _aag .ST_PageOrientation ){if _bcac ._fcee .PgSz ==nil {_bcac ._fcee .PgSz =_aag .NewCT_PageSz ();};_bcac ._fcee .PgSz .OrientAttr =orientation ;if orientation ==_aag .ST_PageOrientationLandscape {_bcac ._fcee .PgSz .WAttr =&_bac .ST_TwipsMeasure {};
_bcac ._fcee .PgSz .WAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (h /_bf .Twips ));_bcac ._fcee .PgSz .HAttr =&_bac .ST_TwipsMeasure {};_bcac ._fcee .PgSz .HAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (w /_bf .Twips ));}else {_bcac ._fcee .PgSz .WAttr =&_bac .ST_TwipsMeasure {};
_bcac ._fcee .PgSz .WAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (w /_bf .Twips ));_bcac ._fcee .PgSz .HAttr =&_bac .ST_TwipsMeasure {};_bcac ._fcee .PgSz .HAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (h /_bf .Twips ));};};

// SearchStylesById returns style by its id.
func (_cbfec Styles )SearchStyleById (id string )(Style ,bool ){for _ ,_bdfd :=range _cbfec ._gcdgc .Style {if _bdfd .StyleIdAttr !=nil {if *_bdfd .StyleIdAttr ==id {return Style {_bdfd },true ;};};};return Style {},false ;};

// BoldValue returns the precise nature of the bold setting (unset, off or on).
func (_bbeee RunProperties )BoldValue ()OnOffValue {return _gdfge (_bbeee ._gbeff .B )};

// Outline returns true if paragraph outline is on.
func (_fbede ParagraphProperties )Outline ()bool {return _faabg (_fbede ._ggac .RPr .Outline )};

// OnOffValue represents an on/off value that can also be unset
type OnOffValue byte ;func (_gcgdg Paragraph )addEndBookmark (_bcga int64 )*_aag .CT_MarkupRange {_fbfd :=_aag .NewEG_PContent ();_gcgdg ._dbgba .EG_PContent =append (_gcgdg ._dbgba .EG_PContent ,_fbfd );_afae :=_aag .NewEG_ContentRunContent ();_geefg :=_aag .NewEG_RunLevelElts ();
_fdga :=_aag .NewEG_RangeMarkupElements ();_fcab :=_aag .NewCT_MarkupRange ();_fcab .IdAttr =_bcga ;_fdga .RangeMarkupElementsChoice .BookmarkEnd =_fcab ;_fbfd .PContentChoice .EG_ContentRunContent =append (_fbfd .PContentChoice .EG_ContentRunContent ,_afae );
_afae .ContentRunContentChoice .EG_RunLevelElts =append (_afae .ContentRunContentChoice .EG_RunLevelElts ,_geefg );_geefg .RunLevelEltsChoice .EG_RangeMarkupElements =append (_geefg .RunLevelEltsChoice .EG_RangeMarkupElements ,_fdga );return _fcab ;};

// X returns the inner wrapped XML type.
func (_abea TableStyleProperties )X ()*_aag .CT_TblPrBase {return _abea ._bacac };

// FontTable returns document fontTable element.
func (_fgfa *Document )FontTable ()*_aag .Fonts {return _fgfa ._caf };

// Comment returns comment associated with given id.
func (_cebfc *Document )Comment (id int64 )Comment {for _ ,_gcgff :=range _cebfc .Comments (){if _gcgff .id ()==id {return _gcgff ;};};return Comment {};};

// GetSize return the size of anchor on the page.
func (_cdd AnchoredDrawing )GetSize ()(_gba ,_gf int64 ){return _cdd ._ae .Extent .CxAttr ,_cdd ._ae .Extent .CyAttr ;};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_cccbf ParagraphProperties )SizeMeasure ()string {if _acbbe :=_cccbf ._ggac .RPr .Sz ;_acbbe !=nil {_adaed :=_acbbe .ValAttr ;if _adaed .ST_PositiveUniversalMeasure !=nil {return *_adaed .ST_PositiveUniversalMeasure ;};};return "";};

// Footnotes returns the footnotes defined in the document.
func (_cggg *Document )Footnotes ()[]Footnote {_afea :=[]Footnote {};for _ ,_fce :=range _cggg ._fbgg .CT_Footnotes .Footnote {_afea =append (_afea ,Footnote {_cggg ,_fce });};return _afea ;};

// SetLeftPct sets the cell left margin
func (_ggc CellMargins )SetLeftPct (pct float64 ){_ggc ._fgef .Left =_aag .NewCT_TblWidth ();_faa (_ggc ._fgef .Left ,pct );};

// X returns the inner wrapped XML type.
func (_baega RunProperties )X ()*_aag .CT_RPr {return _baega ._gbeff };

// Shadow returns true if run shadow is on.
func (_cdda RunProperties )Shadow ()bool {return _faabg (_cdda ._gbeff .Shadow )};func (_abge *Document )insertTable (_gad Paragraph ,_bcd bool )Table {_gcdg :=_abge ._ffb .Body ;if _gcdg ==nil {return _abge .AddTable ();};_bdef :=_gad .X ();for _egc ,_dafe :=range _gcdg .EG_BlockLevelElts {for _ ,_dgga :=range _dafe .BlockLevelEltsChoice .EG_ContentBlockContent {for _dec ,_agbc :=range _dgga .ContentBlockContentChoice .P {if _agbc ==_bdef {_bedg :=_aag .NewCT_Tbl ();
_edgg :=_aag .NewEG_BlockLevelElts ();_eeea :=_aag .NewEG_ContentBlockContent ();_edgg .BlockLevelEltsChoice .EG_ContentBlockContent =append (_edgg .BlockLevelEltsChoice .EG_ContentBlockContent ,_eeea );_eeea .ContentBlockContentChoice .Tbl =append (_eeea .ContentBlockContentChoice .Tbl ,_bedg );
_gcdg .EG_BlockLevelElts =append (_gcdg .EG_BlockLevelElts ,nil );if _bcd {copy (_gcdg .EG_BlockLevelElts [_egc +1:],_gcdg .EG_BlockLevelElts [_egc :]);_gcdg .EG_BlockLevelElts [_egc ]=_edgg ;if _dec !=0{_ecef :=_aag .NewEG_BlockLevelElts ();_aec :=_aag .NewEG_ContentBlockContent ();
_ecef .BlockLevelEltsChoice .EG_ContentBlockContent =append (_ecef .BlockLevelEltsChoice .EG_ContentBlockContent ,_aec );_aec .ContentBlockContentChoice .P =_dgga .ContentBlockContentChoice .P [:_dec ];_gcdg .EG_BlockLevelElts =append (_gcdg .EG_BlockLevelElts ,nil );
copy (_gcdg .EG_BlockLevelElts [_egc +1:],_gcdg .EG_BlockLevelElts [_egc :]);_gcdg .EG_BlockLevelElts [_egc ]=_ecef ;};_dgga .ContentBlockContentChoice .P =_dgga .ContentBlockContentChoice .P [_dec :];}else {copy (_gcdg .EG_BlockLevelElts [_egc +2:],_gcdg .EG_BlockLevelElts [_egc +1:]);
_gcdg .EG_BlockLevelElts [_egc +1]=_edgg ;if _dec !=len (_dgga .ContentBlockContentChoice .P )-1{_cdg :=_aag .NewEG_BlockLevelElts ();_cdgd :=_aag .NewEG_ContentBlockContent ();_cdg .BlockLevelEltsChoice .EG_ContentBlockContent =append (_cdg .BlockLevelEltsChoice .EG_ContentBlockContent ,_cdgd );
_cdgd .ContentBlockContentChoice .P =_dgga .ContentBlockContentChoice .P [_dec +1:];_gcdg .EG_BlockLevelElts =append (_gcdg .EG_BlockLevelElts ,nil );copy (_gcdg .EG_BlockLevelElts [_egc +3:],_gcdg .EG_BlockLevelElts [_egc +2:]);_gcdg .EG_BlockLevelElts [_egc +2]=_cdg ;
};_dgga .ContentBlockContentChoice .P =_dgga .ContentBlockContentChoice .P [:_dec +1];};return Table {_abge ,_bedg };};};for _ ,_agbca :=range _dgga .ContentBlockContentChoice .Tbl {_fdgc :=_bcc (_agbca ,_bdef ,_bcd );if _fdgc !=nil {return Table {_abge ,_fdgc };
};};};};return _abge .AddTable ();};

// SetAll sets all of the borders to a given value.
func (_ddae ParagraphBorders )SetAll (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_ddae .SetBottom (t ,c ,thickness );_ddae .SetLeft (t ,c ,thickness );_ddae .SetRight (t ,c ,thickness );_ddae .SetTop (t ,c ,thickness );};

// SetOpacity sets opacity of watermark text in range 0.0 - 1.0, where is 1.0 is the default value.
func (_bgaad *WatermarkText )SetOpacity (value float64 ){if _bgaad ._eafacd !=nil {_efbbf :=_bgaad ._eafacd .ShapeChoice ;for _ ,_fcbd :=range _efbbf {if _fcbd .ShapeElementsChoice .Fill !=nil {_agaca :=_g .Itoa ((int )(65536.0*value ))+"\u0066";_fcbd .ShapeElementsChoice .Fill .OpacityAttr =&_agaca ;
};};};};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_edaca ParagraphStyleProperties )SetKeepOnOnePage (b bool ){if !b {_edaca ._aefec .KeepLines =nil ;}else {_edaca ._aefec .KeepLines =_aag .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_gbcb TableLook )X ()*_aag .CT_TblLook {return _gbcb ._cagee };

// SetLeftIndent controls the left indent of the paragraph.
func (_ffgfg ParagraphStyleProperties )SetLeftIndent (m _bf .Distance ){if _ffgfg ._aefec .Ind ==nil {_ffgfg ._aefec .Ind =_aag .NewCT_Ind ();};if m ==_bf .Zero {_ffgfg ._aefec .Ind .LeftAttr =nil ;}else {_ffgfg ._aefec .Ind .LeftAttr =&_aag .ST_SignedTwipsMeasure {};
_ffgfg ._aefec .Ind .LeftAttr .Int64 =_c .Int64 (int64 (m /_bf .Twips ));};};

// Style is a style within the styles.xml file.
type Style struct{_bcedg *_aag .CT_Style };

// Run is a run of text within a paragraph that shares the same formatting.
type Run struct{_edce *Document ;_dcgfd *_aag .CT_R ;};const (FormFieldTypeUnknown FormFieldType =iota ;FormFieldTypeText ;FormFieldTypeCheckBox ;FormFieldTypeDropDown ;);

// Properties returns the paragraph properties.
func (_dcaab Paragraph )Properties ()ParagraphProperties {_dcaab .ensurePPr ();return ParagraphProperties {_dcaab ._gbga ,_dcaab ._dbgba .PPr };};

// SetWidthPercent sets the table to a width percentage.
func (_dafedf TableProperties )SetWidthPercent (pct float64 ){_dafedf ._abgbf .TblW =_aag .NewCT_TblWidth ();_dafedf ._abgbf .TblW .TypeAttr =_aag .ST_TblWidthPct ;_dafedf ._abgbf .TblW .WAttr =&_aag .ST_MeasurementOrPercent {};_dafedf ._abgbf .TblW .WAttr .ST_DecimalNumberOrPercent =&_aag .ST_DecimalNumberOrPercent {};
_dafedf ._abgbf .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (pct *50));};func (_aegbd Paragraph )addSeparateFldChar ()*_aag .CT_FldChar {_ccdec :=_aegbd .addFldChar ();_ccdec .FldCharTypeAttr =_aag .ST_FldCharTypeSeparate ;
return _ccdec ;};

// SetHAlignment sets the horizontal alignment for an anchored image.
func (_ece AnchoredDrawing )SetHAlignment (h _aag .WdST_AlignH ){_ece ._ae .PositionH .PosHChoice =&_aag .WdCT_PosHChoice {};_ece ._ae .PositionH .PosHChoice .Align =h ;};

// FindNodeByCondition return node based on condition function,
// if wholeElements is true, its will extract children as next node elements.
func (_cegc *Nodes )FindNodeByCondition (f func (_ebgfa *Node )bool ,wholeElements bool )[]Node {_fffgb :=[]Node {};for _ ,_fadb :=range _cegc ._aeecg {if f (&_fadb ){_fffgb =append (_fffgb ,_fadb );};if wholeElements {_ffac :=Nodes {_aeecg :_fadb .Children };
_fffgb =append (_fffgb ,_ffac .FindNodeByCondition (f ,wholeElements )...);};};return _fffgb ;};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_ege CellBorders )SetInsideHorizontal (t _aag .ST_Border ,c _ff .Color ,thickness _bf .Distance ){_ege ._cde .InsideH =_aag .NewCT_Border ();_ebdgf (_ege ._cde .InsideH ,t ,c ,thickness );};

// Font returns the name of paragraph font family.
func (_bgad ParagraphProperties )Font ()string {if _fdggd :=_bgad ._ggac .RPr .RFonts ;_fdggd !=nil {if _fdggd .AsciiAttr !=nil {return *_fdggd .AsciiAttr ;}else if _fdggd .HAnsiAttr !=nil {return *_fdggd .HAnsiAttr ;}else if _fdggd .CsAttr !=nil {return *_fdggd .CsAttr ;
};};return "";};type chart struct{_gfb *_gea .ChartSpace ;_bdb string ;_ddc string ;};

// SetPageBreakBefore controls if there is a page break before this paragraph.
func (_daada ParagraphProperties )SetPageBreakBefore (b bool ){if !b {_daada ._ggac .PageBreakBefore =nil ;}else {_daada ._ggac .PageBreakBefore =_aag .NewCT_OnOff ();};};

// FormField is a form within a document. It references the document, so changes
// to the form field wil be reflected in the document if it is saved.
type FormField struct{_daga *_aag .CT_FFData ;_fcece *_aag .EG_RunInnerContent ;};

// AddHyperlink adds a hyperlink to a document. Adding the hyperlink to a document
// and setting it on a cell is more efficient than setting hyperlinks directly
// on a cell.
func (_cdbc Document )AddHyperlink (url string )_cd .Hyperlink {return _cdbc ._eeb .AddHyperlink (url )};

// SetFontFamily sets font family of watermark text.
func (_fbaeg *WatermarkText )SetFontFamily (value string ){_dcbb :=_fbaeg .GetStyle ();_dcbb .SetFontFamily ("\u0022"+value +"\u0022");_fbaeg .SetStyle (_dcbb );};

// SetTargetByRef sets the URL target of the hyperlink and is more efficient if a link
// destination will be used many times.
func (_ffbea HyperLink )SetTargetByRef (link _cd .Hyperlink ){_ffbea ._dbdaf .IdAttr =_c .String (_cd .Relationship (link ).ID ());_ffbea ._dbdaf .AnchorAttr =nil ;};

// SetAlignment sets the paragraph alignment
func (_fcfe NumberingLevel )SetAlignment (j _aag .ST_Jc ){if j ==_aag .ST_JcUnset {_fcfe ._ebdf .LvlJc =nil ;}else {_fcfe ._ebdf .LvlJc =_aag .NewCT_Jc ();_fcfe ._ebdf .LvlJc .ValAttr =j ;};};

// NewStyles constructs a new empty Styles
func NewStyles ()Styles {return Styles {_aag .NewStyles ()}};

// SetPictureWashout set washout to watermark picture.
func (_efga *WatermarkPicture )SetPictureWashout (isWashout bool ){if _efga ._ffefa !=nil {_gfdb :=_efga ._ffefa .ShapeChoice ;if len (_gfdb )> 0&&_gfdb [0].ShapeElementsChoice .Imagedata !=nil {if isWashout {_daaad :="\u0031\u0039\u0036\u0036\u0031\u0066";
_egbf :="\u0032\u0032\u0039\u0033\u0038\u0066";_gfdb [0].ShapeElementsChoice .Imagedata .GainAttr =&_daaad ;_gfdb [0].ShapeElementsChoice .Imagedata .BlacklevelAttr =&_egbf ;};};};};

// ReplaceTextByRegexp replace the text within node using regexp expression.
func (_agbf *Node )ReplaceTextByRegexp (rgx *_cc .Regexp ,newText string ){switch _gbdce :=_agbf .X ().(type ){case *Paragraph :for _ ,_aeab :=range _gbdce .Runs (){for _ ,_cgefa :=range _aeab ._dcgfd .EG_RunInnerContent {if _cgefa .RunInnerContentChoice .T !=nil {_cbba :=_cgefa .RunInnerContentChoice .T .Content ;
_cbba =rgx .ReplaceAllString (_cbba ,newText );_cgefa .RunInnerContentChoice .T .Content =_cbba ;};};};};for _ ,_aafg :=range _agbf .Children {_aafg .ReplaceTextByRegexp (rgx ,newText );};};func _cbfae (_afece *_aag .CT_Tbl ,_bcee ,_gaac map[int64 ]int64 ){for _ ,_fgcfd :=range _afece .EG_ContentRowContent {for _ ,_bacbb :=range _fgcfd .ContentRowContentChoice .Tr {for _ ,_bgcfd :=range _bacbb .EG_ContentCellContent {for _ ,_eece :=range _bgcfd .ContentCellContentChoice .Tc {for _ ,_cdcdd :=range _eece .EG_BlockLevelElts {for _ ,_fecb :=range _cdcdd .BlockLevelEltsChoice .EG_ContentBlockContent {for _ ,_aegb :=range _fecb .ContentBlockContentChoice .P {_cbda (_aegb ,_bcee ,_gaac );
};for _ ,_gecf :=range _fecb .ContentBlockContentChoice .Tbl {_cbfae (_gecf ,_bcee ,_gaac );};};};};};};};};

// SetStart sets the cell start margin
func (_fbg CellMargins )SetStart (d _bf .Distance ){_fbg ._fgef .Start =_aag .NewCT_TblWidth ();_fag (_fbg ._fgef .Start ,d );};

// RemoveFootnote removes a footnote from both the paragraph and the document
// the requested footnote must be anchored on the paragraph being referenced.
//
// After each removal, the rest of the footnote ids would be reordered.
func (_eaed Paragraph )RemoveFootnote (id int64 ){for _ ,_gaeef :=range _eaed .Runs (){if _edefd ,_eafge :=_gaeef .IsFootnote ();_edefd {if _eafge ==id {_eaed .RemoveRun (_gaeef );break ;};};};_eaed ._gbga .removeFootnote (id );};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_efff Header )AddImage (i _cd .Image )(_cd .ImageRef ,error ){var _cdgdf _cd .Relationships ;for _ddcec ,_eeaf :=range _efff ._dcae ._acbb {if _eeaf ==_efff ._dcaf {_cdgdf =_efff ._dcae ._eea [_ddcec ];};};_gcfg :=_cd .MakeImageRef (i ,&_efff ._dcae .DocBase ,_cdgdf );
if i .Data ==nil &&i .Path ==""{return _gcfg ,_cg .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _gcfg ,_cg .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};if i .Size .X ==0||i .Size .Y ==0{return _gcfg ,_cg .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_efff ._dcae .Images =append (_efff ._dcae .Images ,_gcfg );
_fbeg :=_db .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_efff ._dcae .Images ),i .Format );_ddbc :=_cdgdf .AddRelationship (_fbeg ,_c .ImageType );_gcfg .SetRelID (_ddbc .X ().IdAttr );return _gcfg ,nil ;
};

// Open opens and reads a document from a file (.docx).
func Open (filename string )(*Document ,error ){_cade ,_dggg :=_ab .Open (filename );if _dggg !=nil {return nil ,_db .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_dggg );};defer _cade .Close ();
_dgad ,_dggg :=_ab .Stat (filename );if _dggg !=nil {return nil ,_db .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_dggg );};_ =_dgad ;return Read (_cade ,_dgad .Size ());};