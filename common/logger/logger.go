//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package logger ;import (_b "fmt";_g "io";_e "os";_bd "path/filepath";_d "runtime";);

// Debug logs debug message.
func (_ea ConsoleLogger )Debug (format string ,args ...interface{}){if _ea .LogLevel >=LogLevelDebug {_egb :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_ea .output (_e .Stdout ,_egb ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_ag WriterLogger )IsLogLevel (level LogLevel )bool {return _ag .LogLevel >=level };const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;
);

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// Warning logs warning message.
func (_gd WriterLogger )Warning (format string ,args ...interface{}){if _gd .LogLevel >=LogLevelWarning {_fba :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_gd .logToWriter (_gd .Output ,_fba ,format ,args ...);};};

// Trace logs trace message.
func (_egd ConsoleLogger )Trace (format string ,args ...interface{}){if _egd .LogLevel >=LogLevelTrace {_da :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_egd .output (_e .Stdout ,_da ,format ,args ...);};};

// Notice logs notice message.
func (_de ConsoleLogger )Notice (format string ,args ...interface{}){if _de .LogLevel >=LogLevelNotice {_aee :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_de .output (_e .Stdout ,_aee ,format ,args ...);};};func _cec (_ac _g .Writer ,_acc string ,_gdc string ,_bad ...interface{}){_ ,_acd ,_ge ,_gae :=_d .Caller (3);
if !_gae {_acd ="\u003f\u003f\u003f";_ge =0;}else {_acd =_bd .Base (_acd );};_gc :=_b .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_acc ,_acd ,_ge )+_gdc +"\u000a";_b .Fprintf (_ac ,_gc ,_bad ...);};

// Info logs info message.
func (_def ConsoleLogger )Info (format string ,args ...interface{}){if _def .LogLevel >=LogLevelInfo {_dfd :="\u005bI\u004e\u0046\u004f\u005d\u0020";_def .output (_e .Stdout ,_dfd ,format ,args ...);};};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// Error logs error message.
func (_ce ConsoleLogger )Error (format string ,args ...interface{}){if _ce .LogLevel >=LogLevelError {_cf :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_ce .output (_e .Stdout ,_cf ,format ,args ...);};};

// DummyLogger does nothing.
type DummyLogger struct{};func (_af ConsoleLogger )output (_cff _g .Writer ,_gg string ,_bbc string ,_dfc ...interface{}){_cec (_cff ,_gg ,_bbc ,_dfc ...);};

// Error logs error message.
func (_ff WriterLogger )Error (format string ,args ...interface{}){if _ff .LogLevel >=LogLevelError {_ggd :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_ff .logToWriter (_ff .Output ,_ggd ,format ,args ...);};};

// Debug logs debug message.
func (_ga WriterLogger )Debug (format string ,args ...interface{}){if _ga .LogLevel >=LogLevelDebug {_egc :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_ga .logToWriter (_ga .Output ,_egc ,format ,args ...);};};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};

// Notice logs notice message.
func (_cg WriterLogger )Notice (format string ,args ...interface{}){if _cg .LogLevel >=LogLevelNotice {_cfa :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_cg .logToWriter (_cg .Output ,_cfa ,format ,args ...);};};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };

// Warning logs warning message.
func (_ccg ConsoleLogger )Warning (format string ,args ...interface{}){if _ccg .LogLevel >=LogLevelWarning {_gb :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_ccg .output (_e .Stdout ,_gb ,format ,args ...);};};func (_ab WriterLogger )logToWriter (_eaf _g .Writer ,_bbcd string ,_eafc string ,_dag ...interface{}){_cec (_eaf ,_bbcd ,_eafc ,_dag );
};var Log Logger =DummyLogger {};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _g .Writer ;};

// Info logs info message.
func (_ef WriterLogger )Info (format string ,args ...interface{}){if _ef .LogLevel >=LogLevelInfo {_ba :="\u005bI\u004e\u0046\u004f\u005d\u0020";_ef .logToWriter (_ef .Output ,_ba ,format ,args ...);};};

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_dfg ConsoleLogger )IsLogLevel (level LogLevel )bool {return _dfg .LogLevel >=level };

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// Trace logs trace message.
func (_aeea WriterLogger )Trace (format string ,args ...interface{}){if _aeea .LogLevel >=LogLevelTrace {_gga :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_aeea .logToWriter (_aeea .Output ,_gga ,format ,args ...);};};

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _g .Writer )*WriterLogger {logger :=WriterLogger {Output :writer ,LogLevel :logLevel };return &logger ;};

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_bb string ,_f ...interface{});Warning (_ee string ,_a ...interface{});Notice (_ae string ,_ec ...interface{});Info (_eg string ,_gf ...interface{});Debug (_fb string ,_ad ...interface{});Trace (_ca string ,_cc ...interface{});
IsLogLevel (_df LogLevel )bool ;};