//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package memstore implements tempStorage interface
// by using memory as a storage
package memstore ;import (_c "encoding/hex";_bd "errors";_b "fmt";_bb "github.com/unidoc/unioffice/common/tempstorage";_e "io";_g "io/ioutil";_dc "math/rand";_ed "sync";);

// Open returns tempstorage File object by name
func (_edb *memStorage )Open (path string )(_bb .File ,error ){_dae ,_ggg :=_edb ._gf .Load (path );if !_ggg {return nil ,_bd .New (_b .Sprintf ("\u0043\u0061\u006eno\u0074\u0020\u006f\u0070\u0065\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073",path ));
};return &memFile {_gc :_dae .(*memDataCell )},nil ;};

// RemoveAll removes all files according to the dir argument prefix
func (_fc *memStorage )RemoveAll (dir string )error {_fc ._gf .Range (func (_agc ,_dbdc interface{})bool {_fc ._gf .Delete (_agc );return true });return nil ;};type memFile struct{_gc *memDataCell ;_ea int64 ;};

// Write writes to the end of the underlying memDataCell in order to implement Writer interface
func (_da *memFile )Write (p []byte )(int ,error ){_da ._gc ._eg =append (_da ._gc ._eg ,p ...);_da ._gc ._dceb +=int64 (len (p ));return len (p ),nil ;};

// TempDir creates a name for a new temp directory using a pattern argument
func (_ggc *memStorage )TempDir (pattern string )(string ,error ){return _bg (pattern ),nil };

// Close is not applicable in this implementation
func (_ab *memFile )Close ()error {return nil };func _be (_dgd int )(string ,error ){_cd :=make ([]byte ,_dgd );if _ ,_fd :=_dc .Read (_cd );_fd !=nil {return "",_fd ;};return _c .EncodeToString (_cd ),nil ;};func _bg (_dg string )string {_bbe ,_ :=_be (6);
return _dg +_bbe };

// SetAsStorage sets temp storage as a memory storage
func SetAsStorage (){_dbd :=memStorage {_gf :_ed .Map {}};_bb .SetAsStorage (&_dbd )};

// Name returns the filename of the underlying memDataCell
func (_gcf *memFile )Name ()string {return _gcf ._gc ._bc };

// Read reads from the underlying memDataCell in order to implement Reader interface
func (_dce *memFile )Read (p []byte )(int ,error ){_f :=_dce ._ea ;_fe :=_dce ._gc ._dceb ;_gg :=int64 (len (p ));if _gg > _fe {_gg =_fe ;p =p [:_gg ];};if _f >=_fe {return 0,_e .EOF ;};_ef :=_f +_gg ;if _ef >=_fe {_ef =_fe ;};_df :=copy (p ,_dce ._gc ._eg [_f :_ef ]);
_dce ._ea =_ef ;return _df ,nil ;};

// TempFile creates a new empty file in the storage and returns it
func (_eb *memStorage )TempFile (dir ,pattern string )(_bb .File ,error ){_gd :=dir +"\u002f"+_bg (pattern );_ad :=&memDataCell {_bc :_gd ,_eg :[]byte {}};_fa :=&memFile {_gc :_ad };_eb ._gf .Store (_gd ,_ad );return _fa ,nil ;};type memStorage struct{_gf _ed .Map };


// Add reads a file from a disk and adds it to the storage
func (_fg *memStorage )Add (path string )error {_ ,_bbd :=_fg ._gf .Load (path );if _bbd {return nil ;};_ca ,_efe :=_g .ReadFile (path );if _efe !=nil {return _efe ;};_fg ._gf .Store (path ,&memDataCell {_bc :path ,_eg :_ca ,_dceb :int64 (len (_ca ))});
return nil ;};

// ReadAt reads from the underlying memDataCell at an offset provided in order to implement ReaderAt interface.
// It does not affect f.readOffset.
func (_db *memFile )ReadAt (p []byte ,readOffset int64 )(int ,error ){_gb :=_db ._gc ._dceb ;_a :=int64 (len (p ));if _a > _gb {_a =_gb ;p =p [:_a ];};if readOffset >=_gb {return 0,_e .EOF ;};_ag :=readOffset +_a ;if _ag >=_gb {_ag =_gb ;};_feg :=copy (p ,_db ._gc ._eg [readOffset :_ag ]);
return _feg ,nil ;};type memDataCell struct{_bc string ;_eg []byte ;_dceb int64 ;};