//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package memstore implements tempStorage interface
// by using memory as a storage
package memstore ;import (_g "encoding/hex";_ce "errors";_c "fmt";_ab "github.com/unidoc/unioffice/v2/common/tempstorage";_d "io";_e "io/ioutil";_dg "math/rand";_a "sync";);type memFile struct{_df *memDataCell ;_ad int64 ;};

// SetAsStorage sets temp storage as a memory storage
func SetAsStorage (){_aed :=memStorage {_ea :_a .Map {}};_ab .SetAsStorage (&_aed )};

// Add reads a file from a disk and adds it to the storage
func (_fee *memStorage )Add (path string )error {_ ,_bfd :=_fee ._ea .Load (path );if _bfd {return nil ;};_gb ,_gfa :=_e .ReadFile (path );if _gfa !=nil {return _gfa ;};_fee ._ea .Store (path ,&memDataCell {_dce :path ,_ba :_gb ,_afa :int64 (len (_gb ))});
return nil ;};

// TempDir creates a name for a new temp directory using a pattern argument
func (_dfd *memStorage )TempDir (pattern string )(string ,error ){return _ebg (pattern ),nil };type memDataCell struct{_dce string ;_ba []byte ;_afa int64 ;};

// ReadAt reads from the underlying memDataCell at an offset provided in order to implement ReaderAt interface.
// It does not affect f.readOffset.
func (_af *memFile )ReadAt (p []byte ,readOffset int64 )(int ,error ){_add :=_af ._df ._afa ;_dc :=int64 (len (p ));if _dc > _add {_dc =_add ;p =p [:_dc ];};if readOffset >=_add {return 0,_d .EOF ;};_eb :=readOffset +_dc ;if _eb >=_add {_eb =_add ;};_ceg :=copy (p ,_af ._df ._ba [readOffset :_eb ]);
return _ceg ,nil ;};

// Read reads from the underlying memDataCell in order to implement Reader interface
func (_gd *memFile )Read (p []byte )(int ,error ){_f :=_gd ._ad ;_da :=_gd ._df ._afa ;_ge :=int64 (len (p ));if _ge > _da {_ge =_da ;p =p [:_ge ];};if _f >=_da {return 0,_d .EOF ;};_cf :=_f +_ge ;if _cf >=_da {_cf =_da ;};_fg :=copy (p ,_gd ._df ._ba [_f :_cf ]);
_gd ._ad =_cf ;return _fg ,nil ;};func _fca (_fgf int )(string ,error ){_cbc :=make ([]byte ,_fgf );if _ ,_bb :=_dg .Read (_cbc );_bb !=nil {return "",_bb ;};return _g .EncodeToString (_cbc ),nil ;};type memStorage struct{_ea _a .Map };

// Write writes to the end of the underlying memDataCell in order to implement Writer interface
func (_cfd *memFile )Write (p []byte )(int ,error ){_cfd ._df ._ba =append (_cfd ._df ._ba ,p ...);_cfd ._df ._afa +=int64 (len (p ));return len (p ),nil ;};func _ebg (_dae string )string {_ddc ,_ :=_fca (6);return _dae +_ddc };

// Open returns tempstorage File object by name
func (_cd *memStorage )Open (path string )(_ab .File ,error ){_fc ,_gf :=_cd ._ea .Load (path );if !_gf {return nil ,_ce .New (_c .Sprintf ("\u0043\u0061\u006eno\u0074\u0020\u006f\u0070\u0065\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073",path ));
};return &memFile {_df :_fc .(*memDataCell )},nil ;};

// TempFile creates a new empty file in the storage and returns it
func (_ca *memStorage )TempFile (dir ,pattern string )(_ab .File ,error ){_ed :=dir +"\u002f"+_ebg (pattern );_dd :=&memDataCell {_dce :_ed ,_ba :[]byte {}};_aec :=&memFile {_df :_dd };_ca ._ea .Store (_ed ,_dd );return _aec ,nil ;};

// RemoveAll removes all files according to the dir argument prefix
func (_bf *memStorage )RemoveAll (dir string )error {_bf ._ea .Range (func (_ee ,_cb interface{})bool {_bf ._ea .Delete (_ee );return true });return nil ;};

// Close is not applicable in this implementation
func (_ae *memFile )Close ()error {return nil };

// Name returns the filename of the underlying memDataCell
func (_fe *memFile )Name ()string {return _fe ._df ._dce };