//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package memstore implements tempStorage interface
// by using memory as a storage
package memstore ;import (_e "encoding/hex";_a "errors";_b "fmt";_fc "github.com/unidoc/unioffice/common/tempstorage";_cc "io";_f "io/ioutil";_ce "math/rand";_g "sync";);

// Close is not applicable in this implementation
func (_de *memFile )Close ()error {return nil };

// Open returns tempstorage File object by name
func (_cca *memStorage )Open (path string )(_fc .File ,error ){_ae ,_fdc :=_cca ._cb .Load (path );if !_fdc {return nil ,_a .New (_b .Sprintf ("\u0043\u0061\u006eno\u0074\u0020\u006f\u0070\u0065\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073",path ));
};return &memFile {_d :_ae .(*memDataCell )},nil ;};

// Name returns the filename of the underlying memDataCell
func (_bc *memFile )Name ()string {return _bc ._d ._cce };

// Add reads a file from a disk and adds it to the storage
func (_fe *memStorage )Add (path string )error {_ ,_cf :=_fe ._cb .Load (path );if _cf {return nil ;};_gcf ,_bf :=_f .ReadFile (path );if _bf !=nil {return _bf ;};_fe ._cb .Store (path ,&memDataCell {_cce :path ,_fda :_gcf ,_eb :int64 (len (_gcf ))});return nil ;
};func _ece (_bce int )(string ,error ){_ccg :=make ([]byte ,_bce );if _ ,_ega :=_ce .Read (_ccg );_ega !=nil {return "",_ega ;};return _e .EncodeToString (_ccg ),nil ;};

// SetAsStorage sets temp storage as a memory storage
func SetAsStorage (){_da :=memStorage {_cb :_g .Map {}};_fc .SetAsStorage (&_da )};

// Read reads from the underlying memDataCell in order to implement Reader interface
func (_gf *memFile )Read (p []byte )(int ,error ){_bg :=_gf ._dc ;_ac :=_gf ._d ._eb ;_ga :=int64 (len (p ));if _ga > _ac {_ga =_ac ;p =p [:_ga ];};if _bg >=_ac {return 0,_cc .EOF ;};_eg :=_bg +_ga ;if _eg >=_ac {_eg =_ac ;};_fd :=copy (p ,_gf ._d ._fda [_bg :_eg ]);
_gf ._dc =_eg ;return _fd ,nil ;};

// ReadAt reads from the underlying memDataCell at an offset provided in order to implement ReaderAt interface.
// It does not affect f.readOffset.
func (_fdg *memFile )ReadAt (p []byte ,readOffset int64 )(int ,error ){_bd :=_fdg ._d ._eb ;_be :=int64 (len (p ));if _be > _bd {_be =_bd ;p =p [:_be ];};if readOffset >=_bd {return 0,_cc .EOF ;};_dg :=readOffset +_be ;if _dg >=_bd {_dg =_bd ;};_dgd :=copy (p ,_fdg ._d ._fda [readOffset :_dg ]);
return _dgd ,nil ;};func _ee (_ef string )string {_gb ,_ :=_ece (6);return _ef +_gb };type memStorage struct{_cb _g .Map };

// Write writes to the end of the underlying memDataCell in order to implement Writer interface
func (_gc *memFile )Write (p []byte )(int ,error ){_gc ._d ._fda =append (_gc ._d ._fda ,p ...);_gc ._d ._eb +=int64 (len (p ));return len (p ),nil ;};type memDataCell struct{_cce string ;_fda []byte ;_eb int64 ;};

// TempFile creates a new empty file in the storage and returns it
func (_dcf *memStorage )TempFile (dir ,pattern string )(_fc .File ,error ){_ca :=dir +"\u002f"+_ee (pattern );_ec :=&memDataCell {_cce :_ca ,_fda :[]byte {}};_ff :=&memFile {_d :_ec };_dcf ._cb .Store (_ca ,_ec );return _ff ,nil ;};type memFile struct{_d *memDataCell ;
_dc int64 ;};

// RemoveAll removes all files according to the dir argument prefix
func (_fb *memStorage )RemoveAll (dir string )error {_fb ._cb .Range (func (_aa ,_deb interface{})bool {_fb ._cb .Delete (_aa );return true });return nil ;};

// TempDir creates a name for a new temp directory using a pattern argument
func (_fdcf *memStorage )TempDir (pattern string )(string ,error ){return _ee (pattern ),nil };