//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package memstore implements tempStorage interface
// by using memory as a storage
package memstore ;import (_ba "encoding/hex";_bd "errors";_c "fmt";_dd "github.com/unidoc/unioffice/common/tempstorage";_gf "io";_gd "io/ioutil";_d "math/rand";_b "sync";);

// Write writes to the end of the underlying memDataCell in order to implement Writer interface
func (_be *memFile )Write (p []byte )(int ,error ){_be ._dc ._eg =append (_be ._dc ._eg ,p ...);_be ._dc ._ca +=int64 (len (p ));return len (p ),nil ;};

// TempDir creates a name for a new temp directory using a pattern argument
func (_fg *memStorage )TempDir (pattern string )(string ,error ){return _cge (pattern ),nil };

// TempFile creates a new empty file in the storage and returns it
func (_gb *memStorage )TempFile (dir ,pattern string )(_dd .File ,error ){_da :=dir +"\u002f"+_cge (pattern );_eb :=&memDataCell {_gda :_da ,_eg :[]byte {}};_gc :=&memFile {_dc :_eb };_gb ._ae .Store (_da ,_eb );return _gc ,nil ;};

// SetAsStorage sets temp storage as a memory storage
func SetAsStorage (){_fc :=memStorage {_ae :_b .Map {}};_dd .SetAsStorage (&_fc )};type memDataCell struct{_gda string ;_eg []byte ;_ca int64 ;};

// Add reads a file from a disk and adds it to the storage
func (_ff *memStorage )Add (path string )error {_ ,_gde :=_ff ._ae .Load (path );if _gde {return nil ;};_ce ,_cgb :=_gd .ReadFile (path );if _cgb !=nil {return _cgb ;};_ff ._ae .Store (path ,&memDataCell {_gda :path ,_eg :_ce ,_ca :int64 (len (_ce ))});
return nil ;};type memStorage struct{_ae _b .Map };

// Name returns the filename of the underlying memDataCell
func (_gfc *memFile )Name ()string {return _gfc ._dc ._gda };func _cge (_fa string )string {_bfc ,_ :=_daa (6);return _fa +_bfc };func _daa (_egg int )(string ,error ){_df :=make ([]byte ,_egg );if _ ,_cd :=_d .Read (_df );_cd !=nil {return "",_cd ;};return _ba .EncodeToString (_df ),nil ;
};

// Read reads from the underlying memDataCell in order to implement Reader interface
func (_a *memFile )Read (p []byte )(int ,error ){_cc :=_a ._f ;_e :=_a ._dc ._ca ;_fb :=int64 (len (p ));if _fb > _e {_fb =_e ;p =p [:_fb ];};if _cc >=_e {return 0,_gf .EOF ;};_bf :=_cc +_fb ;if _bf >=_e {_bf =_e ;};_cg :=copy (p ,_a ._dc ._eg [_cc :_bf ]);
_a ._f =_bf ;return _cg ,nil ;};

// Close is not applicable in this implementation
func (_ag *memFile )Close ()error {return nil };type memFile struct{_dc *memDataCell ;_f int64 ;};

// Open returns tempstorage File object by name
func (_bg *memStorage )Open (path string )(_dd .File ,error ){_ed ,_fd :=_bg ._ae .Load (path );if !_fd {return nil ,_bd .New (_c .Sprintf ("\u0043\u0061\u006eno\u0074\u0020\u006f\u0070\u0065\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073",path ));
};return &memFile {_dc :_ed .(*memDataCell )},nil ;};

// RemoveAll removes all files according to the dir argument prefix
func (_eba *memStorage )RemoveAll (dir string )error {_eba ._ae .Range (func (_dg ,_fe interface{})bool {_eba ._ae .Delete (_dg );return true });return nil ;};

// ReadAt reads from the underlying memDataCell at an offset provided in order to implement ReaderAt interface.
// It does not affect f.readOffset.
func (_fba *memFile )ReadAt (p []byte ,readOffset int64 )(int ,error ){_gg :=_fba ._dc ._ca ;_dca :=int64 (len (p ));if _dca > _gg {_dca =_gg ;p =p [:_dca ];};if readOffset >=_gg {return 0,_gf .EOF ;};_gge :=readOffset +_dca ;if _gge >=_gg {_gge =_gg ;
};_cf :=copy (p ,_fba ._dc ._eg [readOffset :_gge ]);return _cf ,nil ;};