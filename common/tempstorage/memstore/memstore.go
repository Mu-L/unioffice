//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package memstore implements tempStorage interface
// by using memory as a storage
package memstore ;import (_a "encoding/hex";_g "errors";_cg "fmt";_ea "github.com/unidoc/unioffice/v2/common/tempstorage";_e "io";_ce "io/ioutil";_cb "math/rand";_c "sync";);

// TempFile creates a new empty file in the storage and returns it
func (_add *memStorage )TempFile (dir ,pattern string )(_ea .File ,error ){_cge :=dir +"\u002f"+_fba (pattern );_cef :=&memDataCell {_aa :_cge ,_ad :[]byte {}};_bc :=&memFile {_gg :_cef };_add ._cag .Store (_cge ,_cef );return _bc ,nil ;};

// TempDir creates a name for a new temp directory using a pattern argument
func (_ggge *memStorage )TempDir (pattern string )(string ,error ){return _fba (pattern ),nil };

// SetAsStorage sets temp storage as a memory storage
func SetAsStorage (){_dd :=memStorage {_cag :_c .Map {}};_ea .SetAsStorage (&_dd )};func _fba (_be string )string {_ebd ,_ :=_efg (6);return _be +_ebd };type memStorage struct{_cag _c .Map };

// ReadAt reads from the underlying memDataCell at an offset provided in order to implement ReaderAt interface.
// It does not affect f.readOffset.
func (_f *memFile )ReadAt (p []byte ,readOffset int64 )(int ,error ){_ca :=_f ._gg ._ced ;_eb :=int64 (len (p ));if _eb > _ca {_eb =_ca ;p =p [:_eb ];};if readOffset >=_ca {return 0,_e .EOF ;};_bg :=readOffset +_eb ;if _bg >=_ca {_bg =_ca ;};_ac :=copy (p ,_f ._gg ._ad [readOffset :_bg ]);
return _ac ,nil ;};type memFile struct{_gg *memDataCell ;_gc int64 ;};

// RemoveAll removes all files according to the dir argument prefix
func (_fa *memStorage )RemoveAll (dir string )error {_fa ._cag .Range (func (_edg ,_fc interface{})bool {_fa ._cag .Delete (_edg );return true });return nil ;};

// Write writes to the end of the underlying memDataCell in order to implement Writer interface
func (_gd *memFile )Write (p []byte )(int ,error ){_gd ._gg ._ad =append (_gd ._gg ._ad ,p ...);_gd ._gg ._ced +=int64 (len (p ));return len (p ),nil ;};func _efg (_cf int )(string ,error ){_fe :=make ([]byte ,_cf );if _ ,_eac :=_cb .Read (_fe );_eac !=nil {return "",_eac ;
};return _a .EncodeToString (_fe ),nil ;};

// Open returns tempstorage File object by name
func (_db *memStorage )Open (path string )(_ea .File ,error ){_cgc ,_ggg :=_db ._cag .Load (path );if !_ggg {return nil ,_g .New (_cg .Sprintf ("\u0043\u0061\u006eno\u0074\u0020\u006f\u0070\u0065\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073",path ));
};return &memFile {_gg :_cgc .(*memDataCell )},nil ;};

// Name returns the filename of the underlying memDataCell
func (_ab *memFile )Name ()string {return _ab ._gg ._aa };

// Add reads a file from a disk and adds it to the storage
func (_ga *memStorage )Add (path string )error {_ ,_bd :=_ga ._cag .Load (path );if _bd {return nil ;};_eaa ,_ggd :=_ce .ReadFile (path );if _ggd !=nil {return _ggd ;};_ga ._cag .Store (path ,&memDataCell {_aa :path ,_ad :_eaa ,_ced :int64 (len (_eaa ))});
return nil ;};type memDataCell struct{_aa string ;_ad []byte ;_ced int64 ;};

// Read reads from the underlying memDataCell in order to implement Reader interface
func (_b *memFile )Read (p []byte )(int ,error ){_df :=_b ._gc ;_ed :=_b ._gg ._ced ;_ef :=int64 (len (p ));if _ef > _ed {_ef =_ed ;p =p [:_ef ];};if _df >=_ed {return 0,_e .EOF ;};_dg :=_df +_ef ;if _dg >=_ed {_dg =_ed ;};_efc :=copy (p ,_b ._gg ._ad [_df :_dg ]);
_b ._gc =_dg ;return _efc ,nil ;};

// Close is not applicable in this implementation
func (_de *memFile )Close ()error {return nil };