//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package memstore implements tempStorage interface
// by using memory as a storage
package memstore ;import (_cg "encoding/hex";_ce "errors";_e "fmt";_g "github.com/unidoc/unioffice/v2/common/tempstorage";_f "io";_b "io/ioutil";_fd "math/rand";_a "sync";);type memFile struct{_cc *memDataCell ;_bg int64 ;};

// Write writes to the end of the underlying memDataCell in order to implement Writer interface
func (_be *memFile )Write (p []byte )(int ,error ){_be ._cc ._ff =append (_be ._cc ._ff ,p ...);_be ._cc ._ed +=int64 (len (p ));return len (p ),nil ;};

// Name returns the filename of the underlying memDataCell
func (_af *memFile )Name ()string {return _af ._cc ._da };

// TempDir creates a name for a new temp directory using a pattern argument
func (_bf *memStorage )TempDir (pattern string )(string ,error ){return _ecf (pattern ),nil };

// Close is not applicable in this implementation
func (_fa *memFile )Close ()error {return nil };

// Read reads from the underlying memDataCell in order to implement Reader interface
func (_d *memFile )Read (p []byte )(int ,error ){_ac :=_d ._bg ;_cee :=_d ._cc ._ed ;_dg :=int64 (len (p ));if _dg > _cee {_dg =_cee ;p =p [:_dg ];};if _ac >=_cee {return 0,_f .EOF ;};_gd :=_ac +_dg ;if _gd >=_cee {_gd =_cee ;};_cca :=copy (p ,_d ._cc ._ff [_ac :_gd ]);
_d ._bg =_gd ;return _cca ,nil ;};func _abg (_gda int )(string ,error ){_bgb :=make ([]byte ,_gda );if _ ,_fgg :=_fd .Read (_bgb );_fgg !=nil {return "",_fgg ;};return _cg .EncodeToString (_bgb ),nil ;};

// Open returns tempstorage File object by name
func (_fg *memStorage )Open (path string )(_g .File ,error ){_df ,_ef :=_fg ._dd .Load (path );if !_ef {return nil ,_ce .New (_e .Sprintf ("\u0043\u0061\u006eno\u0074\u0020\u006f\u0070\u0065\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073",path ));
};return &memFile {_cc :_df .(*memDataCell )},nil ;};

// ReadAt reads from the underlying memDataCell at an offset provided in order to implement ReaderAt interface.
// It does not affect f.readOffset.
func (_ad *memFile )ReadAt (p []byte ,readOffset int64 )(int ,error ){_ga :=_ad ._cc ._ed ;_ge :=int64 (len (p ));if _ge > _ga {_ge =_ga ;p =p [:_ge ];};if readOffset >=_ga {return 0,_f .EOF ;};_ea :=readOffset +_ge ;if _ea >=_ga {_ea =_ga ;};_eaa :=copy (p ,_ad ._cc ._ff [readOffset :_ea ]);
return _eaa ,nil ;};

// SetAsStorage sets temp storage as a memory storage
func SetAsStorage (){_gdb :=memStorage {_dd :_a .Map {}};_g .SetAsStorage (&_gdb )};

// TempFile creates a new empty file in the storage and returns it
func (_ffa *memStorage )TempFile (dir ,pattern string )(_g .File ,error ){_acd :=dir +"\u002f"+_ecf (pattern );_efc :=&memDataCell {_da :_acd ,_ff :[]byte {}};_cb :=&memFile {_cc :_efc };_ffa ._dd .Store (_acd ,_efc );return _cb ,nil ;};type memDataCell struct{_da string ;
_ff []byte ;_ed int64 ;};

// RemoveAll removes all files according to the dir argument prefix
func (_gc *memStorage )RemoveAll (dir string )error {_gc ._dd .Range (func (_cbb ,_ec interface{})bool {_gc ._dd .Delete (_cbb );return true });return nil ;};func _ecf (_ecc string )string {_cea ,_ :=_abg (6);return _ecc +_cea };

// Add reads a file from a disk and adds it to the storage
func (_ddg *memStorage )Add (path string )error {_ ,_ae :=_ddg ._dd .Load (path );if _ae {return nil ;};_ab ,_gcc :=_b .ReadFile (path );if _gcc !=nil {return _gcc ;};_ddg ._dd .Store (path ,&memDataCell {_da :path ,_ff :_ab ,_ed :int64 (len (_ab ))});
return nil ;};type memStorage struct{_dd _a .Map };